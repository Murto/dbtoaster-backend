#include <sys/time.h>
#include "macro.hpp"
#include "types.hpp"
#include "functions.hpp"
#include "hash.hpp"
#include "hashmap.hpp"
#include "serialization.hpp"

#define ELEM_SEPARATOR "\n\t\t\t"

namespace dbtoaster {
  
  /* Definitions of auxiliary maps for storing materialized views. */
  struct NATION_entry {
    long NATION_NATIONKEY; STRING_TYPE NATION_NAME; long NATION_REGIONKEY; STRING_TYPE NATION_COMMENT; long __av; 
    explicit NATION_entry() { /*NATION_NATIONKEY = 0L; NATION_NAME = ""; NATION_REGIONKEY = 0L; NATION_COMMENT = ""; __av = 0L; */ }
    explicit NATION_entry(const long c0, const STRING_TYPE& c1, const long c2, const STRING_TYPE& c3, const long c4) { NATION_NATIONKEY = c0; NATION_NAME = c1; NATION_REGIONKEY = c2; NATION_COMMENT = c3; __av = c4; }
    NATION_entry(const NATION_entry& other) : NATION_NATIONKEY( other.NATION_NATIONKEY ), NATION_NAME( other.NATION_NAME ), NATION_REGIONKEY( other.NATION_REGIONKEY ), NATION_COMMENT( other.NATION_COMMENT ), __av( other.__av ) {}
    FORCE_INLINE NATION_entry& modify(const long c0, const STRING_TYPE& c1, const long c2, const STRING_TYPE& c3) { NATION_NATIONKEY = c0; NATION_NAME = c1; NATION_REGIONKEY = c2; NATION_COMMENT = c3;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_NAME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_REGIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_COMMENT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct NATION_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const NATION_entry& e) {
      size_t h = 0;
      hash_combine(h, e.NATION_NATIONKEY);
      hash_combine(h, e.NATION_NAME);
      hash_combine(h, e.NATION_REGIONKEY);
      hash_combine(h, e.NATION_COMMENT);
      return h;
    }
    FORCE_INLINE static bool equals(const NATION_entry& x, const NATION_entry& y) {
      return x.NATION_NATIONKEY == y.NATION_NATIONKEY && x.NATION_NAME == y.NATION_NAME && x.NATION_REGIONKEY == y.NATION_REGIONKEY && x.NATION_COMMENT == y.NATION_COMMENT;
    }
  };
  
  typedef MultiHashMap<NATION_entry,long,
    HashIndex<NATION_entry,long,NATION_mapkey0123_idxfn,true>
  > NATION_map;
  typedef HashIndex<NATION_entry,long,NATION_mapkey0123_idxfn,true> HashIndex_NATION_map_0123;
  
  struct REVENUE_entry {
    STRING_TYPE SHIPPING_SUPP_NATION; STRING_TYPE SHIPPING_CUST_NATION; long SHIPPING_L_YEAR; DOUBLE_TYPE __av; 
    explicit REVENUE_entry() { /*SHIPPING_SUPP_NATION = ""; SHIPPING_CUST_NATION = ""; SHIPPING_L_YEAR = 0L; __av = 0.0; */ }
    explicit REVENUE_entry(const STRING_TYPE& c0, const STRING_TYPE& c1, const long c2, const DOUBLE_TYPE c3) { SHIPPING_SUPP_NATION = c0; SHIPPING_CUST_NATION = c1; SHIPPING_L_YEAR = c2; __av = c3; }
    REVENUE_entry(const REVENUE_entry& other) : SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), __av( other.__av ) {}
    FORCE_INLINE REVENUE_entry& modify(const STRING_TYPE& c0, const STRING_TYPE& c1, const long c2) { SHIPPING_SUPP_NATION = c0; SHIPPING_CUST_NATION = c1; SHIPPING_L_YEAR = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUE_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const REVENUE_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      hash_combine(h, e.SHIPPING_L_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUE_entry& x, const REVENUE_entry& y) {
      return x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR;
    }
  };
  
  typedef MultiHashMap<REVENUE_entry,DOUBLE_TYPE,
    HashIndex<REVENUE_entry,DOUBLE_TYPE,REVENUE_mapkey012_idxfn,true>
  > REVENUE_map;
  typedef HashIndex<REVENUE_entry,DOUBLE_TYPE,REVENUE_mapkey012_idxfn,true> HashIndex_REVENUE_map_012;
  
  struct REVENUECUSTOMER1_entry {
    long REVENUECUSTOMERCUSTOMER_CUSTKEY; long REVENUECUSTOMERCUSTOMER_NATIONKEY; STRING_TYPE SHIPPING_CUST_NATION; long SHIPPING_L_YEAR; STRING_TYPE SHIPPING_SUPP_NATION; DOUBLE_TYPE __av; 
    explicit REVENUECUSTOMER1_entry() { /*REVENUECUSTOMERCUSTOMER_CUSTKEY = 0L; REVENUECUSTOMERCUSTOMER_NATIONKEY = 0L; SHIPPING_CUST_NATION = ""; SHIPPING_L_YEAR = 0L; SHIPPING_SUPP_NATION = ""; __av = 0.0; */ }
    explicit REVENUECUSTOMER1_entry(const long c0, const long c1, const STRING_TYPE& c2, const long c3, const STRING_TYPE& c4, const DOUBLE_TYPE c5) { REVENUECUSTOMERCUSTOMER_CUSTKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_L_YEAR = c3; SHIPPING_SUPP_NATION = c4; __av = c5; }
    REVENUECUSTOMER1_entry(const REVENUECUSTOMER1_entry& other) : REVENUECUSTOMERCUSTOMER_CUSTKEY( other.REVENUECUSTOMERCUSTOMER_CUSTKEY ), REVENUECUSTOMERCUSTOMER_NATIONKEY( other.REVENUECUSTOMERCUSTOMER_NATIONKEY ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1_entry& modify(const long c0, const long c1, const STRING_TYPE& c2, const long c3, const STRING_TYPE& c4) { REVENUECUSTOMERCUSTOMER_CUSTKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_L_YEAR = c3; SHIPPING_SUPP_NATION = c4;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1_entry& modify01(const long c0, const long c1) { REVENUECUSTOMERCUSTOMER_CUSTKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_CUSTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1_mapkey01234_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_NATIONKEY);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      hash_combine(h, e.SHIPPING_L_YEAR);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1_entry& x, const REVENUECUSTOMER1_entry& y) {
      return x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY && x.REVENUECUSTOMERCUSTOMER_NATIONKEY == y.REVENUECUSTOMERCUSTOMER_NATIONKEY && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION;
    }
  };
  
  struct REVENUECUSTOMER1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1_entry& x, const REVENUECUSTOMER1_entry& y) {
      return x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY && x.REVENUECUSTOMERCUSTOMER_NATIONKEY == y.REVENUECUSTOMERCUSTOMER_NATIONKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1_entry,DOUBLE_TYPE,
    HashIndex<REVENUECUSTOMER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1_mapkey01234_idxfn,true>,
    HashIndex<REVENUECUSTOMER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1_mapkey01_idxfn,false>
  > REVENUECUSTOMER1_map;
  typedef HashIndex<REVENUECUSTOMER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1_mapkey01234_idxfn,true> HashIndex_REVENUECUSTOMER1_map_01234;
  typedef HashIndex<REVENUECUSTOMER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1_mapkey01_idxfn,false> HashIndex_REVENUECUSTOMER1_map_01;
  
  struct REVENUECUSTOMER1LINEITEM4_entry {
    long REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY; long REVENUECUSTOMERCUSTOMER_CUSTKEY; long __av; 
    explicit REVENUECUSTOMER1LINEITEM4_entry() { /*REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY = 0L; REVENUECUSTOMERCUSTOMER_CUSTKEY = 0L; __av = 0L; */ }
    explicit REVENUECUSTOMER1LINEITEM4_entry(const long c0, const long c1, const long c2) { REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY = c0; REVENUECUSTOMERCUSTOMER_CUSTKEY = c1; __av = c2; }
    REVENUECUSTOMER1LINEITEM4_entry(const REVENUECUSTOMER1LINEITEM4_entry& other) : REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY( other.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY ), REVENUECUSTOMERCUSTOMER_CUSTKEY( other.REVENUECUSTOMERCUSTOMER_CUSTKEY ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1LINEITEM4_entry& modify(const long c0, const long c1) { REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY = c0; REVENUECUSTOMERCUSTOMER_CUSTKEY = c1;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1LINEITEM4_entry& modify0(const long c0) { REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY = c0;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1LINEITEM4_entry& modify1(const long c1) { REVENUECUSTOMERCUSTOMER_CUSTKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_CUSTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1LINEITEM4_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1LINEITEM4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1LINEITEM4_entry& x, const REVENUECUSTOMER1LINEITEM4_entry& y) {
      return x.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY == y.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY && x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY;
    }
  };
  
  struct REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1LINEITEM4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1LINEITEM4_entry& x, const REVENUECUSTOMER1LINEITEM4_entry& y) {
      return x.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY == y.REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY;
    }
  };
  
  struct REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1LINEITEM4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1LINEITEM4_entry& x, const REVENUECUSTOMER1LINEITEM4_entry& y) {
      return x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1LINEITEM4_entry,long,
    HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey01_idxfn,true>,
    HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn,false>,
    HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn,false>
  > REVENUECUSTOMER1LINEITEM4_map;
  typedef HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey01_idxfn,true> HashIndex_REVENUECUSTOMER1LINEITEM4_map_01;
  typedef HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn,false> HashIndex_REVENUECUSTOMER1LINEITEM4_map_0;
  typedef HashIndex<REVENUECUSTOMER1LINEITEM4_entry,long,REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn,false> HashIndex_REVENUECUSTOMER1LINEITEM4_map_1;
  
  struct REVENUECUSTOMER1LINEITEM5_entry {
    long REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY; long REVENUECUSTOMERCUSTOMER_NATIONKEY; STRING_TYPE SHIPPING_CUST_NATION; STRING_TYPE SHIPPING_SUPP_NATION; long __av; 
    explicit REVENUECUSTOMER1LINEITEM5_entry() { /*REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY = 0L; REVENUECUSTOMERCUSTOMER_NATIONKEY = 0L; SHIPPING_CUST_NATION = ""; SHIPPING_SUPP_NATION = ""; __av = 0L; */ }
    explicit REVENUECUSTOMER1LINEITEM5_entry(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4) { REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_SUPP_NATION = c3; __av = c4; }
    REVENUECUSTOMER1LINEITEM5_entry(const REVENUECUSTOMER1LINEITEM5_entry& other) : REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY( other.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY ), REVENUECUSTOMERCUSTOMER_NATIONKEY( other.REVENUECUSTOMERCUSTOMER_NATIONKEY ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1LINEITEM5_entry& modify(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3) { REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_SUPP_NATION = c3;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1LINEITEM5_entry& modify0(const long c0) { REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1LINEITEM5_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1LINEITEM5_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_NATIONKEY);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1LINEITEM5_entry& x, const REVENUECUSTOMER1LINEITEM5_entry& y) {
      return x.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY == y.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY && x.REVENUECUSTOMERCUSTOMER_NATIONKEY == y.REVENUECUSTOMERCUSTOMER_NATIONKEY && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION;
    }
  };
  
  struct REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1LINEITEM5_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1LINEITEM5_entry& x, const REVENUECUSTOMER1LINEITEM5_entry& y) {
      return x.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY == y.REVENUECUSTOMER1LINEITEMLINEITEM_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1LINEITEM5_entry,long,
    HashIndex<REVENUECUSTOMER1LINEITEM5_entry,long,REVENUECUSTOMER1LINEITEM5_mapkey0123_idxfn,true>,
    HashIndex<REVENUECUSTOMER1LINEITEM5_entry,long,REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn,false>
  > REVENUECUSTOMER1LINEITEM5_map;
  typedef HashIndex<REVENUECUSTOMER1LINEITEM5_entry,long,REVENUECUSTOMER1LINEITEM5_mapkey0123_idxfn,true> HashIndex_REVENUECUSTOMER1LINEITEM5_map_0123;
  typedef HashIndex<REVENUECUSTOMER1LINEITEM5_entry,long,REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn,false> HashIndex_REVENUECUSTOMER1LINEITEM5_map_0;
  
  struct REVENUECUSTOMER1SUPPLIER1_entry {
    long REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY; long REVENUECUSTOMERCUSTOMER_CUSTKEY; long SHIPPING_L_YEAR; DOUBLE_TYPE __av; 
    explicit REVENUECUSTOMER1SUPPLIER1_entry() { /*REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = 0L; REVENUECUSTOMERCUSTOMER_CUSTKEY = 0L; SHIPPING_L_YEAR = 0L; __av = 0.0; */ }
    explicit REVENUECUSTOMER1SUPPLIER1_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c0; REVENUECUSTOMERCUSTOMER_CUSTKEY = c1; SHIPPING_L_YEAR = c2; __av = c3; }
    REVENUECUSTOMER1SUPPLIER1_entry(const REVENUECUSTOMER1SUPPLIER1_entry& other) : REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY( other.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY ), REVENUECUSTOMERCUSTOMER_CUSTKEY( other.REVENUECUSTOMERCUSTOMER_CUSTKEY ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1_entry& modify(const long c0, const long c1, const long c2) { REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c0; REVENUECUSTOMERCUSTOMER_CUSTKEY = c1; SHIPPING_L_YEAR = c2;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1_entry& modify1(const long c1) { REVENUECUSTOMERCUSTOMER_CUSTKEY = c1;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1_entry& modify0(const long c0) { REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_CUSTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1SUPPLIER1_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      hash_combine(h, e.SHIPPING_L_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1_entry& x, const REVENUECUSTOMER1SUPPLIER1_entry& y) {
      return x.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY == y.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY && x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR;
    }
  };
  
  struct REVENUECUSTOMER1SUPPLIER1_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_CUSTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1_entry& x, const REVENUECUSTOMER1SUPPLIER1_entry& y) {
      return x.REVENUECUSTOMERCUSTOMER_CUSTKEY == y.REVENUECUSTOMERCUSTOMER_CUSTKEY;
    }
  };
  
  struct REVENUECUSTOMER1SUPPLIER1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1_entry& x, const REVENUECUSTOMER1SUPPLIER1_entry& y) {
      return x.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY == y.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,
    HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey012_idxfn,true>,
    HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey1_idxfn,false>,
    HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey0_idxfn,false>
  > REVENUECUSTOMER1SUPPLIER1_map;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey012_idxfn,true> HashIndex_REVENUECUSTOMER1SUPPLIER1_map_012;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey1_idxfn,false> HashIndex_REVENUECUSTOMER1SUPPLIER1_map_1;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1_mapkey0_idxfn,false> HashIndex_REVENUECUSTOMER1SUPPLIER1_map_0;
  
  struct REVENUECUSTOMER1SUPPLIER1ORDERS1_entry {
    long REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY; long REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY; long SHIPPING_L_YEAR; DOUBLE_TYPE __av; 
    explicit REVENUECUSTOMER1SUPPLIER1ORDERS1_entry() { /*REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY = 0L; REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = 0L; SHIPPING_L_YEAR = 0L; __av = 0.0; */ }
    explicit REVENUECUSTOMER1SUPPLIER1ORDERS1_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY = c0; REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c1; SHIPPING_L_YEAR = c2; __av = c3; }
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& other) : REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY( other.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY ), REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY( other.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& modify(const long c0, const long c1, const long c2) { REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY = c0; REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c1; SHIPPING_L_YEAR = c2;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& modify0(const long c0) { REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& modify1(const long c1) { REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY);
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.SHIPPING_L_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& x, const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& y) {
      return x.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY == y.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY && x.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY == y.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR;
    }
  };
  
  struct REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& x, const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& y) {
      return x.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY == y.REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY;
    }
  };
  
  struct REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& x, const REVENUECUSTOMER1SUPPLIER1ORDERS1_entry& y) {
      return x.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY == y.REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,
    HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey012_idxfn,true>,
    HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn,false>,
    HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn,false>
  > REVENUECUSTOMER1SUPPLIER1ORDERS1_map;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey012_idxfn,true> HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_012;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn,false> HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0;
  typedef HashIndex<REVENUECUSTOMER1SUPPLIER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn,false> HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1;
  
  struct REVENUECUSTOMER1ORDERS1_entry {
    long REVENUECUSTOMER1ORDERSORDERS_ORDERKEY; long REVENUECUSTOMERCUSTOMER_NATIONKEY; long SHIPPING_L_YEAR; STRING_TYPE SHIPPING_CUST_NATION; STRING_TYPE SHIPPING_SUPP_NATION; DOUBLE_TYPE __av; 
    explicit REVENUECUSTOMER1ORDERS1_entry() { /*REVENUECUSTOMER1ORDERSORDERS_ORDERKEY = 0L; REVENUECUSTOMERCUSTOMER_NATIONKEY = 0L; SHIPPING_L_YEAR = 0L; SHIPPING_CUST_NATION = ""; SHIPPING_SUPP_NATION = ""; __av = 0.0; */ }
    explicit REVENUECUSTOMER1ORDERS1_entry(const long c0, const long c1, const long c2, const STRING_TYPE& c3, const STRING_TYPE& c4, const DOUBLE_TYPE c5) { REVENUECUSTOMER1ORDERSORDERS_ORDERKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_L_YEAR = c2; SHIPPING_CUST_NATION = c3; SHIPPING_SUPP_NATION = c4; __av = c5; }
    REVENUECUSTOMER1ORDERS1_entry(const REVENUECUSTOMER1ORDERS1_entry& other) : REVENUECUSTOMER1ORDERSORDERS_ORDERKEY( other.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY ), REVENUECUSTOMERCUSTOMER_NATIONKEY( other.REVENUECUSTOMERCUSTOMER_NATIONKEY ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUECUSTOMER1ORDERS1_entry& modify(const long c0, const long c1, const long c2, const STRING_TYPE& c3, const STRING_TYPE& c4) { REVENUECUSTOMER1ORDERSORDERS_ORDERKEY = c0; REVENUECUSTOMERCUSTOMER_NATIONKEY = c1; SHIPPING_L_YEAR = c2; SHIPPING_CUST_NATION = c3; SHIPPING_SUPP_NATION = c4;  return *this; }
    FORCE_INLINE REVENUECUSTOMER1ORDERS1_entry& modify0(const long c0) { REVENUECUSTOMER1ORDERSORDERS_ORDERKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMER1ORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUECUSTOMERCUSTOMER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUECUSTOMER1ORDERS1_mapkey01234_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1ORDERS1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY);
      hash_combine(h, e.REVENUECUSTOMERCUSTOMER_NATIONKEY);
      hash_combine(h, e.SHIPPING_L_YEAR);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1ORDERS1_entry& x, const REVENUECUSTOMER1ORDERS1_entry& y) {
      return x.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY == y.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY && x.REVENUECUSTOMERCUSTOMER_NATIONKEY == y.REVENUECUSTOMERCUSTOMER_NATIONKEY && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION;
    }
  };
  
  struct REVENUECUSTOMER1ORDERS1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUECUSTOMER1ORDERS1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUECUSTOMER1ORDERS1_entry& x, const REVENUECUSTOMER1ORDERS1_entry& y) {
      return x.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY == y.REVENUECUSTOMER1ORDERSORDERS_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<REVENUECUSTOMER1ORDERS1_entry,DOUBLE_TYPE,
    HashIndex<REVENUECUSTOMER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1ORDERS1_mapkey01234_idxfn,true>,
    HashIndex<REVENUECUSTOMER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1ORDERS1_mapkey0_idxfn,false>
  > REVENUECUSTOMER1ORDERS1_map;
  typedef HashIndex<REVENUECUSTOMER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1ORDERS1_mapkey01234_idxfn,true> HashIndex_REVENUECUSTOMER1ORDERS1_map_01234;
  typedef HashIndex<REVENUECUSTOMER1ORDERS1_entry,DOUBLE_TYPE,REVENUECUSTOMER1ORDERS1_mapkey0_idxfn,false> HashIndex_REVENUECUSTOMER1ORDERS1_map_0;
  
  struct REVENUEORDERS1_T_2_entry {
    long S_NATIONKEY; long REVENUEORDERSORDERS_ORDERKEY; long SHIPPING_L_YEAR; DOUBLE_TYPE __av; 
    explicit REVENUEORDERS1_T_2_entry() { /*S_NATIONKEY = 0L; REVENUEORDERSORDERS_ORDERKEY = 0L; SHIPPING_L_YEAR = 0L; __av = 0.0; */ }
    explicit REVENUEORDERS1_T_2_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { S_NATIONKEY = c0; REVENUEORDERSORDERS_ORDERKEY = c1; SHIPPING_L_YEAR = c2; __av = c3; }
    REVENUEORDERS1_T_2_entry(const REVENUEORDERS1_T_2_entry& other) : S_NATIONKEY( other.S_NATIONKEY ), REVENUEORDERSORDERS_ORDERKEY( other.REVENUEORDERSORDERS_ORDERKEY ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), __av( other.__av ) {}
    FORCE_INLINE REVENUEORDERS1_T_2_entry& modify(const long c0, const long c1, const long c2) { S_NATIONKEY = c0; REVENUEORDERSORDERS_ORDERKEY = c1; SHIPPING_L_YEAR = c2;  return *this; }
    FORCE_INLINE REVENUEORDERS1_T_2_entry& modify1(const long c1) { REVENUEORDERSORDERS_ORDERKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, S_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUEORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUEORDERS1_T_2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const REVENUEORDERS1_T_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.S_NATIONKEY);
      hash_combine(h, e.REVENUEORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SHIPPING_L_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUEORDERS1_T_2_entry& x, const REVENUEORDERS1_T_2_entry& y) {
      return x.S_NATIONKEY == y.S_NATIONKEY && x.REVENUEORDERSORDERS_ORDERKEY == y.REVENUEORDERSORDERS_ORDERKEY && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR;
    }
  };
  
  struct REVENUEORDERS1_T_2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUEORDERS1_T_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUEORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUEORDERS1_T_2_entry& x, const REVENUEORDERS1_T_2_entry& y) {
      return x.REVENUEORDERSORDERS_ORDERKEY == y.REVENUEORDERSORDERS_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<REVENUEORDERS1_T_2_entry,DOUBLE_TYPE,
    HashIndex<REVENUEORDERS1_T_2_entry,DOUBLE_TYPE,REVENUEORDERS1_T_2_mapkey012_idxfn,true>,
    HashIndex<REVENUEORDERS1_T_2_entry,DOUBLE_TYPE,REVENUEORDERS1_T_2_mapkey1_idxfn,false>
  > REVENUEORDERS1_T_2_map;
  typedef HashIndex<REVENUEORDERS1_T_2_entry,DOUBLE_TYPE,REVENUEORDERS1_T_2_mapkey012_idxfn,true> HashIndex_REVENUEORDERS1_T_2_map_012;
  typedef HashIndex<REVENUEORDERS1_T_2_entry,DOUBLE_TYPE,REVENUEORDERS1_T_2_mapkey1_idxfn,false> HashIndex_REVENUEORDERS1_T_2_map_1;
  
  struct REVENUEORDERS1_T_3_entry {
    long REVENUEORDERSORDERS_CUSTKEY; long C_NATIONKEY; long __av; 
    explicit REVENUEORDERS1_T_3_entry() { /*REVENUEORDERSORDERS_CUSTKEY = 0L; C_NATIONKEY = 0L; __av = 0L; */ }
    explicit REVENUEORDERS1_T_3_entry(const long c0, const long c1, const long c2) { REVENUEORDERSORDERS_CUSTKEY = c0; C_NATIONKEY = c1; __av = c2; }
    REVENUEORDERS1_T_3_entry(const REVENUEORDERS1_T_3_entry& other) : REVENUEORDERSORDERS_CUSTKEY( other.REVENUEORDERSORDERS_CUSTKEY ), C_NATIONKEY( other.C_NATIONKEY ), __av( other.__av ) {}
    FORCE_INLINE REVENUEORDERS1_T_3_entry& modify(const long c0, const long c1) { REVENUEORDERSORDERS_CUSTKEY = c0; C_NATIONKEY = c1;  return *this; }
    FORCE_INLINE REVENUEORDERS1_T_3_entry& modify0(const long c0) { REVENUEORDERSORDERS_CUSTKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUEORDERSORDERS_CUSTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, C_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUEORDERS1_T_3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUEORDERS1_T_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUEORDERSORDERS_CUSTKEY);
      hash_combine(h, e.C_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUEORDERS1_T_3_entry& x, const REVENUEORDERS1_T_3_entry& y) {
      return x.REVENUEORDERSORDERS_CUSTKEY == y.REVENUEORDERSORDERS_CUSTKEY && x.C_NATIONKEY == y.C_NATIONKEY;
    }
  };
  
  struct REVENUEORDERS1_T_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUEORDERS1_T_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUEORDERSORDERS_CUSTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUEORDERS1_T_3_entry& x, const REVENUEORDERS1_T_3_entry& y) {
      return x.REVENUEORDERSORDERS_CUSTKEY == y.REVENUEORDERSORDERS_CUSTKEY;
    }
  };
  
  typedef MultiHashMap<REVENUEORDERS1_T_3_entry,long,
    HashIndex<REVENUEORDERS1_T_3_entry,long,REVENUEORDERS1_T_3_mapkey01_idxfn,true>,
    HashIndex<REVENUEORDERS1_T_3_entry,long,REVENUEORDERS1_T_3_mapkey0_idxfn,false>
  > REVENUEORDERS1_T_3_map;
  typedef HashIndex<REVENUEORDERS1_T_3_entry,long,REVENUEORDERS1_T_3_mapkey01_idxfn,true> HashIndex_REVENUEORDERS1_T_3_map_01;
  typedef HashIndex<REVENUEORDERS1_T_3_entry,long,REVENUEORDERS1_T_3_mapkey0_idxfn,false> HashIndex_REVENUEORDERS1_T_3_map_0;
  
  struct REVENUELINEITEM4_T_1_entry {
    long C_NATIONKEY; long S_NATIONKEY; STRING_TYPE SHIPPING_CUST_NATION; STRING_TYPE SHIPPING_SUPP_NATION; long __av; 
    explicit REVENUELINEITEM4_T_1_entry() { /*C_NATIONKEY = 0L; S_NATIONKEY = 0L; SHIPPING_CUST_NATION = ""; SHIPPING_SUPP_NATION = ""; __av = 0L; */ }
    explicit REVENUELINEITEM4_T_1_entry(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4) { C_NATIONKEY = c0; S_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_SUPP_NATION = c3; __av = c4; }
    REVENUELINEITEM4_T_1_entry(const REVENUELINEITEM4_T_1_entry& other) : C_NATIONKEY( other.C_NATIONKEY ), S_NATIONKEY( other.S_NATIONKEY ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUELINEITEM4_T_1_entry& modify(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3) { C_NATIONKEY = c0; S_NATIONKEY = c1; SHIPPING_CUST_NATION = c2; SHIPPING_SUPP_NATION = c3;  return *this; }
    FORCE_INLINE REVENUELINEITEM4_T_1_entry& modify01(const long c0, const long c1) { C_NATIONKEY = c0; S_NATIONKEY = c1;  return *this; }
    FORCE_INLINE REVENUELINEITEM4_T_1_entry& modify0(const long c0) { C_NATIONKEY = c0;  return *this; }
    FORCE_INLINE REVENUELINEITEM4_T_1_entry& modify1(const long c1) { S_NATIONKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, C_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, S_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUELINEITEM4_T_1_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.C_NATIONKEY);
      hash_combine(h, e.S_NATIONKEY);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_1_entry& x, const REVENUELINEITEM4_T_1_entry& y) {
      return x.C_NATIONKEY == y.C_NATIONKEY && x.S_NATIONKEY == y.S_NATIONKEY && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION;
    }
  };
  
  struct REVENUELINEITEM4_T_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.C_NATIONKEY);
      hash_combine(h, e.S_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_1_entry& x, const REVENUELINEITEM4_T_1_entry& y) {
      return x.C_NATIONKEY == y.C_NATIONKEY && x.S_NATIONKEY == y.S_NATIONKEY;
    }
  };
  
  struct REVENUELINEITEM4_T_1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.C_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_1_entry& x, const REVENUELINEITEM4_T_1_entry& y) {
      return x.C_NATIONKEY == y.C_NATIONKEY;
    }
  };
  
  struct REVENUELINEITEM4_T_1_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.S_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_1_entry& x, const REVENUELINEITEM4_T_1_entry& y) {
      return x.S_NATIONKEY == y.S_NATIONKEY;
    }
  };
  
  typedef MultiHashMap<REVENUELINEITEM4_T_1_entry,long,
    HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey0123_idxfn,true>,
    HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey01_idxfn,false>,
    HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey0_idxfn,false>,
    HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey1_idxfn,false>
  > REVENUELINEITEM4_T_1_map;
  typedef HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey0123_idxfn,true> HashIndex_REVENUELINEITEM4_T_1_map_0123;
  typedef HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey01_idxfn,false> HashIndex_REVENUELINEITEM4_T_1_map_01;
  typedef HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey0_idxfn,false> HashIndex_REVENUELINEITEM4_T_1_map_0;
  typedef HashIndex<REVENUELINEITEM4_T_1_entry,long,REVENUELINEITEM4_T_1_mapkey1_idxfn,false> HashIndex_REVENUELINEITEM4_T_1_map_1;
  
  struct REVENUELINEITEM4_T_2_entry {
    long C_NATIONKEY; long REVENUELINEITEMLINEITEM_ORDERKEY; long __av; 
    explicit REVENUELINEITEM4_T_2_entry() { /*C_NATIONKEY = 0L; REVENUELINEITEMLINEITEM_ORDERKEY = 0L; __av = 0L; */ }
    explicit REVENUELINEITEM4_T_2_entry(const long c0, const long c1, const long c2) { C_NATIONKEY = c0; REVENUELINEITEMLINEITEM_ORDERKEY = c1; __av = c2; }
    REVENUELINEITEM4_T_2_entry(const REVENUELINEITEM4_T_2_entry& other) : C_NATIONKEY( other.C_NATIONKEY ), REVENUELINEITEMLINEITEM_ORDERKEY( other.REVENUELINEITEMLINEITEM_ORDERKEY ), __av( other.__av ) {}
    FORCE_INLINE REVENUELINEITEM4_T_2_entry& modify(const long c0, const long c1) { C_NATIONKEY = c0; REVENUELINEITEMLINEITEM_ORDERKEY = c1;  return *this; }
    FORCE_INLINE REVENUELINEITEM4_T_2_entry& modify1(const long c1) { REVENUELINEITEMLINEITEM_ORDERKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, C_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUELINEITEMLINEITEM_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUELINEITEM4_T_2_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.C_NATIONKEY);
      hash_combine(h, e.REVENUELINEITEMLINEITEM_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_2_entry& x, const REVENUELINEITEM4_T_2_entry& y) {
      return x.C_NATIONKEY == y.C_NATIONKEY && x.REVENUELINEITEMLINEITEM_ORDERKEY == y.REVENUELINEITEMLINEITEM_ORDERKEY;
    }
  };
  
  struct REVENUELINEITEM4_T_2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUELINEITEMLINEITEM_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_2_entry& x, const REVENUELINEITEM4_T_2_entry& y) {
      return x.REVENUELINEITEMLINEITEM_ORDERKEY == y.REVENUELINEITEMLINEITEM_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<REVENUELINEITEM4_T_2_entry,long,
    HashIndex<REVENUELINEITEM4_T_2_entry,long,REVENUELINEITEM4_T_2_mapkey01_idxfn,true>,
    HashIndex<REVENUELINEITEM4_T_2_entry,long,REVENUELINEITEM4_T_2_mapkey1_idxfn,false>
  > REVENUELINEITEM4_T_2_map;
  typedef HashIndex<REVENUELINEITEM4_T_2_entry,long,REVENUELINEITEM4_T_2_mapkey01_idxfn,true> HashIndex_REVENUELINEITEM4_T_2_map_01;
  typedef HashIndex<REVENUELINEITEM4_T_2_entry,long,REVENUELINEITEM4_T_2_mapkey1_idxfn,false> HashIndex_REVENUELINEITEM4_T_2_map_1;
  
  struct REVENUELINEITEM4_T_3_entry {
    long REVENUELINEITEMLINEITEM_SUPPKEY; long S_NATIONKEY; long __av; 
    explicit REVENUELINEITEM4_T_3_entry() { /*REVENUELINEITEMLINEITEM_SUPPKEY = 0L; S_NATIONKEY = 0L; __av = 0L; */ }
    explicit REVENUELINEITEM4_T_3_entry(const long c0, const long c1, const long c2) { REVENUELINEITEMLINEITEM_SUPPKEY = c0; S_NATIONKEY = c1; __av = c2; }
    REVENUELINEITEM4_T_3_entry(const REVENUELINEITEM4_T_3_entry& other) : REVENUELINEITEMLINEITEM_SUPPKEY( other.REVENUELINEITEMLINEITEM_SUPPKEY ), S_NATIONKEY( other.S_NATIONKEY ), __av( other.__av ) {}
    FORCE_INLINE REVENUELINEITEM4_T_3_entry& modify(const long c0, const long c1) { REVENUELINEITEMLINEITEM_SUPPKEY = c0; S_NATIONKEY = c1;  return *this; }
    FORCE_INLINE REVENUELINEITEM4_T_3_entry& modify0(const long c0) { REVENUELINEITEMLINEITEM_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUELINEITEMLINEITEM_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, S_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUELINEITEM4_T_3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUELINEITEMLINEITEM_SUPPKEY);
      hash_combine(h, e.S_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_3_entry& x, const REVENUELINEITEM4_T_3_entry& y) {
      return x.REVENUELINEITEMLINEITEM_SUPPKEY == y.REVENUELINEITEMLINEITEM_SUPPKEY && x.S_NATIONKEY == y.S_NATIONKEY;
    }
  };
  
  struct REVENUELINEITEM4_T_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUELINEITEM4_T_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUELINEITEMLINEITEM_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUELINEITEM4_T_3_entry& x, const REVENUELINEITEM4_T_3_entry& y) {
      return x.REVENUELINEITEMLINEITEM_SUPPKEY == y.REVENUELINEITEMLINEITEM_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<REVENUELINEITEM4_T_3_entry,long,
    HashIndex<REVENUELINEITEM4_T_3_entry,long,REVENUELINEITEM4_T_3_mapkey01_idxfn,true>,
    HashIndex<REVENUELINEITEM4_T_3_entry,long,REVENUELINEITEM4_T_3_mapkey0_idxfn,false>
  > REVENUELINEITEM4_T_3_map;
  typedef HashIndex<REVENUELINEITEM4_T_3_entry,long,REVENUELINEITEM4_T_3_mapkey01_idxfn,true> HashIndex_REVENUELINEITEM4_T_3_map_01;
  typedef HashIndex<REVENUELINEITEM4_T_3_entry,long,REVENUELINEITEM4_T_3_mapkey0_idxfn,false> HashIndex_REVENUELINEITEM4_T_3_map_0;
  
  struct REVENUESUPPLIER1_entry {
    long REVENUESUPPLIERSUPPLIER_SUPPKEY; long REVENUESUPPLIERSUPPLIER_NATIONKEY; long SHIPPING_L_YEAR; STRING_TYPE SHIPPING_SUPP_NATION; STRING_TYPE SHIPPING_CUST_NATION; DOUBLE_TYPE __av; 
    explicit REVENUESUPPLIER1_entry() { /*REVENUESUPPLIERSUPPLIER_SUPPKEY = 0L; REVENUESUPPLIERSUPPLIER_NATIONKEY = 0L; SHIPPING_L_YEAR = 0L; SHIPPING_SUPP_NATION = ""; SHIPPING_CUST_NATION = ""; __av = 0.0; */ }
    explicit REVENUESUPPLIER1_entry(const long c0, const long c1, const long c2, const STRING_TYPE& c3, const STRING_TYPE& c4, const DOUBLE_TYPE c5) { REVENUESUPPLIERSUPPLIER_SUPPKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_L_YEAR = c2; SHIPPING_SUPP_NATION = c3; SHIPPING_CUST_NATION = c4; __av = c5; }
    REVENUESUPPLIER1_entry(const REVENUESUPPLIER1_entry& other) : REVENUESUPPLIERSUPPLIER_SUPPKEY( other.REVENUESUPPLIERSUPPLIER_SUPPKEY ), REVENUESUPPLIERSUPPLIER_NATIONKEY( other.REVENUESUPPLIERSUPPLIER_NATIONKEY ), SHIPPING_L_YEAR( other.SHIPPING_L_YEAR ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUESUPPLIER1_entry& modify(const long c0, const long c1, const long c2, const STRING_TYPE& c3, const STRING_TYPE& c4) { REVENUESUPPLIERSUPPLIER_SUPPKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_L_YEAR = c2; SHIPPING_SUPP_NATION = c3; SHIPPING_CUST_NATION = c4;  return *this; }
    FORCE_INLINE REVENUESUPPLIER1_entry& modify01(const long c0, const long c1) { REVENUESUPPLIERSUPPLIER_SUPPKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIERSUPPLIER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_L_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUESUPPLIER1_mapkey01234_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_NATIONKEY);
      hash_combine(h, e.SHIPPING_L_YEAR);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1_entry& x, const REVENUESUPPLIER1_entry& y) {
      return x.REVENUESUPPLIERSUPPLIER_SUPPKEY == y.REVENUESUPPLIERSUPPLIER_SUPPKEY && x.REVENUESUPPLIERSUPPLIER_NATIONKEY == y.REVENUESUPPLIERSUPPLIER_NATIONKEY && x.SHIPPING_L_YEAR == y.SHIPPING_L_YEAR && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION;
    }
  };
  
  struct REVENUESUPPLIER1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1_entry& x, const REVENUESUPPLIER1_entry& y) {
      return x.REVENUESUPPLIERSUPPLIER_SUPPKEY == y.REVENUESUPPLIERSUPPLIER_SUPPKEY && x.REVENUESUPPLIERSUPPLIER_NATIONKEY == y.REVENUESUPPLIERSUPPLIER_NATIONKEY;
    }
  };
  
  typedef MultiHashMap<REVENUESUPPLIER1_entry,DOUBLE_TYPE,
    HashIndex<REVENUESUPPLIER1_entry,DOUBLE_TYPE,REVENUESUPPLIER1_mapkey01234_idxfn,true>,
    HashIndex<REVENUESUPPLIER1_entry,DOUBLE_TYPE,REVENUESUPPLIER1_mapkey01_idxfn,false>
  > REVENUESUPPLIER1_map;
  typedef HashIndex<REVENUESUPPLIER1_entry,DOUBLE_TYPE,REVENUESUPPLIER1_mapkey01234_idxfn,true> HashIndex_REVENUESUPPLIER1_map_01234;
  typedef HashIndex<REVENUESUPPLIER1_entry,DOUBLE_TYPE,REVENUESUPPLIER1_mapkey01_idxfn,false> HashIndex_REVENUESUPPLIER1_map_01;
  
  struct REVENUESUPPLIER1ORDERS2_entry {
    long REVENUESUPPLIER1ORDERSORDERS_CUSTKEY; long REVENUESUPPLIERSUPPLIER_NATIONKEY; STRING_TYPE SHIPPING_SUPP_NATION; STRING_TYPE SHIPPING_CUST_NATION; long __av; 
    explicit REVENUESUPPLIER1ORDERS2_entry() { /*REVENUESUPPLIER1ORDERSORDERS_CUSTKEY = 0L; REVENUESUPPLIERSUPPLIER_NATIONKEY = 0L; SHIPPING_SUPP_NATION = ""; SHIPPING_CUST_NATION = ""; __av = 0L; */ }
    explicit REVENUESUPPLIER1ORDERS2_entry(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4) { REVENUESUPPLIER1ORDERSORDERS_CUSTKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_SUPP_NATION = c2; SHIPPING_CUST_NATION = c3; __av = c4; }
    REVENUESUPPLIER1ORDERS2_entry(const REVENUESUPPLIER1ORDERS2_entry& other) : REVENUESUPPLIER1ORDERSORDERS_CUSTKEY( other.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY ), REVENUESUPPLIERSUPPLIER_NATIONKEY( other.REVENUESUPPLIERSUPPLIER_NATIONKEY ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUESUPPLIER1ORDERS2_entry& modify(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3) { REVENUESUPPLIER1ORDERSORDERS_CUSTKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_SUPP_NATION = c2; SHIPPING_CUST_NATION = c3;  return *this; }
    FORCE_INLINE REVENUESUPPLIER1ORDERS2_entry& modify0(const long c0) { REVENUESUPPLIER1ORDERSORDERS_CUSTKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIER1ORDERSORDERS_CUSTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIERSUPPLIER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUESUPPLIER1ORDERS2_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1ORDERS2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY);
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_NATIONKEY);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1ORDERS2_entry& x, const REVENUESUPPLIER1ORDERS2_entry& y) {
      return x.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY == y.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY && x.REVENUESUPPLIERSUPPLIER_NATIONKEY == y.REVENUESUPPLIERSUPPLIER_NATIONKEY && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION;
    }
  };
  
  struct REVENUESUPPLIER1ORDERS2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1ORDERS2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1ORDERS2_entry& x, const REVENUESUPPLIER1ORDERS2_entry& y) {
      return x.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY == y.REVENUESUPPLIER1ORDERSORDERS_CUSTKEY;
    }
  };
  
  typedef MultiHashMap<REVENUESUPPLIER1ORDERS2_entry,long,
    HashIndex<REVENUESUPPLIER1ORDERS2_entry,long,REVENUESUPPLIER1ORDERS2_mapkey0123_idxfn,true>,
    HashIndex<REVENUESUPPLIER1ORDERS2_entry,long,REVENUESUPPLIER1ORDERS2_mapkey0_idxfn,false>
  > REVENUESUPPLIER1ORDERS2_map;
  typedef HashIndex<REVENUESUPPLIER1ORDERS2_entry,long,REVENUESUPPLIER1ORDERS2_mapkey0123_idxfn,true> HashIndex_REVENUESUPPLIER1ORDERS2_map_0123;
  typedef HashIndex<REVENUESUPPLIER1ORDERS2_entry,long,REVENUESUPPLIER1ORDERS2_mapkey0_idxfn,false> HashIndex_REVENUESUPPLIER1ORDERS2_map_0;
  
  struct REVENUESUPPLIER1LINEITEM4_entry {
    long REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY; long REVENUESUPPLIERSUPPLIER_NATIONKEY; STRING_TYPE SHIPPING_SUPP_NATION; STRING_TYPE SHIPPING_CUST_NATION; long __av; 
    explicit REVENUESUPPLIER1LINEITEM4_entry() { /*REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY = 0L; REVENUESUPPLIERSUPPLIER_NATIONKEY = 0L; SHIPPING_SUPP_NATION = ""; SHIPPING_CUST_NATION = ""; __av = 0L; */ }
    explicit REVENUESUPPLIER1LINEITEM4_entry(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4) { REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_SUPP_NATION = c2; SHIPPING_CUST_NATION = c3; __av = c4; }
    REVENUESUPPLIER1LINEITEM4_entry(const REVENUESUPPLIER1LINEITEM4_entry& other) : REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY( other.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY ), REVENUESUPPLIERSUPPLIER_NATIONKEY( other.REVENUESUPPLIERSUPPLIER_NATIONKEY ), SHIPPING_SUPP_NATION( other.SHIPPING_SUPP_NATION ), SHIPPING_CUST_NATION( other.SHIPPING_CUST_NATION ), __av( other.__av ) {}
    FORCE_INLINE REVENUESUPPLIER1LINEITEM4_entry& modify(const long c0, const long c1, const STRING_TYPE& c2, const STRING_TYPE& c3) { REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY = c0; REVENUESUPPLIERSUPPLIER_NATIONKEY = c1; SHIPPING_SUPP_NATION = c2; SHIPPING_CUST_NATION = c3;  return *this; }
    FORCE_INLINE REVENUESUPPLIER1LINEITEM4_entry& modify0(const long c0) { REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, REVENUESUPPLIERSUPPLIER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_SUPP_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SHIPPING_CUST_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct REVENUESUPPLIER1LINEITEM4_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1LINEITEM4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY);
      hash_combine(h, e.REVENUESUPPLIERSUPPLIER_NATIONKEY);
      hash_combine(h, e.SHIPPING_SUPP_NATION);
      hash_combine(h, e.SHIPPING_CUST_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1LINEITEM4_entry& x, const REVENUESUPPLIER1LINEITEM4_entry& y) {
      return x.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY == y.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY && x.REVENUESUPPLIERSUPPLIER_NATIONKEY == y.REVENUESUPPLIERSUPPLIER_NATIONKEY && x.SHIPPING_SUPP_NATION == y.SHIPPING_SUPP_NATION && x.SHIPPING_CUST_NATION == y.SHIPPING_CUST_NATION;
    }
  };
  
  struct REVENUESUPPLIER1LINEITEM4_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const REVENUESUPPLIER1LINEITEM4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const REVENUESUPPLIER1LINEITEM4_entry& x, const REVENUESUPPLIER1LINEITEM4_entry& y) {
      return x.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY == y.REVENUESUPPLIER1LINEITEMLINEITEM_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<REVENUESUPPLIER1LINEITEM4_entry,long,
    HashIndex<REVENUESUPPLIER1LINEITEM4_entry,long,REVENUESUPPLIER1LINEITEM4_mapkey0123_idxfn,true>,
    HashIndex<REVENUESUPPLIER1LINEITEM4_entry,long,REVENUESUPPLIER1LINEITEM4_mapkey0_idxfn,false>
  > REVENUESUPPLIER1LINEITEM4_map;
  typedef HashIndex<REVENUESUPPLIER1LINEITEM4_entry,long,REVENUESUPPLIER1LINEITEM4_mapkey0123_idxfn,true> HashIndex_REVENUESUPPLIER1LINEITEM4_map_0123;
  typedef HashIndex<REVENUESUPPLIER1LINEITEM4_entry,long,REVENUESUPPLIER1LINEITEM4_mapkey0_idxfn,false> HashIndex_REVENUESUPPLIER1LINEITEM4_map_0;
  
  struct tuple3_SS_L {
    STRING_TYPE _1; STRING_TYPE _2; long __av;
    explicit tuple3_SS_L() { }
    explicit tuple3_SS_L(const STRING_TYPE& c1, const STRING_TYPE& c2, long c__av=0L) { _1 = c1; _2 = c2; __av = c__av;}
    int operator==(const tuple3_SS_L &rhs) const { return ((this->_1==rhs._1) && (this->_2==rhs._2)); }
    FORCE_INLINE tuple3_SS_L& modify(const STRING_TYPE& c0, const STRING_TYPE& c1, long c__av) { _1 = c0; _2 = c1; __av = c__av; return *this; }
    static bool equals(const tuple3_SS_L &x, const tuple3_SS_L &y) { return ((x._1==y._1) && (x._2==y._2)); }
    static long hash(const tuple3_SS_L &e) {
      size_t h = 0;
      hash_combine(h, e._1);
      hash_combine(h, e._2);
      return h;
    }
  };
  
  /* Type definition providing a way to access the results of the sql program */
  struct tlq_t{
    struct timeval t0,t; long tT,tN,tS;
    tlq_t(): tN(0), tS(0) { gettimeofday(&t0,NULL); }
  
  /* Serialization Code */
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const {
  
      ar << "\n";
      const REVENUE_map& _REVENUE = get_REVENUE();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(REVENUE), _REVENUE, "\t");
  
    }
  
    /* Functions returning / computing the results of top level queries */
    const REVENUE_map& get_REVENUE() const {
      return REVENUE;
    
    }
  
  protected:
  
    /* Data structures used for storing / computing top level queries */
    REVENUE_map REVENUE;
  
  };
  
  /* Type definition providing a way to incrementally maintain the results of the sql program */
  struct data_t : tlq_t{
    data_t(): tlq_t(), agg1(16U) {
      c1 = Udate(STRING_TYPE("1996-12-31"));
      c4 = STRING_TYPE("FRANCE");
      c2 = Udate(STRING_TYPE("1995-1-1"));
      c3 = STRING_TYPE("GERMANY");
    }
  
  
    /* Trigger functions for table relations */
    void on_insert_NATION(const long nation_nationkey, const STRING_TYPE nation_name, const long nation_regionkey, const STRING_TYPE nation_comment) {
      NATION_entry e(nation_nationkey, nation_name, nation_regionkey, nation_comment, 1L);
      NATION.addOrDelOnZero(e,1L);
    }
    
    
    
    /* Trigger functions for stream relations */
    void on_insert_LINEITEM(const long lineitem_orderkey, const long lineitem_partkey, const long lineitem_suppkey, const long lineitem_linenumber, const DOUBLE_TYPE lineitem_quantity, const DOUBLE_TYPE lineitem_extendedprice, const DOUBLE_TYPE lineitem_discount, const DOUBLE_TYPE lineitem_tax, const STRING_TYPE& lineitem_returnflag, const STRING_TYPE& lineitem_linestatus, const date lineitem_shipdate, const date lineitem_commitdate, const date lineitem_receiptdate, const STRING_TYPE& lineitem_shipinstruct, const STRING_TYPE& lineitem_shipmode, const STRING_TYPE& lineitem_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        long l1 = Uyear_part(lineitem_shipdate);
        agg1.clear();
        
        { //slice 
          const HashIndex_REVENUELINEITEM4_T_3_map_0* i1 = static_cast<HashIndex_REVENUELINEITEM4_T_3_map_0*>(REVENUELINEITEM4_T_3.index[1]);
          const HASH_RES_t h3 = REVENUELINEITEM4_T_3_mapkey0_idxfn::hash(se4.modify0(lineitem_suppkey));
          HashIndex_REVENUELINEITEM4_T_3_map_0::IdxNode* n1 = static_cast<HashIndex_REVENUELINEITEM4_T_3_map_0::IdxNode*>(i1->slice(se4, h3));
          REVENUELINEITEM4_T_3_entry* e1;
         
          if (n1 && (e1 = n1->obj)) {
            do {                
              long s_nationkey = e1->S_NATIONKEY;
              long v1 = e1->__av;
              { //slice 
                const HashIndex_REVENUELINEITEM4_T_2_map_1* i2 = static_cast<HashIndex_REVENUELINEITEM4_T_2_map_1*>(REVENUELINEITEM4_T_2.index[1]);
                const HASH_RES_t h2 = REVENUELINEITEM4_T_2_mapkey1_idxfn::hash(se3.modify1(lineitem_orderkey));
                HashIndex_REVENUELINEITEM4_T_2_map_1::IdxNode* n2 = static_cast<HashIndex_REVENUELINEITEM4_T_2_map_1::IdxNode*>(i2->slice(se3, h2));
                REVENUELINEITEM4_T_2_entry* e2;
               
                if (n2 && (e2 = n2->obj)) {
                  do {                
                    long c_nationkey = e2->C_NATIONKEY;
                    long v2 = e2->__av;
                    { //slice 
                      const HashIndex_REVENUELINEITEM4_T_1_map_01* i3 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_01*>(REVENUELINEITEM4_T_1.index[1]);
                      const HASH_RES_t h1 = REVENUELINEITEM4_T_1_mapkey01_idxfn::hash(se2.modify01(c_nationkey, s_nationkey));
                      HashIndex_REVENUELINEITEM4_T_1_map_01::IdxNode* n3 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_01::IdxNode*>(i3->slice(se2, h1));
                      REVENUELINEITEM4_T_1_entry* e3;
                     
                      if (n3 && (e3 = n3->obj)) {
                        do {                
                          STRING_TYPE shipping_cust_nation = e3->SHIPPING_CUST_NATION;
                          STRING_TYPE shipping_supp_nation = e3->SHIPPING_SUPP_NATION;
                          long v3 = e3->__av;
                          agg1.addOrDelOnZero(st1.modify(shipping_cust_nation,shipping_supp_nation,(v1 * (v2 * v3))), (v1 * (v2 * v3)));
                          n3 = n3->nxt;
                        } while (n3 && (e3 = n3->obj) && h1 == n3->hash &&  REVENUELINEITEM4_T_1_mapkey01_idxfn::equals(se2, *e3)); 
                      }
                    }
                    n2 = n2->nxt;
                  } while (n2 && (e2 = n2->obj) && h2 == n2->hash &&  REVENUELINEITEM4_T_2_mapkey1_idxfn::equals(se3, *e2)); 
                }
              }
              n1 = n1->nxt;
            } while (n1 && (e1 = n1->obj) && h3 == n1->hash &&  REVENUELINEITEM4_T_3_mapkey0_idxfn::equals(se4, *e1)); 
          }
        }{  // temp foreach
          const HashIndex<tuple3_SS_L, long>* i4 = static_cast<HashIndex<tuple3_SS_L, long>*>(agg1.index[0]);
          HashIndex<tuple3_SS_L, long>::IdxNode* n4; 
          tuple3_SS_L* e4;
        
          for (size_t i = 0; i < i4->size_; i++)
          {
            n4 = i4->buckets_ + i;
            while (n4 && (e4 = n4->obj))
            {
              STRING_TYPE shipping_cust_nation = e4->_1;
              STRING_TYPE shipping_supp_nation = e4->_2;  
              long v4 = e4->__av; 
            (/*if */(c1 >= lineitem_shipdate && lineitem_shipdate >= c2) ? REVENUE.addOrDelOnZero(se1.modify(shipping_supp_nation,shipping_cust_nation,l1),(v4 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))) : (void)0);      
              n4 = n4->nxt;
            }
          }
        }long l2 = Uyear_part(lineitem_shipdate);
        { //slice 
          const HashIndex_REVENUECUSTOMER1LINEITEM4_map_0* i5 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_0*>(REVENUECUSTOMER1LINEITEM4.index[1]);
          const HASH_RES_t h5 = REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn::hash(se7.modify0(lineitem_orderkey));
          HashIndex_REVENUECUSTOMER1LINEITEM4_map_0::IdxNode* n5 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_0::IdxNode*>(i5->slice(se7, h5));
          REVENUECUSTOMER1LINEITEM4_entry* e5;
         
          if (n5 && (e5 = n5->obj)) {
            do {                
              long revenuecustomercustomer_custkey = e5->REVENUECUSTOMERCUSTOMER_CUSTKEY;
              long v5 = e5->__av;
              { //slice 
                const HashIndex_REVENUECUSTOMER1LINEITEM5_map_0* i6 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM5_map_0*>(REVENUECUSTOMER1LINEITEM5.index[1]);
                const HASH_RES_t h4 = REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn::hash(se6.modify0(lineitem_suppkey));
                HashIndex_REVENUECUSTOMER1LINEITEM5_map_0::IdxNode* n6 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM5_map_0::IdxNode*>(i6->slice(se6, h4));
                REVENUECUSTOMER1LINEITEM5_entry* e6;
               
                if (n6 && (e6 = n6->obj)) {
                  do {                
                    long revenuecustomercustomer_nationkey = e6->REVENUECUSTOMERCUSTOMER_NATIONKEY;
                    STRING_TYPE shipping_cust_nation = e6->SHIPPING_CUST_NATION;
                    STRING_TYPE shipping_supp_nation = e6->SHIPPING_SUPP_NATION;
                    long v6 = e6->__av;
                    (/*if */(c1 >= lineitem_shipdate && lineitem_shipdate >= c2) ? REVENUECUSTOMER1.addOrDelOnZero(se5.modify(revenuecustomercustomer_custkey,revenuecustomercustomer_nationkey,shipping_cust_nation,l2,shipping_supp_nation),(v5 * (v6 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))))) : (void)0);
                    n6 = n6->nxt;
                  } while (n6 && (e6 = n6->obj) && h4 == n6->hash &&  REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn::equals(se6, *e6)); 
                }
              }
              n5 = n5->nxt;
            } while (n5 && (e5 = n5->obj) && h5 == n5->hash &&  REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn::equals(se7, *e5)); 
          }
        }long l3 = Uyear_part(lineitem_shipdate);
        { //slice 
          const HashIndex_REVENUECUSTOMER1LINEITEM4_map_0* i7 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_0*>(REVENUECUSTOMER1LINEITEM4.index[1]);
          const HASH_RES_t h6 = REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn::hash(se9.modify0(lineitem_orderkey));
          HashIndex_REVENUECUSTOMER1LINEITEM4_map_0::IdxNode* n7 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_0::IdxNode*>(i7->slice(se9, h6));
          REVENUECUSTOMER1LINEITEM4_entry* e7;
         
          if (n7 && (e7 = n7->obj)) {
            do {                
              long revenuecustomercustomer_custkey = e7->REVENUECUSTOMERCUSTOMER_CUSTKEY;
              long v7 = e7->__av;
              (/*if */(c1 >= lineitem_shipdate && lineitem_shipdate >= c2) ? REVENUECUSTOMER1SUPPLIER1.addOrDelOnZero(se8.modify(lineitem_suppkey,revenuecustomercustomer_custkey,l3),(v7 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))) : (void)0);
              n7 = n7->nxt;
            } while (n7 && (e7 = n7->obj) && h6 == n7->hash &&  REVENUECUSTOMER1LINEITEM4_mapkey0_idxfn::equals(se9, *e7)); 
          }
        }long l4 = Uyear_part(lineitem_shipdate);
        (/*if */(lineitem_shipdate >= c2 && c1 >= lineitem_shipdate) ? REVENUECUSTOMER1SUPPLIER1ORDERS1.addOrDelOnZero(se10.modify(lineitem_orderkey,lineitem_suppkey,l4),(lineitem_extendedprice * (1L + (-1L * lineitem_discount)))) : (void)0);
        long l5 = Uyear_part(lineitem_shipdate);
        { //slice 
          const HashIndex_REVENUECUSTOMER1LINEITEM5_map_0* i8 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM5_map_0*>(REVENUECUSTOMER1LINEITEM5.index[1]);
          const HASH_RES_t h7 = REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn::hash(se12.modify0(lineitem_suppkey));
          HashIndex_REVENUECUSTOMER1LINEITEM5_map_0::IdxNode* n8 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM5_map_0::IdxNode*>(i8->slice(se12, h7));
          REVENUECUSTOMER1LINEITEM5_entry* e8;
         
          if (n8 && (e8 = n8->obj)) {
            do {                
              long revenuecustomercustomer_nationkey = e8->REVENUECUSTOMERCUSTOMER_NATIONKEY;
              STRING_TYPE shipping_cust_nation = e8->SHIPPING_CUST_NATION;
              STRING_TYPE shipping_supp_nation = e8->SHIPPING_SUPP_NATION;
              long v8 = e8->__av;
              (/*if */(c1 >= lineitem_shipdate && lineitem_shipdate >= c2) ? REVENUECUSTOMER1ORDERS1.addOrDelOnZero(se11.modify(lineitem_orderkey,revenuecustomercustomer_nationkey,l5,shipping_cust_nation,shipping_supp_nation),(v8 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))) : (void)0);
              n8 = n8->nxt;
            } while (n8 && (e8 = n8->obj) && h7 == n8->hash &&  REVENUECUSTOMER1LINEITEM5_mapkey0_idxfn::equals(se12, *e8)); 
          }
        }long l6 = Uyear_part(lineitem_shipdate);
        { //slice 
          const HashIndex_REVENUELINEITEM4_T_3_map_0* i9 = static_cast<HashIndex_REVENUELINEITEM4_T_3_map_0*>(REVENUELINEITEM4_T_3.index[1]);
          const HASH_RES_t h8 = REVENUELINEITEM4_T_3_mapkey0_idxfn::hash(se14.modify0(lineitem_suppkey));
          HashIndex_REVENUELINEITEM4_T_3_map_0::IdxNode* n9 = static_cast<HashIndex_REVENUELINEITEM4_T_3_map_0::IdxNode*>(i9->slice(se14, h8));
          REVENUELINEITEM4_T_3_entry* e9;
         
          if (n9 && (e9 = n9->obj)) {
            do {                
              long s_nationkey = e9->S_NATIONKEY;
              long v9 = e9->__av;
              (/*if */(lineitem_shipdate >= c2 && c1 >= lineitem_shipdate) ? REVENUEORDERS1_T_2.addOrDelOnZero(se13.modify(s_nationkey,lineitem_orderkey,l6),(v9 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))) : (void)0);
              n9 = n9->nxt;
            } while (n9 && (e9 = n9->obj) && h8 == n9->hash &&  REVENUELINEITEM4_T_3_mapkey0_idxfn::equals(se14, *e9)); 
          }
        }long l7 = Uyear_part(lineitem_shipdate);
        { //slice 
          const HashIndex_REVENUESUPPLIER1LINEITEM4_map_0* i10 = static_cast<HashIndex_REVENUESUPPLIER1LINEITEM4_map_0*>(REVENUESUPPLIER1LINEITEM4.index[1]);
          const HASH_RES_t h9 = REVENUESUPPLIER1LINEITEM4_mapkey0_idxfn::hash(se16.modify0(lineitem_orderkey));
          HashIndex_REVENUESUPPLIER1LINEITEM4_map_0::IdxNode* n10 = static_cast<HashIndex_REVENUESUPPLIER1LINEITEM4_map_0::IdxNode*>(i10->slice(se16, h9));
          REVENUESUPPLIER1LINEITEM4_entry* e10;
         
          if (n10 && (e10 = n10->obj)) {
            do {                
              long revenuesuppliersupplier_nationkey = e10->REVENUESUPPLIERSUPPLIER_NATIONKEY;
              STRING_TYPE shipping_supp_nation = e10->SHIPPING_SUPP_NATION;
              STRING_TYPE shipping_cust_nation = e10->SHIPPING_CUST_NATION;
              long v10 = e10->__av;
              (/*if */(lineitem_shipdate >= c2 && c1 >= lineitem_shipdate) ? REVENUESUPPLIER1.addOrDelOnZero(se15.modify(lineitem_suppkey,revenuesuppliersupplier_nationkey,l7,shipping_supp_nation,shipping_cust_nation),(v10 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))) : (void)0);
              n10 = n10->nxt;
            } while (n10 && (e10 = n10->obj) && h9 == n10->hash &&  REVENUESUPPLIER1LINEITEM4_mapkey0_idxfn::equals(se16, *e10)); 
          }
        }
      }
    }
    void on_insert_ORDERS(const long orders_orderkey, const long orders_custkey, const STRING_TYPE& orders_orderstatus, const DOUBLE_TYPE orders_totalprice, const date orders_orderdate, const STRING_TYPE& orders_orderpriority, const STRING_TYPE& orders_clerk, const long orders_shippriority, const STRING_TYPE& orders_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        { //slice 
          const HashIndex_REVENUEORDERS1_T_2_map_1* i11 = static_cast<HashIndex_REVENUEORDERS1_T_2_map_1*>(REVENUEORDERS1_T_2.index[1]);
          const HASH_RES_t h12 = REVENUEORDERS1_T_2_mapkey1_idxfn::hash(se20.modify1(orders_orderkey));
          HashIndex_REVENUEORDERS1_T_2_map_1::IdxNode* n11 = static_cast<HashIndex_REVENUEORDERS1_T_2_map_1::IdxNode*>(i11->slice(se20, h12));
          REVENUEORDERS1_T_2_entry* e11;
         
          if (n11 && (e11 = n11->obj)) {
            do {                
              long s_nationkey = e11->S_NATIONKEY;
              long shipping_l_year = e11->SHIPPING_L_YEAR;
              DOUBLE_TYPE v11 = e11->__av;
              { //slice 
                const HashIndex_REVENUEORDERS1_T_3_map_0* i12 = static_cast<HashIndex_REVENUEORDERS1_T_3_map_0*>(REVENUEORDERS1_T_3.index[1]);
                const HASH_RES_t h11 = REVENUEORDERS1_T_3_mapkey0_idxfn::hash(se19.modify0(orders_custkey));
                HashIndex_REVENUEORDERS1_T_3_map_0::IdxNode* n12 = static_cast<HashIndex_REVENUEORDERS1_T_3_map_0::IdxNode*>(i12->slice(se19, h11));
                REVENUEORDERS1_T_3_entry* e12;
               
                if (n12 && (e12 = n12->obj)) {
                  do {                
                    long c_nationkey = e12->C_NATIONKEY;
                    long v12 = e12->__av;
                    { //slice 
                      const HashIndex_REVENUELINEITEM4_T_1_map_01* i13 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_01*>(REVENUELINEITEM4_T_1.index[1]);
                      const HASH_RES_t h10 = REVENUELINEITEM4_T_1_mapkey01_idxfn::hash(se18.modify01(c_nationkey, s_nationkey));
                      HashIndex_REVENUELINEITEM4_T_1_map_01::IdxNode* n13 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_01::IdxNode*>(i13->slice(se18, h10));
                      REVENUELINEITEM4_T_1_entry* e13;
                     
                      if (n13 && (e13 = n13->obj)) {
                        do {                
                          STRING_TYPE shipping_cust_nation = e13->SHIPPING_CUST_NATION;
                          STRING_TYPE shipping_supp_nation = e13->SHIPPING_SUPP_NATION;
                          long v13 = e13->__av;
                          REVENUE.addOrDelOnZero(se17.modify(shipping_supp_nation,shipping_cust_nation,shipping_l_year),(v11 * (v12 * v13)));
                          n13 = n13->nxt;
                        } while (n13 && (e13 = n13->obj) && h10 == n13->hash &&  REVENUELINEITEM4_T_1_mapkey01_idxfn::equals(se18, *e13)); 
                      }
                    }
                    n12 = n12->nxt;
                  } while (n12 && (e12 = n12->obj) && h11 == n12->hash &&  REVENUEORDERS1_T_3_mapkey0_idxfn::equals(se19, *e12)); 
                }
              }
              n11 = n11->nxt;
            } while (n11 && (e11 = n11->obj) && h12 == n11->hash &&  REVENUEORDERS1_T_2_mapkey1_idxfn::equals(se20, *e11)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1ORDERS1_map_0* i14 = static_cast<HashIndex_REVENUECUSTOMER1ORDERS1_map_0*>(REVENUECUSTOMER1ORDERS1.index[1]);
          const HASH_RES_t h13 = REVENUECUSTOMER1ORDERS1_mapkey0_idxfn::hash(se22.modify0(orders_orderkey));
          HashIndex_REVENUECUSTOMER1ORDERS1_map_0::IdxNode* n14 = static_cast<HashIndex_REVENUECUSTOMER1ORDERS1_map_0::IdxNode*>(i14->slice(se22, h13));
          REVENUECUSTOMER1ORDERS1_entry* e14;
         
          if (n14 && (e14 = n14->obj)) {
            do {                
              long revenuecustomercustomer_nationkey = e14->REVENUECUSTOMERCUSTOMER_NATIONKEY;
              long shipping_l_year = e14->SHIPPING_L_YEAR;
              STRING_TYPE shipping_cust_nation = e14->SHIPPING_CUST_NATION;
              STRING_TYPE shipping_supp_nation = e14->SHIPPING_SUPP_NATION;
              DOUBLE_TYPE v14 = e14->__av;
              REVENUECUSTOMER1.addOrDelOnZero(se21.modify(orders_custkey,revenuecustomercustomer_nationkey,shipping_cust_nation,shipping_l_year,shipping_supp_nation),v14);
              n14 = n14->nxt;
            } while (n14 && (e14 = n14->obj) && h13 == n14->hash &&  REVENUECUSTOMER1ORDERS1_mapkey0_idxfn::equals(se22, *e14)); 
          }
        }REVENUECUSTOMER1LINEITEM4.addOrDelOnZero(se23.modify(orders_orderkey,orders_custkey),1L);
        { //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0* i15 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0*>(REVENUECUSTOMER1SUPPLIER1ORDERS1.index[1]);
          const HASH_RES_t h14 = REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn::hash(se25.modify0(orders_orderkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0::IdxNode* n15 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0::IdxNode*>(i15->slice(se25, h14));
          REVENUECUSTOMER1SUPPLIER1ORDERS1_entry* e15;
         
          if (n15 && (e15 = n15->obj)) {
            do {                
              long revenuecustomer1suppliersupplier_suppkey = e15->REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY;
              long shipping_l_year = e15->SHIPPING_L_YEAR;
              DOUBLE_TYPE v15 = e15->__av;
              REVENUECUSTOMER1SUPPLIER1.addOrDelOnZero(se24.modify(revenuecustomer1suppliersupplier_suppkey,orders_custkey,shipping_l_year),v15);
              n15 = n15->nxt;
            } while (n15 && (e15 = n15->obj) && h14 == n15->hash &&  REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn::equals(se25, *e15)); 
          }
        }{ //slice 
          const HashIndex_REVENUEORDERS1_T_3_map_0* i16 = static_cast<HashIndex_REVENUEORDERS1_T_3_map_0*>(REVENUEORDERS1_T_3.index[1]);
          const HASH_RES_t h15 = REVENUEORDERS1_T_3_mapkey0_idxfn::hash(se27.modify0(orders_custkey));
          HashIndex_REVENUEORDERS1_T_3_map_0::IdxNode* n16 = static_cast<HashIndex_REVENUEORDERS1_T_3_map_0::IdxNode*>(i16->slice(se27, h15));
          REVENUEORDERS1_T_3_entry* e16;
         
          if (n16 && (e16 = n16->obj)) {
            do {                
              long c_nationkey = e16->C_NATIONKEY;
              long v16 = e16->__av;
              REVENUELINEITEM4_T_2.addOrDelOnZero(se26.modify(c_nationkey,orders_orderkey),v16);
              n16 = n16->nxt;
            } while (n16 && (e16 = n16->obj) && h15 == n16->hash &&  REVENUEORDERS1_T_3_mapkey0_idxfn::equals(se27, *e16)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0* i17 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0*>(REVENUECUSTOMER1SUPPLIER1ORDERS1.index[1]);
          const HASH_RES_t h17 = REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn::hash(se30.modify0(orders_orderkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0::IdxNode* n17 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_0::IdxNode*>(i17->slice(se30, h17));
          REVENUECUSTOMER1SUPPLIER1ORDERS1_entry* e17;
         
          if (n17 && (e17 = n17->obj)) {
            do {                
              long revenuesuppliersupplier_suppkey = e17->REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY;
              long shipping_l_year = e17->SHIPPING_L_YEAR;
              DOUBLE_TYPE v17 = e17->__av;
              { //slice 
                const HashIndex_REVENUESUPPLIER1ORDERS2_map_0* i18 = static_cast<HashIndex_REVENUESUPPLIER1ORDERS2_map_0*>(REVENUESUPPLIER1ORDERS2.index[1]);
                const HASH_RES_t h16 = REVENUESUPPLIER1ORDERS2_mapkey0_idxfn::hash(se29.modify0(orders_custkey));
                HashIndex_REVENUESUPPLIER1ORDERS2_map_0::IdxNode* n18 = static_cast<HashIndex_REVENUESUPPLIER1ORDERS2_map_0::IdxNode*>(i18->slice(se29, h16));
                REVENUESUPPLIER1ORDERS2_entry* e18;
               
                if (n18 && (e18 = n18->obj)) {
                  do {                
                    long revenuesuppliersupplier_nationkey = e18->REVENUESUPPLIERSUPPLIER_NATIONKEY;
                    STRING_TYPE shipping_supp_nation = e18->SHIPPING_SUPP_NATION;
                    STRING_TYPE shipping_cust_nation = e18->SHIPPING_CUST_NATION;
                    long v18 = e18->__av;
                    REVENUESUPPLIER1.addOrDelOnZero(se28.modify(revenuesuppliersupplier_suppkey,revenuesuppliersupplier_nationkey,shipping_l_year,shipping_supp_nation,shipping_cust_nation),(v17 * v18));
                    n18 = n18->nxt;
                  } while (n18 && (e18 = n18->obj) && h16 == n18->hash &&  REVENUESUPPLIER1ORDERS2_mapkey0_idxfn::equals(se29, *e18)); 
                }
              }
              n17 = n17->nxt;
            } while (n17 && (e17 = n17->obj) && h17 == n17->hash &&  REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey0_idxfn::equals(se30, *e17)); 
          }
        }{ //slice 
          const HashIndex_REVENUESUPPLIER1ORDERS2_map_0* i19 = static_cast<HashIndex_REVENUESUPPLIER1ORDERS2_map_0*>(REVENUESUPPLIER1ORDERS2.index[1]);
          const HASH_RES_t h18 = REVENUESUPPLIER1ORDERS2_mapkey0_idxfn::hash(se32.modify0(orders_custkey));
          HashIndex_REVENUESUPPLIER1ORDERS2_map_0::IdxNode* n19 = static_cast<HashIndex_REVENUESUPPLIER1ORDERS2_map_0::IdxNode*>(i19->slice(se32, h18));
          REVENUESUPPLIER1ORDERS2_entry* e19;
         
          if (n19 && (e19 = n19->obj)) {
            do {                
              long revenuesuppliersupplier_nationkey = e19->REVENUESUPPLIERSUPPLIER_NATIONKEY;
              STRING_TYPE shipping_supp_nation = e19->SHIPPING_SUPP_NATION;
              STRING_TYPE shipping_cust_nation = e19->SHIPPING_CUST_NATION;
              long v19 = e19->__av;
              REVENUESUPPLIER1LINEITEM4.addOrDelOnZero(se31.modify(orders_orderkey,revenuesuppliersupplier_nationkey,shipping_supp_nation,shipping_cust_nation),v19);
              n19 = n19->nxt;
            } while (n19 && (e19 = n19->obj) && h18 == n19->hash &&  REVENUESUPPLIER1ORDERS2_mapkey0_idxfn::equals(se32, *e19)); 
          }
        }
      }
    }
    void on_insert_CUSTOMER(const long customer_custkey, const STRING_TYPE& customer_name, const STRING_TYPE& customer_address, const long customer_nationkey, const STRING_TYPE& customer_phone, const DOUBLE_TYPE customer_acctbal, const STRING_TYPE& customer_mktsegment, const STRING_TYPE& customer_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        { //slice 
          const HashIndex_REVENUECUSTOMER1_map_01* i20 = static_cast<HashIndex_REVENUECUSTOMER1_map_01*>(REVENUECUSTOMER1.index[1]);
          const HASH_RES_t h19 = REVENUECUSTOMER1_mapkey01_idxfn::hash(se34.modify01(customer_custkey, customer_nationkey));
          HashIndex_REVENUECUSTOMER1_map_01::IdxNode* n20 = static_cast<HashIndex_REVENUECUSTOMER1_map_01::IdxNode*>(i20->slice(se34, h19));
          REVENUECUSTOMER1_entry* e20;
         
          if (n20 && (e20 = n20->obj)) {
            do {                
              STRING_TYPE shipping_cust_nation = e20->SHIPPING_CUST_NATION;
              long shipping_l_year = e20->SHIPPING_L_YEAR;
              STRING_TYPE shipping_supp_nation = e20->SHIPPING_SUPP_NATION;
              DOUBLE_TYPE v20 = e20->__av;
              REVENUE.addOrDelOnZero(se33.modify(shipping_supp_nation,shipping_cust_nation,shipping_l_year),v20);
              n20 = n20->nxt;
            } while (n20 && (e20 = n20->obj) && h19 == n20->hash &&  REVENUECUSTOMER1_mapkey01_idxfn::equals(se34, *e20)); 
          }
        }REVENUEORDERS1_T_3.addOrDelOnZero(se35.modify(customer_custkey,customer_nationkey),1L);
        { //slice 
          const HashIndex_REVENUECUSTOMER1LINEITEM4_map_1* i21 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_1*>(REVENUECUSTOMER1LINEITEM4.index[2]);
          const HASH_RES_t h20 = REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn::hash(se37.modify1(customer_custkey));
          HashIndex_REVENUECUSTOMER1LINEITEM4_map_1::IdxNode* n21 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_1::IdxNode*>(i21->slice(se37, h20));
          REVENUECUSTOMER1LINEITEM4_entry* e21;
         
          if (n21 && (e21 = n21->obj)) {
            do {                
              long revenuelineitemlineitem_orderkey = e21->REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY;
              long v21 = e21->__av;
              REVENUELINEITEM4_T_2.addOrDelOnZero(se36.modify(customer_nationkey,revenuelineitemlineitem_orderkey),v21);
              n21 = n21->nxt;
            } while (n21 && (e21 = n21->obj) && h20 == n21->hash &&  REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn::equals(se37, *e21)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1_map_1* i22 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1_map_1*>(REVENUECUSTOMER1SUPPLIER1.index[1]);
          const HASH_RES_t h22 = REVENUECUSTOMER1SUPPLIER1_mapkey1_idxfn::hash(se40.modify1(customer_custkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1_map_1::IdxNode* n22 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1_map_1::IdxNode*>(i22->slice(se40, h22));
          REVENUECUSTOMER1SUPPLIER1_entry* e22;
         
          if (n22 && (e22 = n22->obj)) {
            do {                
              long revenuesuppliersupplier_suppkey = e22->REVENUECUSTOMER1SUPPLIERSUPPLIER_SUPPKEY;
              long shipping_l_year = e22->SHIPPING_L_YEAR;
              DOUBLE_TYPE v22 = e22->__av;
              { //slice 
                const HashIndex_REVENUELINEITEM4_T_1_map_0* i23 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0*>(REVENUELINEITEM4_T_1.index[2]);
                const HASH_RES_t h21 = REVENUELINEITEM4_T_1_mapkey0_idxfn::hash(se39.modify0(customer_nationkey));
                HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode* n23 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode*>(i23->slice(se39, h21));
                REVENUELINEITEM4_T_1_entry* e23;
               
                if (n23 && (e23 = n23->obj)) {
                  do {                
                    long revenuesuppliersupplier_nationkey = e23->S_NATIONKEY;
                    STRING_TYPE shipping_cust_nation = e23->SHIPPING_CUST_NATION;
                    STRING_TYPE shipping_supp_nation = e23->SHIPPING_SUPP_NATION;
                    long v23 = e23->__av;
                    REVENUESUPPLIER1.addOrDelOnZero(se38.modify(revenuesuppliersupplier_suppkey,revenuesuppliersupplier_nationkey,shipping_l_year,shipping_supp_nation,shipping_cust_nation),(v22 * v23));
                    n23 = n23->nxt;
                  } while (n23 && (e23 = n23->obj) && h21 == n23->hash &&  REVENUELINEITEM4_T_1_mapkey0_idxfn::equals(se39, *e23)); 
                }
              }
              n22 = n22->nxt;
            } while (n22 && (e22 = n22->obj) && h22 == n22->hash &&  REVENUECUSTOMER1SUPPLIER1_mapkey1_idxfn::equals(se40, *e22)); 
          }
        }{ //slice 
          const HashIndex_REVENUELINEITEM4_T_1_map_0* i24 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0*>(REVENUELINEITEM4_T_1.index[2]);
          const HASH_RES_t h23 = REVENUELINEITEM4_T_1_mapkey0_idxfn::hash(se42.modify0(customer_nationkey));
          HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode* n24 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode*>(i24->slice(se42, h23));
          REVENUELINEITEM4_T_1_entry* e24;
         
          if (n24 && (e24 = n24->obj)) {
            do {                
              long revenuesuppliersupplier_nationkey = e24->S_NATIONKEY;
              STRING_TYPE shipping_cust_nation = e24->SHIPPING_CUST_NATION;
              STRING_TYPE shipping_supp_nation = e24->SHIPPING_SUPP_NATION;
              long v24 = e24->__av;
              REVENUESUPPLIER1ORDERS2.addOrDelOnZero(se41.modify(customer_custkey,revenuesuppliersupplier_nationkey,shipping_supp_nation,shipping_cust_nation),v24);
              n24 = n24->nxt;
            } while (n24 && (e24 = n24->obj) && h23 == n24->hash &&  REVENUELINEITEM4_T_1_mapkey0_idxfn::equals(se42, *e24)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1LINEITEM4_map_1* i25 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_1*>(REVENUECUSTOMER1LINEITEM4.index[2]);
          const HASH_RES_t h25 = REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn::hash(se45.modify1(customer_custkey));
          HashIndex_REVENUECUSTOMER1LINEITEM4_map_1::IdxNode* n25 = static_cast<HashIndex_REVENUECUSTOMER1LINEITEM4_map_1::IdxNode*>(i25->slice(se45, h25));
          REVENUECUSTOMER1LINEITEM4_entry* e25;
         
          if (n25 && (e25 = n25->obj)) {
            do {                
              long revenuesupplier1lineitemlineitem_orderkey = e25->REVENUECUSTOMER1LINEITEMLINEITEM_ORDERKEY;
              long v25 = e25->__av;
              { //slice 
                const HashIndex_REVENUELINEITEM4_T_1_map_0* i26 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0*>(REVENUELINEITEM4_T_1.index[2]);
                const HASH_RES_t h24 = REVENUELINEITEM4_T_1_mapkey0_idxfn::hash(se44.modify0(customer_nationkey));
                HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode* n26 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_0::IdxNode*>(i26->slice(se44, h24));
                REVENUELINEITEM4_T_1_entry* e26;
               
                if (n26 && (e26 = n26->obj)) {
                  do {                
                    long revenuesuppliersupplier_nationkey = e26->S_NATIONKEY;
                    STRING_TYPE shipping_cust_nation = e26->SHIPPING_CUST_NATION;
                    STRING_TYPE shipping_supp_nation = e26->SHIPPING_SUPP_NATION;
                    long v26 = e26->__av;
                    REVENUESUPPLIER1LINEITEM4.addOrDelOnZero(se43.modify(revenuesupplier1lineitemlineitem_orderkey,revenuesuppliersupplier_nationkey,shipping_supp_nation,shipping_cust_nation),(v25 * v26));
                    n26 = n26->nxt;
                  } while (n26 && (e26 = n26->obj) && h24 == n26->hash &&  REVENUELINEITEM4_T_1_mapkey0_idxfn::equals(se44, *e26)); 
                }
              }
              n25 = n25->nxt;
            } while (n25 && (e25 = n25->obj) && h25 == n25->hash &&  REVENUECUSTOMER1LINEITEM4_mapkey1_idxfn::equals(se45, *e25)); 
          }
        }
      }
    }
    void on_insert_SUPPLIER(const long supplier_suppkey, const STRING_TYPE& supplier_name, const STRING_TYPE& supplier_address, const long supplier_nationkey, const STRING_TYPE& supplier_phone, const DOUBLE_TYPE supplier_acctbal, const STRING_TYPE& supplier_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        { //slice 
          const HashIndex_REVENUESUPPLIER1_map_01* i27 = static_cast<HashIndex_REVENUESUPPLIER1_map_01*>(REVENUESUPPLIER1.index[1]);
          const HASH_RES_t h26 = REVENUESUPPLIER1_mapkey01_idxfn::hash(se47.modify01(supplier_suppkey, supplier_nationkey));
          HashIndex_REVENUESUPPLIER1_map_01::IdxNode* n27 = static_cast<HashIndex_REVENUESUPPLIER1_map_01::IdxNode*>(i27->slice(se47, h26));
          REVENUESUPPLIER1_entry* e27;
         
          if (n27 && (e27 = n27->obj)) {
            do {                
              long shipping_l_year = e27->SHIPPING_L_YEAR;
              STRING_TYPE shipping_supp_nation = e27->SHIPPING_SUPP_NATION;
              STRING_TYPE shipping_cust_nation = e27->SHIPPING_CUST_NATION;
              DOUBLE_TYPE v27 = e27->__av;
              REVENUE.addOrDelOnZero(se46.modify(shipping_supp_nation,shipping_cust_nation,shipping_l_year),v27);
              n27 = n27->nxt;
            } while (n27 && (e27 = n27->obj) && h26 == n27->hash &&  REVENUESUPPLIER1_mapkey01_idxfn::equals(se47, *e27)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1_map_0* i28 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1_map_0*>(REVENUECUSTOMER1SUPPLIER1.index[2]);
          const HASH_RES_t h28 = REVENUECUSTOMER1SUPPLIER1_mapkey0_idxfn::hash(se50.modify0(supplier_suppkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1_map_0::IdxNode* n28 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1_map_0::IdxNode*>(i28->slice(se50, h28));
          REVENUECUSTOMER1SUPPLIER1_entry* e28;
         
          if (n28 && (e28 = n28->obj)) {
            do {                
              long revenuecustomercustomer_custkey = e28->REVENUECUSTOMERCUSTOMER_CUSTKEY;
              long shipping_l_year = e28->SHIPPING_L_YEAR;
              DOUBLE_TYPE v28 = e28->__av;
              { //slice 
                const HashIndex_REVENUELINEITEM4_T_1_map_1* i29 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1*>(REVENUELINEITEM4_T_1.index[3]);
                const HASH_RES_t h27 = REVENUELINEITEM4_T_1_mapkey1_idxfn::hash(se49.modify1(supplier_nationkey));
                HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode* n29 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode*>(i29->slice(se49, h27));
                REVENUELINEITEM4_T_1_entry* e29;
               
                if (n29 && (e29 = n29->obj)) {
                  do {                
                    long revenuecustomercustomer_nationkey = e29->C_NATIONKEY;
                    STRING_TYPE shipping_cust_nation = e29->SHIPPING_CUST_NATION;
                    STRING_TYPE shipping_supp_nation = e29->SHIPPING_SUPP_NATION;
                    long v29 = e29->__av;
                    REVENUECUSTOMER1.addOrDelOnZero(se48.modify(revenuecustomercustomer_custkey,revenuecustomercustomer_nationkey,shipping_cust_nation,shipping_l_year,shipping_supp_nation),(v28 * v29));
                    n29 = n29->nxt;
                  } while (n29 && (e29 = n29->obj) && h27 == n29->hash &&  REVENUELINEITEM4_T_1_mapkey1_idxfn::equals(se49, *e29)); 
                }
              }
              n28 = n28->nxt;
            } while (n28 && (e28 = n28->obj) && h28 == n28->hash &&  REVENUECUSTOMER1SUPPLIER1_mapkey0_idxfn::equals(se50, *e28)); 
          }
        }{ //slice 
          const HashIndex_REVENUELINEITEM4_T_1_map_1* i30 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1*>(REVENUELINEITEM4_T_1.index[3]);
          const HASH_RES_t h29 = REVENUELINEITEM4_T_1_mapkey1_idxfn::hash(se52.modify1(supplier_nationkey));
          HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode* n30 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode*>(i30->slice(se52, h29));
          REVENUELINEITEM4_T_1_entry* e30;
         
          if (n30 && (e30 = n30->obj)) {
            do {                
              long revenuecustomercustomer_nationkey = e30->C_NATIONKEY;
              STRING_TYPE shipping_cust_nation = e30->SHIPPING_CUST_NATION;
              STRING_TYPE shipping_supp_nation = e30->SHIPPING_SUPP_NATION;
              long v30 = e30->__av;
              REVENUECUSTOMER1LINEITEM5.addOrDelOnZero(se51.modify(supplier_suppkey,revenuecustomercustomer_nationkey,shipping_cust_nation,shipping_supp_nation),v30);
              n30 = n30->nxt;
            } while (n30 && (e30 = n30->obj) && h29 == n30->hash &&  REVENUELINEITEM4_T_1_mapkey1_idxfn::equals(se52, *e30)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1* i31 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1*>(REVENUECUSTOMER1SUPPLIER1ORDERS1.index[2]);
          const HASH_RES_t h31 = REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn::hash(se55.modify1(supplier_suppkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1::IdxNode* n31 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1::IdxNode*>(i31->slice(se55, h31));
          REVENUECUSTOMER1SUPPLIER1ORDERS1_entry* e31;
         
          if (n31 && (e31 = n31->obj)) {
            do {                
              long revenuecustomer1ordersorders_orderkey = e31->REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY;
              long shipping_l_year = e31->SHIPPING_L_YEAR;
              DOUBLE_TYPE v31 = e31->__av;
              { //slice 
                const HashIndex_REVENUELINEITEM4_T_1_map_1* i32 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1*>(REVENUELINEITEM4_T_1.index[3]);
                const HASH_RES_t h30 = REVENUELINEITEM4_T_1_mapkey1_idxfn::hash(se54.modify1(supplier_nationkey));
                HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode* n32 = static_cast<HashIndex_REVENUELINEITEM4_T_1_map_1::IdxNode*>(i32->slice(se54, h30));
                REVENUELINEITEM4_T_1_entry* e32;
               
                if (n32 && (e32 = n32->obj)) {
                  do {                
                    long revenuecustomercustomer_nationkey = e32->C_NATIONKEY;
                    STRING_TYPE shipping_cust_nation = e32->SHIPPING_CUST_NATION;
                    STRING_TYPE shipping_supp_nation = e32->SHIPPING_SUPP_NATION;
                    long v32 = e32->__av;
                    REVENUECUSTOMER1ORDERS1.addOrDelOnZero(se53.modify(revenuecustomer1ordersorders_orderkey,revenuecustomercustomer_nationkey,shipping_l_year,shipping_cust_nation,shipping_supp_nation),(v31 * v32));
                    n32 = n32->nxt;
                  } while (n32 && (e32 = n32->obj) && h30 == n32->hash &&  REVENUELINEITEM4_T_1_mapkey1_idxfn::equals(se54, *e32)); 
                }
              }
              n31 = n31->nxt;
            } while (n31 && (e31 = n31->obj) && h31 == n31->hash &&  REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn::equals(se55, *e31)); 
          }
        }{ //slice 
          const HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1* i33 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1*>(REVENUECUSTOMER1SUPPLIER1ORDERS1.index[2]);
          const HASH_RES_t h32 = REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn::hash(se57.modify1(supplier_suppkey));
          HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1::IdxNode* n33 = static_cast<HashIndex_REVENUECUSTOMER1SUPPLIER1ORDERS1_map_1::IdxNode*>(i33->slice(se57, h32));
          REVENUECUSTOMER1SUPPLIER1ORDERS1_entry* e33;
         
          if (n33 && (e33 = n33->obj)) {
            do {                
              long revenueordersorders_orderkey = e33->REVENUECUSTOMER1SUPPLIER1ORDERSORDERS_ORDERKEY;
              long shipping_l_year = e33->SHIPPING_L_YEAR;
              DOUBLE_TYPE v33 = e33->__av;
              REVENUEORDERS1_T_2.addOrDelOnZero(se56.modify(supplier_nationkey,revenueordersorders_orderkey,shipping_l_year),v33);
              n33 = n33->nxt;
            } while (n33 && (e33 = n33->obj) && h32 == n33->hash &&  REVENUECUSTOMER1SUPPLIER1ORDERS1_mapkey1_idxfn::equals(se57, *e33)); 
          }
        }REVENUELINEITEM4_T_3.addOrDelOnZero(se58.modify(supplier_suppkey,supplier_nationkey),1L);
      }
    }
    void on_system_ready_event() {
      {  
        REVENUELINEITEM4_T_1.clear();
        {  // foreach
          const HashIndex_NATION_map_0123* i34 = static_cast<HashIndex_NATION_map_0123*>(NATION.index[0]);
          HashIndex_NATION_map_0123::IdxNode* n34; 
          NATION_entry* e34;
        
          for (size_t i = 0; i < i34->size_; i++)
          {
            n34 = i34->buckets_ + i;
            while (n34 && (e34 = n34->obj))
            {
                long c_nationkey = e34->NATION_NATIONKEY;
                STRING_TYPE n2_name = e34->NATION_NAME;
                long n2_regionkey = e34->NATION_REGIONKEY;
                STRING_TYPE n2_comment = e34->NATION_COMMENT;
                long v34 = e34->__av;
                {  // foreach
                  const HashIndex_NATION_map_0123* i35 = static_cast<HashIndex_NATION_map_0123*>(NATION.index[0]);
                  HashIndex_NATION_map_0123::IdxNode* n35; 
                  NATION_entry* e35;
                
                  for (size_t i = 0; i < i35->size_; i++)
                  {
                    n35 = i35->buckets_ + i;
                    while (n35 && (e35 = n35->obj))
                    {
                        long s_nationkey = e35->NATION_NATIONKEY;
                        STRING_TYPE n1_name = e35->NATION_NAME;
                        long n1_regionkey = e35->NATION_REGIONKEY;
                        STRING_TYPE n1_comment = e35->NATION_COMMENT;
                        long v35 = e35->__av;
                        long l8 = ((/*if */(n2_name == c3 && n1_name == c4) ? 1L : 0L) + (/*if */(n2_name == c4 && n1_name == c3) ? 1L : 0L));
                        (/*if */(l8 > 0L) ? REVENUELINEITEM4_T_1.addOrDelOnZero(se59.modify(c_nationkey,s_nationkey,n2_name,n1_name),(v34 * v35)) : (void)0);
                      n35 = n35->nxt;
                    }
                  }
                }
              n34 = n34->nxt;
            }
          }
        }
      }
    }
  
  private:
  
    /* Sample entries for avoiding recreation of temporary objects */
    REVENUE_entry se1;
    tuple3_SS_L st1;
    REVENUELINEITEM4_T_1_entry se2;
    REVENUELINEITEM4_T_2_entry se3;
    REVENUELINEITEM4_T_3_entry se4;
    REVENUECUSTOMER1_entry se5;
    REVENUECUSTOMER1LINEITEM5_entry se6;
    REVENUECUSTOMER1LINEITEM4_entry se7;
    REVENUECUSTOMER1SUPPLIER1_entry se8;
    REVENUECUSTOMER1LINEITEM4_entry se9;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry se10;
    REVENUECUSTOMER1ORDERS1_entry se11;
    REVENUECUSTOMER1LINEITEM5_entry se12;
    REVENUEORDERS1_T_2_entry se13;
    REVENUELINEITEM4_T_3_entry se14;
    REVENUESUPPLIER1_entry se15;
    REVENUESUPPLIER1LINEITEM4_entry se16;
    REVENUE_entry se17;
    REVENUELINEITEM4_T_1_entry se18;
    REVENUEORDERS1_T_3_entry se19;
    REVENUEORDERS1_T_2_entry se20;
    REVENUECUSTOMER1_entry se21;
    REVENUECUSTOMER1ORDERS1_entry se22;
    REVENUECUSTOMER1LINEITEM4_entry se23;
    REVENUECUSTOMER1SUPPLIER1_entry se24;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry se25;
    REVENUELINEITEM4_T_2_entry se26;
    REVENUEORDERS1_T_3_entry se27;
    REVENUESUPPLIER1_entry se28;
    REVENUESUPPLIER1ORDERS2_entry se29;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry se30;
    REVENUESUPPLIER1LINEITEM4_entry se31;
    REVENUESUPPLIER1ORDERS2_entry se32;
    REVENUE_entry se33;
    REVENUECUSTOMER1_entry se34;
    REVENUEORDERS1_T_3_entry se35;
    REVENUELINEITEM4_T_2_entry se36;
    REVENUECUSTOMER1LINEITEM4_entry se37;
    REVENUESUPPLIER1_entry se38;
    REVENUELINEITEM4_T_1_entry se39;
    REVENUECUSTOMER1SUPPLIER1_entry se40;
    REVENUESUPPLIER1ORDERS2_entry se41;
    REVENUELINEITEM4_T_1_entry se42;
    REVENUESUPPLIER1LINEITEM4_entry se43;
    REVENUELINEITEM4_T_1_entry se44;
    REVENUECUSTOMER1LINEITEM4_entry se45;
    REVENUE_entry se46;
    REVENUESUPPLIER1_entry se47;
    REVENUECUSTOMER1_entry se48;
    REVENUELINEITEM4_T_1_entry se49;
    REVENUECUSTOMER1SUPPLIER1_entry se50;
    REVENUECUSTOMER1LINEITEM5_entry se51;
    REVENUELINEITEM4_T_1_entry se52;
    REVENUECUSTOMER1ORDERS1_entry se53;
    REVENUELINEITEM4_T_1_entry se54;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry se55;
    REVENUEORDERS1_T_2_entry se56;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_entry se57;
    REVENUELINEITEM4_T_3_entry se58;
    REVENUELINEITEM4_T_1_entry se59;
  
    /* Data structures used for storing materialized views */
    NATION_map NATION;
    REVENUECUSTOMER1_map REVENUECUSTOMER1;
    REVENUECUSTOMER1LINEITEM4_map REVENUECUSTOMER1LINEITEM4;
    REVENUECUSTOMER1LINEITEM5_map REVENUECUSTOMER1LINEITEM5;
    REVENUECUSTOMER1SUPPLIER1_map REVENUECUSTOMER1SUPPLIER1;
    REVENUECUSTOMER1SUPPLIER1ORDERS1_map REVENUECUSTOMER1SUPPLIER1ORDERS1;
    REVENUECUSTOMER1ORDERS1_map REVENUECUSTOMER1ORDERS1;
    REVENUEORDERS1_T_2_map REVENUEORDERS1_T_2;
    REVENUEORDERS1_T_3_map REVENUEORDERS1_T_3;
    REVENUELINEITEM4_T_1_map REVENUELINEITEM4_T_1;
    REVENUELINEITEM4_T_2_map REVENUELINEITEM4_T_2;
    REVENUELINEITEM4_T_3_map REVENUELINEITEM4_T_3;
    REVENUESUPPLIER1_map REVENUESUPPLIER1;
    REVENUESUPPLIER1ORDERS2_map REVENUESUPPLIER1ORDERS2;
    REVENUESUPPLIER1LINEITEM4_map REVENUESUPPLIER1LINEITEM4;
    MultiHashMap<tuple3_SS_L,long,HashIndex<tuple3_SS_L,long> > agg1;
    /*const static*/ long c1;
    /*const static*/ STRING_TYPE c4;
    /*const static*/ long c2;
    /*const static*/ STRING_TYPE c5;
    /*const static*/ STRING_TYPE c3;
  
  };

}
