#include <sys/time.h>
#include "macro.hpp"
#include "types.hpp"
#include "functions.hpp"
#include "hash.hpp"
#include "hashmap.hpp"
#include "serialization.hpp"

#define ELEM_SEPARATOR "\n\t\t\t"

namespace dbtoaster {
  
  /* Definitions of auxiliary maps for storing materialized views. */
  struct NATION_entry {
    long NATION_NATIONKEY; STRING_TYPE NATION_NAME; long NATION_REGIONKEY; STRING_TYPE NATION_COMMENT; long __av; 
    explicit NATION_entry() { /*NATION_NATIONKEY = 0L; NATION_NAME = ""; NATION_REGIONKEY = 0L; NATION_COMMENT = ""; __av = 0L; */ }
    explicit NATION_entry(const long c0, const STRING_TYPE& c1, const long c2, const STRING_TYPE& c3, const long c4) { NATION_NATIONKEY = c0; NATION_NAME = c1; NATION_REGIONKEY = c2; NATION_COMMENT = c3; __av = c4; }
    NATION_entry(const NATION_entry& other) : NATION_NATIONKEY( other.NATION_NATIONKEY ), NATION_NAME( other.NATION_NAME ), NATION_REGIONKEY( other.NATION_REGIONKEY ), NATION_COMMENT( other.NATION_COMMENT ), __av( other.__av ) {}
    FORCE_INLINE NATION_entry& modify(const long c0, const STRING_TYPE& c1, const long c2, const STRING_TYPE& c3) { NATION_NATIONKEY = c0; NATION_NAME = c1; NATION_REGIONKEY = c2; NATION_COMMENT = c3;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_NAME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_REGIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, NATION_COMMENT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct NATION_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const NATION_entry& e) {
      size_t h = 0;
      hash_combine(h, e.NATION_NATIONKEY);
      hash_combine(h, e.NATION_NAME);
      hash_combine(h, e.NATION_REGIONKEY);
      hash_combine(h, e.NATION_COMMENT);
      return h;
    }
    FORCE_INLINE static bool equals(const NATION_entry& x, const NATION_entry& y) {
      return x.NATION_NATIONKEY == y.NATION_NATIONKEY && x.NATION_NAME == y.NATION_NAME && x.NATION_REGIONKEY == y.NATION_REGIONKEY && x.NATION_COMMENT == y.NATION_COMMENT;
    }
  };
  
  typedef MultiHashMap<NATION_entry,long,
    HashIndex<NATION_entry,long,NATION_mapkey0123_idxfn,true>
  > NATION_map;
  typedef HashIndex<NATION_entry,long,NATION_mapkey0123_idxfn,true> HashIndex_NATION_map_0123;
  
  struct SUM_PROFIT_entry {
    STRING_TYPE PROFIT_NATION; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFIT_entry() { /*PROFIT_NATION = ""; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFIT_entry(const STRING_TYPE& c0, const long c1, const DOUBLE_TYPE c2) { PROFIT_NATION = c0; PROFIT_O_YEAR = c1; __av = c2; }
    SUM_PROFIT_entry(const SUM_PROFIT_entry& other) : PROFIT_NATION( other.PROFIT_NATION ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFIT_entry& modify(const STRING_TYPE& c0, const long c1) { PROFIT_NATION = c0; PROFIT_O_YEAR = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFIT_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFIT_entry& e) {
      size_t h = 0;
      hash_combine(h, e.PROFIT_NATION);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFIT_entry& x, const SUM_PROFIT_entry& y) {
      return x.PROFIT_NATION == y.PROFIT_NATION && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  typedef MultiHashMap<SUM_PROFIT_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFIT_entry,DOUBLE_TYPE,SUM_PROFIT_mapkey01_idxfn,true>
  > SUM_PROFIT_map;
  typedef HashIndex<SUM_PROFIT_entry,DOUBLE_TYPE,SUM_PROFIT_mapkey01_idxfn,true> HashIndex_SUM_PROFIT_map_01;
  
  struct SUM_PROFITORDERS12_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS12_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITORDERS12_entry(const long c0, const STRING_TYPE& c1, const DOUBLE_TYPE c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; PROFIT_NATION = c1; __av = c2; }
    SUM_PROFITORDERS12_entry(const SUM_PROFITORDERS12_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS12_entry& modify(const long c0, const STRING_TYPE& c1) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; PROFIT_NATION = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS12_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12_entry& x, const SUM_PROFITORDERS12_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITORDERS12_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12_entry& x, const SUM_PROFITORDERS12_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS12_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS12_entry,DOUBLE_TYPE,SUM_PROFITORDERS12_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITORDERS12_entry,DOUBLE_TYPE,SUM_PROFITORDERS12_mapkey0_idxfn,false>
  > SUM_PROFITORDERS12_map;
  typedef HashIndex<SUM_PROFITORDERS12_entry,DOUBLE_TYPE,SUM_PROFITORDERS12_mapkey01_idxfn,true> HashIndex_SUM_PROFITORDERS12_map_01;
  typedef HashIndex<SUM_PROFITORDERS12_entry,DOUBLE_TYPE,SUM_PROFITORDERS12_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS12_map_0;
  
  struct SUM_PROFITORDERS12PARTSUPP1_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY; long SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS12PARTSUPP1_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY = 0L; SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS12PARTSUPP1_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY = c2; __av = c3; }
    SUM_PROFITORDERS12PARTSUPP1_entry(const SUM_PROFITORDERS12PARTSUPP1_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY( other.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY ), SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY( other.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS12PARTSUPP1_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12PARTSUPP1_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12PARTSUPP1_entry& modify12(const long c1, const long c2) { SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS12PARTSUPP1_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PARTSUPP1_entry& x, const SUM_PROFITORDERS12PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS12PARTSUPP1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PARTSUPP1_entry& x, const SUM_PROFITORDERS12PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PARTSUPP1_entry& x, const SUM_PROFITORDERS12PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn,false>
  > SUM_PROFITORDERS12PARTSUPP1_map;
  typedef HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_012;
  typedef HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_0;
  typedef HashIndex<SUM_PROFITORDERS12PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn,false> HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12;
  
  struct SUM_PROFITORDERS12SUPPLIER1_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS12SUPPLIER1_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS12SUPPLIER1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c1; __av = c2; }
    SUM_PROFITORDERS12SUPPLIER1_entry(const SUM_PROFITORDERS12SUPPLIER1_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1_entry& modify(const long c0, const long c1) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1_entry& modify1(const long c1) { SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS12SUPPLIER1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1_entry& x, const SUM_PROFITORDERS12SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS12SUPPLIER1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1_entry& x, const SUM_PROFITORDERS12SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS12SUPPLIER1_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1_entry& x, const SUM_PROFITORDERS12SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey1_idxfn,false>
  > SUM_PROFITORDERS12SUPPLIER1_map;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey01_idxfn,true> HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_01;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_0;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_1;
  
  struct SUM_PROFITORDERS12SUPPLIER1PART2_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY; long SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS12SUPPLIER1PART2_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY = 0L; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS12SUPPLIER1PART2_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY = c1; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c2; __av = c3; }
    SUM_PROFITORDERS12SUPPLIER1PART2_entry(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY( other.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY ), SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1PART2_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY = c1; SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1PART2_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1PART2_entry& modify1(const long c1) { SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12SUPPLIER1PART2_entry& modify2(const long c2) { SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS12SUPPLIER1PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS12SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY == y.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY && x.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS12SUPPLIER1PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS12SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS12SUPPLIER1PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS12SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY == y.SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY;
    }
  };
  
  struct SUM_PROFITORDERS12SUPPLIER1PART2_mapkey2_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS12SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey1_idxfn,false>,
    HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey2_idxfn,false>
  > SUM_PROFITORDERS12SUPPLIER1PART2_map;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_012;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_0;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_1;
  typedef HashIndex<SUM_PROFITORDERS12SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12SUPPLIER1PART2_mapkey2_idxfn,false> HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_2;
  
  struct SUM_PROFITORDERS12PART2_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS12PARTPART_PARTKEY; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS12PART2_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS12PARTPART_PARTKEY = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITORDERS12PART2_entry(const long c0, const long c1, const STRING_TYPE& c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12PARTPART_PARTKEY = c1; PROFIT_NATION = c2; __av = c3; }
    SUM_PROFITORDERS12PART2_entry(const SUM_PROFITORDERS12PART2_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS12PARTPART_PARTKEY( other.SUM_PROFITORDERS12PARTPART_PARTKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS12PART2_entry& modify(const long c0, const long c1, const STRING_TYPE& c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS12PARTPART_PARTKEY = c1; PROFIT_NATION = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12PART2_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS12PART2_entry& modify1(const long c1) { SUM_PROFITORDERS12PARTPART_PARTKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS12PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS12PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS12PARTPART_PARTKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PART2_entry& x, const SUM_PROFITORDERS12PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS12PARTPART_PARTKEY == y.SUM_PROFITORDERS12PARTPART_PARTKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITORDERS12PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PART2_entry& x, const SUM_PROFITORDERS12PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS12PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS12PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS12PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS12PART2_entry& x, const SUM_PROFITORDERS12PART2_entry& y) {
      return x.SUM_PROFITORDERS12PARTPART_PARTKEY == y.SUM_PROFITORDERS12PARTPART_PARTKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey1_idxfn,false>
  > SUM_PROFITORDERS12PART2_map;
  typedef HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS12PART2_map_012;
  typedef HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS12PART2_map_0;
  typedef HashIndex<SUM_PROFITORDERS12PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS12PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS12PART2_map_1;
  
  struct SUM_PROFITORDERS15_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS15_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITORDERS15_entry(const long c0, const STRING_TYPE& c1, const DOUBLE_TYPE c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; PROFIT_NATION = c1; __av = c2; }
    SUM_PROFITORDERS15_entry(const SUM_PROFITORDERS15_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS15_entry& modify(const long c0, const STRING_TYPE& c1) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; PROFIT_NATION = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS15_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15_entry& x, const SUM_PROFITORDERS15_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITORDERS15_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15_entry& x, const SUM_PROFITORDERS15_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS15_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS15_entry,DOUBLE_TYPE,SUM_PROFITORDERS15_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITORDERS15_entry,DOUBLE_TYPE,SUM_PROFITORDERS15_mapkey0_idxfn,false>
  > SUM_PROFITORDERS15_map;
  typedef HashIndex<SUM_PROFITORDERS15_entry,DOUBLE_TYPE,SUM_PROFITORDERS15_mapkey01_idxfn,true> HashIndex_SUM_PROFITORDERS15_map_01;
  typedef HashIndex<SUM_PROFITORDERS15_entry,DOUBLE_TYPE,SUM_PROFITORDERS15_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS15_map_0;
  
  struct SUM_PROFITORDERS15PARTSUPP1_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY; long SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS15PARTSUPP1_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY = 0L; SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS15PARTSUPP1_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY = c2; __av = c3; }
    SUM_PROFITORDERS15PARTSUPP1_entry(const SUM_PROFITORDERS15PARTSUPP1_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY( other.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY ), SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY( other.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS15PARTSUPP1_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15PARTSUPP1_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15PARTSUPP1_entry& modify12(const long c1, const long c2) { SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY = c1; SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS15PARTSUPP1_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PARTSUPP1_entry& x, const SUM_PROFITORDERS15PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS15PARTSUPP1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PARTSUPP1_entry& x, const SUM_PROFITORDERS15PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PARTSUPP1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PARTSUPP1_entry& x, const SUM_PROFITORDERS15PARTSUPP1_entry& y) {
      return x.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn,false>
  > SUM_PROFITORDERS15PARTSUPP1_map;
  typedef HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_012;
  typedef HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_0;
  typedef HashIndex<SUM_PROFITORDERS15PARTSUPP1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn,false> HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12;
  
  struct SUM_PROFITORDERS15SUPPLIER1_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS15SUPPLIER1_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS15SUPPLIER1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c1; __av = c2; }
    SUM_PROFITORDERS15SUPPLIER1_entry(const SUM_PROFITORDERS15SUPPLIER1_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1_entry& modify(const long c0, const long c1) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1_entry& modify1(const long c1) { SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS15SUPPLIER1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1_entry& x, const SUM_PROFITORDERS15SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS15SUPPLIER1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1_entry& x, const SUM_PROFITORDERS15SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS15SUPPLIER1_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1_entry& x, const SUM_PROFITORDERS15SUPPLIER1_entry& y) {
      return x.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey1_idxfn,false>
  > SUM_PROFITORDERS15SUPPLIER1_map;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey01_idxfn,true> HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_01;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_0;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_1;
  
  struct SUM_PROFITORDERS15SUPPLIER1PART2_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY; long SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS15SUPPLIER1PART2_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY = 0L; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITORDERS15SUPPLIER1PART2_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY = c1; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c2; __av = c3; }
    SUM_PROFITORDERS15SUPPLIER1PART2_entry(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY( other.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY ), SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1PART2_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY = c1; SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1PART2_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1PART2_entry& modify1(const long c1) { SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY = c1;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15SUPPLIER1PART2_entry& modify2(const long c2) { SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS15SUPPLIER1PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY);
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS15SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY == y.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY && x.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  struct SUM_PROFITORDERS15SUPPLIER1PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS15SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS15SUPPLIER1PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS15SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY == y.SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY;
    }
  };
  
  struct SUM_PROFITORDERS15SUPPLIER1PART2_mapkey2_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15SUPPLIER1PART2_entry& x, const SUM_PROFITORDERS15SUPPLIER1PART2_entry& y) {
      return x.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey1_idxfn,false>,
    HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey2_idxfn,false>
  > SUM_PROFITORDERS15SUPPLIER1PART2_map;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_012;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_0;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_1;
  typedef HashIndex<SUM_PROFITORDERS15SUPPLIER1PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15SUPPLIER1PART2_mapkey2_idxfn,false> HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_2;
  
  struct SUM_PROFITORDERS15PART2_entry {
    long SUM_PROFITORDERSORDERS_ORDERKEY; long SUM_PROFITORDERS15PARTPART_PARTKEY; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITORDERS15PART2_entry() { /*SUM_PROFITORDERSORDERS_ORDERKEY = 0L; SUM_PROFITORDERS15PARTPART_PARTKEY = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITORDERS15PART2_entry(const long c0, const long c1, const STRING_TYPE& c2, const DOUBLE_TYPE c3) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15PARTPART_PARTKEY = c1; PROFIT_NATION = c2; __av = c3; }
    SUM_PROFITORDERS15PART2_entry(const SUM_PROFITORDERS15PART2_entry& other) : SUM_PROFITORDERSORDERS_ORDERKEY( other.SUM_PROFITORDERSORDERS_ORDERKEY ), SUM_PROFITORDERS15PARTPART_PARTKEY( other.SUM_PROFITORDERS15PARTPART_PARTKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITORDERS15PART2_entry& modify(const long c0, const long c1, const STRING_TYPE& c2) { SUM_PROFITORDERSORDERS_ORDERKEY = c0; SUM_PROFITORDERS15PARTPART_PARTKEY = c1; PROFIT_NATION = c2;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15PART2_entry& modify0(const long c0) { SUM_PROFITORDERSORDERS_ORDERKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITORDERS15PART2_entry& modify1(const long c1) { SUM_PROFITORDERS15PARTPART_PARTKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERSORDERS_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITORDERS15PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITORDERS15PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      hash_combine(h, e.SUM_PROFITORDERS15PARTPART_PARTKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PART2_entry& x, const SUM_PROFITORDERS15PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY && x.SUM_PROFITORDERS15PARTPART_PARTKEY == y.SUM_PROFITORDERS15PARTPART_PARTKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITORDERS15PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERSORDERS_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PART2_entry& x, const SUM_PROFITORDERS15PART2_entry& y) {
      return x.SUM_PROFITORDERSORDERS_ORDERKEY == y.SUM_PROFITORDERSORDERS_ORDERKEY;
    }
  };
  
  struct SUM_PROFITORDERS15PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITORDERS15PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITORDERS15PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITORDERS15PART2_entry& x, const SUM_PROFITORDERS15PART2_entry& y) {
      return x.SUM_PROFITORDERS15PARTPART_PARTKEY == y.SUM_PROFITORDERS15PARTPART_PARTKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey1_idxfn,false>
  > SUM_PROFITORDERS15PART2_map;
  typedef HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITORDERS15PART2_map_012;
  typedef HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITORDERS15PART2_map_0;
  typedef HashIndex<SUM_PROFITORDERS15PART2_entry,DOUBLE_TYPE,SUM_PROFITORDERS15PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITORDERS15PART2_map_1;
  
  struct SUM_PROFITPARTSUPP11_entry {
    long SUM_PROFITPARTSUPPPARTSUPP_PARTKEY; long SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITPARTSUPP11_entry() { /*SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = 0L; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITPARTSUPP11_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1; PROFIT_O_YEAR = c2; __av = c3; }
    SUM_PROFITPARTSUPP11_entry(const SUM_PROFITPARTSUPP11_entry& other) : SUM_PROFITPARTSUPPPARTSUPP_PARTKEY( other.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY ), SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY( other.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITPARTSUPP11_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1; PROFIT_O_YEAR = c2;  return *this; }
    FORCE_INLINE SUM_PROFITPARTSUPP11_entry& modify01(const long c0, const long c1) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITPARTSUPP11_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPARTSUPP11_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPARTSUPP11_entry& x, const SUM_PROFITPARTSUPP11_entry& y) {
      return x.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITPARTSUPP11_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPARTSUPP11_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPARTSUPP11_entry& x, const SUM_PROFITPARTSUPP11_entry& y) {
      return x.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITPARTSUPP11_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITPARTSUPP11_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP11_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITPARTSUPP11_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP11_mapkey01_idxfn,false>
  > SUM_PROFITPARTSUPP11_map;
  typedef HashIndex<SUM_PROFITPARTSUPP11_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP11_mapkey012_idxfn,true> HashIndex_SUM_PROFITPARTSUPP11_map_012;
  typedef HashIndex<SUM_PROFITPARTSUPP11_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP11_mapkey01_idxfn,false> HashIndex_SUM_PROFITPARTSUPP11_map_01;
  
  struct SUM_PROFITPARTSUPP16_entry {
    long SUM_PROFITPARTSUPPPARTSUPP_PARTKEY; long SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITPARTSUPP16_entry() { /*SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = 0L; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITPARTSUPP16_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1; PROFIT_O_YEAR = c2; __av = c3; }
    SUM_PROFITPARTSUPP16_entry(const SUM_PROFITPARTSUPP16_entry& other) : SUM_PROFITPARTSUPPPARTSUPP_PARTKEY( other.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY ), SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY( other.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITPARTSUPP16_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1; PROFIT_O_YEAR = c2;  return *this; }
    FORCE_INLINE SUM_PROFITPARTSUPP16_entry& modify01(const long c0, const long c1) { SUM_PROFITPARTSUPPPARTSUPP_PARTKEY = c0; SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITPARTSUPP16_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPARTSUPP16_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPARTSUPP16_entry& x, const SUM_PROFITPARTSUPP16_entry& y) {
      return x.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITPARTSUPP16_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPARTSUPP16_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY);
      hash_combine(h, e.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPARTSUPP16_entry& x, const SUM_PROFITPARTSUPP16_entry& y) {
      return x.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY == y.SUM_PROFITPARTSUPPPARTSUPP_PARTKEY && x.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY == y.SUM_PROFITPARTSUPPPARTSUPP_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITPARTSUPP16_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITPARTSUPP16_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP16_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITPARTSUPP16_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP16_mapkey01_idxfn,false>
  > SUM_PROFITPARTSUPP16_map;
  typedef HashIndex<SUM_PROFITPARTSUPP16_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP16_mapkey012_idxfn,true> HashIndex_SUM_PROFITPARTSUPP16_map_012;
  typedef HashIndex<SUM_PROFITPARTSUPP16_entry,DOUBLE_TYPE,SUM_PROFITPARTSUPP16_mapkey01_idxfn,false> HashIndex_SUM_PROFITPARTSUPP16_map_01;
  
  struct SUM_PROFITLINEITEM11_entry {
    long SUM_PROFITLINEITEMLINEITEM_PARTKEY; long __av; 
    explicit SUM_PROFITLINEITEM11_entry() { /*SUM_PROFITLINEITEMLINEITEM_PARTKEY = 0L; __av = 0L; */ }
    explicit SUM_PROFITLINEITEM11_entry(const long c0, const long c1) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0; __av = c1; }
    SUM_PROFITLINEITEM11_entry(const SUM_PROFITLINEITEM11_entry& other) : SUM_PROFITLINEITEMLINEITEM_PARTKEY( other.SUM_PROFITLINEITEMLINEITEM_PARTKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITLINEITEM11_entry& modify(const long c0) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITLINEITEM11_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM11_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM11_entry& x, const SUM_PROFITLINEITEM11_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_PARTKEY == y.SUM_PROFITLINEITEMLINEITEM_PARTKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITLINEITEM11_entry,long,
    HashIndex<SUM_PROFITLINEITEM11_entry,long,SUM_PROFITLINEITEM11_mapkey0_idxfn,true>
  > SUM_PROFITLINEITEM11_map;
  typedef HashIndex<SUM_PROFITLINEITEM11_entry,long,SUM_PROFITLINEITEM11_mapkey0_idxfn,true> HashIndex_SUM_PROFITLINEITEM11_map_0;
  
  struct SUM_PROFITLINEITEM12_entry {
    long SUM_PROFITLINEITEMLINEITEM_SUPPKEY; STRING_TYPE PROFIT_NATION; long __av; 
    explicit SUM_PROFITLINEITEM12_entry() { /*SUM_PROFITLINEITEMLINEITEM_SUPPKEY = 0L; PROFIT_NATION = ""; __av = 0L; */ }
    explicit SUM_PROFITLINEITEM12_entry(const long c0, const STRING_TYPE& c1, const long c2) { SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c0; PROFIT_NATION = c1; __av = c2; }
    SUM_PROFITLINEITEM12_entry(const SUM_PROFITLINEITEM12_entry& other) : SUM_PROFITLINEITEMLINEITEM_SUPPKEY( other.SUM_PROFITLINEITEMLINEITEM_SUPPKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITLINEITEM12_entry& modify(const long c0, const STRING_TYPE& c1) { SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c0; PROFIT_NATION = c1;  return *this; }
    FORCE_INLINE SUM_PROFITLINEITEM12_entry& modify0(const long c0) { SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITLINEITEM12_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM12_entry& x, const SUM_PROFITLINEITEM12_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_SUPPKEY == y.SUM_PROFITLINEITEMLINEITEM_SUPPKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITLINEITEM12_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM12_entry& x, const SUM_PROFITLINEITEM12_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_SUPPKEY == y.SUM_PROFITLINEITEMLINEITEM_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITLINEITEM12_entry,long,
    HashIndex<SUM_PROFITLINEITEM12_entry,long,SUM_PROFITLINEITEM12_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITLINEITEM12_entry,long,SUM_PROFITLINEITEM12_mapkey0_idxfn,false>
  > SUM_PROFITLINEITEM12_map;
  typedef HashIndex<SUM_PROFITLINEITEM12_entry,long,SUM_PROFITLINEITEM12_mapkey01_idxfn,true> HashIndex_SUM_PROFITLINEITEM12_map_01;
  typedef HashIndex<SUM_PROFITLINEITEM12_entry,long,SUM_PROFITLINEITEM12_mapkey0_idxfn,false> HashIndex_SUM_PROFITLINEITEM12_map_0;
  
  struct SUM_PROFITLINEITEM13_entry {
    long SUM_PROFITLINEITEMLINEITEM_PARTKEY; long SUM_PROFITLINEITEMLINEITEM_SUPPKEY; long __av; 
    explicit SUM_PROFITLINEITEM13_entry() { /*SUM_PROFITLINEITEMLINEITEM_PARTKEY = 0L; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = 0L; __av = 0L; */ }
    explicit SUM_PROFITLINEITEM13_entry(const long c0, const long c1, const long c2) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c1; __av = c2; }
    SUM_PROFITLINEITEM13_entry(const SUM_PROFITLINEITEM13_entry& other) : SUM_PROFITLINEITEMLINEITEM_PARTKEY( other.SUM_PROFITLINEITEMLINEITEM_PARTKEY ), SUM_PROFITLINEITEMLINEITEM_SUPPKEY( other.SUM_PROFITLINEITEMLINEITEM_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITLINEITEM13_entry& modify(const long c0, const long c1) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITLINEITEM13_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM13_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM13_entry& x, const SUM_PROFITLINEITEM13_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_PARTKEY == y.SUM_PROFITLINEITEMLINEITEM_PARTKEY && x.SUM_PROFITLINEITEMLINEITEM_SUPPKEY == y.SUM_PROFITLINEITEMLINEITEM_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITLINEITEM13_entry,long,
    HashIndex<SUM_PROFITLINEITEM13_entry,long,SUM_PROFITLINEITEM13_mapkey01_idxfn,true>
  > SUM_PROFITLINEITEM13_map;
  typedef HashIndex<SUM_PROFITLINEITEM13_entry,long,SUM_PROFITLINEITEM13_mapkey01_idxfn,true> HashIndex_SUM_PROFITLINEITEM13_map_01;
  
  struct SUM_PROFITLINEITEM14_entry {
    long SUM_PROFITLINEITEMLINEITEM_ORDERKEY; long PROFIT_O_YEAR; long __av; 
    explicit SUM_PROFITLINEITEM14_entry() { /*SUM_PROFITLINEITEMLINEITEM_ORDERKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0L; */ }
    explicit SUM_PROFITLINEITEM14_entry(const long c0, const long c1, const long c2) { SUM_PROFITLINEITEMLINEITEM_ORDERKEY = c0; PROFIT_O_YEAR = c1; __av = c2; }
    SUM_PROFITLINEITEM14_entry(const SUM_PROFITLINEITEM14_entry& other) : SUM_PROFITLINEITEMLINEITEM_ORDERKEY( other.SUM_PROFITLINEITEMLINEITEM_ORDERKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITLINEITEM14_entry& modify(const long c0, const long c1) { SUM_PROFITLINEITEMLINEITEM_ORDERKEY = c0; PROFIT_O_YEAR = c1;  return *this; }
    FORCE_INLINE SUM_PROFITLINEITEM14_entry& modify0(const long c0) { SUM_PROFITLINEITEMLINEITEM_ORDERKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_ORDERKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITLINEITEM14_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM14_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_ORDERKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM14_entry& x, const SUM_PROFITLINEITEM14_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_ORDERKEY == y.SUM_PROFITLINEITEMLINEITEM_ORDERKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITLINEITEM14_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM14_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_ORDERKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM14_entry& x, const SUM_PROFITLINEITEM14_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_ORDERKEY == y.SUM_PROFITLINEITEMLINEITEM_ORDERKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITLINEITEM14_entry,long,
    HashIndex<SUM_PROFITLINEITEM14_entry,long,SUM_PROFITLINEITEM14_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITLINEITEM14_entry,long,SUM_PROFITLINEITEM14_mapkey0_idxfn,false>
  > SUM_PROFITLINEITEM14_map;
  typedef HashIndex<SUM_PROFITLINEITEM14_entry,long,SUM_PROFITLINEITEM14_mapkey01_idxfn,true> HashIndex_SUM_PROFITLINEITEM14_map_01;
  typedef HashIndex<SUM_PROFITLINEITEM14_entry,long,SUM_PROFITLINEITEM14_mapkey0_idxfn,false> HashIndex_SUM_PROFITLINEITEM14_map_0;
  
  struct SUM_PROFITLINEITEM19_entry {
    long SUM_PROFITLINEITEMLINEITEM_PARTKEY; long SUM_PROFITLINEITEMLINEITEM_SUPPKEY; DOUBLE_TYPE __av; 
    explicit SUM_PROFITLINEITEM19_entry() { /*SUM_PROFITLINEITEMLINEITEM_PARTKEY = 0L; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = 0L; __av = 0.0; */ }
    explicit SUM_PROFITLINEITEM19_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c1; __av = c2; }
    SUM_PROFITLINEITEM19_entry(const SUM_PROFITLINEITEM19_entry& other) : SUM_PROFITLINEITEMLINEITEM_PARTKEY( other.SUM_PROFITLINEITEMLINEITEM_PARTKEY ), SUM_PROFITLINEITEMLINEITEM_SUPPKEY( other.SUM_PROFITLINEITEMLINEITEM_SUPPKEY ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITLINEITEM19_entry& modify(const long c0, const long c1) { SUM_PROFITLINEITEMLINEITEM_PARTKEY = c0; SUM_PROFITLINEITEMLINEITEM_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITLINEITEM19_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITLINEITEM19_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_PARTKEY);
      hash_combine(h, e.SUM_PROFITLINEITEMLINEITEM_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITLINEITEM19_entry& x, const SUM_PROFITLINEITEM19_entry& y) {
      return x.SUM_PROFITLINEITEMLINEITEM_PARTKEY == y.SUM_PROFITLINEITEMLINEITEM_PARTKEY && x.SUM_PROFITLINEITEMLINEITEM_SUPPKEY == y.SUM_PROFITLINEITEMLINEITEM_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITLINEITEM19_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITLINEITEM19_entry,DOUBLE_TYPE,SUM_PROFITLINEITEM19_mapkey01_idxfn,true>
  > SUM_PROFITLINEITEM19_map;
  typedef HashIndex<SUM_PROFITLINEITEM19_entry,DOUBLE_TYPE,SUM_PROFITLINEITEM19_mapkey01_idxfn,true> HashIndex_SUM_PROFITLINEITEM19_map_01;
  
  struct SUM_PROFITSUPPLIER11_entry {
    long SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITSUPPLIER11_entry() { /*SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITSUPPLIER11_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0; PROFIT_O_YEAR = c1; __av = c2; }
    SUM_PROFITSUPPLIER11_entry(const SUM_PROFITSUPPLIER11_entry& other) : SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITSUPPLIER11_entry& modify(const long c0, const long c1) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0; PROFIT_O_YEAR = c1;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER11_entry& modify0(const long c0) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITSUPPLIER11_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER11_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER11_entry& x, const SUM_PROFITSUPPLIER11_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITSUPPLIER11_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER11_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER11_entry& x, const SUM_PROFITSUPPLIER11_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITSUPPLIER11_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITSUPPLIER11_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITSUPPLIER11_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11_mapkey0_idxfn,false>
  > SUM_PROFITSUPPLIER11_map;
  typedef HashIndex<SUM_PROFITSUPPLIER11_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11_mapkey01_idxfn,true> HashIndex_SUM_PROFITSUPPLIER11_map_01;
  typedef HashIndex<SUM_PROFITSUPPLIER11_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11_mapkey0_idxfn,false> HashIndex_SUM_PROFITSUPPLIER11_map_0;
  
  struct SUM_PROFITSUPPLIER11PART2_entry {
    long SUM_PROFITSUPPLIER11PARTPART_PARTKEY; long SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITSUPPLIER11PART2_entry() { /*SUM_PROFITSUPPLIER11PARTPART_PARTKEY = 0L; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITSUPPLIER11PART2_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITSUPPLIER11PARTPART_PARTKEY = c0; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1; PROFIT_O_YEAR = c2; __av = c3; }
    SUM_PROFITSUPPLIER11PART2_entry(const SUM_PROFITSUPPLIER11PART2_entry& other) : SUM_PROFITSUPPLIER11PARTPART_PARTKEY( other.SUM_PROFITSUPPLIER11PARTPART_PARTKEY ), SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITSUPPLIER11PART2_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITSUPPLIER11PARTPART_PARTKEY = c0; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1; PROFIT_O_YEAR = c2;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER11PART2_entry& modify0(const long c0) { SUM_PROFITSUPPLIER11PARTPART_PARTKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER11PART2_entry& modify1(const long c1) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIER11PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITSUPPLIER11PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER11PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIER11PARTPART_PARTKEY);
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER11PART2_entry& x, const SUM_PROFITSUPPLIER11PART2_entry& y) {
      return x.SUM_PROFITSUPPLIER11PARTPART_PARTKEY == y.SUM_PROFITSUPPLIER11PARTPART_PARTKEY && x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITSUPPLIER11PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER11PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIER11PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER11PART2_entry& x, const SUM_PROFITSUPPLIER11PART2_entry& y) {
      return x.SUM_PROFITSUPPLIER11PARTPART_PARTKEY == y.SUM_PROFITSUPPLIER11PARTPART_PARTKEY;
    }
  };
  
  struct SUM_PROFITSUPPLIER11PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER11PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER11PART2_entry& x, const SUM_PROFITSUPPLIER11PART2_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey1_idxfn,false>
  > SUM_PROFITSUPPLIER11PART2_map;
  typedef HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITSUPPLIER11PART2_map_012;
  typedef HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITSUPPLIER11PART2_map_0;
  typedef HashIndex<SUM_PROFITSUPPLIER11PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER11PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITSUPPLIER11PART2_map_1;
  
  struct SUM_PROFITSUPPLIER12_entry {
    long SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY; STRING_TYPE PROFIT_NATION; long __av; 
    explicit SUM_PROFITSUPPLIER12_entry() { /*SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY = 0L; PROFIT_NATION = ""; __av = 0L; */ }
    explicit SUM_PROFITSUPPLIER12_entry(const long c0, const STRING_TYPE& c1, const long c2) { SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY = c0; PROFIT_NATION = c1; __av = c2; }
    SUM_PROFITSUPPLIER12_entry(const SUM_PROFITSUPPLIER12_entry& other) : SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY( other.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITSUPPLIER12_entry& modify(const long c0, const STRING_TYPE& c1) { SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY = c0; PROFIT_NATION = c1;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER12_entry& modify0(const long c0) { SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITSUPPLIER12_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER12_entry& x, const SUM_PROFITSUPPLIER12_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY == y.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITSUPPLIER12_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER12_entry& x, const SUM_PROFITSUPPLIER12_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY == y.SUM_PROFITSUPPLIERSUPPLIER_NATIONKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITSUPPLIER12_entry,long,
    HashIndex<SUM_PROFITSUPPLIER12_entry,long,SUM_PROFITSUPPLIER12_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITSUPPLIER12_entry,long,SUM_PROFITSUPPLIER12_mapkey0_idxfn,false>
  > SUM_PROFITSUPPLIER12_map;
  typedef HashIndex<SUM_PROFITSUPPLIER12_entry,long,SUM_PROFITSUPPLIER12_mapkey01_idxfn,true> HashIndex_SUM_PROFITSUPPLIER12_map_01;
  typedef HashIndex<SUM_PROFITSUPPLIER12_entry,long,SUM_PROFITSUPPLIER12_mapkey0_idxfn,false> HashIndex_SUM_PROFITSUPPLIER12_map_0;
  
  struct SUM_PROFITSUPPLIER14_entry {
    long SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITSUPPLIER14_entry() { /*SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITSUPPLIER14_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0; PROFIT_O_YEAR = c1; __av = c2; }
    SUM_PROFITSUPPLIER14_entry(const SUM_PROFITSUPPLIER14_entry& other) : SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITSUPPLIER14_entry& modify(const long c0, const long c1) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0; PROFIT_O_YEAR = c1;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER14_entry& modify0(const long c0) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITSUPPLIER14_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER14_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER14_entry& x, const SUM_PROFITSUPPLIER14_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITSUPPLIER14_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER14_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER14_entry& x, const SUM_PROFITSUPPLIER14_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITSUPPLIER14_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITSUPPLIER14_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14_mapkey01_idxfn,true>,
    HashIndex<SUM_PROFITSUPPLIER14_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14_mapkey0_idxfn,false>
  > SUM_PROFITSUPPLIER14_map;
  typedef HashIndex<SUM_PROFITSUPPLIER14_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14_mapkey01_idxfn,true> HashIndex_SUM_PROFITSUPPLIER14_map_01;
  typedef HashIndex<SUM_PROFITSUPPLIER14_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14_mapkey0_idxfn,false> HashIndex_SUM_PROFITSUPPLIER14_map_0;
  
  struct SUM_PROFITSUPPLIER14PART2_entry {
    long SUM_PROFITSUPPLIER14PARTPART_PARTKEY; long SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY; long PROFIT_O_YEAR; DOUBLE_TYPE __av; 
    explicit SUM_PROFITSUPPLIER14PART2_entry() { /*SUM_PROFITSUPPLIER14PARTPART_PARTKEY = 0L; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = 0L; PROFIT_O_YEAR = 0L; __av = 0.0; */ }
    explicit SUM_PROFITSUPPLIER14PART2_entry(const long c0, const long c1, const long c2, const DOUBLE_TYPE c3) { SUM_PROFITSUPPLIER14PARTPART_PARTKEY = c0; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1; PROFIT_O_YEAR = c2; __av = c3; }
    SUM_PROFITSUPPLIER14PART2_entry(const SUM_PROFITSUPPLIER14PART2_entry& other) : SUM_PROFITSUPPLIER14PARTPART_PARTKEY( other.SUM_PROFITSUPPLIER14PARTPART_PARTKEY ), SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY( other.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITSUPPLIER14PART2_entry& modify(const long c0, const long c1, const long c2) { SUM_PROFITSUPPLIER14PARTPART_PARTKEY = c0; SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1; PROFIT_O_YEAR = c2;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER14PART2_entry& modify0(const long c0) { SUM_PROFITSUPPLIER14PARTPART_PARTKEY = c0;  return *this; }
    FORCE_INLINE SUM_PROFITSUPPLIER14PART2_entry& modify1(const long c1) { SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIER14PARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITSUPPLIER14PART2_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER14PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIER14PARTPART_PARTKEY);
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER14PART2_entry& x, const SUM_PROFITSUPPLIER14PART2_entry& y) {
      return x.SUM_PROFITSUPPLIER14PARTPART_PARTKEY == y.SUM_PROFITSUPPLIER14PARTPART_PARTKEY && x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR;
    }
  };
  
  struct SUM_PROFITSUPPLIER14PART2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER14PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIER14PARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER14PART2_entry& x, const SUM_PROFITSUPPLIER14PART2_entry& y) {
      return x.SUM_PROFITSUPPLIER14PARTPART_PARTKEY == y.SUM_PROFITSUPPLIER14PARTPART_PARTKEY;
    }
  };
  
  struct SUM_PROFITSUPPLIER14PART2_mapkey1_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITSUPPLIER14PART2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITSUPPLIER14PART2_entry& x, const SUM_PROFITSUPPLIER14PART2_entry& y) {
      return x.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY == y.SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey0_idxfn,false>,
    HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey1_idxfn,false>
  > SUM_PROFITSUPPLIER14PART2_map;
  typedef HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey012_idxfn,true> HashIndex_SUM_PROFITSUPPLIER14PART2_map_012;
  typedef HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey0_idxfn,false> HashIndex_SUM_PROFITSUPPLIER14PART2_map_0;
  typedef HashIndex<SUM_PROFITSUPPLIER14PART2_entry,DOUBLE_TYPE,SUM_PROFITSUPPLIER14PART2_mapkey1_idxfn,false> HashIndex_SUM_PROFITSUPPLIER14PART2_map_1;
  
  struct SUM_PROFITPART12_entry {
    long SUM_PROFITPARTPART_PARTKEY; long PROFIT_O_YEAR; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITPART12_entry() { /*SUM_PROFITPARTPART_PARTKEY = 0L; PROFIT_O_YEAR = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITPART12_entry(const long c0, const long c1, const STRING_TYPE& c2, const DOUBLE_TYPE c3) { SUM_PROFITPARTPART_PARTKEY = c0; PROFIT_O_YEAR = c1; PROFIT_NATION = c2; __av = c3; }
    SUM_PROFITPART12_entry(const SUM_PROFITPART12_entry& other) : SUM_PROFITPARTPART_PARTKEY( other.SUM_PROFITPARTPART_PARTKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITPART12_entry& modify(const long c0, const long c1, const STRING_TYPE& c2) { SUM_PROFITPARTPART_PARTKEY = c0; PROFIT_O_YEAR = c1; PROFIT_NATION = c2;  return *this; }
    FORCE_INLINE SUM_PROFITPART12_entry& modify0(const long c0) { SUM_PROFITPARTPART_PARTKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITPART12_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPART12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTPART_PARTKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPART12_entry& x, const SUM_PROFITPART12_entry& y) {
      return x.SUM_PROFITPARTPART_PARTKEY == y.SUM_PROFITPARTPART_PARTKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITPART12_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPART12_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPART12_entry& x, const SUM_PROFITPART12_entry& y) {
      return x.SUM_PROFITPARTPART_PARTKEY == y.SUM_PROFITPARTPART_PARTKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITPART12_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITPART12_entry,DOUBLE_TYPE,SUM_PROFITPART12_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITPART12_entry,DOUBLE_TYPE,SUM_PROFITPART12_mapkey0_idxfn,false>
  > SUM_PROFITPART12_map;
  typedef HashIndex<SUM_PROFITPART12_entry,DOUBLE_TYPE,SUM_PROFITPART12_mapkey012_idxfn,true> HashIndex_SUM_PROFITPART12_map_012;
  typedef HashIndex<SUM_PROFITPART12_entry,DOUBLE_TYPE,SUM_PROFITPART12_mapkey0_idxfn,false> HashIndex_SUM_PROFITPART12_map_0;
  
  struct SUM_PROFITPART15_entry {
    long SUM_PROFITPARTPART_PARTKEY; long PROFIT_O_YEAR; STRING_TYPE PROFIT_NATION; DOUBLE_TYPE __av; 
    explicit SUM_PROFITPART15_entry() { /*SUM_PROFITPARTPART_PARTKEY = 0L; PROFIT_O_YEAR = 0L; PROFIT_NATION = ""; __av = 0.0; */ }
    explicit SUM_PROFITPART15_entry(const long c0, const long c1, const STRING_TYPE& c2, const DOUBLE_TYPE c3) { SUM_PROFITPARTPART_PARTKEY = c0; PROFIT_O_YEAR = c1; PROFIT_NATION = c2; __av = c3; }
    SUM_PROFITPART15_entry(const SUM_PROFITPART15_entry& other) : SUM_PROFITPARTPART_PARTKEY( other.SUM_PROFITPARTPART_PARTKEY ), PROFIT_O_YEAR( other.PROFIT_O_YEAR ), PROFIT_NATION( other.PROFIT_NATION ), __av( other.__av ) {}
    FORCE_INLINE SUM_PROFITPART15_entry& modify(const long c0, const long c1, const STRING_TYPE& c2) { SUM_PROFITPARTPART_PARTKEY = c0; PROFIT_O_YEAR = c1; PROFIT_NATION = c2;  return *this; }
    FORCE_INLINE SUM_PROFITPART15_entry& modify0(const long c0) { SUM_PROFITPARTPART_PARTKEY = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, SUM_PROFITPARTPART_PARTKEY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_O_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROFIT_NATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct SUM_PROFITPART15_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPART15_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTPART_PARTKEY);
      hash_combine(h, e.PROFIT_O_YEAR);
      hash_combine(h, e.PROFIT_NATION);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPART15_entry& x, const SUM_PROFITPART15_entry& y) {
      return x.SUM_PROFITPARTPART_PARTKEY == y.SUM_PROFITPARTPART_PARTKEY && x.PROFIT_O_YEAR == y.PROFIT_O_YEAR && x.PROFIT_NATION == y.PROFIT_NATION;
    }
  };
  
  struct SUM_PROFITPART15_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const SUM_PROFITPART15_entry& e) {
      size_t h = 0;
      hash_combine(h, e.SUM_PROFITPARTPART_PARTKEY);
      return h;
    }
    FORCE_INLINE static bool equals(const SUM_PROFITPART15_entry& x, const SUM_PROFITPART15_entry& y) {
      return x.SUM_PROFITPARTPART_PARTKEY == y.SUM_PROFITPARTPART_PARTKEY;
    }
  };
  
  typedef MultiHashMap<SUM_PROFITPART15_entry,DOUBLE_TYPE,
    HashIndex<SUM_PROFITPART15_entry,DOUBLE_TYPE,SUM_PROFITPART15_mapkey012_idxfn,true>,
    HashIndex<SUM_PROFITPART15_entry,DOUBLE_TYPE,SUM_PROFITPART15_mapkey0_idxfn,false>
  > SUM_PROFITPART15_map;
  typedef HashIndex<SUM_PROFITPART15_entry,DOUBLE_TYPE,SUM_PROFITPART15_mapkey012_idxfn,true> HashIndex_SUM_PROFITPART15_map_012;
  typedef HashIndex<SUM_PROFITPART15_entry,DOUBLE_TYPE,SUM_PROFITPART15_mapkey0_idxfn,false> HashIndex_SUM_PROFITPART15_map_0;
  
  struct tuple2_L_D {
    long _1; DOUBLE_TYPE __av;
    explicit tuple2_L_D() { }
    explicit tuple2_L_D(const long c1, DOUBLE_TYPE c__av=0.0) { _1 = c1; __av = c__av;}
    int operator==(const tuple2_L_D &rhs) const { return ((this->_1==rhs._1)); }
    FORCE_INLINE tuple2_L_D& modify(const long c0, DOUBLE_TYPE c__av) { _1 = c0; __av = c__av; return *this; }
    static bool equals(const tuple2_L_D &x, const tuple2_L_D &y) { return ((x._1==y._1)); }
    static long hash(const tuple2_L_D &e) {
      size_t h = 0;
      hash_combine(h, e._1);
      return h;
    }
  };
  struct tuple2_S_D {
    STRING_TYPE _1; DOUBLE_TYPE __av;
    explicit tuple2_S_D() { }
    explicit tuple2_S_D(const STRING_TYPE& c1, DOUBLE_TYPE c__av=0.0) { _1 = c1; __av = c__av;}
    int operator==(const tuple2_S_D &rhs) const { return ((this->_1==rhs._1)); }
    FORCE_INLINE tuple2_S_D& modify(const STRING_TYPE& c0, DOUBLE_TYPE c__av) { _1 = c0; __av = c__av; return *this; }
    static bool equals(const tuple2_S_D &x, const tuple2_S_D &y) { return ((x._1==y._1)); }
    static long hash(const tuple2_S_D &e) {
      size_t h = 0;
      hash_combine(h, e._1);
      return h;
    }
  };
  
  /* Type definition providing a way to access the results of the sql program */
  struct tlq_t{
    struct timeval t0,t; long tT,tN,tS;
    tlq_t(): tN(0), tS(0) { gettimeofday(&t0,NULL); }
  
  /* Serialization Code */
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const {
  
      ar << "\n";
      const SUM_PROFIT_map& _SUM_PROFIT = get_SUM_PROFIT();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(SUM_PROFIT), _SUM_PROFIT, "\t");
  
    }
  
    /* Functions returning / computing the results of top level queries */
    const SUM_PROFIT_map& get_SUM_PROFIT() const {
      return SUM_PROFIT;
    
    }
  
  protected:
  
    /* Data structures used for storing / computing top level queries */
    SUM_PROFIT_map SUM_PROFIT;
  
  };
  
  /* Type definition providing a way to incrementally maintain the results of the sql program */
  struct data_t : tlq_t{
    data_t(): tlq_t(), _c1(16U), _c3(16U), _c2(16U) {
      
      /* regex_t init */
      if(regcomp(&preg1, "^.*green.*$", REG_EXTENDED | REG_NOSUB)){
        cerr << "Error compiling regular expression: /^.*green.*$/" << endl;
        exit(-1);
      }
    }
  
    ~data_t() {
      regfree(&preg1);
    }
  
    /* Trigger functions for table relations */
    void on_insert_NATION(const long nation_nationkey, const STRING_TYPE nation_name, const long nation_regionkey, const STRING_TYPE nation_comment) {
      NATION_entry e(nation_nationkey, nation_name, nation_regionkey, nation_comment, 1L);
      NATION.addOrDelOnZero(e,1L);
    }
    
    
    
    /* Trigger functions for stream relations */
    void on_insert_LINEITEM(const long lineitem_orderkey, const long lineitem_partkey, const long lineitem_suppkey, const long lineitem_linenumber, const DOUBLE_TYPE lineitem_quantity, const DOUBLE_TYPE lineitem_extendedprice, const DOUBLE_TYPE lineitem_discount, const DOUBLE_TYPE lineitem_tax, const STRING_TYPE& lineitem_returnflag, const STRING_TYPE& lineitem_linestatus, const date lineitem_shipdate, const date lineitem_commitdate, const date lineitem_receiptdate, const STRING_TYPE& lineitem_shipinstruct, const STRING_TYPE& lineitem_shipmode, const STRING_TYPE& lineitem_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        { //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i1 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h2 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se6.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n1 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i1->slice(se6, h2));
          SUM_PROFITLINEITEM14_entry* e1;
         
          if (n1 && (e1 = n1->obj)) {
            do {                
              long profit_o_year = e1->PROFIT_O_YEAR;
              long v1 = e1->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM12_map_0* i2 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
                const HASH_RES_t h1 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se5.modify0(lineitem_suppkey));
                HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n2 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i2->slice(se5, h1));
                SUM_PROFITLINEITEM12_entry* e2;
               
                if (n2 && (e2 = n2->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e2->PROFIT_NATION;
                    long v2 = e2->__av;
                    SUM_PROFIT.addOrDelOnZero(se1.modify(profit_nation,profit_o_year),(SUM_PROFITLINEITEM11.getValueOrDefault(se2.modify(lineitem_partkey)) * (((SUM_PROFITLINEITEM13.getValueOrDefault(se3.modify(lineitem_partkey,lineitem_suppkey)) * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))) + (SUM_PROFITLINEITEM19.getValueOrDefault(se4.modify(lineitem_partkey,lineitem_suppkey)) * (-1L * lineitem_quantity))) * (v1 * v2))));
                    n2 = n2->nxt;
                  } while (n2 && (e2 = n2->obj) && h1 == n2->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se5, *e2)); 
                }
              }
              n1 = n1->nxt;
            } while (n1 && (e1 = n1->obj) && h2 == n1->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se6, *e1)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i3 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h3 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se10.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n3 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i3->slice(se10, h3));
          SUM_PROFITLINEITEM12_entry* e3;
         
          if (n3 && (e3 = n3->obj)) {
            do {                
              STRING_TYPE profit_nation = e3->PROFIT_NATION;
              long v3 = e3->__av;
              SUM_PROFITORDERS12.addOrDelOnZero(se7.modify(lineitem_orderkey,profit_nation),(SUM_PROFITLINEITEM11.getValueOrDefault(se8.modify(lineitem_partkey)) * (SUM_PROFITLINEITEM19.getValueOrDefault(se9.modify(lineitem_partkey,lineitem_suppkey)) * (v3 * lineitem_quantity))));
              n3 = n3->nxt;
            } while (n3 && (e3 = n3->obj) && h3 == n3->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se10, *e3)); 
          }
        }SUM_PROFITORDERS12PARTSUPP1.addOrDelOnZero(se11.modify(lineitem_orderkey,lineitem_partkey,lineitem_suppkey),lineitem_quantity);
        SUM_PROFITORDERS12SUPPLIER1.addOrDelOnZero(se12.modify(lineitem_orderkey,lineitem_suppkey),(SUM_PROFITLINEITEM19.getValueOrDefault(se13.modify(lineitem_partkey,lineitem_suppkey)) * (SUM_PROFITLINEITEM11.getValueOrDefault(se14.modify(lineitem_partkey)) * lineitem_quantity)));
        SUM_PROFITORDERS12SUPPLIER1PART2.addOrDelOnZero(se15.modify(lineitem_orderkey,lineitem_partkey,lineitem_suppkey),(SUM_PROFITLINEITEM19.getValueOrDefault(se16.modify(lineitem_partkey,lineitem_suppkey)) * lineitem_quantity));
        { //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i4 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h4 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se19.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n4 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i4->slice(se19, h4));
          SUM_PROFITLINEITEM12_entry* e4;
         
          if (n4 && (e4 = n4->obj)) {
            do {                
              STRING_TYPE profit_nation = e4->PROFIT_NATION;
              long v4 = e4->__av;
              SUM_PROFITORDERS12PART2.addOrDelOnZero(se17.modify(lineitem_orderkey,lineitem_partkey,profit_nation),(SUM_PROFITLINEITEM19.getValueOrDefault(se18.modify(lineitem_partkey,lineitem_suppkey)) * (v4 * lineitem_quantity)));
              n4 = n4->nxt;
            } while (n4 && (e4 = n4->obj) && h4 == n4->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se19, *e4)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i5 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h5 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se23.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n5 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i5->slice(se23, h5));
          SUM_PROFITLINEITEM12_entry* e5;
         
          if (n5 && (e5 = n5->obj)) {
            do {                
              STRING_TYPE profit_nation = e5->PROFIT_NATION;
              long v5 = e5->__av;
              SUM_PROFITORDERS15.addOrDelOnZero(se20.modify(lineitem_orderkey,profit_nation),(SUM_PROFITLINEITEM11.getValueOrDefault(se21.modify(lineitem_partkey)) * (SUM_PROFITLINEITEM13.getValueOrDefault(se22.modify(lineitem_partkey,lineitem_suppkey)) * (v5 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))))));
              n5 = n5->nxt;
            } while (n5 && (e5 = n5->obj) && h5 == n5->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se23, *e5)); 
          }
        }SUM_PROFITORDERS15PARTSUPP1.addOrDelOnZero(se24.modify(lineitem_orderkey,lineitem_partkey,lineitem_suppkey),(lineitem_extendedprice * (1L + (-1L * lineitem_discount))));
        SUM_PROFITORDERS15SUPPLIER1.addOrDelOnZero(se25.modify(lineitem_orderkey,lineitem_suppkey),(SUM_PROFITLINEITEM13.getValueOrDefault(se26.modify(lineitem_partkey,lineitem_suppkey)) * (SUM_PROFITLINEITEM11.getValueOrDefault(se27.modify(lineitem_partkey)) * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))));
        SUM_PROFITORDERS15SUPPLIER1PART2.addOrDelOnZero(se28.modify(lineitem_orderkey,lineitem_partkey,lineitem_suppkey),(SUM_PROFITLINEITEM13.getValueOrDefault(se29.modify(lineitem_partkey,lineitem_suppkey)) * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))));
        { //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i6 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h6 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se32.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n6 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i6->slice(se32, h6));
          SUM_PROFITLINEITEM12_entry* e6;
         
          if (n6 && (e6 = n6->obj)) {
            do {                
              STRING_TYPE profit_nation = e6->PROFIT_NATION;
              long v6 = e6->__av;
              SUM_PROFITORDERS15PART2.addOrDelOnZero(se30.modify(lineitem_orderkey,lineitem_partkey,profit_nation),(SUM_PROFITLINEITEM13.getValueOrDefault(se31.modify(lineitem_partkey,lineitem_suppkey)) * (v6 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))));
              n6 = n6->nxt;
            } while (n6 && (e6 = n6->obj) && h6 == n6->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se32, *e6)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i7 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h7 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se34.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n7 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i7->slice(se34, h7));
          SUM_PROFITLINEITEM14_entry* e7;
         
          if (n7 && (e7 = n7->obj)) {
            do {                
              long profit_o_year = e7->PROFIT_O_YEAR;
              long v7 = e7->__av;
              SUM_PROFITPARTSUPP11.addOrDelOnZero(se33.modify(lineitem_partkey,lineitem_suppkey,profit_o_year),(v7 * lineitem_quantity));
              n7 = n7->nxt;
            } while (n7 && (e7 = n7->obj) && h7 == n7->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se34, *e7)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i8 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h8 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se36.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n8 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i8->slice(se36, h8));
          SUM_PROFITLINEITEM14_entry* e8;
         
          if (n8 && (e8 = n8->obj)) {
            do {                
              long profit_o_year = e8->PROFIT_O_YEAR;
              long v8 = e8->__av;
              SUM_PROFITPARTSUPP16.addOrDelOnZero(se35.modify(lineitem_partkey,lineitem_suppkey,profit_o_year),(v8 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))));
              n8 = n8->nxt;
            } while (n8 && (e8 = n8->obj) && h8 == n8->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se36, *e8)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i9 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h9 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se40.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n9 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i9->slice(se40, h9));
          SUM_PROFITLINEITEM14_entry* e9;
         
          if (n9 && (e9 = n9->obj)) {
            do {                
              long profit_o_year = e9->PROFIT_O_YEAR;
              long v9 = e9->__av;
              SUM_PROFITSUPPLIER11.addOrDelOnZero(se37.modify(lineitem_suppkey,profit_o_year),(SUM_PROFITLINEITEM19.getValueOrDefault(se38.modify(lineitem_partkey,lineitem_suppkey)) * (SUM_PROFITLINEITEM11.getValueOrDefault(se39.modify(lineitem_partkey)) * (v9 * lineitem_quantity))));
              n9 = n9->nxt;
            } while (n9 && (e9 = n9->obj) && h9 == n9->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se40, *e9)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i10 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h10 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se43.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n10 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i10->slice(se43, h10));
          SUM_PROFITLINEITEM14_entry* e10;
         
          if (n10 && (e10 = n10->obj)) {
            do {                
              long profit_o_year = e10->PROFIT_O_YEAR;
              long v10 = e10->__av;
              SUM_PROFITSUPPLIER11PART2.addOrDelOnZero(se41.modify(lineitem_partkey,lineitem_suppkey,profit_o_year),(SUM_PROFITLINEITEM19.getValueOrDefault(se42.modify(lineitem_partkey,lineitem_suppkey)) * (v10 * lineitem_quantity)));
              n10 = n10->nxt;
            } while (n10 && (e10 = n10->obj) && h10 == n10->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se43, *e10)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i11 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h11 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se47.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n11 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i11->slice(se47, h11));
          SUM_PROFITLINEITEM14_entry* e11;
         
          if (n11 && (e11 = n11->obj)) {
            do {                
              long profit_o_year = e11->PROFIT_O_YEAR;
              long v11 = e11->__av;
              SUM_PROFITSUPPLIER14.addOrDelOnZero(se44.modify(lineitem_suppkey,profit_o_year),(SUM_PROFITLINEITEM13.getValueOrDefault(se45.modify(lineitem_partkey,lineitem_suppkey)) * (SUM_PROFITLINEITEM11.getValueOrDefault(se46.modify(lineitem_partkey)) * (v11 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))))));
              n11 = n11->nxt;
            } while (n11 && (e11 = n11->obj) && h11 == n11->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se47, *e11)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM14_map_0* i12 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
          const HASH_RES_t h12 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se50.modify0(lineitem_orderkey));
          HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n12 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i12->slice(se50, h12));
          SUM_PROFITLINEITEM14_entry* e12;
         
          if (n12 && (e12 = n12->obj)) {
            do {                
              long profit_o_year = e12->PROFIT_O_YEAR;
              long v12 = e12->__av;
              SUM_PROFITSUPPLIER14PART2.addOrDelOnZero(se48.modify(lineitem_partkey,lineitem_suppkey,profit_o_year),(SUM_PROFITLINEITEM13.getValueOrDefault(se49.modify(lineitem_partkey,lineitem_suppkey)) * (v12 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount))))));
              n12 = n12->nxt;
            } while (n12 && (e12 = n12->obj) && h12 == n12->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se50, *e12)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i13 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h14 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se54.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n13 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i13->slice(se54, h14));
          SUM_PROFITLINEITEM12_entry* e13;
         
          if (n13 && (e13 = n13->obj)) {
            do {                
              STRING_TYPE profit_nation = e13->PROFIT_NATION;
              long v13 = e13->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM14_map_0* i14 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
                const HASH_RES_t h13 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se53.modify0(lineitem_orderkey));
                HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n14 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i14->slice(se53, h13));
                SUM_PROFITLINEITEM14_entry* e14;
               
                if (n14 && (e14 = n14->obj)) {
                  do {                
                    long profit_o_year = e14->PROFIT_O_YEAR;
                    long v14 = e14->__av;
                    SUM_PROFITPART12.addOrDelOnZero(se51.modify(lineitem_partkey,profit_o_year,profit_nation),(SUM_PROFITLINEITEM19.getValueOrDefault(se52.modify(lineitem_partkey,lineitem_suppkey)) * (v13 * (v14 * lineitem_quantity))));
                    n14 = n14->nxt;
                  } while (n14 && (e14 = n14->obj) && h13 == n14->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se53, *e14)); 
                }
              }
              n13 = n13->nxt;
            } while (n13 && (e13 = n13->obj) && h14 == n13->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se54, *e13)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i15 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h16 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se58.modify0(lineitem_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n15 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i15->slice(se58, h16));
          SUM_PROFITLINEITEM12_entry* e15;
         
          if (n15 && (e15 = n15->obj)) {
            do {                
              STRING_TYPE profit_nation = e15->PROFIT_NATION;
              long v15 = e15->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM14_map_0* i16 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0*>(SUM_PROFITLINEITEM14.index[1]);
                const HASH_RES_t h15 = SUM_PROFITLINEITEM14_mapkey0_idxfn::hash(se57.modify0(lineitem_orderkey));
                HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode* n16 = static_cast<HashIndex_SUM_PROFITLINEITEM14_map_0::IdxNode*>(i16->slice(se57, h15));
                SUM_PROFITLINEITEM14_entry* e16;
               
                if (n16 && (e16 = n16->obj)) {
                  do {                
                    long profit_o_year = e16->PROFIT_O_YEAR;
                    long v16 = e16->__av;
                    SUM_PROFITPART15.addOrDelOnZero(se55.modify(lineitem_partkey,profit_o_year,profit_nation),(SUM_PROFITLINEITEM13.getValueOrDefault(se56.modify(lineitem_partkey,lineitem_suppkey)) * (v15 * (v16 * (lineitem_extendedprice * (1L + (-1L * lineitem_discount)))))));
                    n16 = n16->nxt;
                  } while (n16 && (e16 = n16->obj) && h15 == n16->hash &&  SUM_PROFITLINEITEM14_mapkey0_idxfn::equals(se57, *e16)); 
                }
              }
              n15 = n15->nxt;
            } while (n15 && (e15 = n15->obj) && h16 == n15->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se58, *e15)); 
          }
        }
      }
    }
    void on_insert_ORDERS(const long orders_orderkey, const long orders_custkey, const STRING_TYPE& orders_orderstatus, const DOUBLE_TYPE orders_totalprice, const date orders_orderdate, const STRING_TYPE& orders_orderpriority, const STRING_TYPE& orders_clerk, const long orders_shippriority, const STRING_TYPE& orders_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        long l1 = Uyear_part(orders_orderdate);
        _c1.clear();
        { //slice 
          const HashIndex_SUM_PROFITORDERS12_map_0* i17 = static_cast<HashIndex_SUM_PROFITORDERS12_map_0*>(SUM_PROFITORDERS12.index[1]);
          const HASH_RES_t h17 = SUM_PROFITORDERS12_mapkey0_idxfn::hash(se60.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS12_map_0::IdxNode* n17 = static_cast<HashIndex_SUM_PROFITORDERS12_map_0::IdxNode*>(i17->slice(se60, h17));
          SUM_PROFITORDERS12_entry* e17;
         
          if (n17 && (e17 = n17->obj)) {
            do {                
              STRING_TYPE profit_nation = e17->PROFIT_NATION;
              DOUBLE_TYPE v18 = e17->__av;
              _c1.addOrDelOnZero(st1.modify(profit_nation,(v18 * -1L)), (v18 * -1L));
              n17 = n17->nxt;
            } while (n17 && (e17 = n17->obj) && h17 == n17->hash &&  SUM_PROFITORDERS12_mapkey0_idxfn::equals(se60, *e17)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15_map_0* i18 = static_cast<HashIndex_SUM_PROFITORDERS15_map_0*>(SUM_PROFITORDERS15.index[1]);
          const HASH_RES_t h18 = SUM_PROFITORDERS15_mapkey0_idxfn::hash(se61.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS15_map_0::IdxNode* n18 = static_cast<HashIndex_SUM_PROFITORDERS15_map_0::IdxNode*>(i18->slice(se61, h18));
          SUM_PROFITORDERS15_entry* e18;
         
          if (n18 && (e18 = n18->obj)) {
            do {                
              STRING_TYPE profit_nation = e18->PROFIT_NATION;
              DOUBLE_TYPE v19 = e18->__av;
              _c1.addOrDelOnZero(st2.modify(profit_nation,v19), v19);
              n18 = n18->nxt;
            } while (n18 && (e18 = n18->obj) && h18 == n18->hash &&  SUM_PROFITORDERS15_mapkey0_idxfn::equals(se61, *e18)); 
          }
        }{  // temp foreach
          const HashIndex<tuple2_S_D, DOUBLE_TYPE>* i19 = static_cast<HashIndex<tuple2_S_D, DOUBLE_TYPE>*>(_c1.index[0]);
          HashIndex<tuple2_S_D, DOUBLE_TYPE>::IdxNode* n19; 
          tuple2_S_D* e19;
        
          for (size_t i = 0; i < i19->size_; i++)
          {
            n19 = i19->buckets_ + i;
            while (n19 && (e19 = n19->obj))
            {
              STRING_TYPE profit_nation = e19->_1;  
              DOUBLE_TYPE v20 = e19->__av; 
            SUM_PROFIT.addOrDelOnZero(se59.modify(profit_nation,l1),v20);      
              n19 = n19->nxt;
            }
          }
        }long l2 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_0* i20 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_0*>(SUM_PROFITORDERS12PARTSUPP1.index[1]);
          const HASH_RES_t h19 = SUM_PROFITORDERS12PARTSUPP1_mapkey0_idxfn::hash(se63.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_0::IdxNode* n20 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_0::IdxNode*>(i20->slice(se63, h19));
          SUM_PROFITORDERS12PARTSUPP1_entry* e20;
         
          if (n20 && (e20 = n20->obj)) {
            do {                
              long sum_profitpartsupppartsupp_partkey = e20->SUM_PROFITORDERS12PARTSUPPPARTSUPP_PARTKEY;
              long sum_profitpartsupppartsupp_suppkey = e20->SUM_PROFITORDERS12PARTSUPPPARTSUPP_SUPPKEY;
              DOUBLE_TYPE v21 = e20->__av;
              SUM_PROFITPARTSUPP11.addOrDelOnZero(se62.modify(sum_profitpartsupppartsupp_partkey,sum_profitpartsupppartsupp_suppkey,l2),v21);
              n20 = n20->nxt;
            } while (n20 && (e20 = n20->obj) && h19 == n20->hash &&  SUM_PROFITORDERS12PARTSUPP1_mapkey0_idxfn::equals(se63, *e20)); 
          }
        }long l3 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_0* i21 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_0*>(SUM_PROFITORDERS15PARTSUPP1.index[1]);
          const HASH_RES_t h20 = SUM_PROFITORDERS15PARTSUPP1_mapkey0_idxfn::hash(se65.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_0::IdxNode* n21 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_0::IdxNode*>(i21->slice(se65, h20));
          SUM_PROFITORDERS15PARTSUPP1_entry* e21;
         
          if (n21 && (e21 = n21->obj)) {
            do {                
              long sum_profitpartsupppartsupp_partkey = e21->SUM_PROFITORDERS15PARTSUPPPARTSUPP_PARTKEY;
              long sum_profitpartsupppartsupp_suppkey = e21->SUM_PROFITORDERS15PARTSUPPPARTSUPP_SUPPKEY;
              DOUBLE_TYPE v22 = e21->__av;
              SUM_PROFITPARTSUPP16.addOrDelOnZero(se64.modify(sum_profitpartsupppartsupp_partkey,sum_profitpartsupppartsupp_suppkey,l3),v22);
              n21 = n21->nxt;
            } while (n21 && (e21 = n21->obj) && h20 == n21->hash &&  SUM_PROFITORDERS15PARTSUPP1_mapkey0_idxfn::equals(se65, *e21)); 
          }
        }long l4 = Uyear_part(orders_orderdate);
        SUM_PROFITLINEITEM14.addOrDelOnZero(se66.modify(orders_orderkey,l4),1L);
        long l5 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_0* i22 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_0*>(SUM_PROFITORDERS12SUPPLIER1.index[1]);
          const HASH_RES_t h21 = SUM_PROFITORDERS12SUPPLIER1_mapkey0_idxfn::hash(se68.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_0::IdxNode* n22 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_0::IdxNode*>(i22->slice(se68, h21));
          SUM_PROFITORDERS12SUPPLIER1_entry* e22;
         
          if (n22 && (e22 = n22->obj)) {
            do {                
              long sum_profitsuppliersupplier_suppkey = e22->SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v23 = e22->__av;
              SUM_PROFITSUPPLIER11.addOrDelOnZero(se67.modify(sum_profitsuppliersupplier_suppkey,l5),v23);
              n22 = n22->nxt;
            } while (n22 && (e22 = n22->obj) && h21 == n22->hash &&  SUM_PROFITORDERS12SUPPLIER1_mapkey0_idxfn::equals(se68, *e22)); 
          }
        }long l6 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_0* i23 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_0*>(SUM_PROFITORDERS12SUPPLIER1PART2.index[1]);
          const HASH_RES_t h22 = SUM_PROFITORDERS12SUPPLIER1PART2_mapkey0_idxfn::hash(se70.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_0::IdxNode* n23 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_0::IdxNode*>(i23->slice(se70, h22));
          SUM_PROFITORDERS12SUPPLIER1PART2_entry* e23;
         
          if (n23 && (e23 = n23->obj)) {
            do {                
              long sum_profitsupplier11partpart_partkey = e23->SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY;
              long sum_profitsuppliersupplier_suppkey = e23->SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v24 = e23->__av;
              SUM_PROFITSUPPLIER11PART2.addOrDelOnZero(se69.modify(sum_profitsupplier11partpart_partkey,sum_profitsuppliersupplier_suppkey,l6),v24);
              n23 = n23->nxt;
            } while (n23 && (e23 = n23->obj) && h22 == n23->hash &&  SUM_PROFITORDERS12SUPPLIER1PART2_mapkey0_idxfn::equals(se70, *e23)); 
          }
        }long l7 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_0* i24 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_0*>(SUM_PROFITORDERS15SUPPLIER1.index[1]);
          const HASH_RES_t h23 = SUM_PROFITORDERS15SUPPLIER1_mapkey0_idxfn::hash(se72.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_0::IdxNode* n24 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_0::IdxNode*>(i24->slice(se72, h23));
          SUM_PROFITORDERS15SUPPLIER1_entry* e24;
         
          if (n24 && (e24 = n24->obj)) {
            do {                
              long sum_profitsuppliersupplier_suppkey = e24->SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v25 = e24->__av;
              SUM_PROFITSUPPLIER14.addOrDelOnZero(se71.modify(sum_profitsuppliersupplier_suppkey,l7),v25);
              n24 = n24->nxt;
            } while (n24 && (e24 = n24->obj) && h23 == n24->hash &&  SUM_PROFITORDERS15SUPPLIER1_mapkey0_idxfn::equals(se72, *e24)); 
          }
        }long l8 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_0* i25 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_0*>(SUM_PROFITORDERS15SUPPLIER1PART2.index[1]);
          const HASH_RES_t h24 = SUM_PROFITORDERS15SUPPLIER1PART2_mapkey0_idxfn::hash(se74.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_0::IdxNode* n25 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_0::IdxNode*>(i25->slice(se74, h24));
          SUM_PROFITORDERS15SUPPLIER1PART2_entry* e25;
         
          if (n25 && (e25 = n25->obj)) {
            do {                
              long sum_profitsupplier14partpart_partkey = e25->SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY;
              long sum_profitsuppliersupplier_suppkey = e25->SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v26 = e25->__av;
              SUM_PROFITSUPPLIER14PART2.addOrDelOnZero(se73.modify(sum_profitsupplier14partpart_partkey,sum_profitsuppliersupplier_suppkey,l8),v26);
              n25 = n25->nxt;
            } while (n25 && (e25 = n25->obj) && h24 == n25->hash &&  SUM_PROFITORDERS15SUPPLIER1PART2_mapkey0_idxfn::equals(se74, *e25)); 
          }
        }long l9 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS12PART2_map_0* i26 = static_cast<HashIndex_SUM_PROFITORDERS12PART2_map_0*>(SUM_PROFITORDERS12PART2.index[1]);
          const HASH_RES_t h25 = SUM_PROFITORDERS12PART2_mapkey0_idxfn::hash(se76.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS12PART2_map_0::IdxNode* n26 = static_cast<HashIndex_SUM_PROFITORDERS12PART2_map_0::IdxNode*>(i26->slice(se76, h25));
          SUM_PROFITORDERS12PART2_entry* e26;
         
          if (n26 && (e26 = n26->obj)) {
            do {                
              long sum_profitpartpart_partkey = e26->SUM_PROFITORDERS12PARTPART_PARTKEY;
              STRING_TYPE profit_nation = e26->PROFIT_NATION;
              DOUBLE_TYPE v27 = e26->__av;
              SUM_PROFITPART12.addOrDelOnZero(se75.modify(sum_profitpartpart_partkey,l9,profit_nation),v27);
              n26 = n26->nxt;
            } while (n26 && (e26 = n26->obj) && h25 == n26->hash &&  SUM_PROFITORDERS12PART2_mapkey0_idxfn::equals(se76, *e26)); 
          }
        }long l10 = Uyear_part(orders_orderdate);
        { //slice 
          const HashIndex_SUM_PROFITORDERS15PART2_map_0* i27 = static_cast<HashIndex_SUM_PROFITORDERS15PART2_map_0*>(SUM_PROFITORDERS15PART2.index[1]);
          const HASH_RES_t h26 = SUM_PROFITORDERS15PART2_mapkey0_idxfn::hash(se78.modify0(orders_orderkey));
          HashIndex_SUM_PROFITORDERS15PART2_map_0::IdxNode* n27 = static_cast<HashIndex_SUM_PROFITORDERS15PART2_map_0::IdxNode*>(i27->slice(se78, h26));
          SUM_PROFITORDERS15PART2_entry* e27;
         
          if (n27 && (e27 = n27->obj)) {
            do {                
              long sum_profitpartpart_partkey = e27->SUM_PROFITORDERS15PARTPART_PARTKEY;
              STRING_TYPE profit_nation = e27->PROFIT_NATION;
              DOUBLE_TYPE v28 = e27->__av;
              SUM_PROFITPART15.addOrDelOnZero(se77.modify(sum_profitpartpart_partkey,l10,profit_nation),v28);
              n27 = n27->nxt;
            } while (n27 && (e27 = n27->obj) && h26 == n27->hash &&  SUM_PROFITORDERS15PART2_mapkey0_idxfn::equals(se78, *e27)); 
          }
        }
      }
    }
    void on_insert_PART(const long part_partkey, const STRING_TYPE& part_name, const STRING_TYPE& part_mfgr, const STRING_TYPE& part_brand, const STRING_TYPE& part_type, const long part_size, const STRING_TYPE& part_container, const DOUBLE_TYPE part_retailprice, const STRING_TYPE& part_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        { //slice 
          const HashIndex_SUM_PROFITPART12_map_0* i28 = static_cast<HashIndex_SUM_PROFITPART12_map_0*>(SUM_PROFITPART12.index[1]);
          const HASH_RES_t h27 = SUM_PROFITPART12_mapkey0_idxfn::hash(se80.modify0(part_partkey));
          HashIndex_SUM_PROFITPART12_map_0::IdxNode* n28 = static_cast<HashIndex_SUM_PROFITPART12_map_0::IdxNode*>(i28->slice(se80, h27));
          SUM_PROFITPART12_entry* e28;
         
          if (n28 && (e28 = n28->obj)) {
            do {                
              long profit_o_year = e28->PROFIT_O_YEAR;
              STRING_TYPE profit_nation = e28->PROFIT_NATION;
              DOUBLE_TYPE v29 = e28->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFIT.addOrDelOnZero(se79.modify(profit_nation,profit_o_year),(v29 * -1L)) : (void)0);
              n28 = n28->nxt;
            } while (n28 && (e28 = n28->obj) && h27 == n28->hash &&  SUM_PROFITPART12_mapkey0_idxfn::equals(se80, *e28)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPART15_map_0* i29 = static_cast<HashIndex_SUM_PROFITPART15_map_0*>(SUM_PROFITPART15.index[1]);
          const HASH_RES_t h28 = SUM_PROFITPART15_mapkey0_idxfn::hash(se81.modify0(part_partkey));
          HashIndex_SUM_PROFITPART15_map_0::IdxNode* n29 = static_cast<HashIndex_SUM_PROFITPART15_map_0::IdxNode*>(i29->slice(se81, h28));
          SUM_PROFITPART15_entry* e29;
         
          if (n29 && (e29 = n29->obj)) {
            do {                
              long profit_o_year = e29->PROFIT_O_YEAR;
              STRING_TYPE profit_nation = e29->PROFIT_NATION;
              DOUBLE_TYPE v30 = e29->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFIT.addOrDelOnZero(se79.modify(profit_nation,profit_o_year),v30) : (void)0);
              n29 = n29->nxt;
            } while (n29 && (e29 = n29->obj) && h28 == n29->hash &&  SUM_PROFITPART15_mapkey0_idxfn::equals(se81, *e29)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12PART2_map_1* i30 = static_cast<HashIndex_SUM_PROFITORDERS12PART2_map_1*>(SUM_PROFITORDERS12PART2.index[2]);
          const HASH_RES_t h29 = SUM_PROFITORDERS12PART2_mapkey1_idxfn::hash(se83.modify1(part_partkey));
          HashIndex_SUM_PROFITORDERS12PART2_map_1::IdxNode* n30 = static_cast<HashIndex_SUM_PROFITORDERS12PART2_map_1::IdxNode*>(i30->slice(se83, h29));
          SUM_PROFITORDERS12PART2_entry* e30;
         
          if (n30 && (e30 = n30->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e30->SUM_PROFITORDERSORDERS_ORDERKEY;
              STRING_TYPE profit_nation = e30->PROFIT_NATION;
              DOUBLE_TYPE v31 = e30->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITORDERS12.addOrDelOnZero(se82.modify(sum_profitordersorders_orderkey,profit_nation),v31) : (void)0);
              n30 = n30->nxt;
            } while (n30 && (e30 = n30->obj) && h29 == n30->hash &&  SUM_PROFITORDERS12PART2_mapkey1_idxfn::equals(se83, *e30)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_1* i31 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_1*>(SUM_PROFITORDERS12SUPPLIER1PART2.index[2]);
          const HASH_RES_t h30 = SUM_PROFITORDERS12SUPPLIER1PART2_mapkey1_idxfn::hash(se85.modify1(part_partkey));
          HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_1::IdxNode* n31 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_1::IdxNode*>(i31->slice(se85, h30));
          SUM_PROFITORDERS12SUPPLIER1PART2_entry* e31;
         
          if (n31 && (e31 = n31->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e31->SUM_PROFITORDERSORDERS_ORDERKEY;
              long sum_profitorders12suppliersupplier_suppkey = e31->SUM_PROFITORDERS12SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v32 = e31->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITORDERS12SUPPLIER1.addOrDelOnZero(se84.modify(sum_profitordersorders_orderkey,sum_profitorders12suppliersupplier_suppkey),v32) : (void)0);
              n31 = n31->nxt;
            } while (n31 && (e31 = n31->obj) && h30 == n31->hash &&  SUM_PROFITORDERS12SUPPLIER1PART2_mapkey1_idxfn::equals(se85, *e31)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15PART2_map_1* i32 = static_cast<HashIndex_SUM_PROFITORDERS15PART2_map_1*>(SUM_PROFITORDERS15PART2.index[2]);
          const HASH_RES_t h31 = SUM_PROFITORDERS15PART2_mapkey1_idxfn::hash(se87.modify1(part_partkey));
          HashIndex_SUM_PROFITORDERS15PART2_map_1::IdxNode* n32 = static_cast<HashIndex_SUM_PROFITORDERS15PART2_map_1::IdxNode*>(i32->slice(se87, h31));
          SUM_PROFITORDERS15PART2_entry* e32;
         
          if (n32 && (e32 = n32->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e32->SUM_PROFITORDERSORDERS_ORDERKEY;
              STRING_TYPE profit_nation = e32->PROFIT_NATION;
              DOUBLE_TYPE v33 = e32->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITORDERS15.addOrDelOnZero(se86.modify(sum_profitordersorders_orderkey,profit_nation),v33) : (void)0);
              n32 = n32->nxt;
            } while (n32 && (e32 = n32->obj) && h31 == n32->hash &&  SUM_PROFITORDERS15PART2_mapkey1_idxfn::equals(se87, *e32)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_1* i33 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_1*>(SUM_PROFITORDERS15SUPPLIER1PART2.index[2]);
          const HASH_RES_t h32 = SUM_PROFITORDERS15SUPPLIER1PART2_mapkey1_idxfn::hash(se89.modify1(part_partkey));
          HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_1::IdxNode* n33 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_1::IdxNode*>(i33->slice(se89, h32));
          SUM_PROFITORDERS15SUPPLIER1PART2_entry* e33;
         
          if (n33 && (e33 = n33->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e33->SUM_PROFITORDERSORDERS_ORDERKEY;
              long sum_profitorders15suppliersupplier_suppkey = e33->SUM_PROFITORDERS15SUPPLIERSUPPLIER_SUPPKEY;
              DOUBLE_TYPE v34 = e33->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITORDERS15SUPPLIER1.addOrDelOnZero(se88.modify(sum_profitordersorders_orderkey,sum_profitorders15suppliersupplier_suppkey),v34) : (void)0);
              n33 = n33->nxt;
            } while (n33 && (e33 = n33->obj) && h32 == n33->hash &&  SUM_PROFITORDERS15SUPPLIER1PART2_mapkey1_idxfn::equals(se89, *e33)); 
          }
        }(/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITLINEITEM11.addOrDelOnZero(se90.modify(part_partkey),1L) : (void)0);
        { //slice 
          const HashIndex_SUM_PROFITSUPPLIER11PART2_map_0* i34 = static_cast<HashIndex_SUM_PROFITSUPPLIER11PART2_map_0*>(SUM_PROFITSUPPLIER11PART2.index[1]);
          const HASH_RES_t h33 = SUM_PROFITSUPPLIER11PART2_mapkey0_idxfn::hash(se92.modify0(part_partkey));
          HashIndex_SUM_PROFITSUPPLIER11PART2_map_0::IdxNode* n34 = static_cast<HashIndex_SUM_PROFITSUPPLIER11PART2_map_0::IdxNode*>(i34->slice(se92, h33));
          SUM_PROFITSUPPLIER11PART2_entry* e34;
         
          if (n34 && (e34 = n34->obj)) {
            do {                
              long sum_profitsuppliersupplier_suppkey = e34->SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
              long profit_o_year = e34->PROFIT_O_YEAR;
              DOUBLE_TYPE v35 = e34->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITSUPPLIER11.addOrDelOnZero(se91.modify(sum_profitsuppliersupplier_suppkey,profit_o_year),v35) : (void)0);
              n34 = n34->nxt;
            } while (n34 && (e34 = n34->obj) && h33 == n34->hash &&  SUM_PROFITSUPPLIER11PART2_mapkey0_idxfn::equals(se92, *e34)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITSUPPLIER14PART2_map_0* i35 = static_cast<HashIndex_SUM_PROFITSUPPLIER14PART2_map_0*>(SUM_PROFITSUPPLIER14PART2.index[1]);
          const HASH_RES_t h34 = SUM_PROFITSUPPLIER14PART2_mapkey0_idxfn::hash(se94.modify0(part_partkey));
          HashIndex_SUM_PROFITSUPPLIER14PART2_map_0::IdxNode* n35 = static_cast<HashIndex_SUM_PROFITSUPPLIER14PART2_map_0::IdxNode*>(i35->slice(se94, h34));
          SUM_PROFITSUPPLIER14PART2_entry* e35;
         
          if (n35 && (e35 = n35->obj)) {
            do {                
              long sum_profitsuppliersupplier_suppkey = e35->SUM_PROFITSUPPLIERSUPPLIER_SUPPKEY;
              long profit_o_year = e35->PROFIT_O_YEAR;
              DOUBLE_TYPE v36 = e35->__av;
              (/*if */(0L != Upreg_match(preg1,part_name)) ? SUM_PROFITSUPPLIER14.addOrDelOnZero(se93.modify(sum_profitsuppliersupplier_suppkey,profit_o_year),v36) : (void)0);
              n35 = n35->nxt;
            } while (n35 && (e35 = n35->obj) && h34 == n35->hash &&  SUM_PROFITSUPPLIER14PART2_mapkey0_idxfn::equals(se94, *e35)); 
          }
        }
      }
    }
    void on_insert_SUPPLIER(const long supplier_suppkey, const STRING_TYPE& supplier_name, const STRING_TYPE& supplier_address, const long supplier_nationkey, const STRING_TYPE& supplier_phone, const DOUBLE_TYPE supplier_acctbal, const STRING_TYPE& supplier_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        _c2.clear();
        { //slice 
          const HashIndex_SUM_PROFITSUPPLIER11_map_0* i36 = static_cast<HashIndex_SUM_PROFITSUPPLIER11_map_0*>(SUM_PROFITSUPPLIER11.index[1]);
          const HASH_RES_t h35 = SUM_PROFITSUPPLIER11_mapkey0_idxfn::hash(se96.modify0(supplier_suppkey));
          HashIndex_SUM_PROFITSUPPLIER11_map_0::IdxNode* n36 = static_cast<HashIndex_SUM_PROFITSUPPLIER11_map_0::IdxNode*>(i36->slice(se96, h35));
          SUM_PROFITSUPPLIER11_entry* e36;
         
          if (n36 && (e36 = n36->obj)) {
            do {                
              long profit_o_year = e36->PROFIT_O_YEAR;
              DOUBLE_TYPE v38 = e36->__av;
              _c2.addOrDelOnZero(st3.modify(profit_o_year,(v38 * -1L)), (v38 * -1L));
              n36 = n36->nxt;
            } while (n36 && (e36 = n36->obj) && h35 == n36->hash &&  SUM_PROFITSUPPLIER11_mapkey0_idxfn::equals(se96, *e36)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITSUPPLIER14_map_0* i37 = static_cast<HashIndex_SUM_PROFITSUPPLIER14_map_0*>(SUM_PROFITSUPPLIER14.index[1]);
          const HASH_RES_t h36 = SUM_PROFITSUPPLIER14_mapkey0_idxfn::hash(se97.modify0(supplier_suppkey));
          HashIndex_SUM_PROFITSUPPLIER14_map_0::IdxNode* n37 = static_cast<HashIndex_SUM_PROFITSUPPLIER14_map_0::IdxNode*>(i37->slice(se97, h36));
          SUM_PROFITSUPPLIER14_entry* e37;
         
          if (n37 && (e37 = n37->obj)) {
            do {                
              long profit_o_year = e37->PROFIT_O_YEAR;
              DOUBLE_TYPE v39 = e37->__av;
              _c2.addOrDelOnZero(st4.modify(profit_o_year,v39), v39);
              n37 = n37->nxt;
            } while (n37 && (e37 = n37->obj) && h36 == n37->hash &&  SUM_PROFITSUPPLIER14_mapkey0_idxfn::equals(se97, *e37)); 
          }
        }{  // temp foreach
          const HashIndex<tuple2_L_D, DOUBLE_TYPE>* i38 = static_cast<HashIndex<tuple2_L_D, DOUBLE_TYPE>*>(_c2.index[0]);
          HashIndex<tuple2_L_D, DOUBLE_TYPE>::IdxNode* n38; 
          tuple2_L_D* e38;
        
          for (size_t i = 0; i < i38->size_; i++)
          {
            n38 = i38->buckets_ + i;
            while (n38 && (e38 = n38->obj))
            {
              long profit_o_year = e38->_1;  
              DOUBLE_TYPE v40 = e38->__av; 
            { //slice 
              const HashIndex_SUM_PROFITSUPPLIER12_map_0* i39 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
              const HASH_RES_t h37 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se98.modify0(supplier_nationkey));
              HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n39 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i39->slice(se98, h37));
              SUM_PROFITSUPPLIER12_entry* e39;
             
              if (n39 && (e39 = n39->obj)) {
                do {                
                  STRING_TYPE profit_nation = e39->PROFIT_NATION;
                  long v41 = e39->__av;
                  SUM_PROFIT.addOrDelOnZero(se95.modify(profit_nation,profit_o_year),(v40 * v41));
                  n39 = n39->nxt;
                } while (n39 && (e39 = n39->obj) && h37 == n39->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se98, *e39)); 
              }
            }      
              n38 = n38->nxt;
            }
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_1* i40 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_1*>(SUM_PROFITORDERS12SUPPLIER1.index[2]);
          const HASH_RES_t h39 = SUM_PROFITORDERS12SUPPLIER1_mapkey1_idxfn::hash(se101.modify1(supplier_suppkey));
          HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_1::IdxNode* n40 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1_map_1::IdxNode*>(i40->slice(se101, h39));
          SUM_PROFITORDERS12SUPPLIER1_entry* e40;
         
          if (n40 && (e40 = n40->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e40->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v42 = e40->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i41 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h38 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se100.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n41 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i41->slice(se100, h38));
                SUM_PROFITSUPPLIER12_entry* e41;
               
                if (n41 && (e41 = n41->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e41->PROFIT_NATION;
                    long v43 = e41->__av;
                    SUM_PROFITORDERS12.addOrDelOnZero(se99.modify(sum_profitordersorders_orderkey,profit_nation),(v42 * v43));
                    n41 = n41->nxt;
                  } while (n41 && (e41 = n41->obj) && h38 == n41->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se100, *e41)); 
                }
              }
              n40 = n40->nxt;
            } while (n40 && (e40 = n40->obj) && h39 == n40->hash &&  SUM_PROFITORDERS12SUPPLIER1_mapkey1_idxfn::equals(se101, *e40)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_2* i42 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_2*>(SUM_PROFITORDERS12SUPPLIER1PART2.index[3]);
          const HASH_RES_t h41 = SUM_PROFITORDERS12SUPPLIER1PART2_mapkey2_idxfn::hash(se104.modify2(supplier_suppkey));
          HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_2::IdxNode* n42 = static_cast<HashIndex_SUM_PROFITORDERS12SUPPLIER1PART2_map_2::IdxNode*>(i42->slice(se104, h41));
          SUM_PROFITORDERS12SUPPLIER1PART2_entry* e42;
         
          if (n42 && (e42 = n42->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e42->SUM_PROFITORDERSORDERS_ORDERKEY;
              long sum_profitorders12partpart_partkey = e42->SUM_PROFITORDERS12SUPPLIER1PARTPART_PARTKEY;
              DOUBLE_TYPE v44 = e42->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i43 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h40 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se103.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n43 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i43->slice(se103, h40));
                SUM_PROFITSUPPLIER12_entry* e43;
               
                if (n43 && (e43 = n43->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e43->PROFIT_NATION;
                    long v45 = e43->__av;
                    SUM_PROFITORDERS12PART2.addOrDelOnZero(se102.modify(sum_profitordersorders_orderkey,sum_profitorders12partpart_partkey,profit_nation),(v44 * v45));
                    n43 = n43->nxt;
                  } while (n43 && (e43 = n43->obj) && h40 == n43->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se103, *e43)); 
                }
              }
              n42 = n42->nxt;
            } while (n42 && (e42 = n42->obj) && h41 == n42->hash &&  SUM_PROFITORDERS12SUPPLIER1PART2_mapkey2_idxfn::equals(se104, *e42)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_1* i44 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_1*>(SUM_PROFITORDERS15SUPPLIER1.index[2]);
          const HASH_RES_t h43 = SUM_PROFITORDERS15SUPPLIER1_mapkey1_idxfn::hash(se107.modify1(supplier_suppkey));
          HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_1::IdxNode* n44 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1_map_1::IdxNode*>(i44->slice(se107, h43));
          SUM_PROFITORDERS15SUPPLIER1_entry* e44;
         
          if (n44 && (e44 = n44->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e44->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v46 = e44->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i45 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h42 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se106.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n45 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i45->slice(se106, h42));
                SUM_PROFITSUPPLIER12_entry* e45;
               
                if (n45 && (e45 = n45->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e45->PROFIT_NATION;
                    long v47 = e45->__av;
                    SUM_PROFITORDERS15.addOrDelOnZero(se105.modify(sum_profitordersorders_orderkey,profit_nation),(v46 * v47));
                    n45 = n45->nxt;
                  } while (n45 && (e45 = n45->obj) && h42 == n45->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se106, *e45)); 
                }
              }
              n44 = n44->nxt;
            } while (n44 && (e44 = n44->obj) && h43 == n44->hash &&  SUM_PROFITORDERS15SUPPLIER1_mapkey1_idxfn::equals(se107, *e44)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_2* i46 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_2*>(SUM_PROFITORDERS15SUPPLIER1PART2.index[3]);
          const HASH_RES_t h45 = SUM_PROFITORDERS15SUPPLIER1PART2_mapkey2_idxfn::hash(se110.modify2(supplier_suppkey));
          HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_2::IdxNode* n46 = static_cast<HashIndex_SUM_PROFITORDERS15SUPPLIER1PART2_map_2::IdxNode*>(i46->slice(se110, h45));
          SUM_PROFITORDERS15SUPPLIER1PART2_entry* e46;
         
          if (n46 && (e46 = n46->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e46->SUM_PROFITORDERSORDERS_ORDERKEY;
              long sum_profitorders15partpart_partkey = e46->SUM_PROFITORDERS15SUPPLIER1PARTPART_PARTKEY;
              DOUBLE_TYPE v48 = e46->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i47 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h44 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se109.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n47 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i47->slice(se109, h44));
                SUM_PROFITSUPPLIER12_entry* e47;
               
                if (n47 && (e47 = n47->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e47->PROFIT_NATION;
                    long v49 = e47->__av;
                    SUM_PROFITORDERS15PART2.addOrDelOnZero(se108.modify(sum_profitordersorders_orderkey,sum_profitorders15partpart_partkey,profit_nation),(v48 * v49));
                    n47 = n47->nxt;
                  } while (n47 && (e47 = n47->obj) && h44 == n47->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se109, *e47)); 
                }
              }
              n46 = n46->nxt;
            } while (n46 && (e46 = n46->obj) && h45 == n46->hash &&  SUM_PROFITORDERS15SUPPLIER1PART2_mapkey2_idxfn::equals(se110, *e46)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITSUPPLIER12_map_0* i48 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
          const HASH_RES_t h46 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se112.modify0(supplier_nationkey));
          HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n48 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i48->slice(se112, h46));
          SUM_PROFITSUPPLIER12_entry* e48;
         
          if (n48 && (e48 = n48->obj)) {
            do {                
              STRING_TYPE profit_nation = e48->PROFIT_NATION;
              long v50 = e48->__av;
              SUM_PROFITLINEITEM12.addOrDelOnZero(se111.modify(supplier_suppkey,profit_nation),v50);
              n48 = n48->nxt;
            } while (n48 && (e48 = n48->obj) && h46 == n48->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se112, *e48)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITSUPPLIER11PART2_map_1* i49 = static_cast<HashIndex_SUM_PROFITSUPPLIER11PART2_map_1*>(SUM_PROFITSUPPLIER11PART2.index[2]);
          const HASH_RES_t h48 = SUM_PROFITSUPPLIER11PART2_mapkey1_idxfn::hash(se115.modify1(supplier_suppkey));
          HashIndex_SUM_PROFITSUPPLIER11PART2_map_1::IdxNode* n49 = static_cast<HashIndex_SUM_PROFITSUPPLIER11PART2_map_1::IdxNode*>(i49->slice(se115, h48));
          SUM_PROFITSUPPLIER11PART2_entry* e49;
         
          if (n49 && (e49 = n49->obj)) {
            do {                
              long sum_profitpartpart_partkey = e49->SUM_PROFITSUPPLIER11PARTPART_PARTKEY;
              long profit_o_year = e49->PROFIT_O_YEAR;
              DOUBLE_TYPE v51 = e49->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i50 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h47 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se114.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n50 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i50->slice(se114, h47));
                SUM_PROFITSUPPLIER12_entry* e50;
               
                if (n50 && (e50 = n50->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e50->PROFIT_NATION;
                    long v52 = e50->__av;
                    SUM_PROFITPART12.addOrDelOnZero(se113.modify(sum_profitpartpart_partkey,profit_o_year,profit_nation),(v51 * v52));
                    n50 = n50->nxt;
                  } while (n50 && (e50 = n50->obj) && h47 == n50->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se114, *e50)); 
                }
              }
              n49 = n49->nxt;
            } while (n49 && (e49 = n49->obj) && h48 == n49->hash &&  SUM_PROFITSUPPLIER11PART2_mapkey1_idxfn::equals(se115, *e49)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITSUPPLIER14PART2_map_1* i51 = static_cast<HashIndex_SUM_PROFITSUPPLIER14PART2_map_1*>(SUM_PROFITSUPPLIER14PART2.index[2]);
          const HASH_RES_t h50 = SUM_PROFITSUPPLIER14PART2_mapkey1_idxfn::hash(se118.modify1(supplier_suppkey));
          HashIndex_SUM_PROFITSUPPLIER14PART2_map_1::IdxNode* n51 = static_cast<HashIndex_SUM_PROFITSUPPLIER14PART2_map_1::IdxNode*>(i51->slice(se118, h50));
          SUM_PROFITSUPPLIER14PART2_entry* e51;
         
          if (n51 && (e51 = n51->obj)) {
            do {                
              long sum_profitpartpart_partkey = e51->SUM_PROFITSUPPLIER14PARTPART_PARTKEY;
              long profit_o_year = e51->PROFIT_O_YEAR;
              DOUBLE_TYPE v53 = e51->__av;
              { //slice 
                const HashIndex_SUM_PROFITSUPPLIER12_map_0* i52 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0*>(SUM_PROFITSUPPLIER12.index[1]);
                const HASH_RES_t h49 = SUM_PROFITSUPPLIER12_mapkey0_idxfn::hash(se117.modify0(supplier_nationkey));
                HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode* n52 = static_cast<HashIndex_SUM_PROFITSUPPLIER12_map_0::IdxNode*>(i52->slice(se117, h49));
                SUM_PROFITSUPPLIER12_entry* e52;
               
                if (n52 && (e52 = n52->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e52->PROFIT_NATION;
                    long v54 = e52->__av;
                    SUM_PROFITPART15.addOrDelOnZero(se116.modify(sum_profitpartpart_partkey,profit_o_year,profit_nation),(v53 * v54));
                    n52 = n52->nxt;
                  } while (n52 && (e52 = n52->obj) && h49 == n52->hash &&  SUM_PROFITSUPPLIER12_mapkey0_idxfn::equals(se117, *e52)); 
                }
              }
              n51 = n51->nxt;
            } while (n51 && (e51 = n51->obj) && h50 == n51->hash &&  SUM_PROFITSUPPLIER14PART2_mapkey1_idxfn::equals(se118, *e51)); 
          }
        }
      }
    }
    void on_insert_PARTSUPP(const long partsupp_partkey, const long partsupp_suppkey, const long partsupp_availqty, const DOUBLE_TYPE partsupp_supplycost, const STRING_TYPE& partsupp_comment) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        _c3.clear();
        { //slice 
          const HashIndex_SUM_PROFITPARTSUPP11_map_01* i53 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01*>(SUM_PROFITPARTSUPP11.index[1]);
          const HASH_RES_t h51 = SUM_PROFITPARTSUPP11_mapkey01_idxfn::hash(se121.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode* n53 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode*>(i53->slice(se121, h51));
          SUM_PROFITPARTSUPP11_entry* e53;
         
          if (n53 && (e53 = n53->obj)) {
            do {                
              long profit_o_year = e53->PROFIT_O_YEAR;
              DOUBLE_TYPE v56 = e53->__av;
              _c3.addOrDelOnZero(st5.modify(profit_o_year,(v56 * (-1L * partsupp_supplycost))), (v56 * (-1L * partsupp_supplycost)));
              n53 = n53->nxt;
            } while (n53 && (e53 = n53->obj) && h51 == n53->hash &&  SUM_PROFITPARTSUPP11_mapkey01_idxfn::equals(se121, *e53)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP16_map_01* i54 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01*>(SUM_PROFITPARTSUPP16.index[1]);
          const HASH_RES_t h52 = SUM_PROFITPARTSUPP16_mapkey01_idxfn::hash(se122.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode* n54 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode*>(i54->slice(se122, h52));
          SUM_PROFITPARTSUPP16_entry* e54;
         
          if (n54 && (e54 = n54->obj)) {
            do {                
              long profit_o_year = e54->PROFIT_O_YEAR;
              DOUBLE_TYPE v57 = e54->__av;
              _c3.addOrDelOnZero(st6.modify(profit_o_year,v57), v57);
              n54 = n54->nxt;
            } while (n54 && (e54 = n54->obj) && h52 == n54->hash &&  SUM_PROFITPARTSUPP16_mapkey01_idxfn::equals(se122, *e54)); 
          }
        }{  // temp foreach
          const HashIndex<tuple2_L_D, DOUBLE_TYPE>* i55 = static_cast<HashIndex<tuple2_L_D, DOUBLE_TYPE>*>(_c3.index[0]);
          HashIndex<tuple2_L_D, DOUBLE_TYPE>::IdxNode* n55; 
          tuple2_L_D* e55;
        
          for (size_t i = 0; i < i55->size_; i++)
          {
            n55 = i55->buckets_ + i;
            while (n55 && (e55 = n55->obj))
            {
              long profit_o_year = e55->_1;  
              DOUBLE_TYPE v58 = e55->__av; 
            { //slice 
              const HashIndex_SUM_PROFITLINEITEM12_map_0* i56 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
              const HASH_RES_t h53 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se123.modify0(partsupp_suppkey));
              HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n56 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i56->slice(se123, h53));
              SUM_PROFITLINEITEM12_entry* e56;
             
              if (n56 && (e56 = n56->obj)) {
                do {                
                  STRING_TYPE profit_nation = e56->PROFIT_NATION;
                  long v59 = e56->__av;
                  SUM_PROFIT.addOrDelOnZero(se119.modify(profit_nation,profit_o_year),(SUM_PROFITLINEITEM11.getValueOrDefault(se120.modify(partsupp_partkey)) * (v58 * v59)));
                  n56 = n56->nxt;
                } while (n56 && (e56 = n56->obj) && h53 == n56->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se123, *e56)); 
              }
            }      
              n55 = n55->nxt;
            }
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i57 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h55 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se127.modify0(partsupp_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n57 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i57->slice(se127, h55));
          SUM_PROFITLINEITEM12_entry* e57;
         
          if (n57 && (e57 = n57->obj)) {
            do {                
              STRING_TYPE profit_nation = e57->PROFIT_NATION;
              long v60 = e57->__av;
              { //slice 
                const HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12* i58 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12*>(SUM_PROFITORDERS12PARTSUPP1.index[2]);
                const HASH_RES_t h54 = SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::hash(se126.modify12(partsupp_partkey, partsupp_suppkey));
                HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode* n58 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode*>(i58->slice(se126, h54));
                SUM_PROFITORDERS12PARTSUPP1_entry* e58;
               
                if (n58 && (e58 = n58->obj)) {
                  do {                
                    long sum_profitordersorders_orderkey = e58->SUM_PROFITORDERSORDERS_ORDERKEY;
                    DOUBLE_TYPE v61 = e58->__av;
                    SUM_PROFITORDERS12.addOrDelOnZero(se124.modify(sum_profitordersorders_orderkey,profit_nation),(SUM_PROFITLINEITEM11.getValueOrDefault(se125.modify(partsupp_partkey)) * (v60 * (v61 * partsupp_supplycost))));
                    n58 = n58->nxt;
                  } while (n58 && (e58 = n58->obj) && h54 == n58->hash &&  SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::equals(se126, *e58)); 
                }
              }
              n57 = n57->nxt;
            } while (n57 && (e57 = n57->obj) && h55 == n57->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se127, *e57)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12* i59 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12*>(SUM_PROFITORDERS12PARTSUPP1.index[2]);
          const HASH_RES_t h56 = SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::hash(se130.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode* n59 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode*>(i59->slice(se130, h56));
          SUM_PROFITORDERS12PARTSUPP1_entry* e59;
         
          if (n59 && (e59 = n59->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e59->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v62 = e59->__av;
              SUM_PROFITORDERS12SUPPLIER1.addOrDelOnZero(se128.modify(sum_profitordersorders_orderkey,partsupp_suppkey),(SUM_PROFITLINEITEM11.getValueOrDefault(se129.modify(partsupp_partkey)) * (v62 * partsupp_supplycost)));
              n59 = n59->nxt;
            } while (n59 && (e59 = n59->obj) && h56 == n59->hash &&  SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::equals(se130, *e59)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12* i60 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12*>(SUM_PROFITORDERS12PARTSUPP1.index[2]);
          const HASH_RES_t h57 = SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::hash(se132.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode* n60 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode*>(i60->slice(se132, h57));
          SUM_PROFITORDERS12PARTSUPP1_entry* e60;
         
          if (n60 && (e60 = n60->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e60->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v63 = e60->__av;
              SUM_PROFITORDERS12SUPPLIER1PART2.addOrDelOnZero(se131.modify(sum_profitordersorders_orderkey,partsupp_partkey,partsupp_suppkey),(v63 * partsupp_supplycost));
              n60 = n60->nxt;
            } while (n60 && (e60 = n60->obj) && h57 == n60->hash &&  SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::equals(se132, *e60)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12* i61 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12*>(SUM_PROFITORDERS12PARTSUPP1.index[2]);
          const HASH_RES_t h59 = SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::hash(se135.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode* n61 = static_cast<HashIndex_SUM_PROFITORDERS12PARTSUPP1_map_12::IdxNode*>(i61->slice(se135, h59));
          SUM_PROFITORDERS12PARTSUPP1_entry* e61;
         
          if (n61 && (e61 = n61->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e61->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v64 = e61->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM12_map_0* i62 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
                const HASH_RES_t h58 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se134.modify0(partsupp_suppkey));
                HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n62 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i62->slice(se134, h58));
                SUM_PROFITLINEITEM12_entry* e62;
               
                if (n62 && (e62 = n62->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e62->PROFIT_NATION;
                    long v65 = e62->__av;
                    SUM_PROFITORDERS12PART2.addOrDelOnZero(se133.modify(sum_profitordersorders_orderkey,partsupp_partkey,profit_nation),(v64 * (v65 * partsupp_supplycost)));
                    n62 = n62->nxt;
                  } while (n62 && (e62 = n62->obj) && h58 == n62->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se134, *e62)); 
                }
              }
              n61 = n61->nxt;
            } while (n61 && (e61 = n61->obj) && h59 == n61->hash &&  SUM_PROFITORDERS12PARTSUPP1_mapkey12_idxfn::equals(se135, *e61)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITLINEITEM12_map_0* i63 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
          const HASH_RES_t h61 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se139.modify0(partsupp_suppkey));
          HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n63 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i63->slice(se139, h61));
          SUM_PROFITLINEITEM12_entry* e63;
         
          if (n63 && (e63 = n63->obj)) {
            do {                
              STRING_TYPE profit_nation = e63->PROFIT_NATION;
              long v66 = e63->__av;
              { //slice 
                const HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12* i64 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12*>(SUM_PROFITORDERS15PARTSUPP1.index[2]);
                const HASH_RES_t h60 = SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::hash(se138.modify12(partsupp_partkey, partsupp_suppkey));
                HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode* n64 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode*>(i64->slice(se138, h60));
                SUM_PROFITORDERS15PARTSUPP1_entry* e64;
               
                if (n64 && (e64 = n64->obj)) {
                  do {                
                    long sum_profitordersorders_orderkey = e64->SUM_PROFITORDERSORDERS_ORDERKEY;
                    DOUBLE_TYPE v67 = e64->__av;
                    SUM_PROFITORDERS15.addOrDelOnZero(se136.modify(sum_profitordersorders_orderkey,profit_nation),(SUM_PROFITLINEITEM11.getValueOrDefault(se137.modify(partsupp_partkey)) * (v66 * v67)));
                    n64 = n64->nxt;
                  } while (n64 && (e64 = n64->obj) && h60 == n64->hash &&  SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::equals(se138, *e64)); 
                }
              }
              n63 = n63->nxt;
            } while (n63 && (e63 = n63->obj) && h61 == n63->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se139, *e63)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12* i65 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12*>(SUM_PROFITORDERS15PARTSUPP1.index[2]);
          const HASH_RES_t h62 = SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::hash(se142.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode* n65 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode*>(i65->slice(se142, h62));
          SUM_PROFITORDERS15PARTSUPP1_entry* e65;
         
          if (n65 && (e65 = n65->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e65->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v68 = e65->__av;
              SUM_PROFITORDERS15SUPPLIER1.addOrDelOnZero(se140.modify(sum_profitordersorders_orderkey,partsupp_suppkey),(SUM_PROFITLINEITEM11.getValueOrDefault(se141.modify(partsupp_partkey)) * v68));
              n65 = n65->nxt;
            } while (n65 && (e65 = n65->obj) && h62 == n65->hash &&  SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::equals(se142, *e65)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12* i66 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12*>(SUM_PROFITORDERS15PARTSUPP1.index[2]);
          const HASH_RES_t h63 = SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::hash(se144.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode* n66 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode*>(i66->slice(se144, h63));
          SUM_PROFITORDERS15PARTSUPP1_entry* e66;
         
          if (n66 && (e66 = n66->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e66->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v69 = e66->__av;
              SUM_PROFITORDERS15SUPPLIER1PART2.addOrDelOnZero(se143.modify(sum_profitordersorders_orderkey,partsupp_partkey,partsupp_suppkey),v69);
              n66 = n66->nxt;
            } while (n66 && (e66 = n66->obj) && h63 == n66->hash &&  SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::equals(se144, *e66)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12* i67 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12*>(SUM_PROFITORDERS15PARTSUPP1.index[2]);
          const HASH_RES_t h65 = SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::hash(se147.modify12(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode* n67 = static_cast<HashIndex_SUM_PROFITORDERS15PARTSUPP1_map_12::IdxNode*>(i67->slice(se147, h65));
          SUM_PROFITORDERS15PARTSUPP1_entry* e67;
         
          if (n67 && (e67 = n67->obj)) {
            do {                
              long sum_profitordersorders_orderkey = e67->SUM_PROFITORDERSORDERS_ORDERKEY;
              DOUBLE_TYPE v70 = e67->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM12_map_0* i68 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
                const HASH_RES_t h64 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se146.modify0(partsupp_suppkey));
                HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n68 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i68->slice(se146, h64));
                SUM_PROFITLINEITEM12_entry* e68;
               
                if (n68 && (e68 = n68->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e68->PROFIT_NATION;
                    long v71 = e68->__av;
                    SUM_PROFITORDERS15PART2.addOrDelOnZero(se145.modify(sum_profitordersorders_orderkey,partsupp_partkey,profit_nation),(v70 * v71));
                    n68 = n68->nxt;
                  } while (n68 && (e68 = n68->obj) && h64 == n68->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se146, *e68)); 
                }
              }
              n67 = n67->nxt;
            } while (n67 && (e67 = n67->obj) && h65 == n67->hash &&  SUM_PROFITORDERS15PARTSUPP1_mapkey12_idxfn::equals(se147, *e67)); 
          }
        }SUM_PROFITLINEITEM13.addOrDelOnZero(se148.modify(partsupp_partkey,partsupp_suppkey),1L);
        SUM_PROFITLINEITEM19.addOrDelOnZero(se149.modify(partsupp_partkey,partsupp_suppkey),partsupp_supplycost);
        { //slice 
          const HashIndex_SUM_PROFITPARTSUPP11_map_01* i69 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01*>(SUM_PROFITPARTSUPP11.index[1]);
          const HASH_RES_t h66 = SUM_PROFITPARTSUPP11_mapkey01_idxfn::hash(se152.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode* n69 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode*>(i69->slice(se152, h66));
          SUM_PROFITPARTSUPP11_entry* e69;
         
          if (n69 && (e69 = n69->obj)) {
            do {                
              long profit_o_year = e69->PROFIT_O_YEAR;
              DOUBLE_TYPE v72 = e69->__av;
              SUM_PROFITSUPPLIER11.addOrDelOnZero(se150.modify(partsupp_suppkey,profit_o_year),(SUM_PROFITLINEITEM11.getValueOrDefault(se151.modify(partsupp_partkey)) * (v72 * partsupp_supplycost)));
              n69 = n69->nxt;
            } while (n69 && (e69 = n69->obj) && h66 == n69->hash &&  SUM_PROFITPARTSUPP11_mapkey01_idxfn::equals(se152, *e69)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP11_map_01* i70 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01*>(SUM_PROFITPARTSUPP11.index[1]);
          const HASH_RES_t h67 = SUM_PROFITPARTSUPP11_mapkey01_idxfn::hash(se154.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode* n70 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode*>(i70->slice(se154, h67));
          SUM_PROFITPARTSUPP11_entry* e70;
         
          if (n70 && (e70 = n70->obj)) {
            do {                
              long profit_o_year = e70->PROFIT_O_YEAR;
              DOUBLE_TYPE v73 = e70->__av;
              SUM_PROFITSUPPLIER11PART2.addOrDelOnZero(se153.modify(partsupp_partkey,partsupp_suppkey,profit_o_year),(v73 * partsupp_supplycost));
              n70 = n70->nxt;
            } while (n70 && (e70 = n70->obj) && h67 == n70->hash &&  SUM_PROFITPARTSUPP11_mapkey01_idxfn::equals(se154, *e70)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP16_map_01* i71 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01*>(SUM_PROFITPARTSUPP16.index[1]);
          const HASH_RES_t h68 = SUM_PROFITPARTSUPP16_mapkey01_idxfn::hash(se157.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode* n71 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode*>(i71->slice(se157, h68));
          SUM_PROFITPARTSUPP16_entry* e71;
         
          if (n71 && (e71 = n71->obj)) {
            do {                
              long profit_o_year = e71->PROFIT_O_YEAR;
              DOUBLE_TYPE v74 = e71->__av;
              SUM_PROFITSUPPLIER14.addOrDelOnZero(se155.modify(partsupp_suppkey,profit_o_year),(SUM_PROFITLINEITEM11.getValueOrDefault(se156.modify(partsupp_partkey)) * v74));
              n71 = n71->nxt;
            } while (n71 && (e71 = n71->obj) && h68 == n71->hash &&  SUM_PROFITPARTSUPP16_mapkey01_idxfn::equals(se157, *e71)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP16_map_01* i72 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01*>(SUM_PROFITPARTSUPP16.index[1]);
          const HASH_RES_t h69 = SUM_PROFITPARTSUPP16_mapkey01_idxfn::hash(se159.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode* n72 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode*>(i72->slice(se159, h69));
          SUM_PROFITPARTSUPP16_entry* e72;
         
          if (n72 && (e72 = n72->obj)) {
            do {                
              long profit_o_year = e72->PROFIT_O_YEAR;
              DOUBLE_TYPE v75 = e72->__av;
              SUM_PROFITSUPPLIER14PART2.addOrDelOnZero(se158.modify(partsupp_partkey,partsupp_suppkey,profit_o_year),v75);
              n72 = n72->nxt;
            } while (n72 && (e72 = n72->obj) && h69 == n72->hash &&  SUM_PROFITPARTSUPP16_mapkey01_idxfn::equals(se159, *e72)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP11_map_01* i73 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01*>(SUM_PROFITPARTSUPP11.index[1]);
          const HASH_RES_t h71 = SUM_PROFITPARTSUPP11_mapkey01_idxfn::hash(se162.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode* n73 = static_cast<HashIndex_SUM_PROFITPARTSUPP11_map_01::IdxNode*>(i73->slice(se162, h71));
          SUM_PROFITPARTSUPP11_entry* e73;
         
          if (n73 && (e73 = n73->obj)) {
            do {                
              long profit_o_year = e73->PROFIT_O_YEAR;
              DOUBLE_TYPE v76 = e73->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM12_map_0* i74 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
                const HASH_RES_t h70 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se161.modify0(partsupp_suppkey));
                HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n74 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i74->slice(se161, h70));
                SUM_PROFITLINEITEM12_entry* e74;
               
                if (n74 && (e74 = n74->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e74->PROFIT_NATION;
                    long v77 = e74->__av;
                    SUM_PROFITPART12.addOrDelOnZero(se160.modify(partsupp_partkey,profit_o_year,profit_nation),(v76 * (v77 * partsupp_supplycost)));
                    n74 = n74->nxt;
                  } while (n74 && (e74 = n74->obj) && h70 == n74->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se161, *e74)); 
                }
              }
              n73 = n73->nxt;
            } while (n73 && (e73 = n73->obj) && h71 == n73->hash &&  SUM_PROFITPARTSUPP11_mapkey01_idxfn::equals(se162, *e73)); 
          }
        }{ //slice 
          const HashIndex_SUM_PROFITPARTSUPP16_map_01* i75 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01*>(SUM_PROFITPARTSUPP16.index[1]);
          const HASH_RES_t h73 = SUM_PROFITPARTSUPP16_mapkey01_idxfn::hash(se165.modify01(partsupp_partkey, partsupp_suppkey));
          HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode* n75 = static_cast<HashIndex_SUM_PROFITPARTSUPP16_map_01::IdxNode*>(i75->slice(se165, h73));
          SUM_PROFITPARTSUPP16_entry* e75;
         
          if (n75 && (e75 = n75->obj)) {
            do {                
              long profit_o_year = e75->PROFIT_O_YEAR;
              DOUBLE_TYPE v78 = e75->__av;
              { //slice 
                const HashIndex_SUM_PROFITLINEITEM12_map_0* i76 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0*>(SUM_PROFITLINEITEM12.index[1]);
                const HASH_RES_t h72 = SUM_PROFITLINEITEM12_mapkey0_idxfn::hash(se164.modify0(partsupp_suppkey));
                HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode* n76 = static_cast<HashIndex_SUM_PROFITLINEITEM12_map_0::IdxNode*>(i76->slice(se164, h72));
                SUM_PROFITLINEITEM12_entry* e76;
               
                if (n76 && (e76 = n76->obj)) {
                  do {                
                    STRING_TYPE profit_nation = e76->PROFIT_NATION;
                    long v79 = e76->__av;
                    SUM_PROFITPART15.addOrDelOnZero(se163.modify(partsupp_partkey,profit_o_year,profit_nation),(v78 * v79));
                    n76 = n76->nxt;
                  } while (n76 && (e76 = n76->obj) && h72 == n76->hash &&  SUM_PROFITLINEITEM12_mapkey0_idxfn::equals(se164, *e76)); 
                }
              }
              n75 = n75->nxt;
            } while (n75 && (e75 = n75->obj) && h73 == n75->hash &&  SUM_PROFITPARTSUPP16_mapkey01_idxfn::equals(se165, *e75)); 
          }
        }
      }
    }
    void on_system_ready_event() {
      {  
        SUM_PROFITSUPPLIER12.clear();
        {  // foreach
          const HashIndex_NATION_map_0123* i77 = static_cast<HashIndex_NATION_map_0123*>(NATION.index[0]);
          HashIndex_NATION_map_0123::IdxNode* n77; 
          NATION_entry* e77;
        
          for (size_t i = 0; i < i77->size_; i++)
          {
            n77 = i77->buckets_ + i;
            while (n77 && (e77 = n77->obj))
            {
                long sum_profitsuppliersupplier_nationkey = e77->NATION_NATIONKEY;
                STRING_TYPE n_name = e77->NATION_NAME;
                long n_regionkey = e77->NATION_REGIONKEY;
                STRING_TYPE n_comment = e77->NATION_COMMENT;
                long v80 = e77->__av;
                SUM_PROFITSUPPLIER12.addOrDelOnZero(se166.modify(sum_profitsuppliersupplier_nationkey,n_name),v80);
              n77 = n77->nxt;
            }
          }
        }
      }
    }
  
  private:
  
    /* Sample entries for avoiding recreation of temporary objects */
    SUM_PROFIT_entry se1;
    SUM_PROFITLINEITEM11_entry se2;
    SUM_PROFITLINEITEM13_entry se3;
    SUM_PROFITLINEITEM19_entry se4;
    SUM_PROFITLINEITEM12_entry se5;
    SUM_PROFITLINEITEM14_entry se6;
    SUM_PROFITORDERS12_entry se7;
    SUM_PROFITLINEITEM11_entry se8;
    SUM_PROFITLINEITEM19_entry se9;
    SUM_PROFITLINEITEM12_entry se10;
    SUM_PROFITORDERS12PARTSUPP1_entry se11;
    SUM_PROFITORDERS12SUPPLIER1_entry se12;
    SUM_PROFITLINEITEM19_entry se13;
    SUM_PROFITLINEITEM11_entry se14;
    SUM_PROFITORDERS12SUPPLIER1PART2_entry se15;
    SUM_PROFITLINEITEM19_entry se16;
    SUM_PROFITORDERS12PART2_entry se17;
    SUM_PROFITLINEITEM19_entry se18;
    SUM_PROFITLINEITEM12_entry se19;
    SUM_PROFITORDERS15_entry se20;
    SUM_PROFITLINEITEM11_entry se21;
    SUM_PROFITLINEITEM13_entry se22;
    SUM_PROFITLINEITEM12_entry se23;
    SUM_PROFITORDERS15PARTSUPP1_entry se24;
    SUM_PROFITORDERS15SUPPLIER1_entry se25;
    SUM_PROFITLINEITEM13_entry se26;
    SUM_PROFITLINEITEM11_entry se27;
    SUM_PROFITORDERS15SUPPLIER1PART2_entry se28;
    SUM_PROFITLINEITEM13_entry se29;
    SUM_PROFITORDERS15PART2_entry se30;
    SUM_PROFITLINEITEM13_entry se31;
    SUM_PROFITLINEITEM12_entry se32;
    SUM_PROFITPARTSUPP11_entry se33;
    SUM_PROFITLINEITEM14_entry se34;
    SUM_PROFITPARTSUPP16_entry se35;
    SUM_PROFITLINEITEM14_entry se36;
    SUM_PROFITSUPPLIER11_entry se37;
    SUM_PROFITLINEITEM19_entry se38;
    SUM_PROFITLINEITEM11_entry se39;
    SUM_PROFITLINEITEM14_entry se40;
    SUM_PROFITSUPPLIER11PART2_entry se41;
    SUM_PROFITLINEITEM19_entry se42;
    SUM_PROFITLINEITEM14_entry se43;
    SUM_PROFITSUPPLIER14_entry se44;
    SUM_PROFITLINEITEM13_entry se45;
    SUM_PROFITLINEITEM11_entry se46;
    SUM_PROFITLINEITEM14_entry se47;
    SUM_PROFITSUPPLIER14PART2_entry se48;
    SUM_PROFITLINEITEM13_entry se49;
    SUM_PROFITLINEITEM14_entry se50;
    SUM_PROFITPART12_entry se51;
    SUM_PROFITLINEITEM19_entry se52;
    SUM_PROFITLINEITEM14_entry se53;
    SUM_PROFITLINEITEM12_entry se54;
    SUM_PROFITPART15_entry se55;
    SUM_PROFITLINEITEM13_entry se56;
    SUM_PROFITLINEITEM14_entry se57;
    SUM_PROFITLINEITEM12_entry se58;
    SUM_PROFIT_entry se59;
    tuple2_S_D st1;
    SUM_PROFITORDERS12_entry se60;
    tuple2_S_D st2;
    SUM_PROFITORDERS15_entry se61;
    SUM_PROFITPARTSUPP11_entry se62;
    SUM_PROFITORDERS12PARTSUPP1_entry se63;
    SUM_PROFITPARTSUPP16_entry se64;
    SUM_PROFITORDERS15PARTSUPP1_entry se65;
    SUM_PROFITLINEITEM14_entry se66;
    SUM_PROFITSUPPLIER11_entry se67;
    SUM_PROFITORDERS12SUPPLIER1_entry se68;
    SUM_PROFITSUPPLIER11PART2_entry se69;
    SUM_PROFITORDERS12SUPPLIER1PART2_entry se70;
    SUM_PROFITSUPPLIER14_entry se71;
    SUM_PROFITORDERS15SUPPLIER1_entry se72;
    SUM_PROFITSUPPLIER14PART2_entry se73;
    SUM_PROFITORDERS15SUPPLIER1PART2_entry se74;
    SUM_PROFITPART12_entry se75;
    SUM_PROFITORDERS12PART2_entry se76;
    SUM_PROFITPART15_entry se77;
    SUM_PROFITORDERS15PART2_entry se78;
    SUM_PROFIT_entry se79;
    SUM_PROFITPART12_entry se80;
    SUM_PROFITPART15_entry se81;
    SUM_PROFITORDERS12_entry se82;
    SUM_PROFITORDERS12PART2_entry se83;
    SUM_PROFITORDERS12SUPPLIER1_entry se84;
    SUM_PROFITORDERS12SUPPLIER1PART2_entry se85;
    SUM_PROFITORDERS15_entry se86;
    SUM_PROFITORDERS15PART2_entry se87;
    SUM_PROFITORDERS15SUPPLIER1_entry se88;
    SUM_PROFITORDERS15SUPPLIER1PART2_entry se89;
    SUM_PROFITLINEITEM11_entry se90;
    SUM_PROFITSUPPLIER11_entry se91;
    SUM_PROFITSUPPLIER11PART2_entry se92;
    SUM_PROFITSUPPLIER14_entry se93;
    SUM_PROFITSUPPLIER14PART2_entry se94;
    SUM_PROFIT_entry se95;
    tuple2_L_D st3;
    SUM_PROFITSUPPLIER11_entry se96;
    tuple2_L_D st4;
    SUM_PROFITSUPPLIER14_entry se97;
    SUM_PROFITSUPPLIER12_entry se98;
    SUM_PROFITORDERS12_entry se99;
    SUM_PROFITSUPPLIER12_entry se100;
    SUM_PROFITORDERS12SUPPLIER1_entry se101;
    SUM_PROFITORDERS12PART2_entry se102;
    SUM_PROFITSUPPLIER12_entry se103;
    SUM_PROFITORDERS12SUPPLIER1PART2_entry se104;
    SUM_PROFITORDERS15_entry se105;
    SUM_PROFITSUPPLIER12_entry se106;
    SUM_PROFITORDERS15SUPPLIER1_entry se107;
    SUM_PROFITORDERS15PART2_entry se108;
    SUM_PROFITSUPPLIER12_entry se109;
    SUM_PROFITORDERS15SUPPLIER1PART2_entry se110;
    SUM_PROFITLINEITEM12_entry se111;
    SUM_PROFITSUPPLIER12_entry se112;
    SUM_PROFITPART12_entry se113;
    SUM_PROFITSUPPLIER12_entry se114;
    SUM_PROFITSUPPLIER11PART2_entry se115;
    SUM_PROFITPART15_entry se116;
    SUM_PROFITSUPPLIER12_entry se117;
    SUM_PROFITSUPPLIER14PART2_entry se118;
    SUM_PROFIT_entry se119;
    SUM_PROFITLINEITEM11_entry se120;
    tuple2_L_D st5;
    SUM_PROFITPARTSUPP11_entry se121;
    tuple2_L_D st6;
    SUM_PROFITPARTSUPP16_entry se122;
    SUM_PROFITLINEITEM12_entry se123;
    SUM_PROFITORDERS12_entry se124;
    SUM_PROFITLINEITEM11_entry se125;
    SUM_PROFITORDERS12PARTSUPP1_entry se126;
    SUM_PROFITLINEITEM12_entry se127;
    SUM_PROFITORDERS12SUPPLIER1_entry se128;
    SUM_PROFITLINEITEM11_entry se129;
    SUM_PROFITORDERS12PARTSUPP1_entry se130;
    SUM_PROFITORDERS12SUPPLIER1PART2_entry se131;
    SUM_PROFITORDERS12PARTSUPP1_entry se132;
    SUM_PROFITORDERS12PART2_entry se133;
    SUM_PROFITLINEITEM12_entry se134;
    SUM_PROFITORDERS12PARTSUPP1_entry se135;
    SUM_PROFITORDERS15_entry se136;
    SUM_PROFITLINEITEM11_entry se137;
    SUM_PROFITORDERS15PARTSUPP1_entry se138;
    SUM_PROFITLINEITEM12_entry se139;
    SUM_PROFITORDERS15SUPPLIER1_entry se140;
    SUM_PROFITLINEITEM11_entry se141;
    SUM_PROFITORDERS15PARTSUPP1_entry se142;
    SUM_PROFITORDERS15SUPPLIER1PART2_entry se143;
    SUM_PROFITORDERS15PARTSUPP1_entry se144;
    SUM_PROFITORDERS15PART2_entry se145;
    SUM_PROFITLINEITEM12_entry se146;
    SUM_PROFITORDERS15PARTSUPP1_entry se147;
    SUM_PROFITLINEITEM13_entry se148;
    SUM_PROFITLINEITEM19_entry se149;
    SUM_PROFITSUPPLIER11_entry se150;
    SUM_PROFITLINEITEM11_entry se151;
    SUM_PROFITPARTSUPP11_entry se152;
    SUM_PROFITSUPPLIER11PART2_entry se153;
    SUM_PROFITPARTSUPP11_entry se154;
    SUM_PROFITSUPPLIER14_entry se155;
    SUM_PROFITLINEITEM11_entry se156;
    SUM_PROFITPARTSUPP16_entry se157;
    SUM_PROFITSUPPLIER14PART2_entry se158;
    SUM_PROFITPARTSUPP16_entry se159;
    SUM_PROFITPART12_entry se160;
    SUM_PROFITLINEITEM12_entry se161;
    SUM_PROFITPARTSUPP11_entry se162;
    SUM_PROFITPART15_entry se163;
    SUM_PROFITLINEITEM12_entry se164;
    SUM_PROFITPARTSUPP16_entry se165;
    SUM_PROFITSUPPLIER12_entry se166;
    /* regex_t temporary objects */
    regex_t preg1;
  
    /* Data structures used for storing materialized views */
    NATION_map NATION;
    SUM_PROFITORDERS12_map SUM_PROFITORDERS12;
    SUM_PROFITORDERS12PARTSUPP1_map SUM_PROFITORDERS12PARTSUPP1;
    SUM_PROFITORDERS12SUPPLIER1_map SUM_PROFITORDERS12SUPPLIER1;
    SUM_PROFITORDERS12SUPPLIER1PART2_map SUM_PROFITORDERS12SUPPLIER1PART2;
    SUM_PROFITORDERS12PART2_map SUM_PROFITORDERS12PART2;
    SUM_PROFITORDERS15_map SUM_PROFITORDERS15;
    SUM_PROFITORDERS15PARTSUPP1_map SUM_PROFITORDERS15PARTSUPP1;
    SUM_PROFITORDERS15SUPPLIER1_map SUM_PROFITORDERS15SUPPLIER1;
    SUM_PROFITORDERS15SUPPLIER1PART2_map SUM_PROFITORDERS15SUPPLIER1PART2;
    SUM_PROFITORDERS15PART2_map SUM_PROFITORDERS15PART2;
    SUM_PROFITPARTSUPP11_map SUM_PROFITPARTSUPP11;
    SUM_PROFITPARTSUPP16_map SUM_PROFITPARTSUPP16;
    SUM_PROFITLINEITEM11_map SUM_PROFITLINEITEM11;
    SUM_PROFITLINEITEM12_map SUM_PROFITLINEITEM12;
    SUM_PROFITLINEITEM13_map SUM_PROFITLINEITEM13;
    SUM_PROFITLINEITEM14_map SUM_PROFITLINEITEM14;
    SUM_PROFITLINEITEM19_map SUM_PROFITLINEITEM19;
    SUM_PROFITSUPPLIER11_map SUM_PROFITSUPPLIER11;
    SUM_PROFITSUPPLIER11PART2_map SUM_PROFITSUPPLIER11PART2;
    SUM_PROFITSUPPLIER12_map SUM_PROFITSUPPLIER12;
    SUM_PROFITSUPPLIER14_map SUM_PROFITSUPPLIER14;
    SUM_PROFITSUPPLIER14PART2_map SUM_PROFITSUPPLIER14PART2;
    SUM_PROFITPART12_map SUM_PROFITPART12;
    SUM_PROFITPART15_map SUM_PROFITPART15;
    MultiHashMap<tuple2_S_D,DOUBLE_TYPE,HashIndex<tuple2_S_D,DOUBLE_TYPE> > _c1;
    MultiHashMap<tuple2_L_D,DOUBLE_TYPE,HashIndex<tuple2_L_D,DOUBLE_TYPE> > _c3;
    MultiHashMap<tuple2_L_D,DOUBLE_TYPE,HashIndex<tuple2_L_D,DOUBLE_TYPE> > _c2;
    
  
  };

}
