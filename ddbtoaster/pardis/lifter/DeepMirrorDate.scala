/* Generated by Purgatory 2014-2015 */

package ddbt.lib.store.deep

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._
trait DateOps extends Base with LongOps {  
  // Type representation
  val DateType = DateIRs.DateType
  implicit val typeDate: TypeRep[Date] = DateType
  implicit class DateRep(self : Rep[Date]) {
     def getTime() : Rep[Long] = dateGetTime(self)
     def longValue : Rep[Long] = date_Field_LongValue(self)
  }
  object Date {

  }
  // constructors
   def __newDate(longValue : Rep[Long]) : Rep[Date] = dateNew(longValue)
  // IR defs
  val DateNew = DateIRs.DateNew
  type DateNew = DateIRs.DateNew
  val DateGetTime = DateIRs.DateGetTime
  type DateGetTime = DateIRs.DateGetTime
  val Date_Field_LongValue = DateIRs.Date_Field_LongValue
  type Date_Field_LongValue = DateIRs.Date_Field_LongValue
  // method definitions
   def dateNew(longValue : Rep[Long]) : Rep[Date] = DateNew(longValue)
   def dateGetTime(self : Rep[Date]) : Rep[Long] = DateGetTime(self)
   def date_Field_LongValue(self : Rep[Date]) : Rep[Long] = Date_Field_LongValue(self)
  type Date = java.util.Date
}
object DateIRs extends Base {
  import LongIRs._
  // Type representation
  case object DateType extends TypeRep[Date] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = DateType
    val name = "Date"
    val typeArguments = Nil
    
    val typeTag = scala.reflect.runtime.universe.typeTag[Date]
  }
      implicit val typeDate: TypeRep[Date] = DateType
  // case classes
  case class DateNew(longValue : Rep[Long]) extends ConstructorDef[Date](List(), "Date", List(List(longValue))){
    override def curriedConstructor = (copy _)
  }

  case class DateGetTime(self : Rep[Date]) extends FunctionDef[Long](Some(self), "getTime", List(List())){
    override def curriedConstructor = (copy _)
  }

  case class Date_Field_LongValue(self : Rep[Date]) extends FieldDef[Long](self, "longValue"){
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  type Date = java.util.Date
}
trait DateImplicits extends DateOps { 
  // Add implicit conversions here!
}
trait DatePartialEvaluation extends DateComponent with BasePartialEvaluation {  
  // Immutable field inlining 
  override def date_Field_LongValue(self : Rep[Date]) : Rep[Long] = self match {
    case Def(node: DateNew) => node.longValue
    case _ => super.date_Field_LongValue(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}
trait DateComponent extends DateOps with DateImplicits {  }
