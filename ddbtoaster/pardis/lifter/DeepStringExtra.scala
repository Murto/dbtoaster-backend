/* Generated by Purgatory 2014-2017 */

package ddbt.lib.store.deep

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._

trait StringExtraOps extends Base  {  
  // Type representation
  val StringExtraType = StringExtraIRs.StringExtraType
  implicit val typeStringExtra: TypeRep[StringExtra] = StringExtraType
  implicit class StringExtraRep(self : Rep[StringExtra]) {

  }
  object StringExtra {
     def StringNew(len : Rep[Int]) : Rep[String] = stringExtraStringNewObject(len)
     def StringAppend(str : Rep[String], obj : Rep[Any]) : Rep[Unit] = stringExtraStringAppendObject(str, obj)
     def StringAppendN(str : Rep[String], obj : Rep[Any], n : Rep[Int]) : Rep[Unit] = stringExtraStringAppendNObject(str, obj, n)
     def Substring(str : Rep[String], init : Rep[Int], len : Rep[Int]) : Rep[String] = stringExtraSubstringObject(str, init, len)
     def StringCompare(str1 : Rep[String], str2 : Rep[String]) : Rep[Int] = stringExtraStringCompareObject(str1, str2)
     def StringPrintf(maxSize : Rep[Int], f : Rep[String], args : Rep[Any]*) : Rep[String] = stringExtraStringPrintfObject(maxSize, f, args:_*)
  }
  // constructors

  // IR defs
  val StringExtraStringNewObject = StringExtraIRs.StringExtraStringNewObject
  type StringExtraStringNewObject = StringExtraIRs.StringExtraStringNewObject
  val StringExtraStringAppendObject = StringExtraIRs.StringExtraStringAppendObject
  type StringExtraStringAppendObject = StringExtraIRs.StringExtraStringAppendObject
  val StringExtraStringAppendNObject = StringExtraIRs.StringExtraStringAppendNObject
  type StringExtraStringAppendNObject = StringExtraIRs.StringExtraStringAppendNObject
  val StringExtraSubstringObject = StringExtraIRs.StringExtraSubstringObject
  type StringExtraSubstringObject = StringExtraIRs.StringExtraSubstringObject
  val StringExtraStringCompareObject = StringExtraIRs.StringExtraStringCompareObject
  type StringExtraStringCompareObject = StringExtraIRs.StringExtraStringCompareObject
  val StringExtraStringPrintfObject = StringExtraIRs.StringExtraStringPrintfObject
  type StringExtraStringPrintfObject = StringExtraIRs.StringExtraStringPrintfObject
  // method definitions
   def stringExtraStringNewObject(len : Rep[Int]) : Rep[String] = StringExtraStringNewObject(len)
   def stringExtraStringAppendObject(str : Rep[String], obj : Rep[Any]) : Rep[Unit] = StringExtraStringAppendObject(str, obj)
   def stringExtraStringAppendNObject(str : Rep[String], obj : Rep[Any], n : Rep[Int]) : Rep[Unit] = StringExtraStringAppendNObject(str, obj, n)
   def stringExtraSubstringObject(str : Rep[String], init : Rep[Int], len : Rep[Int]) : Rep[String] = StringExtraSubstringObject(str, init, len)
   def stringExtraStringCompareObject(str1 : Rep[String], str2 : Rep[String]) : Rep[Int] = StringExtraStringCompareObject(str1, str2)
   def stringExtraStringPrintfObject(maxSize : Rep[Int], f : Rep[String], args : Rep[Any]*) : Rep[String] = {
    val argsOutput = __liftSeq(args.toSeq)
    StringExtraStringPrintfObject(maxSize, f, argsOutput)
  }
  type StringExtra = ddbt.lib.store.StringExtra
}
object StringExtraIRs extends Base {
  // Type representation
  case object StringExtraType extends TypeRep[StringExtra] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = StringExtraType
    val name = "StringExtra"
    val typeArguments = Nil
  }
      implicit val typeStringExtra: TypeRep[StringExtra] = StringExtraType
  // case classes
  case class StringExtraStringNewObject(len : Rep[Int]) extends FunctionDef[String](None, "StringExtra.StringNew", List(List(len))){
    override def curriedConstructor = (copy _)
  }

  case class StringExtraStringAppendObject(str : Rep[String], obj : Rep[Any]) extends FunctionDef[Unit](None, "StringExtra.StringAppend", List(List(str,obj))){
    override def curriedConstructor = (copy _).curried
  }

  case class StringExtraStringAppendNObject(str : Rep[String], obj : Rep[Any], n : Rep[Int]) extends FunctionDef[Unit](None, "StringExtra.StringAppendN", List(List(str,obj,n))){
    override def curriedConstructor = (copy _).curried
  }

  case class StringExtraSubstringObject(str : Rep[String], init : Rep[Int], len : Rep[Int]) extends FunctionDef[String](None, "StringExtra.Substring", List(List(str,init,len))){
    override def curriedConstructor = (copy _).curried
    override def isPure = true

    override def partiallyEvaluate(children: Any*): String = {
      val str = children(0).asInstanceOf[String]
      val init = children(1).asInstanceOf[Int]
      val len = children(2).asInstanceOf[Int]
      ddbt.lib.store.StringExtra.Substring(str, init, len)
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class StringExtraStringCompareObject(str1 : Rep[String], str2 : Rep[String]) extends FunctionDef[Int](None, "StringExtra.StringCompare", List(List(str1,str2))){
    override def curriedConstructor = (copy _).curried
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val str1 = children(0).asInstanceOf[String]
      val str2 = children(1).asInstanceOf[String]
      ddbt.lib.store.StringExtra.StringCompare(str1, str2)
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class StringExtraStringPrintfObject(maxSize : Rep[Int], f : Rep[String], argsOutput : Rep[Seq[Any]]) extends FunctionDef[String](None, "StringExtra.StringPrintf", List(List(maxSize,f,__varArg(argsOutput)))){
    override def curriedConstructor = (copy _).curried
  }

  type StringExtra = ddbt.lib.store.StringExtra
}
trait StringExtraImplicits extends StringExtraOps { 
  // Add implicit conversions here!
}
trait StringExtraComponent extends StringExtraOps with StringExtraImplicits {  }

trait StringExtraPartialEvaluation extends StringExtraComponent with BasePartialEvaluation {  
  // Immutable field inlining 

  // Mutable field inlining 
  // Pure function partial evaluation
}


