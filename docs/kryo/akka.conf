akka {
  loglevel=ERROR
  log-dead-letters-during-shutdown=off
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    serializers.kryo = "com.romix.akka.serialization.kryo.KryoSerializer"  
    serialization-bindings {
      "ddbt.lib.Messages$StreamEvent" = kryo
      "ddbt.lib.WorkerActor$IMsg" = kryo
    }
    kryo  {  
      # graph - serialization of object graphs with shared nodes and cyclic references, small overhead  
      # nograph - does not support object graphs with shared nodes, but is usually faster   
      type = "graph"  
        
      # default - slowest, produces bigger serialized representation. Contains fully-  
      # qualified class names (FQCNs) for each class  
      #  
      # explicit - fast and produces compact serialized representation. Requires that all  
      # classes that will be serialized are pre-registered using the "mappings" and "classes"
      # sections. To guarantee that both sender and receiver use the same numeric ids for the same  
      # classes it is advised to provide exactly the same entries in the "mappings" section   
      #  
      # incremental - fast and produces compact serialized representation. Support optional  
      # pre-registering of classes using the "mappings" and "classes" sections. If class is  
      # not pre-registered, it will be registered dynamically by picking a next available id  
      # To guarantee that both sender and receiver use the same numeric ids for the same   
      # classes it is advised to pre-register them using at least the "classes" section   

      idstrategy = "incremental"  

      # Define a default size for byte buffers used during serialization   
      buffer-size = 4096  

      # Define a default size for serializer pool
      serializer-pool-size = 16

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # Log implicitly registered classes. Useful, if you want to know all classes
      # which are serialized
      implicit-registration-logging = false 

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and low-level tweaking
      kryo-trace = false 

      # If enabled, Kryo uses internally a map detecting shared nodes.
      # This is a preferred mode for big object graphs with a lot of nodes.
      # For small object graphs (e.g. below 10 nodes) set it to false for 
      # better performance. 
      kryo-reference-map = true 

      # Define mappings from a fully qualified class name to a numeric id.  
      # Smaller ids lead to smaller sizes of serialized representations.  
      #  
      # This section is mandatory for idstartegy=explciit  
      # This section is optional  for idstartegy=incremental  
      # This section is ignored   for idstartegy=default  
      #   
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and 
      # Scala types   
      mappings {  
        # fully.qualified.classname1 = id1
        # fully.qualified.classname2 = id2
      }  

      # Define a set of fully qualified class names for   
      # classes to be used for serialization.  
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section  
      #  
      # This section is optional  for idstartegy=incremental  
      # This section is ignored   for idstartegy=default  
      # This section is optional  for idstartegy=explicit  
      classes = [  
        # fully.qualified.classname1
        # fully.qualified.classname2      
      ]  
    }

  }
}
