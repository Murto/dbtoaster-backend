#include <sys/time.h>
#include <vector>
#include "macro.hpp"
#include "types.hpp"
#include "functions.hpp"
#include "hash.hpp"
#include "mmap.hpp"
#include "serialization.hpp"

#define RELATION_INVENTORY_DYNAMIC
#define RELATION_LOCATION_STATIC
#define RELATION_CENSUS_STATIC
#define RELATION_ITEM_STATIC
#define RELATION_WEATHER_STATIC

namespace dbtoaster {
  
  /* Definitions of auxiliary maps for storing materialized views. */
  struct DELTA_INVENTORY_entry {
    long inventory_locn; long inventory_dateid; DOUBLE_TYPE inventory_ksn; DOUBLE_TYPE inventory_inventoryunits; long __av;  DELTA_INVENTORY_entry* nxt; DELTA_INVENTORY_entry* prv;
    explicit DELTA_INVENTORY_entry() : nxt(nullptr), prv(nullptr) { /*inventory_locn = 0L; inventory_dateid = 0L; inventory_ksn = 0.0; inventory_inventoryunits = 0.0; __av = 0L; */ }
    explicit DELTA_INVENTORY_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3, const long c4) { inventory_locn = c0; inventory_dateid = c1; inventory_ksn = c2; inventory_inventoryunits = c3; __av = c4; }
    DELTA_INVENTORY_entry(const DELTA_INVENTORY_entry& other) : inventory_locn( other.inventory_locn ), inventory_dateid( other.inventory_dateid ), inventory_ksn( other.inventory_ksn ), inventory_inventoryunits( other.inventory_inventoryunits ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE DELTA_INVENTORY_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { inventory_locn = c0; inventory_dateid = c1; inventory_ksn = c2; inventory_inventoryunits = c3;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, inventory_locn);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, inventory_dateid);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, inventory_ksn);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, inventory_inventoryunits);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct DELTA_INVENTORY_mapkey0123_idxfn {
    FORCE_INLINE static size_t hash(const DELTA_INVENTORY_entry& e) {
      size_t h = 0;
      hash_combine(h, e.inventory_locn);
      hash_combine(h, e.inventory_dateid);
      hash_combine(h, e.inventory_ksn);
      hash_combine(h, e.inventory_inventoryunits);
      return h;
    }
    FORCE_INLINE static bool equals(const DELTA_INVENTORY_entry& x, const DELTA_INVENTORY_entry& y) {
      return x.inventory_locn == y.inventory_locn && x.inventory_dateid == y.inventory_dateid && x.inventory_ksn == y.inventory_ksn && x.inventory_inventoryunits == y.inventory_inventoryunits;
    }
  };
  
  typedef MultiHashMap<DELTA_INVENTORY_entry, long, 
    HashIndex<DELTA_INVENTORY_entry, long, DELTA_INVENTORY_mapkey0123_idxfn, true>
  > DELTA_INVENTORY_map;
  typedef HashIndex<DELTA_INVENTORY_entry, long, DELTA_INVENTORY_mapkey0123_idxfn, true> HashIndex_DELTA_INVENTORY_map_0123;
  
  struct LOCATION_entry {
    long LOCATION_LOCN; long LOCATION_ZIP; DOUBLE_TYPE LOCATION_RGN_CD; DOUBLE_TYPE LOCATION_CLIM_ZN_NBR; DOUBLE_TYPE LOCATION_TOT_AREA_SQ_FT; DOUBLE_TYPE LOCATION_SELL_AREA_SQ_FT; DOUBLE_TYPE LOCATION_AVGHHI; DOUBLE_TYPE LOCATION_SUPERTARGETDISTANCE; DOUBLE_TYPE LOCATION_SUPERTARGETDRIVETIME; DOUBLE_TYPE LOCATION_TARGETDISTANCE; DOUBLE_TYPE LOCATION_TARGETDRIVETIME; DOUBLE_TYPE LOCATION_WALMARTDISTANCE; DOUBLE_TYPE LOCATION_WALMARTDRIVETIME; DOUBLE_TYPE LOCATION_WALMARTSUPERCENTERDISTANCE; DOUBLE_TYPE LOCATION_WALMARTSUPERCENTERDRIVETIME; long __av;  LOCATION_entry* nxt; LOCATION_entry* prv;
    explicit LOCATION_entry() : nxt(nullptr), prv(nullptr) { /*LOCATION_LOCN = 0L; LOCATION_ZIP = 0L; LOCATION_RGN_CD = 0.0; LOCATION_CLIM_ZN_NBR = 0.0; LOCATION_TOT_AREA_SQ_FT = 0.0; LOCATION_SELL_AREA_SQ_FT = 0.0; LOCATION_AVGHHI = 0.0; LOCATION_SUPERTARGETDISTANCE = 0.0; LOCATION_SUPERTARGETDRIVETIME = 0.0; LOCATION_TARGETDISTANCE = 0.0; LOCATION_TARGETDRIVETIME = 0.0; LOCATION_WALMARTDISTANCE = 0.0; LOCATION_WALMARTDRIVETIME = 0.0; LOCATION_WALMARTSUPERCENTERDISTANCE = 0.0; LOCATION_WALMARTSUPERCENTERDRIVETIME = 0.0; __av = 0L; */ }
    explicit LOCATION_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3, const DOUBLE_TYPE c4, const DOUBLE_TYPE c5, const DOUBLE_TYPE c6, const DOUBLE_TYPE c7, const DOUBLE_TYPE c8, const DOUBLE_TYPE c9, const DOUBLE_TYPE c10, const DOUBLE_TYPE c11, const DOUBLE_TYPE c12, const DOUBLE_TYPE c13, const DOUBLE_TYPE c14, const long c15) { LOCATION_LOCN = c0; LOCATION_ZIP = c1; LOCATION_RGN_CD = c2; LOCATION_CLIM_ZN_NBR = c3; LOCATION_TOT_AREA_SQ_FT = c4; LOCATION_SELL_AREA_SQ_FT = c5; LOCATION_AVGHHI = c6; LOCATION_SUPERTARGETDISTANCE = c7; LOCATION_SUPERTARGETDRIVETIME = c8; LOCATION_TARGETDISTANCE = c9; LOCATION_TARGETDRIVETIME = c10; LOCATION_WALMARTDISTANCE = c11; LOCATION_WALMARTDRIVETIME = c12; LOCATION_WALMARTSUPERCENTERDISTANCE = c13; LOCATION_WALMARTSUPERCENTERDRIVETIME = c14; __av = c15; }
    LOCATION_entry(const LOCATION_entry& other) : LOCATION_LOCN( other.LOCATION_LOCN ), LOCATION_ZIP( other.LOCATION_ZIP ), LOCATION_RGN_CD( other.LOCATION_RGN_CD ), LOCATION_CLIM_ZN_NBR( other.LOCATION_CLIM_ZN_NBR ), LOCATION_TOT_AREA_SQ_FT( other.LOCATION_TOT_AREA_SQ_FT ), LOCATION_SELL_AREA_SQ_FT( other.LOCATION_SELL_AREA_SQ_FT ), LOCATION_AVGHHI( other.LOCATION_AVGHHI ), LOCATION_SUPERTARGETDISTANCE( other.LOCATION_SUPERTARGETDISTANCE ), LOCATION_SUPERTARGETDRIVETIME( other.LOCATION_SUPERTARGETDRIVETIME ), LOCATION_TARGETDISTANCE( other.LOCATION_TARGETDISTANCE ), LOCATION_TARGETDRIVETIME( other.LOCATION_TARGETDRIVETIME ), LOCATION_WALMARTDISTANCE( other.LOCATION_WALMARTDISTANCE ), LOCATION_WALMARTDRIVETIME( other.LOCATION_WALMARTDRIVETIME ), LOCATION_WALMARTSUPERCENTERDISTANCE( other.LOCATION_WALMARTSUPERCENTERDISTANCE ), LOCATION_WALMARTSUPERCENTERDRIVETIME( other.LOCATION_WALMARTSUPERCENTERDRIVETIME ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE LOCATION_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3, const DOUBLE_TYPE c4, const DOUBLE_TYPE c5, const DOUBLE_TYPE c6, const DOUBLE_TYPE c7, const DOUBLE_TYPE c8, const DOUBLE_TYPE c9, const DOUBLE_TYPE c10, const DOUBLE_TYPE c11, const DOUBLE_TYPE c12, const DOUBLE_TYPE c13, const DOUBLE_TYPE c14) { LOCATION_LOCN = c0; LOCATION_ZIP = c1; LOCATION_RGN_CD = c2; LOCATION_CLIM_ZN_NBR = c3; LOCATION_TOT_AREA_SQ_FT = c4; LOCATION_SELL_AREA_SQ_FT = c5; LOCATION_AVGHHI = c6; LOCATION_SUPERTARGETDISTANCE = c7; LOCATION_SUPERTARGETDRIVETIME = c8; LOCATION_TARGETDISTANCE = c9; LOCATION_TARGETDRIVETIME = c10; LOCATION_WALMARTDISTANCE = c11; LOCATION_WALMARTDRIVETIME = c12; LOCATION_WALMARTSUPERCENTERDISTANCE = c13; LOCATION_WALMARTSUPERCENTERDRIVETIME = c14;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_ZIP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_RGN_CD);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_CLIM_ZN_NBR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TOT_AREA_SQ_FT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SELL_AREA_SQ_FT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_AVGHHI);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SUPERTARGETDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SUPERTARGETDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TARGETDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TARGETDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTSUPERCENTERDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTSUPERCENTERDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct LOCATION_mapkey01234567891011121314_idxfn {
    FORCE_INLINE static size_t hash(const LOCATION_entry& e) {
      size_t h = 0;
      hash_combine(h, e.LOCATION_LOCN);
      hash_combine(h, e.LOCATION_ZIP);
      hash_combine(h, e.LOCATION_RGN_CD);
      hash_combine(h, e.LOCATION_CLIM_ZN_NBR);
      hash_combine(h, e.LOCATION_TOT_AREA_SQ_FT);
      hash_combine(h, e.LOCATION_SELL_AREA_SQ_FT);
      hash_combine(h, e.LOCATION_AVGHHI);
      hash_combine(h, e.LOCATION_SUPERTARGETDISTANCE);
      hash_combine(h, e.LOCATION_SUPERTARGETDRIVETIME);
      hash_combine(h, e.LOCATION_TARGETDISTANCE);
      hash_combine(h, e.LOCATION_TARGETDRIVETIME);
      hash_combine(h, e.LOCATION_WALMARTDISTANCE);
      hash_combine(h, e.LOCATION_WALMARTDRIVETIME);
      hash_combine(h, e.LOCATION_WALMARTSUPERCENTERDISTANCE);
      hash_combine(h, e.LOCATION_WALMARTSUPERCENTERDRIVETIME);
      return h;
    }
    FORCE_INLINE static bool equals(const LOCATION_entry& x, const LOCATION_entry& y) {
      return x.LOCATION_LOCN == y.LOCATION_LOCN && x.LOCATION_ZIP == y.LOCATION_ZIP && x.LOCATION_RGN_CD == y.LOCATION_RGN_CD && x.LOCATION_CLIM_ZN_NBR == y.LOCATION_CLIM_ZN_NBR && x.LOCATION_TOT_AREA_SQ_FT == y.LOCATION_TOT_AREA_SQ_FT && x.LOCATION_SELL_AREA_SQ_FT == y.LOCATION_SELL_AREA_SQ_FT && x.LOCATION_AVGHHI == y.LOCATION_AVGHHI && x.LOCATION_SUPERTARGETDISTANCE == y.LOCATION_SUPERTARGETDISTANCE && x.LOCATION_SUPERTARGETDRIVETIME == y.LOCATION_SUPERTARGETDRIVETIME && x.LOCATION_TARGETDISTANCE == y.LOCATION_TARGETDISTANCE && x.LOCATION_TARGETDRIVETIME == y.LOCATION_TARGETDRIVETIME && x.LOCATION_WALMARTDISTANCE == y.LOCATION_WALMARTDISTANCE && x.LOCATION_WALMARTDRIVETIME == y.LOCATION_WALMARTDRIVETIME && x.LOCATION_WALMARTSUPERCENTERDISTANCE == y.LOCATION_WALMARTSUPERCENTERDISTANCE && x.LOCATION_WALMARTSUPERCENTERDRIVETIME == y.LOCATION_WALMARTSUPERCENTERDRIVETIME;
    }
  };
  
  typedef MultiHashMap<LOCATION_entry, long, 
    HashIndex<LOCATION_entry, long, LOCATION_mapkey01234567891011121314_idxfn, true>
  > LOCATION_map;
  typedef HashIndex<LOCATION_entry, long, LOCATION_mapkey01234567891011121314_idxfn, true> HashIndex_LOCATION_map_01234567891011121314;
  
  struct CENSUS_entry {
    long CENSUS_ZIP; long CENSUS_POPULATION; long CENSUS_WHITE; long CENSUS_ASIAN; long CENSUS_PACIFIC; long CENSUS_BLACKAFRICAN; DOUBLE_TYPE CENSUS_MEDIANAGE; long CENSUS_OCCUPIEDHOUSEUNITS; long CENSUS_HOUSEUNITS; long CENSUS_FAMILIES; long CENSUS_HOUSEHOLDS; long CENSUS_HUSBWIFE; long CENSUS_MALES; long CENSUS_FEMALES; long CENSUS_HOUSEHOLDSCHILDREN; long CENSUS_HISPANIC; long __av;  CENSUS_entry* nxt; CENSUS_entry* prv;
    explicit CENSUS_entry() : nxt(nullptr), prv(nullptr) { /*CENSUS_ZIP = 0L; CENSUS_POPULATION = 0L; CENSUS_WHITE = 0L; CENSUS_ASIAN = 0L; CENSUS_PACIFIC = 0L; CENSUS_BLACKAFRICAN = 0L; CENSUS_MEDIANAGE = 0.0; CENSUS_OCCUPIEDHOUSEUNITS = 0L; CENSUS_HOUSEUNITS = 0L; CENSUS_FAMILIES = 0L; CENSUS_HOUSEHOLDS = 0L; CENSUS_HUSBWIFE = 0L; CENSUS_MALES = 0L; CENSUS_FEMALES = 0L; CENSUS_HOUSEHOLDSCHILDREN = 0L; CENSUS_HISPANIC = 0L; __av = 0L; */ }
    explicit CENSUS_entry(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const long c14, const long c15, const long c16) { CENSUS_ZIP = c0; CENSUS_POPULATION = c1; CENSUS_WHITE = c2; CENSUS_ASIAN = c3; CENSUS_PACIFIC = c4; CENSUS_BLACKAFRICAN = c5; CENSUS_MEDIANAGE = c6; CENSUS_OCCUPIEDHOUSEUNITS = c7; CENSUS_HOUSEUNITS = c8; CENSUS_FAMILIES = c9; CENSUS_HOUSEHOLDS = c10; CENSUS_HUSBWIFE = c11; CENSUS_MALES = c12; CENSUS_FEMALES = c13; CENSUS_HOUSEHOLDSCHILDREN = c14; CENSUS_HISPANIC = c15; __av = c16; }
    CENSUS_entry(const CENSUS_entry& other) : CENSUS_ZIP( other.CENSUS_ZIP ), CENSUS_POPULATION( other.CENSUS_POPULATION ), CENSUS_WHITE( other.CENSUS_WHITE ), CENSUS_ASIAN( other.CENSUS_ASIAN ), CENSUS_PACIFIC( other.CENSUS_PACIFIC ), CENSUS_BLACKAFRICAN( other.CENSUS_BLACKAFRICAN ), CENSUS_MEDIANAGE( other.CENSUS_MEDIANAGE ), CENSUS_OCCUPIEDHOUSEUNITS( other.CENSUS_OCCUPIEDHOUSEUNITS ), CENSUS_HOUSEUNITS( other.CENSUS_HOUSEUNITS ), CENSUS_FAMILIES( other.CENSUS_FAMILIES ), CENSUS_HOUSEHOLDS( other.CENSUS_HOUSEHOLDS ), CENSUS_HUSBWIFE( other.CENSUS_HUSBWIFE ), CENSUS_MALES( other.CENSUS_MALES ), CENSUS_FEMALES( other.CENSUS_FEMALES ), CENSUS_HOUSEHOLDSCHILDREN( other.CENSUS_HOUSEHOLDSCHILDREN ), CENSUS_HISPANIC( other.CENSUS_HISPANIC ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE CENSUS_entry& modify(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const long c14, const long c15) { CENSUS_ZIP = c0; CENSUS_POPULATION = c1; CENSUS_WHITE = c2; CENSUS_ASIAN = c3; CENSUS_PACIFIC = c4; CENSUS_BLACKAFRICAN = c5; CENSUS_MEDIANAGE = c6; CENSUS_OCCUPIEDHOUSEUNITS = c7; CENSUS_HOUSEUNITS = c8; CENSUS_FAMILIES = c9; CENSUS_HOUSEHOLDS = c10; CENSUS_HUSBWIFE = c11; CENSUS_MALES = c12; CENSUS_FEMALES = c13; CENSUS_HOUSEHOLDSCHILDREN = c14; CENSUS_HISPANIC = c15;  return *this; }
    FORCE_INLINE CENSUS_entry& modify0(const long c0) { CENSUS_ZIP = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_ZIP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_POPULATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_WHITE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_ASIAN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_PACIFIC);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_BLACKAFRICAN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_MEDIANAGE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_OCCUPIEDHOUSEUNITS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEUNITS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_FAMILIES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEHOLDS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HUSBWIFE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_MALES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_FEMALES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEHOLDSCHILDREN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HISPANIC);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct CENSUS_mapkey0123456789101112131415_idxfn {
    FORCE_INLINE static size_t hash(const CENSUS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CENSUS_ZIP);
      hash_combine(h, e.CENSUS_POPULATION);
      hash_combine(h, e.CENSUS_WHITE);
      hash_combine(h, e.CENSUS_ASIAN);
      hash_combine(h, e.CENSUS_PACIFIC);
      hash_combine(h, e.CENSUS_BLACKAFRICAN);
      hash_combine(h, e.CENSUS_MEDIANAGE);
      hash_combine(h, e.CENSUS_OCCUPIEDHOUSEUNITS);
      hash_combine(h, e.CENSUS_HOUSEUNITS);
      hash_combine(h, e.CENSUS_FAMILIES);
      hash_combine(h, e.CENSUS_HOUSEHOLDS);
      hash_combine(h, e.CENSUS_HUSBWIFE);
      hash_combine(h, e.CENSUS_MALES);
      hash_combine(h, e.CENSUS_FEMALES);
      hash_combine(h, e.CENSUS_HOUSEHOLDSCHILDREN);
      hash_combine(h, e.CENSUS_HISPANIC);
      return h;
    }
    FORCE_INLINE static bool equals(const CENSUS_entry& x, const CENSUS_entry& y) {
      return x.CENSUS_ZIP == y.CENSUS_ZIP && x.CENSUS_POPULATION == y.CENSUS_POPULATION && x.CENSUS_WHITE == y.CENSUS_WHITE && x.CENSUS_ASIAN == y.CENSUS_ASIAN && x.CENSUS_PACIFIC == y.CENSUS_PACIFIC && x.CENSUS_BLACKAFRICAN == y.CENSUS_BLACKAFRICAN && x.CENSUS_MEDIANAGE == y.CENSUS_MEDIANAGE && x.CENSUS_OCCUPIEDHOUSEUNITS == y.CENSUS_OCCUPIEDHOUSEUNITS && x.CENSUS_HOUSEUNITS == y.CENSUS_HOUSEUNITS && x.CENSUS_FAMILIES == y.CENSUS_FAMILIES && x.CENSUS_HOUSEHOLDS == y.CENSUS_HOUSEHOLDS && x.CENSUS_HUSBWIFE == y.CENSUS_HUSBWIFE && x.CENSUS_MALES == y.CENSUS_MALES && x.CENSUS_FEMALES == y.CENSUS_FEMALES && x.CENSUS_HOUSEHOLDSCHILDREN == y.CENSUS_HOUSEHOLDSCHILDREN && x.CENSUS_HISPANIC == y.CENSUS_HISPANIC;
    }
  };
  
  struct CENSUS_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const CENSUS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CENSUS_ZIP);
      return h;
    }
    FORCE_INLINE static bool equals(const CENSUS_entry& x, const CENSUS_entry& y) {
      return x.CENSUS_ZIP == y.CENSUS_ZIP;
    }
  };
  
  typedef MultiHashMap<CENSUS_entry, long, 
    HashIndex<CENSUS_entry, long, CENSUS_mapkey0123456789101112131415_idxfn, true>,
    HashIndex<CENSUS_entry, long, CENSUS_mapkey0_idxfn, false>
  > CENSUS_map;
  typedef HashIndex<CENSUS_entry, long, CENSUS_mapkey0123456789101112131415_idxfn, true> HashIndex_CENSUS_map_0123456789101112131415;
  typedef HashIndex<CENSUS_entry, long, CENSUS_mapkey0_idxfn, false> HashIndex_CENSUS_map_0;
  
  struct ITEM_entry {
    DOUBLE_TYPE ITEM_KSN; long ITEM_SUBCATEGORY; long ITEM_CATEGORY; long ITEM_CATEGORYCLUSTER; DOUBLE_TYPE ITEM_PRIZE; long __av;  ITEM_entry* nxt; ITEM_entry* prv;
    explicit ITEM_entry() : nxt(nullptr), prv(nullptr) { /*ITEM_KSN = 0.0; ITEM_SUBCATEGORY = 0L; ITEM_CATEGORY = 0L; ITEM_CATEGORYCLUSTER = 0L; ITEM_PRIZE = 0.0; __av = 0L; */ }
    explicit ITEM_entry(const DOUBLE_TYPE c0, const long c1, const long c2, const long c3, const DOUBLE_TYPE c4, const long c5) { ITEM_KSN = c0; ITEM_SUBCATEGORY = c1; ITEM_CATEGORY = c2; ITEM_CATEGORYCLUSTER = c3; ITEM_PRIZE = c4; __av = c5; }
    ITEM_entry(const ITEM_entry& other) : ITEM_KSN( other.ITEM_KSN ), ITEM_SUBCATEGORY( other.ITEM_SUBCATEGORY ), ITEM_CATEGORY( other.ITEM_CATEGORY ), ITEM_CATEGORYCLUSTER( other.ITEM_CATEGORYCLUSTER ), ITEM_PRIZE( other.ITEM_PRIZE ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE ITEM_entry& modify(const DOUBLE_TYPE c0, const long c1, const long c2, const long c3, const DOUBLE_TYPE c4) { ITEM_KSN = c0; ITEM_SUBCATEGORY = c1; ITEM_CATEGORY = c2; ITEM_CATEGORYCLUSTER = c3; ITEM_PRIZE = c4;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_SUBCATEGORY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_CATEGORY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_CATEGORYCLUSTER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_PRIZE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct ITEM_mapkey01234_idxfn {
    FORCE_INLINE static size_t hash(const ITEM_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_KSN);
      hash_combine(h, e.ITEM_SUBCATEGORY);
      hash_combine(h, e.ITEM_CATEGORY);
      hash_combine(h, e.ITEM_CATEGORYCLUSTER);
      hash_combine(h, e.ITEM_PRIZE);
      return h;
    }
    FORCE_INLINE static bool equals(const ITEM_entry& x, const ITEM_entry& y) {
      return x.ITEM_KSN == y.ITEM_KSN && x.ITEM_SUBCATEGORY == y.ITEM_SUBCATEGORY && x.ITEM_CATEGORY == y.ITEM_CATEGORY && x.ITEM_CATEGORYCLUSTER == y.ITEM_CATEGORYCLUSTER && x.ITEM_PRIZE == y.ITEM_PRIZE;
    }
  };
  
  typedef MultiHashMap<ITEM_entry, long, 
    HashIndex<ITEM_entry, long, ITEM_mapkey01234_idxfn, true>
  > ITEM_map;
  typedef HashIndex<ITEM_entry, long, ITEM_mapkey01234_idxfn, true> HashIndex_ITEM_map_01234;
  
  struct WEATHER_entry {
    long WEATHER_LOCN; long WEATHER_DATEID; long WEATHER_RAIN; long WEATHER_SNOW; long WEATHER_MAXTEMP; long WEATHER_MINTEMP; DOUBLE_TYPE WEATHER_MEANWIND; long WEATHER_THUNDER; long __av;  WEATHER_entry* nxt; WEATHER_entry* prv;
    explicit WEATHER_entry() : nxt(nullptr), prv(nullptr) { /*WEATHER_LOCN = 0L; WEATHER_DATEID = 0L; WEATHER_RAIN = 0L; WEATHER_SNOW = 0L; WEATHER_MAXTEMP = 0L; WEATHER_MINTEMP = 0L; WEATHER_MEANWIND = 0.0; WEATHER_THUNDER = 0L; __av = 0L; */ }
    explicit WEATHER_entry(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8) { WEATHER_LOCN = c0; WEATHER_DATEID = c1; WEATHER_RAIN = c2; WEATHER_SNOW = c3; WEATHER_MAXTEMP = c4; WEATHER_MINTEMP = c5; WEATHER_MEANWIND = c6; WEATHER_THUNDER = c7; __av = c8; }
    WEATHER_entry(const WEATHER_entry& other) : WEATHER_LOCN( other.WEATHER_LOCN ), WEATHER_DATEID( other.WEATHER_DATEID ), WEATHER_RAIN( other.WEATHER_RAIN ), WEATHER_SNOW( other.WEATHER_SNOW ), WEATHER_MAXTEMP( other.WEATHER_MAXTEMP ), WEATHER_MINTEMP( other.WEATHER_MINTEMP ), WEATHER_MEANWIND( other.WEATHER_MEANWIND ), WEATHER_THUNDER( other.WEATHER_THUNDER ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE WEATHER_entry& modify(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7) { WEATHER_LOCN = c0; WEATHER_DATEID = c1; WEATHER_RAIN = c2; WEATHER_SNOW = c3; WEATHER_MAXTEMP = c4; WEATHER_MINTEMP = c5; WEATHER_MEANWIND = c6; WEATHER_THUNDER = c7;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_RAIN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_SNOW);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MAXTEMP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MINTEMP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MEANWIND);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_THUNDER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct WEATHER_mapkey01234567_idxfn {
    FORCE_INLINE static size_t hash(const WEATHER_entry& e) {
      size_t h = 0;
      hash_combine(h, e.WEATHER_LOCN);
      hash_combine(h, e.WEATHER_DATEID);
      hash_combine(h, e.WEATHER_RAIN);
      hash_combine(h, e.WEATHER_SNOW);
      hash_combine(h, e.WEATHER_MAXTEMP);
      hash_combine(h, e.WEATHER_MINTEMP);
      hash_combine(h, e.WEATHER_MEANWIND);
      hash_combine(h, e.WEATHER_THUNDER);
      return h;
    }
    FORCE_INLINE static bool equals(const WEATHER_entry& x, const WEATHER_entry& y) {
      return x.WEATHER_LOCN == y.WEATHER_LOCN && x.WEATHER_DATEID == y.WEATHER_DATEID && x.WEATHER_RAIN == y.WEATHER_RAIN && x.WEATHER_SNOW == y.WEATHER_SNOW && x.WEATHER_MAXTEMP == y.WEATHER_MAXTEMP && x.WEATHER_MINTEMP == y.WEATHER_MINTEMP && x.WEATHER_MEANWIND == y.WEATHER_MEANWIND && x.WEATHER_THUNDER == y.WEATHER_THUNDER;
    }
  };
  
  typedef MultiHashMap<WEATHER_entry, long, 
    HashIndex<WEATHER_entry, long, WEATHER_mapkey01234567_idxfn, true>
  > WEATHER_map;
  typedef HashIndex<WEATHER_entry, long, WEATHER_mapkey01234567_idxfn, true> HashIndex_WEATHER_map_01234567;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_5INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_6INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_7INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_8INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_9INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_10INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_11INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_12INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_13INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_14INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_15INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_16INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_17INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_18INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_19INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_20INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_21INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_22INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_23INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_24INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_25INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_26INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_27INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_28INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_29INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_30INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_31INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_32INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_33INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_34INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_35INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_36INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_37INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_38INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_39INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_40INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_41INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_42INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_43INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* nxt; __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* prv;
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const long c3) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2; __av = c3; }
    __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry(const __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; INVENTORY_KSN = c2;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_mapkey012_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry& x, const __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID && x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_mapkey012_idxfn, true>
  > __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_mapkey012_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_map_012;
  
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_167INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_168INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_169INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_170INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_171INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_172INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_173INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_174INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_175INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_176INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_177INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_178INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_179INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_180INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_181INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_182INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_183INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_184INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_185INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_186INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_187INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_188INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_189INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_190INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_191INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_192INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_193INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_194INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_195INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_206INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_207INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_208INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_209INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_210INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_211INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_212INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_213INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_214INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_215INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_216INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_217INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_218INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_219INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_220INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_221INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_222INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_223INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_224INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_225INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_226INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_227INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_228INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_229INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_230INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_231INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_232INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_233INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_244INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_245INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_246INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_247INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_248INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_249INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_250INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_251INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_252INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_253INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_254INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_255INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_256INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_257INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_258INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_259INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_260INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_261INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_262INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_263INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_264INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_265INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_266INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_267INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_268INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_269INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_270INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_281INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_282INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_283INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_284INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_285INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_286INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_287INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_288INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_289INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_290INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_291INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_292INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_293INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_294INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_295INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_296INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_297INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_298INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_299INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_300INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_301INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_302INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_303INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_304INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_305INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_306INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_317INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_318INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_319INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_320INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_321INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_322INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_323INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_324INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_325INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_326INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_327INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_328INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_329INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_330INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_331INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_332INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_333INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_334INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_335INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_336INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_337INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_338INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_339INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_340INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_341INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_352INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_353INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_354INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_355INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_356INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_357INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_358INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_359INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_360INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_361INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_362INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_363INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_364INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_365INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_366INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_367INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_368INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_369INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_370INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_371INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_372INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_373INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_374INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_375INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_386INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_387INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_388INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_389INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_390INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_391INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_392INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_393INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_394INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_395INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_396INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_397INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_398INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_399INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_400INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_401INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_402INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_403INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_404INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_405INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_406INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_407INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_408INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_419INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_420INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_421INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_422INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_423INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_424INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_425INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_426INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_427INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_428INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_429INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_430INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_431INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_432INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_433INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_434INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_435INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_436INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_437INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_438INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_439INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_440INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_451INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_452INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_453INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_454INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_455INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_456INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_457INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_458INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_459INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_460INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_461INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_462INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_463INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_464INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_465INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_466INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_467INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_468INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_469INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_470INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_471INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_482INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_483INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_484INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_485INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_486INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_487INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_488INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_489INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_490INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_491INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_492INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_493INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_494INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_495INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_496INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_497INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_498INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_499INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_500INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_501INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_512INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_513INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_514INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_515INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_516INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_517INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_518INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_519INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_520INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_521INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_522INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_523INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_524INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_525INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_526INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_527INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_528INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_529INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_530INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_541INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_542INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_543INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_544INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_545INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_546INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_547INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_548INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_549INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_550INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_551INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_552INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_553INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_554INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_555INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_556INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_557INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_558INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_569INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_570INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_571INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_572INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_573INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_574INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_575INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_576INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_577INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_578INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_579INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_580INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_581INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_582INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_583INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_584INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_585INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_596INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_597INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_598INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_599INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_600INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_601INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_602INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_603INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_604INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_605INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_606INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_607INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_608INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_609INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_610INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_611INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_622INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_623INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_624INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_625INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_626INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_627INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_628INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_629INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_630INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_631INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_632INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_633INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_634INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_635INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_636INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_647INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_648INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_649INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_650INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_651INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_652INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_653INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_654INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_655INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_656INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_657INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_658INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_659INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_660INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_671INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_672INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_673INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_674INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_675INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_676INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_677INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_678INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_679INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_680INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_681INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_682INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_683INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_694INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_695INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_696INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_697INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_698INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_699INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_700INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_701INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_702INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_703INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_704INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_705INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_716INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_717INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_718INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_719INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_720INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_721INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_722INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_723INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_724INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_725INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_726INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_737INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_738INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_739INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_740INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_741INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_742INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_743INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_744INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_745INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry(const long c0, const DOUBLE_TYPE c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_746INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_757INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_758INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_759INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_760INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_761INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_762INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_763INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_764INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_765INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_776INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_777INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_778INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_779INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_780INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_781INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_782INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_783INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_794INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_795INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_796INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_797INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_798INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_799INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_800INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_811INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_812INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_813INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_814INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_815INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_816INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_827INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_828INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_829INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_830INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_831INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_842INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_843INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_844INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_845INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_856INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_857INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_858INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_869INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_870INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry {
    long INVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry* nxt; __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry(const long c0, const long c1) { INVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry(const __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry& modify(const long c0) { INVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry& x, const __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry, long, __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_881INVENTORY1_P_3_map_0;
  
  struct __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_892INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_893INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_894INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_895INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_902INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_903INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_904INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const long c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry, long, __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_911INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_912INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry {
    DOUBLE_TYPE INVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry* nxt; __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { INVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry(const __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry& other) : INVENTORY_KSN( other.INVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry& modify(const DOUBLE_TYPE c0) { INVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry& x, const __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry& y) {
      return x.INVENTORY_KSN == y.INVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_919INVENTORY1_P_2_map_0;
  
  struct __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_926INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_927INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_928INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_929INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_930INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_931INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_932INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_933INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_934INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_935INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_936INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_937INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_938INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_939INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_940INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_941INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_942INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_943INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_944INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_945INVENTORY1_P_1_map_01;
  
  struct __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry {
    long INVENTORY_LOCN; long INVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry* nxt; __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry() : nxt(nullptr), prv(nullptr) { /*INVENTORY_LOCN = 0L; INVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry(const long c0, const long c1, const long c2) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry(const __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry& other) : INVENTORY_LOCN( other.INVENTORY_LOCN ), INVENTORY_DATEID( other.INVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry& modify(const long c0, const long c1) { INVENTORY_LOCN = c0; INVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, INVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.INVENTORY_LOCN);
      hash_combine(h, e.INVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry& x, const __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry& y) {
      return x.INVENTORY_LOCN == y.INVENTORY_LOCN && x.INVENTORY_DATEID == y.INVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry, long, __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_946INVENTORY1_P_1_map_01;
  
  
  
  /* Type definition providing a way to access the results of the sql program */
  struct tlq_t {
    struct timeval t0, t; long tT, tN, tS;
    tlq_t(): tN(0), tS(0) , __SQL_SUM_AGGREGATE_1(0.0), __SQL_SUM_AGGREGATE_2(0.0), __SQL_SUM_AGGREGATE_3(0.0), __SQL_SUM_AGGREGATE_4(0.0), __SQL_SUM_AGGREGATE_5(0.0), __SQL_SUM_AGGREGATE_6(0.0), __SQL_SUM_AGGREGATE_7(0.0), __SQL_SUM_AGGREGATE_8(0.0), __SQL_SUM_AGGREGATE_9(0.0), __SQL_SUM_AGGREGATE_10(0.0), __SQL_SUM_AGGREGATE_11(0.0), __SQL_SUM_AGGREGATE_12(0.0), __SQL_SUM_AGGREGATE_13(0.0), __SQL_SUM_AGGREGATE_14(0.0), __SQL_SUM_AGGREGATE_15(0.0), __SQL_SUM_AGGREGATE_16(0.0), __SQL_SUM_AGGREGATE_17(0.0), __SQL_SUM_AGGREGATE_18(0.0), __SQL_SUM_AGGREGATE_19(0.0), __SQL_SUM_AGGREGATE_20(0.0), __SQL_SUM_AGGREGATE_21(0.0), __SQL_SUM_AGGREGATE_22(0.0), __SQL_SUM_AGGREGATE_23(0.0), __SQL_SUM_AGGREGATE_24(0.0), __SQL_SUM_AGGREGATE_25(0.0), __SQL_SUM_AGGREGATE_26(0.0), __SQL_SUM_AGGREGATE_27(0.0), __SQL_SUM_AGGREGATE_28(0.0), __SQL_SUM_AGGREGATE_29(0.0), __SQL_SUM_AGGREGATE_30(0.0), __SQL_SUM_AGGREGATE_31(0.0), __SQL_SUM_AGGREGATE_32(0.0), __SQL_SUM_AGGREGATE_33(0.0), __SQL_SUM_AGGREGATE_34(0.0), __SQL_SUM_AGGREGATE_35(0.0), __SQL_SUM_AGGREGATE_36(0.0), __SQL_SUM_AGGREGATE_37(0.0), __SQL_SUM_AGGREGATE_38(0.0), __SQL_SUM_AGGREGATE_39(0.0), __SQL_SUM_AGGREGATE_40(0.0), __SQL_SUM_AGGREGATE_41(0.0), __SQL_SUM_AGGREGATE_42(0.0), __SQL_SUM_AGGREGATE_43(0.0), __SQL_SUM_AGGREGATE_44(0L), __SQL_SUM_AGGREGATE_45(0L), __SQL_SUM_AGGREGATE_46(0.0), __SQL_SUM_AGGREGATE_47(0L), __SQL_SUM_AGGREGATE_48(0.0), __SQL_SUM_AGGREGATE_49(0.0), __SQL_SUM_AGGREGATE_50(0.0), __SQL_SUM_AGGREGATE_51(0.0), __SQL_SUM_AGGREGATE_52(0.0), __SQL_SUM_AGGREGATE_53(0.0), __SQL_SUM_AGGREGATE_54(0.0), __SQL_SUM_AGGREGATE_55(0.0), __SQL_SUM_AGGREGATE_56(0.0), __SQL_SUM_AGGREGATE_57(0.0), __SQL_SUM_AGGREGATE_58(0.0), __SQL_SUM_AGGREGATE_59(0.0), __SQL_SUM_AGGREGATE_60(0.0), __SQL_SUM_AGGREGATE_61(0L), __SQL_SUM_AGGREGATE_62(0L), __SQL_SUM_AGGREGATE_63(0L), __SQL_SUM_AGGREGATE_64(0L), __SQL_SUM_AGGREGATE_65(0L), __SQL_SUM_AGGREGATE_66(0.0), __SQL_SUM_AGGREGATE_67(0L), __SQL_SUM_AGGREGATE_68(0L), __SQL_SUM_AGGREGATE_69(0L), __SQL_SUM_AGGREGATE_70(0L), __SQL_SUM_AGGREGATE_71(0L), __SQL_SUM_AGGREGATE_72(0L), __SQL_SUM_AGGREGATE_73(0L), __SQL_SUM_AGGREGATE_74(0L), __SQL_SUM_AGGREGATE_75(0L), __SQL_SUM_AGGREGATE_76(0L), __SQL_SUM_AGGREGATE_77(0L), __SQL_SUM_AGGREGATE_78(0L), __SQL_SUM_AGGREGATE_79(0.0), __SQL_SUM_AGGREGATE_80(0L), __SQL_SUM_AGGREGATE_81(0L), __SQL_SUM_AGGREGATE_82(0L), __SQL_SUM_AGGREGATE_83(0L), __SQL_SUM_AGGREGATE_84(0.0), __SQL_SUM_AGGREGATE_85(0L), __SQL_SUM_AGGREGATE_86(0L), __SQL_SUM_AGGREGATE_87(0.0), __SQL_SUM_AGGREGATE_88(0L), __SQL_SUM_AGGREGATE_89(0.0), __SQL_SUM_AGGREGATE_90(0.0), __SQL_SUM_AGGREGATE_91(0.0), __SQL_SUM_AGGREGATE_92(0.0), __SQL_SUM_AGGREGATE_93(0.0), __SQL_SUM_AGGREGATE_94(0.0), __SQL_SUM_AGGREGATE_95(0.0), __SQL_SUM_AGGREGATE_96(0.0), __SQL_SUM_AGGREGATE_97(0.0), __SQL_SUM_AGGREGATE_98(0.0), __SQL_SUM_AGGREGATE_99(0.0), __SQL_SUM_AGGREGATE_100(0.0), __SQL_SUM_AGGREGATE_101(0.0), __SQL_SUM_AGGREGATE_102(0L), __SQL_SUM_AGGREGATE_103(0L), __SQL_SUM_AGGREGATE_104(0L), __SQL_SUM_AGGREGATE_105(0L), __SQL_SUM_AGGREGATE_106(0L), __SQL_SUM_AGGREGATE_107(0.0), __SQL_SUM_AGGREGATE_108(0L), __SQL_SUM_AGGREGATE_109(0L), __SQL_SUM_AGGREGATE_110(0L), __SQL_SUM_AGGREGATE_111(0L), __SQL_SUM_AGGREGATE_112(0L), __SQL_SUM_AGGREGATE_113(0L), __SQL_SUM_AGGREGATE_114(0L), __SQL_SUM_AGGREGATE_115(0L), __SQL_SUM_AGGREGATE_116(0L), __SQL_SUM_AGGREGATE_117(0L), __SQL_SUM_AGGREGATE_118(0L), __SQL_SUM_AGGREGATE_119(0L), __SQL_SUM_AGGREGATE_120(0.0), __SQL_SUM_AGGREGATE_121(0L), __SQL_SUM_AGGREGATE_122(0L), __SQL_SUM_AGGREGATE_123(0L), __SQL_SUM_AGGREGATE_124(0L), __SQL_SUM_AGGREGATE_125(0.0), __SQL_SUM_AGGREGATE_126(0L), __SQL_SUM_AGGREGATE_127(0.0), __SQL_SUM_AGGREGATE_128(0.0), __SQL_SUM_AGGREGATE_129(0.0), __SQL_SUM_AGGREGATE_130(0.0), __SQL_SUM_AGGREGATE_131(0.0), __SQL_SUM_AGGREGATE_132(0.0), __SQL_SUM_AGGREGATE_133(0.0), __SQL_SUM_AGGREGATE_134(0.0), __SQL_SUM_AGGREGATE_135(0.0), __SQL_SUM_AGGREGATE_136(0.0), __SQL_SUM_AGGREGATE_137(0.0), __SQL_SUM_AGGREGATE_138(0.0), __SQL_SUM_AGGREGATE_139(0.0), __SQL_SUM_AGGREGATE_140(0.0), __SQL_SUM_AGGREGATE_141(0.0), __SQL_SUM_AGGREGATE_142(0.0), __SQL_SUM_AGGREGATE_143(0.0), __SQL_SUM_AGGREGATE_144(0.0), __SQL_SUM_AGGREGATE_145(0.0), __SQL_SUM_AGGREGATE_146(0.0), __SQL_SUM_AGGREGATE_147(0.0), __SQL_SUM_AGGREGATE_148(0.0), __SQL_SUM_AGGREGATE_149(0.0), __SQL_SUM_AGGREGATE_150(0.0), __SQL_SUM_AGGREGATE_151(0.0), __SQL_SUM_AGGREGATE_152(0.0), __SQL_SUM_AGGREGATE_153(0.0), __SQL_SUM_AGGREGATE_154(0.0), __SQL_SUM_AGGREGATE_155(0.0), __SQL_SUM_AGGREGATE_156(0.0), __SQL_SUM_AGGREGATE_157(0.0), __SQL_SUM_AGGREGATE_158(0.0), __SQL_SUM_AGGREGATE_159(0.0), __SQL_SUM_AGGREGATE_160(0.0), __SQL_SUM_AGGREGATE_161(0.0), __SQL_SUM_AGGREGATE_162(0.0), __SQL_SUM_AGGREGATE_163(0.0), __SQL_SUM_AGGREGATE_164(0.0), __SQL_SUM_AGGREGATE_165(0.0), __SQL_SUM_AGGREGATE_166(0.0), __SQL_SUM_AGGREGATE_167(0L), __SQL_SUM_AGGREGATE_168(0.0), __SQL_SUM_AGGREGATE_169(0.0), __SQL_SUM_AGGREGATE_170(0.0), __SQL_SUM_AGGREGATE_171(0.0), __SQL_SUM_AGGREGATE_172(0.0), __SQL_SUM_AGGREGATE_173(0.0), __SQL_SUM_AGGREGATE_174(0.0), __SQL_SUM_AGGREGATE_175(0.0), __SQL_SUM_AGGREGATE_176(0.0), __SQL_SUM_AGGREGATE_177(0.0), __SQL_SUM_AGGREGATE_178(0.0), __SQL_SUM_AGGREGATE_179(0.0), __SQL_SUM_AGGREGATE_180(0.0), __SQL_SUM_AGGREGATE_181(0L), __SQL_SUM_AGGREGATE_182(0L), __SQL_SUM_AGGREGATE_183(0L), __SQL_SUM_AGGREGATE_184(0L), __SQL_SUM_AGGREGATE_185(0L), __SQL_SUM_AGGREGATE_186(0.0), __SQL_SUM_AGGREGATE_187(0L), __SQL_SUM_AGGREGATE_188(0L), __SQL_SUM_AGGREGATE_189(0L), __SQL_SUM_AGGREGATE_190(0L), __SQL_SUM_AGGREGATE_191(0L), __SQL_SUM_AGGREGATE_192(0L), __SQL_SUM_AGGREGATE_193(0L), __SQL_SUM_AGGREGATE_194(0L), __SQL_SUM_AGGREGATE_195(0L), __SQL_SUM_AGGREGATE_196(0L), __SQL_SUM_AGGREGATE_197(0L), __SQL_SUM_AGGREGATE_198(0L), __SQL_SUM_AGGREGATE_199(0.0), __SQL_SUM_AGGREGATE_200(0L), __SQL_SUM_AGGREGATE_201(0L), __SQL_SUM_AGGREGATE_202(0L), __SQL_SUM_AGGREGATE_203(0L), __SQL_SUM_AGGREGATE_204(0.0), __SQL_SUM_AGGREGATE_205(0L), __SQL_SUM_AGGREGATE_206(0.0), __SQL_SUM_AGGREGATE_207(0.0), __SQL_SUM_AGGREGATE_208(0.0), __SQL_SUM_AGGREGATE_209(0.0), __SQL_SUM_AGGREGATE_210(0.0), __SQL_SUM_AGGREGATE_211(0.0), __SQL_SUM_AGGREGATE_212(0.0), __SQL_SUM_AGGREGATE_213(0.0), __SQL_SUM_AGGREGATE_214(0.0), __SQL_SUM_AGGREGATE_215(0.0), __SQL_SUM_AGGREGATE_216(0.0), __SQL_SUM_AGGREGATE_217(0.0), __SQL_SUM_AGGREGATE_218(0.0), __SQL_SUM_AGGREGATE_219(0.0), __SQL_SUM_AGGREGATE_220(0.0), __SQL_SUM_AGGREGATE_221(0.0), __SQL_SUM_AGGREGATE_222(0.0), __SQL_SUM_AGGREGATE_223(0.0), __SQL_SUM_AGGREGATE_224(0.0), __SQL_SUM_AGGREGATE_225(0.0), __SQL_SUM_AGGREGATE_226(0.0), __SQL_SUM_AGGREGATE_227(0.0), __SQL_SUM_AGGREGATE_228(0.0), __SQL_SUM_AGGREGATE_229(0.0), __SQL_SUM_AGGREGATE_230(0.0), __SQL_SUM_AGGREGATE_231(0.0), __SQL_SUM_AGGREGATE_232(0.0), __SQL_SUM_AGGREGATE_233(0.0), __SQL_SUM_AGGREGATE_234(0.0), __SQL_SUM_AGGREGATE_235(0.0), __SQL_SUM_AGGREGATE_236(0.0), __SQL_SUM_AGGREGATE_237(0.0), __SQL_SUM_AGGREGATE_238(0.0), __SQL_SUM_AGGREGATE_239(0.0), __SQL_SUM_AGGREGATE_240(0.0), __SQL_SUM_AGGREGATE_241(0.0), __SQL_SUM_AGGREGATE_242(0.0), __SQL_SUM_AGGREGATE_243(0.0), __SQL_SUM_AGGREGATE_244(0.0), __SQL_SUM_AGGREGATE_245(0.0), __SQL_SUM_AGGREGATE_246(0.0), __SQL_SUM_AGGREGATE_247(0.0), __SQL_SUM_AGGREGATE_248(0.0), __SQL_SUM_AGGREGATE_249(0.0), __SQL_SUM_AGGREGATE_250(0.0), __SQL_SUM_AGGREGATE_251(0.0), __SQL_SUM_AGGREGATE_252(0.0), __SQL_SUM_AGGREGATE_253(0.0), __SQL_SUM_AGGREGATE_254(0.0), __SQL_SUM_AGGREGATE_255(0.0), __SQL_SUM_AGGREGATE_256(0.0), __SQL_SUM_AGGREGATE_257(0.0), __SQL_SUM_AGGREGATE_258(0.0), __SQL_SUM_AGGREGATE_259(0.0), __SQL_SUM_AGGREGATE_260(0.0), __SQL_SUM_AGGREGATE_261(0.0), __SQL_SUM_AGGREGATE_262(0.0), __SQL_SUM_AGGREGATE_263(0.0), __SQL_SUM_AGGREGATE_264(0.0), __SQL_SUM_AGGREGATE_265(0.0), __SQL_SUM_AGGREGATE_266(0.0), __SQL_SUM_AGGREGATE_267(0.0), __SQL_SUM_AGGREGATE_268(0.0), __SQL_SUM_AGGREGATE_269(0.0), __SQL_SUM_AGGREGATE_270(0.0), __SQL_SUM_AGGREGATE_271(0.0), __SQL_SUM_AGGREGATE_272(0.0), __SQL_SUM_AGGREGATE_273(0.0), __SQL_SUM_AGGREGATE_274(0.0), __SQL_SUM_AGGREGATE_275(0.0), __SQL_SUM_AGGREGATE_276(0.0), __SQL_SUM_AGGREGATE_277(0.0), __SQL_SUM_AGGREGATE_278(0.0), __SQL_SUM_AGGREGATE_279(0.0), __SQL_SUM_AGGREGATE_280(0.0), __SQL_SUM_AGGREGATE_281(0.0), __SQL_SUM_AGGREGATE_282(0.0), __SQL_SUM_AGGREGATE_283(0.0), __SQL_SUM_AGGREGATE_284(0.0), __SQL_SUM_AGGREGATE_285(0.0), __SQL_SUM_AGGREGATE_286(0.0), __SQL_SUM_AGGREGATE_287(0.0), __SQL_SUM_AGGREGATE_288(0.0), __SQL_SUM_AGGREGATE_289(0.0), __SQL_SUM_AGGREGATE_290(0.0), __SQL_SUM_AGGREGATE_291(0.0), __SQL_SUM_AGGREGATE_292(0.0), __SQL_SUM_AGGREGATE_293(0.0), __SQL_SUM_AGGREGATE_294(0.0), __SQL_SUM_AGGREGATE_295(0.0), __SQL_SUM_AGGREGATE_296(0.0), __SQL_SUM_AGGREGATE_297(0.0), __SQL_SUM_AGGREGATE_298(0.0), __SQL_SUM_AGGREGATE_299(0.0), __SQL_SUM_AGGREGATE_300(0.0), __SQL_SUM_AGGREGATE_301(0.0), __SQL_SUM_AGGREGATE_302(0.0), __SQL_SUM_AGGREGATE_303(0.0), __SQL_SUM_AGGREGATE_304(0.0), __SQL_SUM_AGGREGATE_305(0.0), __SQL_SUM_AGGREGATE_306(0.0), __SQL_SUM_AGGREGATE_307(0.0), __SQL_SUM_AGGREGATE_308(0.0), __SQL_SUM_AGGREGATE_309(0.0), __SQL_SUM_AGGREGATE_310(0.0), __SQL_SUM_AGGREGATE_311(0.0), __SQL_SUM_AGGREGATE_312(0.0), __SQL_SUM_AGGREGATE_313(0.0), __SQL_SUM_AGGREGATE_314(0.0), __SQL_SUM_AGGREGATE_315(0.0), __SQL_SUM_AGGREGATE_316(0.0), __SQL_SUM_AGGREGATE_317(0.0), __SQL_SUM_AGGREGATE_318(0.0), __SQL_SUM_AGGREGATE_319(0.0), __SQL_SUM_AGGREGATE_320(0.0), __SQL_SUM_AGGREGATE_321(0.0), __SQL_SUM_AGGREGATE_322(0.0), __SQL_SUM_AGGREGATE_323(0.0), __SQL_SUM_AGGREGATE_324(0.0), __SQL_SUM_AGGREGATE_325(0.0), __SQL_SUM_AGGREGATE_326(0.0), __SQL_SUM_AGGREGATE_327(0.0), __SQL_SUM_AGGREGATE_328(0.0), __SQL_SUM_AGGREGATE_329(0.0), __SQL_SUM_AGGREGATE_330(0.0), __SQL_SUM_AGGREGATE_331(0.0), __SQL_SUM_AGGREGATE_332(0.0), __SQL_SUM_AGGREGATE_333(0.0), __SQL_SUM_AGGREGATE_334(0.0), __SQL_SUM_AGGREGATE_335(0.0), __SQL_SUM_AGGREGATE_336(0.0), __SQL_SUM_AGGREGATE_337(0.0), __SQL_SUM_AGGREGATE_338(0.0), __SQL_SUM_AGGREGATE_339(0.0), __SQL_SUM_AGGREGATE_340(0.0), __SQL_SUM_AGGREGATE_341(0.0), __SQL_SUM_AGGREGATE_342(0.0), __SQL_SUM_AGGREGATE_343(0.0), __SQL_SUM_AGGREGATE_344(0.0), __SQL_SUM_AGGREGATE_345(0.0), __SQL_SUM_AGGREGATE_346(0.0), __SQL_SUM_AGGREGATE_347(0.0), __SQL_SUM_AGGREGATE_348(0.0), __SQL_SUM_AGGREGATE_349(0.0), __SQL_SUM_AGGREGATE_350(0.0), __SQL_SUM_AGGREGATE_351(0.0), __SQL_SUM_AGGREGATE_352(0.0), __SQL_SUM_AGGREGATE_353(0.0), __SQL_SUM_AGGREGATE_354(0.0), __SQL_SUM_AGGREGATE_355(0.0), __SQL_SUM_AGGREGATE_356(0.0), __SQL_SUM_AGGREGATE_357(0.0), __SQL_SUM_AGGREGATE_358(0.0), __SQL_SUM_AGGREGATE_359(0.0), __SQL_SUM_AGGREGATE_360(0.0), __SQL_SUM_AGGREGATE_361(0.0), __SQL_SUM_AGGREGATE_362(0.0), __SQL_SUM_AGGREGATE_363(0.0), __SQL_SUM_AGGREGATE_364(0.0), __SQL_SUM_AGGREGATE_365(0.0), __SQL_SUM_AGGREGATE_366(0.0), __SQL_SUM_AGGREGATE_367(0.0), __SQL_SUM_AGGREGATE_368(0.0), __SQL_SUM_AGGREGATE_369(0.0), __SQL_SUM_AGGREGATE_370(0.0), __SQL_SUM_AGGREGATE_371(0.0), __SQL_SUM_AGGREGATE_372(0.0), __SQL_SUM_AGGREGATE_373(0.0), __SQL_SUM_AGGREGATE_374(0.0), __SQL_SUM_AGGREGATE_375(0.0), __SQL_SUM_AGGREGATE_376(0.0), __SQL_SUM_AGGREGATE_377(0.0), __SQL_SUM_AGGREGATE_378(0.0), __SQL_SUM_AGGREGATE_379(0.0), __SQL_SUM_AGGREGATE_380(0.0), __SQL_SUM_AGGREGATE_381(0.0), __SQL_SUM_AGGREGATE_382(0.0), __SQL_SUM_AGGREGATE_383(0.0), __SQL_SUM_AGGREGATE_384(0.0), __SQL_SUM_AGGREGATE_385(0.0), __SQL_SUM_AGGREGATE_386(0.0), __SQL_SUM_AGGREGATE_387(0.0), __SQL_SUM_AGGREGATE_388(0.0), __SQL_SUM_AGGREGATE_389(0.0), __SQL_SUM_AGGREGATE_390(0.0), __SQL_SUM_AGGREGATE_391(0.0), __SQL_SUM_AGGREGATE_392(0.0), __SQL_SUM_AGGREGATE_393(0.0), __SQL_SUM_AGGREGATE_394(0.0), __SQL_SUM_AGGREGATE_395(0.0), __SQL_SUM_AGGREGATE_396(0.0), __SQL_SUM_AGGREGATE_397(0.0), __SQL_SUM_AGGREGATE_398(0.0), __SQL_SUM_AGGREGATE_399(0.0), __SQL_SUM_AGGREGATE_400(0.0), __SQL_SUM_AGGREGATE_401(0.0), __SQL_SUM_AGGREGATE_402(0.0), __SQL_SUM_AGGREGATE_403(0.0), __SQL_SUM_AGGREGATE_404(0.0), __SQL_SUM_AGGREGATE_405(0.0), __SQL_SUM_AGGREGATE_406(0.0), __SQL_SUM_AGGREGATE_407(0.0), __SQL_SUM_AGGREGATE_408(0.0), __SQL_SUM_AGGREGATE_409(0.0), __SQL_SUM_AGGREGATE_410(0.0), __SQL_SUM_AGGREGATE_411(0.0), __SQL_SUM_AGGREGATE_412(0.0), __SQL_SUM_AGGREGATE_413(0.0), __SQL_SUM_AGGREGATE_414(0.0), __SQL_SUM_AGGREGATE_415(0.0), __SQL_SUM_AGGREGATE_416(0.0), __SQL_SUM_AGGREGATE_417(0.0), __SQL_SUM_AGGREGATE_418(0.0), __SQL_SUM_AGGREGATE_419(0.0), __SQL_SUM_AGGREGATE_420(0.0), __SQL_SUM_AGGREGATE_421(0.0), __SQL_SUM_AGGREGATE_422(0.0), __SQL_SUM_AGGREGATE_423(0.0), __SQL_SUM_AGGREGATE_424(0.0), __SQL_SUM_AGGREGATE_425(0.0), __SQL_SUM_AGGREGATE_426(0.0), __SQL_SUM_AGGREGATE_427(0.0), __SQL_SUM_AGGREGATE_428(0.0), __SQL_SUM_AGGREGATE_429(0.0), __SQL_SUM_AGGREGATE_430(0.0), __SQL_SUM_AGGREGATE_431(0.0), __SQL_SUM_AGGREGATE_432(0.0), __SQL_SUM_AGGREGATE_433(0.0), __SQL_SUM_AGGREGATE_434(0.0), __SQL_SUM_AGGREGATE_435(0.0), __SQL_SUM_AGGREGATE_436(0.0), __SQL_SUM_AGGREGATE_437(0.0), __SQL_SUM_AGGREGATE_438(0.0), __SQL_SUM_AGGREGATE_439(0.0), __SQL_SUM_AGGREGATE_440(0.0), __SQL_SUM_AGGREGATE_441(0.0), __SQL_SUM_AGGREGATE_442(0.0), __SQL_SUM_AGGREGATE_443(0.0), __SQL_SUM_AGGREGATE_444(0.0), __SQL_SUM_AGGREGATE_445(0.0), __SQL_SUM_AGGREGATE_446(0.0), __SQL_SUM_AGGREGATE_447(0.0), __SQL_SUM_AGGREGATE_448(0.0), __SQL_SUM_AGGREGATE_449(0.0), __SQL_SUM_AGGREGATE_450(0.0), __SQL_SUM_AGGREGATE_451(0.0), __SQL_SUM_AGGREGATE_452(0.0), __SQL_SUM_AGGREGATE_453(0.0), __SQL_SUM_AGGREGATE_454(0.0), __SQL_SUM_AGGREGATE_455(0.0), __SQL_SUM_AGGREGATE_456(0.0), __SQL_SUM_AGGREGATE_457(0.0), __SQL_SUM_AGGREGATE_458(0.0), __SQL_SUM_AGGREGATE_459(0.0), __SQL_SUM_AGGREGATE_460(0.0), __SQL_SUM_AGGREGATE_461(0.0), __SQL_SUM_AGGREGATE_462(0.0), __SQL_SUM_AGGREGATE_463(0.0), __SQL_SUM_AGGREGATE_464(0.0), __SQL_SUM_AGGREGATE_465(0.0), __SQL_SUM_AGGREGATE_466(0.0), __SQL_SUM_AGGREGATE_467(0.0), __SQL_SUM_AGGREGATE_468(0.0), __SQL_SUM_AGGREGATE_469(0.0), __SQL_SUM_AGGREGATE_470(0.0), __SQL_SUM_AGGREGATE_471(0.0), __SQL_SUM_AGGREGATE_472(0.0), __SQL_SUM_AGGREGATE_473(0.0), __SQL_SUM_AGGREGATE_474(0.0), __SQL_SUM_AGGREGATE_475(0.0), __SQL_SUM_AGGREGATE_476(0.0), __SQL_SUM_AGGREGATE_477(0.0), __SQL_SUM_AGGREGATE_478(0.0), __SQL_SUM_AGGREGATE_479(0.0), __SQL_SUM_AGGREGATE_480(0.0), __SQL_SUM_AGGREGATE_481(0.0), __SQL_SUM_AGGREGATE_482(0.0), __SQL_SUM_AGGREGATE_483(0.0), __SQL_SUM_AGGREGATE_484(0.0), __SQL_SUM_AGGREGATE_485(0.0), __SQL_SUM_AGGREGATE_486(0.0), __SQL_SUM_AGGREGATE_487(0.0), __SQL_SUM_AGGREGATE_488(0.0), __SQL_SUM_AGGREGATE_489(0.0), __SQL_SUM_AGGREGATE_490(0.0), __SQL_SUM_AGGREGATE_491(0.0), __SQL_SUM_AGGREGATE_492(0.0), __SQL_SUM_AGGREGATE_493(0.0), __SQL_SUM_AGGREGATE_494(0.0), __SQL_SUM_AGGREGATE_495(0.0), __SQL_SUM_AGGREGATE_496(0.0), __SQL_SUM_AGGREGATE_497(0.0), __SQL_SUM_AGGREGATE_498(0.0), __SQL_SUM_AGGREGATE_499(0.0), __SQL_SUM_AGGREGATE_500(0.0), __SQL_SUM_AGGREGATE_501(0.0), __SQL_SUM_AGGREGATE_502(0.0), __SQL_SUM_AGGREGATE_503(0.0), __SQL_SUM_AGGREGATE_504(0.0), __SQL_SUM_AGGREGATE_505(0.0), __SQL_SUM_AGGREGATE_506(0.0), __SQL_SUM_AGGREGATE_507(0.0), __SQL_SUM_AGGREGATE_508(0.0), __SQL_SUM_AGGREGATE_509(0.0), __SQL_SUM_AGGREGATE_510(0.0), __SQL_SUM_AGGREGATE_511(0.0), __SQL_SUM_AGGREGATE_512(0.0), __SQL_SUM_AGGREGATE_513(0.0), __SQL_SUM_AGGREGATE_514(0.0), __SQL_SUM_AGGREGATE_515(0.0), __SQL_SUM_AGGREGATE_516(0.0), __SQL_SUM_AGGREGATE_517(0.0), __SQL_SUM_AGGREGATE_518(0.0), __SQL_SUM_AGGREGATE_519(0.0), __SQL_SUM_AGGREGATE_520(0.0), __SQL_SUM_AGGREGATE_521(0.0), __SQL_SUM_AGGREGATE_522(0.0), __SQL_SUM_AGGREGATE_523(0.0), __SQL_SUM_AGGREGATE_524(0.0), __SQL_SUM_AGGREGATE_525(0.0), __SQL_SUM_AGGREGATE_526(0.0), __SQL_SUM_AGGREGATE_527(0.0), __SQL_SUM_AGGREGATE_528(0.0), __SQL_SUM_AGGREGATE_529(0.0), __SQL_SUM_AGGREGATE_530(0.0), __SQL_SUM_AGGREGATE_531(0.0), __SQL_SUM_AGGREGATE_532(0.0), __SQL_SUM_AGGREGATE_533(0.0), __SQL_SUM_AGGREGATE_534(0.0), __SQL_SUM_AGGREGATE_535(0.0), __SQL_SUM_AGGREGATE_536(0.0), __SQL_SUM_AGGREGATE_537(0.0), __SQL_SUM_AGGREGATE_538(0.0), __SQL_SUM_AGGREGATE_539(0.0), __SQL_SUM_AGGREGATE_540(0.0), __SQL_SUM_AGGREGATE_541(0.0), __SQL_SUM_AGGREGATE_542(0.0), __SQL_SUM_AGGREGATE_543(0.0), __SQL_SUM_AGGREGATE_544(0.0), __SQL_SUM_AGGREGATE_545(0.0), __SQL_SUM_AGGREGATE_546(0.0), __SQL_SUM_AGGREGATE_547(0.0), __SQL_SUM_AGGREGATE_548(0.0), __SQL_SUM_AGGREGATE_549(0.0), __SQL_SUM_AGGREGATE_550(0.0), __SQL_SUM_AGGREGATE_551(0.0), __SQL_SUM_AGGREGATE_552(0.0), __SQL_SUM_AGGREGATE_553(0.0), __SQL_SUM_AGGREGATE_554(0.0), __SQL_SUM_AGGREGATE_555(0.0), __SQL_SUM_AGGREGATE_556(0.0), __SQL_SUM_AGGREGATE_557(0.0), __SQL_SUM_AGGREGATE_558(0.0), __SQL_SUM_AGGREGATE_559(0.0), __SQL_SUM_AGGREGATE_560(0.0), __SQL_SUM_AGGREGATE_561(0.0), __SQL_SUM_AGGREGATE_562(0.0), __SQL_SUM_AGGREGATE_563(0.0), __SQL_SUM_AGGREGATE_564(0.0), __SQL_SUM_AGGREGATE_565(0.0), __SQL_SUM_AGGREGATE_566(0.0), __SQL_SUM_AGGREGATE_567(0.0), __SQL_SUM_AGGREGATE_568(0.0), __SQL_SUM_AGGREGATE_569(0.0), __SQL_SUM_AGGREGATE_570(0.0), __SQL_SUM_AGGREGATE_571(0.0), __SQL_SUM_AGGREGATE_572(0.0), __SQL_SUM_AGGREGATE_573(0.0), __SQL_SUM_AGGREGATE_574(0.0), __SQL_SUM_AGGREGATE_575(0.0), __SQL_SUM_AGGREGATE_576(0.0), __SQL_SUM_AGGREGATE_577(0.0), __SQL_SUM_AGGREGATE_578(0.0), __SQL_SUM_AGGREGATE_579(0.0), __SQL_SUM_AGGREGATE_580(0.0), __SQL_SUM_AGGREGATE_581(0.0), __SQL_SUM_AGGREGATE_582(0.0), __SQL_SUM_AGGREGATE_583(0.0), __SQL_SUM_AGGREGATE_584(0.0), __SQL_SUM_AGGREGATE_585(0.0), __SQL_SUM_AGGREGATE_586(0.0), __SQL_SUM_AGGREGATE_587(0.0), __SQL_SUM_AGGREGATE_588(0.0), __SQL_SUM_AGGREGATE_589(0.0), __SQL_SUM_AGGREGATE_590(0.0), __SQL_SUM_AGGREGATE_591(0.0), __SQL_SUM_AGGREGATE_592(0.0), __SQL_SUM_AGGREGATE_593(0.0), __SQL_SUM_AGGREGATE_594(0.0), __SQL_SUM_AGGREGATE_595(0.0), __SQL_SUM_AGGREGATE_596(0.0), __SQL_SUM_AGGREGATE_597(0.0), __SQL_SUM_AGGREGATE_598(0.0), __SQL_SUM_AGGREGATE_599(0.0), __SQL_SUM_AGGREGATE_600(0.0), __SQL_SUM_AGGREGATE_601(0.0), __SQL_SUM_AGGREGATE_602(0.0), __SQL_SUM_AGGREGATE_603(0.0), __SQL_SUM_AGGREGATE_604(0.0), __SQL_SUM_AGGREGATE_605(0.0), __SQL_SUM_AGGREGATE_606(0.0), __SQL_SUM_AGGREGATE_607(0.0), __SQL_SUM_AGGREGATE_608(0.0), __SQL_SUM_AGGREGATE_609(0.0), __SQL_SUM_AGGREGATE_610(0.0), __SQL_SUM_AGGREGATE_611(0.0), __SQL_SUM_AGGREGATE_612(0.0), __SQL_SUM_AGGREGATE_613(0.0), __SQL_SUM_AGGREGATE_614(0.0), __SQL_SUM_AGGREGATE_615(0.0), __SQL_SUM_AGGREGATE_616(0.0), __SQL_SUM_AGGREGATE_617(0.0), __SQL_SUM_AGGREGATE_618(0.0), __SQL_SUM_AGGREGATE_619(0.0), __SQL_SUM_AGGREGATE_620(0.0), __SQL_SUM_AGGREGATE_621(0.0), __SQL_SUM_AGGREGATE_622(0L), __SQL_SUM_AGGREGATE_623(0L), __SQL_SUM_AGGREGATE_624(0L), __SQL_SUM_AGGREGATE_625(0L), __SQL_SUM_AGGREGATE_626(0L), __SQL_SUM_AGGREGATE_627(0.0), __SQL_SUM_AGGREGATE_628(0L), __SQL_SUM_AGGREGATE_629(0L), __SQL_SUM_AGGREGATE_630(0L), __SQL_SUM_AGGREGATE_631(0L), __SQL_SUM_AGGREGATE_632(0L), __SQL_SUM_AGGREGATE_633(0L), __SQL_SUM_AGGREGATE_634(0L), __SQL_SUM_AGGREGATE_635(0L), __SQL_SUM_AGGREGATE_636(0L), __SQL_SUM_AGGREGATE_637(0L), __SQL_SUM_AGGREGATE_638(0L), __SQL_SUM_AGGREGATE_639(0L), __SQL_SUM_AGGREGATE_640(0.0), __SQL_SUM_AGGREGATE_641(0L), __SQL_SUM_AGGREGATE_642(0L), __SQL_SUM_AGGREGATE_643(0L), __SQL_SUM_AGGREGATE_644(0L), __SQL_SUM_AGGREGATE_645(0.0), __SQL_SUM_AGGREGATE_646(0L), __SQL_SUM_AGGREGATE_647(0L), __SQL_SUM_AGGREGATE_648(0L), __SQL_SUM_AGGREGATE_649(0L), __SQL_SUM_AGGREGATE_650(0L), __SQL_SUM_AGGREGATE_651(0.0), __SQL_SUM_AGGREGATE_652(0L), __SQL_SUM_AGGREGATE_653(0L), __SQL_SUM_AGGREGATE_654(0L), __SQL_SUM_AGGREGATE_655(0L), __SQL_SUM_AGGREGATE_656(0L), __SQL_SUM_AGGREGATE_657(0L), __SQL_SUM_AGGREGATE_658(0L), __SQL_SUM_AGGREGATE_659(0L), __SQL_SUM_AGGREGATE_660(0L), __SQL_SUM_AGGREGATE_661(0L), __SQL_SUM_AGGREGATE_662(0L), __SQL_SUM_AGGREGATE_663(0L), __SQL_SUM_AGGREGATE_664(0.0), __SQL_SUM_AGGREGATE_665(0L), __SQL_SUM_AGGREGATE_666(0L), __SQL_SUM_AGGREGATE_667(0L), __SQL_SUM_AGGREGATE_668(0L), __SQL_SUM_AGGREGATE_669(0.0), __SQL_SUM_AGGREGATE_670(0L), __SQL_SUM_AGGREGATE_671(0L), __SQL_SUM_AGGREGATE_672(0L), __SQL_SUM_AGGREGATE_673(0L), __SQL_SUM_AGGREGATE_674(0.0), __SQL_SUM_AGGREGATE_675(0L), __SQL_SUM_AGGREGATE_676(0L), __SQL_SUM_AGGREGATE_677(0L), __SQL_SUM_AGGREGATE_678(0L), __SQL_SUM_AGGREGATE_679(0L), __SQL_SUM_AGGREGATE_680(0L), __SQL_SUM_AGGREGATE_681(0L), __SQL_SUM_AGGREGATE_682(0L), __SQL_SUM_AGGREGATE_683(0L), __SQL_SUM_AGGREGATE_684(0L), __SQL_SUM_AGGREGATE_685(0L), __SQL_SUM_AGGREGATE_686(0L), __SQL_SUM_AGGREGATE_687(0.0), __SQL_SUM_AGGREGATE_688(0L), __SQL_SUM_AGGREGATE_689(0L), __SQL_SUM_AGGREGATE_690(0L), __SQL_SUM_AGGREGATE_691(0L), __SQL_SUM_AGGREGATE_692(0.0), __SQL_SUM_AGGREGATE_693(0L), __SQL_SUM_AGGREGATE_694(0L), __SQL_SUM_AGGREGATE_695(0L), __SQL_SUM_AGGREGATE_696(0.0), __SQL_SUM_AGGREGATE_697(0L), __SQL_SUM_AGGREGATE_698(0L), __SQL_SUM_AGGREGATE_699(0L), __SQL_SUM_AGGREGATE_700(0L), __SQL_SUM_AGGREGATE_701(0L), __SQL_SUM_AGGREGATE_702(0L), __SQL_SUM_AGGREGATE_703(0L), __SQL_SUM_AGGREGATE_704(0L), __SQL_SUM_AGGREGATE_705(0L), __SQL_SUM_AGGREGATE_706(0L), __SQL_SUM_AGGREGATE_707(0L), __SQL_SUM_AGGREGATE_708(0L), __SQL_SUM_AGGREGATE_709(0.0), __SQL_SUM_AGGREGATE_710(0L), __SQL_SUM_AGGREGATE_711(0L), __SQL_SUM_AGGREGATE_712(0L), __SQL_SUM_AGGREGATE_713(0L), __SQL_SUM_AGGREGATE_714(0.0), __SQL_SUM_AGGREGATE_715(0L), __SQL_SUM_AGGREGATE_716(0L), __SQL_SUM_AGGREGATE_717(0.0), __SQL_SUM_AGGREGATE_718(0L), __SQL_SUM_AGGREGATE_719(0L), __SQL_SUM_AGGREGATE_720(0L), __SQL_SUM_AGGREGATE_721(0L), __SQL_SUM_AGGREGATE_722(0L), __SQL_SUM_AGGREGATE_723(0L), __SQL_SUM_AGGREGATE_724(0L), __SQL_SUM_AGGREGATE_725(0L), __SQL_SUM_AGGREGATE_726(0L), __SQL_SUM_AGGREGATE_727(0L), __SQL_SUM_AGGREGATE_728(0L), __SQL_SUM_AGGREGATE_729(0L), __SQL_SUM_AGGREGATE_730(0.0), __SQL_SUM_AGGREGATE_731(0L), __SQL_SUM_AGGREGATE_732(0L), __SQL_SUM_AGGREGATE_733(0L), __SQL_SUM_AGGREGATE_734(0L), __SQL_SUM_AGGREGATE_735(0.0), __SQL_SUM_AGGREGATE_736(0L), __SQL_SUM_AGGREGATE_737(0.0), __SQL_SUM_AGGREGATE_738(0.0), __SQL_SUM_AGGREGATE_739(0.0), __SQL_SUM_AGGREGATE_740(0.0), __SQL_SUM_AGGREGATE_741(0.0), __SQL_SUM_AGGREGATE_742(0.0), __SQL_SUM_AGGREGATE_743(0.0), __SQL_SUM_AGGREGATE_744(0.0), __SQL_SUM_AGGREGATE_745(0.0), __SQL_SUM_AGGREGATE_746(0.0), __SQL_SUM_AGGREGATE_747(0.0), __SQL_SUM_AGGREGATE_748(0.0), __SQL_SUM_AGGREGATE_749(0.0), __SQL_SUM_AGGREGATE_750(0.0), __SQL_SUM_AGGREGATE_751(0.0), __SQL_SUM_AGGREGATE_752(0.0), __SQL_SUM_AGGREGATE_753(0.0), __SQL_SUM_AGGREGATE_754(0.0), __SQL_SUM_AGGREGATE_755(0.0), __SQL_SUM_AGGREGATE_756(0.0), __SQL_SUM_AGGREGATE_757(0L), __SQL_SUM_AGGREGATE_758(0L), __SQL_SUM_AGGREGATE_759(0L), __SQL_SUM_AGGREGATE_760(0L), __SQL_SUM_AGGREGATE_761(0L), __SQL_SUM_AGGREGATE_762(0L), __SQL_SUM_AGGREGATE_763(0L), __SQL_SUM_AGGREGATE_764(0L), __SQL_SUM_AGGREGATE_765(0L), __SQL_SUM_AGGREGATE_766(0L), __SQL_SUM_AGGREGATE_767(0L), __SQL_SUM_AGGREGATE_768(0L), __SQL_SUM_AGGREGATE_769(0.0), __SQL_SUM_AGGREGATE_770(0L), __SQL_SUM_AGGREGATE_771(0L), __SQL_SUM_AGGREGATE_772(0L), __SQL_SUM_AGGREGATE_773(0L), __SQL_SUM_AGGREGATE_774(0.0), __SQL_SUM_AGGREGATE_775(0L), __SQL_SUM_AGGREGATE_776(0L), __SQL_SUM_AGGREGATE_777(0L), __SQL_SUM_AGGREGATE_778(0L), __SQL_SUM_AGGREGATE_779(0L), __SQL_SUM_AGGREGATE_780(0L), __SQL_SUM_AGGREGATE_781(0L), __SQL_SUM_AGGREGATE_782(0L), __SQL_SUM_AGGREGATE_783(0L), __SQL_SUM_AGGREGATE_784(0L), __SQL_SUM_AGGREGATE_785(0L), __SQL_SUM_AGGREGATE_786(0L), __SQL_SUM_AGGREGATE_787(0.0), __SQL_SUM_AGGREGATE_788(0L), __SQL_SUM_AGGREGATE_789(0L), __SQL_SUM_AGGREGATE_790(0L), __SQL_SUM_AGGREGATE_791(0L), __SQL_SUM_AGGREGATE_792(0.0), __SQL_SUM_AGGREGATE_793(0L), __SQL_SUM_AGGREGATE_794(0L), __SQL_SUM_AGGREGATE_795(0L), __SQL_SUM_AGGREGATE_796(0L), __SQL_SUM_AGGREGATE_797(0L), __SQL_SUM_AGGREGATE_798(0L), __SQL_SUM_AGGREGATE_799(0L), __SQL_SUM_AGGREGATE_800(0L), __SQL_SUM_AGGREGATE_801(0L), __SQL_SUM_AGGREGATE_802(0L), __SQL_SUM_AGGREGATE_803(0L), __SQL_SUM_AGGREGATE_804(0.0), __SQL_SUM_AGGREGATE_805(0L), __SQL_SUM_AGGREGATE_806(0L), __SQL_SUM_AGGREGATE_807(0L), __SQL_SUM_AGGREGATE_808(0L), __SQL_SUM_AGGREGATE_809(0.0), __SQL_SUM_AGGREGATE_810(0L), __SQL_SUM_AGGREGATE_811(0L), __SQL_SUM_AGGREGATE_812(0L), __SQL_SUM_AGGREGATE_813(0L), __SQL_SUM_AGGREGATE_814(0L), __SQL_SUM_AGGREGATE_815(0L), __SQL_SUM_AGGREGATE_816(0L), __SQL_SUM_AGGREGATE_817(0L), __SQL_SUM_AGGREGATE_818(0L), __SQL_SUM_AGGREGATE_819(0L), __SQL_SUM_AGGREGATE_820(0.0), __SQL_SUM_AGGREGATE_821(0L), __SQL_SUM_AGGREGATE_822(0L), __SQL_SUM_AGGREGATE_823(0L), __SQL_SUM_AGGREGATE_824(0L), __SQL_SUM_AGGREGATE_825(0.0), __SQL_SUM_AGGREGATE_826(0L), __SQL_SUM_AGGREGATE_827(0L), __SQL_SUM_AGGREGATE_828(0L), __SQL_SUM_AGGREGATE_829(0L), __SQL_SUM_AGGREGATE_830(0L), __SQL_SUM_AGGREGATE_831(0L), __SQL_SUM_AGGREGATE_832(0L), __SQL_SUM_AGGREGATE_833(0L), __SQL_SUM_AGGREGATE_834(0L), __SQL_SUM_AGGREGATE_835(0.0), __SQL_SUM_AGGREGATE_836(0L), __SQL_SUM_AGGREGATE_837(0L), __SQL_SUM_AGGREGATE_838(0L), __SQL_SUM_AGGREGATE_839(0L), __SQL_SUM_AGGREGATE_840(0.0), __SQL_SUM_AGGREGATE_841(0L), __SQL_SUM_AGGREGATE_842(0L), __SQL_SUM_AGGREGATE_843(0L), __SQL_SUM_AGGREGATE_844(0L), __SQL_SUM_AGGREGATE_845(0L), __SQL_SUM_AGGREGATE_846(0L), __SQL_SUM_AGGREGATE_847(0L), __SQL_SUM_AGGREGATE_848(0L), __SQL_SUM_AGGREGATE_849(0.0), __SQL_SUM_AGGREGATE_850(0L), __SQL_SUM_AGGREGATE_851(0L), __SQL_SUM_AGGREGATE_852(0L), __SQL_SUM_AGGREGATE_853(0L), __SQL_SUM_AGGREGATE_854(0.0), __SQL_SUM_AGGREGATE_855(0L), __SQL_SUM_AGGREGATE_856(0L), __SQL_SUM_AGGREGATE_857(0L), __SQL_SUM_AGGREGATE_858(0L), __SQL_SUM_AGGREGATE_859(0L), __SQL_SUM_AGGREGATE_860(0L), __SQL_SUM_AGGREGATE_861(0L), __SQL_SUM_AGGREGATE_862(0.0), __SQL_SUM_AGGREGATE_863(0L), __SQL_SUM_AGGREGATE_864(0L), __SQL_SUM_AGGREGATE_865(0L), __SQL_SUM_AGGREGATE_866(0L), __SQL_SUM_AGGREGATE_867(0.0), __SQL_SUM_AGGREGATE_868(0L), __SQL_SUM_AGGREGATE_869(0L), __SQL_SUM_AGGREGATE_870(0L), __SQL_SUM_AGGREGATE_871(0L), __SQL_SUM_AGGREGATE_872(0L), __SQL_SUM_AGGREGATE_873(0L), __SQL_SUM_AGGREGATE_874(0.0), __SQL_SUM_AGGREGATE_875(0L), __SQL_SUM_AGGREGATE_876(0L), __SQL_SUM_AGGREGATE_877(0L), __SQL_SUM_AGGREGATE_878(0L), __SQL_SUM_AGGREGATE_879(0.0), __SQL_SUM_AGGREGATE_880(0L), __SQL_SUM_AGGREGATE_881(0L), __SQL_SUM_AGGREGATE_882(0L), __SQL_SUM_AGGREGATE_883(0L), __SQL_SUM_AGGREGATE_884(0L), __SQL_SUM_AGGREGATE_885(0.0), __SQL_SUM_AGGREGATE_886(0L), __SQL_SUM_AGGREGATE_887(0L), __SQL_SUM_AGGREGATE_888(0L), __SQL_SUM_AGGREGATE_889(0L), __SQL_SUM_AGGREGATE_890(0.0), __SQL_SUM_AGGREGATE_891(0L), __SQL_SUM_AGGREGATE_892(0L), __SQL_SUM_AGGREGATE_893(0L), __SQL_SUM_AGGREGATE_894(0L), __SQL_SUM_AGGREGATE_895(0.0), __SQL_SUM_AGGREGATE_896(0L), __SQL_SUM_AGGREGATE_897(0L), __SQL_SUM_AGGREGATE_898(0L), __SQL_SUM_AGGREGATE_899(0L), __SQL_SUM_AGGREGATE_900(0.0), __SQL_SUM_AGGREGATE_901(0L), __SQL_SUM_AGGREGATE_902(0L), __SQL_SUM_AGGREGATE_903(0L), __SQL_SUM_AGGREGATE_904(0.0), __SQL_SUM_AGGREGATE_905(0L), __SQL_SUM_AGGREGATE_906(0L), __SQL_SUM_AGGREGATE_907(0L), __SQL_SUM_AGGREGATE_908(0L), __SQL_SUM_AGGREGATE_909(0.0), __SQL_SUM_AGGREGATE_910(0L), __SQL_SUM_AGGREGATE_911(0L), __SQL_SUM_AGGREGATE_912(0.0), __SQL_SUM_AGGREGATE_913(0L), __SQL_SUM_AGGREGATE_914(0L), __SQL_SUM_AGGREGATE_915(0L), __SQL_SUM_AGGREGATE_916(0L), __SQL_SUM_AGGREGATE_917(0.0), __SQL_SUM_AGGREGATE_918(0L), __SQL_SUM_AGGREGATE_919(0.0), __SQL_SUM_AGGREGATE_920(0.0), __SQL_SUM_AGGREGATE_921(0.0), __SQL_SUM_AGGREGATE_922(0.0), __SQL_SUM_AGGREGATE_923(0.0), __SQL_SUM_AGGREGATE_924(0.0), __SQL_SUM_AGGREGATE_925(0.0), __SQL_SUM_AGGREGATE_926(0L), __SQL_SUM_AGGREGATE_927(0L), __SQL_SUM_AGGREGATE_928(0L), __SQL_SUM_AGGREGATE_929(0L), __SQL_SUM_AGGREGATE_930(0.0), __SQL_SUM_AGGREGATE_931(0L), __SQL_SUM_AGGREGATE_932(0L), __SQL_SUM_AGGREGATE_933(0L), __SQL_SUM_AGGREGATE_934(0L), __SQL_SUM_AGGREGATE_935(0.0), __SQL_SUM_AGGREGATE_936(0L), __SQL_SUM_AGGREGATE_937(0L), __SQL_SUM_AGGREGATE_938(0L), __SQL_SUM_AGGREGATE_939(0.0), __SQL_SUM_AGGREGATE_940(0L), __SQL_SUM_AGGREGATE_941(0L), __SQL_SUM_AGGREGATE_942(0.0), __SQL_SUM_AGGREGATE_943(0L), __SQL_SUM_AGGREGATE_944(0.0), __SQL_SUM_AGGREGATE_945(0.0), __SQL_SUM_AGGREGATE_946(0L) { gettimeofday(&t0, NULL); }
  
    /* Serialization Code */
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const {
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_1 = get___SQL_SUM_AGGREGATE_1();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_1), ___SQL_SUM_AGGREGATE_1, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_2 = get___SQL_SUM_AGGREGATE_2();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_2), ___SQL_SUM_AGGREGATE_2, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_3 = get___SQL_SUM_AGGREGATE_3();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_3), ___SQL_SUM_AGGREGATE_3, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_4 = get___SQL_SUM_AGGREGATE_4();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_4), ___SQL_SUM_AGGREGATE_4, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_5 = get___SQL_SUM_AGGREGATE_5();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_5), ___SQL_SUM_AGGREGATE_5, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_6 = get___SQL_SUM_AGGREGATE_6();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_6), ___SQL_SUM_AGGREGATE_6, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_7 = get___SQL_SUM_AGGREGATE_7();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_7), ___SQL_SUM_AGGREGATE_7, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_8 = get___SQL_SUM_AGGREGATE_8();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_8), ___SQL_SUM_AGGREGATE_8, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_9 = get___SQL_SUM_AGGREGATE_9();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_9), ___SQL_SUM_AGGREGATE_9, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_10 = get___SQL_SUM_AGGREGATE_10();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_10), ___SQL_SUM_AGGREGATE_10, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_11 = get___SQL_SUM_AGGREGATE_11();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_11), ___SQL_SUM_AGGREGATE_11, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_12 = get___SQL_SUM_AGGREGATE_12();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_12), ___SQL_SUM_AGGREGATE_12, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_13 = get___SQL_SUM_AGGREGATE_13();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_13), ___SQL_SUM_AGGREGATE_13, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_14 = get___SQL_SUM_AGGREGATE_14();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_14), ___SQL_SUM_AGGREGATE_14, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_15 = get___SQL_SUM_AGGREGATE_15();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_15), ___SQL_SUM_AGGREGATE_15, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_16 = get___SQL_SUM_AGGREGATE_16();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_16), ___SQL_SUM_AGGREGATE_16, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_17 = get___SQL_SUM_AGGREGATE_17();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_17), ___SQL_SUM_AGGREGATE_17, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_18 = get___SQL_SUM_AGGREGATE_18();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_18), ___SQL_SUM_AGGREGATE_18, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_19 = get___SQL_SUM_AGGREGATE_19();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_19), ___SQL_SUM_AGGREGATE_19, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_20 = get___SQL_SUM_AGGREGATE_20();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_20), ___SQL_SUM_AGGREGATE_20, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_21 = get___SQL_SUM_AGGREGATE_21();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_21), ___SQL_SUM_AGGREGATE_21, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_22 = get___SQL_SUM_AGGREGATE_22();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_22), ___SQL_SUM_AGGREGATE_22, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_23 = get___SQL_SUM_AGGREGATE_23();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_23), ___SQL_SUM_AGGREGATE_23, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_24 = get___SQL_SUM_AGGREGATE_24();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_24), ___SQL_SUM_AGGREGATE_24, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_25 = get___SQL_SUM_AGGREGATE_25();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_25), ___SQL_SUM_AGGREGATE_25, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_26 = get___SQL_SUM_AGGREGATE_26();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_26), ___SQL_SUM_AGGREGATE_26, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_27 = get___SQL_SUM_AGGREGATE_27();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_27), ___SQL_SUM_AGGREGATE_27, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_28 = get___SQL_SUM_AGGREGATE_28();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_28), ___SQL_SUM_AGGREGATE_28, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_29 = get___SQL_SUM_AGGREGATE_29();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_29), ___SQL_SUM_AGGREGATE_29, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_30 = get___SQL_SUM_AGGREGATE_30();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_30), ___SQL_SUM_AGGREGATE_30, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_31 = get___SQL_SUM_AGGREGATE_31();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_31), ___SQL_SUM_AGGREGATE_31, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_32 = get___SQL_SUM_AGGREGATE_32();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_32), ___SQL_SUM_AGGREGATE_32, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_33 = get___SQL_SUM_AGGREGATE_33();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_33), ___SQL_SUM_AGGREGATE_33, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_34 = get___SQL_SUM_AGGREGATE_34();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_34), ___SQL_SUM_AGGREGATE_34, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_35 = get___SQL_SUM_AGGREGATE_35();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_35), ___SQL_SUM_AGGREGATE_35, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_36 = get___SQL_SUM_AGGREGATE_36();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_36), ___SQL_SUM_AGGREGATE_36, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_37 = get___SQL_SUM_AGGREGATE_37();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_37), ___SQL_SUM_AGGREGATE_37, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_38 = get___SQL_SUM_AGGREGATE_38();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_38), ___SQL_SUM_AGGREGATE_38, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_39 = get___SQL_SUM_AGGREGATE_39();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_39), ___SQL_SUM_AGGREGATE_39, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_40 = get___SQL_SUM_AGGREGATE_40();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_40), ___SQL_SUM_AGGREGATE_40, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_41 = get___SQL_SUM_AGGREGATE_41();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_41), ___SQL_SUM_AGGREGATE_41, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_42 = get___SQL_SUM_AGGREGATE_42();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_42), ___SQL_SUM_AGGREGATE_42, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_43 = get___SQL_SUM_AGGREGATE_43();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_43), ___SQL_SUM_AGGREGATE_43, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_44 = get___SQL_SUM_AGGREGATE_44();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_44), ___SQL_SUM_AGGREGATE_44, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_45 = get___SQL_SUM_AGGREGATE_45();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_45), ___SQL_SUM_AGGREGATE_45, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_46 = get___SQL_SUM_AGGREGATE_46();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_46), ___SQL_SUM_AGGREGATE_46, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_47 = get___SQL_SUM_AGGREGATE_47();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_47), ___SQL_SUM_AGGREGATE_47, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_48 = get___SQL_SUM_AGGREGATE_48();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_48), ___SQL_SUM_AGGREGATE_48, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_49 = get___SQL_SUM_AGGREGATE_49();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_49), ___SQL_SUM_AGGREGATE_49, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_50 = get___SQL_SUM_AGGREGATE_50();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_50), ___SQL_SUM_AGGREGATE_50, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_51 = get___SQL_SUM_AGGREGATE_51();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_51), ___SQL_SUM_AGGREGATE_51, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_52 = get___SQL_SUM_AGGREGATE_52();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_52), ___SQL_SUM_AGGREGATE_52, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_53 = get___SQL_SUM_AGGREGATE_53();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_53), ___SQL_SUM_AGGREGATE_53, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_54 = get___SQL_SUM_AGGREGATE_54();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_54), ___SQL_SUM_AGGREGATE_54, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_55 = get___SQL_SUM_AGGREGATE_55();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_55), ___SQL_SUM_AGGREGATE_55, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_56 = get___SQL_SUM_AGGREGATE_56();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_56), ___SQL_SUM_AGGREGATE_56, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_57 = get___SQL_SUM_AGGREGATE_57();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_57), ___SQL_SUM_AGGREGATE_57, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_58 = get___SQL_SUM_AGGREGATE_58();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_58), ___SQL_SUM_AGGREGATE_58, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_59 = get___SQL_SUM_AGGREGATE_59();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_59), ___SQL_SUM_AGGREGATE_59, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_60 = get___SQL_SUM_AGGREGATE_60();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_60), ___SQL_SUM_AGGREGATE_60, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_61 = get___SQL_SUM_AGGREGATE_61();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_61), ___SQL_SUM_AGGREGATE_61, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_62 = get___SQL_SUM_AGGREGATE_62();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_62), ___SQL_SUM_AGGREGATE_62, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_63 = get___SQL_SUM_AGGREGATE_63();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_63), ___SQL_SUM_AGGREGATE_63, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_64 = get___SQL_SUM_AGGREGATE_64();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_64), ___SQL_SUM_AGGREGATE_64, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_65 = get___SQL_SUM_AGGREGATE_65();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_65), ___SQL_SUM_AGGREGATE_65, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_66 = get___SQL_SUM_AGGREGATE_66();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_66), ___SQL_SUM_AGGREGATE_66, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_67 = get___SQL_SUM_AGGREGATE_67();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_67), ___SQL_SUM_AGGREGATE_67, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_68 = get___SQL_SUM_AGGREGATE_68();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_68), ___SQL_SUM_AGGREGATE_68, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_69 = get___SQL_SUM_AGGREGATE_69();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_69), ___SQL_SUM_AGGREGATE_69, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_70 = get___SQL_SUM_AGGREGATE_70();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_70), ___SQL_SUM_AGGREGATE_70, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_71 = get___SQL_SUM_AGGREGATE_71();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_71), ___SQL_SUM_AGGREGATE_71, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_72 = get___SQL_SUM_AGGREGATE_72();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_72), ___SQL_SUM_AGGREGATE_72, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_73 = get___SQL_SUM_AGGREGATE_73();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_73), ___SQL_SUM_AGGREGATE_73, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_74 = get___SQL_SUM_AGGREGATE_74();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_74), ___SQL_SUM_AGGREGATE_74, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_75 = get___SQL_SUM_AGGREGATE_75();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_75), ___SQL_SUM_AGGREGATE_75, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_76 = get___SQL_SUM_AGGREGATE_76();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_76), ___SQL_SUM_AGGREGATE_76, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_77 = get___SQL_SUM_AGGREGATE_77();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_77), ___SQL_SUM_AGGREGATE_77, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_78 = get___SQL_SUM_AGGREGATE_78();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_78), ___SQL_SUM_AGGREGATE_78, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_79 = get___SQL_SUM_AGGREGATE_79();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_79), ___SQL_SUM_AGGREGATE_79, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_80 = get___SQL_SUM_AGGREGATE_80();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_80), ___SQL_SUM_AGGREGATE_80, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_81 = get___SQL_SUM_AGGREGATE_81();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_81), ___SQL_SUM_AGGREGATE_81, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_82 = get___SQL_SUM_AGGREGATE_82();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_82), ___SQL_SUM_AGGREGATE_82, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_83 = get___SQL_SUM_AGGREGATE_83();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_83), ___SQL_SUM_AGGREGATE_83, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_84 = get___SQL_SUM_AGGREGATE_84();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_84), ___SQL_SUM_AGGREGATE_84, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_85 = get___SQL_SUM_AGGREGATE_85();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_85), ___SQL_SUM_AGGREGATE_85, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_86 = get___SQL_SUM_AGGREGATE_86();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_86), ___SQL_SUM_AGGREGATE_86, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_87 = get___SQL_SUM_AGGREGATE_87();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_87), ___SQL_SUM_AGGREGATE_87, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_88 = get___SQL_SUM_AGGREGATE_88();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_88), ___SQL_SUM_AGGREGATE_88, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_89 = get___SQL_SUM_AGGREGATE_89();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_89), ___SQL_SUM_AGGREGATE_89, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_90 = get___SQL_SUM_AGGREGATE_90();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_90), ___SQL_SUM_AGGREGATE_90, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_91 = get___SQL_SUM_AGGREGATE_91();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_91), ___SQL_SUM_AGGREGATE_91, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_92 = get___SQL_SUM_AGGREGATE_92();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_92), ___SQL_SUM_AGGREGATE_92, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_93 = get___SQL_SUM_AGGREGATE_93();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_93), ___SQL_SUM_AGGREGATE_93, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_94 = get___SQL_SUM_AGGREGATE_94();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_94), ___SQL_SUM_AGGREGATE_94, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_95 = get___SQL_SUM_AGGREGATE_95();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_95), ___SQL_SUM_AGGREGATE_95, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_96 = get___SQL_SUM_AGGREGATE_96();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_96), ___SQL_SUM_AGGREGATE_96, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_97 = get___SQL_SUM_AGGREGATE_97();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_97), ___SQL_SUM_AGGREGATE_97, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_98 = get___SQL_SUM_AGGREGATE_98();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_98), ___SQL_SUM_AGGREGATE_98, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_99 = get___SQL_SUM_AGGREGATE_99();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_99), ___SQL_SUM_AGGREGATE_99, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_100 = get___SQL_SUM_AGGREGATE_100();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_100), ___SQL_SUM_AGGREGATE_100, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_101 = get___SQL_SUM_AGGREGATE_101();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_101), ___SQL_SUM_AGGREGATE_101, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_102 = get___SQL_SUM_AGGREGATE_102();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_102), ___SQL_SUM_AGGREGATE_102, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_103 = get___SQL_SUM_AGGREGATE_103();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_103), ___SQL_SUM_AGGREGATE_103, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_104 = get___SQL_SUM_AGGREGATE_104();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_104), ___SQL_SUM_AGGREGATE_104, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_105 = get___SQL_SUM_AGGREGATE_105();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_105), ___SQL_SUM_AGGREGATE_105, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_106 = get___SQL_SUM_AGGREGATE_106();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_106), ___SQL_SUM_AGGREGATE_106, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_107 = get___SQL_SUM_AGGREGATE_107();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_107), ___SQL_SUM_AGGREGATE_107, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_108 = get___SQL_SUM_AGGREGATE_108();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_108), ___SQL_SUM_AGGREGATE_108, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_109 = get___SQL_SUM_AGGREGATE_109();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_109), ___SQL_SUM_AGGREGATE_109, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_110 = get___SQL_SUM_AGGREGATE_110();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_110), ___SQL_SUM_AGGREGATE_110, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_111 = get___SQL_SUM_AGGREGATE_111();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_111), ___SQL_SUM_AGGREGATE_111, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_112 = get___SQL_SUM_AGGREGATE_112();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_112), ___SQL_SUM_AGGREGATE_112, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_113 = get___SQL_SUM_AGGREGATE_113();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_113), ___SQL_SUM_AGGREGATE_113, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_114 = get___SQL_SUM_AGGREGATE_114();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_114), ___SQL_SUM_AGGREGATE_114, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_115 = get___SQL_SUM_AGGREGATE_115();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_115), ___SQL_SUM_AGGREGATE_115, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_116 = get___SQL_SUM_AGGREGATE_116();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_116), ___SQL_SUM_AGGREGATE_116, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_117 = get___SQL_SUM_AGGREGATE_117();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_117), ___SQL_SUM_AGGREGATE_117, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_118 = get___SQL_SUM_AGGREGATE_118();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_118), ___SQL_SUM_AGGREGATE_118, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_119 = get___SQL_SUM_AGGREGATE_119();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_119), ___SQL_SUM_AGGREGATE_119, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_120 = get___SQL_SUM_AGGREGATE_120();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_120), ___SQL_SUM_AGGREGATE_120, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_121 = get___SQL_SUM_AGGREGATE_121();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_121), ___SQL_SUM_AGGREGATE_121, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_122 = get___SQL_SUM_AGGREGATE_122();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_122), ___SQL_SUM_AGGREGATE_122, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_123 = get___SQL_SUM_AGGREGATE_123();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_123), ___SQL_SUM_AGGREGATE_123, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_124 = get___SQL_SUM_AGGREGATE_124();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_124), ___SQL_SUM_AGGREGATE_124, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_125 = get___SQL_SUM_AGGREGATE_125();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_125), ___SQL_SUM_AGGREGATE_125, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_126 = get___SQL_SUM_AGGREGATE_126();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_126), ___SQL_SUM_AGGREGATE_126, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_127 = get___SQL_SUM_AGGREGATE_127();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_127), ___SQL_SUM_AGGREGATE_127, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_128 = get___SQL_SUM_AGGREGATE_128();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_128), ___SQL_SUM_AGGREGATE_128, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_129 = get___SQL_SUM_AGGREGATE_129();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_129), ___SQL_SUM_AGGREGATE_129, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_130 = get___SQL_SUM_AGGREGATE_130();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_130), ___SQL_SUM_AGGREGATE_130, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_131 = get___SQL_SUM_AGGREGATE_131();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_131), ___SQL_SUM_AGGREGATE_131, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_132 = get___SQL_SUM_AGGREGATE_132();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_132), ___SQL_SUM_AGGREGATE_132, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_133 = get___SQL_SUM_AGGREGATE_133();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_133), ___SQL_SUM_AGGREGATE_133, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_134 = get___SQL_SUM_AGGREGATE_134();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_134), ___SQL_SUM_AGGREGATE_134, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_135 = get___SQL_SUM_AGGREGATE_135();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_135), ___SQL_SUM_AGGREGATE_135, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_136 = get___SQL_SUM_AGGREGATE_136();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_136), ___SQL_SUM_AGGREGATE_136, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_137 = get___SQL_SUM_AGGREGATE_137();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_137), ___SQL_SUM_AGGREGATE_137, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_138 = get___SQL_SUM_AGGREGATE_138();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_138), ___SQL_SUM_AGGREGATE_138, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_139 = get___SQL_SUM_AGGREGATE_139();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_139), ___SQL_SUM_AGGREGATE_139, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_140 = get___SQL_SUM_AGGREGATE_140();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_140), ___SQL_SUM_AGGREGATE_140, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_141 = get___SQL_SUM_AGGREGATE_141();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_141), ___SQL_SUM_AGGREGATE_141, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_142 = get___SQL_SUM_AGGREGATE_142();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_142), ___SQL_SUM_AGGREGATE_142, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_143 = get___SQL_SUM_AGGREGATE_143();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_143), ___SQL_SUM_AGGREGATE_143, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_144 = get___SQL_SUM_AGGREGATE_144();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_144), ___SQL_SUM_AGGREGATE_144, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_145 = get___SQL_SUM_AGGREGATE_145();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_145), ___SQL_SUM_AGGREGATE_145, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_146 = get___SQL_SUM_AGGREGATE_146();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_146), ___SQL_SUM_AGGREGATE_146, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_147 = get___SQL_SUM_AGGREGATE_147();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_147), ___SQL_SUM_AGGREGATE_147, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_148 = get___SQL_SUM_AGGREGATE_148();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_148), ___SQL_SUM_AGGREGATE_148, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_149 = get___SQL_SUM_AGGREGATE_149();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_149), ___SQL_SUM_AGGREGATE_149, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_150 = get___SQL_SUM_AGGREGATE_150();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_150), ___SQL_SUM_AGGREGATE_150, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_151 = get___SQL_SUM_AGGREGATE_151();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_151), ___SQL_SUM_AGGREGATE_151, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_152 = get___SQL_SUM_AGGREGATE_152();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_152), ___SQL_SUM_AGGREGATE_152, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_153 = get___SQL_SUM_AGGREGATE_153();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_153), ___SQL_SUM_AGGREGATE_153, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_154 = get___SQL_SUM_AGGREGATE_154();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_154), ___SQL_SUM_AGGREGATE_154, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_155 = get___SQL_SUM_AGGREGATE_155();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_155), ___SQL_SUM_AGGREGATE_155, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_156 = get___SQL_SUM_AGGREGATE_156();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_156), ___SQL_SUM_AGGREGATE_156, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_157 = get___SQL_SUM_AGGREGATE_157();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_157), ___SQL_SUM_AGGREGATE_157, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_158 = get___SQL_SUM_AGGREGATE_158();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_158), ___SQL_SUM_AGGREGATE_158, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_159 = get___SQL_SUM_AGGREGATE_159();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_159), ___SQL_SUM_AGGREGATE_159, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_160 = get___SQL_SUM_AGGREGATE_160();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_160), ___SQL_SUM_AGGREGATE_160, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_161 = get___SQL_SUM_AGGREGATE_161();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_161), ___SQL_SUM_AGGREGATE_161, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_162 = get___SQL_SUM_AGGREGATE_162();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_162), ___SQL_SUM_AGGREGATE_162, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_163 = get___SQL_SUM_AGGREGATE_163();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_163), ___SQL_SUM_AGGREGATE_163, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_164 = get___SQL_SUM_AGGREGATE_164();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_164), ___SQL_SUM_AGGREGATE_164, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_165 = get___SQL_SUM_AGGREGATE_165();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_165), ___SQL_SUM_AGGREGATE_165, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_166 = get___SQL_SUM_AGGREGATE_166();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_166), ___SQL_SUM_AGGREGATE_166, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_167 = get___SQL_SUM_AGGREGATE_167();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_167), ___SQL_SUM_AGGREGATE_167, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_168 = get___SQL_SUM_AGGREGATE_168();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_168), ___SQL_SUM_AGGREGATE_168, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_169 = get___SQL_SUM_AGGREGATE_169();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_169), ___SQL_SUM_AGGREGATE_169, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_170 = get___SQL_SUM_AGGREGATE_170();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_170), ___SQL_SUM_AGGREGATE_170, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_171 = get___SQL_SUM_AGGREGATE_171();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_171), ___SQL_SUM_AGGREGATE_171, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_172 = get___SQL_SUM_AGGREGATE_172();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_172), ___SQL_SUM_AGGREGATE_172, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_173 = get___SQL_SUM_AGGREGATE_173();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_173), ___SQL_SUM_AGGREGATE_173, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_174 = get___SQL_SUM_AGGREGATE_174();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_174), ___SQL_SUM_AGGREGATE_174, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_175 = get___SQL_SUM_AGGREGATE_175();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_175), ___SQL_SUM_AGGREGATE_175, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_176 = get___SQL_SUM_AGGREGATE_176();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_176), ___SQL_SUM_AGGREGATE_176, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_177 = get___SQL_SUM_AGGREGATE_177();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_177), ___SQL_SUM_AGGREGATE_177, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_178 = get___SQL_SUM_AGGREGATE_178();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_178), ___SQL_SUM_AGGREGATE_178, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_179 = get___SQL_SUM_AGGREGATE_179();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_179), ___SQL_SUM_AGGREGATE_179, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_180 = get___SQL_SUM_AGGREGATE_180();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_180), ___SQL_SUM_AGGREGATE_180, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_181 = get___SQL_SUM_AGGREGATE_181();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_181), ___SQL_SUM_AGGREGATE_181, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_182 = get___SQL_SUM_AGGREGATE_182();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_182), ___SQL_SUM_AGGREGATE_182, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_183 = get___SQL_SUM_AGGREGATE_183();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_183), ___SQL_SUM_AGGREGATE_183, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_184 = get___SQL_SUM_AGGREGATE_184();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_184), ___SQL_SUM_AGGREGATE_184, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_185 = get___SQL_SUM_AGGREGATE_185();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_185), ___SQL_SUM_AGGREGATE_185, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_186 = get___SQL_SUM_AGGREGATE_186();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_186), ___SQL_SUM_AGGREGATE_186, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_187 = get___SQL_SUM_AGGREGATE_187();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_187), ___SQL_SUM_AGGREGATE_187, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_188 = get___SQL_SUM_AGGREGATE_188();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_188), ___SQL_SUM_AGGREGATE_188, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_189 = get___SQL_SUM_AGGREGATE_189();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_189), ___SQL_SUM_AGGREGATE_189, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_190 = get___SQL_SUM_AGGREGATE_190();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_190), ___SQL_SUM_AGGREGATE_190, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_191 = get___SQL_SUM_AGGREGATE_191();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_191), ___SQL_SUM_AGGREGATE_191, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_192 = get___SQL_SUM_AGGREGATE_192();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_192), ___SQL_SUM_AGGREGATE_192, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_193 = get___SQL_SUM_AGGREGATE_193();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_193), ___SQL_SUM_AGGREGATE_193, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_194 = get___SQL_SUM_AGGREGATE_194();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_194), ___SQL_SUM_AGGREGATE_194, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_195 = get___SQL_SUM_AGGREGATE_195();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_195), ___SQL_SUM_AGGREGATE_195, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_196 = get___SQL_SUM_AGGREGATE_196();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_196), ___SQL_SUM_AGGREGATE_196, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_197 = get___SQL_SUM_AGGREGATE_197();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_197), ___SQL_SUM_AGGREGATE_197, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_198 = get___SQL_SUM_AGGREGATE_198();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_198), ___SQL_SUM_AGGREGATE_198, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_199 = get___SQL_SUM_AGGREGATE_199();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_199), ___SQL_SUM_AGGREGATE_199, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_200 = get___SQL_SUM_AGGREGATE_200();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_200), ___SQL_SUM_AGGREGATE_200, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_201 = get___SQL_SUM_AGGREGATE_201();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_201), ___SQL_SUM_AGGREGATE_201, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_202 = get___SQL_SUM_AGGREGATE_202();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_202), ___SQL_SUM_AGGREGATE_202, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_203 = get___SQL_SUM_AGGREGATE_203();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_203), ___SQL_SUM_AGGREGATE_203, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_204 = get___SQL_SUM_AGGREGATE_204();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_204), ___SQL_SUM_AGGREGATE_204, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_205 = get___SQL_SUM_AGGREGATE_205();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_205), ___SQL_SUM_AGGREGATE_205, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_206 = get___SQL_SUM_AGGREGATE_206();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_206), ___SQL_SUM_AGGREGATE_206, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_207 = get___SQL_SUM_AGGREGATE_207();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_207), ___SQL_SUM_AGGREGATE_207, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_208 = get___SQL_SUM_AGGREGATE_208();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_208), ___SQL_SUM_AGGREGATE_208, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_209 = get___SQL_SUM_AGGREGATE_209();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_209), ___SQL_SUM_AGGREGATE_209, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_210 = get___SQL_SUM_AGGREGATE_210();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_210), ___SQL_SUM_AGGREGATE_210, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_211 = get___SQL_SUM_AGGREGATE_211();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_211), ___SQL_SUM_AGGREGATE_211, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_212 = get___SQL_SUM_AGGREGATE_212();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_212), ___SQL_SUM_AGGREGATE_212, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_213 = get___SQL_SUM_AGGREGATE_213();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_213), ___SQL_SUM_AGGREGATE_213, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_214 = get___SQL_SUM_AGGREGATE_214();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_214), ___SQL_SUM_AGGREGATE_214, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_215 = get___SQL_SUM_AGGREGATE_215();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_215), ___SQL_SUM_AGGREGATE_215, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_216 = get___SQL_SUM_AGGREGATE_216();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_216), ___SQL_SUM_AGGREGATE_216, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_217 = get___SQL_SUM_AGGREGATE_217();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_217), ___SQL_SUM_AGGREGATE_217, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_218 = get___SQL_SUM_AGGREGATE_218();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_218), ___SQL_SUM_AGGREGATE_218, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_219 = get___SQL_SUM_AGGREGATE_219();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_219), ___SQL_SUM_AGGREGATE_219, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_220 = get___SQL_SUM_AGGREGATE_220();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_220), ___SQL_SUM_AGGREGATE_220, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_221 = get___SQL_SUM_AGGREGATE_221();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_221), ___SQL_SUM_AGGREGATE_221, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_222 = get___SQL_SUM_AGGREGATE_222();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_222), ___SQL_SUM_AGGREGATE_222, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_223 = get___SQL_SUM_AGGREGATE_223();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_223), ___SQL_SUM_AGGREGATE_223, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_224 = get___SQL_SUM_AGGREGATE_224();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_224), ___SQL_SUM_AGGREGATE_224, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_225 = get___SQL_SUM_AGGREGATE_225();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_225), ___SQL_SUM_AGGREGATE_225, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_226 = get___SQL_SUM_AGGREGATE_226();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_226), ___SQL_SUM_AGGREGATE_226, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_227 = get___SQL_SUM_AGGREGATE_227();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_227), ___SQL_SUM_AGGREGATE_227, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_228 = get___SQL_SUM_AGGREGATE_228();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_228), ___SQL_SUM_AGGREGATE_228, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_229 = get___SQL_SUM_AGGREGATE_229();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_229), ___SQL_SUM_AGGREGATE_229, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_230 = get___SQL_SUM_AGGREGATE_230();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_230), ___SQL_SUM_AGGREGATE_230, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_231 = get___SQL_SUM_AGGREGATE_231();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_231), ___SQL_SUM_AGGREGATE_231, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_232 = get___SQL_SUM_AGGREGATE_232();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_232), ___SQL_SUM_AGGREGATE_232, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_233 = get___SQL_SUM_AGGREGATE_233();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_233), ___SQL_SUM_AGGREGATE_233, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_234 = get___SQL_SUM_AGGREGATE_234();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_234), ___SQL_SUM_AGGREGATE_234, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_235 = get___SQL_SUM_AGGREGATE_235();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_235), ___SQL_SUM_AGGREGATE_235, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_236 = get___SQL_SUM_AGGREGATE_236();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_236), ___SQL_SUM_AGGREGATE_236, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_237 = get___SQL_SUM_AGGREGATE_237();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_237), ___SQL_SUM_AGGREGATE_237, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_238 = get___SQL_SUM_AGGREGATE_238();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_238), ___SQL_SUM_AGGREGATE_238, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_239 = get___SQL_SUM_AGGREGATE_239();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_239), ___SQL_SUM_AGGREGATE_239, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_240 = get___SQL_SUM_AGGREGATE_240();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_240), ___SQL_SUM_AGGREGATE_240, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_241 = get___SQL_SUM_AGGREGATE_241();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_241), ___SQL_SUM_AGGREGATE_241, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_242 = get___SQL_SUM_AGGREGATE_242();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_242), ___SQL_SUM_AGGREGATE_242, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_243 = get___SQL_SUM_AGGREGATE_243();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_243), ___SQL_SUM_AGGREGATE_243, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_244 = get___SQL_SUM_AGGREGATE_244();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_244), ___SQL_SUM_AGGREGATE_244, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_245 = get___SQL_SUM_AGGREGATE_245();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_245), ___SQL_SUM_AGGREGATE_245, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_246 = get___SQL_SUM_AGGREGATE_246();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_246), ___SQL_SUM_AGGREGATE_246, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_247 = get___SQL_SUM_AGGREGATE_247();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_247), ___SQL_SUM_AGGREGATE_247, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_248 = get___SQL_SUM_AGGREGATE_248();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_248), ___SQL_SUM_AGGREGATE_248, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_249 = get___SQL_SUM_AGGREGATE_249();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_249), ___SQL_SUM_AGGREGATE_249, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_250 = get___SQL_SUM_AGGREGATE_250();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_250), ___SQL_SUM_AGGREGATE_250, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_251 = get___SQL_SUM_AGGREGATE_251();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_251), ___SQL_SUM_AGGREGATE_251, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_252 = get___SQL_SUM_AGGREGATE_252();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_252), ___SQL_SUM_AGGREGATE_252, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_253 = get___SQL_SUM_AGGREGATE_253();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_253), ___SQL_SUM_AGGREGATE_253, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_254 = get___SQL_SUM_AGGREGATE_254();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_254), ___SQL_SUM_AGGREGATE_254, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_255 = get___SQL_SUM_AGGREGATE_255();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_255), ___SQL_SUM_AGGREGATE_255, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_256 = get___SQL_SUM_AGGREGATE_256();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_256), ___SQL_SUM_AGGREGATE_256, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_257 = get___SQL_SUM_AGGREGATE_257();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_257), ___SQL_SUM_AGGREGATE_257, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_258 = get___SQL_SUM_AGGREGATE_258();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_258), ___SQL_SUM_AGGREGATE_258, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_259 = get___SQL_SUM_AGGREGATE_259();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_259), ___SQL_SUM_AGGREGATE_259, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_260 = get___SQL_SUM_AGGREGATE_260();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_260), ___SQL_SUM_AGGREGATE_260, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_261 = get___SQL_SUM_AGGREGATE_261();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_261), ___SQL_SUM_AGGREGATE_261, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_262 = get___SQL_SUM_AGGREGATE_262();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_262), ___SQL_SUM_AGGREGATE_262, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_263 = get___SQL_SUM_AGGREGATE_263();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_263), ___SQL_SUM_AGGREGATE_263, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_264 = get___SQL_SUM_AGGREGATE_264();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_264), ___SQL_SUM_AGGREGATE_264, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_265 = get___SQL_SUM_AGGREGATE_265();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_265), ___SQL_SUM_AGGREGATE_265, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_266 = get___SQL_SUM_AGGREGATE_266();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_266), ___SQL_SUM_AGGREGATE_266, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_267 = get___SQL_SUM_AGGREGATE_267();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_267), ___SQL_SUM_AGGREGATE_267, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_268 = get___SQL_SUM_AGGREGATE_268();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_268), ___SQL_SUM_AGGREGATE_268, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_269 = get___SQL_SUM_AGGREGATE_269();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_269), ___SQL_SUM_AGGREGATE_269, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_270 = get___SQL_SUM_AGGREGATE_270();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_270), ___SQL_SUM_AGGREGATE_270, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_271 = get___SQL_SUM_AGGREGATE_271();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_271), ___SQL_SUM_AGGREGATE_271, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_272 = get___SQL_SUM_AGGREGATE_272();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_272), ___SQL_SUM_AGGREGATE_272, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_273 = get___SQL_SUM_AGGREGATE_273();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_273), ___SQL_SUM_AGGREGATE_273, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_274 = get___SQL_SUM_AGGREGATE_274();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_274), ___SQL_SUM_AGGREGATE_274, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_275 = get___SQL_SUM_AGGREGATE_275();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_275), ___SQL_SUM_AGGREGATE_275, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_276 = get___SQL_SUM_AGGREGATE_276();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_276), ___SQL_SUM_AGGREGATE_276, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_277 = get___SQL_SUM_AGGREGATE_277();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_277), ___SQL_SUM_AGGREGATE_277, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_278 = get___SQL_SUM_AGGREGATE_278();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_278), ___SQL_SUM_AGGREGATE_278, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_279 = get___SQL_SUM_AGGREGATE_279();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_279), ___SQL_SUM_AGGREGATE_279, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_280 = get___SQL_SUM_AGGREGATE_280();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_280), ___SQL_SUM_AGGREGATE_280, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_281 = get___SQL_SUM_AGGREGATE_281();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_281), ___SQL_SUM_AGGREGATE_281, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_282 = get___SQL_SUM_AGGREGATE_282();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_282), ___SQL_SUM_AGGREGATE_282, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_283 = get___SQL_SUM_AGGREGATE_283();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_283), ___SQL_SUM_AGGREGATE_283, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_284 = get___SQL_SUM_AGGREGATE_284();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_284), ___SQL_SUM_AGGREGATE_284, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_285 = get___SQL_SUM_AGGREGATE_285();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_285), ___SQL_SUM_AGGREGATE_285, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_286 = get___SQL_SUM_AGGREGATE_286();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_286), ___SQL_SUM_AGGREGATE_286, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_287 = get___SQL_SUM_AGGREGATE_287();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_287), ___SQL_SUM_AGGREGATE_287, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_288 = get___SQL_SUM_AGGREGATE_288();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_288), ___SQL_SUM_AGGREGATE_288, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_289 = get___SQL_SUM_AGGREGATE_289();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_289), ___SQL_SUM_AGGREGATE_289, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_290 = get___SQL_SUM_AGGREGATE_290();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_290), ___SQL_SUM_AGGREGATE_290, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_291 = get___SQL_SUM_AGGREGATE_291();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_291), ___SQL_SUM_AGGREGATE_291, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_292 = get___SQL_SUM_AGGREGATE_292();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_292), ___SQL_SUM_AGGREGATE_292, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_293 = get___SQL_SUM_AGGREGATE_293();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_293), ___SQL_SUM_AGGREGATE_293, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_294 = get___SQL_SUM_AGGREGATE_294();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_294), ___SQL_SUM_AGGREGATE_294, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_295 = get___SQL_SUM_AGGREGATE_295();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_295), ___SQL_SUM_AGGREGATE_295, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_296 = get___SQL_SUM_AGGREGATE_296();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_296), ___SQL_SUM_AGGREGATE_296, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_297 = get___SQL_SUM_AGGREGATE_297();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_297), ___SQL_SUM_AGGREGATE_297, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_298 = get___SQL_SUM_AGGREGATE_298();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_298), ___SQL_SUM_AGGREGATE_298, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_299 = get___SQL_SUM_AGGREGATE_299();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_299), ___SQL_SUM_AGGREGATE_299, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_300 = get___SQL_SUM_AGGREGATE_300();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_300), ___SQL_SUM_AGGREGATE_300, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_301 = get___SQL_SUM_AGGREGATE_301();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_301), ___SQL_SUM_AGGREGATE_301, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_302 = get___SQL_SUM_AGGREGATE_302();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_302), ___SQL_SUM_AGGREGATE_302, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_303 = get___SQL_SUM_AGGREGATE_303();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_303), ___SQL_SUM_AGGREGATE_303, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_304 = get___SQL_SUM_AGGREGATE_304();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_304), ___SQL_SUM_AGGREGATE_304, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_305 = get___SQL_SUM_AGGREGATE_305();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_305), ___SQL_SUM_AGGREGATE_305, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_306 = get___SQL_SUM_AGGREGATE_306();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_306), ___SQL_SUM_AGGREGATE_306, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_307 = get___SQL_SUM_AGGREGATE_307();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_307), ___SQL_SUM_AGGREGATE_307, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_308 = get___SQL_SUM_AGGREGATE_308();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_308), ___SQL_SUM_AGGREGATE_308, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_309 = get___SQL_SUM_AGGREGATE_309();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_309), ___SQL_SUM_AGGREGATE_309, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_310 = get___SQL_SUM_AGGREGATE_310();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_310), ___SQL_SUM_AGGREGATE_310, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_311 = get___SQL_SUM_AGGREGATE_311();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_311), ___SQL_SUM_AGGREGATE_311, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_312 = get___SQL_SUM_AGGREGATE_312();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_312), ___SQL_SUM_AGGREGATE_312, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_313 = get___SQL_SUM_AGGREGATE_313();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_313), ___SQL_SUM_AGGREGATE_313, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_314 = get___SQL_SUM_AGGREGATE_314();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_314), ___SQL_SUM_AGGREGATE_314, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_315 = get___SQL_SUM_AGGREGATE_315();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_315), ___SQL_SUM_AGGREGATE_315, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_316 = get___SQL_SUM_AGGREGATE_316();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_316), ___SQL_SUM_AGGREGATE_316, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_317 = get___SQL_SUM_AGGREGATE_317();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_317), ___SQL_SUM_AGGREGATE_317, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_318 = get___SQL_SUM_AGGREGATE_318();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_318), ___SQL_SUM_AGGREGATE_318, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_319 = get___SQL_SUM_AGGREGATE_319();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_319), ___SQL_SUM_AGGREGATE_319, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_320 = get___SQL_SUM_AGGREGATE_320();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_320), ___SQL_SUM_AGGREGATE_320, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_321 = get___SQL_SUM_AGGREGATE_321();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_321), ___SQL_SUM_AGGREGATE_321, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_322 = get___SQL_SUM_AGGREGATE_322();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_322), ___SQL_SUM_AGGREGATE_322, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_323 = get___SQL_SUM_AGGREGATE_323();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_323), ___SQL_SUM_AGGREGATE_323, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_324 = get___SQL_SUM_AGGREGATE_324();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_324), ___SQL_SUM_AGGREGATE_324, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_325 = get___SQL_SUM_AGGREGATE_325();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_325), ___SQL_SUM_AGGREGATE_325, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_326 = get___SQL_SUM_AGGREGATE_326();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_326), ___SQL_SUM_AGGREGATE_326, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_327 = get___SQL_SUM_AGGREGATE_327();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_327), ___SQL_SUM_AGGREGATE_327, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_328 = get___SQL_SUM_AGGREGATE_328();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_328), ___SQL_SUM_AGGREGATE_328, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_329 = get___SQL_SUM_AGGREGATE_329();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_329), ___SQL_SUM_AGGREGATE_329, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_330 = get___SQL_SUM_AGGREGATE_330();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_330), ___SQL_SUM_AGGREGATE_330, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_331 = get___SQL_SUM_AGGREGATE_331();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_331), ___SQL_SUM_AGGREGATE_331, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_332 = get___SQL_SUM_AGGREGATE_332();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_332), ___SQL_SUM_AGGREGATE_332, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_333 = get___SQL_SUM_AGGREGATE_333();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_333), ___SQL_SUM_AGGREGATE_333, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_334 = get___SQL_SUM_AGGREGATE_334();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_334), ___SQL_SUM_AGGREGATE_334, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_335 = get___SQL_SUM_AGGREGATE_335();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_335), ___SQL_SUM_AGGREGATE_335, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_336 = get___SQL_SUM_AGGREGATE_336();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_336), ___SQL_SUM_AGGREGATE_336, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_337 = get___SQL_SUM_AGGREGATE_337();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_337), ___SQL_SUM_AGGREGATE_337, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_338 = get___SQL_SUM_AGGREGATE_338();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_338), ___SQL_SUM_AGGREGATE_338, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_339 = get___SQL_SUM_AGGREGATE_339();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_339), ___SQL_SUM_AGGREGATE_339, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_340 = get___SQL_SUM_AGGREGATE_340();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_340), ___SQL_SUM_AGGREGATE_340, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_341 = get___SQL_SUM_AGGREGATE_341();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_341), ___SQL_SUM_AGGREGATE_341, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_342 = get___SQL_SUM_AGGREGATE_342();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_342), ___SQL_SUM_AGGREGATE_342, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_343 = get___SQL_SUM_AGGREGATE_343();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_343), ___SQL_SUM_AGGREGATE_343, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_344 = get___SQL_SUM_AGGREGATE_344();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_344), ___SQL_SUM_AGGREGATE_344, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_345 = get___SQL_SUM_AGGREGATE_345();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_345), ___SQL_SUM_AGGREGATE_345, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_346 = get___SQL_SUM_AGGREGATE_346();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_346), ___SQL_SUM_AGGREGATE_346, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_347 = get___SQL_SUM_AGGREGATE_347();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_347), ___SQL_SUM_AGGREGATE_347, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_348 = get___SQL_SUM_AGGREGATE_348();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_348), ___SQL_SUM_AGGREGATE_348, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_349 = get___SQL_SUM_AGGREGATE_349();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_349), ___SQL_SUM_AGGREGATE_349, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_350 = get___SQL_SUM_AGGREGATE_350();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_350), ___SQL_SUM_AGGREGATE_350, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_351 = get___SQL_SUM_AGGREGATE_351();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_351), ___SQL_SUM_AGGREGATE_351, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_352 = get___SQL_SUM_AGGREGATE_352();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_352), ___SQL_SUM_AGGREGATE_352, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_353 = get___SQL_SUM_AGGREGATE_353();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_353), ___SQL_SUM_AGGREGATE_353, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_354 = get___SQL_SUM_AGGREGATE_354();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_354), ___SQL_SUM_AGGREGATE_354, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_355 = get___SQL_SUM_AGGREGATE_355();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_355), ___SQL_SUM_AGGREGATE_355, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_356 = get___SQL_SUM_AGGREGATE_356();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_356), ___SQL_SUM_AGGREGATE_356, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_357 = get___SQL_SUM_AGGREGATE_357();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_357), ___SQL_SUM_AGGREGATE_357, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_358 = get___SQL_SUM_AGGREGATE_358();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_358), ___SQL_SUM_AGGREGATE_358, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_359 = get___SQL_SUM_AGGREGATE_359();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_359), ___SQL_SUM_AGGREGATE_359, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_360 = get___SQL_SUM_AGGREGATE_360();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_360), ___SQL_SUM_AGGREGATE_360, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_361 = get___SQL_SUM_AGGREGATE_361();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_361), ___SQL_SUM_AGGREGATE_361, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_362 = get___SQL_SUM_AGGREGATE_362();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_362), ___SQL_SUM_AGGREGATE_362, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_363 = get___SQL_SUM_AGGREGATE_363();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_363), ___SQL_SUM_AGGREGATE_363, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_364 = get___SQL_SUM_AGGREGATE_364();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_364), ___SQL_SUM_AGGREGATE_364, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_365 = get___SQL_SUM_AGGREGATE_365();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_365), ___SQL_SUM_AGGREGATE_365, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_366 = get___SQL_SUM_AGGREGATE_366();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_366), ___SQL_SUM_AGGREGATE_366, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_367 = get___SQL_SUM_AGGREGATE_367();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_367), ___SQL_SUM_AGGREGATE_367, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_368 = get___SQL_SUM_AGGREGATE_368();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_368), ___SQL_SUM_AGGREGATE_368, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_369 = get___SQL_SUM_AGGREGATE_369();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_369), ___SQL_SUM_AGGREGATE_369, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_370 = get___SQL_SUM_AGGREGATE_370();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_370), ___SQL_SUM_AGGREGATE_370, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_371 = get___SQL_SUM_AGGREGATE_371();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_371), ___SQL_SUM_AGGREGATE_371, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_372 = get___SQL_SUM_AGGREGATE_372();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_372), ___SQL_SUM_AGGREGATE_372, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_373 = get___SQL_SUM_AGGREGATE_373();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_373), ___SQL_SUM_AGGREGATE_373, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_374 = get___SQL_SUM_AGGREGATE_374();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_374), ___SQL_SUM_AGGREGATE_374, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_375 = get___SQL_SUM_AGGREGATE_375();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_375), ___SQL_SUM_AGGREGATE_375, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_376 = get___SQL_SUM_AGGREGATE_376();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_376), ___SQL_SUM_AGGREGATE_376, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_377 = get___SQL_SUM_AGGREGATE_377();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_377), ___SQL_SUM_AGGREGATE_377, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_378 = get___SQL_SUM_AGGREGATE_378();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_378), ___SQL_SUM_AGGREGATE_378, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_379 = get___SQL_SUM_AGGREGATE_379();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_379), ___SQL_SUM_AGGREGATE_379, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_380 = get___SQL_SUM_AGGREGATE_380();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_380), ___SQL_SUM_AGGREGATE_380, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_381 = get___SQL_SUM_AGGREGATE_381();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_381), ___SQL_SUM_AGGREGATE_381, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_382 = get___SQL_SUM_AGGREGATE_382();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_382), ___SQL_SUM_AGGREGATE_382, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_383 = get___SQL_SUM_AGGREGATE_383();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_383), ___SQL_SUM_AGGREGATE_383, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_384 = get___SQL_SUM_AGGREGATE_384();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_384), ___SQL_SUM_AGGREGATE_384, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_385 = get___SQL_SUM_AGGREGATE_385();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_385), ___SQL_SUM_AGGREGATE_385, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_386 = get___SQL_SUM_AGGREGATE_386();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_386), ___SQL_SUM_AGGREGATE_386, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_387 = get___SQL_SUM_AGGREGATE_387();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_387), ___SQL_SUM_AGGREGATE_387, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_388 = get___SQL_SUM_AGGREGATE_388();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_388), ___SQL_SUM_AGGREGATE_388, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_389 = get___SQL_SUM_AGGREGATE_389();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_389), ___SQL_SUM_AGGREGATE_389, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_390 = get___SQL_SUM_AGGREGATE_390();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_390), ___SQL_SUM_AGGREGATE_390, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_391 = get___SQL_SUM_AGGREGATE_391();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_391), ___SQL_SUM_AGGREGATE_391, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_392 = get___SQL_SUM_AGGREGATE_392();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_392), ___SQL_SUM_AGGREGATE_392, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_393 = get___SQL_SUM_AGGREGATE_393();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_393), ___SQL_SUM_AGGREGATE_393, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_394 = get___SQL_SUM_AGGREGATE_394();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_394), ___SQL_SUM_AGGREGATE_394, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_395 = get___SQL_SUM_AGGREGATE_395();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_395), ___SQL_SUM_AGGREGATE_395, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_396 = get___SQL_SUM_AGGREGATE_396();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_396), ___SQL_SUM_AGGREGATE_396, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_397 = get___SQL_SUM_AGGREGATE_397();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_397), ___SQL_SUM_AGGREGATE_397, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_398 = get___SQL_SUM_AGGREGATE_398();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_398), ___SQL_SUM_AGGREGATE_398, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_399 = get___SQL_SUM_AGGREGATE_399();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_399), ___SQL_SUM_AGGREGATE_399, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_400 = get___SQL_SUM_AGGREGATE_400();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_400), ___SQL_SUM_AGGREGATE_400, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_401 = get___SQL_SUM_AGGREGATE_401();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_401), ___SQL_SUM_AGGREGATE_401, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_402 = get___SQL_SUM_AGGREGATE_402();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_402), ___SQL_SUM_AGGREGATE_402, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_403 = get___SQL_SUM_AGGREGATE_403();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_403), ___SQL_SUM_AGGREGATE_403, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_404 = get___SQL_SUM_AGGREGATE_404();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_404), ___SQL_SUM_AGGREGATE_404, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_405 = get___SQL_SUM_AGGREGATE_405();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_405), ___SQL_SUM_AGGREGATE_405, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_406 = get___SQL_SUM_AGGREGATE_406();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_406), ___SQL_SUM_AGGREGATE_406, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_407 = get___SQL_SUM_AGGREGATE_407();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_407), ___SQL_SUM_AGGREGATE_407, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_408 = get___SQL_SUM_AGGREGATE_408();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_408), ___SQL_SUM_AGGREGATE_408, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_409 = get___SQL_SUM_AGGREGATE_409();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_409), ___SQL_SUM_AGGREGATE_409, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_410 = get___SQL_SUM_AGGREGATE_410();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_410), ___SQL_SUM_AGGREGATE_410, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_411 = get___SQL_SUM_AGGREGATE_411();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_411), ___SQL_SUM_AGGREGATE_411, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_412 = get___SQL_SUM_AGGREGATE_412();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_412), ___SQL_SUM_AGGREGATE_412, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_413 = get___SQL_SUM_AGGREGATE_413();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_413), ___SQL_SUM_AGGREGATE_413, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_414 = get___SQL_SUM_AGGREGATE_414();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_414), ___SQL_SUM_AGGREGATE_414, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_415 = get___SQL_SUM_AGGREGATE_415();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_415), ___SQL_SUM_AGGREGATE_415, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_416 = get___SQL_SUM_AGGREGATE_416();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_416), ___SQL_SUM_AGGREGATE_416, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_417 = get___SQL_SUM_AGGREGATE_417();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_417), ___SQL_SUM_AGGREGATE_417, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_418 = get___SQL_SUM_AGGREGATE_418();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_418), ___SQL_SUM_AGGREGATE_418, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_419 = get___SQL_SUM_AGGREGATE_419();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_419), ___SQL_SUM_AGGREGATE_419, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_420 = get___SQL_SUM_AGGREGATE_420();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_420), ___SQL_SUM_AGGREGATE_420, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_421 = get___SQL_SUM_AGGREGATE_421();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_421), ___SQL_SUM_AGGREGATE_421, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_422 = get___SQL_SUM_AGGREGATE_422();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_422), ___SQL_SUM_AGGREGATE_422, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_423 = get___SQL_SUM_AGGREGATE_423();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_423), ___SQL_SUM_AGGREGATE_423, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_424 = get___SQL_SUM_AGGREGATE_424();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_424), ___SQL_SUM_AGGREGATE_424, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_425 = get___SQL_SUM_AGGREGATE_425();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_425), ___SQL_SUM_AGGREGATE_425, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_426 = get___SQL_SUM_AGGREGATE_426();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_426), ___SQL_SUM_AGGREGATE_426, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_427 = get___SQL_SUM_AGGREGATE_427();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_427), ___SQL_SUM_AGGREGATE_427, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_428 = get___SQL_SUM_AGGREGATE_428();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_428), ___SQL_SUM_AGGREGATE_428, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_429 = get___SQL_SUM_AGGREGATE_429();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_429), ___SQL_SUM_AGGREGATE_429, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_430 = get___SQL_SUM_AGGREGATE_430();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_430), ___SQL_SUM_AGGREGATE_430, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_431 = get___SQL_SUM_AGGREGATE_431();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_431), ___SQL_SUM_AGGREGATE_431, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_432 = get___SQL_SUM_AGGREGATE_432();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_432), ___SQL_SUM_AGGREGATE_432, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_433 = get___SQL_SUM_AGGREGATE_433();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_433), ___SQL_SUM_AGGREGATE_433, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_434 = get___SQL_SUM_AGGREGATE_434();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_434), ___SQL_SUM_AGGREGATE_434, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_435 = get___SQL_SUM_AGGREGATE_435();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_435), ___SQL_SUM_AGGREGATE_435, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_436 = get___SQL_SUM_AGGREGATE_436();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_436), ___SQL_SUM_AGGREGATE_436, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_437 = get___SQL_SUM_AGGREGATE_437();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_437), ___SQL_SUM_AGGREGATE_437, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_438 = get___SQL_SUM_AGGREGATE_438();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_438), ___SQL_SUM_AGGREGATE_438, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_439 = get___SQL_SUM_AGGREGATE_439();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_439), ___SQL_SUM_AGGREGATE_439, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_440 = get___SQL_SUM_AGGREGATE_440();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_440), ___SQL_SUM_AGGREGATE_440, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_441 = get___SQL_SUM_AGGREGATE_441();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_441), ___SQL_SUM_AGGREGATE_441, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_442 = get___SQL_SUM_AGGREGATE_442();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_442), ___SQL_SUM_AGGREGATE_442, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_443 = get___SQL_SUM_AGGREGATE_443();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_443), ___SQL_SUM_AGGREGATE_443, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_444 = get___SQL_SUM_AGGREGATE_444();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_444), ___SQL_SUM_AGGREGATE_444, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_445 = get___SQL_SUM_AGGREGATE_445();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_445), ___SQL_SUM_AGGREGATE_445, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_446 = get___SQL_SUM_AGGREGATE_446();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_446), ___SQL_SUM_AGGREGATE_446, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_447 = get___SQL_SUM_AGGREGATE_447();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_447), ___SQL_SUM_AGGREGATE_447, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_448 = get___SQL_SUM_AGGREGATE_448();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_448), ___SQL_SUM_AGGREGATE_448, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_449 = get___SQL_SUM_AGGREGATE_449();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_449), ___SQL_SUM_AGGREGATE_449, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_450 = get___SQL_SUM_AGGREGATE_450();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_450), ___SQL_SUM_AGGREGATE_450, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_451 = get___SQL_SUM_AGGREGATE_451();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_451), ___SQL_SUM_AGGREGATE_451, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_452 = get___SQL_SUM_AGGREGATE_452();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_452), ___SQL_SUM_AGGREGATE_452, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_453 = get___SQL_SUM_AGGREGATE_453();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_453), ___SQL_SUM_AGGREGATE_453, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_454 = get___SQL_SUM_AGGREGATE_454();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_454), ___SQL_SUM_AGGREGATE_454, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_455 = get___SQL_SUM_AGGREGATE_455();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_455), ___SQL_SUM_AGGREGATE_455, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_456 = get___SQL_SUM_AGGREGATE_456();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_456), ___SQL_SUM_AGGREGATE_456, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_457 = get___SQL_SUM_AGGREGATE_457();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_457), ___SQL_SUM_AGGREGATE_457, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_458 = get___SQL_SUM_AGGREGATE_458();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_458), ___SQL_SUM_AGGREGATE_458, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_459 = get___SQL_SUM_AGGREGATE_459();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_459), ___SQL_SUM_AGGREGATE_459, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_460 = get___SQL_SUM_AGGREGATE_460();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_460), ___SQL_SUM_AGGREGATE_460, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_461 = get___SQL_SUM_AGGREGATE_461();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_461), ___SQL_SUM_AGGREGATE_461, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_462 = get___SQL_SUM_AGGREGATE_462();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_462), ___SQL_SUM_AGGREGATE_462, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_463 = get___SQL_SUM_AGGREGATE_463();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_463), ___SQL_SUM_AGGREGATE_463, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_464 = get___SQL_SUM_AGGREGATE_464();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_464), ___SQL_SUM_AGGREGATE_464, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_465 = get___SQL_SUM_AGGREGATE_465();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_465), ___SQL_SUM_AGGREGATE_465, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_466 = get___SQL_SUM_AGGREGATE_466();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_466), ___SQL_SUM_AGGREGATE_466, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_467 = get___SQL_SUM_AGGREGATE_467();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_467), ___SQL_SUM_AGGREGATE_467, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_468 = get___SQL_SUM_AGGREGATE_468();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_468), ___SQL_SUM_AGGREGATE_468, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_469 = get___SQL_SUM_AGGREGATE_469();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_469), ___SQL_SUM_AGGREGATE_469, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_470 = get___SQL_SUM_AGGREGATE_470();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_470), ___SQL_SUM_AGGREGATE_470, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_471 = get___SQL_SUM_AGGREGATE_471();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_471), ___SQL_SUM_AGGREGATE_471, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_472 = get___SQL_SUM_AGGREGATE_472();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_472), ___SQL_SUM_AGGREGATE_472, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_473 = get___SQL_SUM_AGGREGATE_473();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_473), ___SQL_SUM_AGGREGATE_473, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_474 = get___SQL_SUM_AGGREGATE_474();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_474), ___SQL_SUM_AGGREGATE_474, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_475 = get___SQL_SUM_AGGREGATE_475();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_475), ___SQL_SUM_AGGREGATE_475, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_476 = get___SQL_SUM_AGGREGATE_476();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_476), ___SQL_SUM_AGGREGATE_476, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_477 = get___SQL_SUM_AGGREGATE_477();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_477), ___SQL_SUM_AGGREGATE_477, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_478 = get___SQL_SUM_AGGREGATE_478();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_478), ___SQL_SUM_AGGREGATE_478, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_479 = get___SQL_SUM_AGGREGATE_479();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_479), ___SQL_SUM_AGGREGATE_479, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_480 = get___SQL_SUM_AGGREGATE_480();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_480), ___SQL_SUM_AGGREGATE_480, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_481 = get___SQL_SUM_AGGREGATE_481();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_481), ___SQL_SUM_AGGREGATE_481, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_482 = get___SQL_SUM_AGGREGATE_482();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_482), ___SQL_SUM_AGGREGATE_482, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_483 = get___SQL_SUM_AGGREGATE_483();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_483), ___SQL_SUM_AGGREGATE_483, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_484 = get___SQL_SUM_AGGREGATE_484();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_484), ___SQL_SUM_AGGREGATE_484, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_485 = get___SQL_SUM_AGGREGATE_485();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_485), ___SQL_SUM_AGGREGATE_485, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_486 = get___SQL_SUM_AGGREGATE_486();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_486), ___SQL_SUM_AGGREGATE_486, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_487 = get___SQL_SUM_AGGREGATE_487();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_487), ___SQL_SUM_AGGREGATE_487, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_488 = get___SQL_SUM_AGGREGATE_488();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_488), ___SQL_SUM_AGGREGATE_488, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_489 = get___SQL_SUM_AGGREGATE_489();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_489), ___SQL_SUM_AGGREGATE_489, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_490 = get___SQL_SUM_AGGREGATE_490();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_490), ___SQL_SUM_AGGREGATE_490, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_491 = get___SQL_SUM_AGGREGATE_491();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_491), ___SQL_SUM_AGGREGATE_491, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_492 = get___SQL_SUM_AGGREGATE_492();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_492), ___SQL_SUM_AGGREGATE_492, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_493 = get___SQL_SUM_AGGREGATE_493();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_493), ___SQL_SUM_AGGREGATE_493, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_494 = get___SQL_SUM_AGGREGATE_494();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_494), ___SQL_SUM_AGGREGATE_494, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_495 = get___SQL_SUM_AGGREGATE_495();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_495), ___SQL_SUM_AGGREGATE_495, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_496 = get___SQL_SUM_AGGREGATE_496();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_496), ___SQL_SUM_AGGREGATE_496, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_497 = get___SQL_SUM_AGGREGATE_497();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_497), ___SQL_SUM_AGGREGATE_497, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_498 = get___SQL_SUM_AGGREGATE_498();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_498), ___SQL_SUM_AGGREGATE_498, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_499 = get___SQL_SUM_AGGREGATE_499();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_499), ___SQL_SUM_AGGREGATE_499, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_500 = get___SQL_SUM_AGGREGATE_500();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_500), ___SQL_SUM_AGGREGATE_500, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_501 = get___SQL_SUM_AGGREGATE_501();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_501), ___SQL_SUM_AGGREGATE_501, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_502 = get___SQL_SUM_AGGREGATE_502();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_502), ___SQL_SUM_AGGREGATE_502, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_503 = get___SQL_SUM_AGGREGATE_503();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_503), ___SQL_SUM_AGGREGATE_503, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_504 = get___SQL_SUM_AGGREGATE_504();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_504), ___SQL_SUM_AGGREGATE_504, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_505 = get___SQL_SUM_AGGREGATE_505();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_505), ___SQL_SUM_AGGREGATE_505, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_506 = get___SQL_SUM_AGGREGATE_506();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_506), ___SQL_SUM_AGGREGATE_506, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_507 = get___SQL_SUM_AGGREGATE_507();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_507), ___SQL_SUM_AGGREGATE_507, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_508 = get___SQL_SUM_AGGREGATE_508();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_508), ___SQL_SUM_AGGREGATE_508, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_509 = get___SQL_SUM_AGGREGATE_509();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_509), ___SQL_SUM_AGGREGATE_509, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_510 = get___SQL_SUM_AGGREGATE_510();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_510), ___SQL_SUM_AGGREGATE_510, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_511 = get___SQL_SUM_AGGREGATE_511();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_511), ___SQL_SUM_AGGREGATE_511, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_512 = get___SQL_SUM_AGGREGATE_512();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_512), ___SQL_SUM_AGGREGATE_512, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_513 = get___SQL_SUM_AGGREGATE_513();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_513), ___SQL_SUM_AGGREGATE_513, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_514 = get___SQL_SUM_AGGREGATE_514();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_514), ___SQL_SUM_AGGREGATE_514, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_515 = get___SQL_SUM_AGGREGATE_515();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_515), ___SQL_SUM_AGGREGATE_515, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_516 = get___SQL_SUM_AGGREGATE_516();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_516), ___SQL_SUM_AGGREGATE_516, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_517 = get___SQL_SUM_AGGREGATE_517();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_517), ___SQL_SUM_AGGREGATE_517, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_518 = get___SQL_SUM_AGGREGATE_518();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_518), ___SQL_SUM_AGGREGATE_518, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_519 = get___SQL_SUM_AGGREGATE_519();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_519), ___SQL_SUM_AGGREGATE_519, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_520 = get___SQL_SUM_AGGREGATE_520();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_520), ___SQL_SUM_AGGREGATE_520, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_521 = get___SQL_SUM_AGGREGATE_521();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_521), ___SQL_SUM_AGGREGATE_521, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_522 = get___SQL_SUM_AGGREGATE_522();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_522), ___SQL_SUM_AGGREGATE_522, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_523 = get___SQL_SUM_AGGREGATE_523();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_523), ___SQL_SUM_AGGREGATE_523, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_524 = get___SQL_SUM_AGGREGATE_524();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_524), ___SQL_SUM_AGGREGATE_524, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_525 = get___SQL_SUM_AGGREGATE_525();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_525), ___SQL_SUM_AGGREGATE_525, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_526 = get___SQL_SUM_AGGREGATE_526();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_526), ___SQL_SUM_AGGREGATE_526, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_527 = get___SQL_SUM_AGGREGATE_527();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_527), ___SQL_SUM_AGGREGATE_527, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_528 = get___SQL_SUM_AGGREGATE_528();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_528), ___SQL_SUM_AGGREGATE_528, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_529 = get___SQL_SUM_AGGREGATE_529();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_529), ___SQL_SUM_AGGREGATE_529, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_530 = get___SQL_SUM_AGGREGATE_530();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_530), ___SQL_SUM_AGGREGATE_530, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_531 = get___SQL_SUM_AGGREGATE_531();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_531), ___SQL_SUM_AGGREGATE_531, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_532 = get___SQL_SUM_AGGREGATE_532();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_532), ___SQL_SUM_AGGREGATE_532, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_533 = get___SQL_SUM_AGGREGATE_533();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_533), ___SQL_SUM_AGGREGATE_533, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_534 = get___SQL_SUM_AGGREGATE_534();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_534), ___SQL_SUM_AGGREGATE_534, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_535 = get___SQL_SUM_AGGREGATE_535();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_535), ___SQL_SUM_AGGREGATE_535, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_536 = get___SQL_SUM_AGGREGATE_536();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_536), ___SQL_SUM_AGGREGATE_536, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_537 = get___SQL_SUM_AGGREGATE_537();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_537), ___SQL_SUM_AGGREGATE_537, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_538 = get___SQL_SUM_AGGREGATE_538();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_538), ___SQL_SUM_AGGREGATE_538, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_539 = get___SQL_SUM_AGGREGATE_539();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_539), ___SQL_SUM_AGGREGATE_539, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_540 = get___SQL_SUM_AGGREGATE_540();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_540), ___SQL_SUM_AGGREGATE_540, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_541 = get___SQL_SUM_AGGREGATE_541();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_541), ___SQL_SUM_AGGREGATE_541, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_542 = get___SQL_SUM_AGGREGATE_542();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_542), ___SQL_SUM_AGGREGATE_542, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_543 = get___SQL_SUM_AGGREGATE_543();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_543), ___SQL_SUM_AGGREGATE_543, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_544 = get___SQL_SUM_AGGREGATE_544();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_544), ___SQL_SUM_AGGREGATE_544, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_545 = get___SQL_SUM_AGGREGATE_545();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_545), ___SQL_SUM_AGGREGATE_545, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_546 = get___SQL_SUM_AGGREGATE_546();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_546), ___SQL_SUM_AGGREGATE_546, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_547 = get___SQL_SUM_AGGREGATE_547();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_547), ___SQL_SUM_AGGREGATE_547, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_548 = get___SQL_SUM_AGGREGATE_548();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_548), ___SQL_SUM_AGGREGATE_548, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_549 = get___SQL_SUM_AGGREGATE_549();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_549), ___SQL_SUM_AGGREGATE_549, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_550 = get___SQL_SUM_AGGREGATE_550();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_550), ___SQL_SUM_AGGREGATE_550, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_551 = get___SQL_SUM_AGGREGATE_551();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_551), ___SQL_SUM_AGGREGATE_551, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_552 = get___SQL_SUM_AGGREGATE_552();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_552), ___SQL_SUM_AGGREGATE_552, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_553 = get___SQL_SUM_AGGREGATE_553();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_553), ___SQL_SUM_AGGREGATE_553, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_554 = get___SQL_SUM_AGGREGATE_554();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_554), ___SQL_SUM_AGGREGATE_554, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_555 = get___SQL_SUM_AGGREGATE_555();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_555), ___SQL_SUM_AGGREGATE_555, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_556 = get___SQL_SUM_AGGREGATE_556();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_556), ___SQL_SUM_AGGREGATE_556, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_557 = get___SQL_SUM_AGGREGATE_557();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_557), ___SQL_SUM_AGGREGATE_557, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_558 = get___SQL_SUM_AGGREGATE_558();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_558), ___SQL_SUM_AGGREGATE_558, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_559 = get___SQL_SUM_AGGREGATE_559();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_559), ___SQL_SUM_AGGREGATE_559, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_560 = get___SQL_SUM_AGGREGATE_560();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_560), ___SQL_SUM_AGGREGATE_560, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_561 = get___SQL_SUM_AGGREGATE_561();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_561), ___SQL_SUM_AGGREGATE_561, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_562 = get___SQL_SUM_AGGREGATE_562();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_562), ___SQL_SUM_AGGREGATE_562, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_563 = get___SQL_SUM_AGGREGATE_563();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_563), ___SQL_SUM_AGGREGATE_563, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_564 = get___SQL_SUM_AGGREGATE_564();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_564), ___SQL_SUM_AGGREGATE_564, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_565 = get___SQL_SUM_AGGREGATE_565();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_565), ___SQL_SUM_AGGREGATE_565, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_566 = get___SQL_SUM_AGGREGATE_566();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_566), ___SQL_SUM_AGGREGATE_566, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_567 = get___SQL_SUM_AGGREGATE_567();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_567), ___SQL_SUM_AGGREGATE_567, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_568 = get___SQL_SUM_AGGREGATE_568();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_568), ___SQL_SUM_AGGREGATE_568, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_569 = get___SQL_SUM_AGGREGATE_569();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_569), ___SQL_SUM_AGGREGATE_569, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_570 = get___SQL_SUM_AGGREGATE_570();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_570), ___SQL_SUM_AGGREGATE_570, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_571 = get___SQL_SUM_AGGREGATE_571();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_571), ___SQL_SUM_AGGREGATE_571, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_572 = get___SQL_SUM_AGGREGATE_572();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_572), ___SQL_SUM_AGGREGATE_572, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_573 = get___SQL_SUM_AGGREGATE_573();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_573), ___SQL_SUM_AGGREGATE_573, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_574 = get___SQL_SUM_AGGREGATE_574();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_574), ___SQL_SUM_AGGREGATE_574, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_575 = get___SQL_SUM_AGGREGATE_575();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_575), ___SQL_SUM_AGGREGATE_575, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_576 = get___SQL_SUM_AGGREGATE_576();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_576), ___SQL_SUM_AGGREGATE_576, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_577 = get___SQL_SUM_AGGREGATE_577();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_577), ___SQL_SUM_AGGREGATE_577, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_578 = get___SQL_SUM_AGGREGATE_578();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_578), ___SQL_SUM_AGGREGATE_578, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_579 = get___SQL_SUM_AGGREGATE_579();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_579), ___SQL_SUM_AGGREGATE_579, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_580 = get___SQL_SUM_AGGREGATE_580();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_580), ___SQL_SUM_AGGREGATE_580, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_581 = get___SQL_SUM_AGGREGATE_581();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_581), ___SQL_SUM_AGGREGATE_581, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_582 = get___SQL_SUM_AGGREGATE_582();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_582), ___SQL_SUM_AGGREGATE_582, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_583 = get___SQL_SUM_AGGREGATE_583();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_583), ___SQL_SUM_AGGREGATE_583, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_584 = get___SQL_SUM_AGGREGATE_584();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_584), ___SQL_SUM_AGGREGATE_584, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_585 = get___SQL_SUM_AGGREGATE_585();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_585), ___SQL_SUM_AGGREGATE_585, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_586 = get___SQL_SUM_AGGREGATE_586();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_586), ___SQL_SUM_AGGREGATE_586, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_587 = get___SQL_SUM_AGGREGATE_587();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_587), ___SQL_SUM_AGGREGATE_587, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_588 = get___SQL_SUM_AGGREGATE_588();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_588), ___SQL_SUM_AGGREGATE_588, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_589 = get___SQL_SUM_AGGREGATE_589();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_589), ___SQL_SUM_AGGREGATE_589, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_590 = get___SQL_SUM_AGGREGATE_590();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_590), ___SQL_SUM_AGGREGATE_590, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_591 = get___SQL_SUM_AGGREGATE_591();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_591), ___SQL_SUM_AGGREGATE_591, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_592 = get___SQL_SUM_AGGREGATE_592();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_592), ___SQL_SUM_AGGREGATE_592, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_593 = get___SQL_SUM_AGGREGATE_593();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_593), ___SQL_SUM_AGGREGATE_593, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_594 = get___SQL_SUM_AGGREGATE_594();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_594), ___SQL_SUM_AGGREGATE_594, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_595 = get___SQL_SUM_AGGREGATE_595();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_595), ___SQL_SUM_AGGREGATE_595, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_596 = get___SQL_SUM_AGGREGATE_596();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_596), ___SQL_SUM_AGGREGATE_596, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_597 = get___SQL_SUM_AGGREGATE_597();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_597), ___SQL_SUM_AGGREGATE_597, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_598 = get___SQL_SUM_AGGREGATE_598();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_598), ___SQL_SUM_AGGREGATE_598, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_599 = get___SQL_SUM_AGGREGATE_599();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_599), ___SQL_SUM_AGGREGATE_599, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_600 = get___SQL_SUM_AGGREGATE_600();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_600), ___SQL_SUM_AGGREGATE_600, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_601 = get___SQL_SUM_AGGREGATE_601();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_601), ___SQL_SUM_AGGREGATE_601, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_602 = get___SQL_SUM_AGGREGATE_602();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_602), ___SQL_SUM_AGGREGATE_602, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_603 = get___SQL_SUM_AGGREGATE_603();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_603), ___SQL_SUM_AGGREGATE_603, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_604 = get___SQL_SUM_AGGREGATE_604();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_604), ___SQL_SUM_AGGREGATE_604, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_605 = get___SQL_SUM_AGGREGATE_605();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_605), ___SQL_SUM_AGGREGATE_605, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_606 = get___SQL_SUM_AGGREGATE_606();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_606), ___SQL_SUM_AGGREGATE_606, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_607 = get___SQL_SUM_AGGREGATE_607();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_607), ___SQL_SUM_AGGREGATE_607, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_608 = get___SQL_SUM_AGGREGATE_608();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_608), ___SQL_SUM_AGGREGATE_608, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_609 = get___SQL_SUM_AGGREGATE_609();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_609), ___SQL_SUM_AGGREGATE_609, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_610 = get___SQL_SUM_AGGREGATE_610();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_610), ___SQL_SUM_AGGREGATE_610, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_611 = get___SQL_SUM_AGGREGATE_611();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_611), ___SQL_SUM_AGGREGATE_611, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_612 = get___SQL_SUM_AGGREGATE_612();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_612), ___SQL_SUM_AGGREGATE_612, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_613 = get___SQL_SUM_AGGREGATE_613();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_613), ___SQL_SUM_AGGREGATE_613, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_614 = get___SQL_SUM_AGGREGATE_614();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_614), ___SQL_SUM_AGGREGATE_614, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_615 = get___SQL_SUM_AGGREGATE_615();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_615), ___SQL_SUM_AGGREGATE_615, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_616 = get___SQL_SUM_AGGREGATE_616();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_616), ___SQL_SUM_AGGREGATE_616, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_617 = get___SQL_SUM_AGGREGATE_617();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_617), ___SQL_SUM_AGGREGATE_617, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_618 = get___SQL_SUM_AGGREGATE_618();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_618), ___SQL_SUM_AGGREGATE_618, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_619 = get___SQL_SUM_AGGREGATE_619();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_619), ___SQL_SUM_AGGREGATE_619, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_620 = get___SQL_SUM_AGGREGATE_620();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_620), ___SQL_SUM_AGGREGATE_620, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_621 = get___SQL_SUM_AGGREGATE_621();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_621), ___SQL_SUM_AGGREGATE_621, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_622 = get___SQL_SUM_AGGREGATE_622();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_622), ___SQL_SUM_AGGREGATE_622, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_623 = get___SQL_SUM_AGGREGATE_623();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_623), ___SQL_SUM_AGGREGATE_623, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_624 = get___SQL_SUM_AGGREGATE_624();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_624), ___SQL_SUM_AGGREGATE_624, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_625 = get___SQL_SUM_AGGREGATE_625();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_625), ___SQL_SUM_AGGREGATE_625, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_626 = get___SQL_SUM_AGGREGATE_626();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_626), ___SQL_SUM_AGGREGATE_626, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_627 = get___SQL_SUM_AGGREGATE_627();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_627), ___SQL_SUM_AGGREGATE_627, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_628 = get___SQL_SUM_AGGREGATE_628();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_628), ___SQL_SUM_AGGREGATE_628, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_629 = get___SQL_SUM_AGGREGATE_629();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_629), ___SQL_SUM_AGGREGATE_629, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_630 = get___SQL_SUM_AGGREGATE_630();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_630), ___SQL_SUM_AGGREGATE_630, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_631 = get___SQL_SUM_AGGREGATE_631();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_631), ___SQL_SUM_AGGREGATE_631, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_632 = get___SQL_SUM_AGGREGATE_632();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_632), ___SQL_SUM_AGGREGATE_632, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_633 = get___SQL_SUM_AGGREGATE_633();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_633), ___SQL_SUM_AGGREGATE_633, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_634 = get___SQL_SUM_AGGREGATE_634();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_634), ___SQL_SUM_AGGREGATE_634, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_635 = get___SQL_SUM_AGGREGATE_635();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_635), ___SQL_SUM_AGGREGATE_635, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_636 = get___SQL_SUM_AGGREGATE_636();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_636), ___SQL_SUM_AGGREGATE_636, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_637 = get___SQL_SUM_AGGREGATE_637();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_637), ___SQL_SUM_AGGREGATE_637, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_638 = get___SQL_SUM_AGGREGATE_638();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_638), ___SQL_SUM_AGGREGATE_638, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_639 = get___SQL_SUM_AGGREGATE_639();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_639), ___SQL_SUM_AGGREGATE_639, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_640 = get___SQL_SUM_AGGREGATE_640();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_640), ___SQL_SUM_AGGREGATE_640, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_641 = get___SQL_SUM_AGGREGATE_641();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_641), ___SQL_SUM_AGGREGATE_641, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_642 = get___SQL_SUM_AGGREGATE_642();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_642), ___SQL_SUM_AGGREGATE_642, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_643 = get___SQL_SUM_AGGREGATE_643();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_643), ___SQL_SUM_AGGREGATE_643, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_644 = get___SQL_SUM_AGGREGATE_644();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_644), ___SQL_SUM_AGGREGATE_644, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_645 = get___SQL_SUM_AGGREGATE_645();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_645), ___SQL_SUM_AGGREGATE_645, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_646 = get___SQL_SUM_AGGREGATE_646();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_646), ___SQL_SUM_AGGREGATE_646, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_647 = get___SQL_SUM_AGGREGATE_647();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_647), ___SQL_SUM_AGGREGATE_647, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_648 = get___SQL_SUM_AGGREGATE_648();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_648), ___SQL_SUM_AGGREGATE_648, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_649 = get___SQL_SUM_AGGREGATE_649();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_649), ___SQL_SUM_AGGREGATE_649, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_650 = get___SQL_SUM_AGGREGATE_650();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_650), ___SQL_SUM_AGGREGATE_650, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_651 = get___SQL_SUM_AGGREGATE_651();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_651), ___SQL_SUM_AGGREGATE_651, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_652 = get___SQL_SUM_AGGREGATE_652();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_652), ___SQL_SUM_AGGREGATE_652, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_653 = get___SQL_SUM_AGGREGATE_653();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_653), ___SQL_SUM_AGGREGATE_653, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_654 = get___SQL_SUM_AGGREGATE_654();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_654), ___SQL_SUM_AGGREGATE_654, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_655 = get___SQL_SUM_AGGREGATE_655();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_655), ___SQL_SUM_AGGREGATE_655, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_656 = get___SQL_SUM_AGGREGATE_656();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_656), ___SQL_SUM_AGGREGATE_656, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_657 = get___SQL_SUM_AGGREGATE_657();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_657), ___SQL_SUM_AGGREGATE_657, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_658 = get___SQL_SUM_AGGREGATE_658();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_658), ___SQL_SUM_AGGREGATE_658, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_659 = get___SQL_SUM_AGGREGATE_659();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_659), ___SQL_SUM_AGGREGATE_659, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_660 = get___SQL_SUM_AGGREGATE_660();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_660), ___SQL_SUM_AGGREGATE_660, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_661 = get___SQL_SUM_AGGREGATE_661();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_661), ___SQL_SUM_AGGREGATE_661, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_662 = get___SQL_SUM_AGGREGATE_662();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_662), ___SQL_SUM_AGGREGATE_662, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_663 = get___SQL_SUM_AGGREGATE_663();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_663), ___SQL_SUM_AGGREGATE_663, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_664 = get___SQL_SUM_AGGREGATE_664();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_664), ___SQL_SUM_AGGREGATE_664, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_665 = get___SQL_SUM_AGGREGATE_665();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_665), ___SQL_SUM_AGGREGATE_665, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_666 = get___SQL_SUM_AGGREGATE_666();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_666), ___SQL_SUM_AGGREGATE_666, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_667 = get___SQL_SUM_AGGREGATE_667();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_667), ___SQL_SUM_AGGREGATE_667, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_668 = get___SQL_SUM_AGGREGATE_668();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_668), ___SQL_SUM_AGGREGATE_668, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_669 = get___SQL_SUM_AGGREGATE_669();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_669), ___SQL_SUM_AGGREGATE_669, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_670 = get___SQL_SUM_AGGREGATE_670();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_670), ___SQL_SUM_AGGREGATE_670, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_671 = get___SQL_SUM_AGGREGATE_671();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_671), ___SQL_SUM_AGGREGATE_671, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_672 = get___SQL_SUM_AGGREGATE_672();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_672), ___SQL_SUM_AGGREGATE_672, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_673 = get___SQL_SUM_AGGREGATE_673();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_673), ___SQL_SUM_AGGREGATE_673, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_674 = get___SQL_SUM_AGGREGATE_674();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_674), ___SQL_SUM_AGGREGATE_674, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_675 = get___SQL_SUM_AGGREGATE_675();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_675), ___SQL_SUM_AGGREGATE_675, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_676 = get___SQL_SUM_AGGREGATE_676();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_676), ___SQL_SUM_AGGREGATE_676, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_677 = get___SQL_SUM_AGGREGATE_677();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_677), ___SQL_SUM_AGGREGATE_677, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_678 = get___SQL_SUM_AGGREGATE_678();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_678), ___SQL_SUM_AGGREGATE_678, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_679 = get___SQL_SUM_AGGREGATE_679();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_679), ___SQL_SUM_AGGREGATE_679, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_680 = get___SQL_SUM_AGGREGATE_680();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_680), ___SQL_SUM_AGGREGATE_680, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_681 = get___SQL_SUM_AGGREGATE_681();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_681), ___SQL_SUM_AGGREGATE_681, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_682 = get___SQL_SUM_AGGREGATE_682();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_682), ___SQL_SUM_AGGREGATE_682, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_683 = get___SQL_SUM_AGGREGATE_683();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_683), ___SQL_SUM_AGGREGATE_683, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_684 = get___SQL_SUM_AGGREGATE_684();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_684), ___SQL_SUM_AGGREGATE_684, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_685 = get___SQL_SUM_AGGREGATE_685();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_685), ___SQL_SUM_AGGREGATE_685, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_686 = get___SQL_SUM_AGGREGATE_686();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_686), ___SQL_SUM_AGGREGATE_686, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_687 = get___SQL_SUM_AGGREGATE_687();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_687), ___SQL_SUM_AGGREGATE_687, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_688 = get___SQL_SUM_AGGREGATE_688();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_688), ___SQL_SUM_AGGREGATE_688, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_689 = get___SQL_SUM_AGGREGATE_689();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_689), ___SQL_SUM_AGGREGATE_689, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_690 = get___SQL_SUM_AGGREGATE_690();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_690), ___SQL_SUM_AGGREGATE_690, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_691 = get___SQL_SUM_AGGREGATE_691();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_691), ___SQL_SUM_AGGREGATE_691, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_692 = get___SQL_SUM_AGGREGATE_692();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_692), ___SQL_SUM_AGGREGATE_692, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_693 = get___SQL_SUM_AGGREGATE_693();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_693), ___SQL_SUM_AGGREGATE_693, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_694 = get___SQL_SUM_AGGREGATE_694();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_694), ___SQL_SUM_AGGREGATE_694, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_695 = get___SQL_SUM_AGGREGATE_695();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_695), ___SQL_SUM_AGGREGATE_695, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_696 = get___SQL_SUM_AGGREGATE_696();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_696), ___SQL_SUM_AGGREGATE_696, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_697 = get___SQL_SUM_AGGREGATE_697();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_697), ___SQL_SUM_AGGREGATE_697, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_698 = get___SQL_SUM_AGGREGATE_698();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_698), ___SQL_SUM_AGGREGATE_698, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_699 = get___SQL_SUM_AGGREGATE_699();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_699), ___SQL_SUM_AGGREGATE_699, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_700 = get___SQL_SUM_AGGREGATE_700();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_700), ___SQL_SUM_AGGREGATE_700, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_701 = get___SQL_SUM_AGGREGATE_701();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_701), ___SQL_SUM_AGGREGATE_701, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_702 = get___SQL_SUM_AGGREGATE_702();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_702), ___SQL_SUM_AGGREGATE_702, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_703 = get___SQL_SUM_AGGREGATE_703();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_703), ___SQL_SUM_AGGREGATE_703, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_704 = get___SQL_SUM_AGGREGATE_704();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_704), ___SQL_SUM_AGGREGATE_704, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_705 = get___SQL_SUM_AGGREGATE_705();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_705), ___SQL_SUM_AGGREGATE_705, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_706 = get___SQL_SUM_AGGREGATE_706();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_706), ___SQL_SUM_AGGREGATE_706, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_707 = get___SQL_SUM_AGGREGATE_707();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_707), ___SQL_SUM_AGGREGATE_707, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_708 = get___SQL_SUM_AGGREGATE_708();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_708), ___SQL_SUM_AGGREGATE_708, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_709 = get___SQL_SUM_AGGREGATE_709();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_709), ___SQL_SUM_AGGREGATE_709, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_710 = get___SQL_SUM_AGGREGATE_710();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_710), ___SQL_SUM_AGGREGATE_710, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_711 = get___SQL_SUM_AGGREGATE_711();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_711), ___SQL_SUM_AGGREGATE_711, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_712 = get___SQL_SUM_AGGREGATE_712();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_712), ___SQL_SUM_AGGREGATE_712, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_713 = get___SQL_SUM_AGGREGATE_713();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_713), ___SQL_SUM_AGGREGATE_713, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_714 = get___SQL_SUM_AGGREGATE_714();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_714), ___SQL_SUM_AGGREGATE_714, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_715 = get___SQL_SUM_AGGREGATE_715();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_715), ___SQL_SUM_AGGREGATE_715, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_716 = get___SQL_SUM_AGGREGATE_716();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_716), ___SQL_SUM_AGGREGATE_716, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_717 = get___SQL_SUM_AGGREGATE_717();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_717), ___SQL_SUM_AGGREGATE_717, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_718 = get___SQL_SUM_AGGREGATE_718();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_718), ___SQL_SUM_AGGREGATE_718, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_719 = get___SQL_SUM_AGGREGATE_719();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_719), ___SQL_SUM_AGGREGATE_719, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_720 = get___SQL_SUM_AGGREGATE_720();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_720), ___SQL_SUM_AGGREGATE_720, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_721 = get___SQL_SUM_AGGREGATE_721();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_721), ___SQL_SUM_AGGREGATE_721, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_722 = get___SQL_SUM_AGGREGATE_722();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_722), ___SQL_SUM_AGGREGATE_722, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_723 = get___SQL_SUM_AGGREGATE_723();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_723), ___SQL_SUM_AGGREGATE_723, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_724 = get___SQL_SUM_AGGREGATE_724();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_724), ___SQL_SUM_AGGREGATE_724, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_725 = get___SQL_SUM_AGGREGATE_725();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_725), ___SQL_SUM_AGGREGATE_725, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_726 = get___SQL_SUM_AGGREGATE_726();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_726), ___SQL_SUM_AGGREGATE_726, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_727 = get___SQL_SUM_AGGREGATE_727();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_727), ___SQL_SUM_AGGREGATE_727, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_728 = get___SQL_SUM_AGGREGATE_728();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_728), ___SQL_SUM_AGGREGATE_728, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_729 = get___SQL_SUM_AGGREGATE_729();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_729), ___SQL_SUM_AGGREGATE_729, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_730 = get___SQL_SUM_AGGREGATE_730();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_730), ___SQL_SUM_AGGREGATE_730, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_731 = get___SQL_SUM_AGGREGATE_731();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_731), ___SQL_SUM_AGGREGATE_731, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_732 = get___SQL_SUM_AGGREGATE_732();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_732), ___SQL_SUM_AGGREGATE_732, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_733 = get___SQL_SUM_AGGREGATE_733();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_733), ___SQL_SUM_AGGREGATE_733, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_734 = get___SQL_SUM_AGGREGATE_734();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_734), ___SQL_SUM_AGGREGATE_734, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_735 = get___SQL_SUM_AGGREGATE_735();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_735), ___SQL_SUM_AGGREGATE_735, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_736 = get___SQL_SUM_AGGREGATE_736();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_736), ___SQL_SUM_AGGREGATE_736, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_737 = get___SQL_SUM_AGGREGATE_737();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_737), ___SQL_SUM_AGGREGATE_737, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_738 = get___SQL_SUM_AGGREGATE_738();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_738), ___SQL_SUM_AGGREGATE_738, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_739 = get___SQL_SUM_AGGREGATE_739();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_739), ___SQL_SUM_AGGREGATE_739, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_740 = get___SQL_SUM_AGGREGATE_740();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_740), ___SQL_SUM_AGGREGATE_740, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_741 = get___SQL_SUM_AGGREGATE_741();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_741), ___SQL_SUM_AGGREGATE_741, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_742 = get___SQL_SUM_AGGREGATE_742();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_742), ___SQL_SUM_AGGREGATE_742, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_743 = get___SQL_SUM_AGGREGATE_743();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_743), ___SQL_SUM_AGGREGATE_743, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_744 = get___SQL_SUM_AGGREGATE_744();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_744), ___SQL_SUM_AGGREGATE_744, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_745 = get___SQL_SUM_AGGREGATE_745();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_745), ___SQL_SUM_AGGREGATE_745, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_746 = get___SQL_SUM_AGGREGATE_746();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_746), ___SQL_SUM_AGGREGATE_746, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_747 = get___SQL_SUM_AGGREGATE_747();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_747), ___SQL_SUM_AGGREGATE_747, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_748 = get___SQL_SUM_AGGREGATE_748();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_748), ___SQL_SUM_AGGREGATE_748, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_749 = get___SQL_SUM_AGGREGATE_749();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_749), ___SQL_SUM_AGGREGATE_749, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_750 = get___SQL_SUM_AGGREGATE_750();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_750), ___SQL_SUM_AGGREGATE_750, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_751 = get___SQL_SUM_AGGREGATE_751();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_751), ___SQL_SUM_AGGREGATE_751, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_752 = get___SQL_SUM_AGGREGATE_752();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_752), ___SQL_SUM_AGGREGATE_752, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_753 = get___SQL_SUM_AGGREGATE_753();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_753), ___SQL_SUM_AGGREGATE_753, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_754 = get___SQL_SUM_AGGREGATE_754();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_754), ___SQL_SUM_AGGREGATE_754, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_755 = get___SQL_SUM_AGGREGATE_755();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_755), ___SQL_SUM_AGGREGATE_755, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_756 = get___SQL_SUM_AGGREGATE_756();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_756), ___SQL_SUM_AGGREGATE_756, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_757 = get___SQL_SUM_AGGREGATE_757();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_757), ___SQL_SUM_AGGREGATE_757, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_758 = get___SQL_SUM_AGGREGATE_758();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_758), ___SQL_SUM_AGGREGATE_758, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_759 = get___SQL_SUM_AGGREGATE_759();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_759), ___SQL_SUM_AGGREGATE_759, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_760 = get___SQL_SUM_AGGREGATE_760();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_760), ___SQL_SUM_AGGREGATE_760, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_761 = get___SQL_SUM_AGGREGATE_761();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_761), ___SQL_SUM_AGGREGATE_761, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_762 = get___SQL_SUM_AGGREGATE_762();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_762), ___SQL_SUM_AGGREGATE_762, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_763 = get___SQL_SUM_AGGREGATE_763();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_763), ___SQL_SUM_AGGREGATE_763, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_764 = get___SQL_SUM_AGGREGATE_764();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_764), ___SQL_SUM_AGGREGATE_764, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_765 = get___SQL_SUM_AGGREGATE_765();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_765), ___SQL_SUM_AGGREGATE_765, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_766 = get___SQL_SUM_AGGREGATE_766();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_766), ___SQL_SUM_AGGREGATE_766, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_767 = get___SQL_SUM_AGGREGATE_767();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_767), ___SQL_SUM_AGGREGATE_767, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_768 = get___SQL_SUM_AGGREGATE_768();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_768), ___SQL_SUM_AGGREGATE_768, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_769 = get___SQL_SUM_AGGREGATE_769();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_769), ___SQL_SUM_AGGREGATE_769, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_770 = get___SQL_SUM_AGGREGATE_770();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_770), ___SQL_SUM_AGGREGATE_770, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_771 = get___SQL_SUM_AGGREGATE_771();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_771), ___SQL_SUM_AGGREGATE_771, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_772 = get___SQL_SUM_AGGREGATE_772();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_772), ___SQL_SUM_AGGREGATE_772, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_773 = get___SQL_SUM_AGGREGATE_773();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_773), ___SQL_SUM_AGGREGATE_773, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_774 = get___SQL_SUM_AGGREGATE_774();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_774), ___SQL_SUM_AGGREGATE_774, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_775 = get___SQL_SUM_AGGREGATE_775();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_775), ___SQL_SUM_AGGREGATE_775, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_776 = get___SQL_SUM_AGGREGATE_776();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_776), ___SQL_SUM_AGGREGATE_776, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_777 = get___SQL_SUM_AGGREGATE_777();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_777), ___SQL_SUM_AGGREGATE_777, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_778 = get___SQL_SUM_AGGREGATE_778();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_778), ___SQL_SUM_AGGREGATE_778, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_779 = get___SQL_SUM_AGGREGATE_779();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_779), ___SQL_SUM_AGGREGATE_779, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_780 = get___SQL_SUM_AGGREGATE_780();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_780), ___SQL_SUM_AGGREGATE_780, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_781 = get___SQL_SUM_AGGREGATE_781();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_781), ___SQL_SUM_AGGREGATE_781, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_782 = get___SQL_SUM_AGGREGATE_782();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_782), ___SQL_SUM_AGGREGATE_782, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_783 = get___SQL_SUM_AGGREGATE_783();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_783), ___SQL_SUM_AGGREGATE_783, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_784 = get___SQL_SUM_AGGREGATE_784();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_784), ___SQL_SUM_AGGREGATE_784, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_785 = get___SQL_SUM_AGGREGATE_785();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_785), ___SQL_SUM_AGGREGATE_785, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_786 = get___SQL_SUM_AGGREGATE_786();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_786), ___SQL_SUM_AGGREGATE_786, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_787 = get___SQL_SUM_AGGREGATE_787();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_787), ___SQL_SUM_AGGREGATE_787, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_788 = get___SQL_SUM_AGGREGATE_788();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_788), ___SQL_SUM_AGGREGATE_788, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_789 = get___SQL_SUM_AGGREGATE_789();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_789), ___SQL_SUM_AGGREGATE_789, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_790 = get___SQL_SUM_AGGREGATE_790();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_790), ___SQL_SUM_AGGREGATE_790, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_791 = get___SQL_SUM_AGGREGATE_791();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_791), ___SQL_SUM_AGGREGATE_791, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_792 = get___SQL_SUM_AGGREGATE_792();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_792), ___SQL_SUM_AGGREGATE_792, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_793 = get___SQL_SUM_AGGREGATE_793();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_793), ___SQL_SUM_AGGREGATE_793, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_794 = get___SQL_SUM_AGGREGATE_794();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_794), ___SQL_SUM_AGGREGATE_794, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_795 = get___SQL_SUM_AGGREGATE_795();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_795), ___SQL_SUM_AGGREGATE_795, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_796 = get___SQL_SUM_AGGREGATE_796();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_796), ___SQL_SUM_AGGREGATE_796, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_797 = get___SQL_SUM_AGGREGATE_797();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_797), ___SQL_SUM_AGGREGATE_797, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_798 = get___SQL_SUM_AGGREGATE_798();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_798), ___SQL_SUM_AGGREGATE_798, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_799 = get___SQL_SUM_AGGREGATE_799();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_799), ___SQL_SUM_AGGREGATE_799, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_800 = get___SQL_SUM_AGGREGATE_800();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_800), ___SQL_SUM_AGGREGATE_800, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_801 = get___SQL_SUM_AGGREGATE_801();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_801), ___SQL_SUM_AGGREGATE_801, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_802 = get___SQL_SUM_AGGREGATE_802();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_802), ___SQL_SUM_AGGREGATE_802, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_803 = get___SQL_SUM_AGGREGATE_803();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_803), ___SQL_SUM_AGGREGATE_803, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_804 = get___SQL_SUM_AGGREGATE_804();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_804), ___SQL_SUM_AGGREGATE_804, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_805 = get___SQL_SUM_AGGREGATE_805();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_805), ___SQL_SUM_AGGREGATE_805, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_806 = get___SQL_SUM_AGGREGATE_806();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_806), ___SQL_SUM_AGGREGATE_806, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_807 = get___SQL_SUM_AGGREGATE_807();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_807), ___SQL_SUM_AGGREGATE_807, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_808 = get___SQL_SUM_AGGREGATE_808();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_808), ___SQL_SUM_AGGREGATE_808, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_809 = get___SQL_SUM_AGGREGATE_809();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_809), ___SQL_SUM_AGGREGATE_809, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_810 = get___SQL_SUM_AGGREGATE_810();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_810), ___SQL_SUM_AGGREGATE_810, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_811 = get___SQL_SUM_AGGREGATE_811();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_811), ___SQL_SUM_AGGREGATE_811, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_812 = get___SQL_SUM_AGGREGATE_812();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_812), ___SQL_SUM_AGGREGATE_812, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_813 = get___SQL_SUM_AGGREGATE_813();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_813), ___SQL_SUM_AGGREGATE_813, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_814 = get___SQL_SUM_AGGREGATE_814();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_814), ___SQL_SUM_AGGREGATE_814, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_815 = get___SQL_SUM_AGGREGATE_815();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_815), ___SQL_SUM_AGGREGATE_815, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_816 = get___SQL_SUM_AGGREGATE_816();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_816), ___SQL_SUM_AGGREGATE_816, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_817 = get___SQL_SUM_AGGREGATE_817();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_817), ___SQL_SUM_AGGREGATE_817, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_818 = get___SQL_SUM_AGGREGATE_818();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_818), ___SQL_SUM_AGGREGATE_818, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_819 = get___SQL_SUM_AGGREGATE_819();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_819), ___SQL_SUM_AGGREGATE_819, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_820 = get___SQL_SUM_AGGREGATE_820();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_820), ___SQL_SUM_AGGREGATE_820, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_821 = get___SQL_SUM_AGGREGATE_821();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_821), ___SQL_SUM_AGGREGATE_821, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_822 = get___SQL_SUM_AGGREGATE_822();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_822), ___SQL_SUM_AGGREGATE_822, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_823 = get___SQL_SUM_AGGREGATE_823();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_823), ___SQL_SUM_AGGREGATE_823, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_824 = get___SQL_SUM_AGGREGATE_824();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_824), ___SQL_SUM_AGGREGATE_824, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_825 = get___SQL_SUM_AGGREGATE_825();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_825), ___SQL_SUM_AGGREGATE_825, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_826 = get___SQL_SUM_AGGREGATE_826();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_826), ___SQL_SUM_AGGREGATE_826, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_827 = get___SQL_SUM_AGGREGATE_827();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_827), ___SQL_SUM_AGGREGATE_827, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_828 = get___SQL_SUM_AGGREGATE_828();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_828), ___SQL_SUM_AGGREGATE_828, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_829 = get___SQL_SUM_AGGREGATE_829();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_829), ___SQL_SUM_AGGREGATE_829, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_830 = get___SQL_SUM_AGGREGATE_830();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_830), ___SQL_SUM_AGGREGATE_830, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_831 = get___SQL_SUM_AGGREGATE_831();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_831), ___SQL_SUM_AGGREGATE_831, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_832 = get___SQL_SUM_AGGREGATE_832();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_832), ___SQL_SUM_AGGREGATE_832, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_833 = get___SQL_SUM_AGGREGATE_833();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_833), ___SQL_SUM_AGGREGATE_833, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_834 = get___SQL_SUM_AGGREGATE_834();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_834), ___SQL_SUM_AGGREGATE_834, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_835 = get___SQL_SUM_AGGREGATE_835();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_835), ___SQL_SUM_AGGREGATE_835, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_836 = get___SQL_SUM_AGGREGATE_836();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_836), ___SQL_SUM_AGGREGATE_836, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_837 = get___SQL_SUM_AGGREGATE_837();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_837), ___SQL_SUM_AGGREGATE_837, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_838 = get___SQL_SUM_AGGREGATE_838();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_838), ___SQL_SUM_AGGREGATE_838, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_839 = get___SQL_SUM_AGGREGATE_839();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_839), ___SQL_SUM_AGGREGATE_839, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_840 = get___SQL_SUM_AGGREGATE_840();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_840), ___SQL_SUM_AGGREGATE_840, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_841 = get___SQL_SUM_AGGREGATE_841();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_841), ___SQL_SUM_AGGREGATE_841, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_842 = get___SQL_SUM_AGGREGATE_842();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_842), ___SQL_SUM_AGGREGATE_842, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_843 = get___SQL_SUM_AGGREGATE_843();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_843), ___SQL_SUM_AGGREGATE_843, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_844 = get___SQL_SUM_AGGREGATE_844();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_844), ___SQL_SUM_AGGREGATE_844, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_845 = get___SQL_SUM_AGGREGATE_845();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_845), ___SQL_SUM_AGGREGATE_845, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_846 = get___SQL_SUM_AGGREGATE_846();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_846), ___SQL_SUM_AGGREGATE_846, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_847 = get___SQL_SUM_AGGREGATE_847();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_847), ___SQL_SUM_AGGREGATE_847, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_848 = get___SQL_SUM_AGGREGATE_848();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_848), ___SQL_SUM_AGGREGATE_848, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_849 = get___SQL_SUM_AGGREGATE_849();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_849), ___SQL_SUM_AGGREGATE_849, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_850 = get___SQL_SUM_AGGREGATE_850();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_850), ___SQL_SUM_AGGREGATE_850, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_851 = get___SQL_SUM_AGGREGATE_851();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_851), ___SQL_SUM_AGGREGATE_851, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_852 = get___SQL_SUM_AGGREGATE_852();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_852), ___SQL_SUM_AGGREGATE_852, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_853 = get___SQL_SUM_AGGREGATE_853();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_853), ___SQL_SUM_AGGREGATE_853, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_854 = get___SQL_SUM_AGGREGATE_854();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_854), ___SQL_SUM_AGGREGATE_854, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_855 = get___SQL_SUM_AGGREGATE_855();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_855), ___SQL_SUM_AGGREGATE_855, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_856 = get___SQL_SUM_AGGREGATE_856();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_856), ___SQL_SUM_AGGREGATE_856, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_857 = get___SQL_SUM_AGGREGATE_857();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_857), ___SQL_SUM_AGGREGATE_857, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_858 = get___SQL_SUM_AGGREGATE_858();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_858), ___SQL_SUM_AGGREGATE_858, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_859 = get___SQL_SUM_AGGREGATE_859();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_859), ___SQL_SUM_AGGREGATE_859, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_860 = get___SQL_SUM_AGGREGATE_860();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_860), ___SQL_SUM_AGGREGATE_860, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_861 = get___SQL_SUM_AGGREGATE_861();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_861), ___SQL_SUM_AGGREGATE_861, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_862 = get___SQL_SUM_AGGREGATE_862();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_862), ___SQL_SUM_AGGREGATE_862, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_863 = get___SQL_SUM_AGGREGATE_863();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_863), ___SQL_SUM_AGGREGATE_863, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_864 = get___SQL_SUM_AGGREGATE_864();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_864), ___SQL_SUM_AGGREGATE_864, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_865 = get___SQL_SUM_AGGREGATE_865();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_865), ___SQL_SUM_AGGREGATE_865, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_866 = get___SQL_SUM_AGGREGATE_866();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_866), ___SQL_SUM_AGGREGATE_866, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_867 = get___SQL_SUM_AGGREGATE_867();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_867), ___SQL_SUM_AGGREGATE_867, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_868 = get___SQL_SUM_AGGREGATE_868();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_868), ___SQL_SUM_AGGREGATE_868, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_869 = get___SQL_SUM_AGGREGATE_869();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_869), ___SQL_SUM_AGGREGATE_869, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_870 = get___SQL_SUM_AGGREGATE_870();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_870), ___SQL_SUM_AGGREGATE_870, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_871 = get___SQL_SUM_AGGREGATE_871();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_871), ___SQL_SUM_AGGREGATE_871, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_872 = get___SQL_SUM_AGGREGATE_872();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_872), ___SQL_SUM_AGGREGATE_872, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_873 = get___SQL_SUM_AGGREGATE_873();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_873), ___SQL_SUM_AGGREGATE_873, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_874 = get___SQL_SUM_AGGREGATE_874();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_874), ___SQL_SUM_AGGREGATE_874, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_875 = get___SQL_SUM_AGGREGATE_875();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_875), ___SQL_SUM_AGGREGATE_875, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_876 = get___SQL_SUM_AGGREGATE_876();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_876), ___SQL_SUM_AGGREGATE_876, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_877 = get___SQL_SUM_AGGREGATE_877();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_877), ___SQL_SUM_AGGREGATE_877, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_878 = get___SQL_SUM_AGGREGATE_878();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_878), ___SQL_SUM_AGGREGATE_878, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_879 = get___SQL_SUM_AGGREGATE_879();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_879), ___SQL_SUM_AGGREGATE_879, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_880 = get___SQL_SUM_AGGREGATE_880();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_880), ___SQL_SUM_AGGREGATE_880, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_881 = get___SQL_SUM_AGGREGATE_881();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_881), ___SQL_SUM_AGGREGATE_881, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_882 = get___SQL_SUM_AGGREGATE_882();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_882), ___SQL_SUM_AGGREGATE_882, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_883 = get___SQL_SUM_AGGREGATE_883();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_883), ___SQL_SUM_AGGREGATE_883, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_884 = get___SQL_SUM_AGGREGATE_884();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_884), ___SQL_SUM_AGGREGATE_884, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_885 = get___SQL_SUM_AGGREGATE_885();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_885), ___SQL_SUM_AGGREGATE_885, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_886 = get___SQL_SUM_AGGREGATE_886();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_886), ___SQL_SUM_AGGREGATE_886, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_887 = get___SQL_SUM_AGGREGATE_887();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_887), ___SQL_SUM_AGGREGATE_887, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_888 = get___SQL_SUM_AGGREGATE_888();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_888), ___SQL_SUM_AGGREGATE_888, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_889 = get___SQL_SUM_AGGREGATE_889();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_889), ___SQL_SUM_AGGREGATE_889, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_890 = get___SQL_SUM_AGGREGATE_890();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_890), ___SQL_SUM_AGGREGATE_890, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_891 = get___SQL_SUM_AGGREGATE_891();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_891), ___SQL_SUM_AGGREGATE_891, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_892 = get___SQL_SUM_AGGREGATE_892();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_892), ___SQL_SUM_AGGREGATE_892, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_893 = get___SQL_SUM_AGGREGATE_893();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_893), ___SQL_SUM_AGGREGATE_893, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_894 = get___SQL_SUM_AGGREGATE_894();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_894), ___SQL_SUM_AGGREGATE_894, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_895 = get___SQL_SUM_AGGREGATE_895();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_895), ___SQL_SUM_AGGREGATE_895, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_896 = get___SQL_SUM_AGGREGATE_896();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_896), ___SQL_SUM_AGGREGATE_896, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_897 = get___SQL_SUM_AGGREGATE_897();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_897), ___SQL_SUM_AGGREGATE_897, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_898 = get___SQL_SUM_AGGREGATE_898();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_898), ___SQL_SUM_AGGREGATE_898, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_899 = get___SQL_SUM_AGGREGATE_899();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_899), ___SQL_SUM_AGGREGATE_899, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_900 = get___SQL_SUM_AGGREGATE_900();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_900), ___SQL_SUM_AGGREGATE_900, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_901 = get___SQL_SUM_AGGREGATE_901();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_901), ___SQL_SUM_AGGREGATE_901, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_902 = get___SQL_SUM_AGGREGATE_902();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_902), ___SQL_SUM_AGGREGATE_902, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_903 = get___SQL_SUM_AGGREGATE_903();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_903), ___SQL_SUM_AGGREGATE_903, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_904 = get___SQL_SUM_AGGREGATE_904();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_904), ___SQL_SUM_AGGREGATE_904, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_905 = get___SQL_SUM_AGGREGATE_905();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_905), ___SQL_SUM_AGGREGATE_905, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_906 = get___SQL_SUM_AGGREGATE_906();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_906), ___SQL_SUM_AGGREGATE_906, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_907 = get___SQL_SUM_AGGREGATE_907();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_907), ___SQL_SUM_AGGREGATE_907, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_908 = get___SQL_SUM_AGGREGATE_908();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_908), ___SQL_SUM_AGGREGATE_908, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_909 = get___SQL_SUM_AGGREGATE_909();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_909), ___SQL_SUM_AGGREGATE_909, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_910 = get___SQL_SUM_AGGREGATE_910();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_910), ___SQL_SUM_AGGREGATE_910, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_911 = get___SQL_SUM_AGGREGATE_911();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_911), ___SQL_SUM_AGGREGATE_911, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_912 = get___SQL_SUM_AGGREGATE_912();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_912), ___SQL_SUM_AGGREGATE_912, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_913 = get___SQL_SUM_AGGREGATE_913();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_913), ___SQL_SUM_AGGREGATE_913, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_914 = get___SQL_SUM_AGGREGATE_914();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_914), ___SQL_SUM_AGGREGATE_914, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_915 = get___SQL_SUM_AGGREGATE_915();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_915), ___SQL_SUM_AGGREGATE_915, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_916 = get___SQL_SUM_AGGREGATE_916();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_916), ___SQL_SUM_AGGREGATE_916, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_917 = get___SQL_SUM_AGGREGATE_917();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_917), ___SQL_SUM_AGGREGATE_917, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_918 = get___SQL_SUM_AGGREGATE_918();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_918), ___SQL_SUM_AGGREGATE_918, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_919 = get___SQL_SUM_AGGREGATE_919();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_919), ___SQL_SUM_AGGREGATE_919, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_920 = get___SQL_SUM_AGGREGATE_920();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_920), ___SQL_SUM_AGGREGATE_920, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_921 = get___SQL_SUM_AGGREGATE_921();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_921), ___SQL_SUM_AGGREGATE_921, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_922 = get___SQL_SUM_AGGREGATE_922();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_922), ___SQL_SUM_AGGREGATE_922, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_923 = get___SQL_SUM_AGGREGATE_923();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_923), ___SQL_SUM_AGGREGATE_923, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_924 = get___SQL_SUM_AGGREGATE_924();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_924), ___SQL_SUM_AGGREGATE_924, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_925 = get___SQL_SUM_AGGREGATE_925();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_925), ___SQL_SUM_AGGREGATE_925, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_926 = get___SQL_SUM_AGGREGATE_926();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_926), ___SQL_SUM_AGGREGATE_926, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_927 = get___SQL_SUM_AGGREGATE_927();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_927), ___SQL_SUM_AGGREGATE_927, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_928 = get___SQL_SUM_AGGREGATE_928();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_928), ___SQL_SUM_AGGREGATE_928, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_929 = get___SQL_SUM_AGGREGATE_929();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_929), ___SQL_SUM_AGGREGATE_929, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_930 = get___SQL_SUM_AGGREGATE_930();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_930), ___SQL_SUM_AGGREGATE_930, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_931 = get___SQL_SUM_AGGREGATE_931();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_931), ___SQL_SUM_AGGREGATE_931, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_932 = get___SQL_SUM_AGGREGATE_932();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_932), ___SQL_SUM_AGGREGATE_932, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_933 = get___SQL_SUM_AGGREGATE_933();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_933), ___SQL_SUM_AGGREGATE_933, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_934 = get___SQL_SUM_AGGREGATE_934();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_934), ___SQL_SUM_AGGREGATE_934, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_935 = get___SQL_SUM_AGGREGATE_935();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_935), ___SQL_SUM_AGGREGATE_935, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_936 = get___SQL_SUM_AGGREGATE_936();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_936), ___SQL_SUM_AGGREGATE_936, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_937 = get___SQL_SUM_AGGREGATE_937();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_937), ___SQL_SUM_AGGREGATE_937, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_938 = get___SQL_SUM_AGGREGATE_938();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_938), ___SQL_SUM_AGGREGATE_938, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_939 = get___SQL_SUM_AGGREGATE_939();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_939), ___SQL_SUM_AGGREGATE_939, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_940 = get___SQL_SUM_AGGREGATE_940();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_940), ___SQL_SUM_AGGREGATE_940, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_941 = get___SQL_SUM_AGGREGATE_941();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_941), ___SQL_SUM_AGGREGATE_941, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_942 = get___SQL_SUM_AGGREGATE_942();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_942), ___SQL_SUM_AGGREGATE_942, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_943 = get___SQL_SUM_AGGREGATE_943();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_943), ___SQL_SUM_AGGREGATE_943, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_944 = get___SQL_SUM_AGGREGATE_944();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_944), ___SQL_SUM_AGGREGATE_944, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_945 = get___SQL_SUM_AGGREGATE_945();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_945), ___SQL_SUM_AGGREGATE_945, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_946 = get___SQL_SUM_AGGREGATE_946();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_946), ___SQL_SUM_AGGREGATE_946, "\t");
    }
  
    /* Functions returning / computing the results of top level queries */
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_1() const {
      return __SQL_SUM_AGGREGATE_1;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_2() const {
      return __SQL_SUM_AGGREGATE_2;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_3() const {
      return __SQL_SUM_AGGREGATE_3;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_4() const {
      return __SQL_SUM_AGGREGATE_4;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_5() const {
      return __SQL_SUM_AGGREGATE_5;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_6() const {
      return __SQL_SUM_AGGREGATE_6;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_7() const {
      return __SQL_SUM_AGGREGATE_7;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_8() const {
      return __SQL_SUM_AGGREGATE_8;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_9() const {
      return __SQL_SUM_AGGREGATE_9;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_10() const {
      return __SQL_SUM_AGGREGATE_10;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_11() const {
      return __SQL_SUM_AGGREGATE_11;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_12() const {
      return __SQL_SUM_AGGREGATE_12;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_13() const {
      return __SQL_SUM_AGGREGATE_13;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_14() const {
      return __SQL_SUM_AGGREGATE_14;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_15() const {
      return __SQL_SUM_AGGREGATE_15;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_16() const {
      return __SQL_SUM_AGGREGATE_16;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_17() const {
      return __SQL_SUM_AGGREGATE_17;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_18() const {
      return __SQL_SUM_AGGREGATE_18;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_19() const {
      return __SQL_SUM_AGGREGATE_19;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_20() const {
      return __SQL_SUM_AGGREGATE_20;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_21() const {
      return __SQL_SUM_AGGREGATE_21;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_22() const {
      return __SQL_SUM_AGGREGATE_22;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_23() const {
      return __SQL_SUM_AGGREGATE_23;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_24() const {
      return __SQL_SUM_AGGREGATE_24;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_25() const {
      return __SQL_SUM_AGGREGATE_25;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_26() const {
      return __SQL_SUM_AGGREGATE_26;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_27() const {
      return __SQL_SUM_AGGREGATE_27;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_28() const {
      return __SQL_SUM_AGGREGATE_28;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_29() const {
      return __SQL_SUM_AGGREGATE_29;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_30() const {
      return __SQL_SUM_AGGREGATE_30;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_31() const {
      return __SQL_SUM_AGGREGATE_31;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_32() const {
      return __SQL_SUM_AGGREGATE_32;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_33() const {
      return __SQL_SUM_AGGREGATE_33;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_34() const {
      return __SQL_SUM_AGGREGATE_34;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_35() const {
      return __SQL_SUM_AGGREGATE_35;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_36() const {
      return __SQL_SUM_AGGREGATE_36;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_37() const {
      return __SQL_SUM_AGGREGATE_37;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_38() const {
      return __SQL_SUM_AGGREGATE_38;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_39() const {
      return __SQL_SUM_AGGREGATE_39;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_40() const {
      return __SQL_SUM_AGGREGATE_40;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_41() const {
      return __SQL_SUM_AGGREGATE_41;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_42() const {
      return __SQL_SUM_AGGREGATE_42;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_43() const {
      return __SQL_SUM_AGGREGATE_43;
    }
    const long get___SQL_SUM_AGGREGATE_44() const {
      return __SQL_SUM_AGGREGATE_44;
    }
    const long get___SQL_SUM_AGGREGATE_45() const {
      return __SQL_SUM_AGGREGATE_45;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_46() const {
      return __SQL_SUM_AGGREGATE_46;
    }
    const long get___SQL_SUM_AGGREGATE_47() const {
      return __SQL_SUM_AGGREGATE_47;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_48() const {
      return __SQL_SUM_AGGREGATE_48;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_49() const {
      return __SQL_SUM_AGGREGATE_49;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_50() const {
      return __SQL_SUM_AGGREGATE_50;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_51() const {
      return __SQL_SUM_AGGREGATE_51;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_52() const {
      return __SQL_SUM_AGGREGATE_52;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_53() const {
      return __SQL_SUM_AGGREGATE_53;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_54() const {
      return __SQL_SUM_AGGREGATE_54;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_55() const {
      return __SQL_SUM_AGGREGATE_55;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_56() const {
      return __SQL_SUM_AGGREGATE_56;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_57() const {
      return __SQL_SUM_AGGREGATE_57;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_58() const {
      return __SQL_SUM_AGGREGATE_58;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_59() const {
      return __SQL_SUM_AGGREGATE_59;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_60() const {
      return __SQL_SUM_AGGREGATE_60;
    }
    const long get___SQL_SUM_AGGREGATE_61() const {
      return __SQL_SUM_AGGREGATE_61;
    }
    const long get___SQL_SUM_AGGREGATE_62() const {
      return __SQL_SUM_AGGREGATE_62;
    }
    const long get___SQL_SUM_AGGREGATE_63() const {
      return __SQL_SUM_AGGREGATE_63;
    }
    const long get___SQL_SUM_AGGREGATE_64() const {
      return __SQL_SUM_AGGREGATE_64;
    }
    const long get___SQL_SUM_AGGREGATE_65() const {
      return __SQL_SUM_AGGREGATE_65;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_66() const {
      return __SQL_SUM_AGGREGATE_66;
    }
    const long get___SQL_SUM_AGGREGATE_67() const {
      return __SQL_SUM_AGGREGATE_67;
    }
    const long get___SQL_SUM_AGGREGATE_68() const {
      return __SQL_SUM_AGGREGATE_68;
    }
    const long get___SQL_SUM_AGGREGATE_69() const {
      return __SQL_SUM_AGGREGATE_69;
    }
    const long get___SQL_SUM_AGGREGATE_70() const {
      return __SQL_SUM_AGGREGATE_70;
    }
    const long get___SQL_SUM_AGGREGATE_71() const {
      return __SQL_SUM_AGGREGATE_71;
    }
    const long get___SQL_SUM_AGGREGATE_72() const {
      return __SQL_SUM_AGGREGATE_72;
    }
    const long get___SQL_SUM_AGGREGATE_73() const {
      return __SQL_SUM_AGGREGATE_73;
    }
    const long get___SQL_SUM_AGGREGATE_74() const {
      return __SQL_SUM_AGGREGATE_74;
    }
    const long get___SQL_SUM_AGGREGATE_75() const {
      return __SQL_SUM_AGGREGATE_75;
    }
    const long get___SQL_SUM_AGGREGATE_76() const {
      return __SQL_SUM_AGGREGATE_76;
    }
    const long get___SQL_SUM_AGGREGATE_77() const {
      return __SQL_SUM_AGGREGATE_77;
    }
    const long get___SQL_SUM_AGGREGATE_78() const {
      return __SQL_SUM_AGGREGATE_78;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_79() const {
      return __SQL_SUM_AGGREGATE_79;
    }
    const long get___SQL_SUM_AGGREGATE_80() const {
      return __SQL_SUM_AGGREGATE_80;
    }
    const long get___SQL_SUM_AGGREGATE_81() const {
      return __SQL_SUM_AGGREGATE_81;
    }
    const long get___SQL_SUM_AGGREGATE_82() const {
      return __SQL_SUM_AGGREGATE_82;
    }
    const long get___SQL_SUM_AGGREGATE_83() const {
      return __SQL_SUM_AGGREGATE_83;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_84() const {
      return __SQL_SUM_AGGREGATE_84;
    }
    const long get___SQL_SUM_AGGREGATE_85() const {
      return __SQL_SUM_AGGREGATE_85;
    }
    const long get___SQL_SUM_AGGREGATE_86() const {
      return __SQL_SUM_AGGREGATE_86;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_87() const {
      return __SQL_SUM_AGGREGATE_87;
    }
    const long get___SQL_SUM_AGGREGATE_88() const {
      return __SQL_SUM_AGGREGATE_88;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_89() const {
      return __SQL_SUM_AGGREGATE_89;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_90() const {
      return __SQL_SUM_AGGREGATE_90;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_91() const {
      return __SQL_SUM_AGGREGATE_91;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_92() const {
      return __SQL_SUM_AGGREGATE_92;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_93() const {
      return __SQL_SUM_AGGREGATE_93;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_94() const {
      return __SQL_SUM_AGGREGATE_94;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_95() const {
      return __SQL_SUM_AGGREGATE_95;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_96() const {
      return __SQL_SUM_AGGREGATE_96;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_97() const {
      return __SQL_SUM_AGGREGATE_97;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_98() const {
      return __SQL_SUM_AGGREGATE_98;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_99() const {
      return __SQL_SUM_AGGREGATE_99;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_100() const {
      return __SQL_SUM_AGGREGATE_100;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_101() const {
      return __SQL_SUM_AGGREGATE_101;
    }
    const long get___SQL_SUM_AGGREGATE_102() const {
      return __SQL_SUM_AGGREGATE_102;
    }
    const long get___SQL_SUM_AGGREGATE_103() const {
      return __SQL_SUM_AGGREGATE_103;
    }
    const long get___SQL_SUM_AGGREGATE_104() const {
      return __SQL_SUM_AGGREGATE_104;
    }
    const long get___SQL_SUM_AGGREGATE_105() const {
      return __SQL_SUM_AGGREGATE_105;
    }
    const long get___SQL_SUM_AGGREGATE_106() const {
      return __SQL_SUM_AGGREGATE_106;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_107() const {
      return __SQL_SUM_AGGREGATE_107;
    }
    const long get___SQL_SUM_AGGREGATE_108() const {
      return __SQL_SUM_AGGREGATE_108;
    }
    const long get___SQL_SUM_AGGREGATE_109() const {
      return __SQL_SUM_AGGREGATE_109;
    }
    const long get___SQL_SUM_AGGREGATE_110() const {
      return __SQL_SUM_AGGREGATE_110;
    }
    const long get___SQL_SUM_AGGREGATE_111() const {
      return __SQL_SUM_AGGREGATE_111;
    }
    const long get___SQL_SUM_AGGREGATE_112() const {
      return __SQL_SUM_AGGREGATE_112;
    }
    const long get___SQL_SUM_AGGREGATE_113() const {
      return __SQL_SUM_AGGREGATE_113;
    }
    const long get___SQL_SUM_AGGREGATE_114() const {
      return __SQL_SUM_AGGREGATE_114;
    }
    const long get___SQL_SUM_AGGREGATE_115() const {
      return __SQL_SUM_AGGREGATE_115;
    }
    const long get___SQL_SUM_AGGREGATE_116() const {
      return __SQL_SUM_AGGREGATE_116;
    }
    const long get___SQL_SUM_AGGREGATE_117() const {
      return __SQL_SUM_AGGREGATE_117;
    }
    const long get___SQL_SUM_AGGREGATE_118() const {
      return __SQL_SUM_AGGREGATE_118;
    }
    const long get___SQL_SUM_AGGREGATE_119() const {
      return __SQL_SUM_AGGREGATE_119;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_120() const {
      return __SQL_SUM_AGGREGATE_120;
    }
    const long get___SQL_SUM_AGGREGATE_121() const {
      return __SQL_SUM_AGGREGATE_121;
    }
    const long get___SQL_SUM_AGGREGATE_122() const {
      return __SQL_SUM_AGGREGATE_122;
    }
    const long get___SQL_SUM_AGGREGATE_123() const {
      return __SQL_SUM_AGGREGATE_123;
    }
    const long get___SQL_SUM_AGGREGATE_124() const {
      return __SQL_SUM_AGGREGATE_124;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_125() const {
      return __SQL_SUM_AGGREGATE_125;
    }
    const long get___SQL_SUM_AGGREGATE_126() const {
      return __SQL_SUM_AGGREGATE_126;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_127() const {
      return __SQL_SUM_AGGREGATE_127;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_128() const {
      return __SQL_SUM_AGGREGATE_128;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_129() const {
      return __SQL_SUM_AGGREGATE_129;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_130() const {
      return __SQL_SUM_AGGREGATE_130;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_131() const {
      return __SQL_SUM_AGGREGATE_131;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_132() const {
      return __SQL_SUM_AGGREGATE_132;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_133() const {
      return __SQL_SUM_AGGREGATE_133;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_134() const {
      return __SQL_SUM_AGGREGATE_134;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_135() const {
      return __SQL_SUM_AGGREGATE_135;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_136() const {
      return __SQL_SUM_AGGREGATE_136;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_137() const {
      return __SQL_SUM_AGGREGATE_137;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_138() const {
      return __SQL_SUM_AGGREGATE_138;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_139() const {
      return __SQL_SUM_AGGREGATE_139;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_140() const {
      return __SQL_SUM_AGGREGATE_140;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_141() const {
      return __SQL_SUM_AGGREGATE_141;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_142() const {
      return __SQL_SUM_AGGREGATE_142;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_143() const {
      return __SQL_SUM_AGGREGATE_143;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_144() const {
      return __SQL_SUM_AGGREGATE_144;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_145() const {
      return __SQL_SUM_AGGREGATE_145;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_146() const {
      return __SQL_SUM_AGGREGATE_146;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_147() const {
      return __SQL_SUM_AGGREGATE_147;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_148() const {
      return __SQL_SUM_AGGREGATE_148;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_149() const {
      return __SQL_SUM_AGGREGATE_149;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_150() const {
      return __SQL_SUM_AGGREGATE_150;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_151() const {
      return __SQL_SUM_AGGREGATE_151;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_152() const {
      return __SQL_SUM_AGGREGATE_152;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_153() const {
      return __SQL_SUM_AGGREGATE_153;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_154() const {
      return __SQL_SUM_AGGREGATE_154;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_155() const {
      return __SQL_SUM_AGGREGATE_155;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_156() const {
      return __SQL_SUM_AGGREGATE_156;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_157() const {
      return __SQL_SUM_AGGREGATE_157;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_158() const {
      return __SQL_SUM_AGGREGATE_158;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_159() const {
      return __SQL_SUM_AGGREGATE_159;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_160() const {
      return __SQL_SUM_AGGREGATE_160;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_161() const {
      return __SQL_SUM_AGGREGATE_161;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_162() const {
      return __SQL_SUM_AGGREGATE_162;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_163() const {
      return __SQL_SUM_AGGREGATE_163;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_164() const {
      return __SQL_SUM_AGGREGATE_164;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_165() const {
      return __SQL_SUM_AGGREGATE_165;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_166() const {
      return __SQL_SUM_AGGREGATE_166;
    }
    const long get___SQL_SUM_AGGREGATE_167() const {
      return __SQL_SUM_AGGREGATE_167;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_168() const {
      return __SQL_SUM_AGGREGATE_168;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_169() const {
      return __SQL_SUM_AGGREGATE_169;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_170() const {
      return __SQL_SUM_AGGREGATE_170;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_171() const {
      return __SQL_SUM_AGGREGATE_171;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_172() const {
      return __SQL_SUM_AGGREGATE_172;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_173() const {
      return __SQL_SUM_AGGREGATE_173;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_174() const {
      return __SQL_SUM_AGGREGATE_174;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_175() const {
      return __SQL_SUM_AGGREGATE_175;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_176() const {
      return __SQL_SUM_AGGREGATE_176;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_177() const {
      return __SQL_SUM_AGGREGATE_177;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_178() const {
      return __SQL_SUM_AGGREGATE_178;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_179() const {
      return __SQL_SUM_AGGREGATE_179;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_180() const {
      return __SQL_SUM_AGGREGATE_180;
    }
    const long get___SQL_SUM_AGGREGATE_181() const {
      return __SQL_SUM_AGGREGATE_181;
    }
    const long get___SQL_SUM_AGGREGATE_182() const {
      return __SQL_SUM_AGGREGATE_182;
    }
    const long get___SQL_SUM_AGGREGATE_183() const {
      return __SQL_SUM_AGGREGATE_183;
    }
    const long get___SQL_SUM_AGGREGATE_184() const {
      return __SQL_SUM_AGGREGATE_184;
    }
    const long get___SQL_SUM_AGGREGATE_185() const {
      return __SQL_SUM_AGGREGATE_185;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_186() const {
      return __SQL_SUM_AGGREGATE_186;
    }
    const long get___SQL_SUM_AGGREGATE_187() const {
      return __SQL_SUM_AGGREGATE_187;
    }
    const long get___SQL_SUM_AGGREGATE_188() const {
      return __SQL_SUM_AGGREGATE_188;
    }
    const long get___SQL_SUM_AGGREGATE_189() const {
      return __SQL_SUM_AGGREGATE_189;
    }
    const long get___SQL_SUM_AGGREGATE_190() const {
      return __SQL_SUM_AGGREGATE_190;
    }
    const long get___SQL_SUM_AGGREGATE_191() const {
      return __SQL_SUM_AGGREGATE_191;
    }
    const long get___SQL_SUM_AGGREGATE_192() const {
      return __SQL_SUM_AGGREGATE_192;
    }
    const long get___SQL_SUM_AGGREGATE_193() const {
      return __SQL_SUM_AGGREGATE_193;
    }
    const long get___SQL_SUM_AGGREGATE_194() const {
      return __SQL_SUM_AGGREGATE_194;
    }
    const long get___SQL_SUM_AGGREGATE_195() const {
      return __SQL_SUM_AGGREGATE_195;
    }
    const long get___SQL_SUM_AGGREGATE_196() const {
      return __SQL_SUM_AGGREGATE_196;
    }
    const long get___SQL_SUM_AGGREGATE_197() const {
      return __SQL_SUM_AGGREGATE_197;
    }
    const long get___SQL_SUM_AGGREGATE_198() const {
      return __SQL_SUM_AGGREGATE_198;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_199() const {
      return __SQL_SUM_AGGREGATE_199;
    }
    const long get___SQL_SUM_AGGREGATE_200() const {
      return __SQL_SUM_AGGREGATE_200;
    }
    const long get___SQL_SUM_AGGREGATE_201() const {
      return __SQL_SUM_AGGREGATE_201;
    }
    const long get___SQL_SUM_AGGREGATE_202() const {
      return __SQL_SUM_AGGREGATE_202;
    }
    const long get___SQL_SUM_AGGREGATE_203() const {
      return __SQL_SUM_AGGREGATE_203;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_204() const {
      return __SQL_SUM_AGGREGATE_204;
    }
    const long get___SQL_SUM_AGGREGATE_205() const {
      return __SQL_SUM_AGGREGATE_205;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_206() const {
      return __SQL_SUM_AGGREGATE_206;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_207() const {
      return __SQL_SUM_AGGREGATE_207;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_208() const {
      return __SQL_SUM_AGGREGATE_208;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_209() const {
      return __SQL_SUM_AGGREGATE_209;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_210() const {
      return __SQL_SUM_AGGREGATE_210;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_211() const {
      return __SQL_SUM_AGGREGATE_211;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_212() const {
      return __SQL_SUM_AGGREGATE_212;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_213() const {
      return __SQL_SUM_AGGREGATE_213;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_214() const {
      return __SQL_SUM_AGGREGATE_214;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_215() const {
      return __SQL_SUM_AGGREGATE_215;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_216() const {
      return __SQL_SUM_AGGREGATE_216;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_217() const {
      return __SQL_SUM_AGGREGATE_217;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_218() const {
      return __SQL_SUM_AGGREGATE_218;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_219() const {
      return __SQL_SUM_AGGREGATE_219;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_220() const {
      return __SQL_SUM_AGGREGATE_220;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_221() const {
      return __SQL_SUM_AGGREGATE_221;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_222() const {
      return __SQL_SUM_AGGREGATE_222;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_223() const {
      return __SQL_SUM_AGGREGATE_223;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_224() const {
      return __SQL_SUM_AGGREGATE_224;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_225() const {
      return __SQL_SUM_AGGREGATE_225;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_226() const {
      return __SQL_SUM_AGGREGATE_226;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_227() const {
      return __SQL_SUM_AGGREGATE_227;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_228() const {
      return __SQL_SUM_AGGREGATE_228;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_229() const {
      return __SQL_SUM_AGGREGATE_229;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_230() const {
      return __SQL_SUM_AGGREGATE_230;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_231() const {
      return __SQL_SUM_AGGREGATE_231;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_232() const {
      return __SQL_SUM_AGGREGATE_232;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_233() const {
      return __SQL_SUM_AGGREGATE_233;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_234() const {
      return __SQL_SUM_AGGREGATE_234;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_235() const {
      return __SQL_SUM_AGGREGATE_235;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_236() const {
      return __SQL_SUM_AGGREGATE_236;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_237() const {
      return __SQL_SUM_AGGREGATE_237;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_238() const {
      return __SQL_SUM_AGGREGATE_238;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_239() const {
      return __SQL_SUM_AGGREGATE_239;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_240() const {
      return __SQL_SUM_AGGREGATE_240;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_241() const {
      return __SQL_SUM_AGGREGATE_241;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_242() const {
      return __SQL_SUM_AGGREGATE_242;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_243() const {
      return __SQL_SUM_AGGREGATE_243;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_244() const {
      return __SQL_SUM_AGGREGATE_244;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_245() const {
      return __SQL_SUM_AGGREGATE_245;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_246() const {
      return __SQL_SUM_AGGREGATE_246;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_247() const {
      return __SQL_SUM_AGGREGATE_247;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_248() const {
      return __SQL_SUM_AGGREGATE_248;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_249() const {
      return __SQL_SUM_AGGREGATE_249;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_250() const {
      return __SQL_SUM_AGGREGATE_250;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_251() const {
      return __SQL_SUM_AGGREGATE_251;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_252() const {
      return __SQL_SUM_AGGREGATE_252;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_253() const {
      return __SQL_SUM_AGGREGATE_253;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_254() const {
      return __SQL_SUM_AGGREGATE_254;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_255() const {
      return __SQL_SUM_AGGREGATE_255;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_256() const {
      return __SQL_SUM_AGGREGATE_256;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_257() const {
      return __SQL_SUM_AGGREGATE_257;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_258() const {
      return __SQL_SUM_AGGREGATE_258;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_259() const {
      return __SQL_SUM_AGGREGATE_259;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_260() const {
      return __SQL_SUM_AGGREGATE_260;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_261() const {
      return __SQL_SUM_AGGREGATE_261;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_262() const {
      return __SQL_SUM_AGGREGATE_262;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_263() const {
      return __SQL_SUM_AGGREGATE_263;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_264() const {
      return __SQL_SUM_AGGREGATE_264;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_265() const {
      return __SQL_SUM_AGGREGATE_265;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_266() const {
      return __SQL_SUM_AGGREGATE_266;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_267() const {
      return __SQL_SUM_AGGREGATE_267;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_268() const {
      return __SQL_SUM_AGGREGATE_268;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_269() const {
      return __SQL_SUM_AGGREGATE_269;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_270() const {
      return __SQL_SUM_AGGREGATE_270;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_271() const {
      return __SQL_SUM_AGGREGATE_271;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_272() const {
      return __SQL_SUM_AGGREGATE_272;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_273() const {
      return __SQL_SUM_AGGREGATE_273;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_274() const {
      return __SQL_SUM_AGGREGATE_274;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_275() const {
      return __SQL_SUM_AGGREGATE_275;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_276() const {
      return __SQL_SUM_AGGREGATE_276;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_277() const {
      return __SQL_SUM_AGGREGATE_277;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_278() const {
      return __SQL_SUM_AGGREGATE_278;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_279() const {
      return __SQL_SUM_AGGREGATE_279;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_280() const {
      return __SQL_SUM_AGGREGATE_280;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_281() const {
      return __SQL_SUM_AGGREGATE_281;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_282() const {
      return __SQL_SUM_AGGREGATE_282;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_283() const {
      return __SQL_SUM_AGGREGATE_283;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_284() const {
      return __SQL_SUM_AGGREGATE_284;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_285() const {
      return __SQL_SUM_AGGREGATE_285;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_286() const {
      return __SQL_SUM_AGGREGATE_286;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_287() const {
      return __SQL_SUM_AGGREGATE_287;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_288() const {
      return __SQL_SUM_AGGREGATE_288;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_289() const {
      return __SQL_SUM_AGGREGATE_289;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_290() const {
      return __SQL_SUM_AGGREGATE_290;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_291() const {
      return __SQL_SUM_AGGREGATE_291;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_292() const {
      return __SQL_SUM_AGGREGATE_292;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_293() const {
      return __SQL_SUM_AGGREGATE_293;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_294() const {
      return __SQL_SUM_AGGREGATE_294;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_295() const {
      return __SQL_SUM_AGGREGATE_295;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_296() const {
      return __SQL_SUM_AGGREGATE_296;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_297() const {
      return __SQL_SUM_AGGREGATE_297;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_298() const {
      return __SQL_SUM_AGGREGATE_298;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_299() const {
      return __SQL_SUM_AGGREGATE_299;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_300() const {
      return __SQL_SUM_AGGREGATE_300;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_301() const {
      return __SQL_SUM_AGGREGATE_301;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_302() const {
      return __SQL_SUM_AGGREGATE_302;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_303() const {
      return __SQL_SUM_AGGREGATE_303;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_304() const {
      return __SQL_SUM_AGGREGATE_304;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_305() const {
      return __SQL_SUM_AGGREGATE_305;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_306() const {
      return __SQL_SUM_AGGREGATE_306;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_307() const {
      return __SQL_SUM_AGGREGATE_307;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_308() const {
      return __SQL_SUM_AGGREGATE_308;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_309() const {
      return __SQL_SUM_AGGREGATE_309;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_310() const {
      return __SQL_SUM_AGGREGATE_310;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_311() const {
      return __SQL_SUM_AGGREGATE_311;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_312() const {
      return __SQL_SUM_AGGREGATE_312;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_313() const {
      return __SQL_SUM_AGGREGATE_313;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_314() const {
      return __SQL_SUM_AGGREGATE_314;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_315() const {
      return __SQL_SUM_AGGREGATE_315;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_316() const {
      return __SQL_SUM_AGGREGATE_316;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_317() const {
      return __SQL_SUM_AGGREGATE_317;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_318() const {
      return __SQL_SUM_AGGREGATE_318;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_319() const {
      return __SQL_SUM_AGGREGATE_319;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_320() const {
      return __SQL_SUM_AGGREGATE_320;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_321() const {
      return __SQL_SUM_AGGREGATE_321;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_322() const {
      return __SQL_SUM_AGGREGATE_322;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_323() const {
      return __SQL_SUM_AGGREGATE_323;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_324() const {
      return __SQL_SUM_AGGREGATE_324;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_325() const {
      return __SQL_SUM_AGGREGATE_325;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_326() const {
      return __SQL_SUM_AGGREGATE_326;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_327() const {
      return __SQL_SUM_AGGREGATE_327;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_328() const {
      return __SQL_SUM_AGGREGATE_328;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_329() const {
      return __SQL_SUM_AGGREGATE_329;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_330() const {
      return __SQL_SUM_AGGREGATE_330;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_331() const {
      return __SQL_SUM_AGGREGATE_331;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_332() const {
      return __SQL_SUM_AGGREGATE_332;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_333() const {
      return __SQL_SUM_AGGREGATE_333;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_334() const {
      return __SQL_SUM_AGGREGATE_334;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_335() const {
      return __SQL_SUM_AGGREGATE_335;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_336() const {
      return __SQL_SUM_AGGREGATE_336;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_337() const {
      return __SQL_SUM_AGGREGATE_337;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_338() const {
      return __SQL_SUM_AGGREGATE_338;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_339() const {
      return __SQL_SUM_AGGREGATE_339;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_340() const {
      return __SQL_SUM_AGGREGATE_340;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_341() const {
      return __SQL_SUM_AGGREGATE_341;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_342() const {
      return __SQL_SUM_AGGREGATE_342;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_343() const {
      return __SQL_SUM_AGGREGATE_343;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_344() const {
      return __SQL_SUM_AGGREGATE_344;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_345() const {
      return __SQL_SUM_AGGREGATE_345;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_346() const {
      return __SQL_SUM_AGGREGATE_346;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_347() const {
      return __SQL_SUM_AGGREGATE_347;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_348() const {
      return __SQL_SUM_AGGREGATE_348;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_349() const {
      return __SQL_SUM_AGGREGATE_349;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_350() const {
      return __SQL_SUM_AGGREGATE_350;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_351() const {
      return __SQL_SUM_AGGREGATE_351;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_352() const {
      return __SQL_SUM_AGGREGATE_352;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_353() const {
      return __SQL_SUM_AGGREGATE_353;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_354() const {
      return __SQL_SUM_AGGREGATE_354;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_355() const {
      return __SQL_SUM_AGGREGATE_355;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_356() const {
      return __SQL_SUM_AGGREGATE_356;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_357() const {
      return __SQL_SUM_AGGREGATE_357;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_358() const {
      return __SQL_SUM_AGGREGATE_358;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_359() const {
      return __SQL_SUM_AGGREGATE_359;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_360() const {
      return __SQL_SUM_AGGREGATE_360;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_361() const {
      return __SQL_SUM_AGGREGATE_361;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_362() const {
      return __SQL_SUM_AGGREGATE_362;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_363() const {
      return __SQL_SUM_AGGREGATE_363;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_364() const {
      return __SQL_SUM_AGGREGATE_364;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_365() const {
      return __SQL_SUM_AGGREGATE_365;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_366() const {
      return __SQL_SUM_AGGREGATE_366;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_367() const {
      return __SQL_SUM_AGGREGATE_367;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_368() const {
      return __SQL_SUM_AGGREGATE_368;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_369() const {
      return __SQL_SUM_AGGREGATE_369;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_370() const {
      return __SQL_SUM_AGGREGATE_370;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_371() const {
      return __SQL_SUM_AGGREGATE_371;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_372() const {
      return __SQL_SUM_AGGREGATE_372;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_373() const {
      return __SQL_SUM_AGGREGATE_373;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_374() const {
      return __SQL_SUM_AGGREGATE_374;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_375() const {
      return __SQL_SUM_AGGREGATE_375;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_376() const {
      return __SQL_SUM_AGGREGATE_376;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_377() const {
      return __SQL_SUM_AGGREGATE_377;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_378() const {
      return __SQL_SUM_AGGREGATE_378;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_379() const {
      return __SQL_SUM_AGGREGATE_379;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_380() const {
      return __SQL_SUM_AGGREGATE_380;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_381() const {
      return __SQL_SUM_AGGREGATE_381;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_382() const {
      return __SQL_SUM_AGGREGATE_382;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_383() const {
      return __SQL_SUM_AGGREGATE_383;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_384() const {
      return __SQL_SUM_AGGREGATE_384;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_385() const {
      return __SQL_SUM_AGGREGATE_385;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_386() const {
      return __SQL_SUM_AGGREGATE_386;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_387() const {
      return __SQL_SUM_AGGREGATE_387;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_388() const {
      return __SQL_SUM_AGGREGATE_388;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_389() const {
      return __SQL_SUM_AGGREGATE_389;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_390() const {
      return __SQL_SUM_AGGREGATE_390;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_391() const {
      return __SQL_SUM_AGGREGATE_391;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_392() const {
      return __SQL_SUM_AGGREGATE_392;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_393() const {
      return __SQL_SUM_AGGREGATE_393;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_394() const {
      return __SQL_SUM_AGGREGATE_394;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_395() const {
      return __SQL_SUM_AGGREGATE_395;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_396() const {
      return __SQL_SUM_AGGREGATE_396;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_397() const {
      return __SQL_SUM_AGGREGATE_397;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_398() const {
      return __SQL_SUM_AGGREGATE_398;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_399() const {
      return __SQL_SUM_AGGREGATE_399;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_400() const {
      return __SQL_SUM_AGGREGATE_400;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_401() const {
      return __SQL_SUM_AGGREGATE_401;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_402() const {
      return __SQL_SUM_AGGREGATE_402;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_403() const {
      return __SQL_SUM_AGGREGATE_403;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_404() const {
      return __SQL_SUM_AGGREGATE_404;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_405() const {
      return __SQL_SUM_AGGREGATE_405;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_406() const {
      return __SQL_SUM_AGGREGATE_406;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_407() const {
      return __SQL_SUM_AGGREGATE_407;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_408() const {
      return __SQL_SUM_AGGREGATE_408;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_409() const {
      return __SQL_SUM_AGGREGATE_409;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_410() const {
      return __SQL_SUM_AGGREGATE_410;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_411() const {
      return __SQL_SUM_AGGREGATE_411;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_412() const {
      return __SQL_SUM_AGGREGATE_412;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_413() const {
      return __SQL_SUM_AGGREGATE_413;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_414() const {
      return __SQL_SUM_AGGREGATE_414;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_415() const {
      return __SQL_SUM_AGGREGATE_415;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_416() const {
      return __SQL_SUM_AGGREGATE_416;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_417() const {
      return __SQL_SUM_AGGREGATE_417;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_418() const {
      return __SQL_SUM_AGGREGATE_418;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_419() const {
      return __SQL_SUM_AGGREGATE_419;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_420() const {
      return __SQL_SUM_AGGREGATE_420;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_421() const {
      return __SQL_SUM_AGGREGATE_421;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_422() const {
      return __SQL_SUM_AGGREGATE_422;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_423() const {
      return __SQL_SUM_AGGREGATE_423;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_424() const {
      return __SQL_SUM_AGGREGATE_424;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_425() const {
      return __SQL_SUM_AGGREGATE_425;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_426() const {
      return __SQL_SUM_AGGREGATE_426;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_427() const {
      return __SQL_SUM_AGGREGATE_427;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_428() const {
      return __SQL_SUM_AGGREGATE_428;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_429() const {
      return __SQL_SUM_AGGREGATE_429;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_430() const {
      return __SQL_SUM_AGGREGATE_430;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_431() const {
      return __SQL_SUM_AGGREGATE_431;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_432() const {
      return __SQL_SUM_AGGREGATE_432;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_433() const {
      return __SQL_SUM_AGGREGATE_433;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_434() const {
      return __SQL_SUM_AGGREGATE_434;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_435() const {
      return __SQL_SUM_AGGREGATE_435;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_436() const {
      return __SQL_SUM_AGGREGATE_436;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_437() const {
      return __SQL_SUM_AGGREGATE_437;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_438() const {
      return __SQL_SUM_AGGREGATE_438;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_439() const {
      return __SQL_SUM_AGGREGATE_439;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_440() const {
      return __SQL_SUM_AGGREGATE_440;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_441() const {
      return __SQL_SUM_AGGREGATE_441;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_442() const {
      return __SQL_SUM_AGGREGATE_442;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_443() const {
      return __SQL_SUM_AGGREGATE_443;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_444() const {
      return __SQL_SUM_AGGREGATE_444;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_445() const {
      return __SQL_SUM_AGGREGATE_445;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_446() const {
      return __SQL_SUM_AGGREGATE_446;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_447() const {
      return __SQL_SUM_AGGREGATE_447;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_448() const {
      return __SQL_SUM_AGGREGATE_448;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_449() const {
      return __SQL_SUM_AGGREGATE_449;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_450() const {
      return __SQL_SUM_AGGREGATE_450;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_451() const {
      return __SQL_SUM_AGGREGATE_451;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_452() const {
      return __SQL_SUM_AGGREGATE_452;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_453() const {
      return __SQL_SUM_AGGREGATE_453;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_454() const {
      return __SQL_SUM_AGGREGATE_454;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_455() const {
      return __SQL_SUM_AGGREGATE_455;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_456() const {
      return __SQL_SUM_AGGREGATE_456;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_457() const {
      return __SQL_SUM_AGGREGATE_457;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_458() const {
      return __SQL_SUM_AGGREGATE_458;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_459() const {
      return __SQL_SUM_AGGREGATE_459;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_460() const {
      return __SQL_SUM_AGGREGATE_460;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_461() const {
      return __SQL_SUM_AGGREGATE_461;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_462() const {
      return __SQL_SUM_AGGREGATE_462;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_463() const {
      return __SQL_SUM_AGGREGATE_463;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_464() const {
      return __SQL_SUM_AGGREGATE_464;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_465() const {
      return __SQL_SUM_AGGREGATE_465;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_466() const {
      return __SQL_SUM_AGGREGATE_466;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_467() const {
      return __SQL_SUM_AGGREGATE_467;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_468() const {
      return __SQL_SUM_AGGREGATE_468;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_469() const {
      return __SQL_SUM_AGGREGATE_469;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_470() const {
      return __SQL_SUM_AGGREGATE_470;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_471() const {
      return __SQL_SUM_AGGREGATE_471;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_472() const {
      return __SQL_SUM_AGGREGATE_472;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_473() const {
      return __SQL_SUM_AGGREGATE_473;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_474() const {
      return __SQL_SUM_AGGREGATE_474;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_475() const {
      return __SQL_SUM_AGGREGATE_475;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_476() const {
      return __SQL_SUM_AGGREGATE_476;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_477() const {
      return __SQL_SUM_AGGREGATE_477;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_478() const {
      return __SQL_SUM_AGGREGATE_478;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_479() const {
      return __SQL_SUM_AGGREGATE_479;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_480() const {
      return __SQL_SUM_AGGREGATE_480;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_481() const {
      return __SQL_SUM_AGGREGATE_481;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_482() const {
      return __SQL_SUM_AGGREGATE_482;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_483() const {
      return __SQL_SUM_AGGREGATE_483;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_484() const {
      return __SQL_SUM_AGGREGATE_484;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_485() const {
      return __SQL_SUM_AGGREGATE_485;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_486() const {
      return __SQL_SUM_AGGREGATE_486;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_487() const {
      return __SQL_SUM_AGGREGATE_487;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_488() const {
      return __SQL_SUM_AGGREGATE_488;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_489() const {
      return __SQL_SUM_AGGREGATE_489;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_490() const {
      return __SQL_SUM_AGGREGATE_490;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_491() const {
      return __SQL_SUM_AGGREGATE_491;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_492() const {
      return __SQL_SUM_AGGREGATE_492;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_493() const {
      return __SQL_SUM_AGGREGATE_493;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_494() const {
      return __SQL_SUM_AGGREGATE_494;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_495() const {
      return __SQL_SUM_AGGREGATE_495;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_496() const {
      return __SQL_SUM_AGGREGATE_496;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_497() const {
      return __SQL_SUM_AGGREGATE_497;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_498() const {
      return __SQL_SUM_AGGREGATE_498;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_499() const {
      return __SQL_SUM_AGGREGATE_499;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_500() const {
      return __SQL_SUM_AGGREGATE_500;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_501() const {
      return __SQL_SUM_AGGREGATE_501;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_502() const {
      return __SQL_SUM_AGGREGATE_502;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_503() const {
      return __SQL_SUM_AGGREGATE_503;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_504() const {
      return __SQL_SUM_AGGREGATE_504;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_505() const {
      return __SQL_SUM_AGGREGATE_505;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_506() const {
      return __SQL_SUM_AGGREGATE_506;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_507() const {
      return __SQL_SUM_AGGREGATE_507;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_508() const {
      return __SQL_SUM_AGGREGATE_508;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_509() const {
      return __SQL_SUM_AGGREGATE_509;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_510() const {
      return __SQL_SUM_AGGREGATE_510;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_511() const {
      return __SQL_SUM_AGGREGATE_511;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_512() const {
      return __SQL_SUM_AGGREGATE_512;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_513() const {
      return __SQL_SUM_AGGREGATE_513;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_514() const {
      return __SQL_SUM_AGGREGATE_514;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_515() const {
      return __SQL_SUM_AGGREGATE_515;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_516() const {
      return __SQL_SUM_AGGREGATE_516;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_517() const {
      return __SQL_SUM_AGGREGATE_517;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_518() const {
      return __SQL_SUM_AGGREGATE_518;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_519() const {
      return __SQL_SUM_AGGREGATE_519;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_520() const {
      return __SQL_SUM_AGGREGATE_520;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_521() const {
      return __SQL_SUM_AGGREGATE_521;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_522() const {
      return __SQL_SUM_AGGREGATE_522;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_523() const {
      return __SQL_SUM_AGGREGATE_523;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_524() const {
      return __SQL_SUM_AGGREGATE_524;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_525() const {
      return __SQL_SUM_AGGREGATE_525;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_526() const {
      return __SQL_SUM_AGGREGATE_526;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_527() const {
      return __SQL_SUM_AGGREGATE_527;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_528() const {
      return __SQL_SUM_AGGREGATE_528;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_529() const {
      return __SQL_SUM_AGGREGATE_529;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_530() const {
      return __SQL_SUM_AGGREGATE_530;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_531() const {
      return __SQL_SUM_AGGREGATE_531;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_532() const {
      return __SQL_SUM_AGGREGATE_532;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_533() const {
      return __SQL_SUM_AGGREGATE_533;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_534() const {
      return __SQL_SUM_AGGREGATE_534;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_535() const {
      return __SQL_SUM_AGGREGATE_535;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_536() const {
      return __SQL_SUM_AGGREGATE_536;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_537() const {
      return __SQL_SUM_AGGREGATE_537;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_538() const {
      return __SQL_SUM_AGGREGATE_538;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_539() const {
      return __SQL_SUM_AGGREGATE_539;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_540() const {
      return __SQL_SUM_AGGREGATE_540;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_541() const {
      return __SQL_SUM_AGGREGATE_541;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_542() const {
      return __SQL_SUM_AGGREGATE_542;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_543() const {
      return __SQL_SUM_AGGREGATE_543;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_544() const {
      return __SQL_SUM_AGGREGATE_544;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_545() const {
      return __SQL_SUM_AGGREGATE_545;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_546() const {
      return __SQL_SUM_AGGREGATE_546;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_547() const {
      return __SQL_SUM_AGGREGATE_547;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_548() const {
      return __SQL_SUM_AGGREGATE_548;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_549() const {
      return __SQL_SUM_AGGREGATE_549;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_550() const {
      return __SQL_SUM_AGGREGATE_550;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_551() const {
      return __SQL_SUM_AGGREGATE_551;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_552() const {
      return __SQL_SUM_AGGREGATE_552;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_553() const {
      return __SQL_SUM_AGGREGATE_553;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_554() const {
      return __SQL_SUM_AGGREGATE_554;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_555() const {
      return __SQL_SUM_AGGREGATE_555;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_556() const {
      return __SQL_SUM_AGGREGATE_556;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_557() const {
      return __SQL_SUM_AGGREGATE_557;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_558() const {
      return __SQL_SUM_AGGREGATE_558;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_559() const {
      return __SQL_SUM_AGGREGATE_559;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_560() const {
      return __SQL_SUM_AGGREGATE_560;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_561() const {
      return __SQL_SUM_AGGREGATE_561;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_562() const {
      return __SQL_SUM_AGGREGATE_562;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_563() const {
      return __SQL_SUM_AGGREGATE_563;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_564() const {
      return __SQL_SUM_AGGREGATE_564;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_565() const {
      return __SQL_SUM_AGGREGATE_565;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_566() const {
      return __SQL_SUM_AGGREGATE_566;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_567() const {
      return __SQL_SUM_AGGREGATE_567;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_568() const {
      return __SQL_SUM_AGGREGATE_568;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_569() const {
      return __SQL_SUM_AGGREGATE_569;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_570() const {
      return __SQL_SUM_AGGREGATE_570;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_571() const {
      return __SQL_SUM_AGGREGATE_571;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_572() const {
      return __SQL_SUM_AGGREGATE_572;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_573() const {
      return __SQL_SUM_AGGREGATE_573;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_574() const {
      return __SQL_SUM_AGGREGATE_574;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_575() const {
      return __SQL_SUM_AGGREGATE_575;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_576() const {
      return __SQL_SUM_AGGREGATE_576;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_577() const {
      return __SQL_SUM_AGGREGATE_577;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_578() const {
      return __SQL_SUM_AGGREGATE_578;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_579() const {
      return __SQL_SUM_AGGREGATE_579;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_580() const {
      return __SQL_SUM_AGGREGATE_580;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_581() const {
      return __SQL_SUM_AGGREGATE_581;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_582() const {
      return __SQL_SUM_AGGREGATE_582;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_583() const {
      return __SQL_SUM_AGGREGATE_583;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_584() const {
      return __SQL_SUM_AGGREGATE_584;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_585() const {
      return __SQL_SUM_AGGREGATE_585;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_586() const {
      return __SQL_SUM_AGGREGATE_586;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_587() const {
      return __SQL_SUM_AGGREGATE_587;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_588() const {
      return __SQL_SUM_AGGREGATE_588;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_589() const {
      return __SQL_SUM_AGGREGATE_589;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_590() const {
      return __SQL_SUM_AGGREGATE_590;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_591() const {
      return __SQL_SUM_AGGREGATE_591;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_592() const {
      return __SQL_SUM_AGGREGATE_592;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_593() const {
      return __SQL_SUM_AGGREGATE_593;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_594() const {
      return __SQL_SUM_AGGREGATE_594;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_595() const {
      return __SQL_SUM_AGGREGATE_595;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_596() const {
      return __SQL_SUM_AGGREGATE_596;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_597() const {
      return __SQL_SUM_AGGREGATE_597;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_598() const {
      return __SQL_SUM_AGGREGATE_598;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_599() const {
      return __SQL_SUM_AGGREGATE_599;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_600() const {
      return __SQL_SUM_AGGREGATE_600;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_601() const {
      return __SQL_SUM_AGGREGATE_601;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_602() const {
      return __SQL_SUM_AGGREGATE_602;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_603() const {
      return __SQL_SUM_AGGREGATE_603;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_604() const {
      return __SQL_SUM_AGGREGATE_604;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_605() const {
      return __SQL_SUM_AGGREGATE_605;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_606() const {
      return __SQL_SUM_AGGREGATE_606;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_607() const {
      return __SQL_SUM_AGGREGATE_607;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_608() const {
      return __SQL_SUM_AGGREGATE_608;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_609() const {
      return __SQL_SUM_AGGREGATE_609;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_610() const {
      return __SQL_SUM_AGGREGATE_610;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_611() const {
      return __SQL_SUM_AGGREGATE_611;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_612() const {
      return __SQL_SUM_AGGREGATE_612;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_613() const {
      return __SQL_SUM_AGGREGATE_613;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_614() const {
      return __SQL_SUM_AGGREGATE_614;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_615() const {
      return __SQL_SUM_AGGREGATE_615;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_616() const {
      return __SQL_SUM_AGGREGATE_616;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_617() const {
      return __SQL_SUM_AGGREGATE_617;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_618() const {
      return __SQL_SUM_AGGREGATE_618;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_619() const {
      return __SQL_SUM_AGGREGATE_619;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_620() const {
      return __SQL_SUM_AGGREGATE_620;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_621() const {
      return __SQL_SUM_AGGREGATE_621;
    }
    const long get___SQL_SUM_AGGREGATE_622() const {
      return __SQL_SUM_AGGREGATE_622;
    }
    const long get___SQL_SUM_AGGREGATE_623() const {
      return __SQL_SUM_AGGREGATE_623;
    }
    const long get___SQL_SUM_AGGREGATE_624() const {
      return __SQL_SUM_AGGREGATE_624;
    }
    const long get___SQL_SUM_AGGREGATE_625() const {
      return __SQL_SUM_AGGREGATE_625;
    }
    const long get___SQL_SUM_AGGREGATE_626() const {
      return __SQL_SUM_AGGREGATE_626;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_627() const {
      return __SQL_SUM_AGGREGATE_627;
    }
    const long get___SQL_SUM_AGGREGATE_628() const {
      return __SQL_SUM_AGGREGATE_628;
    }
    const long get___SQL_SUM_AGGREGATE_629() const {
      return __SQL_SUM_AGGREGATE_629;
    }
    const long get___SQL_SUM_AGGREGATE_630() const {
      return __SQL_SUM_AGGREGATE_630;
    }
    const long get___SQL_SUM_AGGREGATE_631() const {
      return __SQL_SUM_AGGREGATE_631;
    }
    const long get___SQL_SUM_AGGREGATE_632() const {
      return __SQL_SUM_AGGREGATE_632;
    }
    const long get___SQL_SUM_AGGREGATE_633() const {
      return __SQL_SUM_AGGREGATE_633;
    }
    const long get___SQL_SUM_AGGREGATE_634() const {
      return __SQL_SUM_AGGREGATE_634;
    }
    const long get___SQL_SUM_AGGREGATE_635() const {
      return __SQL_SUM_AGGREGATE_635;
    }
    const long get___SQL_SUM_AGGREGATE_636() const {
      return __SQL_SUM_AGGREGATE_636;
    }
    const long get___SQL_SUM_AGGREGATE_637() const {
      return __SQL_SUM_AGGREGATE_637;
    }
    const long get___SQL_SUM_AGGREGATE_638() const {
      return __SQL_SUM_AGGREGATE_638;
    }
    const long get___SQL_SUM_AGGREGATE_639() const {
      return __SQL_SUM_AGGREGATE_639;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_640() const {
      return __SQL_SUM_AGGREGATE_640;
    }
    const long get___SQL_SUM_AGGREGATE_641() const {
      return __SQL_SUM_AGGREGATE_641;
    }
    const long get___SQL_SUM_AGGREGATE_642() const {
      return __SQL_SUM_AGGREGATE_642;
    }
    const long get___SQL_SUM_AGGREGATE_643() const {
      return __SQL_SUM_AGGREGATE_643;
    }
    const long get___SQL_SUM_AGGREGATE_644() const {
      return __SQL_SUM_AGGREGATE_644;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_645() const {
      return __SQL_SUM_AGGREGATE_645;
    }
    const long get___SQL_SUM_AGGREGATE_646() const {
      return __SQL_SUM_AGGREGATE_646;
    }
    const long get___SQL_SUM_AGGREGATE_647() const {
      return __SQL_SUM_AGGREGATE_647;
    }
    const long get___SQL_SUM_AGGREGATE_648() const {
      return __SQL_SUM_AGGREGATE_648;
    }
    const long get___SQL_SUM_AGGREGATE_649() const {
      return __SQL_SUM_AGGREGATE_649;
    }
    const long get___SQL_SUM_AGGREGATE_650() const {
      return __SQL_SUM_AGGREGATE_650;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_651() const {
      return __SQL_SUM_AGGREGATE_651;
    }
    const long get___SQL_SUM_AGGREGATE_652() const {
      return __SQL_SUM_AGGREGATE_652;
    }
    const long get___SQL_SUM_AGGREGATE_653() const {
      return __SQL_SUM_AGGREGATE_653;
    }
    const long get___SQL_SUM_AGGREGATE_654() const {
      return __SQL_SUM_AGGREGATE_654;
    }
    const long get___SQL_SUM_AGGREGATE_655() const {
      return __SQL_SUM_AGGREGATE_655;
    }
    const long get___SQL_SUM_AGGREGATE_656() const {
      return __SQL_SUM_AGGREGATE_656;
    }
    const long get___SQL_SUM_AGGREGATE_657() const {
      return __SQL_SUM_AGGREGATE_657;
    }
    const long get___SQL_SUM_AGGREGATE_658() const {
      return __SQL_SUM_AGGREGATE_658;
    }
    const long get___SQL_SUM_AGGREGATE_659() const {
      return __SQL_SUM_AGGREGATE_659;
    }
    const long get___SQL_SUM_AGGREGATE_660() const {
      return __SQL_SUM_AGGREGATE_660;
    }
    const long get___SQL_SUM_AGGREGATE_661() const {
      return __SQL_SUM_AGGREGATE_661;
    }
    const long get___SQL_SUM_AGGREGATE_662() const {
      return __SQL_SUM_AGGREGATE_662;
    }
    const long get___SQL_SUM_AGGREGATE_663() const {
      return __SQL_SUM_AGGREGATE_663;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_664() const {
      return __SQL_SUM_AGGREGATE_664;
    }
    const long get___SQL_SUM_AGGREGATE_665() const {
      return __SQL_SUM_AGGREGATE_665;
    }
    const long get___SQL_SUM_AGGREGATE_666() const {
      return __SQL_SUM_AGGREGATE_666;
    }
    const long get___SQL_SUM_AGGREGATE_667() const {
      return __SQL_SUM_AGGREGATE_667;
    }
    const long get___SQL_SUM_AGGREGATE_668() const {
      return __SQL_SUM_AGGREGATE_668;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_669() const {
      return __SQL_SUM_AGGREGATE_669;
    }
    const long get___SQL_SUM_AGGREGATE_670() const {
      return __SQL_SUM_AGGREGATE_670;
    }
    const long get___SQL_SUM_AGGREGATE_671() const {
      return __SQL_SUM_AGGREGATE_671;
    }
    const long get___SQL_SUM_AGGREGATE_672() const {
      return __SQL_SUM_AGGREGATE_672;
    }
    const long get___SQL_SUM_AGGREGATE_673() const {
      return __SQL_SUM_AGGREGATE_673;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_674() const {
      return __SQL_SUM_AGGREGATE_674;
    }
    const long get___SQL_SUM_AGGREGATE_675() const {
      return __SQL_SUM_AGGREGATE_675;
    }
    const long get___SQL_SUM_AGGREGATE_676() const {
      return __SQL_SUM_AGGREGATE_676;
    }
    const long get___SQL_SUM_AGGREGATE_677() const {
      return __SQL_SUM_AGGREGATE_677;
    }
    const long get___SQL_SUM_AGGREGATE_678() const {
      return __SQL_SUM_AGGREGATE_678;
    }
    const long get___SQL_SUM_AGGREGATE_679() const {
      return __SQL_SUM_AGGREGATE_679;
    }
    const long get___SQL_SUM_AGGREGATE_680() const {
      return __SQL_SUM_AGGREGATE_680;
    }
    const long get___SQL_SUM_AGGREGATE_681() const {
      return __SQL_SUM_AGGREGATE_681;
    }
    const long get___SQL_SUM_AGGREGATE_682() const {
      return __SQL_SUM_AGGREGATE_682;
    }
    const long get___SQL_SUM_AGGREGATE_683() const {
      return __SQL_SUM_AGGREGATE_683;
    }
    const long get___SQL_SUM_AGGREGATE_684() const {
      return __SQL_SUM_AGGREGATE_684;
    }
    const long get___SQL_SUM_AGGREGATE_685() const {
      return __SQL_SUM_AGGREGATE_685;
    }
    const long get___SQL_SUM_AGGREGATE_686() const {
      return __SQL_SUM_AGGREGATE_686;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_687() const {
      return __SQL_SUM_AGGREGATE_687;
    }
    const long get___SQL_SUM_AGGREGATE_688() const {
      return __SQL_SUM_AGGREGATE_688;
    }
    const long get___SQL_SUM_AGGREGATE_689() const {
      return __SQL_SUM_AGGREGATE_689;
    }
    const long get___SQL_SUM_AGGREGATE_690() const {
      return __SQL_SUM_AGGREGATE_690;
    }
    const long get___SQL_SUM_AGGREGATE_691() const {
      return __SQL_SUM_AGGREGATE_691;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_692() const {
      return __SQL_SUM_AGGREGATE_692;
    }
    const long get___SQL_SUM_AGGREGATE_693() const {
      return __SQL_SUM_AGGREGATE_693;
    }
    const long get___SQL_SUM_AGGREGATE_694() const {
      return __SQL_SUM_AGGREGATE_694;
    }
    const long get___SQL_SUM_AGGREGATE_695() const {
      return __SQL_SUM_AGGREGATE_695;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_696() const {
      return __SQL_SUM_AGGREGATE_696;
    }
    const long get___SQL_SUM_AGGREGATE_697() const {
      return __SQL_SUM_AGGREGATE_697;
    }
    const long get___SQL_SUM_AGGREGATE_698() const {
      return __SQL_SUM_AGGREGATE_698;
    }
    const long get___SQL_SUM_AGGREGATE_699() const {
      return __SQL_SUM_AGGREGATE_699;
    }
    const long get___SQL_SUM_AGGREGATE_700() const {
      return __SQL_SUM_AGGREGATE_700;
    }
    const long get___SQL_SUM_AGGREGATE_701() const {
      return __SQL_SUM_AGGREGATE_701;
    }
    const long get___SQL_SUM_AGGREGATE_702() const {
      return __SQL_SUM_AGGREGATE_702;
    }
    const long get___SQL_SUM_AGGREGATE_703() const {
      return __SQL_SUM_AGGREGATE_703;
    }
    const long get___SQL_SUM_AGGREGATE_704() const {
      return __SQL_SUM_AGGREGATE_704;
    }
    const long get___SQL_SUM_AGGREGATE_705() const {
      return __SQL_SUM_AGGREGATE_705;
    }
    const long get___SQL_SUM_AGGREGATE_706() const {
      return __SQL_SUM_AGGREGATE_706;
    }
    const long get___SQL_SUM_AGGREGATE_707() const {
      return __SQL_SUM_AGGREGATE_707;
    }
    const long get___SQL_SUM_AGGREGATE_708() const {
      return __SQL_SUM_AGGREGATE_708;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_709() const {
      return __SQL_SUM_AGGREGATE_709;
    }
    const long get___SQL_SUM_AGGREGATE_710() const {
      return __SQL_SUM_AGGREGATE_710;
    }
    const long get___SQL_SUM_AGGREGATE_711() const {
      return __SQL_SUM_AGGREGATE_711;
    }
    const long get___SQL_SUM_AGGREGATE_712() const {
      return __SQL_SUM_AGGREGATE_712;
    }
    const long get___SQL_SUM_AGGREGATE_713() const {
      return __SQL_SUM_AGGREGATE_713;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_714() const {
      return __SQL_SUM_AGGREGATE_714;
    }
    const long get___SQL_SUM_AGGREGATE_715() const {
      return __SQL_SUM_AGGREGATE_715;
    }
    const long get___SQL_SUM_AGGREGATE_716() const {
      return __SQL_SUM_AGGREGATE_716;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_717() const {
      return __SQL_SUM_AGGREGATE_717;
    }
    const long get___SQL_SUM_AGGREGATE_718() const {
      return __SQL_SUM_AGGREGATE_718;
    }
    const long get___SQL_SUM_AGGREGATE_719() const {
      return __SQL_SUM_AGGREGATE_719;
    }
    const long get___SQL_SUM_AGGREGATE_720() const {
      return __SQL_SUM_AGGREGATE_720;
    }
    const long get___SQL_SUM_AGGREGATE_721() const {
      return __SQL_SUM_AGGREGATE_721;
    }
    const long get___SQL_SUM_AGGREGATE_722() const {
      return __SQL_SUM_AGGREGATE_722;
    }
    const long get___SQL_SUM_AGGREGATE_723() const {
      return __SQL_SUM_AGGREGATE_723;
    }
    const long get___SQL_SUM_AGGREGATE_724() const {
      return __SQL_SUM_AGGREGATE_724;
    }
    const long get___SQL_SUM_AGGREGATE_725() const {
      return __SQL_SUM_AGGREGATE_725;
    }
    const long get___SQL_SUM_AGGREGATE_726() const {
      return __SQL_SUM_AGGREGATE_726;
    }
    const long get___SQL_SUM_AGGREGATE_727() const {
      return __SQL_SUM_AGGREGATE_727;
    }
    const long get___SQL_SUM_AGGREGATE_728() const {
      return __SQL_SUM_AGGREGATE_728;
    }
    const long get___SQL_SUM_AGGREGATE_729() const {
      return __SQL_SUM_AGGREGATE_729;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_730() const {
      return __SQL_SUM_AGGREGATE_730;
    }
    const long get___SQL_SUM_AGGREGATE_731() const {
      return __SQL_SUM_AGGREGATE_731;
    }
    const long get___SQL_SUM_AGGREGATE_732() const {
      return __SQL_SUM_AGGREGATE_732;
    }
    const long get___SQL_SUM_AGGREGATE_733() const {
      return __SQL_SUM_AGGREGATE_733;
    }
    const long get___SQL_SUM_AGGREGATE_734() const {
      return __SQL_SUM_AGGREGATE_734;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_735() const {
      return __SQL_SUM_AGGREGATE_735;
    }
    const long get___SQL_SUM_AGGREGATE_736() const {
      return __SQL_SUM_AGGREGATE_736;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_737() const {
      return __SQL_SUM_AGGREGATE_737;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_738() const {
      return __SQL_SUM_AGGREGATE_738;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_739() const {
      return __SQL_SUM_AGGREGATE_739;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_740() const {
      return __SQL_SUM_AGGREGATE_740;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_741() const {
      return __SQL_SUM_AGGREGATE_741;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_742() const {
      return __SQL_SUM_AGGREGATE_742;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_743() const {
      return __SQL_SUM_AGGREGATE_743;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_744() const {
      return __SQL_SUM_AGGREGATE_744;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_745() const {
      return __SQL_SUM_AGGREGATE_745;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_746() const {
      return __SQL_SUM_AGGREGATE_746;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_747() const {
      return __SQL_SUM_AGGREGATE_747;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_748() const {
      return __SQL_SUM_AGGREGATE_748;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_749() const {
      return __SQL_SUM_AGGREGATE_749;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_750() const {
      return __SQL_SUM_AGGREGATE_750;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_751() const {
      return __SQL_SUM_AGGREGATE_751;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_752() const {
      return __SQL_SUM_AGGREGATE_752;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_753() const {
      return __SQL_SUM_AGGREGATE_753;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_754() const {
      return __SQL_SUM_AGGREGATE_754;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_755() const {
      return __SQL_SUM_AGGREGATE_755;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_756() const {
      return __SQL_SUM_AGGREGATE_756;
    }
    const long get___SQL_SUM_AGGREGATE_757() const {
      return __SQL_SUM_AGGREGATE_757;
    }
    const long get___SQL_SUM_AGGREGATE_758() const {
      return __SQL_SUM_AGGREGATE_758;
    }
    const long get___SQL_SUM_AGGREGATE_759() const {
      return __SQL_SUM_AGGREGATE_759;
    }
    const long get___SQL_SUM_AGGREGATE_760() const {
      return __SQL_SUM_AGGREGATE_760;
    }
    const long get___SQL_SUM_AGGREGATE_761() const {
      return __SQL_SUM_AGGREGATE_761;
    }
    const long get___SQL_SUM_AGGREGATE_762() const {
      return __SQL_SUM_AGGREGATE_762;
    }
    const long get___SQL_SUM_AGGREGATE_763() const {
      return __SQL_SUM_AGGREGATE_763;
    }
    const long get___SQL_SUM_AGGREGATE_764() const {
      return __SQL_SUM_AGGREGATE_764;
    }
    const long get___SQL_SUM_AGGREGATE_765() const {
      return __SQL_SUM_AGGREGATE_765;
    }
    const long get___SQL_SUM_AGGREGATE_766() const {
      return __SQL_SUM_AGGREGATE_766;
    }
    const long get___SQL_SUM_AGGREGATE_767() const {
      return __SQL_SUM_AGGREGATE_767;
    }
    const long get___SQL_SUM_AGGREGATE_768() const {
      return __SQL_SUM_AGGREGATE_768;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_769() const {
      return __SQL_SUM_AGGREGATE_769;
    }
    const long get___SQL_SUM_AGGREGATE_770() const {
      return __SQL_SUM_AGGREGATE_770;
    }
    const long get___SQL_SUM_AGGREGATE_771() const {
      return __SQL_SUM_AGGREGATE_771;
    }
    const long get___SQL_SUM_AGGREGATE_772() const {
      return __SQL_SUM_AGGREGATE_772;
    }
    const long get___SQL_SUM_AGGREGATE_773() const {
      return __SQL_SUM_AGGREGATE_773;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_774() const {
      return __SQL_SUM_AGGREGATE_774;
    }
    const long get___SQL_SUM_AGGREGATE_775() const {
      return __SQL_SUM_AGGREGATE_775;
    }
    const long get___SQL_SUM_AGGREGATE_776() const {
      return __SQL_SUM_AGGREGATE_776;
    }
    const long get___SQL_SUM_AGGREGATE_777() const {
      return __SQL_SUM_AGGREGATE_777;
    }
    const long get___SQL_SUM_AGGREGATE_778() const {
      return __SQL_SUM_AGGREGATE_778;
    }
    const long get___SQL_SUM_AGGREGATE_779() const {
      return __SQL_SUM_AGGREGATE_779;
    }
    const long get___SQL_SUM_AGGREGATE_780() const {
      return __SQL_SUM_AGGREGATE_780;
    }
    const long get___SQL_SUM_AGGREGATE_781() const {
      return __SQL_SUM_AGGREGATE_781;
    }
    const long get___SQL_SUM_AGGREGATE_782() const {
      return __SQL_SUM_AGGREGATE_782;
    }
    const long get___SQL_SUM_AGGREGATE_783() const {
      return __SQL_SUM_AGGREGATE_783;
    }
    const long get___SQL_SUM_AGGREGATE_784() const {
      return __SQL_SUM_AGGREGATE_784;
    }
    const long get___SQL_SUM_AGGREGATE_785() const {
      return __SQL_SUM_AGGREGATE_785;
    }
    const long get___SQL_SUM_AGGREGATE_786() const {
      return __SQL_SUM_AGGREGATE_786;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_787() const {
      return __SQL_SUM_AGGREGATE_787;
    }
    const long get___SQL_SUM_AGGREGATE_788() const {
      return __SQL_SUM_AGGREGATE_788;
    }
    const long get___SQL_SUM_AGGREGATE_789() const {
      return __SQL_SUM_AGGREGATE_789;
    }
    const long get___SQL_SUM_AGGREGATE_790() const {
      return __SQL_SUM_AGGREGATE_790;
    }
    const long get___SQL_SUM_AGGREGATE_791() const {
      return __SQL_SUM_AGGREGATE_791;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_792() const {
      return __SQL_SUM_AGGREGATE_792;
    }
    const long get___SQL_SUM_AGGREGATE_793() const {
      return __SQL_SUM_AGGREGATE_793;
    }
    const long get___SQL_SUM_AGGREGATE_794() const {
      return __SQL_SUM_AGGREGATE_794;
    }
    const long get___SQL_SUM_AGGREGATE_795() const {
      return __SQL_SUM_AGGREGATE_795;
    }
    const long get___SQL_SUM_AGGREGATE_796() const {
      return __SQL_SUM_AGGREGATE_796;
    }
    const long get___SQL_SUM_AGGREGATE_797() const {
      return __SQL_SUM_AGGREGATE_797;
    }
    const long get___SQL_SUM_AGGREGATE_798() const {
      return __SQL_SUM_AGGREGATE_798;
    }
    const long get___SQL_SUM_AGGREGATE_799() const {
      return __SQL_SUM_AGGREGATE_799;
    }
    const long get___SQL_SUM_AGGREGATE_800() const {
      return __SQL_SUM_AGGREGATE_800;
    }
    const long get___SQL_SUM_AGGREGATE_801() const {
      return __SQL_SUM_AGGREGATE_801;
    }
    const long get___SQL_SUM_AGGREGATE_802() const {
      return __SQL_SUM_AGGREGATE_802;
    }
    const long get___SQL_SUM_AGGREGATE_803() const {
      return __SQL_SUM_AGGREGATE_803;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_804() const {
      return __SQL_SUM_AGGREGATE_804;
    }
    const long get___SQL_SUM_AGGREGATE_805() const {
      return __SQL_SUM_AGGREGATE_805;
    }
    const long get___SQL_SUM_AGGREGATE_806() const {
      return __SQL_SUM_AGGREGATE_806;
    }
    const long get___SQL_SUM_AGGREGATE_807() const {
      return __SQL_SUM_AGGREGATE_807;
    }
    const long get___SQL_SUM_AGGREGATE_808() const {
      return __SQL_SUM_AGGREGATE_808;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_809() const {
      return __SQL_SUM_AGGREGATE_809;
    }
    const long get___SQL_SUM_AGGREGATE_810() const {
      return __SQL_SUM_AGGREGATE_810;
    }
    const long get___SQL_SUM_AGGREGATE_811() const {
      return __SQL_SUM_AGGREGATE_811;
    }
    const long get___SQL_SUM_AGGREGATE_812() const {
      return __SQL_SUM_AGGREGATE_812;
    }
    const long get___SQL_SUM_AGGREGATE_813() const {
      return __SQL_SUM_AGGREGATE_813;
    }
    const long get___SQL_SUM_AGGREGATE_814() const {
      return __SQL_SUM_AGGREGATE_814;
    }
    const long get___SQL_SUM_AGGREGATE_815() const {
      return __SQL_SUM_AGGREGATE_815;
    }
    const long get___SQL_SUM_AGGREGATE_816() const {
      return __SQL_SUM_AGGREGATE_816;
    }
    const long get___SQL_SUM_AGGREGATE_817() const {
      return __SQL_SUM_AGGREGATE_817;
    }
    const long get___SQL_SUM_AGGREGATE_818() const {
      return __SQL_SUM_AGGREGATE_818;
    }
    const long get___SQL_SUM_AGGREGATE_819() const {
      return __SQL_SUM_AGGREGATE_819;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_820() const {
      return __SQL_SUM_AGGREGATE_820;
    }
    const long get___SQL_SUM_AGGREGATE_821() const {
      return __SQL_SUM_AGGREGATE_821;
    }
    const long get___SQL_SUM_AGGREGATE_822() const {
      return __SQL_SUM_AGGREGATE_822;
    }
    const long get___SQL_SUM_AGGREGATE_823() const {
      return __SQL_SUM_AGGREGATE_823;
    }
    const long get___SQL_SUM_AGGREGATE_824() const {
      return __SQL_SUM_AGGREGATE_824;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_825() const {
      return __SQL_SUM_AGGREGATE_825;
    }
    const long get___SQL_SUM_AGGREGATE_826() const {
      return __SQL_SUM_AGGREGATE_826;
    }
    const long get___SQL_SUM_AGGREGATE_827() const {
      return __SQL_SUM_AGGREGATE_827;
    }
    const long get___SQL_SUM_AGGREGATE_828() const {
      return __SQL_SUM_AGGREGATE_828;
    }
    const long get___SQL_SUM_AGGREGATE_829() const {
      return __SQL_SUM_AGGREGATE_829;
    }
    const long get___SQL_SUM_AGGREGATE_830() const {
      return __SQL_SUM_AGGREGATE_830;
    }
    const long get___SQL_SUM_AGGREGATE_831() const {
      return __SQL_SUM_AGGREGATE_831;
    }
    const long get___SQL_SUM_AGGREGATE_832() const {
      return __SQL_SUM_AGGREGATE_832;
    }
    const long get___SQL_SUM_AGGREGATE_833() const {
      return __SQL_SUM_AGGREGATE_833;
    }
    const long get___SQL_SUM_AGGREGATE_834() const {
      return __SQL_SUM_AGGREGATE_834;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_835() const {
      return __SQL_SUM_AGGREGATE_835;
    }
    const long get___SQL_SUM_AGGREGATE_836() const {
      return __SQL_SUM_AGGREGATE_836;
    }
    const long get___SQL_SUM_AGGREGATE_837() const {
      return __SQL_SUM_AGGREGATE_837;
    }
    const long get___SQL_SUM_AGGREGATE_838() const {
      return __SQL_SUM_AGGREGATE_838;
    }
    const long get___SQL_SUM_AGGREGATE_839() const {
      return __SQL_SUM_AGGREGATE_839;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_840() const {
      return __SQL_SUM_AGGREGATE_840;
    }
    const long get___SQL_SUM_AGGREGATE_841() const {
      return __SQL_SUM_AGGREGATE_841;
    }
    const long get___SQL_SUM_AGGREGATE_842() const {
      return __SQL_SUM_AGGREGATE_842;
    }
    const long get___SQL_SUM_AGGREGATE_843() const {
      return __SQL_SUM_AGGREGATE_843;
    }
    const long get___SQL_SUM_AGGREGATE_844() const {
      return __SQL_SUM_AGGREGATE_844;
    }
    const long get___SQL_SUM_AGGREGATE_845() const {
      return __SQL_SUM_AGGREGATE_845;
    }
    const long get___SQL_SUM_AGGREGATE_846() const {
      return __SQL_SUM_AGGREGATE_846;
    }
    const long get___SQL_SUM_AGGREGATE_847() const {
      return __SQL_SUM_AGGREGATE_847;
    }
    const long get___SQL_SUM_AGGREGATE_848() const {
      return __SQL_SUM_AGGREGATE_848;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_849() const {
      return __SQL_SUM_AGGREGATE_849;
    }
    const long get___SQL_SUM_AGGREGATE_850() const {
      return __SQL_SUM_AGGREGATE_850;
    }
    const long get___SQL_SUM_AGGREGATE_851() const {
      return __SQL_SUM_AGGREGATE_851;
    }
    const long get___SQL_SUM_AGGREGATE_852() const {
      return __SQL_SUM_AGGREGATE_852;
    }
    const long get___SQL_SUM_AGGREGATE_853() const {
      return __SQL_SUM_AGGREGATE_853;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_854() const {
      return __SQL_SUM_AGGREGATE_854;
    }
    const long get___SQL_SUM_AGGREGATE_855() const {
      return __SQL_SUM_AGGREGATE_855;
    }
    const long get___SQL_SUM_AGGREGATE_856() const {
      return __SQL_SUM_AGGREGATE_856;
    }
    const long get___SQL_SUM_AGGREGATE_857() const {
      return __SQL_SUM_AGGREGATE_857;
    }
    const long get___SQL_SUM_AGGREGATE_858() const {
      return __SQL_SUM_AGGREGATE_858;
    }
    const long get___SQL_SUM_AGGREGATE_859() const {
      return __SQL_SUM_AGGREGATE_859;
    }
    const long get___SQL_SUM_AGGREGATE_860() const {
      return __SQL_SUM_AGGREGATE_860;
    }
    const long get___SQL_SUM_AGGREGATE_861() const {
      return __SQL_SUM_AGGREGATE_861;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_862() const {
      return __SQL_SUM_AGGREGATE_862;
    }
    const long get___SQL_SUM_AGGREGATE_863() const {
      return __SQL_SUM_AGGREGATE_863;
    }
    const long get___SQL_SUM_AGGREGATE_864() const {
      return __SQL_SUM_AGGREGATE_864;
    }
    const long get___SQL_SUM_AGGREGATE_865() const {
      return __SQL_SUM_AGGREGATE_865;
    }
    const long get___SQL_SUM_AGGREGATE_866() const {
      return __SQL_SUM_AGGREGATE_866;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_867() const {
      return __SQL_SUM_AGGREGATE_867;
    }
    const long get___SQL_SUM_AGGREGATE_868() const {
      return __SQL_SUM_AGGREGATE_868;
    }
    const long get___SQL_SUM_AGGREGATE_869() const {
      return __SQL_SUM_AGGREGATE_869;
    }
    const long get___SQL_SUM_AGGREGATE_870() const {
      return __SQL_SUM_AGGREGATE_870;
    }
    const long get___SQL_SUM_AGGREGATE_871() const {
      return __SQL_SUM_AGGREGATE_871;
    }
    const long get___SQL_SUM_AGGREGATE_872() const {
      return __SQL_SUM_AGGREGATE_872;
    }
    const long get___SQL_SUM_AGGREGATE_873() const {
      return __SQL_SUM_AGGREGATE_873;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_874() const {
      return __SQL_SUM_AGGREGATE_874;
    }
    const long get___SQL_SUM_AGGREGATE_875() const {
      return __SQL_SUM_AGGREGATE_875;
    }
    const long get___SQL_SUM_AGGREGATE_876() const {
      return __SQL_SUM_AGGREGATE_876;
    }
    const long get___SQL_SUM_AGGREGATE_877() const {
      return __SQL_SUM_AGGREGATE_877;
    }
    const long get___SQL_SUM_AGGREGATE_878() const {
      return __SQL_SUM_AGGREGATE_878;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_879() const {
      return __SQL_SUM_AGGREGATE_879;
    }
    const long get___SQL_SUM_AGGREGATE_880() const {
      return __SQL_SUM_AGGREGATE_880;
    }
    const long get___SQL_SUM_AGGREGATE_881() const {
      return __SQL_SUM_AGGREGATE_881;
    }
    const long get___SQL_SUM_AGGREGATE_882() const {
      return __SQL_SUM_AGGREGATE_882;
    }
    const long get___SQL_SUM_AGGREGATE_883() const {
      return __SQL_SUM_AGGREGATE_883;
    }
    const long get___SQL_SUM_AGGREGATE_884() const {
      return __SQL_SUM_AGGREGATE_884;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_885() const {
      return __SQL_SUM_AGGREGATE_885;
    }
    const long get___SQL_SUM_AGGREGATE_886() const {
      return __SQL_SUM_AGGREGATE_886;
    }
    const long get___SQL_SUM_AGGREGATE_887() const {
      return __SQL_SUM_AGGREGATE_887;
    }
    const long get___SQL_SUM_AGGREGATE_888() const {
      return __SQL_SUM_AGGREGATE_888;
    }
    const long get___SQL_SUM_AGGREGATE_889() const {
      return __SQL_SUM_AGGREGATE_889;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_890() const {
      return __SQL_SUM_AGGREGATE_890;
    }
    const long get___SQL_SUM_AGGREGATE_891() const {
      return __SQL_SUM_AGGREGATE_891;
    }
    const long get___SQL_SUM_AGGREGATE_892() const {
      return __SQL_SUM_AGGREGATE_892;
    }
    const long get___SQL_SUM_AGGREGATE_893() const {
      return __SQL_SUM_AGGREGATE_893;
    }
    const long get___SQL_SUM_AGGREGATE_894() const {
      return __SQL_SUM_AGGREGATE_894;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_895() const {
      return __SQL_SUM_AGGREGATE_895;
    }
    const long get___SQL_SUM_AGGREGATE_896() const {
      return __SQL_SUM_AGGREGATE_896;
    }
    const long get___SQL_SUM_AGGREGATE_897() const {
      return __SQL_SUM_AGGREGATE_897;
    }
    const long get___SQL_SUM_AGGREGATE_898() const {
      return __SQL_SUM_AGGREGATE_898;
    }
    const long get___SQL_SUM_AGGREGATE_899() const {
      return __SQL_SUM_AGGREGATE_899;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_900() const {
      return __SQL_SUM_AGGREGATE_900;
    }
    const long get___SQL_SUM_AGGREGATE_901() const {
      return __SQL_SUM_AGGREGATE_901;
    }
    const long get___SQL_SUM_AGGREGATE_902() const {
      return __SQL_SUM_AGGREGATE_902;
    }
    const long get___SQL_SUM_AGGREGATE_903() const {
      return __SQL_SUM_AGGREGATE_903;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_904() const {
      return __SQL_SUM_AGGREGATE_904;
    }
    const long get___SQL_SUM_AGGREGATE_905() const {
      return __SQL_SUM_AGGREGATE_905;
    }
    const long get___SQL_SUM_AGGREGATE_906() const {
      return __SQL_SUM_AGGREGATE_906;
    }
    const long get___SQL_SUM_AGGREGATE_907() const {
      return __SQL_SUM_AGGREGATE_907;
    }
    const long get___SQL_SUM_AGGREGATE_908() const {
      return __SQL_SUM_AGGREGATE_908;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_909() const {
      return __SQL_SUM_AGGREGATE_909;
    }
    const long get___SQL_SUM_AGGREGATE_910() const {
      return __SQL_SUM_AGGREGATE_910;
    }
    const long get___SQL_SUM_AGGREGATE_911() const {
      return __SQL_SUM_AGGREGATE_911;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_912() const {
      return __SQL_SUM_AGGREGATE_912;
    }
    const long get___SQL_SUM_AGGREGATE_913() const {
      return __SQL_SUM_AGGREGATE_913;
    }
    const long get___SQL_SUM_AGGREGATE_914() const {
      return __SQL_SUM_AGGREGATE_914;
    }
    const long get___SQL_SUM_AGGREGATE_915() const {
      return __SQL_SUM_AGGREGATE_915;
    }
    const long get___SQL_SUM_AGGREGATE_916() const {
      return __SQL_SUM_AGGREGATE_916;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_917() const {
      return __SQL_SUM_AGGREGATE_917;
    }
    const long get___SQL_SUM_AGGREGATE_918() const {
      return __SQL_SUM_AGGREGATE_918;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_919() const {
      return __SQL_SUM_AGGREGATE_919;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_920() const {
      return __SQL_SUM_AGGREGATE_920;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_921() const {
      return __SQL_SUM_AGGREGATE_921;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_922() const {
      return __SQL_SUM_AGGREGATE_922;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_923() const {
      return __SQL_SUM_AGGREGATE_923;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_924() const {
      return __SQL_SUM_AGGREGATE_924;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_925() const {
      return __SQL_SUM_AGGREGATE_925;
    }
    const long get___SQL_SUM_AGGREGATE_926() const {
      return __SQL_SUM_AGGREGATE_926;
    }
    const long get___SQL_SUM_AGGREGATE_927() const {
      return __SQL_SUM_AGGREGATE_927;
    }
    const long get___SQL_SUM_AGGREGATE_928() const {
      return __SQL_SUM_AGGREGATE_928;
    }
    const long get___SQL_SUM_AGGREGATE_929() const {
      return __SQL_SUM_AGGREGATE_929;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_930() const {
      return __SQL_SUM_AGGREGATE_930;
    }
    const long get___SQL_SUM_AGGREGATE_931() const {
      return __SQL_SUM_AGGREGATE_931;
    }
    const long get___SQL_SUM_AGGREGATE_932() const {
      return __SQL_SUM_AGGREGATE_932;
    }
    const long get___SQL_SUM_AGGREGATE_933() const {
      return __SQL_SUM_AGGREGATE_933;
    }
    const long get___SQL_SUM_AGGREGATE_934() const {
      return __SQL_SUM_AGGREGATE_934;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_935() const {
      return __SQL_SUM_AGGREGATE_935;
    }
    const long get___SQL_SUM_AGGREGATE_936() const {
      return __SQL_SUM_AGGREGATE_936;
    }
    const long get___SQL_SUM_AGGREGATE_937() const {
      return __SQL_SUM_AGGREGATE_937;
    }
    const long get___SQL_SUM_AGGREGATE_938() const {
      return __SQL_SUM_AGGREGATE_938;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_939() const {
      return __SQL_SUM_AGGREGATE_939;
    }
    const long get___SQL_SUM_AGGREGATE_940() const {
      return __SQL_SUM_AGGREGATE_940;
    }
    const long get___SQL_SUM_AGGREGATE_941() const {
      return __SQL_SUM_AGGREGATE_941;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_942() const {
      return __SQL_SUM_AGGREGATE_942;
    }
    const long get___SQL_SUM_AGGREGATE_943() const {
      return __SQL_SUM_AGGREGATE_943;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_944() const {
      return __SQL_SUM_AGGREGATE_944;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_945() const {
      return __SQL_SUM_AGGREGATE_945;
    }
    const long get___SQL_SUM_AGGREGATE_946() const {
      return __SQL_SUM_AGGREGATE_946;
    }
  
  protected:
    /* Data structures used for storing / computing top level queries */
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_1;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_2;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_3;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_4;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_5;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_6;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_7;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_8;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_9;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_10;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_11;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_12;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_13;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_14;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_15;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_16;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_17;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_18;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_19;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_20;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_21;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_22;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_23;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_24;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_25;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_26;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_27;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_28;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_29;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_30;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_31;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_32;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_33;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_34;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_35;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_36;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_37;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_38;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_39;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_40;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_41;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_42;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_43;
    long __SQL_SUM_AGGREGATE_44;
    long __SQL_SUM_AGGREGATE_45;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_46;
    long __SQL_SUM_AGGREGATE_47;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_48;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_49;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_50;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_51;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_52;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_53;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_54;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_55;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_56;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_57;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_58;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_59;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_60;
    long __SQL_SUM_AGGREGATE_61;
    long __SQL_SUM_AGGREGATE_62;
    long __SQL_SUM_AGGREGATE_63;
    long __SQL_SUM_AGGREGATE_64;
    long __SQL_SUM_AGGREGATE_65;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_66;
    long __SQL_SUM_AGGREGATE_67;
    long __SQL_SUM_AGGREGATE_68;
    long __SQL_SUM_AGGREGATE_69;
    long __SQL_SUM_AGGREGATE_70;
    long __SQL_SUM_AGGREGATE_71;
    long __SQL_SUM_AGGREGATE_72;
    long __SQL_SUM_AGGREGATE_73;
    long __SQL_SUM_AGGREGATE_74;
    long __SQL_SUM_AGGREGATE_75;
    long __SQL_SUM_AGGREGATE_76;
    long __SQL_SUM_AGGREGATE_77;
    long __SQL_SUM_AGGREGATE_78;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_79;
    long __SQL_SUM_AGGREGATE_80;
    long __SQL_SUM_AGGREGATE_81;
    long __SQL_SUM_AGGREGATE_82;
    long __SQL_SUM_AGGREGATE_83;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_84;
    long __SQL_SUM_AGGREGATE_85;
    long __SQL_SUM_AGGREGATE_86;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_87;
    long __SQL_SUM_AGGREGATE_88;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_89;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_90;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_91;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_92;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_93;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_94;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_95;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_96;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_97;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_98;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_99;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_100;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_101;
    long __SQL_SUM_AGGREGATE_102;
    long __SQL_SUM_AGGREGATE_103;
    long __SQL_SUM_AGGREGATE_104;
    long __SQL_SUM_AGGREGATE_105;
    long __SQL_SUM_AGGREGATE_106;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_107;
    long __SQL_SUM_AGGREGATE_108;
    long __SQL_SUM_AGGREGATE_109;
    long __SQL_SUM_AGGREGATE_110;
    long __SQL_SUM_AGGREGATE_111;
    long __SQL_SUM_AGGREGATE_112;
    long __SQL_SUM_AGGREGATE_113;
    long __SQL_SUM_AGGREGATE_114;
    long __SQL_SUM_AGGREGATE_115;
    long __SQL_SUM_AGGREGATE_116;
    long __SQL_SUM_AGGREGATE_117;
    long __SQL_SUM_AGGREGATE_118;
    long __SQL_SUM_AGGREGATE_119;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_120;
    long __SQL_SUM_AGGREGATE_121;
    long __SQL_SUM_AGGREGATE_122;
    long __SQL_SUM_AGGREGATE_123;
    long __SQL_SUM_AGGREGATE_124;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_125;
    long __SQL_SUM_AGGREGATE_126;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_127;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_128;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_129;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_130;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_131;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_132;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_133;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_134;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_135;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_136;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_137;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_138;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_139;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_140;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_141;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_142;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_143;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_144;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_145;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_146;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_147;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_148;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_149;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_150;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_151;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_152;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_153;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_154;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_155;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_156;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_157;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_158;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_159;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_160;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_161;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_162;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_163;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_164;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_165;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_166;
    long __SQL_SUM_AGGREGATE_167;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_168;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_169;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_170;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_171;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_172;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_173;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_174;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_175;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_176;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_177;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_178;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_179;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_180;
    long __SQL_SUM_AGGREGATE_181;
    long __SQL_SUM_AGGREGATE_182;
    long __SQL_SUM_AGGREGATE_183;
    long __SQL_SUM_AGGREGATE_184;
    long __SQL_SUM_AGGREGATE_185;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_186;
    long __SQL_SUM_AGGREGATE_187;
    long __SQL_SUM_AGGREGATE_188;
    long __SQL_SUM_AGGREGATE_189;
    long __SQL_SUM_AGGREGATE_190;
    long __SQL_SUM_AGGREGATE_191;
    long __SQL_SUM_AGGREGATE_192;
    long __SQL_SUM_AGGREGATE_193;
    long __SQL_SUM_AGGREGATE_194;
    long __SQL_SUM_AGGREGATE_195;
    long __SQL_SUM_AGGREGATE_196;
    long __SQL_SUM_AGGREGATE_197;
    long __SQL_SUM_AGGREGATE_198;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_199;
    long __SQL_SUM_AGGREGATE_200;
    long __SQL_SUM_AGGREGATE_201;
    long __SQL_SUM_AGGREGATE_202;
    long __SQL_SUM_AGGREGATE_203;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_204;
    long __SQL_SUM_AGGREGATE_205;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_206;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_207;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_208;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_209;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_210;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_211;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_212;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_213;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_214;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_215;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_216;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_217;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_218;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_219;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_220;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_221;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_222;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_223;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_224;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_225;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_226;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_227;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_228;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_229;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_230;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_231;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_232;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_233;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_234;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_235;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_236;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_237;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_238;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_239;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_240;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_241;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_242;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_243;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_244;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_245;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_246;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_247;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_248;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_249;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_250;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_251;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_252;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_253;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_254;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_255;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_256;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_257;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_258;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_259;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_260;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_261;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_262;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_263;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_264;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_265;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_266;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_267;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_268;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_269;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_270;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_271;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_272;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_273;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_274;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_275;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_276;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_277;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_278;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_279;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_280;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_281;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_282;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_283;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_284;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_285;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_286;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_287;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_288;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_289;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_290;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_291;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_292;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_293;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_294;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_295;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_296;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_297;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_298;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_299;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_300;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_301;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_302;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_303;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_304;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_305;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_306;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_307;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_308;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_309;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_310;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_311;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_312;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_313;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_314;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_315;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_316;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_317;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_318;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_319;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_320;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_321;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_322;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_323;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_324;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_325;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_326;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_327;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_328;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_329;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_330;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_331;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_332;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_333;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_334;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_335;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_336;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_337;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_338;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_339;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_340;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_341;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_342;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_343;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_344;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_345;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_346;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_347;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_348;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_349;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_350;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_351;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_352;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_353;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_354;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_355;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_356;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_357;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_358;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_359;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_360;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_361;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_362;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_363;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_364;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_365;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_366;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_367;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_368;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_369;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_370;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_371;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_372;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_373;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_374;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_375;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_376;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_377;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_378;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_379;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_380;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_381;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_382;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_383;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_384;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_385;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_386;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_387;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_388;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_389;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_390;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_391;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_392;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_393;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_394;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_395;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_396;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_397;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_398;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_399;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_400;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_401;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_402;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_403;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_404;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_405;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_406;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_407;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_408;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_409;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_410;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_411;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_412;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_413;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_414;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_415;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_416;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_417;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_418;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_419;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_420;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_421;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_422;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_423;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_424;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_425;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_426;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_427;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_428;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_429;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_430;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_431;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_432;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_433;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_434;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_435;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_436;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_437;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_438;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_439;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_440;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_441;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_442;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_443;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_444;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_445;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_446;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_447;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_448;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_449;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_450;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_451;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_452;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_453;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_454;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_455;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_456;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_457;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_458;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_459;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_460;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_461;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_462;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_463;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_464;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_465;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_466;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_467;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_468;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_469;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_470;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_471;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_472;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_473;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_474;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_475;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_476;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_477;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_478;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_479;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_480;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_481;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_482;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_483;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_484;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_485;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_486;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_487;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_488;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_489;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_490;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_491;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_492;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_493;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_494;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_495;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_496;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_497;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_498;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_499;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_500;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_501;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_502;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_503;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_504;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_505;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_506;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_507;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_508;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_509;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_510;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_511;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_512;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_513;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_514;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_515;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_516;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_517;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_518;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_519;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_520;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_521;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_522;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_523;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_524;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_525;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_526;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_527;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_528;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_529;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_530;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_531;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_532;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_533;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_534;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_535;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_536;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_537;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_538;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_539;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_540;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_541;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_542;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_543;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_544;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_545;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_546;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_547;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_548;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_549;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_550;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_551;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_552;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_553;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_554;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_555;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_556;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_557;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_558;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_559;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_560;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_561;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_562;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_563;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_564;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_565;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_566;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_567;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_568;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_569;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_570;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_571;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_572;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_573;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_574;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_575;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_576;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_577;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_578;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_579;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_580;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_581;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_582;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_583;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_584;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_585;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_586;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_587;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_588;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_589;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_590;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_591;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_592;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_593;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_594;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_595;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_596;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_597;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_598;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_599;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_600;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_601;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_602;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_603;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_604;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_605;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_606;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_607;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_608;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_609;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_610;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_611;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_612;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_613;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_614;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_615;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_616;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_617;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_618;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_619;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_620;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_621;
    long __SQL_SUM_AGGREGATE_622;
    long __SQL_SUM_AGGREGATE_623;
    long __SQL_SUM_AGGREGATE_624;
    long __SQL_SUM_AGGREGATE_625;
    long __SQL_SUM_AGGREGATE_626;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_627;
    long __SQL_SUM_AGGREGATE_628;
    long __SQL_SUM_AGGREGATE_629;
    long __SQL_SUM_AGGREGATE_630;
    long __SQL_SUM_AGGREGATE_631;
    long __SQL_SUM_AGGREGATE_632;
    long __SQL_SUM_AGGREGATE_633;
    long __SQL_SUM_AGGREGATE_634;
    long __SQL_SUM_AGGREGATE_635;
    long __SQL_SUM_AGGREGATE_636;
    long __SQL_SUM_AGGREGATE_637;
    long __SQL_SUM_AGGREGATE_638;
    long __SQL_SUM_AGGREGATE_639;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_640;
    long __SQL_SUM_AGGREGATE_641;
    long __SQL_SUM_AGGREGATE_642;
    long __SQL_SUM_AGGREGATE_643;
    long __SQL_SUM_AGGREGATE_644;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_645;
    long __SQL_SUM_AGGREGATE_646;
    long __SQL_SUM_AGGREGATE_647;
    long __SQL_SUM_AGGREGATE_648;
    long __SQL_SUM_AGGREGATE_649;
    long __SQL_SUM_AGGREGATE_650;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_651;
    long __SQL_SUM_AGGREGATE_652;
    long __SQL_SUM_AGGREGATE_653;
    long __SQL_SUM_AGGREGATE_654;
    long __SQL_SUM_AGGREGATE_655;
    long __SQL_SUM_AGGREGATE_656;
    long __SQL_SUM_AGGREGATE_657;
    long __SQL_SUM_AGGREGATE_658;
    long __SQL_SUM_AGGREGATE_659;
    long __SQL_SUM_AGGREGATE_660;
    long __SQL_SUM_AGGREGATE_661;
    long __SQL_SUM_AGGREGATE_662;
    long __SQL_SUM_AGGREGATE_663;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_664;
    long __SQL_SUM_AGGREGATE_665;
    long __SQL_SUM_AGGREGATE_666;
    long __SQL_SUM_AGGREGATE_667;
    long __SQL_SUM_AGGREGATE_668;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_669;
    long __SQL_SUM_AGGREGATE_670;
    long __SQL_SUM_AGGREGATE_671;
    long __SQL_SUM_AGGREGATE_672;
    long __SQL_SUM_AGGREGATE_673;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_674;
    long __SQL_SUM_AGGREGATE_675;
    long __SQL_SUM_AGGREGATE_676;
    long __SQL_SUM_AGGREGATE_677;
    long __SQL_SUM_AGGREGATE_678;
    long __SQL_SUM_AGGREGATE_679;
    long __SQL_SUM_AGGREGATE_680;
    long __SQL_SUM_AGGREGATE_681;
    long __SQL_SUM_AGGREGATE_682;
    long __SQL_SUM_AGGREGATE_683;
    long __SQL_SUM_AGGREGATE_684;
    long __SQL_SUM_AGGREGATE_685;
    long __SQL_SUM_AGGREGATE_686;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_687;
    long __SQL_SUM_AGGREGATE_688;
    long __SQL_SUM_AGGREGATE_689;
    long __SQL_SUM_AGGREGATE_690;
    long __SQL_SUM_AGGREGATE_691;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_692;
    long __SQL_SUM_AGGREGATE_693;
    long __SQL_SUM_AGGREGATE_694;
    long __SQL_SUM_AGGREGATE_695;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_696;
    long __SQL_SUM_AGGREGATE_697;
    long __SQL_SUM_AGGREGATE_698;
    long __SQL_SUM_AGGREGATE_699;
    long __SQL_SUM_AGGREGATE_700;
    long __SQL_SUM_AGGREGATE_701;
    long __SQL_SUM_AGGREGATE_702;
    long __SQL_SUM_AGGREGATE_703;
    long __SQL_SUM_AGGREGATE_704;
    long __SQL_SUM_AGGREGATE_705;
    long __SQL_SUM_AGGREGATE_706;
    long __SQL_SUM_AGGREGATE_707;
    long __SQL_SUM_AGGREGATE_708;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_709;
    long __SQL_SUM_AGGREGATE_710;
    long __SQL_SUM_AGGREGATE_711;
    long __SQL_SUM_AGGREGATE_712;
    long __SQL_SUM_AGGREGATE_713;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_714;
    long __SQL_SUM_AGGREGATE_715;
    long __SQL_SUM_AGGREGATE_716;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_717;
    long __SQL_SUM_AGGREGATE_718;
    long __SQL_SUM_AGGREGATE_719;
    long __SQL_SUM_AGGREGATE_720;
    long __SQL_SUM_AGGREGATE_721;
    long __SQL_SUM_AGGREGATE_722;
    long __SQL_SUM_AGGREGATE_723;
    long __SQL_SUM_AGGREGATE_724;
    long __SQL_SUM_AGGREGATE_725;
    long __SQL_SUM_AGGREGATE_726;
    long __SQL_SUM_AGGREGATE_727;
    long __SQL_SUM_AGGREGATE_728;
    long __SQL_SUM_AGGREGATE_729;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_730;
    long __SQL_SUM_AGGREGATE_731;
    long __SQL_SUM_AGGREGATE_732;
    long __SQL_SUM_AGGREGATE_733;
    long __SQL_SUM_AGGREGATE_734;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_735;
    long __SQL_SUM_AGGREGATE_736;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_737;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_738;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_739;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_740;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_741;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_742;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_743;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_744;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_745;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_746;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_747;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_748;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_749;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_750;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_751;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_752;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_753;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_754;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_755;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_756;
    long __SQL_SUM_AGGREGATE_757;
    long __SQL_SUM_AGGREGATE_758;
    long __SQL_SUM_AGGREGATE_759;
    long __SQL_SUM_AGGREGATE_760;
    long __SQL_SUM_AGGREGATE_761;
    long __SQL_SUM_AGGREGATE_762;
    long __SQL_SUM_AGGREGATE_763;
    long __SQL_SUM_AGGREGATE_764;
    long __SQL_SUM_AGGREGATE_765;
    long __SQL_SUM_AGGREGATE_766;
    long __SQL_SUM_AGGREGATE_767;
    long __SQL_SUM_AGGREGATE_768;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_769;
    long __SQL_SUM_AGGREGATE_770;
    long __SQL_SUM_AGGREGATE_771;
    long __SQL_SUM_AGGREGATE_772;
    long __SQL_SUM_AGGREGATE_773;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_774;
    long __SQL_SUM_AGGREGATE_775;
    long __SQL_SUM_AGGREGATE_776;
    long __SQL_SUM_AGGREGATE_777;
    long __SQL_SUM_AGGREGATE_778;
    long __SQL_SUM_AGGREGATE_779;
    long __SQL_SUM_AGGREGATE_780;
    long __SQL_SUM_AGGREGATE_781;
    long __SQL_SUM_AGGREGATE_782;
    long __SQL_SUM_AGGREGATE_783;
    long __SQL_SUM_AGGREGATE_784;
    long __SQL_SUM_AGGREGATE_785;
    long __SQL_SUM_AGGREGATE_786;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_787;
    long __SQL_SUM_AGGREGATE_788;
    long __SQL_SUM_AGGREGATE_789;
    long __SQL_SUM_AGGREGATE_790;
    long __SQL_SUM_AGGREGATE_791;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_792;
    long __SQL_SUM_AGGREGATE_793;
    long __SQL_SUM_AGGREGATE_794;
    long __SQL_SUM_AGGREGATE_795;
    long __SQL_SUM_AGGREGATE_796;
    long __SQL_SUM_AGGREGATE_797;
    long __SQL_SUM_AGGREGATE_798;
    long __SQL_SUM_AGGREGATE_799;
    long __SQL_SUM_AGGREGATE_800;
    long __SQL_SUM_AGGREGATE_801;
    long __SQL_SUM_AGGREGATE_802;
    long __SQL_SUM_AGGREGATE_803;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_804;
    long __SQL_SUM_AGGREGATE_805;
    long __SQL_SUM_AGGREGATE_806;
    long __SQL_SUM_AGGREGATE_807;
    long __SQL_SUM_AGGREGATE_808;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_809;
    long __SQL_SUM_AGGREGATE_810;
    long __SQL_SUM_AGGREGATE_811;
    long __SQL_SUM_AGGREGATE_812;
    long __SQL_SUM_AGGREGATE_813;
    long __SQL_SUM_AGGREGATE_814;
    long __SQL_SUM_AGGREGATE_815;
    long __SQL_SUM_AGGREGATE_816;
    long __SQL_SUM_AGGREGATE_817;
    long __SQL_SUM_AGGREGATE_818;
    long __SQL_SUM_AGGREGATE_819;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_820;
    long __SQL_SUM_AGGREGATE_821;
    long __SQL_SUM_AGGREGATE_822;
    long __SQL_SUM_AGGREGATE_823;
    long __SQL_SUM_AGGREGATE_824;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_825;
    long __SQL_SUM_AGGREGATE_826;
    long __SQL_SUM_AGGREGATE_827;
    long __SQL_SUM_AGGREGATE_828;
    long __SQL_SUM_AGGREGATE_829;
    long __SQL_SUM_AGGREGATE_830;
    long __SQL_SUM_AGGREGATE_831;
    long __SQL_SUM_AGGREGATE_832;
    long __SQL_SUM_AGGREGATE_833;
    long __SQL_SUM_AGGREGATE_834;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_835;
    long __SQL_SUM_AGGREGATE_836;
    long __SQL_SUM_AGGREGATE_837;
    long __SQL_SUM_AGGREGATE_838;
    long __SQL_SUM_AGGREGATE_839;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_840;
    long __SQL_SUM_AGGREGATE_841;
    long __SQL_SUM_AGGREGATE_842;
    long __SQL_SUM_AGGREGATE_843;
    long __SQL_SUM_AGGREGATE_844;
    long __SQL_SUM_AGGREGATE_845;
    long __SQL_SUM_AGGREGATE_846;
    long __SQL_SUM_AGGREGATE_847;
    long __SQL_SUM_AGGREGATE_848;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_849;
    long __SQL_SUM_AGGREGATE_850;
    long __SQL_SUM_AGGREGATE_851;
    long __SQL_SUM_AGGREGATE_852;
    long __SQL_SUM_AGGREGATE_853;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_854;
    long __SQL_SUM_AGGREGATE_855;
    long __SQL_SUM_AGGREGATE_856;
    long __SQL_SUM_AGGREGATE_857;
    long __SQL_SUM_AGGREGATE_858;
    long __SQL_SUM_AGGREGATE_859;
    long __SQL_SUM_AGGREGATE_860;
    long __SQL_SUM_AGGREGATE_861;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_862;
    long __SQL_SUM_AGGREGATE_863;
    long __SQL_SUM_AGGREGATE_864;
    long __SQL_SUM_AGGREGATE_865;
    long __SQL_SUM_AGGREGATE_866;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_867;
    long __SQL_SUM_AGGREGATE_868;
    long __SQL_SUM_AGGREGATE_869;
    long __SQL_SUM_AGGREGATE_870;
    long __SQL_SUM_AGGREGATE_871;
    long __SQL_SUM_AGGREGATE_872;
    long __SQL_SUM_AGGREGATE_873;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_874;
    long __SQL_SUM_AGGREGATE_875;
    long __SQL_SUM_AGGREGATE_876;
    long __SQL_SUM_AGGREGATE_877;
    long __SQL_SUM_AGGREGATE_878;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_879;
    long __SQL_SUM_AGGREGATE_880;
    long __SQL_SUM_AGGREGATE_881;
    long __SQL_SUM_AGGREGATE_882;
    long __SQL_SUM_AGGREGATE_883;
    long __SQL_SUM_AGGREGATE_884;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_885;
    long __SQL_SUM_AGGREGATE_886;
    long __SQL_SUM_AGGREGATE_887;
    long __SQL_SUM_AGGREGATE_888;
    long __SQL_SUM_AGGREGATE_889;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_890;
    long __SQL_SUM_AGGREGATE_891;
    long __SQL_SUM_AGGREGATE_892;
    long __SQL_SUM_AGGREGATE_893;
    long __SQL_SUM_AGGREGATE_894;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_895;
    long __SQL_SUM_AGGREGATE_896;
    long __SQL_SUM_AGGREGATE_897;
    long __SQL_SUM_AGGREGATE_898;
    long __SQL_SUM_AGGREGATE_899;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_900;
    long __SQL_SUM_AGGREGATE_901;
    long __SQL_SUM_AGGREGATE_902;
    long __SQL_SUM_AGGREGATE_903;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_904;
    long __SQL_SUM_AGGREGATE_905;
    long __SQL_SUM_AGGREGATE_906;
    long __SQL_SUM_AGGREGATE_907;
    long __SQL_SUM_AGGREGATE_908;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_909;
    long __SQL_SUM_AGGREGATE_910;
    long __SQL_SUM_AGGREGATE_911;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_912;
    long __SQL_SUM_AGGREGATE_913;
    long __SQL_SUM_AGGREGATE_914;
    long __SQL_SUM_AGGREGATE_915;
    long __SQL_SUM_AGGREGATE_916;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_917;
    long __SQL_SUM_AGGREGATE_918;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_919;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_920;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_921;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_922;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_923;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_924;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_925;
    long __SQL_SUM_AGGREGATE_926;
    long __SQL_SUM_AGGREGATE_927;
    long __SQL_SUM_AGGREGATE_928;
    long __SQL_SUM_AGGREGATE_929;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_930;
    long __SQL_SUM_AGGREGATE_931;
    long __SQL_SUM_AGGREGATE_932;
    long __SQL_SUM_AGGREGATE_933;
    long __SQL_SUM_AGGREGATE_934;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_935;
    long __SQL_SUM_AGGREGATE_936;
    long __SQL_SUM_AGGREGATE_937;
    long __SQL_SUM_AGGREGATE_938;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_939;
    long __SQL_SUM_AGGREGATE_940;
    long __SQL_SUM_AGGREGATE_941;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_942;
    long __SQL_SUM_AGGREGATE_943;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_944;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_945;
    long __SQL_SUM_AGGREGATE_946;
  
  };
  
  /* Type definition providing a way to incrementally maintain the results of the sql program */
  struct data_t : tlq_t{
    data_t(): tlq_t() {
      
    }
  
  
    /* Trigger functions for table relations */
    void on_insert_LOCATION(const long location_locn, const long location_zip, const DOUBLE_TYPE location_rgn_cd, const DOUBLE_TYPE location_clim_zn_nbr, const DOUBLE_TYPE location_tot_area_sq_ft, const DOUBLE_TYPE location_sell_area_sq_ft, const DOUBLE_TYPE location_avghhi, const DOUBLE_TYPE location_supertargetdistance, const DOUBLE_TYPE location_supertargetdrivetime, const DOUBLE_TYPE location_targetdistance, const DOUBLE_TYPE location_targetdrivetime, const DOUBLE_TYPE location_walmartdistance, const DOUBLE_TYPE location_walmartdrivetime, const DOUBLE_TYPE location_walmartsupercenterdistance, const DOUBLE_TYPE location_walmartsupercenterdrivetime) {
      LOCATION_entry e(location_locn, location_zip, location_rgn_cd, location_clim_zn_nbr, location_tot_area_sq_ft, location_sell_area_sq_ft, location_avghhi, location_supertargetdistance, location_supertargetdrivetime, location_targetdistance, location_targetdrivetime, location_walmartdistance, location_walmartdrivetime, location_walmartsupercenterdistance, location_walmartsupercenterdrivetime, 1L);
      LOCATION.addOrDelOnZero(e,1L);
    }
    
    void on_insert_CENSUS(const long census_zip, const long census_population, const long census_white, const long census_asian, const long census_pacific, const long census_blackafrican, const DOUBLE_TYPE census_medianage, const long census_occupiedhouseunits, const long census_houseunits, const long census_families, const long census_households, const long census_husbwife, const long census_males, const long census_females, const long census_householdschildren, const long census_hispanic) {
      CENSUS_entry e(census_zip, census_population, census_white, census_asian, census_pacific, census_blackafrican, census_medianage, census_occupiedhouseunits, census_houseunits, census_families, census_households, census_husbwife, census_males, census_females, census_householdschildren, census_hispanic, 1L);
      CENSUS.addOrDelOnZero(e,1L);
    }
    
    void on_insert_ITEM(const DOUBLE_TYPE item_ksn, const long item_subcategory, const long item_category, const long item_categorycluster, const DOUBLE_TYPE item_prize) {
      ITEM_entry e(item_ksn, item_subcategory, item_category, item_categorycluster, item_prize, 1L);
      ITEM.addOrDelOnZero(e,1L);
    }
    
    void on_insert_WEATHER(const long weather_locn, const long weather_dateid, const long weather_rain, const long weather_snow, const long weather_maxtemp, const long weather_mintemp, const DOUBLE_TYPE weather_meanwind, const long weather_thunder) {
      WEATHER_entry e(weather_locn, weather_dateid, weather_rain, weather_snow, weather_maxtemp, weather_mintemp, weather_meanwind, weather_thunder, 1L);
      WEATHER.addOrDelOnZero(e,1L);
    }
    
    
    
    /* Trigger functions for stream relations */
    template<typename T>
    void on_batch_update_INVENTORY(const typename std::vector<T>::iterator &begin, const typename std::vector<T>::iterator &end) {
      tN += std::distance(begin, end);
      __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e1 = begin; e1 != end; e1++) {
          long inventory_locn = e1->locn;
          long inventory_dateid = e1->dateid;
          DOUBLE_TYPE inventory_ksn = e1->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e1->inventoryunits;
          long v1 = e1->__av;
          __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA.addOrDelOnZero(se1.modify(inventory_locn, inventory_dateid, inventory_ksn), (v1 * (inventory_inventoryunits * inventory_inventoryunits)));
        }
      }
      __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e2 = begin; e2 != end; e2++) {
          long inventory_locn = e2->locn;
          long inventory_dateid = e2->dateid;
          DOUBLE_TYPE inventory_ksn = e2->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e2->inventoryunits;
          long v2 = e2->__av;
          __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA.addOrDelOnZero(se2.modify(inventory_locn, inventory_dateid, inventory_ksn), (v2 * (inventory_inventoryunits * inventory_locn)));
        }
      }
      __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e3 = begin; e3 != end; e3++) {
          long inventory_locn = e3->locn;
          long inventory_dateid = e3->dateid;
          DOUBLE_TYPE inventory_ksn = e3->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e3->inventoryunits;
          long v3 = e3->__av;
          __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA.addOrDelOnZero(se3.modify(inventory_locn, inventory_dateid, inventory_ksn), (v3 * (inventory_inventoryunits * inventory_dateid)));
        }
      }
      __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e4 = begin; e4 != end; e4++) {
          long inventory_locn = e4->locn;
          long inventory_dateid = e4->dateid;
          DOUBLE_TYPE inventory_ksn = e4->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e4->inventoryunits;
          long v4 = e4->__av;
          __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA.addOrDelOnZero(se4.modify(inventory_locn, inventory_dateid, inventory_ksn), (v4 * (inventory_inventoryunits * inventory_ksn)));
        }
      }
      __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e5 = begin; e5 != end; e5++) {
          long inventory_locn = e5->locn;
          long inventory_dateid = e5->dateid;
          DOUBLE_TYPE inventory_ksn = e5->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e5->inventoryunits;
          long v5 = e5->__av;
          __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.addOrDelOnZero(se5.modify(inventory_locn, inventory_dateid, inventory_ksn), (v5 * inventory_inventoryunits));
        }
      }
      __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e6 = begin; e6 != end; e6++) {
          long inventory_locn = e6->locn;
          long inventory_dateid = e6->dateid;
          DOUBLE_TYPE inventory_ksn = e6->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e6->inventoryunits;
          long v6 = e6->__av;
          __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA.addOrDelOnZero(se6.modify(inventory_locn, inventory_dateid, inventory_ksn), (v6 * (inventory_locn * inventory_locn)));
        }
      }
      __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e7 = begin; e7 != end; e7++) {
          long inventory_locn = e7->locn;
          long inventory_dateid = e7->dateid;
          DOUBLE_TYPE inventory_ksn = e7->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e7->inventoryunits;
          long v7 = e7->__av;
          __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA.addOrDelOnZero(se7.modify(inventory_locn, inventory_dateid, inventory_ksn), (v7 * (inventory_locn * inventory_dateid)));
        }
      }
      __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e8 = begin; e8 != end; e8++) {
          long inventory_locn = e8->locn;
          long inventory_dateid = e8->dateid;
          DOUBLE_TYPE inventory_ksn = e8->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e8->inventoryunits;
          long v8 = e8->__av;
          __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA.addOrDelOnZero(se8.modify(inventory_locn, inventory_dateid, inventory_ksn), (v8 * (inventory_locn * inventory_ksn)));
        }
      }
      __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e9 = begin; e9 != end; e9++) {
          long inventory_locn = e9->locn;
          long inventory_dateid = e9->dateid;
          DOUBLE_TYPE inventory_ksn = e9->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e9->inventoryunits;
          long v9 = e9->__av;
          __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.addOrDelOnZero(se9.modify(inventory_locn, inventory_dateid, inventory_ksn), (v9 * inventory_locn));
        }
      }
      __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e10 = begin; e10 != end; e10++) {
          long inventory_locn = e10->locn;
          long inventory_dateid = e10->dateid;
          DOUBLE_TYPE inventory_ksn = e10->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e10->inventoryunits;
          long v10 = e10->__av;
          __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA.addOrDelOnZero(se10.modify(inventory_locn, inventory_dateid, inventory_ksn), (v10 * (inventory_dateid * inventory_dateid)));
        }
      }
      __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e11 = begin; e11 != end; e11++) {
          long inventory_locn = e11->locn;
          long inventory_dateid = e11->dateid;
          DOUBLE_TYPE inventory_ksn = e11->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e11->inventoryunits;
          long v11 = e11->__av;
          __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA.addOrDelOnZero(se11.modify(inventory_locn, inventory_dateid, inventory_ksn), (v11 * (inventory_dateid * inventory_ksn)));
        }
      }
      __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e12 = begin; e12 != end; e12++) {
          long inventory_locn = e12->locn;
          long inventory_dateid = e12->dateid;
          DOUBLE_TYPE inventory_ksn = e12->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e12->inventoryunits;
          long v12 = e12->__av;
          __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.addOrDelOnZero(se12.modify(inventory_locn, inventory_dateid, inventory_ksn), (v12 * inventory_dateid));
        }
      }
      __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e13 = begin; e13 != end; e13++) {
          long inventory_locn = e13->locn;
          long inventory_dateid = e13->dateid;
          DOUBLE_TYPE inventory_ksn = e13->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e13->inventoryunits;
          long v13 = e13->__av;
          __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA.addOrDelOnZero(se13.modify(inventory_locn, inventory_dateid, inventory_ksn), (v13 * (inventory_ksn * inventory_ksn)));
        }
      }
      __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e14 = begin; e14 != end; e14++) {
          long inventory_locn = e14->locn;
          long inventory_dateid = e14->dateid;
          DOUBLE_TYPE inventory_ksn = e14->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e14->inventoryunits;
          long v14 = e14->__av;
          __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.addOrDelOnZero(se14.modify(inventory_locn, inventory_dateid, inventory_ksn), (v14 * inventory_ksn));
        }
      }
      __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.clear();
      { //foreach
        for (typename std::vector<T>::iterator e15 = begin; e15 != end; e15++) {
          long inventory_locn = e15->locn;
          long inventory_dateid = e15->dateid;
          DOUBLE_TYPE inventory_ksn = e15->ksn;
          DOUBLE_TYPE inventory_inventoryunits = e15->inventoryunits;
          long v15 = e15->__av;
          __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.addOrDelOnZero(se15.modify(inventory_locn, inventory_dateid, inventory_ksn), v15);
        }
      }
      DOUBLE_TYPE agg1 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry* e16 = __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA.head;
        while (e16) {
          long inventory_locn = e16->INVENTORY_LOCN;
          long inventory_dateid = e16->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e16->INVENTORY_KSN;
          DOUBLE_TYPE v16 = e16->__av;
          agg1 += (v16 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se17.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se18.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se19.modify(inventory_locn)))));
          e16 = e16->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_1 += agg1;
      DOUBLE_TYPE agg2 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry* e17 = __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA.head;
        while (e17) {
          long inventory_locn = e17->INVENTORY_LOCN;
          long inventory_dateid = e17->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e17->INVENTORY_KSN;
          DOUBLE_TYPE v17 = e17->__av;
          agg2 += (v17 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se21.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se22.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se23.modify(inventory_locn)))));
          e17 = e17->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_2 += agg2;
      DOUBLE_TYPE agg3 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry* e18 = __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA.head;
        while (e18) {
          long inventory_locn = e18->INVENTORY_LOCN;
          long inventory_dateid = e18->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e18->INVENTORY_KSN;
          DOUBLE_TYPE v18 = e18->__av;
          agg3 += (v18 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se25.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se26.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se27.modify(inventory_locn)))));
          e18 = e18->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_3 += agg3;
      DOUBLE_TYPE agg4 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry* e19 = __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA.head;
        while (e19) {
          long inventory_locn = e19->INVENTORY_LOCN;
          long inventory_dateid = e19->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e19->INVENTORY_KSN;
          DOUBLE_TYPE v19 = e19->__av;
          agg4 += (v19 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se29.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se30.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se31.modify(inventory_locn)))));
          e19 = e19->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_4 += agg4;
      DOUBLE_TYPE agg5 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e20 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e20) {
          long inventory_locn = e20->INVENTORY_LOCN;
          long inventory_dateid = e20->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e20->INVENTORY_KSN;
          DOUBLE_TYPE v20 = e20->__av;
          agg5 += (v20 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se33.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se34.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se35.modify(inventory_locn)))));
          e20 = e20->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_5 += agg5;
      DOUBLE_TYPE agg6 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e21 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e21) {
          long inventory_locn = e21->INVENTORY_LOCN;
          long inventory_dateid = e21->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e21->INVENTORY_KSN;
          DOUBLE_TYPE v21 = e21->__av;
          agg6 += (v21 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se37.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se38.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se39.modify(inventory_locn)))));
          e21 = e21->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_6 += agg6;
      DOUBLE_TYPE agg7 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e22 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e22) {
          long inventory_locn = e22->INVENTORY_LOCN;
          long inventory_dateid = e22->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e22->INVENTORY_KSN;
          DOUBLE_TYPE v22 = e22->__av;
          agg7 += (v22 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se41.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se42.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se43.modify(inventory_locn)))));
          e22 = e22->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_7 += agg7;
      DOUBLE_TYPE agg8 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e23 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e23) {
          long inventory_locn = e23->INVENTORY_LOCN;
          long inventory_dateid = e23->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e23->INVENTORY_KSN;
          DOUBLE_TYPE v23 = e23->__av;
          agg8 += (v23 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se45.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se46.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se47.modify(inventory_locn)))));
          e23 = e23->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_8 += agg8;
      DOUBLE_TYPE agg9 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e24 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e24) {
          long inventory_locn = e24->INVENTORY_LOCN;
          long inventory_dateid = e24->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e24->INVENTORY_KSN;
          DOUBLE_TYPE v24 = e24->__av;
          agg9 += (v24 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se49.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se50.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se51.modify(inventory_locn)))));
          e24 = e24->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_9 += agg9;
      DOUBLE_TYPE agg10 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e25 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e25) {
          long inventory_locn = e25->INVENTORY_LOCN;
          long inventory_dateid = e25->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e25->INVENTORY_KSN;
          DOUBLE_TYPE v25 = e25->__av;
          agg10 += (v25 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se53.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se54.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se55.modify(inventory_locn)))));
          e25 = e25->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_10 += agg10;
      DOUBLE_TYPE agg11 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e26 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e26) {
          long inventory_locn = e26->INVENTORY_LOCN;
          long inventory_dateid = e26->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e26->INVENTORY_KSN;
          DOUBLE_TYPE v26 = e26->__av;
          agg11 += (v26 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se57.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se58.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se59.modify(inventory_locn)))));
          e26 = e26->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_11 += agg11;
      DOUBLE_TYPE agg12 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e27 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e27) {
          long inventory_locn = e27->INVENTORY_LOCN;
          long inventory_dateid = e27->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e27->INVENTORY_KSN;
          DOUBLE_TYPE v27 = e27->__av;
          agg12 += (v27 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se61.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se62.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se63.modify(inventory_locn)))));
          e27 = e27->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_12 += agg12;
      DOUBLE_TYPE agg13 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e28 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e28) {
          long inventory_locn = e28->INVENTORY_LOCN;
          long inventory_dateid = e28->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e28->INVENTORY_KSN;
          DOUBLE_TYPE v28 = e28->__av;
          agg13 += (v28 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se65.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se66.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se67.modify(inventory_locn)))));
          e28 = e28->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_13 += agg13;
      DOUBLE_TYPE agg14 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e29 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e29) {
          long inventory_locn = e29->INVENTORY_LOCN;
          long inventory_dateid = e29->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e29->INVENTORY_KSN;
          DOUBLE_TYPE v29 = e29->__av;
          agg14 += (v29 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se69.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se70.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se71.modify(inventory_locn)))));
          e29 = e29->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_14 += agg14;
      DOUBLE_TYPE agg15 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e30 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e30) {
          long inventory_locn = e30->INVENTORY_LOCN;
          long inventory_dateid = e30->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e30->INVENTORY_KSN;
          DOUBLE_TYPE v30 = e30->__av;
          agg15 += (v30 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se73.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se74.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se75.modify(inventory_locn)))));
          e30 = e30->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_15 += agg15;
      DOUBLE_TYPE agg16 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e31 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e31) {
          long inventory_locn = e31->INVENTORY_LOCN;
          long inventory_dateid = e31->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e31->INVENTORY_KSN;
          DOUBLE_TYPE v31 = e31->__av;
          agg16 += (v31 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se77.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se78.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se79.modify(inventory_locn)))));
          e31 = e31->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_16 += agg16;
      DOUBLE_TYPE agg17 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e32 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e32) {
          long inventory_locn = e32->INVENTORY_LOCN;
          long inventory_dateid = e32->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e32->INVENTORY_KSN;
          DOUBLE_TYPE v32 = e32->__av;
          agg17 += (v32 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se81.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se82.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se83.modify(inventory_locn)))));
          e32 = e32->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_17 += agg17;
      DOUBLE_TYPE agg18 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e33 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e33) {
          long inventory_locn = e33->INVENTORY_LOCN;
          long inventory_dateid = e33->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e33->INVENTORY_KSN;
          DOUBLE_TYPE v33 = e33->__av;
          agg18 += (v33 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se85.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se86.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se87.modify(inventory_locn)))));
          e33 = e33->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_18 += agg18;
      DOUBLE_TYPE agg19 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e34 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e34) {
          long inventory_locn = e34->INVENTORY_LOCN;
          long inventory_dateid = e34->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e34->INVENTORY_KSN;
          DOUBLE_TYPE v34 = e34->__av;
          agg19 += (v34 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se89.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se90.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se91.modify(inventory_locn)))));
          e34 = e34->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_19 += agg19;
      DOUBLE_TYPE agg20 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e35 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e35) {
          long inventory_locn = e35->INVENTORY_LOCN;
          long inventory_dateid = e35->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e35->INVENTORY_KSN;
          DOUBLE_TYPE v35 = e35->__av;
          agg20 += (v35 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se93.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se94.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se95.modify(inventory_locn)))));
          e35 = e35->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_20 += agg20;
      DOUBLE_TYPE agg21 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e36 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e36) {
          long inventory_locn = e36->INVENTORY_LOCN;
          long inventory_dateid = e36->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e36->INVENTORY_KSN;
          DOUBLE_TYPE v36 = e36->__av;
          agg21 += (v36 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se97.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se98.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se99.modify(inventory_locn)))));
          e36 = e36->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_21 += agg21;
      DOUBLE_TYPE agg22 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e37 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e37) {
          long inventory_locn = e37->INVENTORY_LOCN;
          long inventory_dateid = e37->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e37->INVENTORY_KSN;
          DOUBLE_TYPE v37 = e37->__av;
          agg22 += (v37 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se101.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se102.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se103.modify(inventory_locn)))));
          e37 = e37->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_22 += agg22;
      DOUBLE_TYPE agg23 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e38 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e38) {
          long inventory_locn = e38->INVENTORY_LOCN;
          long inventory_dateid = e38->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e38->INVENTORY_KSN;
          DOUBLE_TYPE v38 = e38->__av;
          agg23 += (v38 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se105.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se106.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se107.modify(inventory_locn)))));
          e38 = e38->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_23 += agg23;
      DOUBLE_TYPE agg24 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e39 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e39) {
          long inventory_locn = e39->INVENTORY_LOCN;
          long inventory_dateid = e39->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e39->INVENTORY_KSN;
          DOUBLE_TYPE v39 = e39->__av;
          agg24 += (v39 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se109.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se110.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se111.modify(inventory_locn)))));
          e39 = e39->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_24 += agg24;
      DOUBLE_TYPE agg25 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e40 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e40) {
          long inventory_locn = e40->INVENTORY_LOCN;
          long inventory_dateid = e40->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e40->INVENTORY_KSN;
          DOUBLE_TYPE v40 = e40->__av;
          agg25 += (v40 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se113.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se114.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se115.modify(inventory_locn)))));
          e40 = e40->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_25 += agg25;
      DOUBLE_TYPE agg26 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e41 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e41) {
          long inventory_locn = e41->INVENTORY_LOCN;
          long inventory_dateid = e41->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e41->INVENTORY_KSN;
          DOUBLE_TYPE v41 = e41->__av;
          agg26 += (v41 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se117.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se118.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se119.modify(inventory_locn)))));
          e41 = e41->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_26 += agg26;
      DOUBLE_TYPE agg27 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e42 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e42) {
          long inventory_locn = e42->INVENTORY_LOCN;
          long inventory_dateid = e42->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e42->INVENTORY_KSN;
          DOUBLE_TYPE v42 = e42->__av;
          agg27 += (v42 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se121.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se122.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se123.modify(inventory_locn)))));
          e42 = e42->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_27 += agg27;
      DOUBLE_TYPE agg28 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e43 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e43) {
          long inventory_locn = e43->INVENTORY_LOCN;
          long inventory_dateid = e43->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e43->INVENTORY_KSN;
          DOUBLE_TYPE v43 = e43->__av;
          agg28 += (v43 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se125.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se126.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se127.modify(inventory_locn)))));
          e43 = e43->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_28 += agg28;
      DOUBLE_TYPE agg29 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e44 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e44) {
          long inventory_locn = e44->INVENTORY_LOCN;
          long inventory_dateid = e44->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e44->INVENTORY_KSN;
          DOUBLE_TYPE v44 = e44->__av;
          agg29 += (v44 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se129.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se130.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se131.modify(inventory_locn)))));
          e44 = e44->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_29 += agg29;
      DOUBLE_TYPE agg30 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e45 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e45) {
          long inventory_locn = e45->INVENTORY_LOCN;
          long inventory_dateid = e45->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e45->INVENTORY_KSN;
          DOUBLE_TYPE v45 = e45->__av;
          agg30 += (v45 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se133.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se134.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se135.modify(inventory_locn)))));
          e45 = e45->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_30 += agg30;
      DOUBLE_TYPE agg31 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e46 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e46) {
          long inventory_locn = e46->INVENTORY_LOCN;
          long inventory_dateid = e46->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e46->INVENTORY_KSN;
          DOUBLE_TYPE v46 = e46->__av;
          agg31 += (v46 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se137.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se138.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se139.modify(inventory_locn)))));
          e46 = e46->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_31 += agg31;
      DOUBLE_TYPE agg32 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e47 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e47) {
          long inventory_locn = e47->INVENTORY_LOCN;
          long inventory_dateid = e47->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e47->INVENTORY_KSN;
          DOUBLE_TYPE v47 = e47->__av;
          agg32 += (v47 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se141.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se142.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se143.modify(inventory_locn)))));
          e47 = e47->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_32 += agg32;
      DOUBLE_TYPE agg33 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e48 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e48) {
          long inventory_locn = e48->INVENTORY_LOCN;
          long inventory_dateid = e48->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e48->INVENTORY_KSN;
          DOUBLE_TYPE v48 = e48->__av;
          agg33 += (v48 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se145.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se146.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se147.modify(inventory_locn)))));
          e48 = e48->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_33 += agg33;
      DOUBLE_TYPE agg34 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e49 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e49) {
          long inventory_locn = e49->INVENTORY_LOCN;
          long inventory_dateid = e49->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e49->INVENTORY_KSN;
          DOUBLE_TYPE v49 = e49->__av;
          agg34 += (v49 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se149.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se150.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se151.modify(inventory_locn)))));
          e49 = e49->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_34 += agg34;
      DOUBLE_TYPE agg35 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e50 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e50) {
          long inventory_locn = e50->INVENTORY_LOCN;
          long inventory_dateid = e50->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e50->INVENTORY_KSN;
          DOUBLE_TYPE v50 = e50->__av;
          agg35 += (v50 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se153.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se154.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se155.modify(inventory_locn)))));
          e50 = e50->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_35 += agg35;
      DOUBLE_TYPE agg36 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e51 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e51) {
          long inventory_locn = e51->INVENTORY_LOCN;
          long inventory_dateid = e51->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e51->INVENTORY_KSN;
          DOUBLE_TYPE v51 = e51->__av;
          agg36 += (v51 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se157.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se158.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se159.modify(inventory_locn)))));
          e51 = e51->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_36 += agg36;
      DOUBLE_TYPE agg37 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e52 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e52) {
          long inventory_locn = e52->INVENTORY_LOCN;
          long inventory_dateid = e52->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e52->INVENTORY_KSN;
          DOUBLE_TYPE v52 = e52->__av;
          agg37 += (v52 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se161.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se162.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se163.modify(inventory_locn)))));
          e52 = e52->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_37 += agg37;
      DOUBLE_TYPE agg38 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e53 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e53) {
          long inventory_locn = e53->INVENTORY_LOCN;
          long inventory_dateid = e53->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e53->INVENTORY_KSN;
          DOUBLE_TYPE v53 = e53->__av;
          agg38 += (v53 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se165.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se166.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se167.modify(inventory_locn)))));
          e53 = e53->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_38 += agg38;
      DOUBLE_TYPE agg39 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e54 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e54) {
          long inventory_locn = e54->INVENTORY_LOCN;
          long inventory_dateid = e54->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e54->INVENTORY_KSN;
          DOUBLE_TYPE v54 = e54->__av;
          agg39 += (v54 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se169.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se170.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se171.modify(inventory_locn)))));
          e54 = e54->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_39 += agg39;
      DOUBLE_TYPE agg40 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e55 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e55) {
          long inventory_locn = e55->INVENTORY_LOCN;
          long inventory_dateid = e55->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e55->INVENTORY_KSN;
          DOUBLE_TYPE v55 = e55->__av;
          agg40 += (v55 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se173.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se174.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se175.modify(inventory_locn)))));
          e55 = e55->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_40 += agg40;
      DOUBLE_TYPE agg41 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e56 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e56) {
          long inventory_locn = e56->INVENTORY_LOCN;
          long inventory_dateid = e56->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e56->INVENTORY_KSN;
          DOUBLE_TYPE v56 = e56->__av;
          agg41 += (v56 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se177.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se178.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se179.modify(inventory_locn)))));
          e56 = e56->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_41 += agg41;
      DOUBLE_TYPE agg42 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e57 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e57) {
          long inventory_locn = e57->INVENTORY_LOCN;
          long inventory_dateid = e57->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e57->INVENTORY_KSN;
          DOUBLE_TYPE v57 = e57->__av;
          agg42 += (v57 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se181.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se182.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se183.modify(inventory_locn)))));
          e57 = e57->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_42 += agg42;
      DOUBLE_TYPE agg43 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry* e58 = __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA.head;
        while (e58) {
          long inventory_locn = e58->INVENTORY_LOCN;
          long inventory_dateid = e58->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e58->INVENTORY_KSN;
          DOUBLE_TYPE v58 = e58->__av;
          agg43 += (v58 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se185.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se186.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se187.modify(inventory_locn)))));
          e58 = e58->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_43 += agg43;
      long agg44 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry* e59 = __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA.head;
        while (e59) {
          long inventory_locn = e59->INVENTORY_LOCN;
          long inventory_dateid = e59->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e59->INVENTORY_KSN;
          long v59 = e59->__av;
          agg44 += (v59 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se189.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se190.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se191.modify(inventory_locn)))));
          e59 = e59->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_44 += agg44;
      long agg45 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry* e60 = __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA.head;
        while (e60) {
          long inventory_locn = e60->INVENTORY_LOCN;
          long inventory_dateid = e60->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e60->INVENTORY_KSN;
          long v60 = e60->__av;
          agg45 += (v60 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se193.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se194.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se195.modify(inventory_locn)))));
          e60 = e60->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_45 += agg45;
      DOUBLE_TYPE agg46 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry* e61 = __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA.head;
        while (e61) {
          long inventory_locn = e61->INVENTORY_LOCN;
          long inventory_dateid = e61->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e61->INVENTORY_KSN;
          DOUBLE_TYPE v61 = e61->__av;
          agg46 += (v61 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se197.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se198.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se199.modify(inventory_locn)))));
          e61 = e61->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_46 += agg46;
      long agg47 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e62 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e62) {
          long inventory_locn = e62->INVENTORY_LOCN;
          long inventory_dateid = e62->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e62->INVENTORY_KSN;
          long v62 = e62->__av;
          agg47 += (v62 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se201.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se202.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se203.modify(inventory_locn)))));
          e62 = e62->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_47 += agg47;
      DOUBLE_TYPE agg48 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e63 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e63) {
          long inventory_locn = e63->INVENTORY_LOCN;
          long inventory_dateid = e63->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e63->INVENTORY_KSN;
          long v63 = e63->__av;
          agg48 += (v63 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se205.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se206.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se207.modify(inventory_locn)))));
          e63 = e63->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_48 += agg48;
      DOUBLE_TYPE agg49 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e64 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e64) {
          long inventory_locn = e64->INVENTORY_LOCN;
          long inventory_dateid = e64->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e64->INVENTORY_KSN;
          long v64 = e64->__av;
          agg49 += (v64 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se209.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se210.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se211.modify(inventory_locn)))));
          e64 = e64->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_49 += agg49;
      DOUBLE_TYPE agg50 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e65 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e65) {
          long inventory_locn = e65->INVENTORY_LOCN;
          long inventory_dateid = e65->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e65->INVENTORY_KSN;
          long v65 = e65->__av;
          agg50 += (v65 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se213.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se214.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se215.modify(inventory_locn)))));
          e65 = e65->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_50 += agg50;
      DOUBLE_TYPE agg51 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e66 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e66) {
          long inventory_locn = e66->INVENTORY_LOCN;
          long inventory_dateid = e66->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e66->INVENTORY_KSN;
          long v66 = e66->__av;
          agg51 += (v66 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se217.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se218.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se219.modify(inventory_locn)))));
          e66 = e66->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_51 += agg51;
      DOUBLE_TYPE agg52 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e67 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e67) {
          long inventory_locn = e67->INVENTORY_LOCN;
          long inventory_dateid = e67->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e67->INVENTORY_KSN;
          long v67 = e67->__av;
          agg52 += (v67 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se221.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se222.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se223.modify(inventory_locn)))));
          e67 = e67->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_52 += agg52;
      DOUBLE_TYPE agg53 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e68 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e68) {
          long inventory_locn = e68->INVENTORY_LOCN;
          long inventory_dateid = e68->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e68->INVENTORY_KSN;
          long v68 = e68->__av;
          agg53 += (v68 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se225.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se226.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se227.modify(inventory_locn)))));
          e68 = e68->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_53 += agg53;
      DOUBLE_TYPE agg54 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e69 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e69) {
          long inventory_locn = e69->INVENTORY_LOCN;
          long inventory_dateid = e69->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e69->INVENTORY_KSN;
          long v69 = e69->__av;
          agg54 += (v69 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se229.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se230.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se231.modify(inventory_locn)))));
          e69 = e69->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_54 += agg54;
      DOUBLE_TYPE agg55 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e70 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e70) {
          long inventory_locn = e70->INVENTORY_LOCN;
          long inventory_dateid = e70->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e70->INVENTORY_KSN;
          long v70 = e70->__av;
          agg55 += (v70 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se233.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se234.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se235.modify(inventory_locn)))));
          e70 = e70->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_55 += agg55;
      DOUBLE_TYPE agg56 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e71 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e71) {
          long inventory_locn = e71->INVENTORY_LOCN;
          long inventory_dateid = e71->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e71->INVENTORY_KSN;
          long v71 = e71->__av;
          agg56 += (v71 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se237.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se238.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se239.modify(inventory_locn)))));
          e71 = e71->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_56 += agg56;
      DOUBLE_TYPE agg57 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e72 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e72) {
          long inventory_locn = e72->INVENTORY_LOCN;
          long inventory_dateid = e72->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e72->INVENTORY_KSN;
          long v72 = e72->__av;
          agg57 += (v72 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se241.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se242.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se243.modify(inventory_locn)))));
          e72 = e72->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_57 += agg57;
      DOUBLE_TYPE agg58 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e73 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e73) {
          long inventory_locn = e73->INVENTORY_LOCN;
          long inventory_dateid = e73->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e73->INVENTORY_KSN;
          long v73 = e73->__av;
          agg58 += (v73 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se245.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se246.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se247.modify(inventory_locn)))));
          e73 = e73->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_58 += agg58;
      DOUBLE_TYPE agg59 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e74 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e74) {
          long inventory_locn = e74->INVENTORY_LOCN;
          long inventory_dateid = e74->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e74->INVENTORY_KSN;
          long v74 = e74->__av;
          agg59 += (v74 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se249.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se250.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se251.modify(inventory_locn)))));
          e74 = e74->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_59 += agg59;
      DOUBLE_TYPE agg60 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e75 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e75) {
          long inventory_locn = e75->INVENTORY_LOCN;
          long inventory_dateid = e75->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e75->INVENTORY_KSN;
          long v75 = e75->__av;
          agg60 += (v75 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se253.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se254.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se255.modify(inventory_locn)))));
          e75 = e75->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_60 += agg60;
      long agg61 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e76 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e76) {
          long inventory_locn = e76->INVENTORY_LOCN;
          long inventory_dateid = e76->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e76->INVENTORY_KSN;
          long v76 = e76->__av;
          agg61 += (v76 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se257.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se258.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se259.modify(inventory_locn)))));
          e76 = e76->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_61 += agg61;
      long agg62 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e77 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e77) {
          long inventory_locn = e77->INVENTORY_LOCN;
          long inventory_dateid = e77->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e77->INVENTORY_KSN;
          long v77 = e77->__av;
          agg62 += (v77 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se261.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se262.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se263.modify(inventory_locn)))));
          e77 = e77->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_62 += agg62;
      long agg63 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e78 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e78) {
          long inventory_locn = e78->INVENTORY_LOCN;
          long inventory_dateid = e78->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e78->INVENTORY_KSN;
          long v78 = e78->__av;
          agg63 += (v78 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se265.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se266.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se267.modify(inventory_locn)))));
          e78 = e78->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_63 += agg63;
      long agg64 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e79 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e79) {
          long inventory_locn = e79->INVENTORY_LOCN;
          long inventory_dateid = e79->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e79->INVENTORY_KSN;
          long v79 = e79->__av;
          agg64 += (v79 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se269.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se270.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se271.modify(inventory_locn)))));
          e79 = e79->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_64 += agg64;
      long agg65 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e80 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e80) {
          long inventory_locn = e80->INVENTORY_LOCN;
          long inventory_dateid = e80->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e80->INVENTORY_KSN;
          long v80 = e80->__av;
          agg65 += (v80 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se273.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se274.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se275.modify(inventory_locn)))));
          e80 = e80->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_65 += agg65;
      DOUBLE_TYPE agg66 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e81 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e81) {
          long inventory_locn = e81->INVENTORY_LOCN;
          long inventory_dateid = e81->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e81->INVENTORY_KSN;
          long v81 = e81->__av;
          agg66 += (v81 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se277.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se278.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se279.modify(inventory_locn)))));
          e81 = e81->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_66 += agg66;
      long agg67 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e82 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e82) {
          long inventory_locn = e82->INVENTORY_LOCN;
          long inventory_dateid = e82->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e82->INVENTORY_KSN;
          long v82 = e82->__av;
          agg67 += (v82 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se281.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se282.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se283.modify(inventory_locn)))));
          e82 = e82->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_67 += agg67;
      long agg68 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e83 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e83) {
          long inventory_locn = e83->INVENTORY_LOCN;
          long inventory_dateid = e83->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e83->INVENTORY_KSN;
          long v83 = e83->__av;
          agg68 += (v83 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se285.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se286.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se287.modify(inventory_locn)))));
          e83 = e83->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_68 += agg68;
      long agg69 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e84 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e84) {
          long inventory_locn = e84->INVENTORY_LOCN;
          long inventory_dateid = e84->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e84->INVENTORY_KSN;
          long v84 = e84->__av;
          agg69 += (v84 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se289.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se290.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se291.modify(inventory_locn)))));
          e84 = e84->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_69 += agg69;
      long agg70 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e85 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e85) {
          long inventory_locn = e85->INVENTORY_LOCN;
          long inventory_dateid = e85->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e85->INVENTORY_KSN;
          long v85 = e85->__av;
          agg70 += (v85 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se293.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se294.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se295.modify(inventory_locn)))));
          e85 = e85->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_70 += agg70;
      long agg71 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e86 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e86) {
          long inventory_locn = e86->INVENTORY_LOCN;
          long inventory_dateid = e86->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e86->INVENTORY_KSN;
          long v86 = e86->__av;
          agg71 += (v86 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se297.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se298.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se299.modify(inventory_locn)))));
          e86 = e86->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_71 += agg71;
      long agg72 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e87 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e87) {
          long inventory_locn = e87->INVENTORY_LOCN;
          long inventory_dateid = e87->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e87->INVENTORY_KSN;
          long v87 = e87->__av;
          agg72 += (v87 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se301.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se302.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se303.modify(inventory_locn)))));
          e87 = e87->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_72 += agg72;
      long agg73 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e88 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e88) {
          long inventory_locn = e88->INVENTORY_LOCN;
          long inventory_dateid = e88->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e88->INVENTORY_KSN;
          long v88 = e88->__av;
          agg73 += (v88 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se305.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se306.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se307.modify(inventory_locn)))));
          e88 = e88->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_73 += agg73;
      long agg74 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e89 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e89) {
          long inventory_locn = e89->INVENTORY_LOCN;
          long inventory_dateid = e89->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e89->INVENTORY_KSN;
          long v89 = e89->__av;
          agg74 += (v89 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se309.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se310.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se311.modify(inventory_locn)))));
          e89 = e89->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_74 += agg74;
      long agg75 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e90 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e90) {
          long inventory_locn = e90->INVENTORY_LOCN;
          long inventory_dateid = e90->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e90->INVENTORY_KSN;
          long v90 = e90->__av;
          agg75 += (v90 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se313.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se314.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se315.modify(inventory_locn)))));
          e90 = e90->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_75 += agg75;
      long agg76 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e91 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e91) {
          long inventory_locn = e91->INVENTORY_LOCN;
          long inventory_dateid = e91->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e91->INVENTORY_KSN;
          long v91 = e91->__av;
          agg76 += (v91 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se317.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se318.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se319.modify(inventory_locn)))));
          e91 = e91->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_76 += agg76;
      long agg77 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e92 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e92) {
          long inventory_locn = e92->INVENTORY_LOCN;
          long inventory_dateid = e92->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e92->INVENTORY_KSN;
          long v92 = e92->__av;
          agg77 += (v92 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se321.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se322.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se323.modify(inventory_locn)))));
          e92 = e92->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_77 += agg77;
      long agg78 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e93 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e93) {
          long inventory_locn = e93->INVENTORY_LOCN;
          long inventory_dateid = e93->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e93->INVENTORY_KSN;
          long v93 = e93->__av;
          agg78 += (v93 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se325.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se326.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se327.modify(inventory_locn)))));
          e93 = e93->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_78 += agg78;
      DOUBLE_TYPE agg79 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e94 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e94) {
          long inventory_locn = e94->INVENTORY_LOCN;
          long inventory_dateid = e94->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e94->INVENTORY_KSN;
          long v94 = e94->__av;
          agg79 += (v94 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se329.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se330.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se331.modify(inventory_locn)))));
          e94 = e94->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_79 += agg79;
      long agg80 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e95 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e95) {
          long inventory_locn = e95->INVENTORY_LOCN;
          long inventory_dateid = e95->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e95->INVENTORY_KSN;
          long v95 = e95->__av;
          agg80 += (v95 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se333.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se334.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se335.modify(inventory_locn)))));
          e95 = e95->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_80 += agg80;
      long agg81 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e96 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e96) {
          long inventory_locn = e96->INVENTORY_LOCN;
          long inventory_dateid = e96->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e96->INVENTORY_KSN;
          long v96 = e96->__av;
          agg81 += (v96 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se337.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se338.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se339.modify(inventory_locn)))));
          e96 = e96->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_81 += agg81;
      long agg82 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e97 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e97) {
          long inventory_locn = e97->INVENTORY_LOCN;
          long inventory_dateid = e97->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e97->INVENTORY_KSN;
          long v97 = e97->__av;
          agg82 += (v97 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se341.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se342.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se343.modify(inventory_locn)))));
          e97 = e97->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_82 += agg82;
      long agg83 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e98 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e98) {
          long inventory_locn = e98->INVENTORY_LOCN;
          long inventory_dateid = e98->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e98->INVENTORY_KSN;
          long v98 = e98->__av;
          agg83 += (v98 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se345.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se346.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se347.modify(inventory_locn)))));
          e98 = e98->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_83 += agg83;
      DOUBLE_TYPE agg84 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e99 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e99) {
          long inventory_locn = e99->INVENTORY_LOCN;
          long inventory_dateid = e99->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e99->INVENTORY_KSN;
          long v99 = e99->__av;
          agg84 += (v99 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se349.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se350.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se351.modify(inventory_locn)))));
          e99 = e99->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_84 += agg84;
      long agg85 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry* e100 = __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA.head;
        while (e100) {
          long inventory_locn = e100->INVENTORY_LOCN;
          long inventory_dateid = e100->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e100->INVENTORY_KSN;
          long v100 = e100->__av;
          agg85 += (v100 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se353.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se354.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se355.modify(inventory_locn)))));
          e100 = e100->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_85 += agg85;
      long agg86 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry* e101 = __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA.head;
        while (e101) {
          long inventory_locn = e101->INVENTORY_LOCN;
          long inventory_dateid = e101->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e101->INVENTORY_KSN;
          long v101 = e101->__av;
          agg86 += (v101 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se357.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se358.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se359.modify(inventory_locn)))));
          e101 = e101->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_86 += agg86;
      DOUBLE_TYPE agg87 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry* e102 = __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA.head;
        while (e102) {
          long inventory_locn = e102->INVENTORY_LOCN;
          long inventory_dateid = e102->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e102->INVENTORY_KSN;
          DOUBLE_TYPE v102 = e102->__av;
          agg87 += (v102 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se361.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se362.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se363.modify(inventory_locn)))));
          e102 = e102->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_87 += agg87;
      long agg88 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e103 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e103) {
          long inventory_locn = e103->INVENTORY_LOCN;
          long inventory_dateid = e103->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e103->INVENTORY_KSN;
          long v103 = e103->__av;
          agg88 += (v103 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se365.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se366.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se367.modify(inventory_locn)))));
          e103 = e103->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_88 += agg88;
      DOUBLE_TYPE agg89 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e104 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e104) {
          long inventory_locn = e104->INVENTORY_LOCN;
          long inventory_dateid = e104->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e104->INVENTORY_KSN;
          long v104 = e104->__av;
          agg89 += (v104 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se369.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se370.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se371.modify(inventory_locn)))));
          e104 = e104->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_89 += agg89;
      DOUBLE_TYPE agg90 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e105 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e105) {
          long inventory_locn = e105->INVENTORY_LOCN;
          long inventory_dateid = e105->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e105->INVENTORY_KSN;
          long v105 = e105->__av;
          agg90 += (v105 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se373.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se374.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se375.modify(inventory_locn)))));
          e105 = e105->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_90 += agg90;
      DOUBLE_TYPE agg91 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e106 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e106) {
          long inventory_locn = e106->INVENTORY_LOCN;
          long inventory_dateid = e106->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e106->INVENTORY_KSN;
          long v106 = e106->__av;
          agg91 += (v106 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se377.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se378.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se379.modify(inventory_locn)))));
          e106 = e106->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_91 += agg91;
      DOUBLE_TYPE agg92 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e107 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e107) {
          long inventory_locn = e107->INVENTORY_LOCN;
          long inventory_dateid = e107->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e107->INVENTORY_KSN;
          long v107 = e107->__av;
          agg92 += (v107 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se381.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se382.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se383.modify(inventory_locn)))));
          e107 = e107->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_92 += agg92;
      DOUBLE_TYPE agg93 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e108 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e108) {
          long inventory_locn = e108->INVENTORY_LOCN;
          long inventory_dateid = e108->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e108->INVENTORY_KSN;
          long v108 = e108->__av;
          agg93 += (v108 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se385.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se386.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se387.modify(inventory_locn)))));
          e108 = e108->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_93 += agg93;
      DOUBLE_TYPE agg94 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e109 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e109) {
          long inventory_locn = e109->INVENTORY_LOCN;
          long inventory_dateid = e109->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e109->INVENTORY_KSN;
          long v109 = e109->__av;
          agg94 += (v109 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se389.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se390.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se391.modify(inventory_locn)))));
          e109 = e109->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_94 += agg94;
      DOUBLE_TYPE agg95 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e110 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e110) {
          long inventory_locn = e110->INVENTORY_LOCN;
          long inventory_dateid = e110->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e110->INVENTORY_KSN;
          long v110 = e110->__av;
          agg95 += (v110 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se393.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se394.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se395.modify(inventory_locn)))));
          e110 = e110->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_95 += agg95;
      DOUBLE_TYPE agg96 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e111 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e111) {
          long inventory_locn = e111->INVENTORY_LOCN;
          long inventory_dateid = e111->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e111->INVENTORY_KSN;
          long v111 = e111->__av;
          agg96 += (v111 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se397.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se398.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se399.modify(inventory_locn)))));
          e111 = e111->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_96 += agg96;
      DOUBLE_TYPE agg97 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e112 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e112) {
          long inventory_locn = e112->INVENTORY_LOCN;
          long inventory_dateid = e112->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e112->INVENTORY_KSN;
          long v112 = e112->__av;
          agg97 += (v112 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se401.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se402.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se403.modify(inventory_locn)))));
          e112 = e112->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_97 += agg97;
      DOUBLE_TYPE agg98 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e113 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e113) {
          long inventory_locn = e113->INVENTORY_LOCN;
          long inventory_dateid = e113->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e113->INVENTORY_KSN;
          long v113 = e113->__av;
          agg98 += (v113 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se405.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se406.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se407.modify(inventory_locn)))));
          e113 = e113->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_98 += agg98;
      DOUBLE_TYPE agg99 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e114 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e114) {
          long inventory_locn = e114->INVENTORY_LOCN;
          long inventory_dateid = e114->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e114->INVENTORY_KSN;
          long v114 = e114->__av;
          agg99 += (v114 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se409.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se410.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se411.modify(inventory_locn)))));
          e114 = e114->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_99 += agg99;
      DOUBLE_TYPE agg100 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e115 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e115) {
          long inventory_locn = e115->INVENTORY_LOCN;
          long inventory_dateid = e115->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e115->INVENTORY_KSN;
          long v115 = e115->__av;
          agg100 += (v115 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se413.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se414.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se415.modify(inventory_locn)))));
          e115 = e115->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_100 += agg100;
      DOUBLE_TYPE agg101 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e116 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e116) {
          long inventory_locn = e116->INVENTORY_LOCN;
          long inventory_dateid = e116->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e116->INVENTORY_KSN;
          long v116 = e116->__av;
          agg101 += (v116 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se417.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se418.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se419.modify(inventory_locn)))));
          e116 = e116->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_101 += agg101;
      long agg102 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e117 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e117) {
          long inventory_locn = e117->INVENTORY_LOCN;
          long inventory_dateid = e117->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e117->INVENTORY_KSN;
          long v117 = e117->__av;
          agg102 += (v117 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se421.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se422.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se423.modify(inventory_locn)))));
          e117 = e117->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_102 += agg102;
      long agg103 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e118 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e118) {
          long inventory_locn = e118->INVENTORY_LOCN;
          long inventory_dateid = e118->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e118->INVENTORY_KSN;
          long v118 = e118->__av;
          agg103 += (v118 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se425.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se426.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se427.modify(inventory_locn)))));
          e118 = e118->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_103 += agg103;
      long agg104 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e119 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e119) {
          long inventory_locn = e119->INVENTORY_LOCN;
          long inventory_dateid = e119->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e119->INVENTORY_KSN;
          long v119 = e119->__av;
          agg104 += (v119 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se429.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se430.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se431.modify(inventory_locn)))));
          e119 = e119->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_104 += agg104;
      long agg105 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e120 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e120) {
          long inventory_locn = e120->INVENTORY_LOCN;
          long inventory_dateid = e120->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e120->INVENTORY_KSN;
          long v120 = e120->__av;
          agg105 += (v120 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se433.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se434.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se435.modify(inventory_locn)))));
          e120 = e120->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_105 += agg105;
      long agg106 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e121 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e121) {
          long inventory_locn = e121->INVENTORY_LOCN;
          long inventory_dateid = e121->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e121->INVENTORY_KSN;
          long v121 = e121->__av;
          agg106 += (v121 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se437.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se438.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se439.modify(inventory_locn)))));
          e121 = e121->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_106 += agg106;
      DOUBLE_TYPE agg107 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e122 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e122) {
          long inventory_locn = e122->INVENTORY_LOCN;
          long inventory_dateid = e122->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e122->INVENTORY_KSN;
          long v122 = e122->__av;
          agg107 += (v122 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se441.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se442.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se443.modify(inventory_locn)))));
          e122 = e122->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_107 += agg107;
      long agg108 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e123 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e123) {
          long inventory_locn = e123->INVENTORY_LOCN;
          long inventory_dateid = e123->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e123->INVENTORY_KSN;
          long v123 = e123->__av;
          agg108 += (v123 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se445.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se446.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se447.modify(inventory_locn)))));
          e123 = e123->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_108 += agg108;
      long agg109 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e124 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e124) {
          long inventory_locn = e124->INVENTORY_LOCN;
          long inventory_dateid = e124->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e124->INVENTORY_KSN;
          long v124 = e124->__av;
          agg109 += (v124 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se449.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se450.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se451.modify(inventory_locn)))));
          e124 = e124->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_109 += agg109;
      long agg110 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e125 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e125) {
          long inventory_locn = e125->INVENTORY_LOCN;
          long inventory_dateid = e125->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e125->INVENTORY_KSN;
          long v125 = e125->__av;
          agg110 += (v125 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se453.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se454.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se455.modify(inventory_locn)))));
          e125 = e125->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_110 += agg110;
      long agg111 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e126 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e126) {
          long inventory_locn = e126->INVENTORY_LOCN;
          long inventory_dateid = e126->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e126->INVENTORY_KSN;
          long v126 = e126->__av;
          agg111 += (v126 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se457.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se458.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se459.modify(inventory_locn)))));
          e126 = e126->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_111 += agg111;
      long agg112 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e127 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e127) {
          long inventory_locn = e127->INVENTORY_LOCN;
          long inventory_dateid = e127->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e127->INVENTORY_KSN;
          long v127 = e127->__av;
          agg112 += (v127 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se461.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se462.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se463.modify(inventory_locn)))));
          e127 = e127->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_112 += agg112;
      long agg113 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e128 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e128) {
          long inventory_locn = e128->INVENTORY_LOCN;
          long inventory_dateid = e128->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e128->INVENTORY_KSN;
          long v128 = e128->__av;
          agg113 += (v128 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se465.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se466.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se467.modify(inventory_locn)))));
          e128 = e128->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_113 += agg113;
      long agg114 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e129 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e129) {
          long inventory_locn = e129->INVENTORY_LOCN;
          long inventory_dateid = e129->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e129->INVENTORY_KSN;
          long v129 = e129->__av;
          agg114 += (v129 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se469.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se470.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se471.modify(inventory_locn)))));
          e129 = e129->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_114 += agg114;
      long agg115 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e130 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e130) {
          long inventory_locn = e130->INVENTORY_LOCN;
          long inventory_dateid = e130->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e130->INVENTORY_KSN;
          long v130 = e130->__av;
          agg115 += (v130 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se473.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se474.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se475.modify(inventory_locn)))));
          e130 = e130->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_115 += agg115;
      long agg116 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e131 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e131) {
          long inventory_locn = e131->INVENTORY_LOCN;
          long inventory_dateid = e131->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e131->INVENTORY_KSN;
          long v131 = e131->__av;
          agg116 += (v131 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se477.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se478.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se479.modify(inventory_locn)))));
          e131 = e131->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_116 += agg116;
      long agg117 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e132 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e132) {
          long inventory_locn = e132->INVENTORY_LOCN;
          long inventory_dateid = e132->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e132->INVENTORY_KSN;
          long v132 = e132->__av;
          agg117 += (v132 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se481.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se482.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se483.modify(inventory_locn)))));
          e132 = e132->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_117 += agg117;
      long agg118 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e133 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e133) {
          long inventory_locn = e133->INVENTORY_LOCN;
          long inventory_dateid = e133->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e133->INVENTORY_KSN;
          long v133 = e133->__av;
          agg118 += (v133 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se485.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se486.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se487.modify(inventory_locn)))));
          e133 = e133->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_118 += agg118;
      long agg119 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e134 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e134) {
          long inventory_locn = e134->INVENTORY_LOCN;
          long inventory_dateid = e134->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e134->INVENTORY_KSN;
          long v134 = e134->__av;
          agg119 += (v134 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se489.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se490.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se491.modify(inventory_locn)))));
          e134 = e134->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_119 += agg119;
      DOUBLE_TYPE agg120 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e135 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e135) {
          long inventory_locn = e135->INVENTORY_LOCN;
          long inventory_dateid = e135->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e135->INVENTORY_KSN;
          long v135 = e135->__av;
          agg120 += (v135 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se493.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se494.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se495.modify(inventory_locn)))));
          e135 = e135->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_120 += agg120;
      long agg121 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e136 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e136) {
          long inventory_locn = e136->INVENTORY_LOCN;
          long inventory_dateid = e136->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e136->INVENTORY_KSN;
          long v136 = e136->__av;
          agg121 += (v136 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se497.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se498.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se499.modify(inventory_locn)))));
          e136 = e136->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_121 += agg121;
      long agg122 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e137 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e137) {
          long inventory_locn = e137->INVENTORY_LOCN;
          long inventory_dateid = e137->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e137->INVENTORY_KSN;
          long v137 = e137->__av;
          agg122 += (v137 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se501.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se502.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se503.modify(inventory_locn)))));
          e137 = e137->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_122 += agg122;
      long agg123 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e138 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e138) {
          long inventory_locn = e138->INVENTORY_LOCN;
          long inventory_dateid = e138->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e138->INVENTORY_KSN;
          long v138 = e138->__av;
          agg123 += (v138 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se505.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se506.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se507.modify(inventory_locn)))));
          e138 = e138->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_123 += agg123;
      long agg124 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e139 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e139) {
          long inventory_locn = e139->INVENTORY_LOCN;
          long inventory_dateid = e139->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e139->INVENTORY_KSN;
          long v139 = e139->__av;
          agg124 += (v139 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se509.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se510.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se511.modify(inventory_locn)))));
          e139 = e139->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_124 += agg124;
      DOUBLE_TYPE agg125 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e140 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e140) {
          long inventory_locn = e140->INVENTORY_LOCN;
          long inventory_dateid = e140->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e140->INVENTORY_KSN;
          long v140 = e140->__av;
          agg125 += (v140 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se513.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se514.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se515.modify(inventory_locn)))));
          e140 = e140->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_125 += agg125;
      long agg126 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry* e141 = __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA.head;
        while (e141) {
          long inventory_locn = e141->INVENTORY_LOCN;
          long inventory_dateid = e141->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e141->INVENTORY_KSN;
          long v141 = e141->__av;
          agg126 += (v141 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se517.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se518.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se519.modify(inventory_locn)))));
          e141 = e141->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_126 += agg126;
      DOUBLE_TYPE agg127 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry* e142 = __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA.head;
        while (e142) {
          long inventory_locn = e142->INVENTORY_LOCN;
          long inventory_dateid = e142->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e142->INVENTORY_KSN;
          DOUBLE_TYPE v142 = e142->__av;
          agg127 += (v142 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se521.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se522.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se523.modify(inventory_locn)))));
          e142 = e142->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_127 += agg127;
      DOUBLE_TYPE agg128 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e143 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e143) {
          long inventory_locn = e143->INVENTORY_LOCN;
          long inventory_dateid = e143->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e143->INVENTORY_KSN;
          DOUBLE_TYPE v143 = e143->__av;
          agg128 += (v143 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se525.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se526.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se527.modify(inventory_locn)))));
          e143 = e143->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_128 += agg128;
      DOUBLE_TYPE agg129 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e144 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e144) {
          long inventory_locn = e144->INVENTORY_LOCN;
          long inventory_dateid = e144->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e144->INVENTORY_KSN;
          DOUBLE_TYPE v144 = e144->__av;
          agg129 += (v144 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se529.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se530.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se531.modify(inventory_locn)))));
          e144 = e144->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_129 += agg129;
      DOUBLE_TYPE agg130 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e145 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e145) {
          long inventory_locn = e145->INVENTORY_LOCN;
          long inventory_dateid = e145->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e145->INVENTORY_KSN;
          DOUBLE_TYPE v145 = e145->__av;
          agg130 += (v145 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se533.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se534.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se535.modify(inventory_locn)))));
          e145 = e145->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_130 += agg130;
      DOUBLE_TYPE agg131 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e146 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e146) {
          long inventory_locn = e146->INVENTORY_LOCN;
          long inventory_dateid = e146->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e146->INVENTORY_KSN;
          DOUBLE_TYPE v146 = e146->__av;
          agg131 += (v146 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se537.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se538.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se539.modify(inventory_locn)))));
          e146 = e146->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_131 += agg131;
      DOUBLE_TYPE agg132 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e147 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e147) {
          long inventory_locn = e147->INVENTORY_LOCN;
          long inventory_dateid = e147->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e147->INVENTORY_KSN;
          DOUBLE_TYPE v147 = e147->__av;
          agg132 += (v147 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se541.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se542.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se543.modify(inventory_locn)))));
          e147 = e147->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_132 += agg132;
      DOUBLE_TYPE agg133 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e148 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e148) {
          long inventory_locn = e148->INVENTORY_LOCN;
          long inventory_dateid = e148->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e148->INVENTORY_KSN;
          DOUBLE_TYPE v148 = e148->__av;
          agg133 += (v148 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se545.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se546.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se547.modify(inventory_locn)))));
          e148 = e148->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_133 += agg133;
      DOUBLE_TYPE agg134 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e149 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e149) {
          long inventory_locn = e149->INVENTORY_LOCN;
          long inventory_dateid = e149->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e149->INVENTORY_KSN;
          DOUBLE_TYPE v149 = e149->__av;
          agg134 += (v149 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se549.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se550.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se551.modify(inventory_locn)))));
          e149 = e149->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_134 += agg134;
      DOUBLE_TYPE agg135 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e150 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e150) {
          long inventory_locn = e150->INVENTORY_LOCN;
          long inventory_dateid = e150->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e150->INVENTORY_KSN;
          DOUBLE_TYPE v150 = e150->__av;
          agg135 += (v150 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se553.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se554.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se555.modify(inventory_locn)))));
          e150 = e150->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_135 += agg135;
      DOUBLE_TYPE agg136 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e151 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e151) {
          long inventory_locn = e151->INVENTORY_LOCN;
          long inventory_dateid = e151->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e151->INVENTORY_KSN;
          DOUBLE_TYPE v151 = e151->__av;
          agg136 += (v151 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se557.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se558.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se559.modify(inventory_locn)))));
          e151 = e151->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_136 += agg136;
      DOUBLE_TYPE agg137 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e152 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e152) {
          long inventory_locn = e152->INVENTORY_LOCN;
          long inventory_dateid = e152->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e152->INVENTORY_KSN;
          DOUBLE_TYPE v152 = e152->__av;
          agg137 += (v152 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se561.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se562.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se563.modify(inventory_locn)))));
          e152 = e152->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_137 += agg137;
      DOUBLE_TYPE agg138 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e153 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e153) {
          long inventory_locn = e153->INVENTORY_LOCN;
          long inventory_dateid = e153->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e153->INVENTORY_KSN;
          DOUBLE_TYPE v153 = e153->__av;
          agg138 += (v153 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se565.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se566.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se567.modify(inventory_locn)))));
          e153 = e153->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_138 += agg138;
      DOUBLE_TYPE agg139 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e154 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e154) {
          long inventory_locn = e154->INVENTORY_LOCN;
          long inventory_dateid = e154->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e154->INVENTORY_KSN;
          DOUBLE_TYPE v154 = e154->__av;
          agg139 += (v154 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se569.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se570.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se571.modify(inventory_locn)))));
          e154 = e154->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_139 += agg139;
      DOUBLE_TYPE agg140 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e155 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e155) {
          long inventory_locn = e155->INVENTORY_LOCN;
          long inventory_dateid = e155->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e155->INVENTORY_KSN;
          DOUBLE_TYPE v155 = e155->__av;
          agg140 += (v155 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se573.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se574.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se575.modify(inventory_locn)))));
          e155 = e155->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_140 += agg140;
      DOUBLE_TYPE agg141 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e156 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e156) {
          long inventory_locn = e156->INVENTORY_LOCN;
          long inventory_dateid = e156->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e156->INVENTORY_KSN;
          DOUBLE_TYPE v156 = e156->__av;
          agg141 += (v156 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se577.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se578.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se579.modify(inventory_locn)))));
          e156 = e156->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_141 += agg141;
      DOUBLE_TYPE agg142 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e157 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e157) {
          long inventory_locn = e157->INVENTORY_LOCN;
          long inventory_dateid = e157->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e157->INVENTORY_KSN;
          DOUBLE_TYPE v157 = e157->__av;
          agg142 += (v157 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se581.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se582.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se583.modify(inventory_locn)))));
          e157 = e157->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_142 += agg142;
      DOUBLE_TYPE agg143 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e158 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e158) {
          long inventory_locn = e158->INVENTORY_LOCN;
          long inventory_dateid = e158->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e158->INVENTORY_KSN;
          DOUBLE_TYPE v158 = e158->__av;
          agg143 += (v158 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se585.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se586.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se587.modify(inventory_locn)))));
          e158 = e158->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_143 += agg143;
      DOUBLE_TYPE agg144 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e159 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e159) {
          long inventory_locn = e159->INVENTORY_LOCN;
          long inventory_dateid = e159->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e159->INVENTORY_KSN;
          DOUBLE_TYPE v159 = e159->__av;
          agg144 += (v159 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se589.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se590.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se591.modify(inventory_locn)))));
          e159 = e159->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_144 += agg144;
      DOUBLE_TYPE agg145 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e160 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e160) {
          long inventory_locn = e160->INVENTORY_LOCN;
          long inventory_dateid = e160->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e160->INVENTORY_KSN;
          DOUBLE_TYPE v160 = e160->__av;
          agg145 += (v160 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se593.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se594.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se595.modify(inventory_locn)))));
          e160 = e160->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_145 += agg145;
      DOUBLE_TYPE agg146 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e161 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e161) {
          long inventory_locn = e161->INVENTORY_LOCN;
          long inventory_dateid = e161->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e161->INVENTORY_KSN;
          DOUBLE_TYPE v161 = e161->__av;
          agg146 += (v161 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se597.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se598.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se599.modify(inventory_locn)))));
          e161 = e161->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_146 += agg146;
      DOUBLE_TYPE agg147 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e162 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e162) {
          long inventory_locn = e162->INVENTORY_LOCN;
          long inventory_dateid = e162->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e162->INVENTORY_KSN;
          DOUBLE_TYPE v162 = e162->__av;
          agg147 += (v162 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se601.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se602.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se603.modify(inventory_locn)))));
          e162 = e162->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_147 += agg147;
      DOUBLE_TYPE agg148 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e163 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e163) {
          long inventory_locn = e163->INVENTORY_LOCN;
          long inventory_dateid = e163->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e163->INVENTORY_KSN;
          DOUBLE_TYPE v163 = e163->__av;
          agg148 += (v163 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se605.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se606.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se607.modify(inventory_locn)))));
          e163 = e163->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_148 += agg148;
      DOUBLE_TYPE agg149 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e164 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e164) {
          long inventory_locn = e164->INVENTORY_LOCN;
          long inventory_dateid = e164->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e164->INVENTORY_KSN;
          DOUBLE_TYPE v164 = e164->__av;
          agg149 += (v164 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se609.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se610.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se611.modify(inventory_locn)))));
          e164 = e164->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_149 += agg149;
      DOUBLE_TYPE agg150 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e165 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e165) {
          long inventory_locn = e165->INVENTORY_LOCN;
          long inventory_dateid = e165->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e165->INVENTORY_KSN;
          DOUBLE_TYPE v165 = e165->__av;
          agg150 += (v165 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se613.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se614.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se615.modify(inventory_locn)))));
          e165 = e165->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_150 += agg150;
      DOUBLE_TYPE agg151 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e166 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e166) {
          long inventory_locn = e166->INVENTORY_LOCN;
          long inventory_dateid = e166->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e166->INVENTORY_KSN;
          DOUBLE_TYPE v166 = e166->__av;
          agg151 += (v166 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se617.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se618.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se619.modify(inventory_locn)))));
          e166 = e166->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_151 += agg151;
      DOUBLE_TYPE agg152 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e167 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e167) {
          long inventory_locn = e167->INVENTORY_LOCN;
          long inventory_dateid = e167->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e167->INVENTORY_KSN;
          DOUBLE_TYPE v167 = e167->__av;
          agg152 += (v167 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se621.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se622.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se623.modify(inventory_locn)))));
          e167 = e167->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_152 += agg152;
      DOUBLE_TYPE agg153 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e168 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e168) {
          long inventory_locn = e168->INVENTORY_LOCN;
          long inventory_dateid = e168->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e168->INVENTORY_KSN;
          DOUBLE_TYPE v168 = e168->__av;
          agg153 += (v168 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se625.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se626.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se627.modify(inventory_locn)))));
          e168 = e168->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_153 += agg153;
      DOUBLE_TYPE agg154 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e169 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e169) {
          long inventory_locn = e169->INVENTORY_LOCN;
          long inventory_dateid = e169->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e169->INVENTORY_KSN;
          DOUBLE_TYPE v169 = e169->__av;
          agg154 += (v169 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se629.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se630.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se631.modify(inventory_locn)))));
          e169 = e169->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_154 += agg154;
      DOUBLE_TYPE agg155 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e170 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e170) {
          long inventory_locn = e170->INVENTORY_LOCN;
          long inventory_dateid = e170->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e170->INVENTORY_KSN;
          DOUBLE_TYPE v170 = e170->__av;
          agg155 += (v170 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se633.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se634.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se635.modify(inventory_locn)))));
          e170 = e170->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_155 += agg155;
      DOUBLE_TYPE agg156 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e171 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e171) {
          long inventory_locn = e171->INVENTORY_LOCN;
          long inventory_dateid = e171->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e171->INVENTORY_KSN;
          DOUBLE_TYPE v171 = e171->__av;
          agg156 += (v171 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se637.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se638.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se639.modify(inventory_locn)))));
          e171 = e171->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_156 += agg156;
      DOUBLE_TYPE agg157 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e172 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e172) {
          long inventory_locn = e172->INVENTORY_LOCN;
          long inventory_dateid = e172->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e172->INVENTORY_KSN;
          DOUBLE_TYPE v172 = e172->__av;
          agg157 += (v172 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se641.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se642.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se643.modify(inventory_locn)))));
          e172 = e172->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_157 += agg157;
      DOUBLE_TYPE agg158 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e173 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e173) {
          long inventory_locn = e173->INVENTORY_LOCN;
          long inventory_dateid = e173->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e173->INVENTORY_KSN;
          DOUBLE_TYPE v173 = e173->__av;
          agg158 += (v173 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se645.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se646.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se647.modify(inventory_locn)))));
          e173 = e173->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_158 += agg158;
      DOUBLE_TYPE agg159 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e174 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e174) {
          long inventory_locn = e174->INVENTORY_LOCN;
          long inventory_dateid = e174->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e174->INVENTORY_KSN;
          DOUBLE_TYPE v174 = e174->__av;
          agg159 += (v174 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se649.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se650.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se651.modify(inventory_locn)))));
          e174 = e174->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_159 += agg159;
      DOUBLE_TYPE agg160 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e175 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e175) {
          long inventory_locn = e175->INVENTORY_LOCN;
          long inventory_dateid = e175->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e175->INVENTORY_KSN;
          DOUBLE_TYPE v175 = e175->__av;
          agg160 += (v175 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se653.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se654.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se655.modify(inventory_locn)))));
          e175 = e175->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_160 += agg160;
      DOUBLE_TYPE agg161 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e176 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e176) {
          long inventory_locn = e176->INVENTORY_LOCN;
          long inventory_dateid = e176->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e176->INVENTORY_KSN;
          DOUBLE_TYPE v176 = e176->__av;
          agg161 += (v176 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se657.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se658.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se659.modify(inventory_locn)))));
          e176 = e176->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_161 += agg161;
      DOUBLE_TYPE agg162 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e177 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e177) {
          long inventory_locn = e177->INVENTORY_LOCN;
          long inventory_dateid = e177->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e177->INVENTORY_KSN;
          DOUBLE_TYPE v177 = e177->__av;
          agg162 += (v177 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se661.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se662.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se663.modify(inventory_locn)))));
          e177 = e177->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_162 += agg162;
      DOUBLE_TYPE agg163 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e178 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e178) {
          long inventory_locn = e178->INVENTORY_LOCN;
          long inventory_dateid = e178->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e178->INVENTORY_KSN;
          DOUBLE_TYPE v178 = e178->__av;
          agg163 += (v178 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se665.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se666.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se667.modify(inventory_locn)))));
          e178 = e178->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_163 += agg163;
      DOUBLE_TYPE agg164 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e179 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e179) {
          long inventory_locn = e179->INVENTORY_LOCN;
          long inventory_dateid = e179->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e179->INVENTORY_KSN;
          DOUBLE_TYPE v179 = e179->__av;
          agg164 += (v179 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se669.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se670.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se671.modify(inventory_locn)))));
          e179 = e179->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_164 += agg164;
      DOUBLE_TYPE agg165 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e180 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e180) {
          long inventory_locn = e180->INVENTORY_LOCN;
          long inventory_dateid = e180->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e180->INVENTORY_KSN;
          DOUBLE_TYPE v180 = e180->__av;
          agg165 += (v180 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se673.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se674.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se675.modify(inventory_locn)))));
          e180 = e180->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_165 += agg165;
      DOUBLE_TYPE agg166 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry* e181 = __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA.head;
        while (e181) {
          long inventory_locn = e181->INVENTORY_LOCN;
          long inventory_dateid = e181->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e181->INVENTORY_KSN;
          DOUBLE_TYPE v181 = e181->__av;
          agg166 += (v181 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se677.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se678.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se679.modify(inventory_locn)))));
          e181 = e181->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_166 += agg166;
      long agg167 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e182 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e182) {
          long inventory_locn = e182->INVENTORY_LOCN;
          long inventory_dateid = e182->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e182->INVENTORY_KSN;
          long v182 = e182->__av;
          agg167 += (v182 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se681.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se682.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_167INVENTORY1_P_3.getValueOrDefault(se683.modify(inventory_locn)))));
          e182 = e182->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_167 += agg167;
      DOUBLE_TYPE agg168 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e183 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e183) {
          long inventory_locn = e183->INVENTORY_LOCN;
          long inventory_dateid = e183->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e183->INVENTORY_KSN;
          long v183 = e183->__av;
          agg168 += (v183 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se685.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se686.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_168INVENTORY1_P_3.getValueOrDefault(se687.modify(inventory_locn)))));
          e183 = e183->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_168 += agg168;
      DOUBLE_TYPE agg169 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e184 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e184) {
          long inventory_locn = e184->INVENTORY_LOCN;
          long inventory_dateid = e184->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e184->INVENTORY_KSN;
          long v184 = e184->__av;
          agg169 += (v184 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se689.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se690.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_169INVENTORY1_P_3.getValueOrDefault(se691.modify(inventory_locn)))));
          e184 = e184->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_169 += agg169;
      DOUBLE_TYPE agg170 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e185 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e185) {
          long inventory_locn = e185->INVENTORY_LOCN;
          long inventory_dateid = e185->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e185->INVENTORY_KSN;
          long v185 = e185->__av;
          agg170 += (v185 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se693.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se694.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_170INVENTORY1_P_3.getValueOrDefault(se695.modify(inventory_locn)))));
          e185 = e185->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_170 += agg170;
      DOUBLE_TYPE agg171 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e186 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e186) {
          long inventory_locn = e186->INVENTORY_LOCN;
          long inventory_dateid = e186->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e186->INVENTORY_KSN;
          long v186 = e186->__av;
          agg171 += (v186 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se697.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se698.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_171INVENTORY1_P_3.getValueOrDefault(se699.modify(inventory_locn)))));
          e186 = e186->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_171 += agg171;
      DOUBLE_TYPE agg172 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e187 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e187) {
          long inventory_locn = e187->INVENTORY_LOCN;
          long inventory_dateid = e187->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e187->INVENTORY_KSN;
          long v187 = e187->__av;
          agg172 += (v187 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se701.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se702.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_172INVENTORY1_P_3.getValueOrDefault(se703.modify(inventory_locn)))));
          e187 = e187->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_172 += agg172;
      DOUBLE_TYPE agg173 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e188 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e188) {
          long inventory_locn = e188->INVENTORY_LOCN;
          long inventory_dateid = e188->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e188->INVENTORY_KSN;
          long v188 = e188->__av;
          agg173 += (v188 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se705.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se706.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_173INVENTORY1_P_3.getValueOrDefault(se707.modify(inventory_locn)))));
          e188 = e188->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_173 += agg173;
      DOUBLE_TYPE agg174 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e189 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e189) {
          long inventory_locn = e189->INVENTORY_LOCN;
          long inventory_dateid = e189->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e189->INVENTORY_KSN;
          long v189 = e189->__av;
          agg174 += (v189 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se709.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se710.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_174INVENTORY1_P_3.getValueOrDefault(se711.modify(inventory_locn)))));
          e189 = e189->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_174 += agg174;
      DOUBLE_TYPE agg175 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e190 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e190) {
          long inventory_locn = e190->INVENTORY_LOCN;
          long inventory_dateid = e190->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e190->INVENTORY_KSN;
          long v190 = e190->__av;
          agg175 += (v190 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se713.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se714.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_175INVENTORY1_P_3.getValueOrDefault(se715.modify(inventory_locn)))));
          e190 = e190->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_175 += agg175;
      DOUBLE_TYPE agg176 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e191 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e191) {
          long inventory_locn = e191->INVENTORY_LOCN;
          long inventory_dateid = e191->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e191->INVENTORY_KSN;
          long v191 = e191->__av;
          agg176 += (v191 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se717.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se718.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_176INVENTORY1_P_3.getValueOrDefault(se719.modify(inventory_locn)))));
          e191 = e191->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_176 += agg176;
      DOUBLE_TYPE agg177 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e192 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e192) {
          long inventory_locn = e192->INVENTORY_LOCN;
          long inventory_dateid = e192->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e192->INVENTORY_KSN;
          long v192 = e192->__av;
          agg177 += (v192 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se721.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se722.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_177INVENTORY1_P_3.getValueOrDefault(se723.modify(inventory_locn)))));
          e192 = e192->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_177 += agg177;
      DOUBLE_TYPE agg178 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e193 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e193) {
          long inventory_locn = e193->INVENTORY_LOCN;
          long inventory_dateid = e193->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e193->INVENTORY_KSN;
          long v193 = e193->__av;
          agg178 += (v193 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se725.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se726.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_178INVENTORY1_P_3.getValueOrDefault(se727.modify(inventory_locn)))));
          e193 = e193->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_178 += agg178;
      DOUBLE_TYPE agg179 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e194 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e194) {
          long inventory_locn = e194->INVENTORY_LOCN;
          long inventory_dateid = e194->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e194->INVENTORY_KSN;
          long v194 = e194->__av;
          agg179 += (v194 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se729.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se730.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_179INVENTORY1_P_3.getValueOrDefault(se731.modify(inventory_locn)))));
          e194 = e194->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_179 += agg179;
      DOUBLE_TYPE agg180 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e195 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e195) {
          long inventory_locn = e195->INVENTORY_LOCN;
          long inventory_dateid = e195->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e195->INVENTORY_KSN;
          long v195 = e195->__av;
          agg180 += (v195 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se733.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se734.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_180INVENTORY1_P_3.getValueOrDefault(se735.modify(inventory_locn)))));
          e195 = e195->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_180 += agg180;
      long agg181 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e196 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e196) {
          long inventory_locn = e196->INVENTORY_LOCN;
          long inventory_dateid = e196->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e196->INVENTORY_KSN;
          long v196 = e196->__av;
          agg181 += (v196 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se737.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se738.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_181INVENTORY1_P_3.getValueOrDefault(se739.modify(inventory_locn)))));
          e196 = e196->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_181 += agg181;
      long agg182 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e197 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e197) {
          long inventory_locn = e197->INVENTORY_LOCN;
          long inventory_dateid = e197->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e197->INVENTORY_KSN;
          long v197 = e197->__av;
          agg182 += (v197 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se741.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se742.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_182INVENTORY1_P_3.getValueOrDefault(se743.modify(inventory_locn)))));
          e197 = e197->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_182 += agg182;
      long agg183 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e198 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e198) {
          long inventory_locn = e198->INVENTORY_LOCN;
          long inventory_dateid = e198->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e198->INVENTORY_KSN;
          long v198 = e198->__av;
          agg183 += (v198 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se745.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se746.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_183INVENTORY1_P_3.getValueOrDefault(se747.modify(inventory_locn)))));
          e198 = e198->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_183 += agg183;
      long agg184 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e199 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e199) {
          long inventory_locn = e199->INVENTORY_LOCN;
          long inventory_dateid = e199->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e199->INVENTORY_KSN;
          long v199 = e199->__av;
          agg184 += (v199 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se749.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se750.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_184INVENTORY1_P_3.getValueOrDefault(se751.modify(inventory_locn)))));
          e199 = e199->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_184 += agg184;
      long agg185 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e200 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e200) {
          long inventory_locn = e200->INVENTORY_LOCN;
          long inventory_dateid = e200->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e200->INVENTORY_KSN;
          long v200 = e200->__av;
          agg185 += (v200 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se753.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se754.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_185INVENTORY1_P_3.getValueOrDefault(se755.modify(inventory_locn)))));
          e200 = e200->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_185 += agg185;
      DOUBLE_TYPE agg186 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e201 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e201) {
          long inventory_locn = e201->INVENTORY_LOCN;
          long inventory_dateid = e201->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e201->INVENTORY_KSN;
          long v201 = e201->__av;
          agg186 += (v201 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se757.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se758.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_186INVENTORY1_P_3.getValueOrDefault(se759.modify(inventory_locn)))));
          e201 = e201->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_186 += agg186;
      long agg187 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e202 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e202) {
          long inventory_locn = e202->INVENTORY_LOCN;
          long inventory_dateid = e202->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e202->INVENTORY_KSN;
          long v202 = e202->__av;
          agg187 += (v202 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se761.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se762.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_187INVENTORY1_P_3.getValueOrDefault(se763.modify(inventory_locn)))));
          e202 = e202->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_187 += agg187;
      long agg188 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e203 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e203) {
          long inventory_locn = e203->INVENTORY_LOCN;
          long inventory_dateid = e203->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e203->INVENTORY_KSN;
          long v203 = e203->__av;
          agg188 += (v203 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se765.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se766.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_188INVENTORY1_P_3.getValueOrDefault(se767.modify(inventory_locn)))));
          e203 = e203->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_188 += agg188;
      long agg189 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e204 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e204) {
          long inventory_locn = e204->INVENTORY_LOCN;
          long inventory_dateid = e204->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e204->INVENTORY_KSN;
          long v204 = e204->__av;
          agg189 += (v204 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se769.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se770.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_189INVENTORY1_P_3.getValueOrDefault(se771.modify(inventory_locn)))));
          e204 = e204->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_189 += agg189;
      long agg190 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e205 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e205) {
          long inventory_locn = e205->INVENTORY_LOCN;
          long inventory_dateid = e205->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e205->INVENTORY_KSN;
          long v205 = e205->__av;
          agg190 += (v205 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se773.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se774.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_190INVENTORY1_P_3.getValueOrDefault(se775.modify(inventory_locn)))));
          e205 = e205->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_190 += agg190;
      long agg191 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e206 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e206) {
          long inventory_locn = e206->INVENTORY_LOCN;
          long inventory_dateid = e206->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e206->INVENTORY_KSN;
          long v206 = e206->__av;
          agg191 += (v206 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se777.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se778.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_191INVENTORY1_P_3.getValueOrDefault(se779.modify(inventory_locn)))));
          e206 = e206->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_191 += agg191;
      long agg192 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e207 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e207) {
          long inventory_locn = e207->INVENTORY_LOCN;
          long inventory_dateid = e207->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e207->INVENTORY_KSN;
          long v207 = e207->__av;
          agg192 += (v207 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se781.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se782.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_192INVENTORY1_P_3.getValueOrDefault(se783.modify(inventory_locn)))));
          e207 = e207->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_192 += agg192;
      long agg193 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e208 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e208) {
          long inventory_locn = e208->INVENTORY_LOCN;
          long inventory_dateid = e208->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e208->INVENTORY_KSN;
          long v208 = e208->__av;
          agg193 += (v208 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se785.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se786.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_193INVENTORY1_P_3.getValueOrDefault(se787.modify(inventory_locn)))));
          e208 = e208->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_193 += agg193;
      long agg194 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e209 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e209) {
          long inventory_locn = e209->INVENTORY_LOCN;
          long inventory_dateid = e209->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e209->INVENTORY_KSN;
          long v209 = e209->__av;
          agg194 += (v209 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se789.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se790.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_194INVENTORY1_P_3.getValueOrDefault(se791.modify(inventory_locn)))));
          e209 = e209->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_194 += agg194;
      long agg195 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e210 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e210) {
          long inventory_locn = e210->INVENTORY_LOCN;
          long inventory_dateid = e210->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e210->INVENTORY_KSN;
          long v210 = e210->__av;
          agg195 += (v210 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se793.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se794.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_195INVENTORY1_P_3.getValueOrDefault(se795.modify(inventory_locn)))));
          e210 = e210->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_195 += agg195;
      long agg196 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e211 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e211) {
          long inventory_locn = e211->INVENTORY_LOCN;
          long inventory_dateid = e211->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e211->INVENTORY_KSN;
          long v211 = e211->__av;
          agg196 += (v211 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se797.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se798.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se799.modify(inventory_locn)))));
          e211 = e211->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_196 += agg196;
      long agg197 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e212 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e212) {
          long inventory_locn = e212->INVENTORY_LOCN;
          long inventory_dateid = e212->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e212->INVENTORY_KSN;
          long v212 = e212->__av;
          agg197 += (v212 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se801.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se802.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se803.modify(inventory_locn)))));
          e212 = e212->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_197 += agg197;
      long agg198 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e213 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e213) {
          long inventory_locn = e213->INVENTORY_LOCN;
          long inventory_dateid = e213->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e213->INVENTORY_KSN;
          long v213 = e213->__av;
          agg198 += (v213 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se805.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se806.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se807.modify(inventory_locn)))));
          e213 = e213->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_198 += agg198;
      DOUBLE_TYPE agg199 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e214 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e214) {
          long inventory_locn = e214->INVENTORY_LOCN;
          long inventory_dateid = e214->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e214->INVENTORY_KSN;
          long v214 = e214->__av;
          agg199 += (v214 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se809.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se810.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se811.modify(inventory_locn)))));
          e214 = e214->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_199 += agg199;
      long agg200 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e215 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e215) {
          long inventory_locn = e215->INVENTORY_LOCN;
          long inventory_dateid = e215->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e215->INVENTORY_KSN;
          long v215 = e215->__av;
          agg200 += (v215 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se813.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se814.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se815.modify(inventory_locn)))));
          e215 = e215->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_200 += agg200;
      long agg201 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e216 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e216) {
          long inventory_locn = e216->INVENTORY_LOCN;
          long inventory_dateid = e216->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e216->INVENTORY_KSN;
          long v216 = e216->__av;
          agg201 += (v216 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se817.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se818.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se819.modify(inventory_locn)))));
          e216 = e216->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_201 += agg201;
      long agg202 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e217 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e217) {
          long inventory_locn = e217->INVENTORY_LOCN;
          long inventory_dateid = e217->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e217->INVENTORY_KSN;
          long v217 = e217->__av;
          agg202 += (v217 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se821.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se822.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se823.modify(inventory_locn)))));
          e217 = e217->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_202 += agg202;
      long agg203 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e218 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e218) {
          long inventory_locn = e218->INVENTORY_LOCN;
          long inventory_dateid = e218->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e218->INVENTORY_KSN;
          long v218 = e218->__av;
          agg203 += (v218 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se825.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se826.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se827.modify(inventory_locn)))));
          e218 = e218->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_203 += agg203;
      DOUBLE_TYPE agg204 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e219 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e219) {
          long inventory_locn = e219->INVENTORY_LOCN;
          long inventory_dateid = e219->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e219->INVENTORY_KSN;
          long v219 = e219->__av;
          agg204 += (v219 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se829.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se830.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se831.modify(inventory_locn)))));
          e219 = e219->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_204 += agg204;
      long agg205 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e220 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e220) {
          long inventory_locn = e220->INVENTORY_LOCN;
          long inventory_dateid = e220->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e220->INVENTORY_KSN;
          long v220 = e220->__av;
          agg205 += (v220 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se833.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se834.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.getValueOrDefault(se835.modify(inventory_locn)))));
          e220 = e220->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_205 += agg205;
      DOUBLE_TYPE agg206 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e221 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e221) {
          long inventory_locn = e221->INVENTORY_LOCN;
          long inventory_dateid = e221->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e221->INVENTORY_KSN;
          long v221 = e221->__av;
          agg206 += (v221 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se837.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se838.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_206INVENTORY1_P_3.getValueOrDefault(se839.modify(inventory_locn)))));
          e221 = e221->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_206 += agg206;
      DOUBLE_TYPE agg207 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e222 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e222) {
          long inventory_locn = e222->INVENTORY_LOCN;
          long inventory_dateid = e222->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e222->INVENTORY_KSN;
          long v222 = e222->__av;
          agg207 += (v222 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se841.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se842.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_207INVENTORY1_P_3.getValueOrDefault(se843.modify(inventory_locn)))));
          e222 = e222->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_207 += agg207;
      DOUBLE_TYPE agg208 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e223 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e223) {
          long inventory_locn = e223->INVENTORY_LOCN;
          long inventory_dateid = e223->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e223->INVENTORY_KSN;
          long v223 = e223->__av;
          agg208 += (v223 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se845.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se846.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_208INVENTORY1_P_3.getValueOrDefault(se847.modify(inventory_locn)))));
          e223 = e223->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_208 += agg208;
      DOUBLE_TYPE agg209 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e224 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e224) {
          long inventory_locn = e224->INVENTORY_LOCN;
          long inventory_dateid = e224->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e224->INVENTORY_KSN;
          long v224 = e224->__av;
          agg209 += (v224 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se849.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se850.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_209INVENTORY1_P_3.getValueOrDefault(se851.modify(inventory_locn)))));
          e224 = e224->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_209 += agg209;
      DOUBLE_TYPE agg210 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e225 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e225) {
          long inventory_locn = e225->INVENTORY_LOCN;
          long inventory_dateid = e225->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e225->INVENTORY_KSN;
          long v225 = e225->__av;
          agg210 += (v225 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se853.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se854.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_210INVENTORY1_P_3.getValueOrDefault(se855.modify(inventory_locn)))));
          e225 = e225->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_210 += agg210;
      DOUBLE_TYPE agg211 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e226 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e226) {
          long inventory_locn = e226->INVENTORY_LOCN;
          long inventory_dateid = e226->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e226->INVENTORY_KSN;
          long v226 = e226->__av;
          agg211 += (v226 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se857.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se858.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_211INVENTORY1_P_3.getValueOrDefault(se859.modify(inventory_locn)))));
          e226 = e226->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_211 += agg211;
      DOUBLE_TYPE agg212 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e227 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e227) {
          long inventory_locn = e227->INVENTORY_LOCN;
          long inventory_dateid = e227->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e227->INVENTORY_KSN;
          long v227 = e227->__av;
          agg212 += (v227 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se861.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se862.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_212INVENTORY1_P_3.getValueOrDefault(se863.modify(inventory_locn)))));
          e227 = e227->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_212 += agg212;
      DOUBLE_TYPE agg213 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e228 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e228) {
          long inventory_locn = e228->INVENTORY_LOCN;
          long inventory_dateid = e228->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e228->INVENTORY_KSN;
          long v228 = e228->__av;
          agg213 += (v228 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se865.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se866.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_213INVENTORY1_P_3.getValueOrDefault(se867.modify(inventory_locn)))));
          e228 = e228->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_213 += agg213;
      DOUBLE_TYPE agg214 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e229 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e229) {
          long inventory_locn = e229->INVENTORY_LOCN;
          long inventory_dateid = e229->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e229->INVENTORY_KSN;
          long v229 = e229->__av;
          agg214 += (v229 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se869.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se870.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_214INVENTORY1_P_3.getValueOrDefault(se871.modify(inventory_locn)))));
          e229 = e229->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_214 += agg214;
      DOUBLE_TYPE agg215 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e230 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e230) {
          long inventory_locn = e230->INVENTORY_LOCN;
          long inventory_dateid = e230->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e230->INVENTORY_KSN;
          long v230 = e230->__av;
          agg215 += (v230 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se873.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se874.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_215INVENTORY1_P_3.getValueOrDefault(se875.modify(inventory_locn)))));
          e230 = e230->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_215 += agg215;
      DOUBLE_TYPE agg216 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e231 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e231) {
          long inventory_locn = e231->INVENTORY_LOCN;
          long inventory_dateid = e231->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e231->INVENTORY_KSN;
          long v231 = e231->__av;
          agg216 += (v231 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se877.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se878.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_216INVENTORY1_P_3.getValueOrDefault(se879.modify(inventory_locn)))));
          e231 = e231->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_216 += agg216;
      DOUBLE_TYPE agg217 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e232 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e232) {
          long inventory_locn = e232->INVENTORY_LOCN;
          long inventory_dateid = e232->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e232->INVENTORY_KSN;
          long v232 = e232->__av;
          agg217 += (v232 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se881.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se882.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_217INVENTORY1_P_3.getValueOrDefault(se883.modify(inventory_locn)))));
          e232 = e232->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_217 += agg217;
      DOUBLE_TYPE agg218 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e233 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e233) {
          long inventory_locn = e233->INVENTORY_LOCN;
          long inventory_dateid = e233->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e233->INVENTORY_KSN;
          long v233 = e233->__av;
          agg218 += (v233 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se885.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se886.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_218INVENTORY1_P_3.getValueOrDefault(se887.modify(inventory_locn)))));
          e233 = e233->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_218 += agg218;
      DOUBLE_TYPE agg219 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e234 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e234) {
          long inventory_locn = e234->INVENTORY_LOCN;
          long inventory_dateid = e234->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e234->INVENTORY_KSN;
          long v234 = e234->__av;
          agg219 += (v234 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se889.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se890.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_219INVENTORY1_P_3.getValueOrDefault(se891.modify(inventory_locn)))));
          e234 = e234->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_219 += agg219;
      DOUBLE_TYPE agg220 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e235 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e235) {
          long inventory_locn = e235->INVENTORY_LOCN;
          long inventory_dateid = e235->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e235->INVENTORY_KSN;
          long v235 = e235->__av;
          agg220 += (v235 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se893.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se894.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_220INVENTORY1_P_3.getValueOrDefault(se895.modify(inventory_locn)))));
          e235 = e235->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_220 += agg220;
      DOUBLE_TYPE agg221 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e236 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e236) {
          long inventory_locn = e236->INVENTORY_LOCN;
          long inventory_dateid = e236->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e236->INVENTORY_KSN;
          long v236 = e236->__av;
          agg221 += (v236 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se897.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se898.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_221INVENTORY1_P_3.getValueOrDefault(se899.modify(inventory_locn)))));
          e236 = e236->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_221 += agg221;
      DOUBLE_TYPE agg222 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e237 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e237) {
          long inventory_locn = e237->INVENTORY_LOCN;
          long inventory_dateid = e237->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e237->INVENTORY_KSN;
          long v237 = e237->__av;
          agg222 += (v237 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se901.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se902.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_222INVENTORY1_P_3.getValueOrDefault(se903.modify(inventory_locn)))));
          e237 = e237->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_222 += agg222;
      DOUBLE_TYPE agg223 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e238 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e238) {
          long inventory_locn = e238->INVENTORY_LOCN;
          long inventory_dateid = e238->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e238->INVENTORY_KSN;
          long v238 = e238->__av;
          agg223 += (v238 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se905.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se906.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_223INVENTORY1_P_3.getValueOrDefault(se907.modify(inventory_locn)))));
          e238 = e238->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_223 += agg223;
      DOUBLE_TYPE agg224 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e239 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e239) {
          long inventory_locn = e239->INVENTORY_LOCN;
          long inventory_dateid = e239->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e239->INVENTORY_KSN;
          long v239 = e239->__av;
          agg224 += (v239 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se909.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se910.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_224INVENTORY1_P_3.getValueOrDefault(se911.modify(inventory_locn)))));
          e239 = e239->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_224 += agg224;
      DOUBLE_TYPE agg225 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e240 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e240) {
          long inventory_locn = e240->INVENTORY_LOCN;
          long inventory_dateid = e240->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e240->INVENTORY_KSN;
          long v240 = e240->__av;
          agg225 += (v240 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se913.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se914.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_225INVENTORY1_P_3.getValueOrDefault(se915.modify(inventory_locn)))));
          e240 = e240->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_225 += agg225;
      DOUBLE_TYPE agg226 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e241 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e241) {
          long inventory_locn = e241->INVENTORY_LOCN;
          long inventory_dateid = e241->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e241->INVENTORY_KSN;
          long v241 = e241->__av;
          agg226 += (v241 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se917.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se918.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_226INVENTORY1_P_3.getValueOrDefault(se919.modify(inventory_locn)))));
          e241 = e241->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_226 += agg226;
      DOUBLE_TYPE agg227 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e242 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e242) {
          long inventory_locn = e242->INVENTORY_LOCN;
          long inventory_dateid = e242->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e242->INVENTORY_KSN;
          long v242 = e242->__av;
          agg227 += (v242 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se921.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se922.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_227INVENTORY1_P_3.getValueOrDefault(se923.modify(inventory_locn)))));
          e242 = e242->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_227 += agg227;
      DOUBLE_TYPE agg228 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e243 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e243) {
          long inventory_locn = e243->INVENTORY_LOCN;
          long inventory_dateid = e243->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e243->INVENTORY_KSN;
          long v243 = e243->__av;
          agg228 += (v243 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se925.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se926.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_228INVENTORY1_P_3.getValueOrDefault(se927.modify(inventory_locn)))));
          e243 = e243->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_228 += agg228;
      DOUBLE_TYPE agg229 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e244 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e244) {
          long inventory_locn = e244->INVENTORY_LOCN;
          long inventory_dateid = e244->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e244->INVENTORY_KSN;
          long v244 = e244->__av;
          agg229 += (v244 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se929.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se930.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_229INVENTORY1_P_3.getValueOrDefault(se931.modify(inventory_locn)))));
          e244 = e244->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_229 += agg229;
      DOUBLE_TYPE agg230 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e245 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e245) {
          long inventory_locn = e245->INVENTORY_LOCN;
          long inventory_dateid = e245->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e245->INVENTORY_KSN;
          long v245 = e245->__av;
          agg230 += (v245 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se933.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se934.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_230INVENTORY1_P_3.getValueOrDefault(se935.modify(inventory_locn)))));
          e245 = e245->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_230 += agg230;
      DOUBLE_TYPE agg231 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e246 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e246) {
          long inventory_locn = e246->INVENTORY_LOCN;
          long inventory_dateid = e246->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e246->INVENTORY_KSN;
          long v246 = e246->__av;
          agg231 += (v246 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se937.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se938.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_231INVENTORY1_P_3.getValueOrDefault(se939.modify(inventory_locn)))));
          e246 = e246->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_231 += agg231;
      DOUBLE_TYPE agg232 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e247 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e247) {
          long inventory_locn = e247->INVENTORY_LOCN;
          long inventory_dateid = e247->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e247->INVENTORY_KSN;
          long v247 = e247->__av;
          agg232 += (v247 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se941.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se942.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_232INVENTORY1_P_3.getValueOrDefault(se943.modify(inventory_locn)))));
          e247 = e247->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_232 += agg232;
      DOUBLE_TYPE agg233 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e248 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e248) {
          long inventory_locn = e248->INVENTORY_LOCN;
          long inventory_dateid = e248->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e248->INVENTORY_KSN;
          long v248 = e248->__av;
          agg233 += (v248 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se945.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se946.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_233INVENTORY1_P_3.getValueOrDefault(se947.modify(inventory_locn)))));
          e248 = e248->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_233 += agg233;
      DOUBLE_TYPE agg234 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e249 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e249) {
          long inventory_locn = e249->INVENTORY_LOCN;
          long inventory_dateid = e249->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e249->INVENTORY_KSN;
          long v249 = e249->__av;
          agg234 += (v249 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se949.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se950.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se951.modify(inventory_locn)))));
          e249 = e249->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_234 += agg234;
      DOUBLE_TYPE agg235 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e250 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e250) {
          long inventory_locn = e250->INVENTORY_LOCN;
          long inventory_dateid = e250->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e250->INVENTORY_KSN;
          long v250 = e250->__av;
          agg235 += (v250 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se953.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se954.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se955.modify(inventory_locn)))));
          e250 = e250->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_235 += agg235;
      DOUBLE_TYPE agg236 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e251 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e251) {
          long inventory_locn = e251->INVENTORY_LOCN;
          long inventory_dateid = e251->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e251->INVENTORY_KSN;
          long v251 = e251->__av;
          agg236 += (v251 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se957.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se958.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se959.modify(inventory_locn)))));
          e251 = e251->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_236 += agg236;
      DOUBLE_TYPE agg237 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e252 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e252) {
          long inventory_locn = e252->INVENTORY_LOCN;
          long inventory_dateid = e252->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e252->INVENTORY_KSN;
          long v252 = e252->__av;
          agg237 += (v252 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se961.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se962.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se963.modify(inventory_locn)))));
          e252 = e252->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_237 += agg237;
      DOUBLE_TYPE agg238 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e253 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e253) {
          long inventory_locn = e253->INVENTORY_LOCN;
          long inventory_dateid = e253->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e253->INVENTORY_KSN;
          long v253 = e253->__av;
          agg238 += (v253 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se965.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se966.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se967.modify(inventory_locn)))));
          e253 = e253->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_238 += agg238;
      DOUBLE_TYPE agg239 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e254 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e254) {
          long inventory_locn = e254->INVENTORY_LOCN;
          long inventory_dateid = e254->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e254->INVENTORY_KSN;
          long v254 = e254->__av;
          agg239 += (v254 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se969.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se970.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se971.modify(inventory_locn)))));
          e254 = e254->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_239 += agg239;
      DOUBLE_TYPE agg240 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e255 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e255) {
          long inventory_locn = e255->INVENTORY_LOCN;
          long inventory_dateid = e255->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e255->INVENTORY_KSN;
          long v255 = e255->__av;
          agg240 += (v255 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se973.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se974.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se975.modify(inventory_locn)))));
          e255 = e255->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_240 += agg240;
      DOUBLE_TYPE agg241 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e256 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e256) {
          long inventory_locn = e256->INVENTORY_LOCN;
          long inventory_dateid = e256->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e256->INVENTORY_KSN;
          long v256 = e256->__av;
          agg241 += (v256 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se977.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se978.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se979.modify(inventory_locn)))));
          e256 = e256->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_241 += agg241;
      DOUBLE_TYPE agg242 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e257 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e257) {
          long inventory_locn = e257->INVENTORY_LOCN;
          long inventory_dateid = e257->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e257->INVENTORY_KSN;
          long v257 = e257->__av;
          agg242 += (v257 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se981.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se982.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se983.modify(inventory_locn)))));
          e257 = e257->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_242 += agg242;
      DOUBLE_TYPE agg243 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e258 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e258) {
          long inventory_locn = e258->INVENTORY_LOCN;
          long inventory_dateid = e258->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e258->INVENTORY_KSN;
          long v258 = e258->__av;
          agg243 += (v258 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se985.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se986.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.getValueOrDefault(se987.modify(inventory_locn)))));
          e258 = e258->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_243 += agg243;
      DOUBLE_TYPE agg244 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e259 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e259) {
          long inventory_locn = e259->INVENTORY_LOCN;
          long inventory_dateid = e259->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e259->INVENTORY_KSN;
          long v259 = e259->__av;
          agg244 += (v259 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se989.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se990.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_244INVENTORY1_P_3.getValueOrDefault(se991.modify(inventory_locn)))));
          e259 = e259->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_244 += agg244;
      DOUBLE_TYPE agg245 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e260 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e260) {
          long inventory_locn = e260->INVENTORY_LOCN;
          long inventory_dateid = e260->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e260->INVENTORY_KSN;
          long v260 = e260->__av;
          agg245 += (v260 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se993.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se994.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_245INVENTORY1_P_3.getValueOrDefault(se995.modify(inventory_locn)))));
          e260 = e260->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_245 += agg245;
      DOUBLE_TYPE agg246 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e261 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e261) {
          long inventory_locn = e261->INVENTORY_LOCN;
          long inventory_dateid = e261->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e261->INVENTORY_KSN;
          long v261 = e261->__av;
          agg246 += (v261 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se997.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se998.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_246INVENTORY1_P_3.getValueOrDefault(se999.modify(inventory_locn)))));
          e261 = e261->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_246 += agg246;
      DOUBLE_TYPE agg247 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e262 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e262) {
          long inventory_locn = e262->INVENTORY_LOCN;
          long inventory_dateid = e262->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e262->INVENTORY_KSN;
          long v262 = e262->__av;
          agg247 += (v262 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1001.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1002.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_247INVENTORY1_P_3.getValueOrDefault(se1003.modify(inventory_locn)))));
          e262 = e262->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_247 += agg247;
      DOUBLE_TYPE agg248 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e263 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e263) {
          long inventory_locn = e263->INVENTORY_LOCN;
          long inventory_dateid = e263->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e263->INVENTORY_KSN;
          long v263 = e263->__av;
          agg248 += (v263 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1005.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1006.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_248INVENTORY1_P_3.getValueOrDefault(se1007.modify(inventory_locn)))));
          e263 = e263->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_248 += agg248;
      DOUBLE_TYPE agg249 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e264 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e264) {
          long inventory_locn = e264->INVENTORY_LOCN;
          long inventory_dateid = e264->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e264->INVENTORY_KSN;
          long v264 = e264->__av;
          agg249 += (v264 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1009.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1010.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_249INVENTORY1_P_3.getValueOrDefault(se1011.modify(inventory_locn)))));
          e264 = e264->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_249 += agg249;
      DOUBLE_TYPE agg250 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e265 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e265) {
          long inventory_locn = e265->INVENTORY_LOCN;
          long inventory_dateid = e265->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e265->INVENTORY_KSN;
          long v265 = e265->__av;
          agg250 += (v265 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1013.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1014.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_250INVENTORY1_P_3.getValueOrDefault(se1015.modify(inventory_locn)))));
          e265 = e265->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_250 += agg250;
      DOUBLE_TYPE agg251 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e266 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e266) {
          long inventory_locn = e266->INVENTORY_LOCN;
          long inventory_dateid = e266->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e266->INVENTORY_KSN;
          long v266 = e266->__av;
          agg251 += (v266 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1017.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1018.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_251INVENTORY1_P_3.getValueOrDefault(se1019.modify(inventory_locn)))));
          e266 = e266->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_251 += agg251;
      DOUBLE_TYPE agg252 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e267 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e267) {
          long inventory_locn = e267->INVENTORY_LOCN;
          long inventory_dateid = e267->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e267->INVENTORY_KSN;
          long v267 = e267->__av;
          agg252 += (v267 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1021.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1022.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_252INVENTORY1_P_3.getValueOrDefault(se1023.modify(inventory_locn)))));
          e267 = e267->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_252 += agg252;
      DOUBLE_TYPE agg253 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e268 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e268) {
          long inventory_locn = e268->INVENTORY_LOCN;
          long inventory_dateid = e268->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e268->INVENTORY_KSN;
          long v268 = e268->__av;
          agg253 += (v268 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1025.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1026.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_253INVENTORY1_P_3.getValueOrDefault(se1027.modify(inventory_locn)))));
          e268 = e268->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_253 += agg253;
      DOUBLE_TYPE agg254 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e269 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e269) {
          long inventory_locn = e269->INVENTORY_LOCN;
          long inventory_dateid = e269->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e269->INVENTORY_KSN;
          long v269 = e269->__av;
          agg254 += (v269 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1029.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1030.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_254INVENTORY1_P_3.getValueOrDefault(se1031.modify(inventory_locn)))));
          e269 = e269->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_254 += agg254;
      DOUBLE_TYPE agg255 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e270 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e270) {
          long inventory_locn = e270->INVENTORY_LOCN;
          long inventory_dateid = e270->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e270->INVENTORY_KSN;
          long v270 = e270->__av;
          agg255 += (v270 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1033.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1034.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_255INVENTORY1_P_3.getValueOrDefault(se1035.modify(inventory_locn)))));
          e270 = e270->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_255 += agg255;
      DOUBLE_TYPE agg256 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e271 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e271) {
          long inventory_locn = e271->INVENTORY_LOCN;
          long inventory_dateid = e271->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e271->INVENTORY_KSN;
          long v271 = e271->__av;
          agg256 += (v271 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1037.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1038.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_256INVENTORY1_P_3.getValueOrDefault(se1039.modify(inventory_locn)))));
          e271 = e271->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_256 += agg256;
      DOUBLE_TYPE agg257 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e272 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e272) {
          long inventory_locn = e272->INVENTORY_LOCN;
          long inventory_dateid = e272->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e272->INVENTORY_KSN;
          long v272 = e272->__av;
          agg257 += (v272 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1041.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1042.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_257INVENTORY1_P_3.getValueOrDefault(se1043.modify(inventory_locn)))));
          e272 = e272->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_257 += agg257;
      DOUBLE_TYPE agg258 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e273 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e273) {
          long inventory_locn = e273->INVENTORY_LOCN;
          long inventory_dateid = e273->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e273->INVENTORY_KSN;
          long v273 = e273->__av;
          agg258 += (v273 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1045.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1046.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_258INVENTORY1_P_3.getValueOrDefault(se1047.modify(inventory_locn)))));
          e273 = e273->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_258 += agg258;
      DOUBLE_TYPE agg259 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e274 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e274) {
          long inventory_locn = e274->INVENTORY_LOCN;
          long inventory_dateid = e274->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e274->INVENTORY_KSN;
          long v274 = e274->__av;
          agg259 += (v274 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1049.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1050.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_259INVENTORY1_P_3.getValueOrDefault(se1051.modify(inventory_locn)))));
          e274 = e274->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_259 += agg259;
      DOUBLE_TYPE agg260 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e275 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e275) {
          long inventory_locn = e275->INVENTORY_LOCN;
          long inventory_dateid = e275->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e275->INVENTORY_KSN;
          long v275 = e275->__av;
          agg260 += (v275 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1053.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1054.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_260INVENTORY1_P_3.getValueOrDefault(se1055.modify(inventory_locn)))));
          e275 = e275->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_260 += agg260;
      DOUBLE_TYPE agg261 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e276 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e276) {
          long inventory_locn = e276->INVENTORY_LOCN;
          long inventory_dateid = e276->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e276->INVENTORY_KSN;
          long v276 = e276->__av;
          agg261 += (v276 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1057.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1058.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_261INVENTORY1_P_3.getValueOrDefault(se1059.modify(inventory_locn)))));
          e276 = e276->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_261 += agg261;
      DOUBLE_TYPE agg262 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e277 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e277) {
          long inventory_locn = e277->INVENTORY_LOCN;
          long inventory_dateid = e277->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e277->INVENTORY_KSN;
          long v277 = e277->__av;
          agg262 += (v277 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1061.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1062.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_262INVENTORY1_P_3.getValueOrDefault(se1063.modify(inventory_locn)))));
          e277 = e277->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_262 += agg262;
      DOUBLE_TYPE agg263 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e278 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e278) {
          long inventory_locn = e278->INVENTORY_LOCN;
          long inventory_dateid = e278->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e278->INVENTORY_KSN;
          long v278 = e278->__av;
          agg263 += (v278 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1065.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1066.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_263INVENTORY1_P_3.getValueOrDefault(se1067.modify(inventory_locn)))));
          e278 = e278->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_263 += agg263;
      DOUBLE_TYPE agg264 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e279 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e279) {
          long inventory_locn = e279->INVENTORY_LOCN;
          long inventory_dateid = e279->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e279->INVENTORY_KSN;
          long v279 = e279->__av;
          agg264 += (v279 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1069.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1070.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_264INVENTORY1_P_3.getValueOrDefault(se1071.modify(inventory_locn)))));
          e279 = e279->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_264 += agg264;
      DOUBLE_TYPE agg265 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e280 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e280) {
          long inventory_locn = e280->INVENTORY_LOCN;
          long inventory_dateid = e280->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e280->INVENTORY_KSN;
          long v280 = e280->__av;
          agg265 += (v280 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1073.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1074.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_265INVENTORY1_P_3.getValueOrDefault(se1075.modify(inventory_locn)))));
          e280 = e280->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_265 += agg265;
      DOUBLE_TYPE agg266 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e281 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e281) {
          long inventory_locn = e281->INVENTORY_LOCN;
          long inventory_dateid = e281->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e281->INVENTORY_KSN;
          long v281 = e281->__av;
          agg266 += (v281 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1077.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1078.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_266INVENTORY1_P_3.getValueOrDefault(se1079.modify(inventory_locn)))));
          e281 = e281->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_266 += agg266;
      DOUBLE_TYPE agg267 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e282 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e282) {
          long inventory_locn = e282->INVENTORY_LOCN;
          long inventory_dateid = e282->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e282->INVENTORY_KSN;
          long v282 = e282->__av;
          agg267 += (v282 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1081.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1082.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_267INVENTORY1_P_3.getValueOrDefault(se1083.modify(inventory_locn)))));
          e282 = e282->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_267 += agg267;
      DOUBLE_TYPE agg268 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e283 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e283) {
          long inventory_locn = e283->INVENTORY_LOCN;
          long inventory_dateid = e283->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e283->INVENTORY_KSN;
          long v283 = e283->__av;
          agg268 += (v283 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1085.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1086.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_268INVENTORY1_P_3.getValueOrDefault(se1087.modify(inventory_locn)))));
          e283 = e283->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_268 += agg268;
      DOUBLE_TYPE agg269 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e284 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e284) {
          long inventory_locn = e284->INVENTORY_LOCN;
          long inventory_dateid = e284->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e284->INVENTORY_KSN;
          long v284 = e284->__av;
          agg269 += (v284 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1089.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1090.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_269INVENTORY1_P_3.getValueOrDefault(se1091.modify(inventory_locn)))));
          e284 = e284->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_269 += agg269;
      DOUBLE_TYPE agg270 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e285 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e285) {
          long inventory_locn = e285->INVENTORY_LOCN;
          long inventory_dateid = e285->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e285->INVENTORY_KSN;
          long v285 = e285->__av;
          agg270 += (v285 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1093.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1094.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_270INVENTORY1_P_3.getValueOrDefault(se1095.modify(inventory_locn)))));
          e285 = e285->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_270 += agg270;
      DOUBLE_TYPE agg271 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e286 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e286) {
          long inventory_locn = e286->INVENTORY_LOCN;
          long inventory_dateid = e286->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e286->INVENTORY_KSN;
          long v286 = e286->__av;
          agg271 += (v286 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1097.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1098.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1099.modify(inventory_locn)))));
          e286 = e286->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_271 += agg271;
      DOUBLE_TYPE agg272 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e287 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e287) {
          long inventory_locn = e287->INVENTORY_LOCN;
          long inventory_dateid = e287->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e287->INVENTORY_KSN;
          long v287 = e287->__av;
          agg272 += (v287 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1101.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1102.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1103.modify(inventory_locn)))));
          e287 = e287->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_272 += agg272;
      DOUBLE_TYPE agg273 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e288 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e288) {
          long inventory_locn = e288->INVENTORY_LOCN;
          long inventory_dateid = e288->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e288->INVENTORY_KSN;
          long v288 = e288->__av;
          agg273 += (v288 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1105.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1106.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1107.modify(inventory_locn)))));
          e288 = e288->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_273 += agg273;
      DOUBLE_TYPE agg274 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e289 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e289) {
          long inventory_locn = e289->INVENTORY_LOCN;
          long inventory_dateid = e289->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e289->INVENTORY_KSN;
          long v289 = e289->__av;
          agg274 += (v289 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1109.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1110.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1111.modify(inventory_locn)))));
          e289 = e289->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_274 += agg274;
      DOUBLE_TYPE agg275 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e290 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e290) {
          long inventory_locn = e290->INVENTORY_LOCN;
          long inventory_dateid = e290->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e290->INVENTORY_KSN;
          long v290 = e290->__av;
          agg275 += (v290 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1113.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1114.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1115.modify(inventory_locn)))));
          e290 = e290->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_275 += agg275;
      DOUBLE_TYPE agg276 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e291 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e291) {
          long inventory_locn = e291->INVENTORY_LOCN;
          long inventory_dateid = e291->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e291->INVENTORY_KSN;
          long v291 = e291->__av;
          agg276 += (v291 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1117.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1118.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1119.modify(inventory_locn)))));
          e291 = e291->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_276 += agg276;
      DOUBLE_TYPE agg277 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e292 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e292) {
          long inventory_locn = e292->INVENTORY_LOCN;
          long inventory_dateid = e292->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e292->INVENTORY_KSN;
          long v292 = e292->__av;
          agg277 += (v292 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1121.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1122.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1123.modify(inventory_locn)))));
          e292 = e292->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_277 += agg277;
      DOUBLE_TYPE agg278 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e293 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e293) {
          long inventory_locn = e293->INVENTORY_LOCN;
          long inventory_dateid = e293->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e293->INVENTORY_KSN;
          long v293 = e293->__av;
          agg278 += (v293 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1125.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1126.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1127.modify(inventory_locn)))));
          e293 = e293->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_278 += agg278;
      DOUBLE_TYPE agg279 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e294 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e294) {
          long inventory_locn = e294->INVENTORY_LOCN;
          long inventory_dateid = e294->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e294->INVENTORY_KSN;
          long v294 = e294->__av;
          agg279 += (v294 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1129.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1130.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1131.modify(inventory_locn)))));
          e294 = e294->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_279 += agg279;
      DOUBLE_TYPE agg280 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e295 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e295) {
          long inventory_locn = e295->INVENTORY_LOCN;
          long inventory_dateid = e295->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e295->INVENTORY_KSN;
          long v295 = e295->__av;
          agg280 += (v295 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1133.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1134.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.getValueOrDefault(se1135.modify(inventory_locn)))));
          e295 = e295->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_280 += agg280;
      DOUBLE_TYPE agg281 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e296 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e296) {
          long inventory_locn = e296->INVENTORY_LOCN;
          long inventory_dateid = e296->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e296->INVENTORY_KSN;
          long v296 = e296->__av;
          agg281 += (v296 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1137.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1138.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_281INVENTORY1_P_3.getValueOrDefault(se1139.modify(inventory_locn)))));
          e296 = e296->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_281 += agg281;
      DOUBLE_TYPE agg282 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e297 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e297) {
          long inventory_locn = e297->INVENTORY_LOCN;
          long inventory_dateid = e297->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e297->INVENTORY_KSN;
          long v297 = e297->__av;
          agg282 += (v297 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1141.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1142.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_282INVENTORY1_P_3.getValueOrDefault(se1143.modify(inventory_locn)))));
          e297 = e297->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_282 += agg282;
      DOUBLE_TYPE agg283 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e298 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e298) {
          long inventory_locn = e298->INVENTORY_LOCN;
          long inventory_dateid = e298->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e298->INVENTORY_KSN;
          long v298 = e298->__av;
          agg283 += (v298 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1145.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1146.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_283INVENTORY1_P_3.getValueOrDefault(se1147.modify(inventory_locn)))));
          e298 = e298->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_283 += agg283;
      DOUBLE_TYPE agg284 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e299 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e299) {
          long inventory_locn = e299->INVENTORY_LOCN;
          long inventory_dateid = e299->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e299->INVENTORY_KSN;
          long v299 = e299->__av;
          agg284 += (v299 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1149.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1150.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_284INVENTORY1_P_3.getValueOrDefault(se1151.modify(inventory_locn)))));
          e299 = e299->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_284 += agg284;
      DOUBLE_TYPE agg285 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e300 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e300) {
          long inventory_locn = e300->INVENTORY_LOCN;
          long inventory_dateid = e300->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e300->INVENTORY_KSN;
          long v300 = e300->__av;
          agg285 += (v300 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1153.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1154.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_285INVENTORY1_P_3.getValueOrDefault(se1155.modify(inventory_locn)))));
          e300 = e300->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_285 += agg285;
      DOUBLE_TYPE agg286 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e301 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e301) {
          long inventory_locn = e301->INVENTORY_LOCN;
          long inventory_dateid = e301->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e301->INVENTORY_KSN;
          long v301 = e301->__av;
          agg286 += (v301 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1157.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1158.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_286INVENTORY1_P_3.getValueOrDefault(se1159.modify(inventory_locn)))));
          e301 = e301->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_286 += agg286;
      DOUBLE_TYPE agg287 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e302 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e302) {
          long inventory_locn = e302->INVENTORY_LOCN;
          long inventory_dateid = e302->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e302->INVENTORY_KSN;
          long v302 = e302->__av;
          agg287 += (v302 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1161.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1162.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_287INVENTORY1_P_3.getValueOrDefault(se1163.modify(inventory_locn)))));
          e302 = e302->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_287 += agg287;
      DOUBLE_TYPE agg288 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e303 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e303) {
          long inventory_locn = e303->INVENTORY_LOCN;
          long inventory_dateid = e303->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e303->INVENTORY_KSN;
          long v303 = e303->__av;
          agg288 += (v303 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1165.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1166.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_288INVENTORY1_P_3.getValueOrDefault(se1167.modify(inventory_locn)))));
          e303 = e303->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_288 += agg288;
      DOUBLE_TYPE agg289 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e304 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e304) {
          long inventory_locn = e304->INVENTORY_LOCN;
          long inventory_dateid = e304->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e304->INVENTORY_KSN;
          long v304 = e304->__av;
          agg289 += (v304 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1169.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1170.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_289INVENTORY1_P_3.getValueOrDefault(se1171.modify(inventory_locn)))));
          e304 = e304->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_289 += agg289;
      DOUBLE_TYPE agg290 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e305 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e305) {
          long inventory_locn = e305->INVENTORY_LOCN;
          long inventory_dateid = e305->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e305->INVENTORY_KSN;
          long v305 = e305->__av;
          agg290 += (v305 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1173.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1174.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_290INVENTORY1_P_3.getValueOrDefault(se1175.modify(inventory_locn)))));
          e305 = e305->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_290 += agg290;
      DOUBLE_TYPE agg291 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e306 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e306) {
          long inventory_locn = e306->INVENTORY_LOCN;
          long inventory_dateid = e306->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e306->INVENTORY_KSN;
          long v306 = e306->__av;
          agg291 += (v306 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1177.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1178.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_291INVENTORY1_P_3.getValueOrDefault(se1179.modify(inventory_locn)))));
          e306 = e306->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_291 += agg291;
      DOUBLE_TYPE agg292 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e307 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e307) {
          long inventory_locn = e307->INVENTORY_LOCN;
          long inventory_dateid = e307->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e307->INVENTORY_KSN;
          long v307 = e307->__av;
          agg292 += (v307 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1181.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1182.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_292INVENTORY1_P_3.getValueOrDefault(se1183.modify(inventory_locn)))));
          e307 = e307->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_292 += agg292;
      DOUBLE_TYPE agg293 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e308 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e308) {
          long inventory_locn = e308->INVENTORY_LOCN;
          long inventory_dateid = e308->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e308->INVENTORY_KSN;
          long v308 = e308->__av;
          agg293 += (v308 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1185.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1186.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_293INVENTORY1_P_3.getValueOrDefault(se1187.modify(inventory_locn)))));
          e308 = e308->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_293 += agg293;
      DOUBLE_TYPE agg294 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e309 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e309) {
          long inventory_locn = e309->INVENTORY_LOCN;
          long inventory_dateid = e309->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e309->INVENTORY_KSN;
          long v309 = e309->__av;
          agg294 += (v309 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1189.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1190.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_294INVENTORY1_P_3.getValueOrDefault(se1191.modify(inventory_locn)))));
          e309 = e309->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_294 += agg294;
      DOUBLE_TYPE agg295 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e310 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e310) {
          long inventory_locn = e310->INVENTORY_LOCN;
          long inventory_dateid = e310->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e310->INVENTORY_KSN;
          long v310 = e310->__av;
          agg295 += (v310 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1193.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1194.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_295INVENTORY1_P_3.getValueOrDefault(se1195.modify(inventory_locn)))));
          e310 = e310->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_295 += agg295;
      DOUBLE_TYPE agg296 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e311 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e311) {
          long inventory_locn = e311->INVENTORY_LOCN;
          long inventory_dateid = e311->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e311->INVENTORY_KSN;
          long v311 = e311->__av;
          agg296 += (v311 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1197.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1198.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_296INVENTORY1_P_3.getValueOrDefault(se1199.modify(inventory_locn)))));
          e311 = e311->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_296 += agg296;
      DOUBLE_TYPE agg297 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e312 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e312) {
          long inventory_locn = e312->INVENTORY_LOCN;
          long inventory_dateid = e312->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e312->INVENTORY_KSN;
          long v312 = e312->__av;
          agg297 += (v312 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1201.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1202.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_297INVENTORY1_P_3.getValueOrDefault(se1203.modify(inventory_locn)))));
          e312 = e312->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_297 += agg297;
      DOUBLE_TYPE agg298 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e313 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e313) {
          long inventory_locn = e313->INVENTORY_LOCN;
          long inventory_dateid = e313->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e313->INVENTORY_KSN;
          long v313 = e313->__av;
          agg298 += (v313 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1205.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1206.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_298INVENTORY1_P_3.getValueOrDefault(se1207.modify(inventory_locn)))));
          e313 = e313->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_298 += agg298;
      DOUBLE_TYPE agg299 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e314 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e314) {
          long inventory_locn = e314->INVENTORY_LOCN;
          long inventory_dateid = e314->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e314->INVENTORY_KSN;
          long v314 = e314->__av;
          agg299 += (v314 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1209.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1210.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_299INVENTORY1_P_3.getValueOrDefault(se1211.modify(inventory_locn)))));
          e314 = e314->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_299 += agg299;
      DOUBLE_TYPE agg300 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e315 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e315) {
          long inventory_locn = e315->INVENTORY_LOCN;
          long inventory_dateid = e315->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e315->INVENTORY_KSN;
          long v315 = e315->__av;
          agg300 += (v315 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1213.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1214.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_300INVENTORY1_P_3.getValueOrDefault(se1215.modify(inventory_locn)))));
          e315 = e315->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_300 += agg300;
      DOUBLE_TYPE agg301 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e316 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e316) {
          long inventory_locn = e316->INVENTORY_LOCN;
          long inventory_dateid = e316->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e316->INVENTORY_KSN;
          long v316 = e316->__av;
          agg301 += (v316 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1217.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1218.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_301INVENTORY1_P_3.getValueOrDefault(se1219.modify(inventory_locn)))));
          e316 = e316->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_301 += agg301;
      DOUBLE_TYPE agg302 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e317 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e317) {
          long inventory_locn = e317->INVENTORY_LOCN;
          long inventory_dateid = e317->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e317->INVENTORY_KSN;
          long v317 = e317->__av;
          agg302 += (v317 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1221.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1222.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_302INVENTORY1_P_3.getValueOrDefault(se1223.modify(inventory_locn)))));
          e317 = e317->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_302 += agg302;
      DOUBLE_TYPE agg303 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e318 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e318) {
          long inventory_locn = e318->INVENTORY_LOCN;
          long inventory_dateid = e318->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e318->INVENTORY_KSN;
          long v318 = e318->__av;
          agg303 += (v318 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1225.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1226.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_303INVENTORY1_P_3.getValueOrDefault(se1227.modify(inventory_locn)))));
          e318 = e318->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_303 += agg303;
      DOUBLE_TYPE agg304 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e319 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e319) {
          long inventory_locn = e319->INVENTORY_LOCN;
          long inventory_dateid = e319->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e319->INVENTORY_KSN;
          long v319 = e319->__av;
          agg304 += (v319 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1229.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1230.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_304INVENTORY1_P_3.getValueOrDefault(se1231.modify(inventory_locn)))));
          e319 = e319->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_304 += agg304;
      DOUBLE_TYPE agg305 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e320 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e320) {
          long inventory_locn = e320->INVENTORY_LOCN;
          long inventory_dateid = e320->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e320->INVENTORY_KSN;
          long v320 = e320->__av;
          agg305 += (v320 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1233.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1234.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_305INVENTORY1_P_3.getValueOrDefault(se1235.modify(inventory_locn)))));
          e320 = e320->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_305 += agg305;
      DOUBLE_TYPE agg306 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e321 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e321) {
          long inventory_locn = e321->INVENTORY_LOCN;
          long inventory_dateid = e321->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e321->INVENTORY_KSN;
          long v321 = e321->__av;
          agg306 += (v321 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1237.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1238.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_306INVENTORY1_P_3.getValueOrDefault(se1239.modify(inventory_locn)))));
          e321 = e321->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_306 += agg306;
      DOUBLE_TYPE agg307 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e322 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e322) {
          long inventory_locn = e322->INVENTORY_LOCN;
          long inventory_dateid = e322->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e322->INVENTORY_KSN;
          long v322 = e322->__av;
          agg307 += (v322 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1241.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1242.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1243.modify(inventory_locn)))));
          e322 = e322->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_307 += agg307;
      DOUBLE_TYPE agg308 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e323 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e323) {
          long inventory_locn = e323->INVENTORY_LOCN;
          long inventory_dateid = e323->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e323->INVENTORY_KSN;
          long v323 = e323->__av;
          agg308 += (v323 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1245.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1246.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1247.modify(inventory_locn)))));
          e323 = e323->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_308 += agg308;
      DOUBLE_TYPE agg309 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e324 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e324) {
          long inventory_locn = e324->INVENTORY_LOCN;
          long inventory_dateid = e324->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e324->INVENTORY_KSN;
          long v324 = e324->__av;
          agg309 += (v324 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1249.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1250.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1251.modify(inventory_locn)))));
          e324 = e324->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_309 += agg309;
      DOUBLE_TYPE agg310 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e325 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e325) {
          long inventory_locn = e325->INVENTORY_LOCN;
          long inventory_dateid = e325->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e325->INVENTORY_KSN;
          long v325 = e325->__av;
          agg310 += (v325 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1253.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1254.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1255.modify(inventory_locn)))));
          e325 = e325->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_310 += agg310;
      DOUBLE_TYPE agg311 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e326 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e326) {
          long inventory_locn = e326->INVENTORY_LOCN;
          long inventory_dateid = e326->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e326->INVENTORY_KSN;
          long v326 = e326->__av;
          agg311 += (v326 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1257.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1258.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1259.modify(inventory_locn)))));
          e326 = e326->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_311 += agg311;
      DOUBLE_TYPE agg312 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e327 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e327) {
          long inventory_locn = e327->INVENTORY_LOCN;
          long inventory_dateid = e327->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e327->INVENTORY_KSN;
          long v327 = e327->__av;
          agg312 += (v327 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1261.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1262.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1263.modify(inventory_locn)))));
          e327 = e327->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_312 += agg312;
      DOUBLE_TYPE agg313 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e328 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e328) {
          long inventory_locn = e328->INVENTORY_LOCN;
          long inventory_dateid = e328->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e328->INVENTORY_KSN;
          long v328 = e328->__av;
          agg313 += (v328 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1265.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1266.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1267.modify(inventory_locn)))));
          e328 = e328->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_313 += agg313;
      DOUBLE_TYPE agg314 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e329 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e329) {
          long inventory_locn = e329->INVENTORY_LOCN;
          long inventory_dateid = e329->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e329->INVENTORY_KSN;
          long v329 = e329->__av;
          agg314 += (v329 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1269.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1270.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1271.modify(inventory_locn)))));
          e329 = e329->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_314 += agg314;
      DOUBLE_TYPE agg315 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e330 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e330) {
          long inventory_locn = e330->INVENTORY_LOCN;
          long inventory_dateid = e330->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e330->INVENTORY_KSN;
          long v330 = e330->__av;
          agg315 += (v330 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1273.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1274.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1275.modify(inventory_locn)))));
          e330 = e330->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_315 += agg315;
      DOUBLE_TYPE agg316 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e331 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e331) {
          long inventory_locn = e331->INVENTORY_LOCN;
          long inventory_dateid = e331->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e331->INVENTORY_KSN;
          long v331 = e331->__av;
          agg316 += (v331 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1277.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1278.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.getValueOrDefault(se1279.modify(inventory_locn)))));
          e331 = e331->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_316 += agg316;
      DOUBLE_TYPE agg317 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e332 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e332) {
          long inventory_locn = e332->INVENTORY_LOCN;
          long inventory_dateid = e332->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e332->INVENTORY_KSN;
          long v332 = e332->__av;
          agg317 += (v332 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1281.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1282.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_317INVENTORY1_P_3.getValueOrDefault(se1283.modify(inventory_locn)))));
          e332 = e332->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_317 += agg317;
      DOUBLE_TYPE agg318 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e333 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e333) {
          long inventory_locn = e333->INVENTORY_LOCN;
          long inventory_dateid = e333->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e333->INVENTORY_KSN;
          long v333 = e333->__av;
          agg318 += (v333 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1285.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1286.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_318INVENTORY1_P_3.getValueOrDefault(se1287.modify(inventory_locn)))));
          e333 = e333->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_318 += agg318;
      DOUBLE_TYPE agg319 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e334 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e334) {
          long inventory_locn = e334->INVENTORY_LOCN;
          long inventory_dateid = e334->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e334->INVENTORY_KSN;
          long v334 = e334->__av;
          agg319 += (v334 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1289.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1290.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_319INVENTORY1_P_3.getValueOrDefault(se1291.modify(inventory_locn)))));
          e334 = e334->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_319 += agg319;
      DOUBLE_TYPE agg320 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e335 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e335) {
          long inventory_locn = e335->INVENTORY_LOCN;
          long inventory_dateid = e335->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e335->INVENTORY_KSN;
          long v335 = e335->__av;
          agg320 += (v335 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1293.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1294.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_320INVENTORY1_P_3.getValueOrDefault(se1295.modify(inventory_locn)))));
          e335 = e335->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_320 += agg320;
      DOUBLE_TYPE agg321 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e336 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e336) {
          long inventory_locn = e336->INVENTORY_LOCN;
          long inventory_dateid = e336->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e336->INVENTORY_KSN;
          long v336 = e336->__av;
          agg321 += (v336 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1297.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1298.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_321INVENTORY1_P_3.getValueOrDefault(se1299.modify(inventory_locn)))));
          e336 = e336->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_321 += agg321;
      DOUBLE_TYPE agg322 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e337 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e337) {
          long inventory_locn = e337->INVENTORY_LOCN;
          long inventory_dateid = e337->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e337->INVENTORY_KSN;
          long v337 = e337->__av;
          agg322 += (v337 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1301.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1302.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_322INVENTORY1_P_3.getValueOrDefault(se1303.modify(inventory_locn)))));
          e337 = e337->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_322 += agg322;
      DOUBLE_TYPE agg323 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e338 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e338) {
          long inventory_locn = e338->INVENTORY_LOCN;
          long inventory_dateid = e338->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e338->INVENTORY_KSN;
          long v338 = e338->__av;
          agg323 += (v338 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1305.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1306.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_323INVENTORY1_P_3.getValueOrDefault(se1307.modify(inventory_locn)))));
          e338 = e338->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_323 += agg323;
      DOUBLE_TYPE agg324 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e339 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e339) {
          long inventory_locn = e339->INVENTORY_LOCN;
          long inventory_dateid = e339->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e339->INVENTORY_KSN;
          long v339 = e339->__av;
          agg324 += (v339 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1309.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1310.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_324INVENTORY1_P_3.getValueOrDefault(se1311.modify(inventory_locn)))));
          e339 = e339->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_324 += agg324;
      DOUBLE_TYPE agg325 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e340 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e340) {
          long inventory_locn = e340->INVENTORY_LOCN;
          long inventory_dateid = e340->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e340->INVENTORY_KSN;
          long v340 = e340->__av;
          agg325 += (v340 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1313.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1314.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_325INVENTORY1_P_3.getValueOrDefault(se1315.modify(inventory_locn)))));
          e340 = e340->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_325 += agg325;
      DOUBLE_TYPE agg326 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e341 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e341) {
          long inventory_locn = e341->INVENTORY_LOCN;
          long inventory_dateid = e341->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e341->INVENTORY_KSN;
          long v341 = e341->__av;
          agg326 += (v341 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1317.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1318.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_326INVENTORY1_P_3.getValueOrDefault(se1319.modify(inventory_locn)))));
          e341 = e341->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_326 += agg326;
      DOUBLE_TYPE agg327 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e342 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e342) {
          long inventory_locn = e342->INVENTORY_LOCN;
          long inventory_dateid = e342->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e342->INVENTORY_KSN;
          long v342 = e342->__av;
          agg327 += (v342 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1321.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1322.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_327INVENTORY1_P_3.getValueOrDefault(se1323.modify(inventory_locn)))));
          e342 = e342->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_327 += agg327;
      DOUBLE_TYPE agg328 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e343 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e343) {
          long inventory_locn = e343->INVENTORY_LOCN;
          long inventory_dateid = e343->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e343->INVENTORY_KSN;
          long v343 = e343->__av;
          agg328 += (v343 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1325.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1326.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_328INVENTORY1_P_3.getValueOrDefault(se1327.modify(inventory_locn)))));
          e343 = e343->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_328 += agg328;
      DOUBLE_TYPE agg329 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e344 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e344) {
          long inventory_locn = e344->INVENTORY_LOCN;
          long inventory_dateid = e344->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e344->INVENTORY_KSN;
          long v344 = e344->__av;
          agg329 += (v344 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1329.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1330.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_329INVENTORY1_P_3.getValueOrDefault(se1331.modify(inventory_locn)))));
          e344 = e344->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_329 += agg329;
      DOUBLE_TYPE agg330 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e345 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e345) {
          long inventory_locn = e345->INVENTORY_LOCN;
          long inventory_dateid = e345->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e345->INVENTORY_KSN;
          long v345 = e345->__av;
          agg330 += (v345 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1333.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1334.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_330INVENTORY1_P_3.getValueOrDefault(se1335.modify(inventory_locn)))));
          e345 = e345->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_330 += agg330;
      DOUBLE_TYPE agg331 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e346 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e346) {
          long inventory_locn = e346->INVENTORY_LOCN;
          long inventory_dateid = e346->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e346->INVENTORY_KSN;
          long v346 = e346->__av;
          agg331 += (v346 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1337.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1338.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_331INVENTORY1_P_3.getValueOrDefault(se1339.modify(inventory_locn)))));
          e346 = e346->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_331 += agg331;
      DOUBLE_TYPE agg332 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e347 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e347) {
          long inventory_locn = e347->INVENTORY_LOCN;
          long inventory_dateid = e347->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e347->INVENTORY_KSN;
          long v347 = e347->__av;
          agg332 += (v347 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1341.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1342.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_332INVENTORY1_P_3.getValueOrDefault(se1343.modify(inventory_locn)))));
          e347 = e347->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_332 += agg332;
      DOUBLE_TYPE agg333 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e348 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e348) {
          long inventory_locn = e348->INVENTORY_LOCN;
          long inventory_dateid = e348->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e348->INVENTORY_KSN;
          long v348 = e348->__av;
          agg333 += (v348 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1345.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1346.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_333INVENTORY1_P_3.getValueOrDefault(se1347.modify(inventory_locn)))));
          e348 = e348->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_333 += agg333;
      DOUBLE_TYPE agg334 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e349 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e349) {
          long inventory_locn = e349->INVENTORY_LOCN;
          long inventory_dateid = e349->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e349->INVENTORY_KSN;
          long v349 = e349->__av;
          agg334 += (v349 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1349.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1350.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_334INVENTORY1_P_3.getValueOrDefault(se1351.modify(inventory_locn)))));
          e349 = e349->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_334 += agg334;
      DOUBLE_TYPE agg335 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e350 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e350) {
          long inventory_locn = e350->INVENTORY_LOCN;
          long inventory_dateid = e350->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e350->INVENTORY_KSN;
          long v350 = e350->__av;
          agg335 += (v350 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1353.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1354.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_335INVENTORY1_P_3.getValueOrDefault(se1355.modify(inventory_locn)))));
          e350 = e350->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_335 += agg335;
      DOUBLE_TYPE agg336 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e351 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e351) {
          long inventory_locn = e351->INVENTORY_LOCN;
          long inventory_dateid = e351->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e351->INVENTORY_KSN;
          long v351 = e351->__av;
          agg336 += (v351 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1357.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1358.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_336INVENTORY1_P_3.getValueOrDefault(se1359.modify(inventory_locn)))));
          e351 = e351->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_336 += agg336;
      DOUBLE_TYPE agg337 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e352 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e352) {
          long inventory_locn = e352->INVENTORY_LOCN;
          long inventory_dateid = e352->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e352->INVENTORY_KSN;
          long v352 = e352->__av;
          agg337 += (v352 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1361.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1362.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_337INVENTORY1_P_3.getValueOrDefault(se1363.modify(inventory_locn)))));
          e352 = e352->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_337 += agg337;
      DOUBLE_TYPE agg338 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e353 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e353) {
          long inventory_locn = e353->INVENTORY_LOCN;
          long inventory_dateid = e353->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e353->INVENTORY_KSN;
          long v353 = e353->__av;
          agg338 += (v353 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1365.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1366.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_338INVENTORY1_P_3.getValueOrDefault(se1367.modify(inventory_locn)))));
          e353 = e353->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_338 += agg338;
      DOUBLE_TYPE agg339 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e354 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e354) {
          long inventory_locn = e354->INVENTORY_LOCN;
          long inventory_dateid = e354->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e354->INVENTORY_KSN;
          long v354 = e354->__av;
          agg339 += (v354 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1369.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1370.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_339INVENTORY1_P_3.getValueOrDefault(se1371.modify(inventory_locn)))));
          e354 = e354->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_339 += agg339;
      DOUBLE_TYPE agg340 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e355 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e355) {
          long inventory_locn = e355->INVENTORY_LOCN;
          long inventory_dateid = e355->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e355->INVENTORY_KSN;
          long v355 = e355->__av;
          agg340 += (v355 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1373.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1374.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_340INVENTORY1_P_3.getValueOrDefault(se1375.modify(inventory_locn)))));
          e355 = e355->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_340 += agg340;
      DOUBLE_TYPE agg341 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e356 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e356) {
          long inventory_locn = e356->INVENTORY_LOCN;
          long inventory_dateid = e356->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e356->INVENTORY_KSN;
          long v356 = e356->__av;
          agg341 += (v356 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1377.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1378.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_341INVENTORY1_P_3.getValueOrDefault(se1379.modify(inventory_locn)))));
          e356 = e356->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_341 += agg341;
      DOUBLE_TYPE agg342 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e357 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e357) {
          long inventory_locn = e357->INVENTORY_LOCN;
          long inventory_dateid = e357->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e357->INVENTORY_KSN;
          long v357 = e357->__av;
          agg342 += (v357 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1381.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1382.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1383.modify(inventory_locn)))));
          e357 = e357->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_342 += agg342;
      DOUBLE_TYPE agg343 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e358 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e358) {
          long inventory_locn = e358->INVENTORY_LOCN;
          long inventory_dateid = e358->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e358->INVENTORY_KSN;
          long v358 = e358->__av;
          agg343 += (v358 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1385.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1386.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1387.modify(inventory_locn)))));
          e358 = e358->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_343 += agg343;
      DOUBLE_TYPE agg344 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e359 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e359) {
          long inventory_locn = e359->INVENTORY_LOCN;
          long inventory_dateid = e359->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e359->INVENTORY_KSN;
          long v359 = e359->__av;
          agg344 += (v359 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1389.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1390.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1391.modify(inventory_locn)))));
          e359 = e359->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_344 += agg344;
      DOUBLE_TYPE agg345 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e360 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e360) {
          long inventory_locn = e360->INVENTORY_LOCN;
          long inventory_dateid = e360->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e360->INVENTORY_KSN;
          long v360 = e360->__av;
          agg345 += (v360 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1393.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1394.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1395.modify(inventory_locn)))));
          e360 = e360->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_345 += agg345;
      DOUBLE_TYPE agg346 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e361 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e361) {
          long inventory_locn = e361->INVENTORY_LOCN;
          long inventory_dateid = e361->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e361->INVENTORY_KSN;
          long v361 = e361->__av;
          agg346 += (v361 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1397.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1398.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1399.modify(inventory_locn)))));
          e361 = e361->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_346 += agg346;
      DOUBLE_TYPE agg347 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e362 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e362) {
          long inventory_locn = e362->INVENTORY_LOCN;
          long inventory_dateid = e362->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e362->INVENTORY_KSN;
          long v362 = e362->__av;
          agg347 += (v362 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1401.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1402.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1403.modify(inventory_locn)))));
          e362 = e362->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_347 += agg347;
      DOUBLE_TYPE agg348 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e363 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e363) {
          long inventory_locn = e363->INVENTORY_LOCN;
          long inventory_dateid = e363->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e363->INVENTORY_KSN;
          long v363 = e363->__av;
          agg348 += (v363 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1405.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1406.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1407.modify(inventory_locn)))));
          e363 = e363->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_348 += agg348;
      DOUBLE_TYPE agg349 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e364 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e364) {
          long inventory_locn = e364->INVENTORY_LOCN;
          long inventory_dateid = e364->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e364->INVENTORY_KSN;
          long v364 = e364->__av;
          agg349 += (v364 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1409.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1410.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1411.modify(inventory_locn)))));
          e364 = e364->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_349 += agg349;
      DOUBLE_TYPE agg350 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e365 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e365) {
          long inventory_locn = e365->INVENTORY_LOCN;
          long inventory_dateid = e365->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e365->INVENTORY_KSN;
          long v365 = e365->__av;
          agg350 += (v365 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1413.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1414.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1415.modify(inventory_locn)))));
          e365 = e365->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_350 += agg350;
      DOUBLE_TYPE agg351 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e366 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e366) {
          long inventory_locn = e366->INVENTORY_LOCN;
          long inventory_dateid = e366->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e366->INVENTORY_KSN;
          long v366 = e366->__av;
          agg351 += (v366 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1417.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1418.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.getValueOrDefault(se1419.modify(inventory_locn)))));
          e366 = e366->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_351 += agg351;
      DOUBLE_TYPE agg352 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e367 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e367) {
          long inventory_locn = e367->INVENTORY_LOCN;
          long inventory_dateid = e367->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e367->INVENTORY_KSN;
          long v367 = e367->__av;
          agg352 += (v367 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1421.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1422.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_352INVENTORY1_P_3.getValueOrDefault(se1423.modify(inventory_locn)))));
          e367 = e367->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_352 += agg352;
      DOUBLE_TYPE agg353 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e368 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e368) {
          long inventory_locn = e368->INVENTORY_LOCN;
          long inventory_dateid = e368->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e368->INVENTORY_KSN;
          long v368 = e368->__av;
          agg353 += (v368 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1425.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1426.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_353INVENTORY1_P_3.getValueOrDefault(se1427.modify(inventory_locn)))));
          e368 = e368->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_353 += agg353;
      DOUBLE_TYPE agg354 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e369 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e369) {
          long inventory_locn = e369->INVENTORY_LOCN;
          long inventory_dateid = e369->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e369->INVENTORY_KSN;
          long v369 = e369->__av;
          agg354 += (v369 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1429.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1430.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_354INVENTORY1_P_3.getValueOrDefault(se1431.modify(inventory_locn)))));
          e369 = e369->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_354 += agg354;
      DOUBLE_TYPE agg355 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e370 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e370) {
          long inventory_locn = e370->INVENTORY_LOCN;
          long inventory_dateid = e370->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e370->INVENTORY_KSN;
          long v370 = e370->__av;
          agg355 += (v370 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1433.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1434.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_355INVENTORY1_P_3.getValueOrDefault(se1435.modify(inventory_locn)))));
          e370 = e370->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_355 += agg355;
      DOUBLE_TYPE agg356 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e371 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e371) {
          long inventory_locn = e371->INVENTORY_LOCN;
          long inventory_dateid = e371->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e371->INVENTORY_KSN;
          long v371 = e371->__av;
          agg356 += (v371 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1437.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1438.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_356INVENTORY1_P_3.getValueOrDefault(se1439.modify(inventory_locn)))));
          e371 = e371->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_356 += agg356;
      DOUBLE_TYPE agg357 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e372 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e372) {
          long inventory_locn = e372->INVENTORY_LOCN;
          long inventory_dateid = e372->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e372->INVENTORY_KSN;
          long v372 = e372->__av;
          agg357 += (v372 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1441.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1442.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_357INVENTORY1_P_3.getValueOrDefault(se1443.modify(inventory_locn)))));
          e372 = e372->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_357 += agg357;
      DOUBLE_TYPE agg358 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e373 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e373) {
          long inventory_locn = e373->INVENTORY_LOCN;
          long inventory_dateid = e373->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e373->INVENTORY_KSN;
          long v373 = e373->__av;
          agg358 += (v373 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1445.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1446.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_358INVENTORY1_P_3.getValueOrDefault(se1447.modify(inventory_locn)))));
          e373 = e373->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_358 += agg358;
      DOUBLE_TYPE agg359 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e374 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e374) {
          long inventory_locn = e374->INVENTORY_LOCN;
          long inventory_dateid = e374->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e374->INVENTORY_KSN;
          long v374 = e374->__av;
          agg359 += (v374 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1449.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1450.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_359INVENTORY1_P_3.getValueOrDefault(se1451.modify(inventory_locn)))));
          e374 = e374->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_359 += agg359;
      DOUBLE_TYPE agg360 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e375 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e375) {
          long inventory_locn = e375->INVENTORY_LOCN;
          long inventory_dateid = e375->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e375->INVENTORY_KSN;
          long v375 = e375->__av;
          agg360 += (v375 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1453.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1454.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_360INVENTORY1_P_3.getValueOrDefault(se1455.modify(inventory_locn)))));
          e375 = e375->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_360 += agg360;
      DOUBLE_TYPE agg361 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e376 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e376) {
          long inventory_locn = e376->INVENTORY_LOCN;
          long inventory_dateid = e376->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e376->INVENTORY_KSN;
          long v376 = e376->__av;
          agg361 += (v376 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1457.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1458.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_361INVENTORY1_P_3.getValueOrDefault(se1459.modify(inventory_locn)))));
          e376 = e376->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_361 += agg361;
      DOUBLE_TYPE agg362 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e377 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e377) {
          long inventory_locn = e377->INVENTORY_LOCN;
          long inventory_dateid = e377->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e377->INVENTORY_KSN;
          long v377 = e377->__av;
          agg362 += (v377 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1461.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1462.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_362INVENTORY1_P_3.getValueOrDefault(se1463.modify(inventory_locn)))));
          e377 = e377->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_362 += agg362;
      DOUBLE_TYPE agg363 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e378 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e378) {
          long inventory_locn = e378->INVENTORY_LOCN;
          long inventory_dateid = e378->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e378->INVENTORY_KSN;
          long v378 = e378->__av;
          agg363 += (v378 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1465.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1466.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_363INVENTORY1_P_3.getValueOrDefault(se1467.modify(inventory_locn)))));
          e378 = e378->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_363 += agg363;
      DOUBLE_TYPE agg364 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e379 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e379) {
          long inventory_locn = e379->INVENTORY_LOCN;
          long inventory_dateid = e379->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e379->INVENTORY_KSN;
          long v379 = e379->__av;
          agg364 += (v379 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1469.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1470.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_364INVENTORY1_P_3.getValueOrDefault(se1471.modify(inventory_locn)))));
          e379 = e379->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_364 += agg364;
      DOUBLE_TYPE agg365 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e380 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e380) {
          long inventory_locn = e380->INVENTORY_LOCN;
          long inventory_dateid = e380->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e380->INVENTORY_KSN;
          long v380 = e380->__av;
          agg365 += (v380 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1473.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1474.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_365INVENTORY1_P_3.getValueOrDefault(se1475.modify(inventory_locn)))));
          e380 = e380->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_365 += agg365;
      DOUBLE_TYPE agg366 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e381 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e381) {
          long inventory_locn = e381->INVENTORY_LOCN;
          long inventory_dateid = e381->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e381->INVENTORY_KSN;
          long v381 = e381->__av;
          agg366 += (v381 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1477.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1478.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_366INVENTORY1_P_3.getValueOrDefault(se1479.modify(inventory_locn)))));
          e381 = e381->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_366 += agg366;
      DOUBLE_TYPE agg367 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e382 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e382) {
          long inventory_locn = e382->INVENTORY_LOCN;
          long inventory_dateid = e382->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e382->INVENTORY_KSN;
          long v382 = e382->__av;
          agg367 += (v382 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1481.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1482.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_367INVENTORY1_P_3.getValueOrDefault(se1483.modify(inventory_locn)))));
          e382 = e382->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_367 += agg367;
      DOUBLE_TYPE agg368 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e383 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e383) {
          long inventory_locn = e383->INVENTORY_LOCN;
          long inventory_dateid = e383->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e383->INVENTORY_KSN;
          long v383 = e383->__av;
          agg368 += (v383 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1485.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1486.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_368INVENTORY1_P_3.getValueOrDefault(se1487.modify(inventory_locn)))));
          e383 = e383->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_368 += agg368;
      DOUBLE_TYPE agg369 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e384 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e384) {
          long inventory_locn = e384->INVENTORY_LOCN;
          long inventory_dateid = e384->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e384->INVENTORY_KSN;
          long v384 = e384->__av;
          agg369 += (v384 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1489.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1490.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_369INVENTORY1_P_3.getValueOrDefault(se1491.modify(inventory_locn)))));
          e384 = e384->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_369 += agg369;
      DOUBLE_TYPE agg370 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e385 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e385) {
          long inventory_locn = e385->INVENTORY_LOCN;
          long inventory_dateid = e385->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e385->INVENTORY_KSN;
          long v385 = e385->__av;
          agg370 += (v385 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1493.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1494.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_370INVENTORY1_P_3.getValueOrDefault(se1495.modify(inventory_locn)))));
          e385 = e385->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_370 += agg370;
      DOUBLE_TYPE agg371 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e386 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e386) {
          long inventory_locn = e386->INVENTORY_LOCN;
          long inventory_dateid = e386->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e386->INVENTORY_KSN;
          long v386 = e386->__av;
          agg371 += (v386 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1497.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1498.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_371INVENTORY1_P_3.getValueOrDefault(se1499.modify(inventory_locn)))));
          e386 = e386->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_371 += agg371;
      DOUBLE_TYPE agg372 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e387 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e387) {
          long inventory_locn = e387->INVENTORY_LOCN;
          long inventory_dateid = e387->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e387->INVENTORY_KSN;
          long v387 = e387->__av;
          agg372 += (v387 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1501.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1502.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_372INVENTORY1_P_3.getValueOrDefault(se1503.modify(inventory_locn)))));
          e387 = e387->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_372 += agg372;
      DOUBLE_TYPE agg373 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e388 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e388) {
          long inventory_locn = e388->INVENTORY_LOCN;
          long inventory_dateid = e388->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e388->INVENTORY_KSN;
          long v388 = e388->__av;
          agg373 += (v388 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1505.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1506.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_373INVENTORY1_P_3.getValueOrDefault(se1507.modify(inventory_locn)))));
          e388 = e388->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_373 += agg373;
      DOUBLE_TYPE agg374 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e389 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e389) {
          long inventory_locn = e389->INVENTORY_LOCN;
          long inventory_dateid = e389->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e389->INVENTORY_KSN;
          long v389 = e389->__av;
          agg374 += (v389 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1509.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1510.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_374INVENTORY1_P_3.getValueOrDefault(se1511.modify(inventory_locn)))));
          e389 = e389->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_374 += agg374;
      DOUBLE_TYPE agg375 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e390 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e390) {
          long inventory_locn = e390->INVENTORY_LOCN;
          long inventory_dateid = e390->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e390->INVENTORY_KSN;
          long v390 = e390->__av;
          agg375 += (v390 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1513.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1514.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_375INVENTORY1_P_3.getValueOrDefault(se1515.modify(inventory_locn)))));
          e390 = e390->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_375 += agg375;
      DOUBLE_TYPE agg376 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e391 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e391) {
          long inventory_locn = e391->INVENTORY_LOCN;
          long inventory_dateid = e391->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e391->INVENTORY_KSN;
          long v391 = e391->__av;
          agg376 += (v391 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1517.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1518.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1519.modify(inventory_locn)))));
          e391 = e391->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_376 += agg376;
      DOUBLE_TYPE agg377 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e392 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e392) {
          long inventory_locn = e392->INVENTORY_LOCN;
          long inventory_dateid = e392->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e392->INVENTORY_KSN;
          long v392 = e392->__av;
          agg377 += (v392 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1521.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1522.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1523.modify(inventory_locn)))));
          e392 = e392->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_377 += agg377;
      DOUBLE_TYPE agg378 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e393 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e393) {
          long inventory_locn = e393->INVENTORY_LOCN;
          long inventory_dateid = e393->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e393->INVENTORY_KSN;
          long v393 = e393->__av;
          agg378 += (v393 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1525.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1526.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1527.modify(inventory_locn)))));
          e393 = e393->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_378 += agg378;
      DOUBLE_TYPE agg379 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e394 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e394) {
          long inventory_locn = e394->INVENTORY_LOCN;
          long inventory_dateid = e394->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e394->INVENTORY_KSN;
          long v394 = e394->__av;
          agg379 += (v394 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1529.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1530.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1531.modify(inventory_locn)))));
          e394 = e394->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_379 += agg379;
      DOUBLE_TYPE agg380 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e395 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e395) {
          long inventory_locn = e395->INVENTORY_LOCN;
          long inventory_dateid = e395->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e395->INVENTORY_KSN;
          long v395 = e395->__av;
          agg380 += (v395 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1533.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1534.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1535.modify(inventory_locn)))));
          e395 = e395->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_380 += agg380;
      DOUBLE_TYPE agg381 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e396 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e396) {
          long inventory_locn = e396->INVENTORY_LOCN;
          long inventory_dateid = e396->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e396->INVENTORY_KSN;
          long v396 = e396->__av;
          agg381 += (v396 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1537.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1538.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1539.modify(inventory_locn)))));
          e396 = e396->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_381 += agg381;
      DOUBLE_TYPE agg382 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e397 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e397) {
          long inventory_locn = e397->INVENTORY_LOCN;
          long inventory_dateid = e397->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e397->INVENTORY_KSN;
          long v397 = e397->__av;
          agg382 += (v397 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1541.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1542.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1543.modify(inventory_locn)))));
          e397 = e397->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_382 += agg382;
      DOUBLE_TYPE agg383 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e398 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e398) {
          long inventory_locn = e398->INVENTORY_LOCN;
          long inventory_dateid = e398->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e398->INVENTORY_KSN;
          long v398 = e398->__av;
          agg383 += (v398 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1545.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1546.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1547.modify(inventory_locn)))));
          e398 = e398->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_383 += agg383;
      DOUBLE_TYPE agg384 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e399 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e399) {
          long inventory_locn = e399->INVENTORY_LOCN;
          long inventory_dateid = e399->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e399->INVENTORY_KSN;
          long v399 = e399->__av;
          agg384 += (v399 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1549.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1550.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1551.modify(inventory_locn)))));
          e399 = e399->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_384 += agg384;
      DOUBLE_TYPE agg385 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e400 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e400) {
          long inventory_locn = e400->INVENTORY_LOCN;
          long inventory_dateid = e400->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e400->INVENTORY_KSN;
          long v400 = e400->__av;
          agg385 += (v400 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1553.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1554.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.getValueOrDefault(se1555.modify(inventory_locn)))));
          e400 = e400->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_385 += agg385;
      DOUBLE_TYPE agg386 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e401 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e401) {
          long inventory_locn = e401->INVENTORY_LOCN;
          long inventory_dateid = e401->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e401->INVENTORY_KSN;
          long v401 = e401->__av;
          agg386 += (v401 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1557.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1558.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_386INVENTORY1_P_3.getValueOrDefault(se1559.modify(inventory_locn)))));
          e401 = e401->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_386 += agg386;
      DOUBLE_TYPE agg387 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e402 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e402) {
          long inventory_locn = e402->INVENTORY_LOCN;
          long inventory_dateid = e402->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e402->INVENTORY_KSN;
          long v402 = e402->__av;
          agg387 += (v402 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1561.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1562.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_387INVENTORY1_P_3.getValueOrDefault(se1563.modify(inventory_locn)))));
          e402 = e402->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_387 += agg387;
      DOUBLE_TYPE agg388 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e403 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e403) {
          long inventory_locn = e403->INVENTORY_LOCN;
          long inventory_dateid = e403->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e403->INVENTORY_KSN;
          long v403 = e403->__av;
          agg388 += (v403 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1565.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1566.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_388INVENTORY1_P_3.getValueOrDefault(se1567.modify(inventory_locn)))));
          e403 = e403->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_388 += agg388;
      DOUBLE_TYPE agg389 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e404 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e404) {
          long inventory_locn = e404->INVENTORY_LOCN;
          long inventory_dateid = e404->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e404->INVENTORY_KSN;
          long v404 = e404->__av;
          agg389 += (v404 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1569.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1570.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_389INVENTORY1_P_3.getValueOrDefault(se1571.modify(inventory_locn)))));
          e404 = e404->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_389 += agg389;
      DOUBLE_TYPE agg390 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e405 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e405) {
          long inventory_locn = e405->INVENTORY_LOCN;
          long inventory_dateid = e405->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e405->INVENTORY_KSN;
          long v405 = e405->__av;
          agg390 += (v405 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1573.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1574.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_390INVENTORY1_P_3.getValueOrDefault(se1575.modify(inventory_locn)))));
          e405 = e405->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_390 += agg390;
      DOUBLE_TYPE agg391 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e406 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e406) {
          long inventory_locn = e406->INVENTORY_LOCN;
          long inventory_dateid = e406->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e406->INVENTORY_KSN;
          long v406 = e406->__av;
          agg391 += (v406 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1577.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1578.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_391INVENTORY1_P_3.getValueOrDefault(se1579.modify(inventory_locn)))));
          e406 = e406->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_391 += agg391;
      DOUBLE_TYPE agg392 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e407 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e407) {
          long inventory_locn = e407->INVENTORY_LOCN;
          long inventory_dateid = e407->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e407->INVENTORY_KSN;
          long v407 = e407->__av;
          agg392 += (v407 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1581.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1582.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_392INVENTORY1_P_3.getValueOrDefault(se1583.modify(inventory_locn)))));
          e407 = e407->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_392 += agg392;
      DOUBLE_TYPE agg393 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e408 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e408) {
          long inventory_locn = e408->INVENTORY_LOCN;
          long inventory_dateid = e408->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e408->INVENTORY_KSN;
          long v408 = e408->__av;
          agg393 += (v408 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1585.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1586.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_393INVENTORY1_P_3.getValueOrDefault(se1587.modify(inventory_locn)))));
          e408 = e408->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_393 += agg393;
      DOUBLE_TYPE agg394 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e409 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e409) {
          long inventory_locn = e409->INVENTORY_LOCN;
          long inventory_dateid = e409->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e409->INVENTORY_KSN;
          long v409 = e409->__av;
          agg394 += (v409 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1589.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1590.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_394INVENTORY1_P_3.getValueOrDefault(se1591.modify(inventory_locn)))));
          e409 = e409->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_394 += agg394;
      DOUBLE_TYPE agg395 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e410 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e410) {
          long inventory_locn = e410->INVENTORY_LOCN;
          long inventory_dateid = e410->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e410->INVENTORY_KSN;
          long v410 = e410->__av;
          agg395 += (v410 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1593.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1594.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_395INVENTORY1_P_3.getValueOrDefault(se1595.modify(inventory_locn)))));
          e410 = e410->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_395 += agg395;
      DOUBLE_TYPE agg396 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e411 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e411) {
          long inventory_locn = e411->INVENTORY_LOCN;
          long inventory_dateid = e411->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e411->INVENTORY_KSN;
          long v411 = e411->__av;
          agg396 += (v411 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1597.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1598.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_396INVENTORY1_P_3.getValueOrDefault(se1599.modify(inventory_locn)))));
          e411 = e411->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_396 += agg396;
      DOUBLE_TYPE agg397 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e412 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e412) {
          long inventory_locn = e412->INVENTORY_LOCN;
          long inventory_dateid = e412->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e412->INVENTORY_KSN;
          long v412 = e412->__av;
          agg397 += (v412 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1601.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1602.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_397INVENTORY1_P_3.getValueOrDefault(se1603.modify(inventory_locn)))));
          e412 = e412->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_397 += agg397;
      DOUBLE_TYPE agg398 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e413 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e413) {
          long inventory_locn = e413->INVENTORY_LOCN;
          long inventory_dateid = e413->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e413->INVENTORY_KSN;
          long v413 = e413->__av;
          agg398 += (v413 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1605.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1606.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_398INVENTORY1_P_3.getValueOrDefault(se1607.modify(inventory_locn)))));
          e413 = e413->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_398 += agg398;
      DOUBLE_TYPE agg399 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e414 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e414) {
          long inventory_locn = e414->INVENTORY_LOCN;
          long inventory_dateid = e414->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e414->INVENTORY_KSN;
          long v414 = e414->__av;
          agg399 += (v414 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1609.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1610.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_399INVENTORY1_P_3.getValueOrDefault(se1611.modify(inventory_locn)))));
          e414 = e414->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_399 += agg399;
      DOUBLE_TYPE agg400 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e415 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e415) {
          long inventory_locn = e415->INVENTORY_LOCN;
          long inventory_dateid = e415->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e415->INVENTORY_KSN;
          long v415 = e415->__av;
          agg400 += (v415 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1613.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1614.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_400INVENTORY1_P_3.getValueOrDefault(se1615.modify(inventory_locn)))));
          e415 = e415->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_400 += agg400;
      DOUBLE_TYPE agg401 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e416 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e416) {
          long inventory_locn = e416->INVENTORY_LOCN;
          long inventory_dateid = e416->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e416->INVENTORY_KSN;
          long v416 = e416->__av;
          agg401 += (v416 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1617.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1618.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_401INVENTORY1_P_3.getValueOrDefault(se1619.modify(inventory_locn)))));
          e416 = e416->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_401 += agg401;
      DOUBLE_TYPE agg402 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e417 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e417) {
          long inventory_locn = e417->INVENTORY_LOCN;
          long inventory_dateid = e417->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e417->INVENTORY_KSN;
          long v417 = e417->__av;
          agg402 += (v417 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1621.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1622.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_402INVENTORY1_P_3.getValueOrDefault(se1623.modify(inventory_locn)))));
          e417 = e417->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_402 += agg402;
      DOUBLE_TYPE agg403 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e418 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e418) {
          long inventory_locn = e418->INVENTORY_LOCN;
          long inventory_dateid = e418->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e418->INVENTORY_KSN;
          long v418 = e418->__av;
          agg403 += (v418 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1625.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1626.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_403INVENTORY1_P_3.getValueOrDefault(se1627.modify(inventory_locn)))));
          e418 = e418->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_403 += agg403;
      DOUBLE_TYPE agg404 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e419 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e419) {
          long inventory_locn = e419->INVENTORY_LOCN;
          long inventory_dateid = e419->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e419->INVENTORY_KSN;
          long v419 = e419->__av;
          agg404 += (v419 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1629.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1630.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_404INVENTORY1_P_3.getValueOrDefault(se1631.modify(inventory_locn)))));
          e419 = e419->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_404 += agg404;
      DOUBLE_TYPE agg405 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e420 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e420) {
          long inventory_locn = e420->INVENTORY_LOCN;
          long inventory_dateid = e420->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e420->INVENTORY_KSN;
          long v420 = e420->__av;
          agg405 += (v420 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1633.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1634.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_405INVENTORY1_P_3.getValueOrDefault(se1635.modify(inventory_locn)))));
          e420 = e420->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_405 += agg405;
      DOUBLE_TYPE agg406 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e421 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e421) {
          long inventory_locn = e421->INVENTORY_LOCN;
          long inventory_dateid = e421->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e421->INVENTORY_KSN;
          long v421 = e421->__av;
          agg406 += (v421 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1637.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1638.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_406INVENTORY1_P_3.getValueOrDefault(se1639.modify(inventory_locn)))));
          e421 = e421->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_406 += agg406;
      DOUBLE_TYPE agg407 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e422 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e422) {
          long inventory_locn = e422->INVENTORY_LOCN;
          long inventory_dateid = e422->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e422->INVENTORY_KSN;
          long v422 = e422->__av;
          agg407 += (v422 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1641.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1642.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_407INVENTORY1_P_3.getValueOrDefault(se1643.modify(inventory_locn)))));
          e422 = e422->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_407 += agg407;
      DOUBLE_TYPE agg408 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e423 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e423) {
          long inventory_locn = e423->INVENTORY_LOCN;
          long inventory_dateid = e423->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e423->INVENTORY_KSN;
          long v423 = e423->__av;
          agg408 += (v423 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1645.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1646.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_408INVENTORY1_P_3.getValueOrDefault(se1647.modify(inventory_locn)))));
          e423 = e423->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_408 += agg408;
      DOUBLE_TYPE agg409 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e424 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e424) {
          long inventory_locn = e424->INVENTORY_LOCN;
          long inventory_dateid = e424->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e424->INVENTORY_KSN;
          long v424 = e424->__av;
          agg409 += (v424 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1649.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1650.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1651.modify(inventory_locn)))));
          e424 = e424->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_409 += agg409;
      DOUBLE_TYPE agg410 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e425 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e425) {
          long inventory_locn = e425->INVENTORY_LOCN;
          long inventory_dateid = e425->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e425->INVENTORY_KSN;
          long v425 = e425->__av;
          agg410 += (v425 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1653.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1654.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1655.modify(inventory_locn)))));
          e425 = e425->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_410 += agg410;
      DOUBLE_TYPE agg411 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e426 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e426) {
          long inventory_locn = e426->INVENTORY_LOCN;
          long inventory_dateid = e426->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e426->INVENTORY_KSN;
          long v426 = e426->__av;
          agg411 += (v426 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1657.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1658.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1659.modify(inventory_locn)))));
          e426 = e426->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_411 += agg411;
      DOUBLE_TYPE agg412 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e427 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e427) {
          long inventory_locn = e427->INVENTORY_LOCN;
          long inventory_dateid = e427->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e427->INVENTORY_KSN;
          long v427 = e427->__av;
          agg412 += (v427 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1661.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1662.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1663.modify(inventory_locn)))));
          e427 = e427->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_412 += agg412;
      DOUBLE_TYPE agg413 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e428 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e428) {
          long inventory_locn = e428->INVENTORY_LOCN;
          long inventory_dateid = e428->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e428->INVENTORY_KSN;
          long v428 = e428->__av;
          agg413 += (v428 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1665.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1666.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1667.modify(inventory_locn)))));
          e428 = e428->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_413 += agg413;
      DOUBLE_TYPE agg414 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e429 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e429) {
          long inventory_locn = e429->INVENTORY_LOCN;
          long inventory_dateid = e429->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e429->INVENTORY_KSN;
          long v429 = e429->__av;
          agg414 += (v429 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1669.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1670.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1671.modify(inventory_locn)))));
          e429 = e429->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_414 += agg414;
      DOUBLE_TYPE agg415 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e430 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e430) {
          long inventory_locn = e430->INVENTORY_LOCN;
          long inventory_dateid = e430->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e430->INVENTORY_KSN;
          long v430 = e430->__av;
          agg415 += (v430 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1673.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1674.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1675.modify(inventory_locn)))));
          e430 = e430->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_415 += agg415;
      DOUBLE_TYPE agg416 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e431 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e431) {
          long inventory_locn = e431->INVENTORY_LOCN;
          long inventory_dateid = e431->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e431->INVENTORY_KSN;
          long v431 = e431->__av;
          agg416 += (v431 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1677.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1678.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1679.modify(inventory_locn)))));
          e431 = e431->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_416 += agg416;
      DOUBLE_TYPE agg417 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e432 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e432) {
          long inventory_locn = e432->INVENTORY_LOCN;
          long inventory_dateid = e432->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e432->INVENTORY_KSN;
          long v432 = e432->__av;
          agg417 += (v432 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1681.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1682.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1683.modify(inventory_locn)))));
          e432 = e432->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_417 += agg417;
      DOUBLE_TYPE agg418 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e433 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e433) {
          long inventory_locn = e433->INVENTORY_LOCN;
          long inventory_dateid = e433->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e433->INVENTORY_KSN;
          long v433 = e433->__av;
          agg418 += (v433 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1685.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1686.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.getValueOrDefault(se1687.modify(inventory_locn)))));
          e433 = e433->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_418 += agg418;
      DOUBLE_TYPE agg419 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e434 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e434) {
          long inventory_locn = e434->INVENTORY_LOCN;
          long inventory_dateid = e434->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e434->INVENTORY_KSN;
          long v434 = e434->__av;
          agg419 += (v434 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1689.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1690.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_419INVENTORY1_P_3.getValueOrDefault(se1691.modify(inventory_locn)))));
          e434 = e434->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_419 += agg419;
      DOUBLE_TYPE agg420 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e435 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e435) {
          long inventory_locn = e435->INVENTORY_LOCN;
          long inventory_dateid = e435->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e435->INVENTORY_KSN;
          long v435 = e435->__av;
          agg420 += (v435 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1693.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1694.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_420INVENTORY1_P_3.getValueOrDefault(se1695.modify(inventory_locn)))));
          e435 = e435->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_420 += agg420;
      DOUBLE_TYPE agg421 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e436 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e436) {
          long inventory_locn = e436->INVENTORY_LOCN;
          long inventory_dateid = e436->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e436->INVENTORY_KSN;
          long v436 = e436->__av;
          agg421 += (v436 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1697.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1698.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_421INVENTORY1_P_3.getValueOrDefault(se1699.modify(inventory_locn)))));
          e436 = e436->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_421 += agg421;
      DOUBLE_TYPE agg422 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e437 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e437) {
          long inventory_locn = e437->INVENTORY_LOCN;
          long inventory_dateid = e437->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e437->INVENTORY_KSN;
          long v437 = e437->__av;
          agg422 += (v437 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1701.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1702.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_422INVENTORY1_P_3.getValueOrDefault(se1703.modify(inventory_locn)))));
          e437 = e437->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_422 += agg422;
      DOUBLE_TYPE agg423 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e438 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e438) {
          long inventory_locn = e438->INVENTORY_LOCN;
          long inventory_dateid = e438->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e438->INVENTORY_KSN;
          long v438 = e438->__av;
          agg423 += (v438 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1705.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1706.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_423INVENTORY1_P_3.getValueOrDefault(se1707.modify(inventory_locn)))));
          e438 = e438->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_423 += agg423;
      DOUBLE_TYPE agg424 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e439 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e439) {
          long inventory_locn = e439->INVENTORY_LOCN;
          long inventory_dateid = e439->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e439->INVENTORY_KSN;
          long v439 = e439->__av;
          agg424 += (v439 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1709.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1710.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_424INVENTORY1_P_3.getValueOrDefault(se1711.modify(inventory_locn)))));
          e439 = e439->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_424 += agg424;
      DOUBLE_TYPE agg425 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e440 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e440) {
          long inventory_locn = e440->INVENTORY_LOCN;
          long inventory_dateid = e440->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e440->INVENTORY_KSN;
          long v440 = e440->__av;
          agg425 += (v440 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1713.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1714.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_425INVENTORY1_P_3.getValueOrDefault(se1715.modify(inventory_locn)))));
          e440 = e440->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_425 += agg425;
      DOUBLE_TYPE agg426 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e441 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e441) {
          long inventory_locn = e441->INVENTORY_LOCN;
          long inventory_dateid = e441->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e441->INVENTORY_KSN;
          long v441 = e441->__av;
          agg426 += (v441 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1717.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1718.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_426INVENTORY1_P_3.getValueOrDefault(se1719.modify(inventory_locn)))));
          e441 = e441->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_426 += agg426;
      DOUBLE_TYPE agg427 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e442 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e442) {
          long inventory_locn = e442->INVENTORY_LOCN;
          long inventory_dateid = e442->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e442->INVENTORY_KSN;
          long v442 = e442->__av;
          agg427 += (v442 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1721.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1722.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_427INVENTORY1_P_3.getValueOrDefault(se1723.modify(inventory_locn)))));
          e442 = e442->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_427 += agg427;
      DOUBLE_TYPE agg428 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e443 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e443) {
          long inventory_locn = e443->INVENTORY_LOCN;
          long inventory_dateid = e443->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e443->INVENTORY_KSN;
          long v443 = e443->__av;
          agg428 += (v443 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1725.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1726.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_428INVENTORY1_P_3.getValueOrDefault(se1727.modify(inventory_locn)))));
          e443 = e443->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_428 += agg428;
      DOUBLE_TYPE agg429 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e444 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e444) {
          long inventory_locn = e444->INVENTORY_LOCN;
          long inventory_dateid = e444->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e444->INVENTORY_KSN;
          long v444 = e444->__av;
          agg429 += (v444 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1729.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1730.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_429INVENTORY1_P_3.getValueOrDefault(se1731.modify(inventory_locn)))));
          e444 = e444->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_429 += agg429;
      DOUBLE_TYPE agg430 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e445 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e445) {
          long inventory_locn = e445->INVENTORY_LOCN;
          long inventory_dateid = e445->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e445->INVENTORY_KSN;
          long v445 = e445->__av;
          agg430 += (v445 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1733.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1734.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_430INVENTORY1_P_3.getValueOrDefault(se1735.modify(inventory_locn)))));
          e445 = e445->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_430 += agg430;
      DOUBLE_TYPE agg431 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e446 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e446) {
          long inventory_locn = e446->INVENTORY_LOCN;
          long inventory_dateid = e446->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e446->INVENTORY_KSN;
          long v446 = e446->__av;
          agg431 += (v446 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1737.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1738.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_431INVENTORY1_P_3.getValueOrDefault(se1739.modify(inventory_locn)))));
          e446 = e446->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_431 += agg431;
      DOUBLE_TYPE agg432 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e447 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e447) {
          long inventory_locn = e447->INVENTORY_LOCN;
          long inventory_dateid = e447->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e447->INVENTORY_KSN;
          long v447 = e447->__av;
          agg432 += (v447 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1741.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1742.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_432INVENTORY1_P_3.getValueOrDefault(se1743.modify(inventory_locn)))));
          e447 = e447->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_432 += agg432;
      DOUBLE_TYPE agg433 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e448 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e448) {
          long inventory_locn = e448->INVENTORY_LOCN;
          long inventory_dateid = e448->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e448->INVENTORY_KSN;
          long v448 = e448->__av;
          agg433 += (v448 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1745.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1746.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_433INVENTORY1_P_3.getValueOrDefault(se1747.modify(inventory_locn)))));
          e448 = e448->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_433 += agg433;
      DOUBLE_TYPE agg434 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e449 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e449) {
          long inventory_locn = e449->INVENTORY_LOCN;
          long inventory_dateid = e449->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e449->INVENTORY_KSN;
          long v449 = e449->__av;
          agg434 += (v449 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1749.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1750.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_434INVENTORY1_P_3.getValueOrDefault(se1751.modify(inventory_locn)))));
          e449 = e449->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_434 += agg434;
      DOUBLE_TYPE agg435 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e450 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e450) {
          long inventory_locn = e450->INVENTORY_LOCN;
          long inventory_dateid = e450->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e450->INVENTORY_KSN;
          long v450 = e450->__av;
          agg435 += (v450 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1753.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1754.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_435INVENTORY1_P_3.getValueOrDefault(se1755.modify(inventory_locn)))));
          e450 = e450->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_435 += agg435;
      DOUBLE_TYPE agg436 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e451 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e451) {
          long inventory_locn = e451->INVENTORY_LOCN;
          long inventory_dateid = e451->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e451->INVENTORY_KSN;
          long v451 = e451->__av;
          agg436 += (v451 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1757.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1758.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_436INVENTORY1_P_3.getValueOrDefault(se1759.modify(inventory_locn)))));
          e451 = e451->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_436 += agg436;
      DOUBLE_TYPE agg437 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e452 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e452) {
          long inventory_locn = e452->INVENTORY_LOCN;
          long inventory_dateid = e452->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e452->INVENTORY_KSN;
          long v452 = e452->__av;
          agg437 += (v452 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1761.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1762.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_437INVENTORY1_P_3.getValueOrDefault(se1763.modify(inventory_locn)))));
          e452 = e452->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_437 += agg437;
      DOUBLE_TYPE agg438 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e453 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e453) {
          long inventory_locn = e453->INVENTORY_LOCN;
          long inventory_dateid = e453->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e453->INVENTORY_KSN;
          long v453 = e453->__av;
          agg438 += (v453 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1765.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1766.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_438INVENTORY1_P_3.getValueOrDefault(se1767.modify(inventory_locn)))));
          e453 = e453->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_438 += agg438;
      DOUBLE_TYPE agg439 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e454 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e454) {
          long inventory_locn = e454->INVENTORY_LOCN;
          long inventory_dateid = e454->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e454->INVENTORY_KSN;
          long v454 = e454->__av;
          agg439 += (v454 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1769.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1770.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_439INVENTORY1_P_3.getValueOrDefault(se1771.modify(inventory_locn)))));
          e454 = e454->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_439 += agg439;
      DOUBLE_TYPE agg440 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e455 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e455) {
          long inventory_locn = e455->INVENTORY_LOCN;
          long inventory_dateid = e455->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e455->INVENTORY_KSN;
          long v455 = e455->__av;
          agg440 += (v455 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1773.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1774.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_440INVENTORY1_P_3.getValueOrDefault(se1775.modify(inventory_locn)))));
          e455 = e455->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_440 += agg440;
      DOUBLE_TYPE agg441 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e456 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e456) {
          long inventory_locn = e456->INVENTORY_LOCN;
          long inventory_dateid = e456->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e456->INVENTORY_KSN;
          long v456 = e456->__av;
          agg441 += (v456 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1777.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1778.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1779.modify(inventory_locn)))));
          e456 = e456->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_441 += agg441;
      DOUBLE_TYPE agg442 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e457 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e457) {
          long inventory_locn = e457->INVENTORY_LOCN;
          long inventory_dateid = e457->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e457->INVENTORY_KSN;
          long v457 = e457->__av;
          agg442 += (v457 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1781.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1782.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1783.modify(inventory_locn)))));
          e457 = e457->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_442 += agg442;
      DOUBLE_TYPE agg443 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e458 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e458) {
          long inventory_locn = e458->INVENTORY_LOCN;
          long inventory_dateid = e458->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e458->INVENTORY_KSN;
          long v458 = e458->__av;
          agg443 += (v458 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1785.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1786.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1787.modify(inventory_locn)))));
          e458 = e458->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_443 += agg443;
      DOUBLE_TYPE agg444 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e459 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e459) {
          long inventory_locn = e459->INVENTORY_LOCN;
          long inventory_dateid = e459->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e459->INVENTORY_KSN;
          long v459 = e459->__av;
          agg444 += (v459 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1789.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1790.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1791.modify(inventory_locn)))));
          e459 = e459->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_444 += agg444;
      DOUBLE_TYPE agg445 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e460 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e460) {
          long inventory_locn = e460->INVENTORY_LOCN;
          long inventory_dateid = e460->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e460->INVENTORY_KSN;
          long v460 = e460->__av;
          agg445 += (v460 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1793.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1794.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1795.modify(inventory_locn)))));
          e460 = e460->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_445 += agg445;
      DOUBLE_TYPE agg446 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e461 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e461) {
          long inventory_locn = e461->INVENTORY_LOCN;
          long inventory_dateid = e461->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e461->INVENTORY_KSN;
          long v461 = e461->__av;
          agg446 += (v461 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1797.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1798.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1799.modify(inventory_locn)))));
          e461 = e461->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_446 += agg446;
      DOUBLE_TYPE agg447 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e462 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e462) {
          long inventory_locn = e462->INVENTORY_LOCN;
          long inventory_dateid = e462->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e462->INVENTORY_KSN;
          long v462 = e462->__av;
          agg447 += (v462 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1801.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1802.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1803.modify(inventory_locn)))));
          e462 = e462->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_447 += agg447;
      DOUBLE_TYPE agg448 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e463 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e463) {
          long inventory_locn = e463->INVENTORY_LOCN;
          long inventory_dateid = e463->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e463->INVENTORY_KSN;
          long v463 = e463->__av;
          agg448 += (v463 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1805.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1806.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1807.modify(inventory_locn)))));
          e463 = e463->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_448 += agg448;
      DOUBLE_TYPE agg449 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e464 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e464) {
          long inventory_locn = e464->INVENTORY_LOCN;
          long inventory_dateid = e464->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e464->INVENTORY_KSN;
          long v464 = e464->__av;
          agg449 += (v464 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1809.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1810.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1811.modify(inventory_locn)))));
          e464 = e464->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_449 += agg449;
      DOUBLE_TYPE agg450 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e465 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e465) {
          long inventory_locn = e465->INVENTORY_LOCN;
          long inventory_dateid = e465->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e465->INVENTORY_KSN;
          long v465 = e465->__av;
          agg450 += (v465 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1813.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1814.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.getValueOrDefault(se1815.modify(inventory_locn)))));
          e465 = e465->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_450 += agg450;
      DOUBLE_TYPE agg451 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e466 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e466) {
          long inventory_locn = e466->INVENTORY_LOCN;
          long inventory_dateid = e466->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e466->INVENTORY_KSN;
          long v466 = e466->__av;
          agg451 += (v466 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1817.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1818.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_451INVENTORY1_P_3.getValueOrDefault(se1819.modify(inventory_locn)))));
          e466 = e466->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_451 += agg451;
      DOUBLE_TYPE agg452 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e467 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e467) {
          long inventory_locn = e467->INVENTORY_LOCN;
          long inventory_dateid = e467->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e467->INVENTORY_KSN;
          long v467 = e467->__av;
          agg452 += (v467 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1821.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1822.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_452INVENTORY1_P_3.getValueOrDefault(se1823.modify(inventory_locn)))));
          e467 = e467->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_452 += agg452;
      DOUBLE_TYPE agg453 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e468 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e468) {
          long inventory_locn = e468->INVENTORY_LOCN;
          long inventory_dateid = e468->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e468->INVENTORY_KSN;
          long v468 = e468->__av;
          agg453 += (v468 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1825.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1826.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_453INVENTORY1_P_3.getValueOrDefault(se1827.modify(inventory_locn)))));
          e468 = e468->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_453 += agg453;
      DOUBLE_TYPE agg454 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e469 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e469) {
          long inventory_locn = e469->INVENTORY_LOCN;
          long inventory_dateid = e469->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e469->INVENTORY_KSN;
          long v469 = e469->__av;
          agg454 += (v469 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1829.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1830.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_454INVENTORY1_P_3.getValueOrDefault(se1831.modify(inventory_locn)))));
          e469 = e469->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_454 += agg454;
      DOUBLE_TYPE agg455 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e470 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e470) {
          long inventory_locn = e470->INVENTORY_LOCN;
          long inventory_dateid = e470->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e470->INVENTORY_KSN;
          long v470 = e470->__av;
          agg455 += (v470 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1833.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1834.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_455INVENTORY1_P_3.getValueOrDefault(se1835.modify(inventory_locn)))));
          e470 = e470->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_455 += agg455;
      DOUBLE_TYPE agg456 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e471 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e471) {
          long inventory_locn = e471->INVENTORY_LOCN;
          long inventory_dateid = e471->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e471->INVENTORY_KSN;
          long v471 = e471->__av;
          agg456 += (v471 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1837.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1838.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_456INVENTORY1_P_3.getValueOrDefault(se1839.modify(inventory_locn)))));
          e471 = e471->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_456 += agg456;
      DOUBLE_TYPE agg457 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e472 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e472) {
          long inventory_locn = e472->INVENTORY_LOCN;
          long inventory_dateid = e472->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e472->INVENTORY_KSN;
          long v472 = e472->__av;
          agg457 += (v472 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1841.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1842.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_457INVENTORY1_P_3.getValueOrDefault(se1843.modify(inventory_locn)))));
          e472 = e472->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_457 += agg457;
      DOUBLE_TYPE agg458 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e473 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e473) {
          long inventory_locn = e473->INVENTORY_LOCN;
          long inventory_dateid = e473->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e473->INVENTORY_KSN;
          long v473 = e473->__av;
          agg458 += (v473 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1845.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1846.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_458INVENTORY1_P_3.getValueOrDefault(se1847.modify(inventory_locn)))));
          e473 = e473->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_458 += agg458;
      DOUBLE_TYPE agg459 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e474 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e474) {
          long inventory_locn = e474->INVENTORY_LOCN;
          long inventory_dateid = e474->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e474->INVENTORY_KSN;
          long v474 = e474->__av;
          agg459 += (v474 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1849.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1850.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_459INVENTORY1_P_3.getValueOrDefault(se1851.modify(inventory_locn)))));
          e474 = e474->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_459 += agg459;
      DOUBLE_TYPE agg460 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e475 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e475) {
          long inventory_locn = e475->INVENTORY_LOCN;
          long inventory_dateid = e475->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e475->INVENTORY_KSN;
          long v475 = e475->__av;
          agg460 += (v475 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1853.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1854.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_460INVENTORY1_P_3.getValueOrDefault(se1855.modify(inventory_locn)))));
          e475 = e475->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_460 += agg460;
      DOUBLE_TYPE agg461 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e476 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e476) {
          long inventory_locn = e476->INVENTORY_LOCN;
          long inventory_dateid = e476->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e476->INVENTORY_KSN;
          long v476 = e476->__av;
          agg461 += (v476 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1857.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1858.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_461INVENTORY1_P_3.getValueOrDefault(se1859.modify(inventory_locn)))));
          e476 = e476->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_461 += agg461;
      DOUBLE_TYPE agg462 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e477 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e477) {
          long inventory_locn = e477->INVENTORY_LOCN;
          long inventory_dateid = e477->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e477->INVENTORY_KSN;
          long v477 = e477->__av;
          agg462 += (v477 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1861.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1862.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_462INVENTORY1_P_3.getValueOrDefault(se1863.modify(inventory_locn)))));
          e477 = e477->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_462 += agg462;
      DOUBLE_TYPE agg463 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e478 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e478) {
          long inventory_locn = e478->INVENTORY_LOCN;
          long inventory_dateid = e478->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e478->INVENTORY_KSN;
          long v478 = e478->__av;
          agg463 += (v478 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1865.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1866.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_463INVENTORY1_P_3.getValueOrDefault(se1867.modify(inventory_locn)))));
          e478 = e478->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_463 += agg463;
      DOUBLE_TYPE agg464 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e479 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e479) {
          long inventory_locn = e479->INVENTORY_LOCN;
          long inventory_dateid = e479->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e479->INVENTORY_KSN;
          long v479 = e479->__av;
          agg464 += (v479 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1869.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1870.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_464INVENTORY1_P_3.getValueOrDefault(se1871.modify(inventory_locn)))));
          e479 = e479->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_464 += agg464;
      DOUBLE_TYPE agg465 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e480 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e480) {
          long inventory_locn = e480->INVENTORY_LOCN;
          long inventory_dateid = e480->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e480->INVENTORY_KSN;
          long v480 = e480->__av;
          agg465 += (v480 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1873.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1874.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_465INVENTORY1_P_3.getValueOrDefault(se1875.modify(inventory_locn)))));
          e480 = e480->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_465 += agg465;
      DOUBLE_TYPE agg466 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e481 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e481) {
          long inventory_locn = e481->INVENTORY_LOCN;
          long inventory_dateid = e481->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e481->INVENTORY_KSN;
          long v481 = e481->__av;
          agg466 += (v481 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1877.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1878.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_466INVENTORY1_P_3.getValueOrDefault(se1879.modify(inventory_locn)))));
          e481 = e481->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_466 += agg466;
      DOUBLE_TYPE agg467 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e482 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e482) {
          long inventory_locn = e482->INVENTORY_LOCN;
          long inventory_dateid = e482->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e482->INVENTORY_KSN;
          long v482 = e482->__av;
          agg467 += (v482 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1881.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1882.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_467INVENTORY1_P_3.getValueOrDefault(se1883.modify(inventory_locn)))));
          e482 = e482->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_467 += agg467;
      DOUBLE_TYPE agg468 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e483 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e483) {
          long inventory_locn = e483->INVENTORY_LOCN;
          long inventory_dateid = e483->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e483->INVENTORY_KSN;
          long v483 = e483->__av;
          agg468 += (v483 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1885.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1886.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_468INVENTORY1_P_3.getValueOrDefault(se1887.modify(inventory_locn)))));
          e483 = e483->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_468 += agg468;
      DOUBLE_TYPE agg469 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e484 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e484) {
          long inventory_locn = e484->INVENTORY_LOCN;
          long inventory_dateid = e484->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e484->INVENTORY_KSN;
          long v484 = e484->__av;
          agg469 += (v484 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1889.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1890.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_469INVENTORY1_P_3.getValueOrDefault(se1891.modify(inventory_locn)))));
          e484 = e484->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_469 += agg469;
      DOUBLE_TYPE agg470 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e485 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e485) {
          long inventory_locn = e485->INVENTORY_LOCN;
          long inventory_dateid = e485->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e485->INVENTORY_KSN;
          long v485 = e485->__av;
          agg470 += (v485 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1893.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1894.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_470INVENTORY1_P_3.getValueOrDefault(se1895.modify(inventory_locn)))));
          e485 = e485->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_470 += agg470;
      DOUBLE_TYPE agg471 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e486 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e486) {
          long inventory_locn = e486->INVENTORY_LOCN;
          long inventory_dateid = e486->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e486->INVENTORY_KSN;
          long v486 = e486->__av;
          agg471 += (v486 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1897.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1898.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_471INVENTORY1_P_3.getValueOrDefault(se1899.modify(inventory_locn)))));
          e486 = e486->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_471 += agg471;
      DOUBLE_TYPE agg472 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e487 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e487) {
          long inventory_locn = e487->INVENTORY_LOCN;
          long inventory_dateid = e487->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e487->INVENTORY_KSN;
          long v487 = e487->__av;
          agg472 += (v487 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1901.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se1902.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1903.modify(inventory_locn)))));
          e487 = e487->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_472 += agg472;
      DOUBLE_TYPE agg473 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e488 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e488) {
          long inventory_locn = e488->INVENTORY_LOCN;
          long inventory_dateid = e488->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e488->INVENTORY_KSN;
          long v488 = e488->__av;
          agg473 += (v488 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1905.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se1906.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1907.modify(inventory_locn)))));
          e488 = e488->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_473 += agg473;
      DOUBLE_TYPE agg474 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e489 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e489) {
          long inventory_locn = e489->INVENTORY_LOCN;
          long inventory_dateid = e489->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e489->INVENTORY_KSN;
          long v489 = e489->__av;
          agg474 += (v489 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1909.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se1910.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1911.modify(inventory_locn)))));
          e489 = e489->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_474 += agg474;
      DOUBLE_TYPE agg475 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e490 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e490) {
          long inventory_locn = e490->INVENTORY_LOCN;
          long inventory_dateid = e490->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e490->INVENTORY_KSN;
          long v490 = e490->__av;
          agg475 += (v490 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1913.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se1914.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1915.modify(inventory_locn)))));
          e490 = e490->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_475 += agg475;
      DOUBLE_TYPE agg476 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e491 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e491) {
          long inventory_locn = e491->INVENTORY_LOCN;
          long inventory_dateid = e491->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e491->INVENTORY_KSN;
          long v491 = e491->__av;
          agg476 += (v491 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se1917.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1918.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1919.modify(inventory_locn)))));
          e491 = e491->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_476 += agg476;
      DOUBLE_TYPE agg477 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e492 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e492) {
          long inventory_locn = e492->INVENTORY_LOCN;
          long inventory_dateid = e492->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e492->INVENTORY_KSN;
          long v492 = e492->__av;
          agg477 += (v492 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se1921.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1922.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1923.modify(inventory_locn)))));
          e492 = e492->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_477 += agg477;
      DOUBLE_TYPE agg478 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e493 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e493) {
          long inventory_locn = e493->INVENTORY_LOCN;
          long inventory_dateid = e493->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e493->INVENTORY_KSN;
          long v493 = e493->__av;
          agg478 += (v493 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se1925.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1926.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1927.modify(inventory_locn)))));
          e493 = e493->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_478 += agg478;
      DOUBLE_TYPE agg479 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e494 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e494) {
          long inventory_locn = e494->INVENTORY_LOCN;
          long inventory_dateid = e494->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e494->INVENTORY_KSN;
          long v494 = e494->__av;
          agg479 += (v494 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se1929.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1930.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1931.modify(inventory_locn)))));
          e494 = e494->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_479 += agg479;
      DOUBLE_TYPE agg480 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e495 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e495) {
          long inventory_locn = e495->INVENTORY_LOCN;
          long inventory_dateid = e495->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e495->INVENTORY_KSN;
          long v495 = e495->__av;
          agg480 += (v495 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se1933.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1934.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1935.modify(inventory_locn)))));
          e495 = e495->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_480 += agg480;
      DOUBLE_TYPE agg481 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e496 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e496) {
          long inventory_locn = e496->INVENTORY_LOCN;
          long inventory_dateid = e496->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e496->INVENTORY_KSN;
          long v496 = e496->__av;
          agg481 += (v496 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se1937.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1938.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.getValueOrDefault(se1939.modify(inventory_locn)))));
          e496 = e496->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_481 += agg481;
      DOUBLE_TYPE agg482 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e497 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e497) {
          long inventory_locn = e497->INVENTORY_LOCN;
          long inventory_dateid = e497->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e497->INVENTORY_KSN;
          long v497 = e497->__av;
          agg482 += (v497 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1941.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1942.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_482INVENTORY1_P_3.getValueOrDefault(se1943.modify(inventory_locn)))));
          e497 = e497->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_482 += agg482;
      DOUBLE_TYPE agg483 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e498 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e498) {
          long inventory_locn = e498->INVENTORY_LOCN;
          long inventory_dateid = e498->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e498->INVENTORY_KSN;
          long v498 = e498->__av;
          agg483 += (v498 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1945.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1946.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_483INVENTORY1_P_3.getValueOrDefault(se1947.modify(inventory_locn)))));
          e498 = e498->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_483 += agg483;
      DOUBLE_TYPE agg484 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e499 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e499) {
          long inventory_locn = e499->INVENTORY_LOCN;
          long inventory_dateid = e499->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e499->INVENTORY_KSN;
          long v499 = e499->__av;
          agg484 += (v499 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1949.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1950.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_484INVENTORY1_P_3.getValueOrDefault(se1951.modify(inventory_locn)))));
          e499 = e499->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_484 += agg484;
      DOUBLE_TYPE agg485 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e500 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e500) {
          long inventory_locn = e500->INVENTORY_LOCN;
          long inventory_dateid = e500->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e500->INVENTORY_KSN;
          long v500 = e500->__av;
          agg485 += (v500 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1953.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1954.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_485INVENTORY1_P_3.getValueOrDefault(se1955.modify(inventory_locn)))));
          e500 = e500->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_485 += agg485;
      DOUBLE_TYPE agg486 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e501 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e501) {
          long inventory_locn = e501->INVENTORY_LOCN;
          long inventory_dateid = e501->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e501->INVENTORY_KSN;
          long v501 = e501->__av;
          agg486 += (v501 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1957.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1958.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_486INVENTORY1_P_3.getValueOrDefault(se1959.modify(inventory_locn)))));
          e501 = e501->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_486 += agg486;
      DOUBLE_TYPE agg487 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e502 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e502) {
          long inventory_locn = e502->INVENTORY_LOCN;
          long inventory_dateid = e502->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e502->INVENTORY_KSN;
          long v502 = e502->__av;
          agg487 += (v502 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1961.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1962.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_487INVENTORY1_P_3.getValueOrDefault(se1963.modify(inventory_locn)))));
          e502 = e502->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_487 += agg487;
      DOUBLE_TYPE agg488 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e503 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e503) {
          long inventory_locn = e503->INVENTORY_LOCN;
          long inventory_dateid = e503->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e503->INVENTORY_KSN;
          long v503 = e503->__av;
          agg488 += (v503 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1965.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1966.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_488INVENTORY1_P_3.getValueOrDefault(se1967.modify(inventory_locn)))));
          e503 = e503->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_488 += agg488;
      DOUBLE_TYPE agg489 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e504 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e504) {
          long inventory_locn = e504->INVENTORY_LOCN;
          long inventory_dateid = e504->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e504->INVENTORY_KSN;
          long v504 = e504->__av;
          agg489 += (v504 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1969.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1970.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_489INVENTORY1_P_3.getValueOrDefault(se1971.modify(inventory_locn)))));
          e504 = e504->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_489 += agg489;
      DOUBLE_TYPE agg490 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e505 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e505) {
          long inventory_locn = e505->INVENTORY_LOCN;
          long inventory_dateid = e505->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e505->INVENTORY_KSN;
          long v505 = e505->__av;
          agg490 += (v505 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1973.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1974.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_490INVENTORY1_P_3.getValueOrDefault(se1975.modify(inventory_locn)))));
          e505 = e505->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_490 += agg490;
      DOUBLE_TYPE agg491 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e506 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e506) {
          long inventory_locn = e506->INVENTORY_LOCN;
          long inventory_dateid = e506->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e506->INVENTORY_KSN;
          long v506 = e506->__av;
          agg491 += (v506 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1977.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1978.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_491INVENTORY1_P_3.getValueOrDefault(se1979.modify(inventory_locn)))));
          e506 = e506->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_491 += agg491;
      DOUBLE_TYPE agg492 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e507 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e507) {
          long inventory_locn = e507->INVENTORY_LOCN;
          long inventory_dateid = e507->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e507->INVENTORY_KSN;
          long v507 = e507->__av;
          agg492 += (v507 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1981.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1982.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_492INVENTORY1_P_3.getValueOrDefault(se1983.modify(inventory_locn)))));
          e507 = e507->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_492 += agg492;
      DOUBLE_TYPE agg493 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e508 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e508) {
          long inventory_locn = e508->INVENTORY_LOCN;
          long inventory_dateid = e508->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e508->INVENTORY_KSN;
          long v508 = e508->__av;
          agg493 += (v508 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1985.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1986.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_493INVENTORY1_P_3.getValueOrDefault(se1987.modify(inventory_locn)))));
          e508 = e508->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_493 += agg493;
      DOUBLE_TYPE agg494 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e509 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e509) {
          long inventory_locn = e509->INVENTORY_LOCN;
          long inventory_dateid = e509->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e509->INVENTORY_KSN;
          long v509 = e509->__av;
          agg494 += (v509 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1989.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1990.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_494INVENTORY1_P_3.getValueOrDefault(se1991.modify(inventory_locn)))));
          e509 = e509->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_494 += agg494;
      DOUBLE_TYPE agg495 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e510 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e510) {
          long inventory_locn = e510->INVENTORY_LOCN;
          long inventory_dateid = e510->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e510->INVENTORY_KSN;
          long v510 = e510->__av;
          agg495 += (v510 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1993.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1994.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_495INVENTORY1_P_3.getValueOrDefault(se1995.modify(inventory_locn)))));
          e510 = e510->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_495 += agg495;
      DOUBLE_TYPE agg496 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e511 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e511) {
          long inventory_locn = e511->INVENTORY_LOCN;
          long inventory_dateid = e511->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e511->INVENTORY_KSN;
          long v511 = e511->__av;
          agg496 += (v511 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se1997.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se1998.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_496INVENTORY1_P_3.getValueOrDefault(se1999.modify(inventory_locn)))));
          e511 = e511->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_496 += agg496;
      DOUBLE_TYPE agg497 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e512 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e512) {
          long inventory_locn = e512->INVENTORY_LOCN;
          long inventory_dateid = e512->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e512->INVENTORY_KSN;
          long v512 = e512->__av;
          agg497 += (v512 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2001.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2002.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_497INVENTORY1_P_3.getValueOrDefault(se2003.modify(inventory_locn)))));
          e512 = e512->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_497 += agg497;
      DOUBLE_TYPE agg498 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e513 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e513) {
          long inventory_locn = e513->INVENTORY_LOCN;
          long inventory_dateid = e513->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e513->INVENTORY_KSN;
          long v513 = e513->__av;
          agg498 += (v513 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2005.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2006.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_498INVENTORY1_P_3.getValueOrDefault(se2007.modify(inventory_locn)))));
          e513 = e513->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_498 += agg498;
      DOUBLE_TYPE agg499 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e514 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e514) {
          long inventory_locn = e514->INVENTORY_LOCN;
          long inventory_dateid = e514->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e514->INVENTORY_KSN;
          long v514 = e514->__av;
          agg499 += (v514 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2009.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2010.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_499INVENTORY1_P_3.getValueOrDefault(se2011.modify(inventory_locn)))));
          e514 = e514->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_499 += agg499;
      DOUBLE_TYPE agg500 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e515 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e515) {
          long inventory_locn = e515->INVENTORY_LOCN;
          long inventory_dateid = e515->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e515->INVENTORY_KSN;
          long v515 = e515->__av;
          agg500 += (v515 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2013.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2014.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_500INVENTORY1_P_3.getValueOrDefault(se2015.modify(inventory_locn)))));
          e515 = e515->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_500 += agg500;
      DOUBLE_TYPE agg501 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e516 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e516) {
          long inventory_locn = e516->INVENTORY_LOCN;
          long inventory_dateid = e516->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e516->INVENTORY_KSN;
          long v516 = e516->__av;
          agg501 += (v516 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2017.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2018.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_501INVENTORY1_P_3.getValueOrDefault(se2019.modify(inventory_locn)))));
          e516 = e516->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_501 += agg501;
      DOUBLE_TYPE agg502 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e517 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e517) {
          long inventory_locn = e517->INVENTORY_LOCN;
          long inventory_dateid = e517->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e517->INVENTORY_KSN;
          long v517 = e517->__av;
          agg502 += (v517 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2021.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2022.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2023.modify(inventory_locn)))));
          e517 = e517->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_502 += agg502;
      DOUBLE_TYPE agg503 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e518 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e518) {
          long inventory_locn = e518->INVENTORY_LOCN;
          long inventory_dateid = e518->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e518->INVENTORY_KSN;
          long v518 = e518->__av;
          agg503 += (v518 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2025.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2026.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2027.modify(inventory_locn)))));
          e518 = e518->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_503 += agg503;
      DOUBLE_TYPE agg504 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e519 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e519) {
          long inventory_locn = e519->INVENTORY_LOCN;
          long inventory_dateid = e519->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e519->INVENTORY_KSN;
          long v519 = e519->__av;
          agg504 += (v519 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2029.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2030.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2031.modify(inventory_locn)))));
          e519 = e519->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_504 += agg504;
      DOUBLE_TYPE agg505 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e520 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e520) {
          long inventory_locn = e520->INVENTORY_LOCN;
          long inventory_dateid = e520->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e520->INVENTORY_KSN;
          long v520 = e520->__av;
          agg505 += (v520 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2033.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2034.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2035.modify(inventory_locn)))));
          e520 = e520->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_505 += agg505;
      DOUBLE_TYPE agg506 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e521 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e521) {
          long inventory_locn = e521->INVENTORY_LOCN;
          long inventory_dateid = e521->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e521->INVENTORY_KSN;
          long v521 = e521->__av;
          agg506 += (v521 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2037.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2038.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2039.modify(inventory_locn)))));
          e521 = e521->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_506 += agg506;
      DOUBLE_TYPE agg507 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e522 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e522) {
          long inventory_locn = e522->INVENTORY_LOCN;
          long inventory_dateid = e522->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e522->INVENTORY_KSN;
          long v522 = e522->__av;
          agg507 += (v522 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2041.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2042.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2043.modify(inventory_locn)))));
          e522 = e522->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_507 += agg507;
      DOUBLE_TYPE agg508 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e523 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e523) {
          long inventory_locn = e523->INVENTORY_LOCN;
          long inventory_dateid = e523->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e523->INVENTORY_KSN;
          long v523 = e523->__av;
          agg508 += (v523 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2045.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2046.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2047.modify(inventory_locn)))));
          e523 = e523->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_508 += agg508;
      DOUBLE_TYPE agg509 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e524 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e524) {
          long inventory_locn = e524->INVENTORY_LOCN;
          long inventory_dateid = e524->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e524->INVENTORY_KSN;
          long v524 = e524->__av;
          agg509 += (v524 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2049.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2050.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2051.modify(inventory_locn)))));
          e524 = e524->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_509 += agg509;
      DOUBLE_TYPE agg510 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e525 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e525) {
          long inventory_locn = e525->INVENTORY_LOCN;
          long inventory_dateid = e525->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e525->INVENTORY_KSN;
          long v525 = e525->__av;
          agg510 += (v525 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2053.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2054.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2055.modify(inventory_locn)))));
          e525 = e525->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_510 += agg510;
      DOUBLE_TYPE agg511 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e526 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e526) {
          long inventory_locn = e526->INVENTORY_LOCN;
          long inventory_dateid = e526->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e526->INVENTORY_KSN;
          long v526 = e526->__av;
          agg511 += (v526 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2057.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2058.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.getValueOrDefault(se2059.modify(inventory_locn)))));
          e526 = e526->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_511 += agg511;
      DOUBLE_TYPE agg512 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e527 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e527) {
          long inventory_locn = e527->INVENTORY_LOCN;
          long inventory_dateid = e527->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e527->INVENTORY_KSN;
          long v527 = e527->__av;
          agg512 += (v527 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2061.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2062.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_512INVENTORY1_P_3.getValueOrDefault(se2063.modify(inventory_locn)))));
          e527 = e527->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_512 += agg512;
      DOUBLE_TYPE agg513 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e528 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e528) {
          long inventory_locn = e528->INVENTORY_LOCN;
          long inventory_dateid = e528->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e528->INVENTORY_KSN;
          long v528 = e528->__av;
          agg513 += (v528 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2065.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2066.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_513INVENTORY1_P_3.getValueOrDefault(se2067.modify(inventory_locn)))));
          e528 = e528->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_513 += agg513;
      DOUBLE_TYPE agg514 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e529 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e529) {
          long inventory_locn = e529->INVENTORY_LOCN;
          long inventory_dateid = e529->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e529->INVENTORY_KSN;
          long v529 = e529->__av;
          agg514 += (v529 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2069.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2070.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_514INVENTORY1_P_3.getValueOrDefault(se2071.modify(inventory_locn)))));
          e529 = e529->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_514 += agg514;
      DOUBLE_TYPE agg515 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e530 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e530) {
          long inventory_locn = e530->INVENTORY_LOCN;
          long inventory_dateid = e530->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e530->INVENTORY_KSN;
          long v530 = e530->__av;
          agg515 += (v530 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2073.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2074.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_515INVENTORY1_P_3.getValueOrDefault(se2075.modify(inventory_locn)))));
          e530 = e530->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_515 += agg515;
      DOUBLE_TYPE agg516 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e531 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e531) {
          long inventory_locn = e531->INVENTORY_LOCN;
          long inventory_dateid = e531->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e531->INVENTORY_KSN;
          long v531 = e531->__av;
          agg516 += (v531 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2077.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2078.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_516INVENTORY1_P_3.getValueOrDefault(se2079.modify(inventory_locn)))));
          e531 = e531->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_516 += agg516;
      DOUBLE_TYPE agg517 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e532 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e532) {
          long inventory_locn = e532->INVENTORY_LOCN;
          long inventory_dateid = e532->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e532->INVENTORY_KSN;
          long v532 = e532->__av;
          agg517 += (v532 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2081.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2082.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_517INVENTORY1_P_3.getValueOrDefault(se2083.modify(inventory_locn)))));
          e532 = e532->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_517 += agg517;
      DOUBLE_TYPE agg518 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e533 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e533) {
          long inventory_locn = e533->INVENTORY_LOCN;
          long inventory_dateid = e533->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e533->INVENTORY_KSN;
          long v533 = e533->__av;
          agg518 += (v533 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2085.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2086.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_518INVENTORY1_P_3.getValueOrDefault(se2087.modify(inventory_locn)))));
          e533 = e533->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_518 += agg518;
      DOUBLE_TYPE agg519 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e534 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e534) {
          long inventory_locn = e534->INVENTORY_LOCN;
          long inventory_dateid = e534->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e534->INVENTORY_KSN;
          long v534 = e534->__av;
          agg519 += (v534 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2089.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2090.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_519INVENTORY1_P_3.getValueOrDefault(se2091.modify(inventory_locn)))));
          e534 = e534->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_519 += agg519;
      DOUBLE_TYPE agg520 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e535 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e535) {
          long inventory_locn = e535->INVENTORY_LOCN;
          long inventory_dateid = e535->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e535->INVENTORY_KSN;
          long v535 = e535->__av;
          agg520 += (v535 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2093.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2094.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_520INVENTORY1_P_3.getValueOrDefault(se2095.modify(inventory_locn)))));
          e535 = e535->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_520 += agg520;
      DOUBLE_TYPE agg521 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e536 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e536) {
          long inventory_locn = e536->INVENTORY_LOCN;
          long inventory_dateid = e536->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e536->INVENTORY_KSN;
          long v536 = e536->__av;
          agg521 += (v536 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2097.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2098.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_521INVENTORY1_P_3.getValueOrDefault(se2099.modify(inventory_locn)))));
          e536 = e536->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_521 += agg521;
      DOUBLE_TYPE agg522 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e537 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e537) {
          long inventory_locn = e537->INVENTORY_LOCN;
          long inventory_dateid = e537->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e537->INVENTORY_KSN;
          long v537 = e537->__av;
          agg522 += (v537 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2101.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2102.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_522INVENTORY1_P_3.getValueOrDefault(se2103.modify(inventory_locn)))));
          e537 = e537->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_522 += agg522;
      DOUBLE_TYPE agg523 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e538 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e538) {
          long inventory_locn = e538->INVENTORY_LOCN;
          long inventory_dateid = e538->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e538->INVENTORY_KSN;
          long v538 = e538->__av;
          agg523 += (v538 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2105.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2106.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_523INVENTORY1_P_3.getValueOrDefault(se2107.modify(inventory_locn)))));
          e538 = e538->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_523 += agg523;
      DOUBLE_TYPE agg524 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e539 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e539) {
          long inventory_locn = e539->INVENTORY_LOCN;
          long inventory_dateid = e539->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e539->INVENTORY_KSN;
          long v539 = e539->__av;
          agg524 += (v539 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2109.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2110.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_524INVENTORY1_P_3.getValueOrDefault(se2111.modify(inventory_locn)))));
          e539 = e539->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_524 += agg524;
      DOUBLE_TYPE agg525 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e540 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e540) {
          long inventory_locn = e540->INVENTORY_LOCN;
          long inventory_dateid = e540->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e540->INVENTORY_KSN;
          long v540 = e540->__av;
          agg525 += (v540 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2113.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2114.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_525INVENTORY1_P_3.getValueOrDefault(se2115.modify(inventory_locn)))));
          e540 = e540->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_525 += agg525;
      DOUBLE_TYPE agg526 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e541 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e541) {
          long inventory_locn = e541->INVENTORY_LOCN;
          long inventory_dateid = e541->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e541->INVENTORY_KSN;
          long v541 = e541->__av;
          agg526 += (v541 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2117.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2118.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_526INVENTORY1_P_3.getValueOrDefault(se2119.modify(inventory_locn)))));
          e541 = e541->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_526 += agg526;
      DOUBLE_TYPE agg527 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e542 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e542) {
          long inventory_locn = e542->INVENTORY_LOCN;
          long inventory_dateid = e542->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e542->INVENTORY_KSN;
          long v542 = e542->__av;
          agg527 += (v542 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2121.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2122.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_527INVENTORY1_P_3.getValueOrDefault(se2123.modify(inventory_locn)))));
          e542 = e542->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_527 += agg527;
      DOUBLE_TYPE agg528 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e543 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e543) {
          long inventory_locn = e543->INVENTORY_LOCN;
          long inventory_dateid = e543->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e543->INVENTORY_KSN;
          long v543 = e543->__av;
          agg528 += (v543 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2125.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2126.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_528INVENTORY1_P_3.getValueOrDefault(se2127.modify(inventory_locn)))));
          e543 = e543->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_528 += agg528;
      DOUBLE_TYPE agg529 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e544 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e544) {
          long inventory_locn = e544->INVENTORY_LOCN;
          long inventory_dateid = e544->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e544->INVENTORY_KSN;
          long v544 = e544->__av;
          agg529 += (v544 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2129.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2130.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_529INVENTORY1_P_3.getValueOrDefault(se2131.modify(inventory_locn)))));
          e544 = e544->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_529 += agg529;
      DOUBLE_TYPE agg530 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e545 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e545) {
          long inventory_locn = e545->INVENTORY_LOCN;
          long inventory_dateid = e545->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e545->INVENTORY_KSN;
          long v545 = e545->__av;
          agg530 += (v545 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2133.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2134.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_530INVENTORY1_P_3.getValueOrDefault(se2135.modify(inventory_locn)))));
          e545 = e545->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_530 += agg530;
      DOUBLE_TYPE agg531 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e546 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e546) {
          long inventory_locn = e546->INVENTORY_LOCN;
          long inventory_dateid = e546->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e546->INVENTORY_KSN;
          long v546 = e546->__av;
          agg531 += (v546 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2137.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2138.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2139.modify(inventory_locn)))));
          e546 = e546->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_531 += agg531;
      DOUBLE_TYPE agg532 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e547 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e547) {
          long inventory_locn = e547->INVENTORY_LOCN;
          long inventory_dateid = e547->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e547->INVENTORY_KSN;
          long v547 = e547->__av;
          agg532 += (v547 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2141.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2142.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2143.modify(inventory_locn)))));
          e547 = e547->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_532 += agg532;
      DOUBLE_TYPE agg533 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e548 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e548) {
          long inventory_locn = e548->INVENTORY_LOCN;
          long inventory_dateid = e548->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e548->INVENTORY_KSN;
          long v548 = e548->__av;
          agg533 += (v548 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2145.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2146.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2147.modify(inventory_locn)))));
          e548 = e548->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_533 += agg533;
      DOUBLE_TYPE agg534 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e549 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e549) {
          long inventory_locn = e549->INVENTORY_LOCN;
          long inventory_dateid = e549->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e549->INVENTORY_KSN;
          long v549 = e549->__av;
          agg534 += (v549 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2149.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2150.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2151.modify(inventory_locn)))));
          e549 = e549->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_534 += agg534;
      DOUBLE_TYPE agg535 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e550 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e550) {
          long inventory_locn = e550->INVENTORY_LOCN;
          long inventory_dateid = e550->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e550->INVENTORY_KSN;
          long v550 = e550->__av;
          agg535 += (v550 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2153.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2154.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2155.modify(inventory_locn)))));
          e550 = e550->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_535 += agg535;
      DOUBLE_TYPE agg536 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e551 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e551) {
          long inventory_locn = e551->INVENTORY_LOCN;
          long inventory_dateid = e551->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e551->INVENTORY_KSN;
          long v551 = e551->__av;
          agg536 += (v551 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2157.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2158.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2159.modify(inventory_locn)))));
          e551 = e551->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_536 += agg536;
      DOUBLE_TYPE agg537 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e552 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e552) {
          long inventory_locn = e552->INVENTORY_LOCN;
          long inventory_dateid = e552->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e552->INVENTORY_KSN;
          long v552 = e552->__av;
          agg537 += (v552 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2161.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2162.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2163.modify(inventory_locn)))));
          e552 = e552->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_537 += agg537;
      DOUBLE_TYPE agg538 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e553 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e553) {
          long inventory_locn = e553->INVENTORY_LOCN;
          long inventory_dateid = e553->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e553->INVENTORY_KSN;
          long v553 = e553->__av;
          agg538 += (v553 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2165.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2166.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2167.modify(inventory_locn)))));
          e553 = e553->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_538 += agg538;
      DOUBLE_TYPE agg539 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e554 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e554) {
          long inventory_locn = e554->INVENTORY_LOCN;
          long inventory_dateid = e554->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e554->INVENTORY_KSN;
          long v554 = e554->__av;
          agg539 += (v554 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2169.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2170.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2171.modify(inventory_locn)))));
          e554 = e554->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_539 += agg539;
      DOUBLE_TYPE agg540 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e555 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e555) {
          long inventory_locn = e555->INVENTORY_LOCN;
          long inventory_dateid = e555->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e555->INVENTORY_KSN;
          long v555 = e555->__av;
          agg540 += (v555 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2173.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2174.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.getValueOrDefault(se2175.modify(inventory_locn)))));
          e555 = e555->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_540 += agg540;
      DOUBLE_TYPE agg541 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e556 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e556) {
          long inventory_locn = e556->INVENTORY_LOCN;
          long inventory_dateid = e556->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e556->INVENTORY_KSN;
          long v556 = e556->__av;
          agg541 += (v556 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2177.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2178.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_541INVENTORY1_P_3.getValueOrDefault(se2179.modify(inventory_locn)))));
          e556 = e556->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_541 += agg541;
      DOUBLE_TYPE agg542 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e557 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e557) {
          long inventory_locn = e557->INVENTORY_LOCN;
          long inventory_dateid = e557->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e557->INVENTORY_KSN;
          long v557 = e557->__av;
          agg542 += (v557 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2181.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2182.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_542INVENTORY1_P_3.getValueOrDefault(se2183.modify(inventory_locn)))));
          e557 = e557->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_542 += agg542;
      DOUBLE_TYPE agg543 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e558 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e558) {
          long inventory_locn = e558->INVENTORY_LOCN;
          long inventory_dateid = e558->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e558->INVENTORY_KSN;
          long v558 = e558->__av;
          agg543 += (v558 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2185.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2186.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_543INVENTORY1_P_3.getValueOrDefault(se2187.modify(inventory_locn)))));
          e558 = e558->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_543 += agg543;
      DOUBLE_TYPE agg544 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e559 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e559) {
          long inventory_locn = e559->INVENTORY_LOCN;
          long inventory_dateid = e559->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e559->INVENTORY_KSN;
          long v559 = e559->__av;
          agg544 += (v559 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2189.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2190.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_544INVENTORY1_P_3.getValueOrDefault(se2191.modify(inventory_locn)))));
          e559 = e559->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_544 += agg544;
      DOUBLE_TYPE agg545 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e560 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e560) {
          long inventory_locn = e560->INVENTORY_LOCN;
          long inventory_dateid = e560->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e560->INVENTORY_KSN;
          long v560 = e560->__av;
          agg545 += (v560 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2193.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2194.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_545INVENTORY1_P_3.getValueOrDefault(se2195.modify(inventory_locn)))));
          e560 = e560->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_545 += agg545;
      DOUBLE_TYPE agg546 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e561 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e561) {
          long inventory_locn = e561->INVENTORY_LOCN;
          long inventory_dateid = e561->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e561->INVENTORY_KSN;
          long v561 = e561->__av;
          agg546 += (v561 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2197.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2198.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_546INVENTORY1_P_3.getValueOrDefault(se2199.modify(inventory_locn)))));
          e561 = e561->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_546 += agg546;
      DOUBLE_TYPE agg547 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e562 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e562) {
          long inventory_locn = e562->INVENTORY_LOCN;
          long inventory_dateid = e562->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e562->INVENTORY_KSN;
          long v562 = e562->__av;
          agg547 += (v562 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2201.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2202.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_547INVENTORY1_P_3.getValueOrDefault(se2203.modify(inventory_locn)))));
          e562 = e562->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_547 += agg547;
      DOUBLE_TYPE agg548 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e563 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e563) {
          long inventory_locn = e563->INVENTORY_LOCN;
          long inventory_dateid = e563->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e563->INVENTORY_KSN;
          long v563 = e563->__av;
          agg548 += (v563 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2205.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2206.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_548INVENTORY1_P_3.getValueOrDefault(se2207.modify(inventory_locn)))));
          e563 = e563->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_548 += agg548;
      DOUBLE_TYPE agg549 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e564 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e564) {
          long inventory_locn = e564->INVENTORY_LOCN;
          long inventory_dateid = e564->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e564->INVENTORY_KSN;
          long v564 = e564->__av;
          agg549 += (v564 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2209.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2210.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_549INVENTORY1_P_3.getValueOrDefault(se2211.modify(inventory_locn)))));
          e564 = e564->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_549 += agg549;
      DOUBLE_TYPE agg550 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e565 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e565) {
          long inventory_locn = e565->INVENTORY_LOCN;
          long inventory_dateid = e565->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e565->INVENTORY_KSN;
          long v565 = e565->__av;
          agg550 += (v565 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2213.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2214.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_550INVENTORY1_P_3.getValueOrDefault(se2215.modify(inventory_locn)))));
          e565 = e565->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_550 += agg550;
      DOUBLE_TYPE agg551 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e566 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e566) {
          long inventory_locn = e566->INVENTORY_LOCN;
          long inventory_dateid = e566->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e566->INVENTORY_KSN;
          long v566 = e566->__av;
          agg551 += (v566 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2217.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2218.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_551INVENTORY1_P_3.getValueOrDefault(se2219.modify(inventory_locn)))));
          e566 = e566->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_551 += agg551;
      DOUBLE_TYPE agg552 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e567 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e567) {
          long inventory_locn = e567->INVENTORY_LOCN;
          long inventory_dateid = e567->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e567->INVENTORY_KSN;
          long v567 = e567->__av;
          agg552 += (v567 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2221.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2222.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_552INVENTORY1_P_3.getValueOrDefault(se2223.modify(inventory_locn)))));
          e567 = e567->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_552 += agg552;
      DOUBLE_TYPE agg553 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e568 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e568) {
          long inventory_locn = e568->INVENTORY_LOCN;
          long inventory_dateid = e568->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e568->INVENTORY_KSN;
          long v568 = e568->__av;
          agg553 += (v568 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2225.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2226.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_553INVENTORY1_P_3.getValueOrDefault(se2227.modify(inventory_locn)))));
          e568 = e568->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_553 += agg553;
      DOUBLE_TYPE agg554 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e569 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e569) {
          long inventory_locn = e569->INVENTORY_LOCN;
          long inventory_dateid = e569->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e569->INVENTORY_KSN;
          long v569 = e569->__av;
          agg554 += (v569 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2229.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2230.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_554INVENTORY1_P_3.getValueOrDefault(se2231.modify(inventory_locn)))));
          e569 = e569->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_554 += agg554;
      DOUBLE_TYPE agg555 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e570 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e570) {
          long inventory_locn = e570->INVENTORY_LOCN;
          long inventory_dateid = e570->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e570->INVENTORY_KSN;
          long v570 = e570->__av;
          agg555 += (v570 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2233.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2234.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_555INVENTORY1_P_3.getValueOrDefault(se2235.modify(inventory_locn)))));
          e570 = e570->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_555 += agg555;
      DOUBLE_TYPE agg556 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e571 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e571) {
          long inventory_locn = e571->INVENTORY_LOCN;
          long inventory_dateid = e571->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e571->INVENTORY_KSN;
          long v571 = e571->__av;
          agg556 += (v571 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2237.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2238.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_556INVENTORY1_P_3.getValueOrDefault(se2239.modify(inventory_locn)))));
          e571 = e571->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_556 += agg556;
      DOUBLE_TYPE agg557 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e572 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e572) {
          long inventory_locn = e572->INVENTORY_LOCN;
          long inventory_dateid = e572->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e572->INVENTORY_KSN;
          long v572 = e572->__av;
          agg557 += (v572 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2241.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2242.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_557INVENTORY1_P_3.getValueOrDefault(se2243.modify(inventory_locn)))));
          e572 = e572->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_557 += agg557;
      DOUBLE_TYPE agg558 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e573 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e573) {
          long inventory_locn = e573->INVENTORY_LOCN;
          long inventory_dateid = e573->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e573->INVENTORY_KSN;
          long v573 = e573->__av;
          agg558 += (v573 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2245.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2246.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_558INVENTORY1_P_3.getValueOrDefault(se2247.modify(inventory_locn)))));
          e573 = e573->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_558 += agg558;
      DOUBLE_TYPE agg559 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e574 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e574) {
          long inventory_locn = e574->INVENTORY_LOCN;
          long inventory_dateid = e574->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e574->INVENTORY_KSN;
          long v574 = e574->__av;
          agg559 += (v574 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2249.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2250.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2251.modify(inventory_locn)))));
          e574 = e574->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_559 += agg559;
      DOUBLE_TYPE agg560 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e575 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e575) {
          long inventory_locn = e575->INVENTORY_LOCN;
          long inventory_dateid = e575->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e575->INVENTORY_KSN;
          long v575 = e575->__av;
          agg560 += (v575 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2253.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2254.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2255.modify(inventory_locn)))));
          e575 = e575->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_560 += agg560;
      DOUBLE_TYPE agg561 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e576 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e576) {
          long inventory_locn = e576->INVENTORY_LOCN;
          long inventory_dateid = e576->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e576->INVENTORY_KSN;
          long v576 = e576->__av;
          agg561 += (v576 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2257.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2258.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2259.modify(inventory_locn)))));
          e576 = e576->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_561 += agg561;
      DOUBLE_TYPE agg562 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e577 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e577) {
          long inventory_locn = e577->INVENTORY_LOCN;
          long inventory_dateid = e577->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e577->INVENTORY_KSN;
          long v577 = e577->__av;
          agg562 += (v577 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2261.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2262.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2263.modify(inventory_locn)))));
          e577 = e577->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_562 += agg562;
      DOUBLE_TYPE agg563 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e578 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e578) {
          long inventory_locn = e578->INVENTORY_LOCN;
          long inventory_dateid = e578->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e578->INVENTORY_KSN;
          long v578 = e578->__av;
          agg563 += (v578 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2265.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2266.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2267.modify(inventory_locn)))));
          e578 = e578->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_563 += agg563;
      DOUBLE_TYPE agg564 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e579 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e579) {
          long inventory_locn = e579->INVENTORY_LOCN;
          long inventory_dateid = e579->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e579->INVENTORY_KSN;
          long v579 = e579->__av;
          agg564 += (v579 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2269.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2270.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2271.modify(inventory_locn)))));
          e579 = e579->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_564 += agg564;
      DOUBLE_TYPE agg565 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e580 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e580) {
          long inventory_locn = e580->INVENTORY_LOCN;
          long inventory_dateid = e580->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e580->INVENTORY_KSN;
          long v580 = e580->__av;
          agg565 += (v580 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2273.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2274.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2275.modify(inventory_locn)))));
          e580 = e580->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_565 += agg565;
      DOUBLE_TYPE agg566 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e581 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e581) {
          long inventory_locn = e581->INVENTORY_LOCN;
          long inventory_dateid = e581->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e581->INVENTORY_KSN;
          long v581 = e581->__av;
          agg566 += (v581 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2277.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2278.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2279.modify(inventory_locn)))));
          e581 = e581->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_566 += agg566;
      DOUBLE_TYPE agg567 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e582 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e582) {
          long inventory_locn = e582->INVENTORY_LOCN;
          long inventory_dateid = e582->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e582->INVENTORY_KSN;
          long v582 = e582->__av;
          agg567 += (v582 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2281.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2282.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2283.modify(inventory_locn)))));
          e582 = e582->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_567 += agg567;
      DOUBLE_TYPE agg568 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e583 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e583) {
          long inventory_locn = e583->INVENTORY_LOCN;
          long inventory_dateid = e583->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e583->INVENTORY_KSN;
          long v583 = e583->__av;
          agg568 += (v583 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2285.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2286.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.getValueOrDefault(se2287.modify(inventory_locn)))));
          e583 = e583->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_568 += agg568;
      DOUBLE_TYPE agg569 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e584 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e584) {
          long inventory_locn = e584->INVENTORY_LOCN;
          long inventory_dateid = e584->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e584->INVENTORY_KSN;
          long v584 = e584->__av;
          agg569 += (v584 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2289.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2290.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_569INVENTORY1_P_3.getValueOrDefault(se2291.modify(inventory_locn)))));
          e584 = e584->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_569 += agg569;
      DOUBLE_TYPE agg570 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e585 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e585) {
          long inventory_locn = e585->INVENTORY_LOCN;
          long inventory_dateid = e585->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e585->INVENTORY_KSN;
          long v585 = e585->__av;
          agg570 += (v585 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2293.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2294.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_570INVENTORY1_P_3.getValueOrDefault(se2295.modify(inventory_locn)))));
          e585 = e585->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_570 += agg570;
      DOUBLE_TYPE agg571 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e586 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e586) {
          long inventory_locn = e586->INVENTORY_LOCN;
          long inventory_dateid = e586->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e586->INVENTORY_KSN;
          long v586 = e586->__av;
          agg571 += (v586 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2297.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2298.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_571INVENTORY1_P_3.getValueOrDefault(se2299.modify(inventory_locn)))));
          e586 = e586->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_571 += agg571;
      DOUBLE_TYPE agg572 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e587 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e587) {
          long inventory_locn = e587->INVENTORY_LOCN;
          long inventory_dateid = e587->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e587->INVENTORY_KSN;
          long v587 = e587->__av;
          agg572 += (v587 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2301.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2302.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_572INVENTORY1_P_3.getValueOrDefault(se2303.modify(inventory_locn)))));
          e587 = e587->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_572 += agg572;
      DOUBLE_TYPE agg573 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e588 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e588) {
          long inventory_locn = e588->INVENTORY_LOCN;
          long inventory_dateid = e588->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e588->INVENTORY_KSN;
          long v588 = e588->__av;
          agg573 += (v588 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2305.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2306.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_573INVENTORY1_P_3.getValueOrDefault(se2307.modify(inventory_locn)))));
          e588 = e588->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_573 += agg573;
      DOUBLE_TYPE agg574 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e589 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e589) {
          long inventory_locn = e589->INVENTORY_LOCN;
          long inventory_dateid = e589->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e589->INVENTORY_KSN;
          long v589 = e589->__av;
          agg574 += (v589 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2309.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2310.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_574INVENTORY1_P_3.getValueOrDefault(se2311.modify(inventory_locn)))));
          e589 = e589->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_574 += agg574;
      DOUBLE_TYPE agg575 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e590 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e590) {
          long inventory_locn = e590->INVENTORY_LOCN;
          long inventory_dateid = e590->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e590->INVENTORY_KSN;
          long v590 = e590->__av;
          agg575 += (v590 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2313.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2314.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_575INVENTORY1_P_3.getValueOrDefault(se2315.modify(inventory_locn)))));
          e590 = e590->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_575 += agg575;
      DOUBLE_TYPE agg576 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e591 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e591) {
          long inventory_locn = e591->INVENTORY_LOCN;
          long inventory_dateid = e591->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e591->INVENTORY_KSN;
          long v591 = e591->__av;
          agg576 += (v591 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2317.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2318.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_576INVENTORY1_P_3.getValueOrDefault(se2319.modify(inventory_locn)))));
          e591 = e591->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_576 += agg576;
      DOUBLE_TYPE agg577 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e592 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e592) {
          long inventory_locn = e592->INVENTORY_LOCN;
          long inventory_dateid = e592->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e592->INVENTORY_KSN;
          long v592 = e592->__av;
          agg577 += (v592 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2321.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2322.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_577INVENTORY1_P_3.getValueOrDefault(se2323.modify(inventory_locn)))));
          e592 = e592->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_577 += agg577;
      DOUBLE_TYPE agg578 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e593 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e593) {
          long inventory_locn = e593->INVENTORY_LOCN;
          long inventory_dateid = e593->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e593->INVENTORY_KSN;
          long v593 = e593->__av;
          agg578 += (v593 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2325.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2326.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_578INVENTORY1_P_3.getValueOrDefault(se2327.modify(inventory_locn)))));
          e593 = e593->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_578 += agg578;
      DOUBLE_TYPE agg579 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e594 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e594) {
          long inventory_locn = e594->INVENTORY_LOCN;
          long inventory_dateid = e594->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e594->INVENTORY_KSN;
          long v594 = e594->__av;
          agg579 += (v594 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2329.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2330.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_579INVENTORY1_P_3.getValueOrDefault(se2331.modify(inventory_locn)))));
          e594 = e594->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_579 += agg579;
      DOUBLE_TYPE agg580 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e595 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e595) {
          long inventory_locn = e595->INVENTORY_LOCN;
          long inventory_dateid = e595->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e595->INVENTORY_KSN;
          long v595 = e595->__av;
          agg580 += (v595 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2333.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2334.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_580INVENTORY1_P_3.getValueOrDefault(se2335.modify(inventory_locn)))));
          e595 = e595->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_580 += agg580;
      DOUBLE_TYPE agg581 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e596 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e596) {
          long inventory_locn = e596->INVENTORY_LOCN;
          long inventory_dateid = e596->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e596->INVENTORY_KSN;
          long v596 = e596->__av;
          agg581 += (v596 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2337.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2338.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_581INVENTORY1_P_3.getValueOrDefault(se2339.modify(inventory_locn)))));
          e596 = e596->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_581 += agg581;
      DOUBLE_TYPE agg582 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e597 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e597) {
          long inventory_locn = e597->INVENTORY_LOCN;
          long inventory_dateid = e597->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e597->INVENTORY_KSN;
          long v597 = e597->__av;
          agg582 += (v597 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2341.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2342.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_582INVENTORY1_P_3.getValueOrDefault(se2343.modify(inventory_locn)))));
          e597 = e597->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_582 += agg582;
      DOUBLE_TYPE agg583 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e598 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e598) {
          long inventory_locn = e598->INVENTORY_LOCN;
          long inventory_dateid = e598->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e598->INVENTORY_KSN;
          long v598 = e598->__av;
          agg583 += (v598 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2345.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2346.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_583INVENTORY1_P_3.getValueOrDefault(se2347.modify(inventory_locn)))));
          e598 = e598->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_583 += agg583;
      DOUBLE_TYPE agg584 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e599 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e599) {
          long inventory_locn = e599->INVENTORY_LOCN;
          long inventory_dateid = e599->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e599->INVENTORY_KSN;
          long v599 = e599->__av;
          agg584 += (v599 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2349.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2350.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_584INVENTORY1_P_3.getValueOrDefault(se2351.modify(inventory_locn)))));
          e599 = e599->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_584 += agg584;
      DOUBLE_TYPE agg585 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e600 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e600) {
          long inventory_locn = e600->INVENTORY_LOCN;
          long inventory_dateid = e600->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e600->INVENTORY_KSN;
          long v600 = e600->__av;
          agg585 += (v600 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2353.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2354.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_585INVENTORY1_P_3.getValueOrDefault(se2355.modify(inventory_locn)))));
          e600 = e600->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_585 += agg585;
      DOUBLE_TYPE agg586 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e601 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e601) {
          long inventory_locn = e601->INVENTORY_LOCN;
          long inventory_dateid = e601->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e601->INVENTORY_KSN;
          long v601 = e601->__av;
          agg586 += (v601 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2357.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2358.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2359.modify(inventory_locn)))));
          e601 = e601->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_586 += agg586;
      DOUBLE_TYPE agg587 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e602 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e602) {
          long inventory_locn = e602->INVENTORY_LOCN;
          long inventory_dateid = e602->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e602->INVENTORY_KSN;
          long v602 = e602->__av;
          agg587 += (v602 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2361.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2362.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2363.modify(inventory_locn)))));
          e602 = e602->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_587 += agg587;
      DOUBLE_TYPE agg588 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e603 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e603) {
          long inventory_locn = e603->INVENTORY_LOCN;
          long inventory_dateid = e603->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e603->INVENTORY_KSN;
          long v603 = e603->__av;
          agg588 += (v603 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2365.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2366.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2367.modify(inventory_locn)))));
          e603 = e603->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_588 += agg588;
      DOUBLE_TYPE agg589 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e604 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e604) {
          long inventory_locn = e604->INVENTORY_LOCN;
          long inventory_dateid = e604->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e604->INVENTORY_KSN;
          long v604 = e604->__av;
          agg589 += (v604 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2369.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2370.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2371.modify(inventory_locn)))));
          e604 = e604->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_589 += agg589;
      DOUBLE_TYPE agg590 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e605 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e605) {
          long inventory_locn = e605->INVENTORY_LOCN;
          long inventory_dateid = e605->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e605->INVENTORY_KSN;
          long v605 = e605->__av;
          agg590 += (v605 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2373.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2374.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2375.modify(inventory_locn)))));
          e605 = e605->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_590 += agg590;
      DOUBLE_TYPE agg591 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e606 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e606) {
          long inventory_locn = e606->INVENTORY_LOCN;
          long inventory_dateid = e606->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e606->INVENTORY_KSN;
          long v606 = e606->__av;
          agg591 += (v606 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2377.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2378.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2379.modify(inventory_locn)))));
          e606 = e606->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_591 += agg591;
      DOUBLE_TYPE agg592 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e607 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e607) {
          long inventory_locn = e607->INVENTORY_LOCN;
          long inventory_dateid = e607->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e607->INVENTORY_KSN;
          long v607 = e607->__av;
          agg592 += (v607 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2381.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2382.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2383.modify(inventory_locn)))));
          e607 = e607->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_592 += agg592;
      DOUBLE_TYPE agg593 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e608 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e608) {
          long inventory_locn = e608->INVENTORY_LOCN;
          long inventory_dateid = e608->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e608->INVENTORY_KSN;
          long v608 = e608->__av;
          agg593 += (v608 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2385.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2386.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2387.modify(inventory_locn)))));
          e608 = e608->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_593 += agg593;
      DOUBLE_TYPE agg594 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e609 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e609) {
          long inventory_locn = e609->INVENTORY_LOCN;
          long inventory_dateid = e609->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e609->INVENTORY_KSN;
          long v609 = e609->__av;
          agg594 += (v609 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2389.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2390.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2391.modify(inventory_locn)))));
          e609 = e609->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_594 += agg594;
      DOUBLE_TYPE agg595 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e610 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e610) {
          long inventory_locn = e610->INVENTORY_LOCN;
          long inventory_dateid = e610->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e610->INVENTORY_KSN;
          long v610 = e610->__av;
          agg595 += (v610 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2393.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2394.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.getValueOrDefault(se2395.modify(inventory_locn)))));
          e610 = e610->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_595 += agg595;
      DOUBLE_TYPE agg596 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e611 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e611) {
          long inventory_locn = e611->INVENTORY_LOCN;
          long inventory_dateid = e611->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e611->INVENTORY_KSN;
          long v611 = e611->__av;
          agg596 += (v611 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2397.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2398.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_596INVENTORY1_P_3.getValueOrDefault(se2399.modify(inventory_locn)))));
          e611 = e611->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_596 += agg596;
      DOUBLE_TYPE agg597 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e612 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e612) {
          long inventory_locn = e612->INVENTORY_LOCN;
          long inventory_dateid = e612->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e612->INVENTORY_KSN;
          long v612 = e612->__av;
          agg597 += (v612 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2401.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2402.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_597INVENTORY1_P_3.getValueOrDefault(se2403.modify(inventory_locn)))));
          e612 = e612->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_597 += agg597;
      DOUBLE_TYPE agg598 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e613 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e613) {
          long inventory_locn = e613->INVENTORY_LOCN;
          long inventory_dateid = e613->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e613->INVENTORY_KSN;
          long v613 = e613->__av;
          agg598 += (v613 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2405.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2406.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_598INVENTORY1_P_3.getValueOrDefault(se2407.modify(inventory_locn)))));
          e613 = e613->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_598 += agg598;
      DOUBLE_TYPE agg599 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e614 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e614) {
          long inventory_locn = e614->INVENTORY_LOCN;
          long inventory_dateid = e614->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e614->INVENTORY_KSN;
          long v614 = e614->__av;
          agg599 += (v614 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2409.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2410.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_599INVENTORY1_P_3.getValueOrDefault(se2411.modify(inventory_locn)))));
          e614 = e614->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_599 += agg599;
      DOUBLE_TYPE agg600 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e615 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e615) {
          long inventory_locn = e615->INVENTORY_LOCN;
          long inventory_dateid = e615->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e615->INVENTORY_KSN;
          long v615 = e615->__av;
          agg600 += (v615 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2413.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2414.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_600INVENTORY1_P_3.getValueOrDefault(se2415.modify(inventory_locn)))));
          e615 = e615->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_600 += agg600;
      DOUBLE_TYPE agg601 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e616 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e616) {
          long inventory_locn = e616->INVENTORY_LOCN;
          long inventory_dateid = e616->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e616->INVENTORY_KSN;
          long v616 = e616->__av;
          agg601 += (v616 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2417.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2418.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_601INVENTORY1_P_3.getValueOrDefault(se2419.modify(inventory_locn)))));
          e616 = e616->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_601 += agg601;
      DOUBLE_TYPE agg602 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e617 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e617) {
          long inventory_locn = e617->INVENTORY_LOCN;
          long inventory_dateid = e617->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e617->INVENTORY_KSN;
          long v617 = e617->__av;
          agg602 += (v617 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2421.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2422.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_602INVENTORY1_P_3.getValueOrDefault(se2423.modify(inventory_locn)))));
          e617 = e617->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_602 += agg602;
      DOUBLE_TYPE agg603 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e618 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e618) {
          long inventory_locn = e618->INVENTORY_LOCN;
          long inventory_dateid = e618->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e618->INVENTORY_KSN;
          long v618 = e618->__av;
          agg603 += (v618 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2425.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2426.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_603INVENTORY1_P_3.getValueOrDefault(se2427.modify(inventory_locn)))));
          e618 = e618->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_603 += agg603;
      DOUBLE_TYPE agg604 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e619 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e619) {
          long inventory_locn = e619->INVENTORY_LOCN;
          long inventory_dateid = e619->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e619->INVENTORY_KSN;
          long v619 = e619->__av;
          agg604 += (v619 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2429.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2430.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_604INVENTORY1_P_3.getValueOrDefault(se2431.modify(inventory_locn)))));
          e619 = e619->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_604 += agg604;
      DOUBLE_TYPE agg605 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e620 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e620) {
          long inventory_locn = e620->INVENTORY_LOCN;
          long inventory_dateid = e620->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e620->INVENTORY_KSN;
          long v620 = e620->__av;
          agg605 += (v620 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2433.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2434.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_605INVENTORY1_P_3.getValueOrDefault(se2435.modify(inventory_locn)))));
          e620 = e620->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_605 += agg605;
      DOUBLE_TYPE agg606 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e621 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e621) {
          long inventory_locn = e621->INVENTORY_LOCN;
          long inventory_dateid = e621->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e621->INVENTORY_KSN;
          long v621 = e621->__av;
          agg606 += (v621 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2437.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2438.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_606INVENTORY1_P_3.getValueOrDefault(se2439.modify(inventory_locn)))));
          e621 = e621->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_606 += agg606;
      DOUBLE_TYPE agg607 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e622 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e622) {
          long inventory_locn = e622->INVENTORY_LOCN;
          long inventory_dateid = e622->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e622->INVENTORY_KSN;
          long v622 = e622->__av;
          agg607 += (v622 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2441.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2442.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_607INVENTORY1_P_3.getValueOrDefault(se2443.modify(inventory_locn)))));
          e622 = e622->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_607 += agg607;
      DOUBLE_TYPE agg608 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e623 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e623) {
          long inventory_locn = e623->INVENTORY_LOCN;
          long inventory_dateid = e623->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e623->INVENTORY_KSN;
          long v623 = e623->__av;
          agg608 += (v623 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2445.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2446.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_608INVENTORY1_P_3.getValueOrDefault(se2447.modify(inventory_locn)))));
          e623 = e623->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_608 += agg608;
      DOUBLE_TYPE agg609 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e624 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e624) {
          long inventory_locn = e624->INVENTORY_LOCN;
          long inventory_dateid = e624->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e624->INVENTORY_KSN;
          long v624 = e624->__av;
          agg609 += (v624 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2449.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2450.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_609INVENTORY1_P_3.getValueOrDefault(se2451.modify(inventory_locn)))));
          e624 = e624->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_609 += agg609;
      DOUBLE_TYPE agg610 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e625 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e625) {
          long inventory_locn = e625->INVENTORY_LOCN;
          long inventory_dateid = e625->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e625->INVENTORY_KSN;
          long v625 = e625->__av;
          agg610 += (v625 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2453.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2454.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_610INVENTORY1_P_3.getValueOrDefault(se2455.modify(inventory_locn)))));
          e625 = e625->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_610 += agg610;
      DOUBLE_TYPE agg611 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e626 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e626) {
          long inventory_locn = e626->INVENTORY_LOCN;
          long inventory_dateid = e626->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e626->INVENTORY_KSN;
          long v626 = e626->__av;
          agg611 += (v626 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2457.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2458.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_611INVENTORY1_P_3.getValueOrDefault(se2459.modify(inventory_locn)))));
          e626 = e626->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_611 += agg611;
      DOUBLE_TYPE agg612 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e627 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e627) {
          long inventory_locn = e627->INVENTORY_LOCN;
          long inventory_dateid = e627->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e627->INVENTORY_KSN;
          long v627 = e627->__av;
          agg612 += (v627 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2461.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2462.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2463.modify(inventory_locn)))));
          e627 = e627->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_612 += agg612;
      DOUBLE_TYPE agg613 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e628 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e628) {
          long inventory_locn = e628->INVENTORY_LOCN;
          long inventory_dateid = e628->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e628->INVENTORY_KSN;
          long v628 = e628->__av;
          agg613 += (v628 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2465.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2466.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2467.modify(inventory_locn)))));
          e628 = e628->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_613 += agg613;
      DOUBLE_TYPE agg614 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e629 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e629) {
          long inventory_locn = e629->INVENTORY_LOCN;
          long inventory_dateid = e629->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e629->INVENTORY_KSN;
          long v629 = e629->__av;
          agg614 += (v629 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2469.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2470.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2471.modify(inventory_locn)))));
          e629 = e629->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_614 += agg614;
      DOUBLE_TYPE agg615 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e630 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e630) {
          long inventory_locn = e630->INVENTORY_LOCN;
          long inventory_dateid = e630->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e630->INVENTORY_KSN;
          long v630 = e630->__av;
          agg615 += (v630 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2473.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2474.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2475.modify(inventory_locn)))));
          e630 = e630->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_615 += agg615;
      DOUBLE_TYPE agg616 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e631 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e631) {
          long inventory_locn = e631->INVENTORY_LOCN;
          long inventory_dateid = e631->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e631->INVENTORY_KSN;
          long v631 = e631->__av;
          agg616 += (v631 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2477.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2478.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2479.modify(inventory_locn)))));
          e631 = e631->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_616 += agg616;
      DOUBLE_TYPE agg617 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e632 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e632) {
          long inventory_locn = e632->INVENTORY_LOCN;
          long inventory_dateid = e632->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e632->INVENTORY_KSN;
          long v632 = e632->__av;
          agg617 += (v632 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2481.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2482.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2483.modify(inventory_locn)))));
          e632 = e632->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_617 += agg617;
      DOUBLE_TYPE agg618 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e633 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e633) {
          long inventory_locn = e633->INVENTORY_LOCN;
          long inventory_dateid = e633->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e633->INVENTORY_KSN;
          long v633 = e633->__av;
          agg618 += (v633 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2485.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2486.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2487.modify(inventory_locn)))));
          e633 = e633->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_618 += agg618;
      DOUBLE_TYPE agg619 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e634 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e634) {
          long inventory_locn = e634->INVENTORY_LOCN;
          long inventory_dateid = e634->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e634->INVENTORY_KSN;
          long v634 = e634->__av;
          agg619 += (v634 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2489.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2490.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2491.modify(inventory_locn)))));
          e634 = e634->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_619 += agg619;
      DOUBLE_TYPE agg620 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e635 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e635) {
          long inventory_locn = e635->INVENTORY_LOCN;
          long inventory_dateid = e635->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e635->INVENTORY_KSN;
          long v635 = e635->__av;
          agg620 += (v635 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2493.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2494.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2495.modify(inventory_locn)))));
          e635 = e635->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_620 += agg620;
      DOUBLE_TYPE agg621 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e636 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e636) {
          long inventory_locn = e636->INVENTORY_LOCN;
          long inventory_dateid = e636->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e636->INVENTORY_KSN;
          long v636 = e636->__av;
          agg621 += (v636 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2497.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2498.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.getValueOrDefault(se2499.modify(inventory_locn)))));
          e636 = e636->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_621 += agg621;
      long agg622 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e637 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e637) {
          long inventory_locn = e637->INVENTORY_LOCN;
          long inventory_dateid = e637->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e637->INVENTORY_KSN;
          long v637 = e637->__av;
          agg622 += (v637 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2501.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2502.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_622INVENTORY1_P_3.getValueOrDefault(se2503.modify(inventory_locn)))));
          e637 = e637->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_622 += agg622;
      long agg623 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e638 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e638) {
          long inventory_locn = e638->INVENTORY_LOCN;
          long inventory_dateid = e638->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e638->INVENTORY_KSN;
          long v638 = e638->__av;
          agg623 += (v638 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2505.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2506.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_623INVENTORY1_P_3.getValueOrDefault(se2507.modify(inventory_locn)))));
          e638 = e638->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_623 += agg623;
      long agg624 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e639 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e639) {
          long inventory_locn = e639->INVENTORY_LOCN;
          long inventory_dateid = e639->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e639->INVENTORY_KSN;
          long v639 = e639->__av;
          agg624 += (v639 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2509.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2510.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_624INVENTORY1_P_3.getValueOrDefault(se2511.modify(inventory_locn)))));
          e639 = e639->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_624 += agg624;
      long agg625 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e640 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e640) {
          long inventory_locn = e640->INVENTORY_LOCN;
          long inventory_dateid = e640->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e640->INVENTORY_KSN;
          long v640 = e640->__av;
          agg625 += (v640 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2513.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2514.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_625INVENTORY1_P_3.getValueOrDefault(se2515.modify(inventory_locn)))));
          e640 = e640->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_625 += agg625;
      long agg626 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e641 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e641) {
          long inventory_locn = e641->INVENTORY_LOCN;
          long inventory_dateid = e641->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e641->INVENTORY_KSN;
          long v641 = e641->__av;
          agg626 += (v641 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2517.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2518.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_626INVENTORY1_P_3.getValueOrDefault(se2519.modify(inventory_locn)))));
          e641 = e641->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_626 += agg626;
      DOUBLE_TYPE agg627 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e642 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e642) {
          long inventory_locn = e642->INVENTORY_LOCN;
          long inventory_dateid = e642->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e642->INVENTORY_KSN;
          long v642 = e642->__av;
          agg627 += (v642 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2521.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2522.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_627INVENTORY1_P_3.getValueOrDefault(se2523.modify(inventory_locn)))));
          e642 = e642->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_627 += agg627;
      long agg628 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e643 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e643) {
          long inventory_locn = e643->INVENTORY_LOCN;
          long inventory_dateid = e643->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e643->INVENTORY_KSN;
          long v643 = e643->__av;
          agg628 += (v643 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2525.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2526.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_628INVENTORY1_P_3.getValueOrDefault(se2527.modify(inventory_locn)))));
          e643 = e643->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_628 += agg628;
      long agg629 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e644 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e644) {
          long inventory_locn = e644->INVENTORY_LOCN;
          long inventory_dateid = e644->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e644->INVENTORY_KSN;
          long v644 = e644->__av;
          agg629 += (v644 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2529.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2530.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_629INVENTORY1_P_3.getValueOrDefault(se2531.modify(inventory_locn)))));
          e644 = e644->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_629 += agg629;
      long agg630 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e645 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e645) {
          long inventory_locn = e645->INVENTORY_LOCN;
          long inventory_dateid = e645->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e645->INVENTORY_KSN;
          long v645 = e645->__av;
          agg630 += (v645 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2533.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2534.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_630INVENTORY1_P_3.getValueOrDefault(se2535.modify(inventory_locn)))));
          e645 = e645->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_630 += agg630;
      long agg631 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e646 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e646) {
          long inventory_locn = e646->INVENTORY_LOCN;
          long inventory_dateid = e646->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e646->INVENTORY_KSN;
          long v646 = e646->__av;
          agg631 += (v646 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2537.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2538.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_631INVENTORY1_P_3.getValueOrDefault(se2539.modify(inventory_locn)))));
          e646 = e646->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_631 += agg631;
      long agg632 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e647 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e647) {
          long inventory_locn = e647->INVENTORY_LOCN;
          long inventory_dateid = e647->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e647->INVENTORY_KSN;
          long v647 = e647->__av;
          agg632 += (v647 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2541.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2542.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_632INVENTORY1_P_3.getValueOrDefault(se2543.modify(inventory_locn)))));
          e647 = e647->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_632 += agg632;
      long agg633 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e648 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e648) {
          long inventory_locn = e648->INVENTORY_LOCN;
          long inventory_dateid = e648->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e648->INVENTORY_KSN;
          long v648 = e648->__av;
          agg633 += (v648 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2545.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2546.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_633INVENTORY1_P_3.getValueOrDefault(se2547.modify(inventory_locn)))));
          e648 = e648->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_633 += agg633;
      long agg634 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e649 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e649) {
          long inventory_locn = e649->INVENTORY_LOCN;
          long inventory_dateid = e649->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e649->INVENTORY_KSN;
          long v649 = e649->__av;
          agg634 += (v649 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2549.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2550.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_634INVENTORY1_P_3.getValueOrDefault(se2551.modify(inventory_locn)))));
          e649 = e649->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_634 += agg634;
      long agg635 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e650 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e650) {
          long inventory_locn = e650->INVENTORY_LOCN;
          long inventory_dateid = e650->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e650->INVENTORY_KSN;
          long v650 = e650->__av;
          agg635 += (v650 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2553.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2554.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_635INVENTORY1_P_3.getValueOrDefault(se2555.modify(inventory_locn)))));
          e650 = e650->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_635 += agg635;
      long agg636 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e651 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e651) {
          long inventory_locn = e651->INVENTORY_LOCN;
          long inventory_dateid = e651->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e651->INVENTORY_KSN;
          long v651 = e651->__av;
          agg636 += (v651 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2557.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2558.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_636INVENTORY1_P_3.getValueOrDefault(se2559.modify(inventory_locn)))));
          e651 = e651->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_636 += agg636;
      long agg637 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e652 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e652) {
          long inventory_locn = e652->INVENTORY_LOCN;
          long inventory_dateid = e652->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e652->INVENTORY_KSN;
          long v652 = e652->__av;
          agg637 += (v652 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2561.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2562.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2563.modify(inventory_locn)))));
          e652 = e652->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_637 += agg637;
      long agg638 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e653 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e653) {
          long inventory_locn = e653->INVENTORY_LOCN;
          long inventory_dateid = e653->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e653->INVENTORY_KSN;
          long v653 = e653->__av;
          agg638 += (v653 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2565.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2566.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2567.modify(inventory_locn)))));
          e653 = e653->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_638 += agg638;
      long agg639 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e654 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e654) {
          long inventory_locn = e654->INVENTORY_LOCN;
          long inventory_dateid = e654->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e654->INVENTORY_KSN;
          long v654 = e654->__av;
          agg639 += (v654 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2569.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2570.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2571.modify(inventory_locn)))));
          e654 = e654->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_639 += agg639;
      DOUBLE_TYPE agg640 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e655 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e655) {
          long inventory_locn = e655->INVENTORY_LOCN;
          long inventory_dateid = e655->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e655->INVENTORY_KSN;
          long v655 = e655->__av;
          agg640 += (v655 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2573.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2574.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2575.modify(inventory_locn)))));
          e655 = e655->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_640 += agg640;
      long agg641 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e656 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e656) {
          long inventory_locn = e656->INVENTORY_LOCN;
          long inventory_dateid = e656->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e656->INVENTORY_KSN;
          long v656 = e656->__av;
          agg641 += (v656 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2577.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2578.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2579.modify(inventory_locn)))));
          e656 = e656->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_641 += agg641;
      long agg642 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e657 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e657) {
          long inventory_locn = e657->INVENTORY_LOCN;
          long inventory_dateid = e657->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e657->INVENTORY_KSN;
          long v657 = e657->__av;
          agg642 += (v657 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2581.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2582.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2583.modify(inventory_locn)))));
          e657 = e657->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_642 += agg642;
      long agg643 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e658 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e658) {
          long inventory_locn = e658->INVENTORY_LOCN;
          long inventory_dateid = e658->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e658->INVENTORY_KSN;
          long v658 = e658->__av;
          agg643 += (v658 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2585.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2586.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2587.modify(inventory_locn)))));
          e658 = e658->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_643 += agg643;
      long agg644 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e659 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e659) {
          long inventory_locn = e659->INVENTORY_LOCN;
          long inventory_dateid = e659->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e659->INVENTORY_KSN;
          long v659 = e659->__av;
          agg644 += (v659 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2589.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2590.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2591.modify(inventory_locn)))));
          e659 = e659->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_644 += agg644;
      DOUBLE_TYPE agg645 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e660 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e660) {
          long inventory_locn = e660->INVENTORY_LOCN;
          long inventory_dateid = e660->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e660->INVENTORY_KSN;
          long v660 = e660->__av;
          agg645 += (v660 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2593.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2594.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2595.modify(inventory_locn)))));
          e660 = e660->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_645 += agg645;
      long agg646 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e661 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e661) {
          long inventory_locn = e661->INVENTORY_LOCN;
          long inventory_dateid = e661->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e661->INVENTORY_KSN;
          long v661 = e661->__av;
          agg646 += (v661 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2597.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2598.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.getValueOrDefault(se2599.modify(inventory_locn)))));
          e661 = e661->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_646 += agg646;
      long agg647 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e662 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e662) {
          long inventory_locn = e662->INVENTORY_LOCN;
          long inventory_dateid = e662->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e662->INVENTORY_KSN;
          long v662 = e662->__av;
          agg647 += (v662 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2601.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2602.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_647INVENTORY1_P_3.getValueOrDefault(se2603.modify(inventory_locn)))));
          e662 = e662->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_647 += agg647;
      long agg648 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e663 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e663) {
          long inventory_locn = e663->INVENTORY_LOCN;
          long inventory_dateid = e663->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e663->INVENTORY_KSN;
          long v663 = e663->__av;
          agg648 += (v663 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2605.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2606.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_648INVENTORY1_P_3.getValueOrDefault(se2607.modify(inventory_locn)))));
          e663 = e663->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_648 += agg648;
      long agg649 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e664 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e664) {
          long inventory_locn = e664->INVENTORY_LOCN;
          long inventory_dateid = e664->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e664->INVENTORY_KSN;
          long v664 = e664->__av;
          agg649 += (v664 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2609.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2610.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_649INVENTORY1_P_3.getValueOrDefault(se2611.modify(inventory_locn)))));
          e664 = e664->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_649 += agg649;
      long agg650 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e665 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e665) {
          long inventory_locn = e665->INVENTORY_LOCN;
          long inventory_dateid = e665->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e665->INVENTORY_KSN;
          long v665 = e665->__av;
          agg650 += (v665 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2613.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2614.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_650INVENTORY1_P_3.getValueOrDefault(se2615.modify(inventory_locn)))));
          e665 = e665->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_650 += agg650;
      DOUBLE_TYPE agg651 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e666 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e666) {
          long inventory_locn = e666->INVENTORY_LOCN;
          long inventory_dateid = e666->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e666->INVENTORY_KSN;
          long v666 = e666->__av;
          agg651 += (v666 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2617.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2618.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_651INVENTORY1_P_3.getValueOrDefault(se2619.modify(inventory_locn)))));
          e666 = e666->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_651 += agg651;
      long agg652 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e667 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e667) {
          long inventory_locn = e667->INVENTORY_LOCN;
          long inventory_dateid = e667->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e667->INVENTORY_KSN;
          long v667 = e667->__av;
          agg652 += (v667 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2621.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2622.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_652INVENTORY1_P_3.getValueOrDefault(se2623.modify(inventory_locn)))));
          e667 = e667->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_652 += agg652;
      long agg653 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e668 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e668) {
          long inventory_locn = e668->INVENTORY_LOCN;
          long inventory_dateid = e668->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e668->INVENTORY_KSN;
          long v668 = e668->__av;
          agg653 += (v668 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2625.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2626.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_653INVENTORY1_P_3.getValueOrDefault(se2627.modify(inventory_locn)))));
          e668 = e668->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_653 += agg653;
      long agg654 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e669 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e669) {
          long inventory_locn = e669->INVENTORY_LOCN;
          long inventory_dateid = e669->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e669->INVENTORY_KSN;
          long v669 = e669->__av;
          agg654 += (v669 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2629.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2630.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_654INVENTORY1_P_3.getValueOrDefault(se2631.modify(inventory_locn)))));
          e669 = e669->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_654 += agg654;
      long agg655 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e670 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e670) {
          long inventory_locn = e670->INVENTORY_LOCN;
          long inventory_dateid = e670->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e670->INVENTORY_KSN;
          long v670 = e670->__av;
          agg655 += (v670 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2633.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2634.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_655INVENTORY1_P_3.getValueOrDefault(se2635.modify(inventory_locn)))));
          e670 = e670->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_655 += agg655;
      long agg656 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e671 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e671) {
          long inventory_locn = e671->INVENTORY_LOCN;
          long inventory_dateid = e671->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e671->INVENTORY_KSN;
          long v671 = e671->__av;
          agg656 += (v671 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2637.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2638.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_656INVENTORY1_P_3.getValueOrDefault(se2639.modify(inventory_locn)))));
          e671 = e671->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_656 += agg656;
      long agg657 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e672 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e672) {
          long inventory_locn = e672->INVENTORY_LOCN;
          long inventory_dateid = e672->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e672->INVENTORY_KSN;
          long v672 = e672->__av;
          agg657 += (v672 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2641.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2642.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_657INVENTORY1_P_3.getValueOrDefault(se2643.modify(inventory_locn)))));
          e672 = e672->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_657 += agg657;
      long agg658 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e673 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e673) {
          long inventory_locn = e673->INVENTORY_LOCN;
          long inventory_dateid = e673->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e673->INVENTORY_KSN;
          long v673 = e673->__av;
          agg658 += (v673 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2645.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2646.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_658INVENTORY1_P_3.getValueOrDefault(se2647.modify(inventory_locn)))));
          e673 = e673->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_658 += agg658;
      long agg659 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e674 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e674) {
          long inventory_locn = e674->INVENTORY_LOCN;
          long inventory_dateid = e674->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e674->INVENTORY_KSN;
          long v674 = e674->__av;
          agg659 += (v674 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2649.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2650.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_659INVENTORY1_P_3.getValueOrDefault(se2651.modify(inventory_locn)))));
          e674 = e674->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_659 += agg659;
      long agg660 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e675 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e675) {
          long inventory_locn = e675->INVENTORY_LOCN;
          long inventory_dateid = e675->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e675->INVENTORY_KSN;
          long v675 = e675->__av;
          agg660 += (v675 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2653.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2654.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_660INVENTORY1_P_3.getValueOrDefault(se2655.modify(inventory_locn)))));
          e675 = e675->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_660 += agg660;
      long agg661 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e676 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e676) {
          long inventory_locn = e676->INVENTORY_LOCN;
          long inventory_dateid = e676->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e676->INVENTORY_KSN;
          long v676 = e676->__av;
          agg661 += (v676 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2657.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2658.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2659.modify(inventory_locn)))));
          e676 = e676->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_661 += agg661;
      long agg662 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e677 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e677) {
          long inventory_locn = e677->INVENTORY_LOCN;
          long inventory_dateid = e677->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e677->INVENTORY_KSN;
          long v677 = e677->__av;
          agg662 += (v677 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2661.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2662.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2663.modify(inventory_locn)))));
          e677 = e677->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_662 += agg662;
      long agg663 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e678 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e678) {
          long inventory_locn = e678->INVENTORY_LOCN;
          long inventory_dateid = e678->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e678->INVENTORY_KSN;
          long v678 = e678->__av;
          agg663 += (v678 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2665.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2666.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2667.modify(inventory_locn)))));
          e678 = e678->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_663 += agg663;
      DOUBLE_TYPE agg664 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e679 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e679) {
          long inventory_locn = e679->INVENTORY_LOCN;
          long inventory_dateid = e679->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e679->INVENTORY_KSN;
          long v679 = e679->__av;
          agg664 += (v679 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2669.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2670.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2671.modify(inventory_locn)))));
          e679 = e679->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_664 += agg664;
      long agg665 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e680 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e680) {
          long inventory_locn = e680->INVENTORY_LOCN;
          long inventory_dateid = e680->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e680->INVENTORY_KSN;
          long v680 = e680->__av;
          agg665 += (v680 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2673.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2674.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2675.modify(inventory_locn)))));
          e680 = e680->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_665 += agg665;
      long agg666 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e681 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e681) {
          long inventory_locn = e681->INVENTORY_LOCN;
          long inventory_dateid = e681->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e681->INVENTORY_KSN;
          long v681 = e681->__av;
          agg666 += (v681 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2677.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2678.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2679.modify(inventory_locn)))));
          e681 = e681->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_666 += agg666;
      long agg667 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e682 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e682) {
          long inventory_locn = e682->INVENTORY_LOCN;
          long inventory_dateid = e682->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e682->INVENTORY_KSN;
          long v682 = e682->__av;
          agg667 += (v682 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2681.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2682.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2683.modify(inventory_locn)))));
          e682 = e682->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_667 += agg667;
      long agg668 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e683 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e683) {
          long inventory_locn = e683->INVENTORY_LOCN;
          long inventory_dateid = e683->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e683->INVENTORY_KSN;
          long v683 = e683->__av;
          agg668 += (v683 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2685.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2686.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2687.modify(inventory_locn)))));
          e683 = e683->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_668 += agg668;
      DOUBLE_TYPE agg669 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e684 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e684) {
          long inventory_locn = e684->INVENTORY_LOCN;
          long inventory_dateid = e684->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e684->INVENTORY_KSN;
          long v684 = e684->__av;
          agg669 += (v684 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2689.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2690.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2691.modify(inventory_locn)))));
          e684 = e684->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_669 += agg669;
      long agg670 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e685 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e685) {
          long inventory_locn = e685->INVENTORY_LOCN;
          long inventory_dateid = e685->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e685->INVENTORY_KSN;
          long v685 = e685->__av;
          agg670 += (v685 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2693.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2694.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.getValueOrDefault(se2695.modify(inventory_locn)))));
          e685 = e685->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_670 += agg670;
      long agg671 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e686 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e686) {
          long inventory_locn = e686->INVENTORY_LOCN;
          long inventory_dateid = e686->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e686->INVENTORY_KSN;
          long v686 = e686->__av;
          agg671 += (v686 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2697.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2698.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_671INVENTORY1_P_3.getValueOrDefault(se2699.modify(inventory_locn)))));
          e686 = e686->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_671 += agg671;
      long agg672 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e687 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e687) {
          long inventory_locn = e687->INVENTORY_LOCN;
          long inventory_dateid = e687->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e687->INVENTORY_KSN;
          long v687 = e687->__av;
          agg672 += (v687 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2701.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2702.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_672INVENTORY1_P_3.getValueOrDefault(se2703.modify(inventory_locn)))));
          e687 = e687->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_672 += agg672;
      long agg673 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e688 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e688) {
          long inventory_locn = e688->INVENTORY_LOCN;
          long inventory_dateid = e688->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e688->INVENTORY_KSN;
          long v688 = e688->__av;
          agg673 += (v688 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2705.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2706.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_673INVENTORY1_P_3.getValueOrDefault(se2707.modify(inventory_locn)))));
          e688 = e688->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_673 += agg673;
      DOUBLE_TYPE agg674 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e689 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e689) {
          long inventory_locn = e689->INVENTORY_LOCN;
          long inventory_dateid = e689->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e689->INVENTORY_KSN;
          long v689 = e689->__av;
          agg674 += (v689 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2709.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2710.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_674INVENTORY1_P_3.getValueOrDefault(se2711.modify(inventory_locn)))));
          e689 = e689->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_674 += agg674;
      long agg675 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e690 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e690) {
          long inventory_locn = e690->INVENTORY_LOCN;
          long inventory_dateid = e690->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e690->INVENTORY_KSN;
          long v690 = e690->__av;
          agg675 += (v690 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2713.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2714.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_675INVENTORY1_P_3.getValueOrDefault(se2715.modify(inventory_locn)))));
          e690 = e690->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_675 += agg675;
      long agg676 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e691 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e691) {
          long inventory_locn = e691->INVENTORY_LOCN;
          long inventory_dateid = e691->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e691->INVENTORY_KSN;
          long v691 = e691->__av;
          agg676 += (v691 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2717.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2718.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_676INVENTORY1_P_3.getValueOrDefault(se2719.modify(inventory_locn)))));
          e691 = e691->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_676 += agg676;
      long agg677 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e692 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e692) {
          long inventory_locn = e692->INVENTORY_LOCN;
          long inventory_dateid = e692->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e692->INVENTORY_KSN;
          long v692 = e692->__av;
          agg677 += (v692 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2721.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2722.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_677INVENTORY1_P_3.getValueOrDefault(se2723.modify(inventory_locn)))));
          e692 = e692->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_677 += agg677;
      long agg678 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e693 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e693) {
          long inventory_locn = e693->INVENTORY_LOCN;
          long inventory_dateid = e693->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e693->INVENTORY_KSN;
          long v693 = e693->__av;
          agg678 += (v693 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2725.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2726.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_678INVENTORY1_P_3.getValueOrDefault(se2727.modify(inventory_locn)))));
          e693 = e693->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_678 += agg678;
      long agg679 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e694 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e694) {
          long inventory_locn = e694->INVENTORY_LOCN;
          long inventory_dateid = e694->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e694->INVENTORY_KSN;
          long v694 = e694->__av;
          agg679 += (v694 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2729.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2730.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_679INVENTORY1_P_3.getValueOrDefault(se2731.modify(inventory_locn)))));
          e694 = e694->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_679 += agg679;
      long agg680 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e695 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e695) {
          long inventory_locn = e695->INVENTORY_LOCN;
          long inventory_dateid = e695->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e695->INVENTORY_KSN;
          long v695 = e695->__av;
          agg680 += (v695 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2733.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2734.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_680INVENTORY1_P_3.getValueOrDefault(se2735.modify(inventory_locn)))));
          e695 = e695->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_680 += agg680;
      long agg681 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e696 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e696) {
          long inventory_locn = e696->INVENTORY_LOCN;
          long inventory_dateid = e696->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e696->INVENTORY_KSN;
          long v696 = e696->__av;
          agg681 += (v696 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2737.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2738.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_681INVENTORY1_P_3.getValueOrDefault(se2739.modify(inventory_locn)))));
          e696 = e696->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_681 += agg681;
      long agg682 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e697 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e697) {
          long inventory_locn = e697->INVENTORY_LOCN;
          long inventory_dateid = e697->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e697->INVENTORY_KSN;
          long v697 = e697->__av;
          agg682 += (v697 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2741.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2742.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_682INVENTORY1_P_3.getValueOrDefault(se2743.modify(inventory_locn)))));
          e697 = e697->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_682 += agg682;
      long agg683 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e698 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e698) {
          long inventory_locn = e698->INVENTORY_LOCN;
          long inventory_dateid = e698->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e698->INVENTORY_KSN;
          long v698 = e698->__av;
          agg683 += (v698 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2745.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2746.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_683INVENTORY1_P_3.getValueOrDefault(se2747.modify(inventory_locn)))));
          e698 = e698->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_683 += agg683;
      long agg684 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e699 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e699) {
          long inventory_locn = e699->INVENTORY_LOCN;
          long inventory_dateid = e699->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e699->INVENTORY_KSN;
          long v699 = e699->__av;
          agg684 += (v699 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2749.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2750.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2751.modify(inventory_locn)))));
          e699 = e699->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_684 += agg684;
      long agg685 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e700 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e700) {
          long inventory_locn = e700->INVENTORY_LOCN;
          long inventory_dateid = e700->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e700->INVENTORY_KSN;
          long v700 = e700->__av;
          agg685 += (v700 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2753.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2754.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2755.modify(inventory_locn)))));
          e700 = e700->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_685 += agg685;
      long agg686 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e701 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e701) {
          long inventory_locn = e701->INVENTORY_LOCN;
          long inventory_dateid = e701->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e701->INVENTORY_KSN;
          long v701 = e701->__av;
          agg686 += (v701 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2757.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2758.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2759.modify(inventory_locn)))));
          e701 = e701->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_686 += agg686;
      DOUBLE_TYPE agg687 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e702 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e702) {
          long inventory_locn = e702->INVENTORY_LOCN;
          long inventory_dateid = e702->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e702->INVENTORY_KSN;
          long v702 = e702->__av;
          agg687 += (v702 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2761.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2762.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2763.modify(inventory_locn)))));
          e702 = e702->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_687 += agg687;
      long agg688 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e703 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e703) {
          long inventory_locn = e703->INVENTORY_LOCN;
          long inventory_dateid = e703->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e703->INVENTORY_KSN;
          long v703 = e703->__av;
          agg688 += (v703 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2765.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2766.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2767.modify(inventory_locn)))));
          e703 = e703->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_688 += agg688;
      long agg689 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e704 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e704) {
          long inventory_locn = e704->INVENTORY_LOCN;
          long inventory_dateid = e704->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e704->INVENTORY_KSN;
          long v704 = e704->__av;
          agg689 += (v704 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2769.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2770.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2771.modify(inventory_locn)))));
          e704 = e704->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_689 += agg689;
      long agg690 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e705 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e705) {
          long inventory_locn = e705->INVENTORY_LOCN;
          long inventory_dateid = e705->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e705->INVENTORY_KSN;
          long v705 = e705->__av;
          agg690 += (v705 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2773.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2774.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2775.modify(inventory_locn)))));
          e705 = e705->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_690 += agg690;
      long agg691 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e706 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e706) {
          long inventory_locn = e706->INVENTORY_LOCN;
          long inventory_dateid = e706->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e706->INVENTORY_KSN;
          long v706 = e706->__av;
          agg691 += (v706 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2777.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2778.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2779.modify(inventory_locn)))));
          e706 = e706->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_691 += agg691;
      DOUBLE_TYPE agg692 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e707 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e707) {
          long inventory_locn = e707->INVENTORY_LOCN;
          long inventory_dateid = e707->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e707->INVENTORY_KSN;
          long v707 = e707->__av;
          agg692 += (v707 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2781.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2782.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2783.modify(inventory_locn)))));
          e707 = e707->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_692 += agg692;
      long agg693 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e708 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e708) {
          long inventory_locn = e708->INVENTORY_LOCN;
          long inventory_dateid = e708->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e708->INVENTORY_KSN;
          long v708 = e708->__av;
          agg693 += (v708 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2785.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2786.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.getValueOrDefault(se2787.modify(inventory_locn)))));
          e708 = e708->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_693 += agg693;
      long agg694 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e709 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e709) {
          long inventory_locn = e709->INVENTORY_LOCN;
          long inventory_dateid = e709->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e709->INVENTORY_KSN;
          long v709 = e709->__av;
          agg694 += (v709 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2789.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2790.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_694INVENTORY1_P_3.getValueOrDefault(se2791.modify(inventory_locn)))));
          e709 = e709->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_694 += agg694;
      long agg695 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e710 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e710) {
          long inventory_locn = e710->INVENTORY_LOCN;
          long inventory_dateid = e710->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e710->INVENTORY_KSN;
          long v710 = e710->__av;
          agg695 += (v710 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2793.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2794.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_695INVENTORY1_P_3.getValueOrDefault(se2795.modify(inventory_locn)))));
          e710 = e710->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_695 += agg695;
      DOUBLE_TYPE agg696 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e711 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e711) {
          long inventory_locn = e711->INVENTORY_LOCN;
          long inventory_dateid = e711->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e711->INVENTORY_KSN;
          long v711 = e711->__av;
          agg696 += (v711 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2797.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2798.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_696INVENTORY1_P_3.getValueOrDefault(se2799.modify(inventory_locn)))));
          e711 = e711->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_696 += agg696;
      long agg697 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e712 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e712) {
          long inventory_locn = e712->INVENTORY_LOCN;
          long inventory_dateid = e712->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e712->INVENTORY_KSN;
          long v712 = e712->__av;
          agg697 += (v712 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2801.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2802.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_697INVENTORY1_P_3.getValueOrDefault(se2803.modify(inventory_locn)))));
          e712 = e712->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_697 += agg697;
      long agg698 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e713 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e713) {
          long inventory_locn = e713->INVENTORY_LOCN;
          long inventory_dateid = e713->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e713->INVENTORY_KSN;
          long v713 = e713->__av;
          agg698 += (v713 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2805.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2806.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_698INVENTORY1_P_3.getValueOrDefault(se2807.modify(inventory_locn)))));
          e713 = e713->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_698 += agg698;
      long agg699 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e714 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e714) {
          long inventory_locn = e714->INVENTORY_LOCN;
          long inventory_dateid = e714->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e714->INVENTORY_KSN;
          long v714 = e714->__av;
          agg699 += (v714 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2809.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2810.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_699INVENTORY1_P_3.getValueOrDefault(se2811.modify(inventory_locn)))));
          e714 = e714->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_699 += agg699;
      long agg700 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e715 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e715) {
          long inventory_locn = e715->INVENTORY_LOCN;
          long inventory_dateid = e715->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e715->INVENTORY_KSN;
          long v715 = e715->__av;
          agg700 += (v715 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2813.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2814.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_700INVENTORY1_P_3.getValueOrDefault(se2815.modify(inventory_locn)))));
          e715 = e715->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_700 += agg700;
      long agg701 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e716 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e716) {
          long inventory_locn = e716->INVENTORY_LOCN;
          long inventory_dateid = e716->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e716->INVENTORY_KSN;
          long v716 = e716->__av;
          agg701 += (v716 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2817.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2818.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_701INVENTORY1_P_3.getValueOrDefault(se2819.modify(inventory_locn)))));
          e716 = e716->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_701 += agg701;
      long agg702 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e717 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e717) {
          long inventory_locn = e717->INVENTORY_LOCN;
          long inventory_dateid = e717->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e717->INVENTORY_KSN;
          long v717 = e717->__av;
          agg702 += (v717 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2821.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2822.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_702INVENTORY1_P_3.getValueOrDefault(se2823.modify(inventory_locn)))));
          e717 = e717->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_702 += agg702;
      long agg703 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e718 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e718) {
          long inventory_locn = e718->INVENTORY_LOCN;
          long inventory_dateid = e718->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e718->INVENTORY_KSN;
          long v718 = e718->__av;
          agg703 += (v718 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2825.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2826.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_703INVENTORY1_P_3.getValueOrDefault(se2827.modify(inventory_locn)))));
          e718 = e718->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_703 += agg703;
      long agg704 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e719 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e719) {
          long inventory_locn = e719->INVENTORY_LOCN;
          long inventory_dateid = e719->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e719->INVENTORY_KSN;
          long v719 = e719->__av;
          agg704 += (v719 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2829.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2830.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_704INVENTORY1_P_3.getValueOrDefault(se2831.modify(inventory_locn)))));
          e719 = e719->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_704 += agg704;
      long agg705 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e720 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e720) {
          long inventory_locn = e720->INVENTORY_LOCN;
          long inventory_dateid = e720->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e720->INVENTORY_KSN;
          long v720 = e720->__av;
          agg705 += (v720 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2833.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2834.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_705INVENTORY1_P_3.getValueOrDefault(se2835.modify(inventory_locn)))));
          e720 = e720->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_705 += agg705;
      long agg706 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e721 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e721) {
          long inventory_locn = e721->INVENTORY_LOCN;
          long inventory_dateid = e721->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e721->INVENTORY_KSN;
          long v721 = e721->__av;
          agg706 += (v721 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2837.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2838.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2839.modify(inventory_locn)))));
          e721 = e721->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_706 += agg706;
      long agg707 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e722 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e722) {
          long inventory_locn = e722->INVENTORY_LOCN;
          long inventory_dateid = e722->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e722->INVENTORY_KSN;
          long v722 = e722->__av;
          agg707 += (v722 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2841.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2842.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2843.modify(inventory_locn)))));
          e722 = e722->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_707 += agg707;
      long agg708 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e723 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e723) {
          long inventory_locn = e723->INVENTORY_LOCN;
          long inventory_dateid = e723->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e723->INVENTORY_KSN;
          long v723 = e723->__av;
          agg708 += (v723 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2845.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2846.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2847.modify(inventory_locn)))));
          e723 = e723->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_708 += agg708;
      DOUBLE_TYPE agg709 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e724 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e724) {
          long inventory_locn = e724->INVENTORY_LOCN;
          long inventory_dateid = e724->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e724->INVENTORY_KSN;
          long v724 = e724->__av;
          agg709 += (v724 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2849.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2850.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2851.modify(inventory_locn)))));
          e724 = e724->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_709 += agg709;
      long agg710 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e725 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e725) {
          long inventory_locn = e725->INVENTORY_LOCN;
          long inventory_dateid = e725->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e725->INVENTORY_KSN;
          long v725 = e725->__av;
          agg710 += (v725 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2853.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2854.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2855.modify(inventory_locn)))));
          e725 = e725->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_710 += agg710;
      long agg711 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e726 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e726) {
          long inventory_locn = e726->INVENTORY_LOCN;
          long inventory_dateid = e726->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e726->INVENTORY_KSN;
          long v726 = e726->__av;
          agg711 += (v726 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2857.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2858.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2859.modify(inventory_locn)))));
          e726 = e726->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_711 += agg711;
      long agg712 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e727 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e727) {
          long inventory_locn = e727->INVENTORY_LOCN;
          long inventory_dateid = e727->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e727->INVENTORY_KSN;
          long v727 = e727->__av;
          agg712 += (v727 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2861.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2862.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2863.modify(inventory_locn)))));
          e727 = e727->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_712 += agg712;
      long agg713 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e728 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e728) {
          long inventory_locn = e728->INVENTORY_LOCN;
          long inventory_dateid = e728->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e728->INVENTORY_KSN;
          long v728 = e728->__av;
          agg713 += (v728 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2865.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2866.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2867.modify(inventory_locn)))));
          e728 = e728->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_713 += agg713;
      DOUBLE_TYPE agg714 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e729 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e729) {
          long inventory_locn = e729->INVENTORY_LOCN;
          long inventory_dateid = e729->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e729->INVENTORY_KSN;
          long v729 = e729->__av;
          agg714 += (v729 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2869.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2870.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2871.modify(inventory_locn)))));
          e729 = e729->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_714 += agg714;
      long agg715 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e730 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e730) {
          long inventory_locn = e730->INVENTORY_LOCN;
          long inventory_dateid = e730->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e730->INVENTORY_KSN;
          long v730 = e730->__av;
          agg715 += (v730 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2873.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2874.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.getValueOrDefault(se2875.modify(inventory_locn)))));
          e730 = e730->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_715 += agg715;
      long agg716 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e731 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e731) {
          long inventory_locn = e731->INVENTORY_LOCN;
          long inventory_dateid = e731->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e731->INVENTORY_KSN;
          long v731 = e731->__av;
          agg716 += (v731 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2877.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2878.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_716INVENTORY1_P_3.getValueOrDefault(se2879.modify(inventory_locn)))));
          e731 = e731->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_716 += agg716;
      DOUBLE_TYPE agg717 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e732 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e732) {
          long inventory_locn = e732->INVENTORY_LOCN;
          long inventory_dateid = e732->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e732->INVENTORY_KSN;
          long v732 = e732->__av;
          agg717 += (v732 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2881.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2882.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_717INVENTORY1_P_3.getValueOrDefault(se2883.modify(inventory_locn)))));
          e732 = e732->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_717 += agg717;
      long agg718 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e733 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e733) {
          long inventory_locn = e733->INVENTORY_LOCN;
          long inventory_dateid = e733->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e733->INVENTORY_KSN;
          long v733 = e733->__av;
          agg718 += (v733 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2885.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2886.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_718INVENTORY1_P_3.getValueOrDefault(se2887.modify(inventory_locn)))));
          e733 = e733->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_718 += agg718;
      long agg719 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e734 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e734) {
          long inventory_locn = e734->INVENTORY_LOCN;
          long inventory_dateid = e734->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e734->INVENTORY_KSN;
          long v734 = e734->__av;
          agg719 += (v734 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2889.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2890.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_719INVENTORY1_P_3.getValueOrDefault(se2891.modify(inventory_locn)))));
          e734 = e734->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_719 += agg719;
      long agg720 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e735 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e735) {
          long inventory_locn = e735->INVENTORY_LOCN;
          long inventory_dateid = e735->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e735->INVENTORY_KSN;
          long v735 = e735->__av;
          agg720 += (v735 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2893.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2894.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_720INVENTORY1_P_3.getValueOrDefault(se2895.modify(inventory_locn)))));
          e735 = e735->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_720 += agg720;
      long agg721 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e736 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e736) {
          long inventory_locn = e736->INVENTORY_LOCN;
          long inventory_dateid = e736->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e736->INVENTORY_KSN;
          long v736 = e736->__av;
          agg721 += (v736 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2897.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2898.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_721INVENTORY1_P_3.getValueOrDefault(se2899.modify(inventory_locn)))));
          e736 = e736->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_721 += agg721;
      long agg722 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e737 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e737) {
          long inventory_locn = e737->INVENTORY_LOCN;
          long inventory_dateid = e737->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e737->INVENTORY_KSN;
          long v737 = e737->__av;
          agg722 += (v737 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2901.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2902.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_722INVENTORY1_P_3.getValueOrDefault(se2903.modify(inventory_locn)))));
          e737 = e737->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_722 += agg722;
      long agg723 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e738 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e738) {
          long inventory_locn = e738->INVENTORY_LOCN;
          long inventory_dateid = e738->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e738->INVENTORY_KSN;
          long v738 = e738->__av;
          agg723 += (v738 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2905.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2906.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_723INVENTORY1_P_3.getValueOrDefault(se2907.modify(inventory_locn)))));
          e738 = e738->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_723 += agg723;
      long agg724 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e739 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e739) {
          long inventory_locn = e739->INVENTORY_LOCN;
          long inventory_dateid = e739->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e739->INVENTORY_KSN;
          long v739 = e739->__av;
          agg724 += (v739 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2909.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2910.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_724INVENTORY1_P_3.getValueOrDefault(se2911.modify(inventory_locn)))));
          e739 = e739->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_724 += agg724;
      long agg725 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e740 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e740) {
          long inventory_locn = e740->INVENTORY_LOCN;
          long inventory_dateid = e740->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e740->INVENTORY_KSN;
          long v740 = e740->__av;
          agg725 += (v740 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2913.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2914.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_725INVENTORY1_P_3.getValueOrDefault(se2915.modify(inventory_locn)))));
          e740 = e740->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_725 += agg725;
      long agg726 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e741 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e741) {
          long inventory_locn = e741->INVENTORY_LOCN;
          long inventory_dateid = e741->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e741->INVENTORY_KSN;
          long v741 = e741->__av;
          agg726 += (v741 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2917.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2918.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_726INVENTORY1_P_3.getValueOrDefault(se2919.modify(inventory_locn)))));
          e741 = e741->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_726 += agg726;
      long agg727 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e742 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e742) {
          long inventory_locn = e742->INVENTORY_LOCN;
          long inventory_dateid = e742->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e742->INVENTORY_KSN;
          long v742 = e742->__av;
          agg727 += (v742 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2921.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se2922.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2923.modify(inventory_locn)))));
          e742 = e742->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_727 += agg727;
      long agg728 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e743 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e743) {
          long inventory_locn = e743->INVENTORY_LOCN;
          long inventory_dateid = e743->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e743->INVENTORY_KSN;
          long v743 = e743->__av;
          agg728 += (v743 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2925.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se2926.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2927.modify(inventory_locn)))));
          e743 = e743->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_728 += agg728;
      long agg729 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e744 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e744) {
          long inventory_locn = e744->INVENTORY_LOCN;
          long inventory_dateid = e744->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e744->INVENTORY_KSN;
          long v744 = e744->__av;
          agg729 += (v744 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2929.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se2930.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2931.modify(inventory_locn)))));
          e744 = e744->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_729 += agg729;
      DOUBLE_TYPE agg730 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e745 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e745) {
          long inventory_locn = e745->INVENTORY_LOCN;
          long inventory_dateid = e745->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e745->INVENTORY_KSN;
          long v745 = e745->__av;
          agg730 += (v745 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2933.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se2934.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2935.modify(inventory_locn)))));
          e745 = e745->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_730 += agg730;
      long agg731 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e746 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e746) {
          long inventory_locn = e746->INVENTORY_LOCN;
          long inventory_dateid = e746->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e746->INVENTORY_KSN;
          long v746 = e746->__av;
          agg731 += (v746 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se2937.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2938.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2939.modify(inventory_locn)))));
          e746 = e746->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_731 += agg731;
      long agg732 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e747 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e747) {
          long inventory_locn = e747->INVENTORY_LOCN;
          long inventory_dateid = e747->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e747->INVENTORY_KSN;
          long v747 = e747->__av;
          agg732 += (v747 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se2941.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2942.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2943.modify(inventory_locn)))));
          e747 = e747->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_732 += agg732;
      long agg733 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e748 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e748) {
          long inventory_locn = e748->INVENTORY_LOCN;
          long inventory_dateid = e748->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e748->INVENTORY_KSN;
          long v748 = e748->__av;
          agg733 += (v748 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se2945.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2946.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2947.modify(inventory_locn)))));
          e748 = e748->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_733 += agg733;
      long agg734 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e749 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e749) {
          long inventory_locn = e749->INVENTORY_LOCN;
          long inventory_dateid = e749->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e749->INVENTORY_KSN;
          long v749 = e749->__av;
          agg734 += (v749 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se2949.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2950.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2951.modify(inventory_locn)))));
          e749 = e749->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_734 += agg734;
      DOUBLE_TYPE agg735 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e750 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e750) {
          long inventory_locn = e750->INVENTORY_LOCN;
          long inventory_dateid = e750->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e750->INVENTORY_KSN;
          long v750 = e750->__av;
          agg735 += (v750 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se2953.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2954.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2955.modify(inventory_locn)))));
          e750 = e750->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_735 += agg735;
      long agg736 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e751 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e751) {
          long inventory_locn = e751->INVENTORY_LOCN;
          long inventory_dateid = e751->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e751->INVENTORY_KSN;
          long v751 = e751->__av;
          agg736 += (v751 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se2957.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2958.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.getValueOrDefault(se2959.modify(inventory_locn)))));
          e751 = e751->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_736 += agg736;
      DOUBLE_TYPE agg737 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e752 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e752) {
          long inventory_locn = e752->INVENTORY_LOCN;
          long inventory_dateid = e752->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e752->INVENTORY_KSN;
          long v752 = e752->__av;
          agg737 += (v752 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2961.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2962.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_737INVENTORY1_P_3.getValueOrDefault(se2963.modify(inventory_locn)))));
          e752 = e752->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_737 += agg737;
      DOUBLE_TYPE agg738 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e753 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e753) {
          long inventory_locn = e753->INVENTORY_LOCN;
          long inventory_dateid = e753->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e753->INVENTORY_KSN;
          long v753 = e753->__av;
          agg738 += (v753 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2965.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2966.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_738INVENTORY1_P_3.getValueOrDefault(se2967.modify(inventory_locn)))));
          e753 = e753->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_738 += agg738;
      DOUBLE_TYPE agg739 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e754 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e754) {
          long inventory_locn = e754->INVENTORY_LOCN;
          long inventory_dateid = e754->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e754->INVENTORY_KSN;
          long v754 = e754->__av;
          agg739 += (v754 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2969.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2970.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_739INVENTORY1_P_3.getValueOrDefault(se2971.modify(inventory_locn)))));
          e754 = e754->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_739 += agg739;
      DOUBLE_TYPE agg740 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e755 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e755) {
          long inventory_locn = e755->INVENTORY_LOCN;
          long inventory_dateid = e755->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e755->INVENTORY_KSN;
          long v755 = e755->__av;
          agg740 += (v755 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2973.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2974.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_740INVENTORY1_P_3.getValueOrDefault(se2975.modify(inventory_locn)))));
          e755 = e755->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_740 += agg740;
      DOUBLE_TYPE agg741 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e756 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e756) {
          long inventory_locn = e756->INVENTORY_LOCN;
          long inventory_dateid = e756->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e756->INVENTORY_KSN;
          long v756 = e756->__av;
          agg741 += (v756 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2977.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2978.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_741INVENTORY1_P_3.getValueOrDefault(se2979.modify(inventory_locn)))));
          e756 = e756->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_741 += agg741;
      DOUBLE_TYPE agg742 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e757 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e757) {
          long inventory_locn = e757->INVENTORY_LOCN;
          long inventory_dateid = e757->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e757->INVENTORY_KSN;
          long v757 = e757->__av;
          agg742 += (v757 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2981.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2982.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_742INVENTORY1_P_3.getValueOrDefault(se2983.modify(inventory_locn)))));
          e757 = e757->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_742 += agg742;
      DOUBLE_TYPE agg743 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e758 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e758) {
          long inventory_locn = e758->INVENTORY_LOCN;
          long inventory_dateid = e758->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e758->INVENTORY_KSN;
          long v758 = e758->__av;
          agg743 += (v758 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2985.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2986.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_743INVENTORY1_P_3.getValueOrDefault(se2987.modify(inventory_locn)))));
          e758 = e758->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_743 += agg743;
      DOUBLE_TYPE agg744 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e759 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e759) {
          long inventory_locn = e759->INVENTORY_LOCN;
          long inventory_dateid = e759->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e759->INVENTORY_KSN;
          long v759 = e759->__av;
          agg744 += (v759 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2989.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2990.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_744INVENTORY1_P_3.getValueOrDefault(se2991.modify(inventory_locn)))));
          e759 = e759->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_744 += agg744;
      DOUBLE_TYPE agg745 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e760 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e760) {
          long inventory_locn = e760->INVENTORY_LOCN;
          long inventory_dateid = e760->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e760->INVENTORY_KSN;
          long v760 = e760->__av;
          agg745 += (v760 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2993.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2994.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_745INVENTORY1_P_3.getValueOrDefault(se2995.modify(inventory_locn)))));
          e760 = e760->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_745 += agg745;
      DOUBLE_TYPE agg746 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e761 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e761) {
          long inventory_locn = e761->INVENTORY_LOCN;
          long inventory_dateid = e761->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e761->INVENTORY_KSN;
          long v761 = e761->__av;
          agg746 += (v761 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se2997.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se2998.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_746INVENTORY1_P_3.getValueOrDefault(se2999.modify(inventory_locn)))));
          e761 = e761->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_746 += agg746;
      DOUBLE_TYPE agg747 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e762 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e762) {
          long inventory_locn = e762->INVENTORY_LOCN;
          long inventory_dateid = e762->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e762->INVENTORY_KSN;
          long v762 = e762->__av;
          agg747 += (v762 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3001.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3002.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3003.modify(inventory_locn)))));
          e762 = e762->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_747 += agg747;
      DOUBLE_TYPE agg748 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e763 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e763) {
          long inventory_locn = e763->INVENTORY_LOCN;
          long inventory_dateid = e763->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e763->INVENTORY_KSN;
          long v763 = e763->__av;
          agg748 += (v763 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3005.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3006.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3007.modify(inventory_locn)))));
          e763 = e763->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_748 += agg748;
      DOUBLE_TYPE agg749 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e764 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e764) {
          long inventory_locn = e764->INVENTORY_LOCN;
          long inventory_dateid = e764->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e764->INVENTORY_KSN;
          long v764 = e764->__av;
          agg749 += (v764 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3009.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3010.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3011.modify(inventory_locn)))));
          e764 = e764->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_749 += agg749;
      DOUBLE_TYPE agg750 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e765 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e765) {
          long inventory_locn = e765->INVENTORY_LOCN;
          long inventory_dateid = e765->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e765->INVENTORY_KSN;
          long v765 = e765->__av;
          agg750 += (v765 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3013.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3014.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3015.modify(inventory_locn)))));
          e765 = e765->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_750 += agg750;
      DOUBLE_TYPE agg751 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e766 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e766) {
          long inventory_locn = e766->INVENTORY_LOCN;
          long inventory_dateid = e766->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e766->INVENTORY_KSN;
          long v766 = e766->__av;
          agg751 += (v766 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3017.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3018.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3019.modify(inventory_locn)))));
          e766 = e766->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_751 += agg751;
      DOUBLE_TYPE agg752 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e767 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e767) {
          long inventory_locn = e767->INVENTORY_LOCN;
          long inventory_dateid = e767->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e767->INVENTORY_KSN;
          long v767 = e767->__av;
          agg752 += (v767 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3021.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3022.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3023.modify(inventory_locn)))));
          e767 = e767->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_752 += agg752;
      DOUBLE_TYPE agg753 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e768 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e768) {
          long inventory_locn = e768->INVENTORY_LOCN;
          long inventory_dateid = e768->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e768->INVENTORY_KSN;
          long v768 = e768->__av;
          agg753 += (v768 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3025.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3026.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3027.modify(inventory_locn)))));
          e768 = e768->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_753 += agg753;
      DOUBLE_TYPE agg754 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e769 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e769) {
          long inventory_locn = e769->INVENTORY_LOCN;
          long inventory_dateid = e769->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e769->INVENTORY_KSN;
          long v769 = e769->__av;
          agg754 += (v769 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3029.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3030.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3031.modify(inventory_locn)))));
          e769 = e769->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_754 += agg754;
      DOUBLE_TYPE agg755 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e770 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e770) {
          long inventory_locn = e770->INVENTORY_LOCN;
          long inventory_dateid = e770->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e770->INVENTORY_KSN;
          long v770 = e770->__av;
          agg755 += (v770 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3033.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3034.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3035.modify(inventory_locn)))));
          e770 = e770->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_755 += agg755;
      DOUBLE_TYPE agg756 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e771 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e771) {
          long inventory_locn = e771->INVENTORY_LOCN;
          long inventory_dateid = e771->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e771->INVENTORY_KSN;
          long v771 = e771->__av;
          agg756 += (v771 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3037.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3038.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.getValueOrDefault(se3039.modify(inventory_locn)))));
          e771 = e771->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_756 += agg756;
      long agg757 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e772 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e772) {
          long inventory_locn = e772->INVENTORY_LOCN;
          long inventory_dateid = e772->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e772->INVENTORY_KSN;
          long v772 = e772->__av;
          agg757 += (v772 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3041.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3042.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_757INVENTORY1_P_3.getValueOrDefault(se3043.modify(inventory_locn)))));
          e772 = e772->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_757 += agg757;
      long agg758 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e773 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e773) {
          long inventory_locn = e773->INVENTORY_LOCN;
          long inventory_dateid = e773->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e773->INVENTORY_KSN;
          long v773 = e773->__av;
          agg758 += (v773 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3045.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3046.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_758INVENTORY1_P_3.getValueOrDefault(se3047.modify(inventory_locn)))));
          e773 = e773->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_758 += agg758;
      long agg759 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e774 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e774) {
          long inventory_locn = e774->INVENTORY_LOCN;
          long inventory_dateid = e774->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e774->INVENTORY_KSN;
          long v774 = e774->__av;
          agg759 += (v774 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3049.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3050.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_759INVENTORY1_P_3.getValueOrDefault(se3051.modify(inventory_locn)))));
          e774 = e774->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_759 += agg759;
      long agg760 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e775 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e775) {
          long inventory_locn = e775->INVENTORY_LOCN;
          long inventory_dateid = e775->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e775->INVENTORY_KSN;
          long v775 = e775->__av;
          agg760 += (v775 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3053.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3054.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_760INVENTORY1_P_3.getValueOrDefault(se3055.modify(inventory_locn)))));
          e775 = e775->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_760 += agg760;
      long agg761 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e776 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e776) {
          long inventory_locn = e776->INVENTORY_LOCN;
          long inventory_dateid = e776->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e776->INVENTORY_KSN;
          long v776 = e776->__av;
          agg761 += (v776 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3057.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3058.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_761INVENTORY1_P_3.getValueOrDefault(se3059.modify(inventory_locn)))));
          e776 = e776->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_761 += agg761;
      long agg762 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e777 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e777) {
          long inventory_locn = e777->INVENTORY_LOCN;
          long inventory_dateid = e777->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e777->INVENTORY_KSN;
          long v777 = e777->__av;
          agg762 += (v777 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3061.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3062.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_762INVENTORY1_P_3.getValueOrDefault(se3063.modify(inventory_locn)))));
          e777 = e777->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_762 += agg762;
      long agg763 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e778 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e778) {
          long inventory_locn = e778->INVENTORY_LOCN;
          long inventory_dateid = e778->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e778->INVENTORY_KSN;
          long v778 = e778->__av;
          agg763 += (v778 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3065.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3066.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_763INVENTORY1_P_3.getValueOrDefault(se3067.modify(inventory_locn)))));
          e778 = e778->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_763 += agg763;
      long agg764 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e779 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e779) {
          long inventory_locn = e779->INVENTORY_LOCN;
          long inventory_dateid = e779->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e779->INVENTORY_KSN;
          long v779 = e779->__av;
          agg764 += (v779 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3069.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3070.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_764INVENTORY1_P_3.getValueOrDefault(se3071.modify(inventory_locn)))));
          e779 = e779->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_764 += agg764;
      long agg765 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e780 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e780) {
          long inventory_locn = e780->INVENTORY_LOCN;
          long inventory_dateid = e780->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e780->INVENTORY_KSN;
          long v780 = e780->__av;
          agg765 += (v780 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3073.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3074.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_765INVENTORY1_P_3.getValueOrDefault(se3075.modify(inventory_locn)))));
          e780 = e780->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_765 += agg765;
      long agg766 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e781 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e781) {
          long inventory_locn = e781->INVENTORY_LOCN;
          long inventory_dateid = e781->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e781->INVENTORY_KSN;
          long v781 = e781->__av;
          agg766 += (v781 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3077.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3078.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3079.modify(inventory_locn)))));
          e781 = e781->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_766 += agg766;
      long agg767 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e782 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e782) {
          long inventory_locn = e782->INVENTORY_LOCN;
          long inventory_dateid = e782->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e782->INVENTORY_KSN;
          long v782 = e782->__av;
          agg767 += (v782 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3081.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3082.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3083.modify(inventory_locn)))));
          e782 = e782->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_767 += agg767;
      long agg768 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e783 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e783) {
          long inventory_locn = e783->INVENTORY_LOCN;
          long inventory_dateid = e783->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e783->INVENTORY_KSN;
          long v783 = e783->__av;
          agg768 += (v783 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3085.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3086.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3087.modify(inventory_locn)))));
          e783 = e783->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_768 += agg768;
      DOUBLE_TYPE agg769 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e784 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e784) {
          long inventory_locn = e784->INVENTORY_LOCN;
          long inventory_dateid = e784->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e784->INVENTORY_KSN;
          long v784 = e784->__av;
          agg769 += (v784 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3089.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3090.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3091.modify(inventory_locn)))));
          e784 = e784->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_769 += agg769;
      long agg770 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e785 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e785) {
          long inventory_locn = e785->INVENTORY_LOCN;
          long inventory_dateid = e785->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e785->INVENTORY_KSN;
          long v785 = e785->__av;
          agg770 += (v785 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3093.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3094.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3095.modify(inventory_locn)))));
          e785 = e785->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_770 += agg770;
      long agg771 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e786 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e786) {
          long inventory_locn = e786->INVENTORY_LOCN;
          long inventory_dateid = e786->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e786->INVENTORY_KSN;
          long v786 = e786->__av;
          agg771 += (v786 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3097.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3098.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3099.modify(inventory_locn)))));
          e786 = e786->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_771 += agg771;
      long agg772 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e787 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e787) {
          long inventory_locn = e787->INVENTORY_LOCN;
          long inventory_dateid = e787->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e787->INVENTORY_KSN;
          long v787 = e787->__av;
          agg772 += (v787 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3101.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3102.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3103.modify(inventory_locn)))));
          e787 = e787->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_772 += agg772;
      long agg773 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e788 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e788) {
          long inventory_locn = e788->INVENTORY_LOCN;
          long inventory_dateid = e788->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e788->INVENTORY_KSN;
          long v788 = e788->__av;
          agg773 += (v788 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3105.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3106.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3107.modify(inventory_locn)))));
          e788 = e788->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_773 += agg773;
      DOUBLE_TYPE agg774 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e789 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e789) {
          long inventory_locn = e789->INVENTORY_LOCN;
          long inventory_dateid = e789->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e789->INVENTORY_KSN;
          long v789 = e789->__av;
          agg774 += (v789 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3109.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3110.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3111.modify(inventory_locn)))));
          e789 = e789->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_774 += agg774;
      long agg775 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e790 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e790) {
          long inventory_locn = e790->INVENTORY_LOCN;
          long inventory_dateid = e790->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e790->INVENTORY_KSN;
          long v790 = e790->__av;
          agg775 += (v790 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3113.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3114.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.getValueOrDefault(se3115.modify(inventory_locn)))));
          e790 = e790->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_775 += agg775;
      long agg776 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e791 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e791) {
          long inventory_locn = e791->INVENTORY_LOCN;
          long inventory_dateid = e791->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e791->INVENTORY_KSN;
          long v791 = e791->__av;
          agg776 += (v791 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3117.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3118.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_776INVENTORY1_P_3.getValueOrDefault(se3119.modify(inventory_locn)))));
          e791 = e791->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_776 += agg776;
      long agg777 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e792 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e792) {
          long inventory_locn = e792->INVENTORY_LOCN;
          long inventory_dateid = e792->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e792->INVENTORY_KSN;
          long v792 = e792->__av;
          agg777 += (v792 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3121.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3122.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_777INVENTORY1_P_3.getValueOrDefault(se3123.modify(inventory_locn)))));
          e792 = e792->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_777 += agg777;
      long agg778 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e793 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e793) {
          long inventory_locn = e793->INVENTORY_LOCN;
          long inventory_dateid = e793->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e793->INVENTORY_KSN;
          long v793 = e793->__av;
          agg778 += (v793 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3125.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3126.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_778INVENTORY1_P_3.getValueOrDefault(se3127.modify(inventory_locn)))));
          e793 = e793->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_778 += agg778;
      long agg779 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e794 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e794) {
          long inventory_locn = e794->INVENTORY_LOCN;
          long inventory_dateid = e794->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e794->INVENTORY_KSN;
          long v794 = e794->__av;
          agg779 += (v794 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3129.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3130.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_779INVENTORY1_P_3.getValueOrDefault(se3131.modify(inventory_locn)))));
          e794 = e794->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_779 += agg779;
      long agg780 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e795 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e795) {
          long inventory_locn = e795->INVENTORY_LOCN;
          long inventory_dateid = e795->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e795->INVENTORY_KSN;
          long v795 = e795->__av;
          agg780 += (v795 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3133.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3134.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_780INVENTORY1_P_3.getValueOrDefault(se3135.modify(inventory_locn)))));
          e795 = e795->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_780 += agg780;
      long agg781 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e796 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e796) {
          long inventory_locn = e796->INVENTORY_LOCN;
          long inventory_dateid = e796->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e796->INVENTORY_KSN;
          long v796 = e796->__av;
          agg781 += (v796 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3137.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3138.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_781INVENTORY1_P_3.getValueOrDefault(se3139.modify(inventory_locn)))));
          e796 = e796->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_781 += agg781;
      long agg782 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e797 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e797) {
          long inventory_locn = e797->INVENTORY_LOCN;
          long inventory_dateid = e797->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e797->INVENTORY_KSN;
          long v797 = e797->__av;
          agg782 += (v797 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3141.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3142.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_782INVENTORY1_P_3.getValueOrDefault(se3143.modify(inventory_locn)))));
          e797 = e797->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_782 += agg782;
      long agg783 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e798 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e798) {
          long inventory_locn = e798->INVENTORY_LOCN;
          long inventory_dateid = e798->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e798->INVENTORY_KSN;
          long v798 = e798->__av;
          agg783 += (v798 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3145.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3146.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_783INVENTORY1_P_3.getValueOrDefault(se3147.modify(inventory_locn)))));
          e798 = e798->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_783 += agg783;
      long agg784 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e799 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e799) {
          long inventory_locn = e799->INVENTORY_LOCN;
          long inventory_dateid = e799->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e799->INVENTORY_KSN;
          long v799 = e799->__av;
          agg784 += (v799 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3149.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3150.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3151.modify(inventory_locn)))));
          e799 = e799->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_784 += agg784;
      long agg785 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e800 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e800) {
          long inventory_locn = e800->INVENTORY_LOCN;
          long inventory_dateid = e800->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e800->INVENTORY_KSN;
          long v800 = e800->__av;
          agg785 += (v800 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3153.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3154.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3155.modify(inventory_locn)))));
          e800 = e800->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_785 += agg785;
      long agg786 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e801 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e801) {
          long inventory_locn = e801->INVENTORY_LOCN;
          long inventory_dateid = e801->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e801->INVENTORY_KSN;
          long v801 = e801->__av;
          agg786 += (v801 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3157.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3158.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3159.modify(inventory_locn)))));
          e801 = e801->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_786 += agg786;
      DOUBLE_TYPE agg787 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e802 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e802) {
          long inventory_locn = e802->INVENTORY_LOCN;
          long inventory_dateid = e802->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e802->INVENTORY_KSN;
          long v802 = e802->__av;
          agg787 += (v802 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3161.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3162.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3163.modify(inventory_locn)))));
          e802 = e802->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_787 += agg787;
      long agg788 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e803 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e803) {
          long inventory_locn = e803->INVENTORY_LOCN;
          long inventory_dateid = e803->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e803->INVENTORY_KSN;
          long v803 = e803->__av;
          agg788 += (v803 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3165.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3166.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3167.modify(inventory_locn)))));
          e803 = e803->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_788 += agg788;
      long agg789 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e804 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e804) {
          long inventory_locn = e804->INVENTORY_LOCN;
          long inventory_dateid = e804->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e804->INVENTORY_KSN;
          long v804 = e804->__av;
          agg789 += (v804 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3169.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3170.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3171.modify(inventory_locn)))));
          e804 = e804->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_789 += agg789;
      long agg790 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e805 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e805) {
          long inventory_locn = e805->INVENTORY_LOCN;
          long inventory_dateid = e805->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e805->INVENTORY_KSN;
          long v805 = e805->__av;
          agg790 += (v805 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3173.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3174.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3175.modify(inventory_locn)))));
          e805 = e805->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_790 += agg790;
      long agg791 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e806 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e806) {
          long inventory_locn = e806->INVENTORY_LOCN;
          long inventory_dateid = e806->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e806->INVENTORY_KSN;
          long v806 = e806->__av;
          agg791 += (v806 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3177.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3178.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3179.modify(inventory_locn)))));
          e806 = e806->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_791 += agg791;
      DOUBLE_TYPE agg792 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e807 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e807) {
          long inventory_locn = e807->INVENTORY_LOCN;
          long inventory_dateid = e807->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e807->INVENTORY_KSN;
          long v807 = e807->__av;
          agg792 += (v807 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3181.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3182.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3183.modify(inventory_locn)))));
          e807 = e807->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_792 += agg792;
      long agg793 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e808 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e808) {
          long inventory_locn = e808->INVENTORY_LOCN;
          long inventory_dateid = e808->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e808->INVENTORY_KSN;
          long v808 = e808->__av;
          agg793 += (v808 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3185.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3186.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.getValueOrDefault(se3187.modify(inventory_locn)))));
          e808 = e808->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_793 += agg793;
      long agg794 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e809 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e809) {
          long inventory_locn = e809->INVENTORY_LOCN;
          long inventory_dateid = e809->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e809->INVENTORY_KSN;
          long v809 = e809->__av;
          agg794 += (v809 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3189.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3190.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_794INVENTORY1_P_3.getValueOrDefault(se3191.modify(inventory_locn)))));
          e809 = e809->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_794 += agg794;
      long agg795 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e810 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e810) {
          long inventory_locn = e810->INVENTORY_LOCN;
          long inventory_dateid = e810->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e810->INVENTORY_KSN;
          long v810 = e810->__av;
          agg795 += (v810 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3193.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3194.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_795INVENTORY1_P_3.getValueOrDefault(se3195.modify(inventory_locn)))));
          e810 = e810->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_795 += agg795;
      long agg796 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e811 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e811) {
          long inventory_locn = e811->INVENTORY_LOCN;
          long inventory_dateid = e811->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e811->INVENTORY_KSN;
          long v811 = e811->__av;
          agg796 += (v811 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3197.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3198.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_796INVENTORY1_P_3.getValueOrDefault(se3199.modify(inventory_locn)))));
          e811 = e811->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_796 += agg796;
      long agg797 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e812 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e812) {
          long inventory_locn = e812->INVENTORY_LOCN;
          long inventory_dateid = e812->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e812->INVENTORY_KSN;
          long v812 = e812->__av;
          agg797 += (v812 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3201.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3202.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_797INVENTORY1_P_3.getValueOrDefault(se3203.modify(inventory_locn)))));
          e812 = e812->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_797 += agg797;
      long agg798 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e813 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e813) {
          long inventory_locn = e813->INVENTORY_LOCN;
          long inventory_dateid = e813->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e813->INVENTORY_KSN;
          long v813 = e813->__av;
          agg798 += (v813 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3205.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3206.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_798INVENTORY1_P_3.getValueOrDefault(se3207.modify(inventory_locn)))));
          e813 = e813->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_798 += agg798;
      long agg799 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e814 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e814) {
          long inventory_locn = e814->INVENTORY_LOCN;
          long inventory_dateid = e814->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e814->INVENTORY_KSN;
          long v814 = e814->__av;
          agg799 += (v814 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3209.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3210.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_799INVENTORY1_P_3.getValueOrDefault(se3211.modify(inventory_locn)))));
          e814 = e814->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_799 += agg799;
      long agg800 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e815 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e815) {
          long inventory_locn = e815->INVENTORY_LOCN;
          long inventory_dateid = e815->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e815->INVENTORY_KSN;
          long v815 = e815->__av;
          agg800 += (v815 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3213.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3214.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_800INVENTORY1_P_3.getValueOrDefault(se3215.modify(inventory_locn)))));
          e815 = e815->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_800 += agg800;
      long agg801 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e816 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e816) {
          long inventory_locn = e816->INVENTORY_LOCN;
          long inventory_dateid = e816->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e816->INVENTORY_KSN;
          long v816 = e816->__av;
          agg801 += (v816 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3217.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3218.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3219.modify(inventory_locn)))));
          e816 = e816->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_801 += agg801;
      long agg802 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e817 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e817) {
          long inventory_locn = e817->INVENTORY_LOCN;
          long inventory_dateid = e817->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e817->INVENTORY_KSN;
          long v817 = e817->__av;
          agg802 += (v817 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3221.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3222.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3223.modify(inventory_locn)))));
          e817 = e817->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_802 += agg802;
      long agg803 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e818 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e818) {
          long inventory_locn = e818->INVENTORY_LOCN;
          long inventory_dateid = e818->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e818->INVENTORY_KSN;
          long v818 = e818->__av;
          agg803 += (v818 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3225.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3226.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3227.modify(inventory_locn)))));
          e818 = e818->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_803 += agg803;
      DOUBLE_TYPE agg804 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e819 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e819) {
          long inventory_locn = e819->INVENTORY_LOCN;
          long inventory_dateid = e819->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e819->INVENTORY_KSN;
          long v819 = e819->__av;
          agg804 += (v819 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3229.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3230.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3231.modify(inventory_locn)))));
          e819 = e819->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_804 += agg804;
      long agg805 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e820 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e820) {
          long inventory_locn = e820->INVENTORY_LOCN;
          long inventory_dateid = e820->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e820->INVENTORY_KSN;
          long v820 = e820->__av;
          agg805 += (v820 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3233.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3234.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3235.modify(inventory_locn)))));
          e820 = e820->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_805 += agg805;
      long agg806 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e821 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e821) {
          long inventory_locn = e821->INVENTORY_LOCN;
          long inventory_dateid = e821->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e821->INVENTORY_KSN;
          long v821 = e821->__av;
          agg806 += (v821 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3237.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3238.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3239.modify(inventory_locn)))));
          e821 = e821->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_806 += agg806;
      long agg807 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e822 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e822) {
          long inventory_locn = e822->INVENTORY_LOCN;
          long inventory_dateid = e822->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e822->INVENTORY_KSN;
          long v822 = e822->__av;
          agg807 += (v822 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3241.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3242.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3243.modify(inventory_locn)))));
          e822 = e822->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_807 += agg807;
      long agg808 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e823 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e823) {
          long inventory_locn = e823->INVENTORY_LOCN;
          long inventory_dateid = e823->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e823->INVENTORY_KSN;
          long v823 = e823->__av;
          agg808 += (v823 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3245.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3246.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3247.modify(inventory_locn)))));
          e823 = e823->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_808 += agg808;
      DOUBLE_TYPE agg809 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e824 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e824) {
          long inventory_locn = e824->INVENTORY_LOCN;
          long inventory_dateid = e824->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e824->INVENTORY_KSN;
          long v824 = e824->__av;
          agg809 += (v824 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3249.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3250.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3251.modify(inventory_locn)))));
          e824 = e824->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_809 += agg809;
      long agg810 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e825 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e825) {
          long inventory_locn = e825->INVENTORY_LOCN;
          long inventory_dateid = e825->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e825->INVENTORY_KSN;
          long v825 = e825->__av;
          agg810 += (v825 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3253.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3254.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.getValueOrDefault(se3255.modify(inventory_locn)))));
          e825 = e825->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_810 += agg810;
      long agg811 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e826 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e826) {
          long inventory_locn = e826->INVENTORY_LOCN;
          long inventory_dateid = e826->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e826->INVENTORY_KSN;
          long v826 = e826->__av;
          agg811 += (v826 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3257.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3258.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_811INVENTORY1_P_3.getValueOrDefault(se3259.modify(inventory_locn)))));
          e826 = e826->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_811 += agg811;
      long agg812 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e827 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e827) {
          long inventory_locn = e827->INVENTORY_LOCN;
          long inventory_dateid = e827->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e827->INVENTORY_KSN;
          long v827 = e827->__av;
          agg812 += (v827 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3261.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3262.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_812INVENTORY1_P_3.getValueOrDefault(se3263.modify(inventory_locn)))));
          e827 = e827->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_812 += agg812;
      long agg813 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e828 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e828) {
          long inventory_locn = e828->INVENTORY_LOCN;
          long inventory_dateid = e828->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e828->INVENTORY_KSN;
          long v828 = e828->__av;
          agg813 += (v828 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3265.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3266.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_813INVENTORY1_P_3.getValueOrDefault(se3267.modify(inventory_locn)))));
          e828 = e828->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_813 += agg813;
      long agg814 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e829 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e829) {
          long inventory_locn = e829->INVENTORY_LOCN;
          long inventory_dateid = e829->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e829->INVENTORY_KSN;
          long v829 = e829->__av;
          agg814 += (v829 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3269.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3270.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_814INVENTORY1_P_3.getValueOrDefault(se3271.modify(inventory_locn)))));
          e829 = e829->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_814 += agg814;
      long agg815 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e830 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e830) {
          long inventory_locn = e830->INVENTORY_LOCN;
          long inventory_dateid = e830->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e830->INVENTORY_KSN;
          long v830 = e830->__av;
          agg815 += (v830 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3273.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3274.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_815INVENTORY1_P_3.getValueOrDefault(se3275.modify(inventory_locn)))));
          e830 = e830->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_815 += agg815;
      long agg816 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e831 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e831) {
          long inventory_locn = e831->INVENTORY_LOCN;
          long inventory_dateid = e831->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e831->INVENTORY_KSN;
          long v831 = e831->__av;
          agg816 += (v831 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3277.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3278.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_816INVENTORY1_P_3.getValueOrDefault(se3279.modify(inventory_locn)))));
          e831 = e831->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_816 += agg816;
      long agg817 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e832 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e832) {
          long inventory_locn = e832->INVENTORY_LOCN;
          long inventory_dateid = e832->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e832->INVENTORY_KSN;
          long v832 = e832->__av;
          agg817 += (v832 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3281.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3282.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3283.modify(inventory_locn)))));
          e832 = e832->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_817 += agg817;
      long agg818 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e833 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e833) {
          long inventory_locn = e833->INVENTORY_LOCN;
          long inventory_dateid = e833->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e833->INVENTORY_KSN;
          long v833 = e833->__av;
          agg818 += (v833 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3285.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3286.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3287.modify(inventory_locn)))));
          e833 = e833->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_818 += agg818;
      long agg819 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e834 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e834) {
          long inventory_locn = e834->INVENTORY_LOCN;
          long inventory_dateid = e834->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e834->INVENTORY_KSN;
          long v834 = e834->__av;
          agg819 += (v834 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3289.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3290.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3291.modify(inventory_locn)))));
          e834 = e834->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_819 += agg819;
      DOUBLE_TYPE agg820 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e835 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e835) {
          long inventory_locn = e835->INVENTORY_LOCN;
          long inventory_dateid = e835->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e835->INVENTORY_KSN;
          long v835 = e835->__av;
          agg820 += (v835 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3293.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3294.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3295.modify(inventory_locn)))));
          e835 = e835->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_820 += agg820;
      long agg821 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e836 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e836) {
          long inventory_locn = e836->INVENTORY_LOCN;
          long inventory_dateid = e836->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e836->INVENTORY_KSN;
          long v836 = e836->__av;
          agg821 += (v836 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3297.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3298.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3299.modify(inventory_locn)))));
          e836 = e836->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_821 += agg821;
      long agg822 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e837 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e837) {
          long inventory_locn = e837->INVENTORY_LOCN;
          long inventory_dateid = e837->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e837->INVENTORY_KSN;
          long v837 = e837->__av;
          agg822 += (v837 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3301.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3302.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3303.modify(inventory_locn)))));
          e837 = e837->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_822 += agg822;
      long agg823 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e838 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e838) {
          long inventory_locn = e838->INVENTORY_LOCN;
          long inventory_dateid = e838->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e838->INVENTORY_KSN;
          long v838 = e838->__av;
          agg823 += (v838 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3305.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3306.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3307.modify(inventory_locn)))));
          e838 = e838->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_823 += agg823;
      long agg824 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e839 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e839) {
          long inventory_locn = e839->INVENTORY_LOCN;
          long inventory_dateid = e839->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e839->INVENTORY_KSN;
          long v839 = e839->__av;
          agg824 += (v839 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3309.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3310.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3311.modify(inventory_locn)))));
          e839 = e839->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_824 += agg824;
      DOUBLE_TYPE agg825 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e840 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e840) {
          long inventory_locn = e840->INVENTORY_LOCN;
          long inventory_dateid = e840->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e840->INVENTORY_KSN;
          long v840 = e840->__av;
          agg825 += (v840 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3313.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3314.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3315.modify(inventory_locn)))));
          e840 = e840->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_825 += agg825;
      long agg826 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e841 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e841) {
          long inventory_locn = e841->INVENTORY_LOCN;
          long inventory_dateid = e841->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e841->INVENTORY_KSN;
          long v841 = e841->__av;
          agg826 += (v841 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3317.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3318.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.getValueOrDefault(se3319.modify(inventory_locn)))));
          e841 = e841->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_826 += agg826;
      long agg827 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e842 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e842) {
          long inventory_locn = e842->INVENTORY_LOCN;
          long inventory_dateid = e842->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e842->INVENTORY_KSN;
          long v842 = e842->__av;
          agg827 += (v842 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3321.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3322.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_827INVENTORY1_P_3.getValueOrDefault(se3323.modify(inventory_locn)))));
          e842 = e842->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_827 += agg827;
      long agg828 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e843 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e843) {
          long inventory_locn = e843->INVENTORY_LOCN;
          long inventory_dateid = e843->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e843->INVENTORY_KSN;
          long v843 = e843->__av;
          agg828 += (v843 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3325.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3326.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_828INVENTORY1_P_3.getValueOrDefault(se3327.modify(inventory_locn)))));
          e843 = e843->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_828 += agg828;
      long agg829 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e844 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e844) {
          long inventory_locn = e844->INVENTORY_LOCN;
          long inventory_dateid = e844->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e844->INVENTORY_KSN;
          long v844 = e844->__av;
          agg829 += (v844 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3329.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3330.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_829INVENTORY1_P_3.getValueOrDefault(se3331.modify(inventory_locn)))));
          e844 = e844->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_829 += agg829;
      long agg830 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e845 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e845) {
          long inventory_locn = e845->INVENTORY_LOCN;
          long inventory_dateid = e845->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e845->INVENTORY_KSN;
          long v845 = e845->__av;
          agg830 += (v845 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3333.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3334.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_830INVENTORY1_P_3.getValueOrDefault(se3335.modify(inventory_locn)))));
          e845 = e845->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_830 += agg830;
      long agg831 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e846 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e846) {
          long inventory_locn = e846->INVENTORY_LOCN;
          long inventory_dateid = e846->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e846->INVENTORY_KSN;
          long v846 = e846->__av;
          agg831 += (v846 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3337.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3338.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_831INVENTORY1_P_3.getValueOrDefault(se3339.modify(inventory_locn)))));
          e846 = e846->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_831 += agg831;
      long agg832 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e847 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e847) {
          long inventory_locn = e847->INVENTORY_LOCN;
          long inventory_dateid = e847->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e847->INVENTORY_KSN;
          long v847 = e847->__av;
          agg832 += (v847 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3341.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3342.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3343.modify(inventory_locn)))));
          e847 = e847->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_832 += agg832;
      long agg833 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e848 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e848) {
          long inventory_locn = e848->INVENTORY_LOCN;
          long inventory_dateid = e848->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e848->INVENTORY_KSN;
          long v848 = e848->__av;
          agg833 += (v848 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3345.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3346.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3347.modify(inventory_locn)))));
          e848 = e848->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_833 += agg833;
      long agg834 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e849 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e849) {
          long inventory_locn = e849->INVENTORY_LOCN;
          long inventory_dateid = e849->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e849->INVENTORY_KSN;
          long v849 = e849->__av;
          agg834 += (v849 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3349.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3350.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3351.modify(inventory_locn)))));
          e849 = e849->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_834 += agg834;
      DOUBLE_TYPE agg835 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e850 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e850) {
          long inventory_locn = e850->INVENTORY_LOCN;
          long inventory_dateid = e850->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e850->INVENTORY_KSN;
          long v850 = e850->__av;
          agg835 += (v850 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3353.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3354.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3355.modify(inventory_locn)))));
          e850 = e850->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_835 += agg835;
      long agg836 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e851 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e851) {
          long inventory_locn = e851->INVENTORY_LOCN;
          long inventory_dateid = e851->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e851->INVENTORY_KSN;
          long v851 = e851->__av;
          agg836 += (v851 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3357.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3358.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3359.modify(inventory_locn)))));
          e851 = e851->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_836 += agg836;
      long agg837 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e852 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e852) {
          long inventory_locn = e852->INVENTORY_LOCN;
          long inventory_dateid = e852->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e852->INVENTORY_KSN;
          long v852 = e852->__av;
          agg837 += (v852 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3361.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3362.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3363.modify(inventory_locn)))));
          e852 = e852->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_837 += agg837;
      long agg838 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e853 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e853) {
          long inventory_locn = e853->INVENTORY_LOCN;
          long inventory_dateid = e853->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e853->INVENTORY_KSN;
          long v853 = e853->__av;
          agg838 += (v853 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3365.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3366.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3367.modify(inventory_locn)))));
          e853 = e853->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_838 += agg838;
      long agg839 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e854 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e854) {
          long inventory_locn = e854->INVENTORY_LOCN;
          long inventory_dateid = e854->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e854->INVENTORY_KSN;
          long v854 = e854->__av;
          agg839 += (v854 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3369.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3370.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3371.modify(inventory_locn)))));
          e854 = e854->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_839 += agg839;
      DOUBLE_TYPE agg840 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e855 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e855) {
          long inventory_locn = e855->INVENTORY_LOCN;
          long inventory_dateid = e855->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e855->INVENTORY_KSN;
          long v855 = e855->__av;
          agg840 += (v855 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3373.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3374.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3375.modify(inventory_locn)))));
          e855 = e855->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_840 += agg840;
      long agg841 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e856 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e856) {
          long inventory_locn = e856->INVENTORY_LOCN;
          long inventory_dateid = e856->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e856->INVENTORY_KSN;
          long v856 = e856->__av;
          agg841 += (v856 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3377.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3378.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.getValueOrDefault(se3379.modify(inventory_locn)))));
          e856 = e856->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_841 += agg841;
      long agg842 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e857 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e857) {
          long inventory_locn = e857->INVENTORY_LOCN;
          long inventory_dateid = e857->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e857->INVENTORY_KSN;
          long v857 = e857->__av;
          agg842 += (v857 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3381.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3382.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_842INVENTORY1_P_3.getValueOrDefault(se3383.modify(inventory_locn)))));
          e857 = e857->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_842 += agg842;
      long agg843 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e858 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e858) {
          long inventory_locn = e858->INVENTORY_LOCN;
          long inventory_dateid = e858->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e858->INVENTORY_KSN;
          long v858 = e858->__av;
          agg843 += (v858 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3385.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3386.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_843INVENTORY1_P_3.getValueOrDefault(se3387.modify(inventory_locn)))));
          e858 = e858->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_843 += agg843;
      long agg844 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e859 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e859) {
          long inventory_locn = e859->INVENTORY_LOCN;
          long inventory_dateid = e859->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e859->INVENTORY_KSN;
          long v859 = e859->__av;
          agg844 += (v859 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3389.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3390.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_844INVENTORY1_P_3.getValueOrDefault(se3391.modify(inventory_locn)))));
          e859 = e859->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_844 += agg844;
      long agg845 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e860 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e860) {
          long inventory_locn = e860->INVENTORY_LOCN;
          long inventory_dateid = e860->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e860->INVENTORY_KSN;
          long v860 = e860->__av;
          agg845 += (v860 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3393.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3394.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_845INVENTORY1_P_3.getValueOrDefault(se3395.modify(inventory_locn)))));
          e860 = e860->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_845 += agg845;
      long agg846 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e861 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e861) {
          long inventory_locn = e861->INVENTORY_LOCN;
          long inventory_dateid = e861->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e861->INVENTORY_KSN;
          long v861 = e861->__av;
          agg846 += (v861 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3397.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3398.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3399.modify(inventory_locn)))));
          e861 = e861->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_846 += agg846;
      long agg847 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e862 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e862) {
          long inventory_locn = e862->INVENTORY_LOCN;
          long inventory_dateid = e862->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e862->INVENTORY_KSN;
          long v862 = e862->__av;
          agg847 += (v862 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3401.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3402.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3403.modify(inventory_locn)))));
          e862 = e862->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_847 += agg847;
      long agg848 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e863 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e863) {
          long inventory_locn = e863->INVENTORY_LOCN;
          long inventory_dateid = e863->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e863->INVENTORY_KSN;
          long v863 = e863->__av;
          agg848 += (v863 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3405.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3406.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3407.modify(inventory_locn)))));
          e863 = e863->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_848 += agg848;
      DOUBLE_TYPE agg849 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e864 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e864) {
          long inventory_locn = e864->INVENTORY_LOCN;
          long inventory_dateid = e864->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e864->INVENTORY_KSN;
          long v864 = e864->__av;
          agg849 += (v864 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3409.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3410.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3411.modify(inventory_locn)))));
          e864 = e864->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_849 += agg849;
      long agg850 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e865 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e865) {
          long inventory_locn = e865->INVENTORY_LOCN;
          long inventory_dateid = e865->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e865->INVENTORY_KSN;
          long v865 = e865->__av;
          agg850 += (v865 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3413.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3414.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3415.modify(inventory_locn)))));
          e865 = e865->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_850 += agg850;
      long agg851 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e866 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e866) {
          long inventory_locn = e866->INVENTORY_LOCN;
          long inventory_dateid = e866->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e866->INVENTORY_KSN;
          long v866 = e866->__av;
          agg851 += (v866 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3417.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3418.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3419.modify(inventory_locn)))));
          e866 = e866->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_851 += agg851;
      long agg852 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e867 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e867) {
          long inventory_locn = e867->INVENTORY_LOCN;
          long inventory_dateid = e867->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e867->INVENTORY_KSN;
          long v867 = e867->__av;
          agg852 += (v867 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3421.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3422.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3423.modify(inventory_locn)))));
          e867 = e867->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_852 += agg852;
      long agg853 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e868 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e868) {
          long inventory_locn = e868->INVENTORY_LOCN;
          long inventory_dateid = e868->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e868->INVENTORY_KSN;
          long v868 = e868->__av;
          agg853 += (v868 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3425.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3426.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3427.modify(inventory_locn)))));
          e868 = e868->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_853 += agg853;
      DOUBLE_TYPE agg854 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e869 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e869) {
          long inventory_locn = e869->INVENTORY_LOCN;
          long inventory_dateid = e869->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e869->INVENTORY_KSN;
          long v869 = e869->__av;
          agg854 += (v869 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3429.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3430.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3431.modify(inventory_locn)))));
          e869 = e869->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_854 += agg854;
      long agg855 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e870 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e870) {
          long inventory_locn = e870->INVENTORY_LOCN;
          long inventory_dateid = e870->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e870->INVENTORY_KSN;
          long v870 = e870->__av;
          agg855 += (v870 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3433.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3434.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.getValueOrDefault(se3435.modify(inventory_locn)))));
          e870 = e870->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_855 += agg855;
      long agg856 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e871 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e871) {
          long inventory_locn = e871->INVENTORY_LOCN;
          long inventory_dateid = e871->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e871->INVENTORY_KSN;
          long v871 = e871->__av;
          agg856 += (v871 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3437.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3438.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_856INVENTORY1_P_3.getValueOrDefault(se3439.modify(inventory_locn)))));
          e871 = e871->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_856 += agg856;
      long agg857 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e872 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e872) {
          long inventory_locn = e872->INVENTORY_LOCN;
          long inventory_dateid = e872->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e872->INVENTORY_KSN;
          long v872 = e872->__av;
          agg857 += (v872 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3441.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3442.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_857INVENTORY1_P_3.getValueOrDefault(se3443.modify(inventory_locn)))));
          e872 = e872->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_857 += agg857;
      long agg858 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e873 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e873) {
          long inventory_locn = e873->INVENTORY_LOCN;
          long inventory_dateid = e873->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e873->INVENTORY_KSN;
          long v873 = e873->__av;
          agg858 += (v873 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3445.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3446.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_858INVENTORY1_P_3.getValueOrDefault(se3447.modify(inventory_locn)))));
          e873 = e873->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_858 += agg858;
      long agg859 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e874 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e874) {
          long inventory_locn = e874->INVENTORY_LOCN;
          long inventory_dateid = e874->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e874->INVENTORY_KSN;
          long v874 = e874->__av;
          agg859 += (v874 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3449.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3450.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3451.modify(inventory_locn)))));
          e874 = e874->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_859 += agg859;
      long agg860 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e875 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e875) {
          long inventory_locn = e875->INVENTORY_LOCN;
          long inventory_dateid = e875->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e875->INVENTORY_KSN;
          long v875 = e875->__av;
          agg860 += (v875 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3453.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3454.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3455.modify(inventory_locn)))));
          e875 = e875->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_860 += agg860;
      long agg861 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e876 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e876) {
          long inventory_locn = e876->INVENTORY_LOCN;
          long inventory_dateid = e876->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e876->INVENTORY_KSN;
          long v876 = e876->__av;
          agg861 += (v876 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3457.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3458.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3459.modify(inventory_locn)))));
          e876 = e876->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_861 += agg861;
      DOUBLE_TYPE agg862 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e877 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e877) {
          long inventory_locn = e877->INVENTORY_LOCN;
          long inventory_dateid = e877->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e877->INVENTORY_KSN;
          long v877 = e877->__av;
          agg862 += (v877 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3461.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3462.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3463.modify(inventory_locn)))));
          e877 = e877->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_862 += agg862;
      long agg863 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e878 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e878) {
          long inventory_locn = e878->INVENTORY_LOCN;
          long inventory_dateid = e878->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e878->INVENTORY_KSN;
          long v878 = e878->__av;
          agg863 += (v878 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3465.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3466.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3467.modify(inventory_locn)))));
          e878 = e878->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_863 += agg863;
      long agg864 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e879 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e879) {
          long inventory_locn = e879->INVENTORY_LOCN;
          long inventory_dateid = e879->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e879->INVENTORY_KSN;
          long v879 = e879->__av;
          agg864 += (v879 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3469.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3470.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3471.modify(inventory_locn)))));
          e879 = e879->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_864 += agg864;
      long agg865 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e880 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e880) {
          long inventory_locn = e880->INVENTORY_LOCN;
          long inventory_dateid = e880->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e880->INVENTORY_KSN;
          long v880 = e880->__av;
          agg865 += (v880 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3473.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3474.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3475.modify(inventory_locn)))));
          e880 = e880->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_865 += agg865;
      long agg866 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e881 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e881) {
          long inventory_locn = e881->INVENTORY_LOCN;
          long inventory_dateid = e881->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e881->INVENTORY_KSN;
          long v881 = e881->__av;
          agg866 += (v881 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3477.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3478.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3479.modify(inventory_locn)))));
          e881 = e881->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_866 += agg866;
      DOUBLE_TYPE agg867 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e882 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e882) {
          long inventory_locn = e882->INVENTORY_LOCN;
          long inventory_dateid = e882->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e882->INVENTORY_KSN;
          long v882 = e882->__av;
          agg867 += (v882 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3481.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3482.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3483.modify(inventory_locn)))));
          e882 = e882->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_867 += agg867;
      long agg868 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e883 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e883) {
          long inventory_locn = e883->INVENTORY_LOCN;
          long inventory_dateid = e883->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e883->INVENTORY_KSN;
          long v883 = e883->__av;
          agg868 += (v883 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3485.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3486.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.getValueOrDefault(se3487.modify(inventory_locn)))));
          e883 = e883->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_868 += agg868;
      long agg869 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e884 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e884) {
          long inventory_locn = e884->INVENTORY_LOCN;
          long inventory_dateid = e884->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e884->INVENTORY_KSN;
          long v884 = e884->__av;
          agg869 += (v884 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3489.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3490.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_869INVENTORY1_P_3.getValueOrDefault(se3491.modify(inventory_locn)))));
          e884 = e884->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_869 += agg869;
      long agg870 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e885 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e885) {
          long inventory_locn = e885->INVENTORY_LOCN;
          long inventory_dateid = e885->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e885->INVENTORY_KSN;
          long v885 = e885->__av;
          agg870 += (v885 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3493.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3494.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_870INVENTORY1_P_3.getValueOrDefault(se3495.modify(inventory_locn)))));
          e885 = e885->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_870 += agg870;
      long agg871 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e886 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e886) {
          long inventory_locn = e886->INVENTORY_LOCN;
          long inventory_dateid = e886->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e886->INVENTORY_KSN;
          long v886 = e886->__av;
          agg871 += (v886 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3497.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3498.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3499.modify(inventory_locn)))));
          e886 = e886->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_871 += agg871;
      long agg872 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e887 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e887) {
          long inventory_locn = e887->INVENTORY_LOCN;
          long inventory_dateid = e887->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e887->INVENTORY_KSN;
          long v887 = e887->__av;
          agg872 += (v887 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3501.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3502.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3503.modify(inventory_locn)))));
          e887 = e887->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_872 += agg872;
      long agg873 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e888 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e888) {
          long inventory_locn = e888->INVENTORY_LOCN;
          long inventory_dateid = e888->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e888->INVENTORY_KSN;
          long v888 = e888->__av;
          agg873 += (v888 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3505.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3506.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3507.modify(inventory_locn)))));
          e888 = e888->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_873 += agg873;
      DOUBLE_TYPE agg874 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e889 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e889) {
          long inventory_locn = e889->INVENTORY_LOCN;
          long inventory_dateid = e889->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e889->INVENTORY_KSN;
          long v889 = e889->__av;
          agg874 += (v889 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3509.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3510.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3511.modify(inventory_locn)))));
          e889 = e889->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_874 += agg874;
      long agg875 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e890 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e890) {
          long inventory_locn = e890->INVENTORY_LOCN;
          long inventory_dateid = e890->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e890->INVENTORY_KSN;
          long v890 = e890->__av;
          agg875 += (v890 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3513.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3514.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3515.modify(inventory_locn)))));
          e890 = e890->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_875 += agg875;
      long agg876 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e891 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e891) {
          long inventory_locn = e891->INVENTORY_LOCN;
          long inventory_dateid = e891->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e891->INVENTORY_KSN;
          long v891 = e891->__av;
          agg876 += (v891 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3517.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3518.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3519.modify(inventory_locn)))));
          e891 = e891->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_876 += agg876;
      long agg877 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e892 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e892) {
          long inventory_locn = e892->INVENTORY_LOCN;
          long inventory_dateid = e892->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e892->INVENTORY_KSN;
          long v892 = e892->__av;
          agg877 += (v892 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3521.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3522.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3523.modify(inventory_locn)))));
          e892 = e892->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_877 += agg877;
      long agg878 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e893 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e893) {
          long inventory_locn = e893->INVENTORY_LOCN;
          long inventory_dateid = e893->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e893->INVENTORY_KSN;
          long v893 = e893->__av;
          agg878 += (v893 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3525.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3526.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3527.modify(inventory_locn)))));
          e893 = e893->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_878 += agg878;
      DOUBLE_TYPE agg879 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e894 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e894) {
          long inventory_locn = e894->INVENTORY_LOCN;
          long inventory_dateid = e894->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e894->INVENTORY_KSN;
          long v894 = e894->__av;
          agg879 += (v894 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3529.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3530.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3531.modify(inventory_locn)))));
          e894 = e894->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_879 += agg879;
      long agg880 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e895 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e895) {
          long inventory_locn = e895->INVENTORY_LOCN;
          long inventory_dateid = e895->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e895->INVENTORY_KSN;
          long v895 = e895->__av;
          agg880 += (v895 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3533.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3534.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.getValueOrDefault(se3535.modify(inventory_locn)))));
          e895 = e895->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_880 += agg880;
      long agg881 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e896 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e896) {
          long inventory_locn = e896->INVENTORY_LOCN;
          long inventory_dateid = e896->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e896->INVENTORY_KSN;
          long v896 = e896->__av;
          agg881 += (v896 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3537.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3538.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_881INVENTORY1_P_3.getValueOrDefault(se3539.modify(inventory_locn)))));
          e896 = e896->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_881 += agg881;
      long agg882 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e897 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e897) {
          long inventory_locn = e897->INVENTORY_LOCN;
          long inventory_dateid = e897->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e897->INVENTORY_KSN;
          long v897 = e897->__av;
          agg882 += (v897 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3541.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3542.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3543.modify(inventory_locn)))));
          e897 = e897->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_882 += agg882;
      long agg883 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e898 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e898) {
          long inventory_locn = e898->INVENTORY_LOCN;
          long inventory_dateid = e898->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e898->INVENTORY_KSN;
          long v898 = e898->__av;
          agg883 += (v898 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3545.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3546.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3547.modify(inventory_locn)))));
          e898 = e898->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_883 += agg883;
      long agg884 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e899 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e899) {
          long inventory_locn = e899->INVENTORY_LOCN;
          long inventory_dateid = e899->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e899->INVENTORY_KSN;
          long v899 = e899->__av;
          agg884 += (v899 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3549.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3550.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3551.modify(inventory_locn)))));
          e899 = e899->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_884 += agg884;
      DOUBLE_TYPE agg885 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e900 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e900) {
          long inventory_locn = e900->INVENTORY_LOCN;
          long inventory_dateid = e900->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e900->INVENTORY_KSN;
          long v900 = e900->__av;
          agg885 += (v900 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3553.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3554.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3555.modify(inventory_locn)))));
          e900 = e900->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_885 += agg885;
      long agg886 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e901 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e901) {
          long inventory_locn = e901->INVENTORY_LOCN;
          long inventory_dateid = e901->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e901->INVENTORY_KSN;
          long v901 = e901->__av;
          agg886 += (v901 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3557.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3558.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3559.modify(inventory_locn)))));
          e901 = e901->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_886 += agg886;
      long agg887 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e902 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e902) {
          long inventory_locn = e902->INVENTORY_LOCN;
          long inventory_dateid = e902->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e902->INVENTORY_KSN;
          long v902 = e902->__av;
          agg887 += (v902 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3561.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3562.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3563.modify(inventory_locn)))));
          e902 = e902->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_887 += agg887;
      long agg888 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e903 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e903) {
          long inventory_locn = e903->INVENTORY_LOCN;
          long inventory_dateid = e903->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e903->INVENTORY_KSN;
          long v903 = e903->__av;
          agg888 += (v903 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3565.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3566.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3567.modify(inventory_locn)))));
          e903 = e903->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_888 += agg888;
      long agg889 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e904 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e904) {
          long inventory_locn = e904->INVENTORY_LOCN;
          long inventory_dateid = e904->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e904->INVENTORY_KSN;
          long v904 = e904->__av;
          agg889 += (v904 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3569.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3570.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3571.modify(inventory_locn)))));
          e904 = e904->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_889 += agg889;
      DOUBLE_TYPE agg890 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e905 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e905) {
          long inventory_locn = e905->INVENTORY_LOCN;
          long inventory_dateid = e905->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e905->INVENTORY_KSN;
          long v905 = e905->__av;
          agg890 += (v905 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3573.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3574.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3575.modify(inventory_locn)))));
          e905 = e905->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_890 += agg890;
      long agg891 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e906 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e906) {
          long inventory_locn = e906->INVENTORY_LOCN;
          long inventory_dateid = e906->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e906->INVENTORY_KSN;
          long v906 = e906->__av;
          agg891 += (v906 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3577.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3578.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.getValueOrDefault(se3579.modify(inventory_locn)))));
          e906 = e906->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_891 += agg891;
      long agg892 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e907 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e907) {
          long inventory_locn = e907->INVENTORY_LOCN;
          long inventory_dateid = e907->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e907->INVENTORY_KSN;
          long v907 = e907->__av;
          agg892 += (v907 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3581.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_892INVENTORY1_P_2.getValueOrDefault(se3582.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3583.modify(inventory_locn)))));
          e907 = e907->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_892 += agg892;
      long agg893 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e908 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e908) {
          long inventory_locn = e908->INVENTORY_LOCN;
          long inventory_dateid = e908->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e908->INVENTORY_KSN;
          long v908 = e908->__av;
          agg893 += (v908 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3585.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_893INVENTORY1_P_2.getValueOrDefault(se3586.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3587.modify(inventory_locn)))));
          e908 = e908->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_893 += agg893;
      long agg894 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e909 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e909) {
          long inventory_locn = e909->INVENTORY_LOCN;
          long inventory_dateid = e909->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e909->INVENTORY_KSN;
          long v909 = e909->__av;
          agg894 += (v909 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3589.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_894INVENTORY1_P_2.getValueOrDefault(se3590.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3591.modify(inventory_locn)))));
          e909 = e909->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_894 += agg894;
      DOUBLE_TYPE agg895 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e910 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e910) {
          long inventory_locn = e910->INVENTORY_LOCN;
          long inventory_dateid = e910->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e910->INVENTORY_KSN;
          long v910 = e910->__av;
          agg895 += (v910 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3593.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_895INVENTORY1_P_2.getValueOrDefault(se3594.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3595.modify(inventory_locn)))));
          e910 = e910->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_895 += agg895;
      long agg896 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e911 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e911) {
          long inventory_locn = e911->INVENTORY_LOCN;
          long inventory_dateid = e911->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e911->INVENTORY_KSN;
          long v911 = e911->__av;
          agg896 += (v911 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3597.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3598.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3599.modify(inventory_locn)))));
          e911 = e911->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_896 += agg896;
      long agg897 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e912 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e912) {
          long inventory_locn = e912->INVENTORY_LOCN;
          long inventory_dateid = e912->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e912->INVENTORY_KSN;
          long v912 = e912->__av;
          agg897 += (v912 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3601.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3602.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3603.modify(inventory_locn)))));
          e912 = e912->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_897 += agg897;
      long agg898 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e913 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e913) {
          long inventory_locn = e913->INVENTORY_LOCN;
          long inventory_dateid = e913->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e913->INVENTORY_KSN;
          long v913 = e913->__av;
          agg898 += (v913 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3605.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3606.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3607.modify(inventory_locn)))));
          e913 = e913->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_898 += agg898;
      long agg899 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e914 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e914) {
          long inventory_locn = e914->INVENTORY_LOCN;
          long inventory_dateid = e914->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e914->INVENTORY_KSN;
          long v914 = e914->__av;
          agg899 += (v914 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3609.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3610.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3611.modify(inventory_locn)))));
          e914 = e914->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_899 += agg899;
      DOUBLE_TYPE agg900 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e915 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e915) {
          long inventory_locn = e915->INVENTORY_LOCN;
          long inventory_dateid = e915->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e915->INVENTORY_KSN;
          long v915 = e915->__av;
          agg900 += (v915 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3613.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3614.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3615.modify(inventory_locn)))));
          e915 = e915->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_900 += agg900;
      long agg901 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e916 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e916) {
          long inventory_locn = e916->INVENTORY_LOCN;
          long inventory_dateid = e916->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e916->INVENTORY_KSN;
          long v916 = e916->__av;
          agg901 += (v916 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3617.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_34INVENTORY1_P_2.getValueOrDefault(se3618.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3619.modify(inventory_locn)))));
          e916 = e916->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_901 += agg901;
      long agg902 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e917 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e917) {
          long inventory_locn = e917->INVENTORY_LOCN;
          long inventory_dateid = e917->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e917->INVENTORY_KSN;
          long v917 = e917->__av;
          agg902 += (v917 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3621.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_902INVENTORY1_P_2.getValueOrDefault(se3622.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3623.modify(inventory_locn)))));
          e917 = e917->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_902 += agg902;
      long agg903 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e918 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e918) {
          long inventory_locn = e918->INVENTORY_LOCN;
          long inventory_dateid = e918->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e918->INVENTORY_KSN;
          long v918 = e918->__av;
          agg903 += (v918 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3625.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_903INVENTORY1_P_2.getValueOrDefault(se3626.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3627.modify(inventory_locn)))));
          e918 = e918->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_903 += agg903;
      DOUBLE_TYPE agg904 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e919 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e919) {
          long inventory_locn = e919->INVENTORY_LOCN;
          long inventory_dateid = e919->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e919->INVENTORY_KSN;
          long v919 = e919->__av;
          agg904 += (v919 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3629.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_904INVENTORY1_P_2.getValueOrDefault(se3630.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3631.modify(inventory_locn)))));
          e919 = e919->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_904 += agg904;
      long agg905 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e920 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e920) {
          long inventory_locn = e920->INVENTORY_LOCN;
          long inventory_dateid = e920->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e920->INVENTORY_KSN;
          long v920 = e920->__av;
          agg905 += (v920 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3633.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3634.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3635.modify(inventory_locn)))));
          e920 = e920->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_905 += agg905;
      long agg906 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e921 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e921) {
          long inventory_locn = e921->INVENTORY_LOCN;
          long inventory_dateid = e921->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e921->INVENTORY_KSN;
          long v921 = e921->__av;
          agg906 += (v921 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3637.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3638.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3639.modify(inventory_locn)))));
          e921 = e921->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_906 += agg906;
      long agg907 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e922 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e922) {
          long inventory_locn = e922->INVENTORY_LOCN;
          long inventory_dateid = e922->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e922->INVENTORY_KSN;
          long v922 = e922->__av;
          agg907 += (v922 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3641.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3642.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3643.modify(inventory_locn)))));
          e922 = e922->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_907 += agg907;
      long agg908 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e923 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e923) {
          long inventory_locn = e923->INVENTORY_LOCN;
          long inventory_dateid = e923->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e923->INVENTORY_KSN;
          long v923 = e923->__av;
          agg908 += (v923 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3645.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3646.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3647.modify(inventory_locn)))));
          e923 = e923->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_908 += agg908;
      DOUBLE_TYPE agg909 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e924 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e924) {
          long inventory_locn = e924->INVENTORY_LOCN;
          long inventory_dateid = e924->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e924->INVENTORY_KSN;
          long v924 = e924->__av;
          agg909 += (v924 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3649.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3650.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3651.modify(inventory_locn)))));
          e924 = e924->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_909 += agg909;
      long agg910 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e925 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e925) {
          long inventory_locn = e925->INVENTORY_LOCN;
          long inventory_dateid = e925->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e925->INVENTORY_KSN;
          long v925 = e925->__av;
          agg910 += (v925 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3653.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_35INVENTORY1_P_2.getValueOrDefault(se3654.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3655.modify(inventory_locn)))));
          e925 = e925->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_910 += agg910;
      long agg911 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e926 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e926) {
          long inventory_locn = e926->INVENTORY_LOCN;
          long inventory_dateid = e926->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e926->INVENTORY_KSN;
          long v926 = e926->__av;
          agg911 += (v926 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3657.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_911INVENTORY1_P_2.getValueOrDefault(se3658.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3659.modify(inventory_locn)))));
          e926 = e926->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_911 += agg911;
      DOUBLE_TYPE agg912 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e927 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e927) {
          long inventory_locn = e927->INVENTORY_LOCN;
          long inventory_dateid = e927->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e927->INVENTORY_KSN;
          long v927 = e927->__av;
          agg912 += (v927 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3661.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_912INVENTORY1_P_2.getValueOrDefault(se3662.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3663.modify(inventory_locn)))));
          e927 = e927->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_912 += agg912;
      long agg913 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e928 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e928) {
          long inventory_locn = e928->INVENTORY_LOCN;
          long inventory_dateid = e928->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e928->INVENTORY_KSN;
          long v928 = e928->__av;
          agg913 += (v928 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3665.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3666.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3667.modify(inventory_locn)))));
          e928 = e928->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_913 += agg913;
      long agg914 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e929 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e929) {
          long inventory_locn = e929->INVENTORY_LOCN;
          long inventory_dateid = e929->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e929->INVENTORY_KSN;
          long v929 = e929->__av;
          agg914 += (v929 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3669.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3670.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3671.modify(inventory_locn)))));
          e929 = e929->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_914 += agg914;
      long agg915 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e930 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e930) {
          long inventory_locn = e930->INVENTORY_LOCN;
          long inventory_dateid = e930->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e930->INVENTORY_KSN;
          long v930 = e930->__av;
          agg915 += (v930 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3673.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3674.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3675.modify(inventory_locn)))));
          e930 = e930->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_915 += agg915;
      long agg916 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e931 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e931) {
          long inventory_locn = e931->INVENTORY_LOCN;
          long inventory_dateid = e931->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e931->INVENTORY_KSN;
          long v931 = e931->__av;
          agg916 += (v931 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3677.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3678.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3679.modify(inventory_locn)))));
          e931 = e931->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_916 += agg916;
      DOUBLE_TYPE agg917 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e932 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e932) {
          long inventory_locn = e932->INVENTORY_LOCN;
          long inventory_dateid = e932->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e932->INVENTORY_KSN;
          long v932 = e932->__av;
          agg917 += (v932 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3681.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3682.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3683.modify(inventory_locn)))));
          e932 = e932->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_917 += agg917;
      long agg918 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e933 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e933) {
          long inventory_locn = e933->INVENTORY_LOCN;
          long inventory_dateid = e933->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e933->INVENTORY_KSN;
          long v933 = e933->__av;
          agg918 += (v933 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3685.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_36INVENTORY1_P_2.getValueOrDefault(se3686.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3687.modify(inventory_locn)))));
          e933 = e933->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_918 += agg918;
      DOUBLE_TYPE agg919 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e934 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e934) {
          long inventory_locn = e934->INVENTORY_LOCN;
          long inventory_dateid = e934->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e934->INVENTORY_KSN;
          long v934 = e934->__av;
          agg919 += (v934 * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_1.getValueOrDefault(se3689.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_919INVENTORY1_P_2.getValueOrDefault(se3690.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3691.modify(inventory_locn)))));
          e934 = e934->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_919 += agg919;
      DOUBLE_TYPE agg920 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e935 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e935) {
          long inventory_locn = e935->INVENTORY_LOCN;
          long inventory_dateid = e935->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e935->INVENTORY_KSN;
          long v935 = e935->__av;
          agg920 += (v935 * (__SQL_SUM_AGGREGATE_38INVENTORY1_P_1.getValueOrDefault(se3693.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3694.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3695.modify(inventory_locn)))));
          e935 = e935->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_920 += agg920;
      DOUBLE_TYPE agg921 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e936 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e936) {
          long inventory_locn = e936->INVENTORY_LOCN;
          long inventory_dateid = e936->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e936->INVENTORY_KSN;
          long v936 = e936->__av;
          agg921 += (v936 * (__SQL_SUM_AGGREGATE_39INVENTORY1_P_1.getValueOrDefault(se3697.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3698.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3699.modify(inventory_locn)))));
          e936 = e936->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_921 += agg921;
      DOUBLE_TYPE agg922 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e937 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e937) {
          long inventory_locn = e937->INVENTORY_LOCN;
          long inventory_dateid = e937->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e937->INVENTORY_KSN;
          long v937 = e937->__av;
          agg922 += (v937 * (__SQL_SUM_AGGREGATE_40INVENTORY1_P_1.getValueOrDefault(se3701.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3702.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3703.modify(inventory_locn)))));
          e937 = e937->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_922 += agg922;
      DOUBLE_TYPE agg923 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e938 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e938) {
          long inventory_locn = e938->INVENTORY_LOCN;
          long inventory_dateid = e938->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e938->INVENTORY_KSN;
          long v938 = e938->__av;
          agg923 += (v938 * (__SQL_SUM_AGGREGATE_41INVENTORY1_P_1.getValueOrDefault(se3705.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3706.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3707.modify(inventory_locn)))));
          e938 = e938->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_923 += agg923;
      DOUBLE_TYPE agg924 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e939 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e939) {
          long inventory_locn = e939->INVENTORY_LOCN;
          long inventory_dateid = e939->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e939->INVENTORY_KSN;
          long v939 = e939->__av;
          agg924 += (v939 * (__SQL_SUM_AGGREGATE_42INVENTORY1_P_1.getValueOrDefault(se3709.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3710.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3711.modify(inventory_locn)))));
          e939 = e939->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_924 += agg924;
      DOUBLE_TYPE agg925 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e940 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e940) {
          long inventory_locn = e940->INVENTORY_LOCN;
          long inventory_dateid = e940->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e940->INVENTORY_KSN;
          long v940 = e940->__av;
          agg925 += (v940 * (__SQL_SUM_AGGREGATE_43INVENTORY1_P_1.getValueOrDefault(se3713.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_37INVENTORY1_P_2.getValueOrDefault(se3714.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3715.modify(inventory_locn)))));
          e940 = e940->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_925 += agg925;
      long agg926 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e941 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e941) {
          long inventory_locn = e941->INVENTORY_LOCN;
          long inventory_dateid = e941->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e941->INVENTORY_KSN;
          long v941 = e941->__av;
          agg926 += (v941 * (__SQL_SUM_AGGREGATE_926INVENTORY1_P_1.getValueOrDefault(se3717.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3718.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3719.modify(inventory_locn)))));
          e941 = e941->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_926 += agg926;
      long agg927 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e942 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e942) {
          long inventory_locn = e942->INVENTORY_LOCN;
          long inventory_dateid = e942->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e942->INVENTORY_KSN;
          long v942 = e942->__av;
          agg927 += (v942 * (__SQL_SUM_AGGREGATE_927INVENTORY1_P_1.getValueOrDefault(se3721.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3722.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3723.modify(inventory_locn)))));
          e942 = e942->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_927 += agg927;
      long agg928 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e943 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e943) {
          long inventory_locn = e943->INVENTORY_LOCN;
          long inventory_dateid = e943->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e943->INVENTORY_KSN;
          long v943 = e943->__av;
          agg928 += (v943 * (__SQL_SUM_AGGREGATE_928INVENTORY1_P_1.getValueOrDefault(se3725.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3726.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3727.modify(inventory_locn)))));
          e943 = e943->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_928 += agg928;
      long agg929 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e944 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e944) {
          long inventory_locn = e944->INVENTORY_LOCN;
          long inventory_dateid = e944->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e944->INVENTORY_KSN;
          long v944 = e944->__av;
          agg929 += (v944 * (__SQL_SUM_AGGREGATE_929INVENTORY1_P_1.getValueOrDefault(se3729.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3730.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3731.modify(inventory_locn)))));
          e944 = e944->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_929 += agg929;
      DOUBLE_TYPE agg930 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e945 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e945) {
          long inventory_locn = e945->INVENTORY_LOCN;
          long inventory_dateid = e945->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e945->INVENTORY_KSN;
          long v945 = e945->__av;
          agg930 += (v945 * (__SQL_SUM_AGGREGATE_930INVENTORY1_P_1.getValueOrDefault(se3733.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3734.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3735.modify(inventory_locn)))));
          e945 = e945->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_930 += agg930;
      long agg931 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e946 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e946) {
          long inventory_locn = e946->INVENTORY_LOCN;
          long inventory_dateid = e946->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e946->INVENTORY_KSN;
          long v946 = e946->__av;
          agg931 += (v946 * (__SQL_SUM_AGGREGATE_931INVENTORY1_P_1.getValueOrDefault(se3737.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3738.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3739.modify(inventory_locn)))));
          e946 = e946->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_931 += agg931;
      long agg932 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e947 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e947) {
          long inventory_locn = e947->INVENTORY_LOCN;
          long inventory_dateid = e947->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e947->INVENTORY_KSN;
          long v947 = e947->__av;
          agg932 += (v947 * (__SQL_SUM_AGGREGATE_932INVENTORY1_P_1.getValueOrDefault(se3741.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3742.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3743.modify(inventory_locn)))));
          e947 = e947->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_932 += agg932;
      long agg933 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e948 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e948) {
          long inventory_locn = e948->INVENTORY_LOCN;
          long inventory_dateid = e948->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e948->INVENTORY_KSN;
          long v948 = e948->__av;
          agg933 += (v948 * (__SQL_SUM_AGGREGATE_933INVENTORY1_P_1.getValueOrDefault(se3745.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3746.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3747.modify(inventory_locn)))));
          e948 = e948->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_933 += agg933;
      long agg934 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e949 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e949) {
          long inventory_locn = e949->INVENTORY_LOCN;
          long inventory_dateid = e949->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e949->INVENTORY_KSN;
          long v949 = e949->__av;
          agg934 += (v949 * (__SQL_SUM_AGGREGATE_934INVENTORY1_P_1.getValueOrDefault(se3749.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3750.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3751.modify(inventory_locn)))));
          e949 = e949->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_934 += agg934;
      DOUBLE_TYPE agg935 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e950 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e950) {
          long inventory_locn = e950->INVENTORY_LOCN;
          long inventory_dateid = e950->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e950->INVENTORY_KSN;
          long v950 = e950->__av;
          agg935 += (v950 * (__SQL_SUM_AGGREGATE_935INVENTORY1_P_1.getValueOrDefault(se3753.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3754.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3755.modify(inventory_locn)))));
          e950 = e950->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_935 += agg935;
      long agg936 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e951 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e951) {
          long inventory_locn = e951->INVENTORY_LOCN;
          long inventory_dateid = e951->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e951->INVENTORY_KSN;
          long v951 = e951->__av;
          agg936 += (v951 * (__SQL_SUM_AGGREGATE_936INVENTORY1_P_1.getValueOrDefault(se3757.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3758.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3759.modify(inventory_locn)))));
          e951 = e951->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_936 += agg936;
      long agg937 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e952 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e952) {
          long inventory_locn = e952->INVENTORY_LOCN;
          long inventory_dateid = e952->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e952->INVENTORY_KSN;
          long v952 = e952->__av;
          agg937 += (v952 * (__SQL_SUM_AGGREGATE_937INVENTORY1_P_1.getValueOrDefault(se3761.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3762.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3763.modify(inventory_locn)))));
          e952 = e952->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_937 += agg937;
      long agg938 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e953 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e953) {
          long inventory_locn = e953->INVENTORY_LOCN;
          long inventory_dateid = e953->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e953->INVENTORY_KSN;
          long v953 = e953->__av;
          agg938 += (v953 * (__SQL_SUM_AGGREGATE_938INVENTORY1_P_1.getValueOrDefault(se3765.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3766.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3767.modify(inventory_locn)))));
          e953 = e953->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_938 += agg938;
      DOUBLE_TYPE agg939 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e954 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e954) {
          long inventory_locn = e954->INVENTORY_LOCN;
          long inventory_dateid = e954->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e954->INVENTORY_KSN;
          long v954 = e954->__av;
          agg939 += (v954 * (__SQL_SUM_AGGREGATE_939INVENTORY1_P_1.getValueOrDefault(se3769.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3770.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3771.modify(inventory_locn)))));
          e954 = e954->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_939 += agg939;
      long agg940 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e955 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e955) {
          long inventory_locn = e955->INVENTORY_LOCN;
          long inventory_dateid = e955->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e955->INVENTORY_KSN;
          long v955 = e955->__av;
          agg940 += (v955 * (__SQL_SUM_AGGREGATE_940INVENTORY1_P_1.getValueOrDefault(se3773.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3774.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3775.modify(inventory_locn)))));
          e955 = e955->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_940 += agg940;
      long agg941 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e956 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e956) {
          long inventory_locn = e956->INVENTORY_LOCN;
          long inventory_dateid = e956->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e956->INVENTORY_KSN;
          long v956 = e956->__av;
          agg941 += (v956 * (__SQL_SUM_AGGREGATE_941INVENTORY1_P_1.getValueOrDefault(se3777.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3778.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3779.modify(inventory_locn)))));
          e956 = e956->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_941 += agg941;
      DOUBLE_TYPE agg942 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e957 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e957) {
          long inventory_locn = e957->INVENTORY_LOCN;
          long inventory_dateid = e957->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e957->INVENTORY_KSN;
          long v957 = e957->__av;
          agg942 += (v957 * (__SQL_SUM_AGGREGATE_942INVENTORY1_P_1.getValueOrDefault(se3781.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3782.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3783.modify(inventory_locn)))));
          e957 = e957->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_942 += agg942;
      long agg943 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e958 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e958) {
          long inventory_locn = e958->INVENTORY_LOCN;
          long inventory_dateid = e958->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e958->INVENTORY_KSN;
          long v958 = e958->__av;
          agg943 += (v958 * (__SQL_SUM_AGGREGATE_943INVENTORY1_P_1.getValueOrDefault(se3785.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3786.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3787.modify(inventory_locn)))));
          e958 = e958->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_943 += agg943;
      DOUBLE_TYPE agg944 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e959 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e959) {
          long inventory_locn = e959->INVENTORY_LOCN;
          long inventory_dateid = e959->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e959->INVENTORY_KSN;
          long v959 = e959->__av;
          agg944 += (v959 * (__SQL_SUM_AGGREGATE_944INVENTORY1_P_1.getValueOrDefault(se3789.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3790.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3791.modify(inventory_locn)))));
          e959 = e959->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_944 += agg944;
      DOUBLE_TYPE agg945 = 0.0;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e960 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e960) {
          long inventory_locn = e960->INVENTORY_LOCN;
          long inventory_dateid = e960->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e960->INVENTORY_KSN;
          long v960 = e960->__av;
          agg945 += (v960 * (__SQL_SUM_AGGREGATE_945INVENTORY1_P_1.getValueOrDefault(se3793.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3794.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3795.modify(inventory_locn)))));
          e960 = e960->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_945 += agg945;
      long agg946 = 0L;
      { //foreach
        __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry* e961 = __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA.head;
        while (e961) {
          long inventory_locn = e961->INVENTORY_LOCN;
          long inventory_dateid = e961->INVENTORY_DATEID;
          DOUBLE_TYPE inventory_ksn = e961->INVENTORY_KSN;
          long v961 = e961->__av;
          agg946 += (v961 * (__SQL_SUM_AGGREGATE_946INVENTORY1_P_1.getValueOrDefault(se3797.modify(inventory_locn,inventory_dateid)) * (__SQL_SUM_AGGREGATE_1INVENTORY1_P_2.getValueOrDefault(se3798.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.getValueOrDefault(se3799.modify(inventory_locn)))));
          e961 = e961->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_946 += agg946;
    }
    
    void on_system_ready_event() {
      
      __SQL_SUM_AGGREGATE_1 = 0.0;
      __SQL_SUM_AGGREGATE_1INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e962 = WEATHER.head;
        while (e962) {
          long inventory_locn = e962->WEATHER_LOCN;
          long inventory_dateid = e962->WEATHER_DATEID;
          long weather_rain = e962->WEATHER_RAIN;
          long weather_snow = e962->WEATHER_SNOW;
          long weather_maxtemp = e962->WEATHER_MAXTEMP;
          long weather_mintemp = e962->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e962->WEATHER_MEANWIND;
          long weather_thunder = e962->WEATHER_THUNDER;
          long v962 = e962->__av;
          __SQL_SUM_AGGREGATE_1INVENTORY1_P_1.addOrDelOnZero(se3801.modify(inventory_locn, inventory_dateid), v962);
          e962 = e962->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_1INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e963 = ITEM.head;
        while (e963) {
          DOUBLE_TYPE inventory_ksn = e963->ITEM_KSN;
          long item_subcategory = e963->ITEM_SUBCATEGORY;
          long item_category = e963->ITEM_CATEGORY;
          long item_categorycluster = e963->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e963->ITEM_PRIZE;
          long v963 = e963->__av;
          __SQL_SUM_AGGREGATE_1INVENTORY1_P_2.addOrDelOnZero(se3802.modify(inventory_ksn), v963);
          e963 = e963->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e964 = LOCATION.head;
        while (e964) {
          long inventory_locn = e964->LOCATION_LOCN;
          long location_zip = e964->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e964->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e964->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e964->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e964->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e964->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e964->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e964->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e964->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e964->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e964->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e964->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e964->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e964->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v964 = e964->__av;
          { //slice
            const HASH_RES_t h1 = CENSUS_mapkey0_idxfn::hash(se3804.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i965 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n965 = &(i965->buckets_[h1 % i965->size_]);
            CENSUS_entry* e965;
            do if ((e965 = n965->obj) && h1 == n965->hash && CENSUS_mapkey0_idxfn::equals(se3804, *e965)) {
              long census_population = e965->CENSUS_POPULATION;
              long census_white = e965->CENSUS_WHITE;
              long census_asian = e965->CENSUS_ASIAN;
              long census_pacific = e965->CENSUS_PACIFIC;
              long census_blackafrican = e965->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e965->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e965->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e965->CENSUS_HOUSEUNITS;
              long census_families = e965->CENSUS_FAMILIES;
              long census_households = e965->CENSUS_HOUSEHOLDS;
              long census_husbwife = e965->CENSUS_HUSBWIFE;
              long census_males = e965->CENSUS_MALES;
              long census_females = e965->CENSUS_FEMALES;
              long census_householdschildren = e965->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e965->CENSUS_HISPANIC;
              long v965 = e965->__av;
              __SQL_SUM_AGGREGATE_1INVENTORY1_P_3.addOrDelOnZero(se3803.modify(inventory_locn), (v964 * v965));
            } while ((n965 = n965->nxt));
          }
          e964 = e964->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_2 = 0.0;
      __SQL_SUM_AGGREGATE_3 = 0.0;
      __SQL_SUM_AGGREGATE_4 = 0.0;
      __SQL_SUM_AGGREGATE_5 = 0.0;
      __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e966 = LOCATION.head;
        while (e966) {
          long inventory_locn = e966->LOCATION_LOCN;
          long location_zip = e966->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e966->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e966->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e966->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e966->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e966->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e966->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e966->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e966->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e966->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e966->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e966->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e966->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e966->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v966 = e966->__av;
          { //slice
            const HASH_RES_t h2 = CENSUS_mapkey0_idxfn::hash(se3810.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i967 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n967 = &(i967->buckets_[h2 % i967->size_]);
            CENSUS_entry* e967;
            do if ((e967 = n967->obj) && h2 == n967->hash && CENSUS_mapkey0_idxfn::equals(se3810, *e967)) {
              long census_population = e967->CENSUS_POPULATION;
              long census_white = e967->CENSUS_WHITE;
              long census_asian = e967->CENSUS_ASIAN;
              long census_pacific = e967->CENSUS_PACIFIC;
              long census_blackafrican = e967->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e967->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e967->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e967->CENSUS_HOUSEUNITS;
              long census_families = e967->CENSUS_FAMILIES;
              long census_households = e967->CENSUS_HOUSEHOLDS;
              long census_husbwife = e967->CENSUS_HUSBWIFE;
              long census_males = e967->CENSUS_MALES;
              long census_females = e967->CENSUS_FEMALES;
              long census_householdschildren = e967->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e967->CENSUS_HISPANIC;
              long v967 = e967->__av;
              __SQL_SUM_AGGREGATE_5INVENTORY1_P_3.addOrDelOnZero(se3809.modify(inventory_locn), (v966 * (v967 * location_zip)));
            } while ((n967 = n967->nxt));
          }
          e966 = e966->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_6 = 0.0;
      __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e968 = LOCATION.head;
        while (e968) {
          long inventory_locn = e968->LOCATION_LOCN;
          long location_zip = e968->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e968->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e968->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e968->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e968->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e968->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e968->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e968->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e968->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e968->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e968->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e968->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e968->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e968->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v968 = e968->__av;
          { //slice
            const HASH_RES_t h3 = CENSUS_mapkey0_idxfn::hash(se3813.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i969 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n969 = &(i969->buckets_[h3 % i969->size_]);
            CENSUS_entry* e969;
            do if ((e969 = n969->obj) && h3 == n969->hash && CENSUS_mapkey0_idxfn::equals(se3813, *e969)) {
              long census_population = e969->CENSUS_POPULATION;
              long census_white = e969->CENSUS_WHITE;
              long census_asian = e969->CENSUS_ASIAN;
              long census_pacific = e969->CENSUS_PACIFIC;
              long census_blackafrican = e969->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e969->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e969->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e969->CENSUS_HOUSEUNITS;
              long census_families = e969->CENSUS_FAMILIES;
              long census_households = e969->CENSUS_HOUSEHOLDS;
              long census_husbwife = e969->CENSUS_HUSBWIFE;
              long census_males = e969->CENSUS_MALES;
              long census_females = e969->CENSUS_FEMALES;
              long census_householdschildren = e969->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e969->CENSUS_HISPANIC;
              long v969 = e969->__av;
              __SQL_SUM_AGGREGATE_6INVENTORY1_P_3.addOrDelOnZero(se3812.modify(inventory_locn), (v968 * (v969 * location_rgn_cd)));
            } while ((n969 = n969->nxt));
          }
          e968 = e968->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_7 = 0.0;
      __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e970 = LOCATION.head;
        while (e970) {
          long inventory_locn = e970->LOCATION_LOCN;
          long location_zip = e970->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e970->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e970->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e970->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e970->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e970->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e970->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e970->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e970->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e970->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e970->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e970->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e970->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e970->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v970 = e970->__av;
          { //slice
            const HASH_RES_t h4 = CENSUS_mapkey0_idxfn::hash(se3816.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i971 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n971 = &(i971->buckets_[h4 % i971->size_]);
            CENSUS_entry* e971;
            do if ((e971 = n971->obj) && h4 == n971->hash && CENSUS_mapkey0_idxfn::equals(se3816, *e971)) {
              long census_population = e971->CENSUS_POPULATION;
              long census_white = e971->CENSUS_WHITE;
              long census_asian = e971->CENSUS_ASIAN;
              long census_pacific = e971->CENSUS_PACIFIC;
              long census_blackafrican = e971->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e971->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e971->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e971->CENSUS_HOUSEUNITS;
              long census_families = e971->CENSUS_FAMILIES;
              long census_households = e971->CENSUS_HOUSEHOLDS;
              long census_husbwife = e971->CENSUS_HUSBWIFE;
              long census_males = e971->CENSUS_MALES;
              long census_females = e971->CENSUS_FEMALES;
              long census_householdschildren = e971->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e971->CENSUS_HISPANIC;
              long v971 = e971->__av;
              __SQL_SUM_AGGREGATE_7INVENTORY1_P_3.addOrDelOnZero(se3815.modify(inventory_locn), (v970 * (v971 * location_clim_zn_nbr)));
            } while ((n971 = n971->nxt));
          }
          e970 = e970->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_8 = 0.0;
      __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e972 = LOCATION.head;
        while (e972) {
          long inventory_locn = e972->LOCATION_LOCN;
          long location_zip = e972->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e972->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e972->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e972->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e972->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e972->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e972->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e972->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e972->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e972->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e972->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e972->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e972->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e972->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v972 = e972->__av;
          { //slice
            const HASH_RES_t h5 = CENSUS_mapkey0_idxfn::hash(se3819.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i973 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n973 = &(i973->buckets_[h5 % i973->size_]);
            CENSUS_entry* e973;
            do if ((e973 = n973->obj) && h5 == n973->hash && CENSUS_mapkey0_idxfn::equals(se3819, *e973)) {
              long census_population = e973->CENSUS_POPULATION;
              long census_white = e973->CENSUS_WHITE;
              long census_asian = e973->CENSUS_ASIAN;
              long census_pacific = e973->CENSUS_PACIFIC;
              long census_blackafrican = e973->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e973->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e973->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e973->CENSUS_HOUSEUNITS;
              long census_families = e973->CENSUS_FAMILIES;
              long census_households = e973->CENSUS_HOUSEHOLDS;
              long census_husbwife = e973->CENSUS_HUSBWIFE;
              long census_males = e973->CENSUS_MALES;
              long census_females = e973->CENSUS_FEMALES;
              long census_householdschildren = e973->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e973->CENSUS_HISPANIC;
              long v973 = e973->__av;
              __SQL_SUM_AGGREGATE_8INVENTORY1_P_3.addOrDelOnZero(se3818.modify(inventory_locn), (v972 * (v973 * location_tot_area_sq_ft)));
            } while ((n973 = n973->nxt));
          }
          e972 = e972->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_9 = 0.0;
      __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e974 = LOCATION.head;
        while (e974) {
          long inventory_locn = e974->LOCATION_LOCN;
          long location_zip = e974->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e974->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e974->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e974->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e974->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e974->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e974->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e974->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e974->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e974->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e974->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e974->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e974->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e974->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v974 = e974->__av;
          { //slice
            const HASH_RES_t h6 = CENSUS_mapkey0_idxfn::hash(se3822.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i975 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n975 = &(i975->buckets_[h6 % i975->size_]);
            CENSUS_entry* e975;
            do if ((e975 = n975->obj) && h6 == n975->hash && CENSUS_mapkey0_idxfn::equals(se3822, *e975)) {
              long census_population = e975->CENSUS_POPULATION;
              long census_white = e975->CENSUS_WHITE;
              long census_asian = e975->CENSUS_ASIAN;
              long census_pacific = e975->CENSUS_PACIFIC;
              long census_blackafrican = e975->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e975->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e975->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e975->CENSUS_HOUSEUNITS;
              long census_families = e975->CENSUS_FAMILIES;
              long census_households = e975->CENSUS_HOUSEHOLDS;
              long census_husbwife = e975->CENSUS_HUSBWIFE;
              long census_males = e975->CENSUS_MALES;
              long census_females = e975->CENSUS_FEMALES;
              long census_householdschildren = e975->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e975->CENSUS_HISPANIC;
              long v975 = e975->__av;
              __SQL_SUM_AGGREGATE_9INVENTORY1_P_3.addOrDelOnZero(se3821.modify(inventory_locn), (v974 * (v975 * location_sell_area_sq_ft)));
            } while ((n975 = n975->nxt));
          }
          e974 = e974->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_10 = 0.0;
      __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e976 = LOCATION.head;
        while (e976) {
          long inventory_locn = e976->LOCATION_LOCN;
          long location_zip = e976->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e976->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e976->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e976->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e976->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e976->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e976->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e976->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e976->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e976->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e976->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e976->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e976->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e976->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v976 = e976->__av;
          { //slice
            const HASH_RES_t h7 = CENSUS_mapkey0_idxfn::hash(se3825.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i977 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n977 = &(i977->buckets_[h7 % i977->size_]);
            CENSUS_entry* e977;
            do if ((e977 = n977->obj) && h7 == n977->hash && CENSUS_mapkey0_idxfn::equals(se3825, *e977)) {
              long census_population = e977->CENSUS_POPULATION;
              long census_white = e977->CENSUS_WHITE;
              long census_asian = e977->CENSUS_ASIAN;
              long census_pacific = e977->CENSUS_PACIFIC;
              long census_blackafrican = e977->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e977->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e977->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e977->CENSUS_HOUSEUNITS;
              long census_families = e977->CENSUS_FAMILIES;
              long census_households = e977->CENSUS_HOUSEHOLDS;
              long census_husbwife = e977->CENSUS_HUSBWIFE;
              long census_males = e977->CENSUS_MALES;
              long census_females = e977->CENSUS_FEMALES;
              long census_householdschildren = e977->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e977->CENSUS_HISPANIC;
              long v977 = e977->__av;
              __SQL_SUM_AGGREGATE_10INVENTORY1_P_3.addOrDelOnZero(se3824.modify(inventory_locn), (v976 * (v977 * location_avghhi)));
            } while ((n977 = n977->nxt));
          }
          e976 = e976->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_11 = 0.0;
      __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e978 = LOCATION.head;
        while (e978) {
          long inventory_locn = e978->LOCATION_LOCN;
          long location_zip = e978->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e978->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e978->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e978->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e978->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e978->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e978->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e978->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e978->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e978->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e978->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e978->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e978->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e978->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v978 = e978->__av;
          { //slice
            const HASH_RES_t h8 = CENSUS_mapkey0_idxfn::hash(se3828.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i979 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n979 = &(i979->buckets_[h8 % i979->size_]);
            CENSUS_entry* e979;
            do if ((e979 = n979->obj) && h8 == n979->hash && CENSUS_mapkey0_idxfn::equals(se3828, *e979)) {
              long census_population = e979->CENSUS_POPULATION;
              long census_white = e979->CENSUS_WHITE;
              long census_asian = e979->CENSUS_ASIAN;
              long census_pacific = e979->CENSUS_PACIFIC;
              long census_blackafrican = e979->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e979->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e979->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e979->CENSUS_HOUSEUNITS;
              long census_families = e979->CENSUS_FAMILIES;
              long census_households = e979->CENSUS_HOUSEHOLDS;
              long census_husbwife = e979->CENSUS_HUSBWIFE;
              long census_males = e979->CENSUS_MALES;
              long census_females = e979->CENSUS_FEMALES;
              long census_householdschildren = e979->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e979->CENSUS_HISPANIC;
              long v979 = e979->__av;
              __SQL_SUM_AGGREGATE_11INVENTORY1_P_3.addOrDelOnZero(se3827.modify(inventory_locn), (v978 * (v979 * location_supertargetdistance)));
            } while ((n979 = n979->nxt));
          }
          e978 = e978->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_12 = 0.0;
      __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e980 = LOCATION.head;
        while (e980) {
          long inventory_locn = e980->LOCATION_LOCN;
          long location_zip = e980->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e980->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e980->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e980->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e980->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e980->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e980->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e980->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e980->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e980->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e980->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e980->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e980->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e980->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v980 = e980->__av;
          { //slice
            const HASH_RES_t h9 = CENSUS_mapkey0_idxfn::hash(se3831.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i981 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n981 = &(i981->buckets_[h9 % i981->size_]);
            CENSUS_entry* e981;
            do if ((e981 = n981->obj) && h9 == n981->hash && CENSUS_mapkey0_idxfn::equals(se3831, *e981)) {
              long census_population = e981->CENSUS_POPULATION;
              long census_white = e981->CENSUS_WHITE;
              long census_asian = e981->CENSUS_ASIAN;
              long census_pacific = e981->CENSUS_PACIFIC;
              long census_blackafrican = e981->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e981->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e981->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e981->CENSUS_HOUSEUNITS;
              long census_families = e981->CENSUS_FAMILIES;
              long census_households = e981->CENSUS_HOUSEHOLDS;
              long census_husbwife = e981->CENSUS_HUSBWIFE;
              long census_males = e981->CENSUS_MALES;
              long census_females = e981->CENSUS_FEMALES;
              long census_householdschildren = e981->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e981->CENSUS_HISPANIC;
              long v981 = e981->__av;
              __SQL_SUM_AGGREGATE_12INVENTORY1_P_3.addOrDelOnZero(se3830.modify(inventory_locn), (v980 * (v981 * location_supertargetdrivetime)));
            } while ((n981 = n981->nxt));
          }
          e980 = e980->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_13 = 0.0;
      __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e982 = LOCATION.head;
        while (e982) {
          long inventory_locn = e982->LOCATION_LOCN;
          long location_zip = e982->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e982->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e982->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e982->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e982->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e982->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e982->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e982->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e982->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e982->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e982->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e982->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e982->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e982->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v982 = e982->__av;
          { //slice
            const HASH_RES_t h10 = CENSUS_mapkey0_idxfn::hash(se3834.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i983 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n983 = &(i983->buckets_[h10 % i983->size_]);
            CENSUS_entry* e983;
            do if ((e983 = n983->obj) && h10 == n983->hash && CENSUS_mapkey0_idxfn::equals(se3834, *e983)) {
              long census_population = e983->CENSUS_POPULATION;
              long census_white = e983->CENSUS_WHITE;
              long census_asian = e983->CENSUS_ASIAN;
              long census_pacific = e983->CENSUS_PACIFIC;
              long census_blackafrican = e983->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e983->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e983->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e983->CENSUS_HOUSEUNITS;
              long census_families = e983->CENSUS_FAMILIES;
              long census_households = e983->CENSUS_HOUSEHOLDS;
              long census_husbwife = e983->CENSUS_HUSBWIFE;
              long census_males = e983->CENSUS_MALES;
              long census_females = e983->CENSUS_FEMALES;
              long census_householdschildren = e983->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e983->CENSUS_HISPANIC;
              long v983 = e983->__av;
              __SQL_SUM_AGGREGATE_13INVENTORY1_P_3.addOrDelOnZero(se3833.modify(inventory_locn), (v982 * (v983 * location_targetdistance)));
            } while ((n983 = n983->nxt));
          }
          e982 = e982->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_14 = 0.0;
      __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e984 = LOCATION.head;
        while (e984) {
          long inventory_locn = e984->LOCATION_LOCN;
          long location_zip = e984->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e984->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e984->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e984->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e984->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e984->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e984->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e984->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e984->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e984->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e984->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e984->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e984->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e984->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v984 = e984->__av;
          { //slice
            const HASH_RES_t h11 = CENSUS_mapkey0_idxfn::hash(se3837.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i985 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n985 = &(i985->buckets_[h11 % i985->size_]);
            CENSUS_entry* e985;
            do if ((e985 = n985->obj) && h11 == n985->hash && CENSUS_mapkey0_idxfn::equals(se3837, *e985)) {
              long census_population = e985->CENSUS_POPULATION;
              long census_white = e985->CENSUS_WHITE;
              long census_asian = e985->CENSUS_ASIAN;
              long census_pacific = e985->CENSUS_PACIFIC;
              long census_blackafrican = e985->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e985->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e985->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e985->CENSUS_HOUSEUNITS;
              long census_families = e985->CENSUS_FAMILIES;
              long census_households = e985->CENSUS_HOUSEHOLDS;
              long census_husbwife = e985->CENSUS_HUSBWIFE;
              long census_males = e985->CENSUS_MALES;
              long census_females = e985->CENSUS_FEMALES;
              long census_householdschildren = e985->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e985->CENSUS_HISPANIC;
              long v985 = e985->__av;
              __SQL_SUM_AGGREGATE_14INVENTORY1_P_3.addOrDelOnZero(se3836.modify(inventory_locn), (v984 * (v985 * location_targetdrivetime)));
            } while ((n985 = n985->nxt));
          }
          e984 = e984->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_15 = 0.0;
      __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e986 = LOCATION.head;
        while (e986) {
          long inventory_locn = e986->LOCATION_LOCN;
          long location_zip = e986->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e986->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e986->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e986->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e986->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e986->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e986->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e986->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e986->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e986->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e986->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e986->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e986->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e986->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v986 = e986->__av;
          { //slice
            const HASH_RES_t h12 = CENSUS_mapkey0_idxfn::hash(se3840.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i987 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n987 = &(i987->buckets_[h12 % i987->size_]);
            CENSUS_entry* e987;
            do if ((e987 = n987->obj) && h12 == n987->hash && CENSUS_mapkey0_idxfn::equals(se3840, *e987)) {
              long census_population = e987->CENSUS_POPULATION;
              long census_white = e987->CENSUS_WHITE;
              long census_asian = e987->CENSUS_ASIAN;
              long census_pacific = e987->CENSUS_PACIFIC;
              long census_blackafrican = e987->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e987->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e987->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e987->CENSUS_HOUSEUNITS;
              long census_families = e987->CENSUS_FAMILIES;
              long census_households = e987->CENSUS_HOUSEHOLDS;
              long census_husbwife = e987->CENSUS_HUSBWIFE;
              long census_males = e987->CENSUS_MALES;
              long census_females = e987->CENSUS_FEMALES;
              long census_householdschildren = e987->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e987->CENSUS_HISPANIC;
              long v987 = e987->__av;
              __SQL_SUM_AGGREGATE_15INVENTORY1_P_3.addOrDelOnZero(se3839.modify(inventory_locn), (v986 * (v987 * location_walmartdistance)));
            } while ((n987 = n987->nxt));
          }
          e986 = e986->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_16 = 0.0;
      __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e988 = LOCATION.head;
        while (e988) {
          long inventory_locn = e988->LOCATION_LOCN;
          long location_zip = e988->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e988->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e988->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e988->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e988->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e988->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e988->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e988->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e988->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e988->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e988->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e988->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e988->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e988->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v988 = e988->__av;
          { //slice
            const HASH_RES_t h13 = CENSUS_mapkey0_idxfn::hash(se3843.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i989 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n989 = &(i989->buckets_[h13 % i989->size_]);
            CENSUS_entry* e989;
            do if ((e989 = n989->obj) && h13 == n989->hash && CENSUS_mapkey0_idxfn::equals(se3843, *e989)) {
              long census_population = e989->CENSUS_POPULATION;
              long census_white = e989->CENSUS_WHITE;
              long census_asian = e989->CENSUS_ASIAN;
              long census_pacific = e989->CENSUS_PACIFIC;
              long census_blackafrican = e989->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e989->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e989->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e989->CENSUS_HOUSEUNITS;
              long census_families = e989->CENSUS_FAMILIES;
              long census_households = e989->CENSUS_HOUSEHOLDS;
              long census_husbwife = e989->CENSUS_HUSBWIFE;
              long census_males = e989->CENSUS_MALES;
              long census_females = e989->CENSUS_FEMALES;
              long census_householdschildren = e989->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e989->CENSUS_HISPANIC;
              long v989 = e989->__av;
              __SQL_SUM_AGGREGATE_16INVENTORY1_P_3.addOrDelOnZero(se3842.modify(inventory_locn), (v988 * (v989 * location_walmartdrivetime)));
            } while ((n989 = n989->nxt));
          }
          e988 = e988->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_17 = 0.0;
      __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e990 = LOCATION.head;
        while (e990) {
          long inventory_locn = e990->LOCATION_LOCN;
          long location_zip = e990->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e990->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e990->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e990->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e990->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e990->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e990->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e990->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e990->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e990->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e990->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e990->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e990->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e990->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v990 = e990->__av;
          { //slice
            const HASH_RES_t h14 = CENSUS_mapkey0_idxfn::hash(se3846.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i991 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n991 = &(i991->buckets_[h14 % i991->size_]);
            CENSUS_entry* e991;
            do if ((e991 = n991->obj) && h14 == n991->hash && CENSUS_mapkey0_idxfn::equals(se3846, *e991)) {
              long census_population = e991->CENSUS_POPULATION;
              long census_white = e991->CENSUS_WHITE;
              long census_asian = e991->CENSUS_ASIAN;
              long census_pacific = e991->CENSUS_PACIFIC;
              long census_blackafrican = e991->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e991->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e991->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e991->CENSUS_HOUSEUNITS;
              long census_families = e991->CENSUS_FAMILIES;
              long census_households = e991->CENSUS_HOUSEHOLDS;
              long census_husbwife = e991->CENSUS_HUSBWIFE;
              long census_males = e991->CENSUS_MALES;
              long census_females = e991->CENSUS_FEMALES;
              long census_householdschildren = e991->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e991->CENSUS_HISPANIC;
              long v991 = e991->__av;
              __SQL_SUM_AGGREGATE_17INVENTORY1_P_3.addOrDelOnZero(se3845.modify(inventory_locn), (v990 * (v991 * location_walmartsupercenterdistance)));
            } while ((n991 = n991->nxt));
          }
          e990 = e990->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_18 = 0.0;
      __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e992 = LOCATION.head;
        while (e992) {
          long inventory_locn = e992->LOCATION_LOCN;
          long location_zip = e992->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e992->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e992->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e992->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e992->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e992->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e992->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e992->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e992->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e992->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e992->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e992->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e992->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e992->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v992 = e992->__av;
          { //slice
            const HASH_RES_t h15 = CENSUS_mapkey0_idxfn::hash(se3849.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i993 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n993 = &(i993->buckets_[h15 % i993->size_]);
            CENSUS_entry* e993;
            do if ((e993 = n993->obj) && h15 == n993->hash && CENSUS_mapkey0_idxfn::equals(se3849, *e993)) {
              long census_population = e993->CENSUS_POPULATION;
              long census_white = e993->CENSUS_WHITE;
              long census_asian = e993->CENSUS_ASIAN;
              long census_pacific = e993->CENSUS_PACIFIC;
              long census_blackafrican = e993->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e993->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e993->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e993->CENSUS_HOUSEUNITS;
              long census_families = e993->CENSUS_FAMILIES;
              long census_households = e993->CENSUS_HOUSEHOLDS;
              long census_husbwife = e993->CENSUS_HUSBWIFE;
              long census_males = e993->CENSUS_MALES;
              long census_females = e993->CENSUS_FEMALES;
              long census_householdschildren = e993->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e993->CENSUS_HISPANIC;
              long v993 = e993->__av;
              __SQL_SUM_AGGREGATE_18INVENTORY1_P_3.addOrDelOnZero(se3848.modify(inventory_locn), (v992 * (v993 * location_walmartsupercenterdrivetime)));
            } while ((n993 = n993->nxt));
          }
          e992 = e992->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_19 = 0.0;
      __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e994 = LOCATION.head;
        while (e994) {
          long inventory_locn = e994->LOCATION_LOCN;
          long location_zip = e994->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e994->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e994->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e994->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e994->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e994->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e994->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e994->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e994->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e994->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e994->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e994->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e994->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e994->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v994 = e994->__av;
          { //slice
            const HASH_RES_t h16 = CENSUS_mapkey0_idxfn::hash(se3852.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i995 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n995 = &(i995->buckets_[h16 % i995->size_]);
            CENSUS_entry* e995;
            do if ((e995 = n995->obj) && h16 == n995->hash && CENSUS_mapkey0_idxfn::equals(se3852, *e995)) {
              long census_population = e995->CENSUS_POPULATION;
              long census_white = e995->CENSUS_WHITE;
              long census_asian = e995->CENSUS_ASIAN;
              long census_pacific = e995->CENSUS_PACIFIC;
              long census_blackafrican = e995->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e995->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e995->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e995->CENSUS_HOUSEUNITS;
              long census_families = e995->CENSUS_FAMILIES;
              long census_households = e995->CENSUS_HOUSEHOLDS;
              long census_husbwife = e995->CENSUS_HUSBWIFE;
              long census_males = e995->CENSUS_MALES;
              long census_females = e995->CENSUS_FEMALES;
              long census_householdschildren = e995->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e995->CENSUS_HISPANIC;
              long v995 = e995->__av;
              __SQL_SUM_AGGREGATE_19INVENTORY1_P_3.addOrDelOnZero(se3851.modify(inventory_locn), (v994 * (v995 * census_population)));
            } while ((n995 = n995->nxt));
          }
          e994 = e994->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_20 = 0.0;
      __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e996 = LOCATION.head;
        while (e996) {
          long inventory_locn = e996->LOCATION_LOCN;
          long location_zip = e996->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e996->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e996->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e996->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e996->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e996->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e996->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e996->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e996->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e996->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e996->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e996->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e996->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e996->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v996 = e996->__av;
          { //slice
            const HASH_RES_t h17 = CENSUS_mapkey0_idxfn::hash(se3855.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i997 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n997 = &(i997->buckets_[h17 % i997->size_]);
            CENSUS_entry* e997;
            do if ((e997 = n997->obj) && h17 == n997->hash && CENSUS_mapkey0_idxfn::equals(se3855, *e997)) {
              long census_population = e997->CENSUS_POPULATION;
              long census_white = e997->CENSUS_WHITE;
              long census_asian = e997->CENSUS_ASIAN;
              long census_pacific = e997->CENSUS_PACIFIC;
              long census_blackafrican = e997->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e997->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e997->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e997->CENSUS_HOUSEUNITS;
              long census_families = e997->CENSUS_FAMILIES;
              long census_households = e997->CENSUS_HOUSEHOLDS;
              long census_husbwife = e997->CENSUS_HUSBWIFE;
              long census_males = e997->CENSUS_MALES;
              long census_females = e997->CENSUS_FEMALES;
              long census_householdschildren = e997->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e997->CENSUS_HISPANIC;
              long v997 = e997->__av;
              __SQL_SUM_AGGREGATE_20INVENTORY1_P_3.addOrDelOnZero(se3854.modify(inventory_locn), (v996 * (v997 * census_white)));
            } while ((n997 = n997->nxt));
          }
          e996 = e996->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_21 = 0.0;
      __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e998 = LOCATION.head;
        while (e998) {
          long inventory_locn = e998->LOCATION_LOCN;
          long location_zip = e998->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e998->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e998->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e998->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e998->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e998->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e998->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e998->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e998->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e998->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e998->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e998->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e998->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e998->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v998 = e998->__av;
          { //slice
            const HASH_RES_t h18 = CENSUS_mapkey0_idxfn::hash(se3858.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i999 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n999 = &(i999->buckets_[h18 % i999->size_]);
            CENSUS_entry* e999;
            do if ((e999 = n999->obj) && h18 == n999->hash && CENSUS_mapkey0_idxfn::equals(se3858, *e999)) {
              long census_population = e999->CENSUS_POPULATION;
              long census_white = e999->CENSUS_WHITE;
              long census_asian = e999->CENSUS_ASIAN;
              long census_pacific = e999->CENSUS_PACIFIC;
              long census_blackafrican = e999->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e999->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e999->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e999->CENSUS_HOUSEUNITS;
              long census_families = e999->CENSUS_FAMILIES;
              long census_households = e999->CENSUS_HOUSEHOLDS;
              long census_husbwife = e999->CENSUS_HUSBWIFE;
              long census_males = e999->CENSUS_MALES;
              long census_females = e999->CENSUS_FEMALES;
              long census_householdschildren = e999->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e999->CENSUS_HISPANIC;
              long v999 = e999->__av;
              __SQL_SUM_AGGREGATE_21INVENTORY1_P_3.addOrDelOnZero(se3857.modify(inventory_locn), (v998 * (v999 * census_asian)));
            } while ((n999 = n999->nxt));
          }
          e998 = e998->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_22 = 0.0;
      __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1000 = LOCATION.head;
        while (e1000) {
          long inventory_locn = e1000->LOCATION_LOCN;
          long location_zip = e1000->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1000->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1000->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1000->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1000->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1000->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1000->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1000->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1000->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1000->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1000->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1000->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1000->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1000->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1000 = e1000->__av;
          { //slice
            const HASH_RES_t h19 = CENSUS_mapkey0_idxfn::hash(se3861.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1001 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1001 = &(i1001->buckets_[h19 % i1001->size_]);
            CENSUS_entry* e1001;
            do if ((e1001 = n1001->obj) && h19 == n1001->hash && CENSUS_mapkey0_idxfn::equals(se3861, *e1001)) {
              long census_population = e1001->CENSUS_POPULATION;
              long census_white = e1001->CENSUS_WHITE;
              long census_asian = e1001->CENSUS_ASIAN;
              long census_pacific = e1001->CENSUS_PACIFIC;
              long census_blackafrican = e1001->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1001->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1001->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1001->CENSUS_HOUSEUNITS;
              long census_families = e1001->CENSUS_FAMILIES;
              long census_households = e1001->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1001->CENSUS_HUSBWIFE;
              long census_males = e1001->CENSUS_MALES;
              long census_females = e1001->CENSUS_FEMALES;
              long census_householdschildren = e1001->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1001->CENSUS_HISPANIC;
              long v1001 = e1001->__av;
              __SQL_SUM_AGGREGATE_22INVENTORY1_P_3.addOrDelOnZero(se3860.modify(inventory_locn), (v1000 * (v1001 * census_pacific)));
            } while ((n1001 = n1001->nxt));
          }
          e1000 = e1000->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_23 = 0.0;
      __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1002 = LOCATION.head;
        while (e1002) {
          long inventory_locn = e1002->LOCATION_LOCN;
          long location_zip = e1002->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1002->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1002->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1002->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1002->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1002->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1002->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1002->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1002->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1002->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1002->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1002->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1002->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1002->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1002 = e1002->__av;
          { //slice
            const HASH_RES_t h20 = CENSUS_mapkey0_idxfn::hash(se3864.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1003 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1003 = &(i1003->buckets_[h20 % i1003->size_]);
            CENSUS_entry* e1003;
            do if ((e1003 = n1003->obj) && h20 == n1003->hash && CENSUS_mapkey0_idxfn::equals(se3864, *e1003)) {
              long census_population = e1003->CENSUS_POPULATION;
              long census_white = e1003->CENSUS_WHITE;
              long census_asian = e1003->CENSUS_ASIAN;
              long census_pacific = e1003->CENSUS_PACIFIC;
              long census_blackafrican = e1003->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1003->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1003->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1003->CENSUS_HOUSEUNITS;
              long census_families = e1003->CENSUS_FAMILIES;
              long census_households = e1003->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1003->CENSUS_HUSBWIFE;
              long census_males = e1003->CENSUS_MALES;
              long census_females = e1003->CENSUS_FEMALES;
              long census_householdschildren = e1003->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1003->CENSUS_HISPANIC;
              long v1003 = e1003->__av;
              __SQL_SUM_AGGREGATE_23INVENTORY1_P_3.addOrDelOnZero(se3863.modify(inventory_locn), (v1002 * (v1003 * census_blackafrican)));
            } while ((n1003 = n1003->nxt));
          }
          e1002 = e1002->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_24 = 0.0;
      __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1004 = LOCATION.head;
        while (e1004) {
          long inventory_locn = e1004->LOCATION_LOCN;
          long location_zip = e1004->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1004->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1004->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1004->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1004->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1004->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1004->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1004->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1004->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1004->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1004->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1004->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1004->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1004->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1004 = e1004->__av;
          { //slice
            const HASH_RES_t h21 = CENSUS_mapkey0_idxfn::hash(se3867.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1005 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1005 = &(i1005->buckets_[h21 % i1005->size_]);
            CENSUS_entry* e1005;
            do if ((e1005 = n1005->obj) && h21 == n1005->hash && CENSUS_mapkey0_idxfn::equals(se3867, *e1005)) {
              long census_population = e1005->CENSUS_POPULATION;
              long census_white = e1005->CENSUS_WHITE;
              long census_asian = e1005->CENSUS_ASIAN;
              long census_pacific = e1005->CENSUS_PACIFIC;
              long census_blackafrican = e1005->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1005->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1005->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1005->CENSUS_HOUSEUNITS;
              long census_families = e1005->CENSUS_FAMILIES;
              long census_households = e1005->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1005->CENSUS_HUSBWIFE;
              long census_males = e1005->CENSUS_MALES;
              long census_females = e1005->CENSUS_FEMALES;
              long census_householdschildren = e1005->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1005->CENSUS_HISPANIC;
              long v1005 = e1005->__av;
              __SQL_SUM_AGGREGATE_24INVENTORY1_P_3.addOrDelOnZero(se3866.modify(inventory_locn), (v1004 * (v1005 * census_medianage)));
            } while ((n1005 = n1005->nxt));
          }
          e1004 = e1004->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_25 = 0.0;
      __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1006 = LOCATION.head;
        while (e1006) {
          long inventory_locn = e1006->LOCATION_LOCN;
          long location_zip = e1006->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1006->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1006->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1006->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1006->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1006->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1006->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1006->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1006->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1006->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1006->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1006->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1006->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1006->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1006 = e1006->__av;
          { //slice
            const HASH_RES_t h22 = CENSUS_mapkey0_idxfn::hash(se3870.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1007 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1007 = &(i1007->buckets_[h22 % i1007->size_]);
            CENSUS_entry* e1007;
            do if ((e1007 = n1007->obj) && h22 == n1007->hash && CENSUS_mapkey0_idxfn::equals(se3870, *e1007)) {
              long census_population = e1007->CENSUS_POPULATION;
              long census_white = e1007->CENSUS_WHITE;
              long census_asian = e1007->CENSUS_ASIAN;
              long census_pacific = e1007->CENSUS_PACIFIC;
              long census_blackafrican = e1007->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1007->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1007->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1007->CENSUS_HOUSEUNITS;
              long census_families = e1007->CENSUS_FAMILIES;
              long census_households = e1007->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1007->CENSUS_HUSBWIFE;
              long census_males = e1007->CENSUS_MALES;
              long census_females = e1007->CENSUS_FEMALES;
              long census_householdschildren = e1007->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1007->CENSUS_HISPANIC;
              long v1007 = e1007->__av;
              __SQL_SUM_AGGREGATE_25INVENTORY1_P_3.addOrDelOnZero(se3869.modify(inventory_locn), (v1006 * (v1007 * census_occupiedhouseunits)));
            } while ((n1007 = n1007->nxt));
          }
          e1006 = e1006->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_26 = 0.0;
      __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1008 = LOCATION.head;
        while (e1008) {
          long inventory_locn = e1008->LOCATION_LOCN;
          long location_zip = e1008->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1008->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1008->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1008->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1008->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1008->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1008->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1008->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1008->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1008->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1008->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1008->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1008->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1008->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1008 = e1008->__av;
          { //slice
            const HASH_RES_t h23 = CENSUS_mapkey0_idxfn::hash(se3873.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1009 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1009 = &(i1009->buckets_[h23 % i1009->size_]);
            CENSUS_entry* e1009;
            do if ((e1009 = n1009->obj) && h23 == n1009->hash && CENSUS_mapkey0_idxfn::equals(se3873, *e1009)) {
              long census_population = e1009->CENSUS_POPULATION;
              long census_white = e1009->CENSUS_WHITE;
              long census_asian = e1009->CENSUS_ASIAN;
              long census_pacific = e1009->CENSUS_PACIFIC;
              long census_blackafrican = e1009->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1009->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1009->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1009->CENSUS_HOUSEUNITS;
              long census_families = e1009->CENSUS_FAMILIES;
              long census_households = e1009->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1009->CENSUS_HUSBWIFE;
              long census_males = e1009->CENSUS_MALES;
              long census_females = e1009->CENSUS_FEMALES;
              long census_householdschildren = e1009->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1009->CENSUS_HISPANIC;
              long v1009 = e1009->__av;
              __SQL_SUM_AGGREGATE_26INVENTORY1_P_3.addOrDelOnZero(se3872.modify(inventory_locn), (v1008 * (v1009 * census_houseunits)));
            } while ((n1009 = n1009->nxt));
          }
          e1008 = e1008->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_27 = 0.0;
      __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1010 = LOCATION.head;
        while (e1010) {
          long inventory_locn = e1010->LOCATION_LOCN;
          long location_zip = e1010->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1010->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1010->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1010->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1010->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1010->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1010->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1010->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1010->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1010->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1010->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1010->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1010->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1010->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1010 = e1010->__av;
          { //slice
            const HASH_RES_t h24 = CENSUS_mapkey0_idxfn::hash(se3876.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1011 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1011 = &(i1011->buckets_[h24 % i1011->size_]);
            CENSUS_entry* e1011;
            do if ((e1011 = n1011->obj) && h24 == n1011->hash && CENSUS_mapkey0_idxfn::equals(se3876, *e1011)) {
              long census_population = e1011->CENSUS_POPULATION;
              long census_white = e1011->CENSUS_WHITE;
              long census_asian = e1011->CENSUS_ASIAN;
              long census_pacific = e1011->CENSUS_PACIFIC;
              long census_blackafrican = e1011->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1011->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1011->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1011->CENSUS_HOUSEUNITS;
              long census_families = e1011->CENSUS_FAMILIES;
              long census_households = e1011->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1011->CENSUS_HUSBWIFE;
              long census_males = e1011->CENSUS_MALES;
              long census_females = e1011->CENSUS_FEMALES;
              long census_householdschildren = e1011->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1011->CENSUS_HISPANIC;
              long v1011 = e1011->__av;
              __SQL_SUM_AGGREGATE_27INVENTORY1_P_3.addOrDelOnZero(se3875.modify(inventory_locn), (v1010 * (v1011 * census_families)));
            } while ((n1011 = n1011->nxt));
          }
          e1010 = e1010->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_28 = 0.0;
      __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1012 = LOCATION.head;
        while (e1012) {
          long inventory_locn = e1012->LOCATION_LOCN;
          long location_zip = e1012->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1012->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1012->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1012->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1012->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1012->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1012->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1012->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1012->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1012->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1012->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1012->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1012->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1012->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1012 = e1012->__av;
          { //slice
            const HASH_RES_t h25 = CENSUS_mapkey0_idxfn::hash(se3879.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1013 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1013 = &(i1013->buckets_[h25 % i1013->size_]);
            CENSUS_entry* e1013;
            do if ((e1013 = n1013->obj) && h25 == n1013->hash && CENSUS_mapkey0_idxfn::equals(se3879, *e1013)) {
              long census_population = e1013->CENSUS_POPULATION;
              long census_white = e1013->CENSUS_WHITE;
              long census_asian = e1013->CENSUS_ASIAN;
              long census_pacific = e1013->CENSUS_PACIFIC;
              long census_blackafrican = e1013->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1013->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1013->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1013->CENSUS_HOUSEUNITS;
              long census_families = e1013->CENSUS_FAMILIES;
              long census_households = e1013->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1013->CENSUS_HUSBWIFE;
              long census_males = e1013->CENSUS_MALES;
              long census_females = e1013->CENSUS_FEMALES;
              long census_householdschildren = e1013->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1013->CENSUS_HISPANIC;
              long v1013 = e1013->__av;
              __SQL_SUM_AGGREGATE_28INVENTORY1_P_3.addOrDelOnZero(se3878.modify(inventory_locn), (v1012 * (v1013 * census_households)));
            } while ((n1013 = n1013->nxt));
          }
          e1012 = e1012->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_29 = 0.0;
      __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1014 = LOCATION.head;
        while (e1014) {
          long inventory_locn = e1014->LOCATION_LOCN;
          long location_zip = e1014->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1014->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1014->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1014->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1014->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1014->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1014->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1014->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1014->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1014->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1014->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1014->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1014->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1014->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1014 = e1014->__av;
          { //slice
            const HASH_RES_t h26 = CENSUS_mapkey0_idxfn::hash(se3882.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1015 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1015 = &(i1015->buckets_[h26 % i1015->size_]);
            CENSUS_entry* e1015;
            do if ((e1015 = n1015->obj) && h26 == n1015->hash && CENSUS_mapkey0_idxfn::equals(se3882, *e1015)) {
              long census_population = e1015->CENSUS_POPULATION;
              long census_white = e1015->CENSUS_WHITE;
              long census_asian = e1015->CENSUS_ASIAN;
              long census_pacific = e1015->CENSUS_PACIFIC;
              long census_blackafrican = e1015->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1015->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1015->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1015->CENSUS_HOUSEUNITS;
              long census_families = e1015->CENSUS_FAMILIES;
              long census_households = e1015->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1015->CENSUS_HUSBWIFE;
              long census_males = e1015->CENSUS_MALES;
              long census_females = e1015->CENSUS_FEMALES;
              long census_householdschildren = e1015->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1015->CENSUS_HISPANIC;
              long v1015 = e1015->__av;
              __SQL_SUM_AGGREGATE_29INVENTORY1_P_3.addOrDelOnZero(se3881.modify(inventory_locn), (v1014 * (v1015 * census_husbwife)));
            } while ((n1015 = n1015->nxt));
          }
          e1014 = e1014->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_30 = 0.0;
      __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1016 = LOCATION.head;
        while (e1016) {
          long inventory_locn = e1016->LOCATION_LOCN;
          long location_zip = e1016->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1016->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1016->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1016->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1016->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1016->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1016->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1016->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1016->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1016->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1016->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1016->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1016->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1016->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1016 = e1016->__av;
          { //slice
            const HASH_RES_t h27 = CENSUS_mapkey0_idxfn::hash(se3885.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1017 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1017 = &(i1017->buckets_[h27 % i1017->size_]);
            CENSUS_entry* e1017;
            do if ((e1017 = n1017->obj) && h27 == n1017->hash && CENSUS_mapkey0_idxfn::equals(se3885, *e1017)) {
              long census_population = e1017->CENSUS_POPULATION;
              long census_white = e1017->CENSUS_WHITE;
              long census_asian = e1017->CENSUS_ASIAN;
              long census_pacific = e1017->CENSUS_PACIFIC;
              long census_blackafrican = e1017->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1017->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1017->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1017->CENSUS_HOUSEUNITS;
              long census_families = e1017->CENSUS_FAMILIES;
              long census_households = e1017->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1017->CENSUS_HUSBWIFE;
              long census_males = e1017->CENSUS_MALES;
              long census_females = e1017->CENSUS_FEMALES;
              long census_householdschildren = e1017->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1017->CENSUS_HISPANIC;
              long v1017 = e1017->__av;
              __SQL_SUM_AGGREGATE_30INVENTORY1_P_3.addOrDelOnZero(se3884.modify(inventory_locn), (v1016 * (v1017 * census_males)));
            } while ((n1017 = n1017->nxt));
          }
          e1016 = e1016->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_31 = 0.0;
      __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1018 = LOCATION.head;
        while (e1018) {
          long inventory_locn = e1018->LOCATION_LOCN;
          long location_zip = e1018->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1018->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1018->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1018->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1018->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1018->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1018->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1018->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1018->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1018->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1018->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1018->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1018->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1018->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1018 = e1018->__av;
          { //slice
            const HASH_RES_t h28 = CENSUS_mapkey0_idxfn::hash(se3888.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1019 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1019 = &(i1019->buckets_[h28 % i1019->size_]);
            CENSUS_entry* e1019;
            do if ((e1019 = n1019->obj) && h28 == n1019->hash && CENSUS_mapkey0_idxfn::equals(se3888, *e1019)) {
              long census_population = e1019->CENSUS_POPULATION;
              long census_white = e1019->CENSUS_WHITE;
              long census_asian = e1019->CENSUS_ASIAN;
              long census_pacific = e1019->CENSUS_PACIFIC;
              long census_blackafrican = e1019->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1019->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1019->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1019->CENSUS_HOUSEUNITS;
              long census_families = e1019->CENSUS_FAMILIES;
              long census_households = e1019->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1019->CENSUS_HUSBWIFE;
              long census_males = e1019->CENSUS_MALES;
              long census_females = e1019->CENSUS_FEMALES;
              long census_householdschildren = e1019->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1019->CENSUS_HISPANIC;
              long v1019 = e1019->__av;
              __SQL_SUM_AGGREGATE_31INVENTORY1_P_3.addOrDelOnZero(se3887.modify(inventory_locn), (v1018 * (v1019 * census_females)));
            } while ((n1019 = n1019->nxt));
          }
          e1018 = e1018->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_32 = 0.0;
      __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1020 = LOCATION.head;
        while (e1020) {
          long inventory_locn = e1020->LOCATION_LOCN;
          long location_zip = e1020->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1020->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1020->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1020->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1020->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1020->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1020->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1020->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1020->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1020->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1020->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1020->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1020->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1020->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1020 = e1020->__av;
          { //slice
            const HASH_RES_t h29 = CENSUS_mapkey0_idxfn::hash(se3891.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1021 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1021 = &(i1021->buckets_[h29 % i1021->size_]);
            CENSUS_entry* e1021;
            do if ((e1021 = n1021->obj) && h29 == n1021->hash && CENSUS_mapkey0_idxfn::equals(se3891, *e1021)) {
              long census_population = e1021->CENSUS_POPULATION;
              long census_white = e1021->CENSUS_WHITE;
              long census_asian = e1021->CENSUS_ASIAN;
              long census_pacific = e1021->CENSUS_PACIFIC;
              long census_blackafrican = e1021->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1021->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1021->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1021->CENSUS_HOUSEUNITS;
              long census_families = e1021->CENSUS_FAMILIES;
              long census_households = e1021->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1021->CENSUS_HUSBWIFE;
              long census_males = e1021->CENSUS_MALES;
              long census_females = e1021->CENSUS_FEMALES;
              long census_householdschildren = e1021->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1021->CENSUS_HISPANIC;
              long v1021 = e1021->__av;
              __SQL_SUM_AGGREGATE_32INVENTORY1_P_3.addOrDelOnZero(se3890.modify(inventory_locn), (v1020 * (v1021 * census_householdschildren)));
            } while ((n1021 = n1021->nxt));
          }
          e1020 = e1020->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_33 = 0.0;
      __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1022 = LOCATION.head;
        while (e1022) {
          long inventory_locn = e1022->LOCATION_LOCN;
          long location_zip = e1022->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1022->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1022->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1022->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1022->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1022->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1022->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1022->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1022->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1022->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1022->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1022->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1022->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1022->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1022 = e1022->__av;
          { //slice
            const HASH_RES_t h30 = CENSUS_mapkey0_idxfn::hash(se3894.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1023 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1023 = &(i1023->buckets_[h30 % i1023->size_]);
            CENSUS_entry* e1023;
            do if ((e1023 = n1023->obj) && h30 == n1023->hash && CENSUS_mapkey0_idxfn::equals(se3894, *e1023)) {
              long census_population = e1023->CENSUS_POPULATION;
              long census_white = e1023->CENSUS_WHITE;
              long census_asian = e1023->CENSUS_ASIAN;
              long census_pacific = e1023->CENSUS_PACIFIC;
              long census_blackafrican = e1023->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1023->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1023->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1023->CENSUS_HOUSEUNITS;
              long census_families = e1023->CENSUS_FAMILIES;
              long census_households = e1023->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1023->CENSUS_HUSBWIFE;
              long census_males = e1023->CENSUS_MALES;
              long census_females = e1023->CENSUS_FEMALES;
              long census_householdschildren = e1023->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1023->CENSUS_HISPANIC;
              long v1023 = e1023->__av;
              __SQL_SUM_AGGREGATE_33INVENTORY1_P_3.addOrDelOnZero(se3893.modify(inventory_locn), (v1022 * (v1023 * census_hispanic)));
            } while ((n1023 = n1023->nxt));
          }
          e1022 = e1022->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_34 = 0.0;
      __SQL_SUM_AGGREGATE_34INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1024 = ITEM.head;
        while (e1024) {
          DOUBLE_TYPE inventory_ksn = e1024->ITEM_KSN;
          long item_subcategory = e1024->ITEM_SUBCATEGORY;
          long item_category = e1024->ITEM_CATEGORY;
          long item_categorycluster = e1024->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1024->ITEM_PRIZE;
          long v1024 = e1024->__av;
          __SQL_SUM_AGGREGATE_34INVENTORY1_P_2.addOrDelOnZero(se3896.modify(inventory_ksn), (v1024 * item_subcategory));
          e1024 = e1024->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_35 = 0.0;
      __SQL_SUM_AGGREGATE_35INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1025 = ITEM.head;
        while (e1025) {
          DOUBLE_TYPE inventory_ksn = e1025->ITEM_KSN;
          long item_subcategory = e1025->ITEM_SUBCATEGORY;
          long item_category = e1025->ITEM_CATEGORY;
          long item_categorycluster = e1025->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1025->ITEM_PRIZE;
          long v1025 = e1025->__av;
          __SQL_SUM_AGGREGATE_35INVENTORY1_P_2.addOrDelOnZero(se3898.modify(inventory_ksn), (v1025 * item_category));
          e1025 = e1025->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_36 = 0.0;
      __SQL_SUM_AGGREGATE_36INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1026 = ITEM.head;
        while (e1026) {
          DOUBLE_TYPE inventory_ksn = e1026->ITEM_KSN;
          long item_subcategory = e1026->ITEM_SUBCATEGORY;
          long item_category = e1026->ITEM_CATEGORY;
          long item_categorycluster = e1026->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1026->ITEM_PRIZE;
          long v1026 = e1026->__av;
          __SQL_SUM_AGGREGATE_36INVENTORY1_P_2.addOrDelOnZero(se3900.modify(inventory_ksn), (v1026 * item_categorycluster));
          e1026 = e1026->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_37 = 0.0;
      __SQL_SUM_AGGREGATE_37INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1027 = ITEM.head;
        while (e1027) {
          DOUBLE_TYPE inventory_ksn = e1027->ITEM_KSN;
          long item_subcategory = e1027->ITEM_SUBCATEGORY;
          long item_category = e1027->ITEM_CATEGORY;
          long item_categorycluster = e1027->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1027->ITEM_PRIZE;
          long v1027 = e1027->__av;
          __SQL_SUM_AGGREGATE_37INVENTORY1_P_2.addOrDelOnZero(se3902.modify(inventory_ksn), (v1027 * item_prize));
          e1027 = e1027->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_38 = 0.0;
      __SQL_SUM_AGGREGATE_38INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1028 = WEATHER.head;
        while (e1028) {
          long inventory_locn = e1028->WEATHER_LOCN;
          long inventory_dateid = e1028->WEATHER_DATEID;
          long weather_rain = e1028->WEATHER_RAIN;
          long weather_snow = e1028->WEATHER_SNOW;
          long weather_maxtemp = e1028->WEATHER_MAXTEMP;
          long weather_mintemp = e1028->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1028->WEATHER_MEANWIND;
          long weather_thunder = e1028->WEATHER_THUNDER;
          long v1028 = e1028->__av;
          __SQL_SUM_AGGREGATE_38INVENTORY1_P_1.addOrDelOnZero(se3904.modify(inventory_locn, inventory_dateid), (v1028 * weather_rain));
          e1028 = e1028->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_39 = 0.0;
      __SQL_SUM_AGGREGATE_39INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1029 = WEATHER.head;
        while (e1029) {
          long inventory_locn = e1029->WEATHER_LOCN;
          long inventory_dateid = e1029->WEATHER_DATEID;
          long weather_rain = e1029->WEATHER_RAIN;
          long weather_snow = e1029->WEATHER_SNOW;
          long weather_maxtemp = e1029->WEATHER_MAXTEMP;
          long weather_mintemp = e1029->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1029->WEATHER_MEANWIND;
          long weather_thunder = e1029->WEATHER_THUNDER;
          long v1029 = e1029->__av;
          __SQL_SUM_AGGREGATE_39INVENTORY1_P_1.addOrDelOnZero(se3906.modify(inventory_locn, inventory_dateid), (v1029 * weather_snow));
          e1029 = e1029->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_40 = 0.0;
      __SQL_SUM_AGGREGATE_40INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1030 = WEATHER.head;
        while (e1030) {
          long inventory_locn = e1030->WEATHER_LOCN;
          long inventory_dateid = e1030->WEATHER_DATEID;
          long weather_rain = e1030->WEATHER_RAIN;
          long weather_snow = e1030->WEATHER_SNOW;
          long weather_maxtemp = e1030->WEATHER_MAXTEMP;
          long weather_mintemp = e1030->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1030->WEATHER_MEANWIND;
          long weather_thunder = e1030->WEATHER_THUNDER;
          long v1030 = e1030->__av;
          __SQL_SUM_AGGREGATE_40INVENTORY1_P_1.addOrDelOnZero(se3908.modify(inventory_locn, inventory_dateid), (v1030 * weather_maxtemp));
          e1030 = e1030->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_41 = 0.0;
      __SQL_SUM_AGGREGATE_41INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1031 = WEATHER.head;
        while (e1031) {
          long inventory_locn = e1031->WEATHER_LOCN;
          long inventory_dateid = e1031->WEATHER_DATEID;
          long weather_rain = e1031->WEATHER_RAIN;
          long weather_snow = e1031->WEATHER_SNOW;
          long weather_maxtemp = e1031->WEATHER_MAXTEMP;
          long weather_mintemp = e1031->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1031->WEATHER_MEANWIND;
          long weather_thunder = e1031->WEATHER_THUNDER;
          long v1031 = e1031->__av;
          __SQL_SUM_AGGREGATE_41INVENTORY1_P_1.addOrDelOnZero(se3910.modify(inventory_locn, inventory_dateid), (v1031 * weather_mintemp));
          e1031 = e1031->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_42 = 0.0;
      __SQL_SUM_AGGREGATE_42INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1032 = WEATHER.head;
        while (e1032) {
          long inventory_locn = e1032->WEATHER_LOCN;
          long inventory_dateid = e1032->WEATHER_DATEID;
          long weather_rain = e1032->WEATHER_RAIN;
          long weather_snow = e1032->WEATHER_SNOW;
          long weather_maxtemp = e1032->WEATHER_MAXTEMP;
          long weather_mintemp = e1032->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1032->WEATHER_MEANWIND;
          long weather_thunder = e1032->WEATHER_THUNDER;
          long v1032 = e1032->__av;
          __SQL_SUM_AGGREGATE_42INVENTORY1_P_1.addOrDelOnZero(se3912.modify(inventory_locn, inventory_dateid), (v1032 * weather_meanwind));
          e1032 = e1032->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_43 = 0.0;
      __SQL_SUM_AGGREGATE_43INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1033 = WEATHER.head;
        while (e1033) {
          long inventory_locn = e1033->WEATHER_LOCN;
          long inventory_dateid = e1033->WEATHER_DATEID;
          long weather_rain = e1033->WEATHER_RAIN;
          long weather_snow = e1033->WEATHER_SNOW;
          long weather_maxtemp = e1033->WEATHER_MAXTEMP;
          long weather_mintemp = e1033->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1033->WEATHER_MEANWIND;
          long weather_thunder = e1033->WEATHER_THUNDER;
          long v1033 = e1033->__av;
          __SQL_SUM_AGGREGATE_43INVENTORY1_P_1.addOrDelOnZero(se3914.modify(inventory_locn, inventory_dateid), (v1033 * weather_thunder));
          e1033 = e1033->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_46 = 0.0;
      __SQL_SUM_AGGREGATE_48 = 0.0;
      __SQL_SUM_AGGREGATE_49 = 0.0;
      __SQL_SUM_AGGREGATE_50 = 0.0;
      __SQL_SUM_AGGREGATE_51 = 0.0;
      __SQL_SUM_AGGREGATE_52 = 0.0;
      __SQL_SUM_AGGREGATE_53 = 0.0;
      __SQL_SUM_AGGREGATE_54 = 0.0;
      __SQL_SUM_AGGREGATE_55 = 0.0;
      __SQL_SUM_AGGREGATE_56 = 0.0;
      __SQL_SUM_AGGREGATE_57 = 0.0;
      __SQL_SUM_AGGREGATE_58 = 0.0;
      __SQL_SUM_AGGREGATE_59 = 0.0;
      __SQL_SUM_AGGREGATE_60 = 0.0;
      __SQL_SUM_AGGREGATE_66 = 0.0;
      __SQL_SUM_AGGREGATE_79 = 0.0;
      __SQL_SUM_AGGREGATE_84 = 0.0;
      __SQL_SUM_AGGREGATE_87 = 0.0;
      __SQL_SUM_AGGREGATE_89 = 0.0;
      __SQL_SUM_AGGREGATE_90 = 0.0;
      __SQL_SUM_AGGREGATE_91 = 0.0;
      __SQL_SUM_AGGREGATE_92 = 0.0;
      __SQL_SUM_AGGREGATE_93 = 0.0;
      __SQL_SUM_AGGREGATE_94 = 0.0;
      __SQL_SUM_AGGREGATE_95 = 0.0;
      __SQL_SUM_AGGREGATE_96 = 0.0;
      __SQL_SUM_AGGREGATE_97 = 0.0;
      __SQL_SUM_AGGREGATE_98 = 0.0;
      __SQL_SUM_AGGREGATE_99 = 0.0;
      __SQL_SUM_AGGREGATE_100 = 0.0;
      __SQL_SUM_AGGREGATE_101 = 0.0;
      __SQL_SUM_AGGREGATE_107 = 0.0;
      __SQL_SUM_AGGREGATE_120 = 0.0;
      __SQL_SUM_AGGREGATE_125 = 0.0;
      __SQL_SUM_AGGREGATE_127 = 0.0;
      __SQL_SUM_AGGREGATE_128 = 0.0;
      __SQL_SUM_AGGREGATE_129 = 0.0;
      __SQL_SUM_AGGREGATE_130 = 0.0;
      __SQL_SUM_AGGREGATE_131 = 0.0;
      __SQL_SUM_AGGREGATE_132 = 0.0;
      __SQL_SUM_AGGREGATE_133 = 0.0;
      __SQL_SUM_AGGREGATE_134 = 0.0;
      __SQL_SUM_AGGREGATE_135 = 0.0;
      __SQL_SUM_AGGREGATE_136 = 0.0;
      __SQL_SUM_AGGREGATE_137 = 0.0;
      __SQL_SUM_AGGREGATE_138 = 0.0;
      __SQL_SUM_AGGREGATE_139 = 0.0;
      __SQL_SUM_AGGREGATE_140 = 0.0;
      __SQL_SUM_AGGREGATE_141 = 0.0;
      __SQL_SUM_AGGREGATE_142 = 0.0;
      __SQL_SUM_AGGREGATE_143 = 0.0;
      __SQL_SUM_AGGREGATE_144 = 0.0;
      __SQL_SUM_AGGREGATE_145 = 0.0;
      __SQL_SUM_AGGREGATE_146 = 0.0;
      __SQL_SUM_AGGREGATE_147 = 0.0;
      __SQL_SUM_AGGREGATE_148 = 0.0;
      __SQL_SUM_AGGREGATE_149 = 0.0;
      __SQL_SUM_AGGREGATE_150 = 0.0;
      __SQL_SUM_AGGREGATE_151 = 0.0;
      __SQL_SUM_AGGREGATE_152 = 0.0;
      __SQL_SUM_AGGREGATE_153 = 0.0;
      __SQL_SUM_AGGREGATE_154 = 0.0;
      __SQL_SUM_AGGREGATE_155 = 0.0;
      __SQL_SUM_AGGREGATE_156 = 0.0;
      __SQL_SUM_AGGREGATE_157 = 0.0;
      __SQL_SUM_AGGREGATE_158 = 0.0;
      __SQL_SUM_AGGREGATE_159 = 0.0;
      __SQL_SUM_AGGREGATE_160 = 0.0;
      __SQL_SUM_AGGREGATE_161 = 0.0;
      __SQL_SUM_AGGREGATE_162 = 0.0;
      __SQL_SUM_AGGREGATE_163 = 0.0;
      __SQL_SUM_AGGREGATE_164 = 0.0;
      __SQL_SUM_AGGREGATE_165 = 0.0;
      __SQL_SUM_AGGREGATE_166 = 0.0;
      __SQL_SUM_AGGREGATE_167INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1034 = LOCATION.head;
        while (e1034) {
          long inventory_locn = e1034->LOCATION_LOCN;
          long location_zip = e1034->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1034->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1034->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1034->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1034->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1034->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1034->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1034->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1034->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1034->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1034->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1034->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1034->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1034->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1034 = e1034->__av;
          { //slice
            const HASH_RES_t h31 = CENSUS_mapkey0_idxfn::hash(se3990.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1035 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1035 = &(i1035->buckets_[h31 % i1035->size_]);
            CENSUS_entry* e1035;
            do if ((e1035 = n1035->obj) && h31 == n1035->hash && CENSUS_mapkey0_idxfn::equals(se3990, *e1035)) {
              long census_population = e1035->CENSUS_POPULATION;
              long census_white = e1035->CENSUS_WHITE;
              long census_asian = e1035->CENSUS_ASIAN;
              long census_pacific = e1035->CENSUS_PACIFIC;
              long census_blackafrican = e1035->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1035->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1035->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1035->CENSUS_HOUSEUNITS;
              long census_families = e1035->CENSUS_FAMILIES;
              long census_households = e1035->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1035->CENSUS_HUSBWIFE;
              long census_males = e1035->CENSUS_MALES;
              long census_females = e1035->CENSUS_FEMALES;
              long census_householdschildren = e1035->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1035->CENSUS_HISPANIC;
              long v1035 = e1035->__av;
              __SQL_SUM_AGGREGATE_167INVENTORY1_P_3.addOrDelOnZero(se3989.modify(inventory_locn), (v1034 * (v1035 * (location_zip * location_zip))));
            } while ((n1035 = n1035->nxt));
          }
          e1034 = e1034->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_168 = 0.0;
      __SQL_SUM_AGGREGATE_168INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1036 = LOCATION.head;
        while (e1036) {
          long inventory_locn = e1036->LOCATION_LOCN;
          long location_zip = e1036->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1036->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1036->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1036->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1036->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1036->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1036->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1036->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1036->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1036->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1036->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1036->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1036->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1036->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1036 = e1036->__av;
          { //slice
            const HASH_RES_t h32 = CENSUS_mapkey0_idxfn::hash(se3993.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1037 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1037 = &(i1037->buckets_[h32 % i1037->size_]);
            CENSUS_entry* e1037;
            do if ((e1037 = n1037->obj) && h32 == n1037->hash && CENSUS_mapkey0_idxfn::equals(se3993, *e1037)) {
              long census_population = e1037->CENSUS_POPULATION;
              long census_white = e1037->CENSUS_WHITE;
              long census_asian = e1037->CENSUS_ASIAN;
              long census_pacific = e1037->CENSUS_PACIFIC;
              long census_blackafrican = e1037->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1037->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1037->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1037->CENSUS_HOUSEUNITS;
              long census_families = e1037->CENSUS_FAMILIES;
              long census_households = e1037->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1037->CENSUS_HUSBWIFE;
              long census_males = e1037->CENSUS_MALES;
              long census_females = e1037->CENSUS_FEMALES;
              long census_householdschildren = e1037->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1037->CENSUS_HISPANIC;
              long v1037 = e1037->__av;
              __SQL_SUM_AGGREGATE_168INVENTORY1_P_3.addOrDelOnZero(se3992.modify(inventory_locn), (v1036 * (v1037 * (location_zip * location_rgn_cd))));
            } while ((n1037 = n1037->nxt));
          }
          e1036 = e1036->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_169 = 0.0;
      __SQL_SUM_AGGREGATE_169INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1038 = LOCATION.head;
        while (e1038) {
          long inventory_locn = e1038->LOCATION_LOCN;
          long location_zip = e1038->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1038->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1038->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1038->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1038->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1038->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1038->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1038->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1038->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1038->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1038->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1038->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1038->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1038->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1038 = e1038->__av;
          { //slice
            const HASH_RES_t h33 = CENSUS_mapkey0_idxfn::hash(se3996.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1039 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1039 = &(i1039->buckets_[h33 % i1039->size_]);
            CENSUS_entry* e1039;
            do if ((e1039 = n1039->obj) && h33 == n1039->hash && CENSUS_mapkey0_idxfn::equals(se3996, *e1039)) {
              long census_population = e1039->CENSUS_POPULATION;
              long census_white = e1039->CENSUS_WHITE;
              long census_asian = e1039->CENSUS_ASIAN;
              long census_pacific = e1039->CENSUS_PACIFIC;
              long census_blackafrican = e1039->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1039->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1039->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1039->CENSUS_HOUSEUNITS;
              long census_families = e1039->CENSUS_FAMILIES;
              long census_households = e1039->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1039->CENSUS_HUSBWIFE;
              long census_males = e1039->CENSUS_MALES;
              long census_females = e1039->CENSUS_FEMALES;
              long census_householdschildren = e1039->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1039->CENSUS_HISPANIC;
              long v1039 = e1039->__av;
              __SQL_SUM_AGGREGATE_169INVENTORY1_P_3.addOrDelOnZero(se3995.modify(inventory_locn), (v1038 * (v1039 * (location_zip * location_clim_zn_nbr))));
            } while ((n1039 = n1039->nxt));
          }
          e1038 = e1038->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_170 = 0.0;
      __SQL_SUM_AGGREGATE_170INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1040 = LOCATION.head;
        while (e1040) {
          long inventory_locn = e1040->LOCATION_LOCN;
          long location_zip = e1040->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1040->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1040->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1040->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1040->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1040->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1040->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1040->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1040->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1040->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1040->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1040->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1040->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1040->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1040 = e1040->__av;
          { //slice
            const HASH_RES_t h34 = CENSUS_mapkey0_idxfn::hash(se3999.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1041 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1041 = &(i1041->buckets_[h34 % i1041->size_]);
            CENSUS_entry* e1041;
            do if ((e1041 = n1041->obj) && h34 == n1041->hash && CENSUS_mapkey0_idxfn::equals(se3999, *e1041)) {
              long census_population = e1041->CENSUS_POPULATION;
              long census_white = e1041->CENSUS_WHITE;
              long census_asian = e1041->CENSUS_ASIAN;
              long census_pacific = e1041->CENSUS_PACIFIC;
              long census_blackafrican = e1041->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1041->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1041->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1041->CENSUS_HOUSEUNITS;
              long census_families = e1041->CENSUS_FAMILIES;
              long census_households = e1041->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1041->CENSUS_HUSBWIFE;
              long census_males = e1041->CENSUS_MALES;
              long census_females = e1041->CENSUS_FEMALES;
              long census_householdschildren = e1041->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1041->CENSUS_HISPANIC;
              long v1041 = e1041->__av;
              __SQL_SUM_AGGREGATE_170INVENTORY1_P_3.addOrDelOnZero(se3998.modify(inventory_locn), (v1040 * (v1041 * (location_zip * location_tot_area_sq_ft))));
            } while ((n1041 = n1041->nxt));
          }
          e1040 = e1040->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_171 = 0.0;
      __SQL_SUM_AGGREGATE_171INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1042 = LOCATION.head;
        while (e1042) {
          long inventory_locn = e1042->LOCATION_LOCN;
          long location_zip = e1042->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1042->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1042->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1042->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1042->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1042->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1042->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1042->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1042->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1042->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1042->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1042->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1042->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1042->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1042 = e1042->__av;
          { //slice
            const HASH_RES_t h35 = CENSUS_mapkey0_idxfn::hash(se4002.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1043 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1043 = &(i1043->buckets_[h35 % i1043->size_]);
            CENSUS_entry* e1043;
            do if ((e1043 = n1043->obj) && h35 == n1043->hash && CENSUS_mapkey0_idxfn::equals(se4002, *e1043)) {
              long census_population = e1043->CENSUS_POPULATION;
              long census_white = e1043->CENSUS_WHITE;
              long census_asian = e1043->CENSUS_ASIAN;
              long census_pacific = e1043->CENSUS_PACIFIC;
              long census_blackafrican = e1043->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1043->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1043->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1043->CENSUS_HOUSEUNITS;
              long census_families = e1043->CENSUS_FAMILIES;
              long census_households = e1043->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1043->CENSUS_HUSBWIFE;
              long census_males = e1043->CENSUS_MALES;
              long census_females = e1043->CENSUS_FEMALES;
              long census_householdschildren = e1043->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1043->CENSUS_HISPANIC;
              long v1043 = e1043->__av;
              __SQL_SUM_AGGREGATE_171INVENTORY1_P_3.addOrDelOnZero(se4001.modify(inventory_locn), (v1042 * (v1043 * (location_zip * location_sell_area_sq_ft))));
            } while ((n1043 = n1043->nxt));
          }
          e1042 = e1042->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_172 = 0.0;
      __SQL_SUM_AGGREGATE_172INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1044 = LOCATION.head;
        while (e1044) {
          long inventory_locn = e1044->LOCATION_LOCN;
          long location_zip = e1044->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1044->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1044->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1044->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1044->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1044->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1044->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1044->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1044->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1044->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1044->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1044->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1044->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1044->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1044 = e1044->__av;
          { //slice
            const HASH_RES_t h36 = CENSUS_mapkey0_idxfn::hash(se4005.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1045 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1045 = &(i1045->buckets_[h36 % i1045->size_]);
            CENSUS_entry* e1045;
            do if ((e1045 = n1045->obj) && h36 == n1045->hash && CENSUS_mapkey0_idxfn::equals(se4005, *e1045)) {
              long census_population = e1045->CENSUS_POPULATION;
              long census_white = e1045->CENSUS_WHITE;
              long census_asian = e1045->CENSUS_ASIAN;
              long census_pacific = e1045->CENSUS_PACIFIC;
              long census_blackafrican = e1045->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1045->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1045->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1045->CENSUS_HOUSEUNITS;
              long census_families = e1045->CENSUS_FAMILIES;
              long census_households = e1045->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1045->CENSUS_HUSBWIFE;
              long census_males = e1045->CENSUS_MALES;
              long census_females = e1045->CENSUS_FEMALES;
              long census_householdschildren = e1045->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1045->CENSUS_HISPANIC;
              long v1045 = e1045->__av;
              __SQL_SUM_AGGREGATE_172INVENTORY1_P_3.addOrDelOnZero(se4004.modify(inventory_locn), (v1044 * (v1045 * (location_zip * location_avghhi))));
            } while ((n1045 = n1045->nxt));
          }
          e1044 = e1044->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_173 = 0.0;
      __SQL_SUM_AGGREGATE_173INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1046 = LOCATION.head;
        while (e1046) {
          long inventory_locn = e1046->LOCATION_LOCN;
          long location_zip = e1046->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1046->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1046->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1046->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1046->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1046->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1046->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1046->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1046->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1046->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1046->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1046->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1046->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1046->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1046 = e1046->__av;
          { //slice
            const HASH_RES_t h37 = CENSUS_mapkey0_idxfn::hash(se4008.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1047 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1047 = &(i1047->buckets_[h37 % i1047->size_]);
            CENSUS_entry* e1047;
            do if ((e1047 = n1047->obj) && h37 == n1047->hash && CENSUS_mapkey0_idxfn::equals(se4008, *e1047)) {
              long census_population = e1047->CENSUS_POPULATION;
              long census_white = e1047->CENSUS_WHITE;
              long census_asian = e1047->CENSUS_ASIAN;
              long census_pacific = e1047->CENSUS_PACIFIC;
              long census_blackafrican = e1047->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1047->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1047->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1047->CENSUS_HOUSEUNITS;
              long census_families = e1047->CENSUS_FAMILIES;
              long census_households = e1047->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1047->CENSUS_HUSBWIFE;
              long census_males = e1047->CENSUS_MALES;
              long census_females = e1047->CENSUS_FEMALES;
              long census_householdschildren = e1047->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1047->CENSUS_HISPANIC;
              long v1047 = e1047->__av;
              __SQL_SUM_AGGREGATE_173INVENTORY1_P_3.addOrDelOnZero(se4007.modify(inventory_locn), (v1046 * (v1047 * (location_zip * location_supertargetdistance))));
            } while ((n1047 = n1047->nxt));
          }
          e1046 = e1046->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_174 = 0.0;
      __SQL_SUM_AGGREGATE_174INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1048 = LOCATION.head;
        while (e1048) {
          long inventory_locn = e1048->LOCATION_LOCN;
          long location_zip = e1048->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1048->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1048->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1048->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1048->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1048->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1048->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1048->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1048->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1048->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1048->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1048->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1048->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1048->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1048 = e1048->__av;
          { //slice
            const HASH_RES_t h38 = CENSUS_mapkey0_idxfn::hash(se4011.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1049 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1049 = &(i1049->buckets_[h38 % i1049->size_]);
            CENSUS_entry* e1049;
            do if ((e1049 = n1049->obj) && h38 == n1049->hash && CENSUS_mapkey0_idxfn::equals(se4011, *e1049)) {
              long census_population = e1049->CENSUS_POPULATION;
              long census_white = e1049->CENSUS_WHITE;
              long census_asian = e1049->CENSUS_ASIAN;
              long census_pacific = e1049->CENSUS_PACIFIC;
              long census_blackafrican = e1049->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1049->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1049->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1049->CENSUS_HOUSEUNITS;
              long census_families = e1049->CENSUS_FAMILIES;
              long census_households = e1049->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1049->CENSUS_HUSBWIFE;
              long census_males = e1049->CENSUS_MALES;
              long census_females = e1049->CENSUS_FEMALES;
              long census_householdschildren = e1049->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1049->CENSUS_HISPANIC;
              long v1049 = e1049->__av;
              __SQL_SUM_AGGREGATE_174INVENTORY1_P_3.addOrDelOnZero(se4010.modify(inventory_locn), (v1048 * (v1049 * (location_zip * location_supertargetdrivetime))));
            } while ((n1049 = n1049->nxt));
          }
          e1048 = e1048->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_175 = 0.0;
      __SQL_SUM_AGGREGATE_175INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1050 = LOCATION.head;
        while (e1050) {
          long inventory_locn = e1050->LOCATION_LOCN;
          long location_zip = e1050->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1050->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1050->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1050->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1050->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1050->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1050->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1050->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1050->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1050->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1050->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1050->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1050->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1050->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1050 = e1050->__av;
          { //slice
            const HASH_RES_t h39 = CENSUS_mapkey0_idxfn::hash(se4014.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1051 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1051 = &(i1051->buckets_[h39 % i1051->size_]);
            CENSUS_entry* e1051;
            do if ((e1051 = n1051->obj) && h39 == n1051->hash && CENSUS_mapkey0_idxfn::equals(se4014, *e1051)) {
              long census_population = e1051->CENSUS_POPULATION;
              long census_white = e1051->CENSUS_WHITE;
              long census_asian = e1051->CENSUS_ASIAN;
              long census_pacific = e1051->CENSUS_PACIFIC;
              long census_blackafrican = e1051->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1051->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1051->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1051->CENSUS_HOUSEUNITS;
              long census_families = e1051->CENSUS_FAMILIES;
              long census_households = e1051->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1051->CENSUS_HUSBWIFE;
              long census_males = e1051->CENSUS_MALES;
              long census_females = e1051->CENSUS_FEMALES;
              long census_householdschildren = e1051->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1051->CENSUS_HISPANIC;
              long v1051 = e1051->__av;
              __SQL_SUM_AGGREGATE_175INVENTORY1_P_3.addOrDelOnZero(se4013.modify(inventory_locn), (v1050 * (v1051 * (location_zip * location_targetdistance))));
            } while ((n1051 = n1051->nxt));
          }
          e1050 = e1050->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_176 = 0.0;
      __SQL_SUM_AGGREGATE_176INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1052 = LOCATION.head;
        while (e1052) {
          long inventory_locn = e1052->LOCATION_LOCN;
          long location_zip = e1052->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1052->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1052->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1052->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1052->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1052->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1052->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1052->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1052->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1052->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1052->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1052->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1052->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1052->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1052 = e1052->__av;
          { //slice
            const HASH_RES_t h40 = CENSUS_mapkey0_idxfn::hash(se4017.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1053 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1053 = &(i1053->buckets_[h40 % i1053->size_]);
            CENSUS_entry* e1053;
            do if ((e1053 = n1053->obj) && h40 == n1053->hash && CENSUS_mapkey0_idxfn::equals(se4017, *e1053)) {
              long census_population = e1053->CENSUS_POPULATION;
              long census_white = e1053->CENSUS_WHITE;
              long census_asian = e1053->CENSUS_ASIAN;
              long census_pacific = e1053->CENSUS_PACIFIC;
              long census_blackafrican = e1053->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1053->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1053->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1053->CENSUS_HOUSEUNITS;
              long census_families = e1053->CENSUS_FAMILIES;
              long census_households = e1053->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1053->CENSUS_HUSBWIFE;
              long census_males = e1053->CENSUS_MALES;
              long census_females = e1053->CENSUS_FEMALES;
              long census_householdschildren = e1053->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1053->CENSUS_HISPANIC;
              long v1053 = e1053->__av;
              __SQL_SUM_AGGREGATE_176INVENTORY1_P_3.addOrDelOnZero(se4016.modify(inventory_locn), (v1052 * (v1053 * (location_zip * location_targetdrivetime))));
            } while ((n1053 = n1053->nxt));
          }
          e1052 = e1052->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_177 = 0.0;
      __SQL_SUM_AGGREGATE_177INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1054 = LOCATION.head;
        while (e1054) {
          long inventory_locn = e1054->LOCATION_LOCN;
          long location_zip = e1054->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1054->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1054->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1054->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1054->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1054->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1054->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1054->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1054->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1054->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1054->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1054->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1054->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1054->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1054 = e1054->__av;
          { //slice
            const HASH_RES_t h41 = CENSUS_mapkey0_idxfn::hash(se4020.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1055 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1055 = &(i1055->buckets_[h41 % i1055->size_]);
            CENSUS_entry* e1055;
            do if ((e1055 = n1055->obj) && h41 == n1055->hash && CENSUS_mapkey0_idxfn::equals(se4020, *e1055)) {
              long census_population = e1055->CENSUS_POPULATION;
              long census_white = e1055->CENSUS_WHITE;
              long census_asian = e1055->CENSUS_ASIAN;
              long census_pacific = e1055->CENSUS_PACIFIC;
              long census_blackafrican = e1055->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1055->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1055->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1055->CENSUS_HOUSEUNITS;
              long census_families = e1055->CENSUS_FAMILIES;
              long census_households = e1055->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1055->CENSUS_HUSBWIFE;
              long census_males = e1055->CENSUS_MALES;
              long census_females = e1055->CENSUS_FEMALES;
              long census_householdschildren = e1055->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1055->CENSUS_HISPANIC;
              long v1055 = e1055->__av;
              __SQL_SUM_AGGREGATE_177INVENTORY1_P_3.addOrDelOnZero(se4019.modify(inventory_locn), (v1054 * (v1055 * (location_zip * location_walmartdistance))));
            } while ((n1055 = n1055->nxt));
          }
          e1054 = e1054->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_178 = 0.0;
      __SQL_SUM_AGGREGATE_178INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1056 = LOCATION.head;
        while (e1056) {
          long inventory_locn = e1056->LOCATION_LOCN;
          long location_zip = e1056->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1056->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1056->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1056->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1056->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1056->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1056->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1056->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1056->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1056->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1056->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1056->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1056->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1056->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1056 = e1056->__av;
          { //slice
            const HASH_RES_t h42 = CENSUS_mapkey0_idxfn::hash(se4023.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1057 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1057 = &(i1057->buckets_[h42 % i1057->size_]);
            CENSUS_entry* e1057;
            do if ((e1057 = n1057->obj) && h42 == n1057->hash && CENSUS_mapkey0_idxfn::equals(se4023, *e1057)) {
              long census_population = e1057->CENSUS_POPULATION;
              long census_white = e1057->CENSUS_WHITE;
              long census_asian = e1057->CENSUS_ASIAN;
              long census_pacific = e1057->CENSUS_PACIFIC;
              long census_blackafrican = e1057->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1057->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1057->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1057->CENSUS_HOUSEUNITS;
              long census_families = e1057->CENSUS_FAMILIES;
              long census_households = e1057->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1057->CENSUS_HUSBWIFE;
              long census_males = e1057->CENSUS_MALES;
              long census_females = e1057->CENSUS_FEMALES;
              long census_householdschildren = e1057->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1057->CENSUS_HISPANIC;
              long v1057 = e1057->__av;
              __SQL_SUM_AGGREGATE_178INVENTORY1_P_3.addOrDelOnZero(se4022.modify(inventory_locn), (v1056 * (v1057 * (location_zip * location_walmartdrivetime))));
            } while ((n1057 = n1057->nxt));
          }
          e1056 = e1056->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_179 = 0.0;
      __SQL_SUM_AGGREGATE_179INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1058 = LOCATION.head;
        while (e1058) {
          long inventory_locn = e1058->LOCATION_LOCN;
          long location_zip = e1058->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1058->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1058->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1058->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1058->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1058->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1058->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1058->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1058->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1058->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1058->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1058->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1058->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1058->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1058 = e1058->__av;
          { //slice
            const HASH_RES_t h43 = CENSUS_mapkey0_idxfn::hash(se4026.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1059 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1059 = &(i1059->buckets_[h43 % i1059->size_]);
            CENSUS_entry* e1059;
            do if ((e1059 = n1059->obj) && h43 == n1059->hash && CENSUS_mapkey0_idxfn::equals(se4026, *e1059)) {
              long census_population = e1059->CENSUS_POPULATION;
              long census_white = e1059->CENSUS_WHITE;
              long census_asian = e1059->CENSUS_ASIAN;
              long census_pacific = e1059->CENSUS_PACIFIC;
              long census_blackafrican = e1059->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1059->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1059->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1059->CENSUS_HOUSEUNITS;
              long census_families = e1059->CENSUS_FAMILIES;
              long census_households = e1059->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1059->CENSUS_HUSBWIFE;
              long census_males = e1059->CENSUS_MALES;
              long census_females = e1059->CENSUS_FEMALES;
              long census_householdschildren = e1059->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1059->CENSUS_HISPANIC;
              long v1059 = e1059->__av;
              __SQL_SUM_AGGREGATE_179INVENTORY1_P_3.addOrDelOnZero(se4025.modify(inventory_locn), (v1058 * (v1059 * (location_zip * location_walmartsupercenterdistance))));
            } while ((n1059 = n1059->nxt));
          }
          e1058 = e1058->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_180 = 0.0;
      __SQL_SUM_AGGREGATE_180INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1060 = LOCATION.head;
        while (e1060) {
          long inventory_locn = e1060->LOCATION_LOCN;
          long location_zip = e1060->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1060->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1060->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1060->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1060->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1060->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1060->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1060->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1060->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1060->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1060->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1060->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1060->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1060->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1060 = e1060->__av;
          { //slice
            const HASH_RES_t h44 = CENSUS_mapkey0_idxfn::hash(se4029.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1061 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1061 = &(i1061->buckets_[h44 % i1061->size_]);
            CENSUS_entry* e1061;
            do if ((e1061 = n1061->obj) && h44 == n1061->hash && CENSUS_mapkey0_idxfn::equals(se4029, *e1061)) {
              long census_population = e1061->CENSUS_POPULATION;
              long census_white = e1061->CENSUS_WHITE;
              long census_asian = e1061->CENSUS_ASIAN;
              long census_pacific = e1061->CENSUS_PACIFIC;
              long census_blackafrican = e1061->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1061->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1061->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1061->CENSUS_HOUSEUNITS;
              long census_families = e1061->CENSUS_FAMILIES;
              long census_households = e1061->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1061->CENSUS_HUSBWIFE;
              long census_males = e1061->CENSUS_MALES;
              long census_females = e1061->CENSUS_FEMALES;
              long census_householdschildren = e1061->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1061->CENSUS_HISPANIC;
              long v1061 = e1061->__av;
              __SQL_SUM_AGGREGATE_180INVENTORY1_P_3.addOrDelOnZero(se4028.modify(inventory_locn), (v1060 * (v1061 * (location_zip * location_walmartsupercenterdrivetime))));
            } while ((n1061 = n1061->nxt));
          }
          e1060 = e1060->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_181INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1062 = LOCATION.head;
        while (e1062) {
          long inventory_locn = e1062->LOCATION_LOCN;
          long location_zip = e1062->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1062->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1062->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1062->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1062->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1062->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1062->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1062->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1062->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1062->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1062->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1062->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1062->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1062->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1062 = e1062->__av;
          { //slice
            const HASH_RES_t h45 = CENSUS_mapkey0_idxfn::hash(se4031.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1063 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1063 = &(i1063->buckets_[h45 % i1063->size_]);
            CENSUS_entry* e1063;
            do if ((e1063 = n1063->obj) && h45 == n1063->hash && CENSUS_mapkey0_idxfn::equals(se4031, *e1063)) {
              long census_population = e1063->CENSUS_POPULATION;
              long census_white = e1063->CENSUS_WHITE;
              long census_asian = e1063->CENSUS_ASIAN;
              long census_pacific = e1063->CENSUS_PACIFIC;
              long census_blackafrican = e1063->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1063->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1063->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1063->CENSUS_HOUSEUNITS;
              long census_families = e1063->CENSUS_FAMILIES;
              long census_households = e1063->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1063->CENSUS_HUSBWIFE;
              long census_males = e1063->CENSUS_MALES;
              long census_females = e1063->CENSUS_FEMALES;
              long census_householdschildren = e1063->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1063->CENSUS_HISPANIC;
              long v1063 = e1063->__av;
              __SQL_SUM_AGGREGATE_181INVENTORY1_P_3.addOrDelOnZero(se4030.modify(inventory_locn), (v1062 * (v1063 * (location_zip * census_population))));
            } while ((n1063 = n1063->nxt));
          }
          e1062 = e1062->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_182INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1064 = LOCATION.head;
        while (e1064) {
          long inventory_locn = e1064->LOCATION_LOCN;
          long location_zip = e1064->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1064->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1064->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1064->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1064->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1064->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1064->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1064->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1064->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1064->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1064->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1064->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1064->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1064->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1064 = e1064->__av;
          { //slice
            const HASH_RES_t h46 = CENSUS_mapkey0_idxfn::hash(se4033.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1065 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1065 = &(i1065->buckets_[h46 % i1065->size_]);
            CENSUS_entry* e1065;
            do if ((e1065 = n1065->obj) && h46 == n1065->hash && CENSUS_mapkey0_idxfn::equals(se4033, *e1065)) {
              long census_population = e1065->CENSUS_POPULATION;
              long census_white = e1065->CENSUS_WHITE;
              long census_asian = e1065->CENSUS_ASIAN;
              long census_pacific = e1065->CENSUS_PACIFIC;
              long census_blackafrican = e1065->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1065->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1065->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1065->CENSUS_HOUSEUNITS;
              long census_families = e1065->CENSUS_FAMILIES;
              long census_households = e1065->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1065->CENSUS_HUSBWIFE;
              long census_males = e1065->CENSUS_MALES;
              long census_females = e1065->CENSUS_FEMALES;
              long census_householdschildren = e1065->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1065->CENSUS_HISPANIC;
              long v1065 = e1065->__av;
              __SQL_SUM_AGGREGATE_182INVENTORY1_P_3.addOrDelOnZero(se4032.modify(inventory_locn), (v1064 * (v1065 * (location_zip * census_white))));
            } while ((n1065 = n1065->nxt));
          }
          e1064 = e1064->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_183INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1066 = LOCATION.head;
        while (e1066) {
          long inventory_locn = e1066->LOCATION_LOCN;
          long location_zip = e1066->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1066->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1066->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1066->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1066->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1066->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1066->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1066->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1066->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1066->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1066->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1066->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1066->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1066->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1066 = e1066->__av;
          { //slice
            const HASH_RES_t h47 = CENSUS_mapkey0_idxfn::hash(se4035.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1067 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1067 = &(i1067->buckets_[h47 % i1067->size_]);
            CENSUS_entry* e1067;
            do if ((e1067 = n1067->obj) && h47 == n1067->hash && CENSUS_mapkey0_idxfn::equals(se4035, *e1067)) {
              long census_population = e1067->CENSUS_POPULATION;
              long census_white = e1067->CENSUS_WHITE;
              long census_asian = e1067->CENSUS_ASIAN;
              long census_pacific = e1067->CENSUS_PACIFIC;
              long census_blackafrican = e1067->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1067->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1067->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1067->CENSUS_HOUSEUNITS;
              long census_families = e1067->CENSUS_FAMILIES;
              long census_households = e1067->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1067->CENSUS_HUSBWIFE;
              long census_males = e1067->CENSUS_MALES;
              long census_females = e1067->CENSUS_FEMALES;
              long census_householdschildren = e1067->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1067->CENSUS_HISPANIC;
              long v1067 = e1067->__av;
              __SQL_SUM_AGGREGATE_183INVENTORY1_P_3.addOrDelOnZero(se4034.modify(inventory_locn), (v1066 * (v1067 * (location_zip * census_asian))));
            } while ((n1067 = n1067->nxt));
          }
          e1066 = e1066->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_184INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1068 = LOCATION.head;
        while (e1068) {
          long inventory_locn = e1068->LOCATION_LOCN;
          long location_zip = e1068->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1068->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1068->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1068->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1068->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1068->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1068->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1068->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1068->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1068->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1068->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1068->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1068->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1068->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1068 = e1068->__av;
          { //slice
            const HASH_RES_t h48 = CENSUS_mapkey0_idxfn::hash(se4037.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1069 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1069 = &(i1069->buckets_[h48 % i1069->size_]);
            CENSUS_entry* e1069;
            do if ((e1069 = n1069->obj) && h48 == n1069->hash && CENSUS_mapkey0_idxfn::equals(se4037, *e1069)) {
              long census_population = e1069->CENSUS_POPULATION;
              long census_white = e1069->CENSUS_WHITE;
              long census_asian = e1069->CENSUS_ASIAN;
              long census_pacific = e1069->CENSUS_PACIFIC;
              long census_blackafrican = e1069->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1069->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1069->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1069->CENSUS_HOUSEUNITS;
              long census_families = e1069->CENSUS_FAMILIES;
              long census_households = e1069->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1069->CENSUS_HUSBWIFE;
              long census_males = e1069->CENSUS_MALES;
              long census_females = e1069->CENSUS_FEMALES;
              long census_householdschildren = e1069->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1069->CENSUS_HISPANIC;
              long v1069 = e1069->__av;
              __SQL_SUM_AGGREGATE_184INVENTORY1_P_3.addOrDelOnZero(se4036.modify(inventory_locn), (v1068 * (v1069 * (location_zip * census_pacific))));
            } while ((n1069 = n1069->nxt));
          }
          e1068 = e1068->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_185INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1070 = LOCATION.head;
        while (e1070) {
          long inventory_locn = e1070->LOCATION_LOCN;
          long location_zip = e1070->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1070->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1070->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1070->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1070->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1070->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1070->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1070->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1070->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1070->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1070->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1070->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1070->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1070->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1070 = e1070->__av;
          { //slice
            const HASH_RES_t h49 = CENSUS_mapkey0_idxfn::hash(se4039.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1071 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1071 = &(i1071->buckets_[h49 % i1071->size_]);
            CENSUS_entry* e1071;
            do if ((e1071 = n1071->obj) && h49 == n1071->hash && CENSUS_mapkey0_idxfn::equals(se4039, *e1071)) {
              long census_population = e1071->CENSUS_POPULATION;
              long census_white = e1071->CENSUS_WHITE;
              long census_asian = e1071->CENSUS_ASIAN;
              long census_pacific = e1071->CENSUS_PACIFIC;
              long census_blackafrican = e1071->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1071->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1071->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1071->CENSUS_HOUSEUNITS;
              long census_families = e1071->CENSUS_FAMILIES;
              long census_households = e1071->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1071->CENSUS_HUSBWIFE;
              long census_males = e1071->CENSUS_MALES;
              long census_females = e1071->CENSUS_FEMALES;
              long census_householdschildren = e1071->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1071->CENSUS_HISPANIC;
              long v1071 = e1071->__av;
              __SQL_SUM_AGGREGATE_185INVENTORY1_P_3.addOrDelOnZero(se4038.modify(inventory_locn), (v1070 * (v1071 * (location_zip * census_blackafrican))));
            } while ((n1071 = n1071->nxt));
          }
          e1070 = e1070->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_186 = 0.0;
      __SQL_SUM_AGGREGATE_186INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1072 = LOCATION.head;
        while (e1072) {
          long inventory_locn = e1072->LOCATION_LOCN;
          long location_zip = e1072->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1072->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1072->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1072->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1072->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1072->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1072->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1072->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1072->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1072->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1072->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1072->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1072->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1072->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1072 = e1072->__av;
          { //slice
            const HASH_RES_t h50 = CENSUS_mapkey0_idxfn::hash(se4042.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1073 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1073 = &(i1073->buckets_[h50 % i1073->size_]);
            CENSUS_entry* e1073;
            do if ((e1073 = n1073->obj) && h50 == n1073->hash && CENSUS_mapkey0_idxfn::equals(se4042, *e1073)) {
              long census_population = e1073->CENSUS_POPULATION;
              long census_white = e1073->CENSUS_WHITE;
              long census_asian = e1073->CENSUS_ASIAN;
              long census_pacific = e1073->CENSUS_PACIFIC;
              long census_blackafrican = e1073->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1073->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1073->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1073->CENSUS_HOUSEUNITS;
              long census_families = e1073->CENSUS_FAMILIES;
              long census_households = e1073->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1073->CENSUS_HUSBWIFE;
              long census_males = e1073->CENSUS_MALES;
              long census_females = e1073->CENSUS_FEMALES;
              long census_householdschildren = e1073->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1073->CENSUS_HISPANIC;
              long v1073 = e1073->__av;
              __SQL_SUM_AGGREGATE_186INVENTORY1_P_3.addOrDelOnZero(se4041.modify(inventory_locn), (v1072 * (v1073 * (location_zip * census_medianage))));
            } while ((n1073 = n1073->nxt));
          }
          e1072 = e1072->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_187INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1074 = LOCATION.head;
        while (e1074) {
          long inventory_locn = e1074->LOCATION_LOCN;
          long location_zip = e1074->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1074->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1074->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1074->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1074->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1074->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1074->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1074->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1074->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1074->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1074->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1074->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1074->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1074->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1074 = e1074->__av;
          { //slice
            const HASH_RES_t h51 = CENSUS_mapkey0_idxfn::hash(se4044.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1075 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1075 = &(i1075->buckets_[h51 % i1075->size_]);
            CENSUS_entry* e1075;
            do if ((e1075 = n1075->obj) && h51 == n1075->hash && CENSUS_mapkey0_idxfn::equals(se4044, *e1075)) {
              long census_population = e1075->CENSUS_POPULATION;
              long census_white = e1075->CENSUS_WHITE;
              long census_asian = e1075->CENSUS_ASIAN;
              long census_pacific = e1075->CENSUS_PACIFIC;
              long census_blackafrican = e1075->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1075->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1075->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1075->CENSUS_HOUSEUNITS;
              long census_families = e1075->CENSUS_FAMILIES;
              long census_households = e1075->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1075->CENSUS_HUSBWIFE;
              long census_males = e1075->CENSUS_MALES;
              long census_females = e1075->CENSUS_FEMALES;
              long census_householdschildren = e1075->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1075->CENSUS_HISPANIC;
              long v1075 = e1075->__av;
              __SQL_SUM_AGGREGATE_187INVENTORY1_P_3.addOrDelOnZero(se4043.modify(inventory_locn), (v1074 * (v1075 * (location_zip * census_occupiedhouseunits))));
            } while ((n1075 = n1075->nxt));
          }
          e1074 = e1074->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_188INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1076 = LOCATION.head;
        while (e1076) {
          long inventory_locn = e1076->LOCATION_LOCN;
          long location_zip = e1076->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1076->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1076->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1076->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1076->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1076->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1076->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1076->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1076->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1076->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1076->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1076->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1076->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1076->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1076 = e1076->__av;
          { //slice
            const HASH_RES_t h52 = CENSUS_mapkey0_idxfn::hash(se4046.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1077 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1077 = &(i1077->buckets_[h52 % i1077->size_]);
            CENSUS_entry* e1077;
            do if ((e1077 = n1077->obj) && h52 == n1077->hash && CENSUS_mapkey0_idxfn::equals(se4046, *e1077)) {
              long census_population = e1077->CENSUS_POPULATION;
              long census_white = e1077->CENSUS_WHITE;
              long census_asian = e1077->CENSUS_ASIAN;
              long census_pacific = e1077->CENSUS_PACIFIC;
              long census_blackafrican = e1077->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1077->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1077->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1077->CENSUS_HOUSEUNITS;
              long census_families = e1077->CENSUS_FAMILIES;
              long census_households = e1077->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1077->CENSUS_HUSBWIFE;
              long census_males = e1077->CENSUS_MALES;
              long census_females = e1077->CENSUS_FEMALES;
              long census_householdschildren = e1077->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1077->CENSUS_HISPANIC;
              long v1077 = e1077->__av;
              __SQL_SUM_AGGREGATE_188INVENTORY1_P_3.addOrDelOnZero(se4045.modify(inventory_locn), (v1076 * (v1077 * (location_zip * census_houseunits))));
            } while ((n1077 = n1077->nxt));
          }
          e1076 = e1076->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_189INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1078 = LOCATION.head;
        while (e1078) {
          long inventory_locn = e1078->LOCATION_LOCN;
          long location_zip = e1078->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1078->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1078->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1078->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1078->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1078->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1078->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1078->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1078->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1078->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1078->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1078->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1078->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1078->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1078 = e1078->__av;
          { //slice
            const HASH_RES_t h53 = CENSUS_mapkey0_idxfn::hash(se4048.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1079 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1079 = &(i1079->buckets_[h53 % i1079->size_]);
            CENSUS_entry* e1079;
            do if ((e1079 = n1079->obj) && h53 == n1079->hash && CENSUS_mapkey0_idxfn::equals(se4048, *e1079)) {
              long census_population = e1079->CENSUS_POPULATION;
              long census_white = e1079->CENSUS_WHITE;
              long census_asian = e1079->CENSUS_ASIAN;
              long census_pacific = e1079->CENSUS_PACIFIC;
              long census_blackafrican = e1079->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1079->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1079->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1079->CENSUS_HOUSEUNITS;
              long census_families = e1079->CENSUS_FAMILIES;
              long census_households = e1079->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1079->CENSUS_HUSBWIFE;
              long census_males = e1079->CENSUS_MALES;
              long census_females = e1079->CENSUS_FEMALES;
              long census_householdschildren = e1079->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1079->CENSUS_HISPANIC;
              long v1079 = e1079->__av;
              __SQL_SUM_AGGREGATE_189INVENTORY1_P_3.addOrDelOnZero(se4047.modify(inventory_locn), (v1078 * (v1079 * (location_zip * census_families))));
            } while ((n1079 = n1079->nxt));
          }
          e1078 = e1078->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_190INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1080 = LOCATION.head;
        while (e1080) {
          long inventory_locn = e1080->LOCATION_LOCN;
          long location_zip = e1080->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1080->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1080->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1080->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1080->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1080->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1080->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1080->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1080->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1080->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1080->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1080->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1080->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1080->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1080 = e1080->__av;
          { //slice
            const HASH_RES_t h54 = CENSUS_mapkey0_idxfn::hash(se4050.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1081 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1081 = &(i1081->buckets_[h54 % i1081->size_]);
            CENSUS_entry* e1081;
            do if ((e1081 = n1081->obj) && h54 == n1081->hash && CENSUS_mapkey0_idxfn::equals(se4050, *e1081)) {
              long census_population = e1081->CENSUS_POPULATION;
              long census_white = e1081->CENSUS_WHITE;
              long census_asian = e1081->CENSUS_ASIAN;
              long census_pacific = e1081->CENSUS_PACIFIC;
              long census_blackafrican = e1081->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1081->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1081->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1081->CENSUS_HOUSEUNITS;
              long census_families = e1081->CENSUS_FAMILIES;
              long census_households = e1081->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1081->CENSUS_HUSBWIFE;
              long census_males = e1081->CENSUS_MALES;
              long census_females = e1081->CENSUS_FEMALES;
              long census_householdschildren = e1081->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1081->CENSUS_HISPANIC;
              long v1081 = e1081->__av;
              __SQL_SUM_AGGREGATE_190INVENTORY1_P_3.addOrDelOnZero(se4049.modify(inventory_locn), (v1080 * (v1081 * (location_zip * census_households))));
            } while ((n1081 = n1081->nxt));
          }
          e1080 = e1080->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_191INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1082 = LOCATION.head;
        while (e1082) {
          long inventory_locn = e1082->LOCATION_LOCN;
          long location_zip = e1082->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1082->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1082->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1082->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1082->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1082->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1082->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1082->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1082->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1082->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1082->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1082->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1082->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1082->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1082 = e1082->__av;
          { //slice
            const HASH_RES_t h55 = CENSUS_mapkey0_idxfn::hash(se4052.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1083 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1083 = &(i1083->buckets_[h55 % i1083->size_]);
            CENSUS_entry* e1083;
            do if ((e1083 = n1083->obj) && h55 == n1083->hash && CENSUS_mapkey0_idxfn::equals(se4052, *e1083)) {
              long census_population = e1083->CENSUS_POPULATION;
              long census_white = e1083->CENSUS_WHITE;
              long census_asian = e1083->CENSUS_ASIAN;
              long census_pacific = e1083->CENSUS_PACIFIC;
              long census_blackafrican = e1083->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1083->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1083->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1083->CENSUS_HOUSEUNITS;
              long census_families = e1083->CENSUS_FAMILIES;
              long census_households = e1083->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1083->CENSUS_HUSBWIFE;
              long census_males = e1083->CENSUS_MALES;
              long census_females = e1083->CENSUS_FEMALES;
              long census_householdschildren = e1083->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1083->CENSUS_HISPANIC;
              long v1083 = e1083->__av;
              __SQL_SUM_AGGREGATE_191INVENTORY1_P_3.addOrDelOnZero(se4051.modify(inventory_locn), (v1082 * (v1083 * (location_zip * census_husbwife))));
            } while ((n1083 = n1083->nxt));
          }
          e1082 = e1082->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_192INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1084 = LOCATION.head;
        while (e1084) {
          long inventory_locn = e1084->LOCATION_LOCN;
          long location_zip = e1084->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1084->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1084->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1084->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1084->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1084->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1084->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1084->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1084->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1084->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1084->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1084->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1084->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1084->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1084 = e1084->__av;
          { //slice
            const HASH_RES_t h56 = CENSUS_mapkey0_idxfn::hash(se4054.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1085 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1085 = &(i1085->buckets_[h56 % i1085->size_]);
            CENSUS_entry* e1085;
            do if ((e1085 = n1085->obj) && h56 == n1085->hash && CENSUS_mapkey0_idxfn::equals(se4054, *e1085)) {
              long census_population = e1085->CENSUS_POPULATION;
              long census_white = e1085->CENSUS_WHITE;
              long census_asian = e1085->CENSUS_ASIAN;
              long census_pacific = e1085->CENSUS_PACIFIC;
              long census_blackafrican = e1085->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1085->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1085->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1085->CENSUS_HOUSEUNITS;
              long census_families = e1085->CENSUS_FAMILIES;
              long census_households = e1085->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1085->CENSUS_HUSBWIFE;
              long census_males = e1085->CENSUS_MALES;
              long census_females = e1085->CENSUS_FEMALES;
              long census_householdschildren = e1085->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1085->CENSUS_HISPANIC;
              long v1085 = e1085->__av;
              __SQL_SUM_AGGREGATE_192INVENTORY1_P_3.addOrDelOnZero(se4053.modify(inventory_locn), (v1084 * (v1085 * (location_zip * census_males))));
            } while ((n1085 = n1085->nxt));
          }
          e1084 = e1084->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_193INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1086 = LOCATION.head;
        while (e1086) {
          long inventory_locn = e1086->LOCATION_LOCN;
          long location_zip = e1086->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1086->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1086->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1086->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1086->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1086->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1086->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1086->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1086->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1086->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1086->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1086->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1086->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1086->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1086 = e1086->__av;
          { //slice
            const HASH_RES_t h57 = CENSUS_mapkey0_idxfn::hash(se4056.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1087 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1087 = &(i1087->buckets_[h57 % i1087->size_]);
            CENSUS_entry* e1087;
            do if ((e1087 = n1087->obj) && h57 == n1087->hash && CENSUS_mapkey0_idxfn::equals(se4056, *e1087)) {
              long census_population = e1087->CENSUS_POPULATION;
              long census_white = e1087->CENSUS_WHITE;
              long census_asian = e1087->CENSUS_ASIAN;
              long census_pacific = e1087->CENSUS_PACIFIC;
              long census_blackafrican = e1087->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1087->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1087->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1087->CENSUS_HOUSEUNITS;
              long census_families = e1087->CENSUS_FAMILIES;
              long census_households = e1087->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1087->CENSUS_HUSBWIFE;
              long census_males = e1087->CENSUS_MALES;
              long census_females = e1087->CENSUS_FEMALES;
              long census_householdschildren = e1087->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1087->CENSUS_HISPANIC;
              long v1087 = e1087->__av;
              __SQL_SUM_AGGREGATE_193INVENTORY1_P_3.addOrDelOnZero(se4055.modify(inventory_locn), (v1086 * (v1087 * (location_zip * census_females))));
            } while ((n1087 = n1087->nxt));
          }
          e1086 = e1086->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_194INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1088 = LOCATION.head;
        while (e1088) {
          long inventory_locn = e1088->LOCATION_LOCN;
          long location_zip = e1088->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1088->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1088->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1088->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1088->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1088->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1088->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1088->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1088->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1088->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1088->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1088->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1088->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1088->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1088 = e1088->__av;
          { //slice
            const HASH_RES_t h58 = CENSUS_mapkey0_idxfn::hash(se4058.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1089 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1089 = &(i1089->buckets_[h58 % i1089->size_]);
            CENSUS_entry* e1089;
            do if ((e1089 = n1089->obj) && h58 == n1089->hash && CENSUS_mapkey0_idxfn::equals(se4058, *e1089)) {
              long census_population = e1089->CENSUS_POPULATION;
              long census_white = e1089->CENSUS_WHITE;
              long census_asian = e1089->CENSUS_ASIAN;
              long census_pacific = e1089->CENSUS_PACIFIC;
              long census_blackafrican = e1089->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1089->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1089->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1089->CENSUS_HOUSEUNITS;
              long census_families = e1089->CENSUS_FAMILIES;
              long census_households = e1089->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1089->CENSUS_HUSBWIFE;
              long census_males = e1089->CENSUS_MALES;
              long census_females = e1089->CENSUS_FEMALES;
              long census_householdschildren = e1089->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1089->CENSUS_HISPANIC;
              long v1089 = e1089->__av;
              __SQL_SUM_AGGREGATE_194INVENTORY1_P_3.addOrDelOnZero(se4057.modify(inventory_locn), (v1088 * (v1089 * (location_zip * census_householdschildren))));
            } while ((n1089 = n1089->nxt));
          }
          e1088 = e1088->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_195INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1090 = LOCATION.head;
        while (e1090) {
          long inventory_locn = e1090->LOCATION_LOCN;
          long location_zip = e1090->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1090->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1090->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1090->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1090->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1090->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1090->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1090->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1090->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1090->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1090->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1090->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1090->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1090->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1090 = e1090->__av;
          { //slice
            const HASH_RES_t h59 = CENSUS_mapkey0_idxfn::hash(se4060.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1091 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1091 = &(i1091->buckets_[h59 % i1091->size_]);
            CENSUS_entry* e1091;
            do if ((e1091 = n1091->obj) && h59 == n1091->hash && CENSUS_mapkey0_idxfn::equals(se4060, *e1091)) {
              long census_population = e1091->CENSUS_POPULATION;
              long census_white = e1091->CENSUS_WHITE;
              long census_asian = e1091->CENSUS_ASIAN;
              long census_pacific = e1091->CENSUS_PACIFIC;
              long census_blackafrican = e1091->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1091->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1091->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1091->CENSUS_HOUSEUNITS;
              long census_families = e1091->CENSUS_FAMILIES;
              long census_households = e1091->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1091->CENSUS_HUSBWIFE;
              long census_males = e1091->CENSUS_MALES;
              long census_females = e1091->CENSUS_FEMALES;
              long census_householdschildren = e1091->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1091->CENSUS_HISPANIC;
              long v1091 = e1091->__av;
              __SQL_SUM_AGGREGATE_195INVENTORY1_P_3.addOrDelOnZero(se4059.modify(inventory_locn), (v1090 * (v1091 * (location_zip * census_hispanic))));
            } while ((n1091 = n1091->nxt));
          }
          e1090 = e1090->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_199 = 0.0;
      __SQL_SUM_AGGREGATE_204 = 0.0;
      __SQL_SUM_AGGREGATE_206 = 0.0;
      __SQL_SUM_AGGREGATE_206INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1092 = LOCATION.head;
        while (e1092) {
          long inventory_locn = e1092->LOCATION_LOCN;
          long location_zip = e1092->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1092->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1092->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1092->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1092->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1092->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1092->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1092->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1092->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1092->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1092->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1092->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1092->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1092->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1092 = e1092->__av;
          { //slice
            const HASH_RES_t h60 = CENSUS_mapkey0_idxfn::hash(se4065.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1093 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1093 = &(i1093->buckets_[h60 % i1093->size_]);
            CENSUS_entry* e1093;
            do if ((e1093 = n1093->obj) && h60 == n1093->hash && CENSUS_mapkey0_idxfn::equals(se4065, *e1093)) {
              long census_population = e1093->CENSUS_POPULATION;
              long census_white = e1093->CENSUS_WHITE;
              long census_asian = e1093->CENSUS_ASIAN;
              long census_pacific = e1093->CENSUS_PACIFIC;
              long census_blackafrican = e1093->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1093->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1093->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1093->CENSUS_HOUSEUNITS;
              long census_families = e1093->CENSUS_FAMILIES;
              long census_households = e1093->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1093->CENSUS_HUSBWIFE;
              long census_males = e1093->CENSUS_MALES;
              long census_females = e1093->CENSUS_FEMALES;
              long census_householdschildren = e1093->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1093->CENSUS_HISPANIC;
              long v1093 = e1093->__av;
              __SQL_SUM_AGGREGATE_206INVENTORY1_P_3.addOrDelOnZero(se4064.modify(inventory_locn), (v1092 * (v1093 * (location_rgn_cd * location_rgn_cd))));
            } while ((n1093 = n1093->nxt));
          }
          e1092 = e1092->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_207 = 0.0;
      __SQL_SUM_AGGREGATE_207INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1094 = LOCATION.head;
        while (e1094) {
          long inventory_locn = e1094->LOCATION_LOCN;
          long location_zip = e1094->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1094->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1094->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1094->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1094->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1094->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1094->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1094->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1094->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1094->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1094->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1094->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1094->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1094->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1094 = e1094->__av;
          { //slice
            const HASH_RES_t h61 = CENSUS_mapkey0_idxfn::hash(se4068.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1095 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1095 = &(i1095->buckets_[h61 % i1095->size_]);
            CENSUS_entry* e1095;
            do if ((e1095 = n1095->obj) && h61 == n1095->hash && CENSUS_mapkey0_idxfn::equals(se4068, *e1095)) {
              long census_population = e1095->CENSUS_POPULATION;
              long census_white = e1095->CENSUS_WHITE;
              long census_asian = e1095->CENSUS_ASIAN;
              long census_pacific = e1095->CENSUS_PACIFIC;
              long census_blackafrican = e1095->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1095->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1095->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1095->CENSUS_HOUSEUNITS;
              long census_families = e1095->CENSUS_FAMILIES;
              long census_households = e1095->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1095->CENSUS_HUSBWIFE;
              long census_males = e1095->CENSUS_MALES;
              long census_females = e1095->CENSUS_FEMALES;
              long census_householdschildren = e1095->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1095->CENSUS_HISPANIC;
              long v1095 = e1095->__av;
              __SQL_SUM_AGGREGATE_207INVENTORY1_P_3.addOrDelOnZero(se4067.modify(inventory_locn), (v1094 * (v1095 * (location_rgn_cd * location_clim_zn_nbr))));
            } while ((n1095 = n1095->nxt));
          }
          e1094 = e1094->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_208 = 0.0;
      __SQL_SUM_AGGREGATE_208INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1096 = LOCATION.head;
        while (e1096) {
          long inventory_locn = e1096->LOCATION_LOCN;
          long location_zip = e1096->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1096->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1096->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1096->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1096->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1096->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1096->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1096->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1096->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1096->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1096->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1096->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1096->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1096->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1096 = e1096->__av;
          { //slice
            const HASH_RES_t h62 = CENSUS_mapkey0_idxfn::hash(se4071.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1097 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1097 = &(i1097->buckets_[h62 % i1097->size_]);
            CENSUS_entry* e1097;
            do if ((e1097 = n1097->obj) && h62 == n1097->hash && CENSUS_mapkey0_idxfn::equals(se4071, *e1097)) {
              long census_population = e1097->CENSUS_POPULATION;
              long census_white = e1097->CENSUS_WHITE;
              long census_asian = e1097->CENSUS_ASIAN;
              long census_pacific = e1097->CENSUS_PACIFIC;
              long census_blackafrican = e1097->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1097->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1097->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1097->CENSUS_HOUSEUNITS;
              long census_families = e1097->CENSUS_FAMILIES;
              long census_households = e1097->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1097->CENSUS_HUSBWIFE;
              long census_males = e1097->CENSUS_MALES;
              long census_females = e1097->CENSUS_FEMALES;
              long census_householdschildren = e1097->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1097->CENSUS_HISPANIC;
              long v1097 = e1097->__av;
              __SQL_SUM_AGGREGATE_208INVENTORY1_P_3.addOrDelOnZero(se4070.modify(inventory_locn), (v1096 * (v1097 * (location_rgn_cd * location_tot_area_sq_ft))));
            } while ((n1097 = n1097->nxt));
          }
          e1096 = e1096->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_209 = 0.0;
      __SQL_SUM_AGGREGATE_209INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1098 = LOCATION.head;
        while (e1098) {
          long inventory_locn = e1098->LOCATION_LOCN;
          long location_zip = e1098->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1098->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1098->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1098->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1098->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1098->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1098->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1098->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1098->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1098->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1098->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1098->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1098->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1098->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1098 = e1098->__av;
          { //slice
            const HASH_RES_t h63 = CENSUS_mapkey0_idxfn::hash(se4074.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1099 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1099 = &(i1099->buckets_[h63 % i1099->size_]);
            CENSUS_entry* e1099;
            do if ((e1099 = n1099->obj) && h63 == n1099->hash && CENSUS_mapkey0_idxfn::equals(se4074, *e1099)) {
              long census_population = e1099->CENSUS_POPULATION;
              long census_white = e1099->CENSUS_WHITE;
              long census_asian = e1099->CENSUS_ASIAN;
              long census_pacific = e1099->CENSUS_PACIFIC;
              long census_blackafrican = e1099->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1099->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1099->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1099->CENSUS_HOUSEUNITS;
              long census_families = e1099->CENSUS_FAMILIES;
              long census_households = e1099->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1099->CENSUS_HUSBWIFE;
              long census_males = e1099->CENSUS_MALES;
              long census_females = e1099->CENSUS_FEMALES;
              long census_householdschildren = e1099->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1099->CENSUS_HISPANIC;
              long v1099 = e1099->__av;
              __SQL_SUM_AGGREGATE_209INVENTORY1_P_3.addOrDelOnZero(se4073.modify(inventory_locn), (v1098 * (v1099 * (location_rgn_cd * location_sell_area_sq_ft))));
            } while ((n1099 = n1099->nxt));
          }
          e1098 = e1098->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_210 = 0.0;
      __SQL_SUM_AGGREGATE_210INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1100 = LOCATION.head;
        while (e1100) {
          long inventory_locn = e1100->LOCATION_LOCN;
          long location_zip = e1100->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1100->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1100->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1100->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1100->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1100->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1100->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1100->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1100->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1100->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1100->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1100->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1100->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1100->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1100 = e1100->__av;
          { //slice
            const HASH_RES_t h64 = CENSUS_mapkey0_idxfn::hash(se4077.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1101 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1101 = &(i1101->buckets_[h64 % i1101->size_]);
            CENSUS_entry* e1101;
            do if ((e1101 = n1101->obj) && h64 == n1101->hash && CENSUS_mapkey0_idxfn::equals(se4077, *e1101)) {
              long census_population = e1101->CENSUS_POPULATION;
              long census_white = e1101->CENSUS_WHITE;
              long census_asian = e1101->CENSUS_ASIAN;
              long census_pacific = e1101->CENSUS_PACIFIC;
              long census_blackafrican = e1101->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1101->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1101->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1101->CENSUS_HOUSEUNITS;
              long census_families = e1101->CENSUS_FAMILIES;
              long census_households = e1101->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1101->CENSUS_HUSBWIFE;
              long census_males = e1101->CENSUS_MALES;
              long census_females = e1101->CENSUS_FEMALES;
              long census_householdschildren = e1101->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1101->CENSUS_HISPANIC;
              long v1101 = e1101->__av;
              __SQL_SUM_AGGREGATE_210INVENTORY1_P_3.addOrDelOnZero(se4076.modify(inventory_locn), (v1100 * (v1101 * (location_rgn_cd * location_avghhi))));
            } while ((n1101 = n1101->nxt));
          }
          e1100 = e1100->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_211 = 0.0;
      __SQL_SUM_AGGREGATE_211INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1102 = LOCATION.head;
        while (e1102) {
          long inventory_locn = e1102->LOCATION_LOCN;
          long location_zip = e1102->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1102->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1102->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1102->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1102->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1102->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1102->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1102->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1102->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1102->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1102->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1102->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1102->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1102->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1102 = e1102->__av;
          { //slice
            const HASH_RES_t h65 = CENSUS_mapkey0_idxfn::hash(se4080.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1103 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1103 = &(i1103->buckets_[h65 % i1103->size_]);
            CENSUS_entry* e1103;
            do if ((e1103 = n1103->obj) && h65 == n1103->hash && CENSUS_mapkey0_idxfn::equals(se4080, *e1103)) {
              long census_population = e1103->CENSUS_POPULATION;
              long census_white = e1103->CENSUS_WHITE;
              long census_asian = e1103->CENSUS_ASIAN;
              long census_pacific = e1103->CENSUS_PACIFIC;
              long census_blackafrican = e1103->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1103->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1103->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1103->CENSUS_HOUSEUNITS;
              long census_families = e1103->CENSUS_FAMILIES;
              long census_households = e1103->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1103->CENSUS_HUSBWIFE;
              long census_males = e1103->CENSUS_MALES;
              long census_females = e1103->CENSUS_FEMALES;
              long census_householdschildren = e1103->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1103->CENSUS_HISPANIC;
              long v1103 = e1103->__av;
              __SQL_SUM_AGGREGATE_211INVENTORY1_P_3.addOrDelOnZero(se4079.modify(inventory_locn), (v1102 * (v1103 * (location_rgn_cd * location_supertargetdistance))));
            } while ((n1103 = n1103->nxt));
          }
          e1102 = e1102->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_212 = 0.0;
      __SQL_SUM_AGGREGATE_212INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1104 = LOCATION.head;
        while (e1104) {
          long inventory_locn = e1104->LOCATION_LOCN;
          long location_zip = e1104->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1104->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1104->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1104->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1104->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1104->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1104->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1104->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1104->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1104->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1104->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1104->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1104->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1104->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1104 = e1104->__av;
          { //slice
            const HASH_RES_t h66 = CENSUS_mapkey0_idxfn::hash(se4083.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1105 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1105 = &(i1105->buckets_[h66 % i1105->size_]);
            CENSUS_entry* e1105;
            do if ((e1105 = n1105->obj) && h66 == n1105->hash && CENSUS_mapkey0_idxfn::equals(se4083, *e1105)) {
              long census_population = e1105->CENSUS_POPULATION;
              long census_white = e1105->CENSUS_WHITE;
              long census_asian = e1105->CENSUS_ASIAN;
              long census_pacific = e1105->CENSUS_PACIFIC;
              long census_blackafrican = e1105->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1105->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1105->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1105->CENSUS_HOUSEUNITS;
              long census_families = e1105->CENSUS_FAMILIES;
              long census_households = e1105->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1105->CENSUS_HUSBWIFE;
              long census_males = e1105->CENSUS_MALES;
              long census_females = e1105->CENSUS_FEMALES;
              long census_householdschildren = e1105->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1105->CENSUS_HISPANIC;
              long v1105 = e1105->__av;
              __SQL_SUM_AGGREGATE_212INVENTORY1_P_3.addOrDelOnZero(se4082.modify(inventory_locn), (v1104 * (v1105 * (location_rgn_cd * location_supertargetdrivetime))));
            } while ((n1105 = n1105->nxt));
          }
          e1104 = e1104->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_213 = 0.0;
      __SQL_SUM_AGGREGATE_213INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1106 = LOCATION.head;
        while (e1106) {
          long inventory_locn = e1106->LOCATION_LOCN;
          long location_zip = e1106->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1106->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1106->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1106->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1106->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1106->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1106->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1106->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1106->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1106->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1106->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1106->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1106->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1106->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1106 = e1106->__av;
          { //slice
            const HASH_RES_t h67 = CENSUS_mapkey0_idxfn::hash(se4086.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1107 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1107 = &(i1107->buckets_[h67 % i1107->size_]);
            CENSUS_entry* e1107;
            do if ((e1107 = n1107->obj) && h67 == n1107->hash && CENSUS_mapkey0_idxfn::equals(se4086, *e1107)) {
              long census_population = e1107->CENSUS_POPULATION;
              long census_white = e1107->CENSUS_WHITE;
              long census_asian = e1107->CENSUS_ASIAN;
              long census_pacific = e1107->CENSUS_PACIFIC;
              long census_blackafrican = e1107->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1107->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1107->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1107->CENSUS_HOUSEUNITS;
              long census_families = e1107->CENSUS_FAMILIES;
              long census_households = e1107->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1107->CENSUS_HUSBWIFE;
              long census_males = e1107->CENSUS_MALES;
              long census_females = e1107->CENSUS_FEMALES;
              long census_householdschildren = e1107->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1107->CENSUS_HISPANIC;
              long v1107 = e1107->__av;
              __SQL_SUM_AGGREGATE_213INVENTORY1_P_3.addOrDelOnZero(se4085.modify(inventory_locn), (v1106 * (v1107 * (location_rgn_cd * location_targetdistance))));
            } while ((n1107 = n1107->nxt));
          }
          e1106 = e1106->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_214 = 0.0;
      __SQL_SUM_AGGREGATE_214INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1108 = LOCATION.head;
        while (e1108) {
          long inventory_locn = e1108->LOCATION_LOCN;
          long location_zip = e1108->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1108->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1108->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1108->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1108->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1108->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1108->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1108->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1108->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1108->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1108->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1108->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1108->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1108->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1108 = e1108->__av;
          { //slice
            const HASH_RES_t h68 = CENSUS_mapkey0_idxfn::hash(se4089.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1109 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1109 = &(i1109->buckets_[h68 % i1109->size_]);
            CENSUS_entry* e1109;
            do if ((e1109 = n1109->obj) && h68 == n1109->hash && CENSUS_mapkey0_idxfn::equals(se4089, *e1109)) {
              long census_population = e1109->CENSUS_POPULATION;
              long census_white = e1109->CENSUS_WHITE;
              long census_asian = e1109->CENSUS_ASIAN;
              long census_pacific = e1109->CENSUS_PACIFIC;
              long census_blackafrican = e1109->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1109->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1109->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1109->CENSUS_HOUSEUNITS;
              long census_families = e1109->CENSUS_FAMILIES;
              long census_households = e1109->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1109->CENSUS_HUSBWIFE;
              long census_males = e1109->CENSUS_MALES;
              long census_females = e1109->CENSUS_FEMALES;
              long census_householdschildren = e1109->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1109->CENSUS_HISPANIC;
              long v1109 = e1109->__av;
              __SQL_SUM_AGGREGATE_214INVENTORY1_P_3.addOrDelOnZero(se4088.modify(inventory_locn), (v1108 * (v1109 * (location_rgn_cd * location_targetdrivetime))));
            } while ((n1109 = n1109->nxt));
          }
          e1108 = e1108->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_215 = 0.0;
      __SQL_SUM_AGGREGATE_215INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1110 = LOCATION.head;
        while (e1110) {
          long inventory_locn = e1110->LOCATION_LOCN;
          long location_zip = e1110->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1110->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1110->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1110->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1110->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1110->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1110->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1110->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1110->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1110->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1110->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1110->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1110->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1110->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1110 = e1110->__av;
          { //slice
            const HASH_RES_t h69 = CENSUS_mapkey0_idxfn::hash(se4092.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1111 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1111 = &(i1111->buckets_[h69 % i1111->size_]);
            CENSUS_entry* e1111;
            do if ((e1111 = n1111->obj) && h69 == n1111->hash && CENSUS_mapkey0_idxfn::equals(se4092, *e1111)) {
              long census_population = e1111->CENSUS_POPULATION;
              long census_white = e1111->CENSUS_WHITE;
              long census_asian = e1111->CENSUS_ASIAN;
              long census_pacific = e1111->CENSUS_PACIFIC;
              long census_blackafrican = e1111->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1111->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1111->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1111->CENSUS_HOUSEUNITS;
              long census_families = e1111->CENSUS_FAMILIES;
              long census_households = e1111->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1111->CENSUS_HUSBWIFE;
              long census_males = e1111->CENSUS_MALES;
              long census_females = e1111->CENSUS_FEMALES;
              long census_householdschildren = e1111->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1111->CENSUS_HISPANIC;
              long v1111 = e1111->__av;
              __SQL_SUM_AGGREGATE_215INVENTORY1_P_3.addOrDelOnZero(se4091.modify(inventory_locn), (v1110 * (v1111 * (location_rgn_cd * location_walmartdistance))));
            } while ((n1111 = n1111->nxt));
          }
          e1110 = e1110->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_216 = 0.0;
      __SQL_SUM_AGGREGATE_216INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1112 = LOCATION.head;
        while (e1112) {
          long inventory_locn = e1112->LOCATION_LOCN;
          long location_zip = e1112->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1112->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1112->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1112->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1112->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1112->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1112->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1112->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1112->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1112->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1112->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1112->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1112->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1112->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1112 = e1112->__av;
          { //slice
            const HASH_RES_t h70 = CENSUS_mapkey0_idxfn::hash(se4095.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1113 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1113 = &(i1113->buckets_[h70 % i1113->size_]);
            CENSUS_entry* e1113;
            do if ((e1113 = n1113->obj) && h70 == n1113->hash && CENSUS_mapkey0_idxfn::equals(se4095, *e1113)) {
              long census_population = e1113->CENSUS_POPULATION;
              long census_white = e1113->CENSUS_WHITE;
              long census_asian = e1113->CENSUS_ASIAN;
              long census_pacific = e1113->CENSUS_PACIFIC;
              long census_blackafrican = e1113->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1113->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1113->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1113->CENSUS_HOUSEUNITS;
              long census_families = e1113->CENSUS_FAMILIES;
              long census_households = e1113->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1113->CENSUS_HUSBWIFE;
              long census_males = e1113->CENSUS_MALES;
              long census_females = e1113->CENSUS_FEMALES;
              long census_householdschildren = e1113->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1113->CENSUS_HISPANIC;
              long v1113 = e1113->__av;
              __SQL_SUM_AGGREGATE_216INVENTORY1_P_3.addOrDelOnZero(se4094.modify(inventory_locn), (v1112 * (v1113 * (location_rgn_cd * location_walmartdrivetime))));
            } while ((n1113 = n1113->nxt));
          }
          e1112 = e1112->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_217 = 0.0;
      __SQL_SUM_AGGREGATE_217INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1114 = LOCATION.head;
        while (e1114) {
          long inventory_locn = e1114->LOCATION_LOCN;
          long location_zip = e1114->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1114->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1114->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1114->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1114->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1114->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1114->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1114->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1114->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1114->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1114->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1114->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1114->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1114->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1114 = e1114->__av;
          { //slice
            const HASH_RES_t h71 = CENSUS_mapkey0_idxfn::hash(se4098.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1115 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1115 = &(i1115->buckets_[h71 % i1115->size_]);
            CENSUS_entry* e1115;
            do if ((e1115 = n1115->obj) && h71 == n1115->hash && CENSUS_mapkey0_idxfn::equals(se4098, *e1115)) {
              long census_population = e1115->CENSUS_POPULATION;
              long census_white = e1115->CENSUS_WHITE;
              long census_asian = e1115->CENSUS_ASIAN;
              long census_pacific = e1115->CENSUS_PACIFIC;
              long census_blackafrican = e1115->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1115->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1115->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1115->CENSUS_HOUSEUNITS;
              long census_families = e1115->CENSUS_FAMILIES;
              long census_households = e1115->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1115->CENSUS_HUSBWIFE;
              long census_males = e1115->CENSUS_MALES;
              long census_females = e1115->CENSUS_FEMALES;
              long census_householdschildren = e1115->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1115->CENSUS_HISPANIC;
              long v1115 = e1115->__av;
              __SQL_SUM_AGGREGATE_217INVENTORY1_P_3.addOrDelOnZero(se4097.modify(inventory_locn), (v1114 * (v1115 * (location_rgn_cd * location_walmartsupercenterdistance))));
            } while ((n1115 = n1115->nxt));
          }
          e1114 = e1114->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_218 = 0.0;
      __SQL_SUM_AGGREGATE_218INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1116 = LOCATION.head;
        while (e1116) {
          long inventory_locn = e1116->LOCATION_LOCN;
          long location_zip = e1116->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1116->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1116->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1116->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1116->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1116->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1116->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1116->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1116->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1116->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1116->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1116->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1116->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1116->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1116 = e1116->__av;
          { //slice
            const HASH_RES_t h72 = CENSUS_mapkey0_idxfn::hash(se4101.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1117 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1117 = &(i1117->buckets_[h72 % i1117->size_]);
            CENSUS_entry* e1117;
            do if ((e1117 = n1117->obj) && h72 == n1117->hash && CENSUS_mapkey0_idxfn::equals(se4101, *e1117)) {
              long census_population = e1117->CENSUS_POPULATION;
              long census_white = e1117->CENSUS_WHITE;
              long census_asian = e1117->CENSUS_ASIAN;
              long census_pacific = e1117->CENSUS_PACIFIC;
              long census_blackafrican = e1117->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1117->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1117->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1117->CENSUS_HOUSEUNITS;
              long census_families = e1117->CENSUS_FAMILIES;
              long census_households = e1117->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1117->CENSUS_HUSBWIFE;
              long census_males = e1117->CENSUS_MALES;
              long census_females = e1117->CENSUS_FEMALES;
              long census_householdschildren = e1117->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1117->CENSUS_HISPANIC;
              long v1117 = e1117->__av;
              __SQL_SUM_AGGREGATE_218INVENTORY1_P_3.addOrDelOnZero(se4100.modify(inventory_locn), (v1116 * (v1117 * (location_rgn_cd * location_walmartsupercenterdrivetime))));
            } while ((n1117 = n1117->nxt));
          }
          e1116 = e1116->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_219 = 0.0;
      __SQL_SUM_AGGREGATE_219INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1118 = LOCATION.head;
        while (e1118) {
          long inventory_locn = e1118->LOCATION_LOCN;
          long location_zip = e1118->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1118->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1118->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1118->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1118->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1118->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1118->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1118->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1118->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1118->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1118->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1118->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1118->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1118->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1118 = e1118->__av;
          { //slice
            const HASH_RES_t h73 = CENSUS_mapkey0_idxfn::hash(se4104.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1119 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1119 = &(i1119->buckets_[h73 % i1119->size_]);
            CENSUS_entry* e1119;
            do if ((e1119 = n1119->obj) && h73 == n1119->hash && CENSUS_mapkey0_idxfn::equals(se4104, *e1119)) {
              long census_population = e1119->CENSUS_POPULATION;
              long census_white = e1119->CENSUS_WHITE;
              long census_asian = e1119->CENSUS_ASIAN;
              long census_pacific = e1119->CENSUS_PACIFIC;
              long census_blackafrican = e1119->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1119->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1119->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1119->CENSUS_HOUSEUNITS;
              long census_families = e1119->CENSUS_FAMILIES;
              long census_households = e1119->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1119->CENSUS_HUSBWIFE;
              long census_males = e1119->CENSUS_MALES;
              long census_females = e1119->CENSUS_FEMALES;
              long census_householdschildren = e1119->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1119->CENSUS_HISPANIC;
              long v1119 = e1119->__av;
              __SQL_SUM_AGGREGATE_219INVENTORY1_P_3.addOrDelOnZero(se4103.modify(inventory_locn), (v1118 * (v1119 * (location_rgn_cd * census_population))));
            } while ((n1119 = n1119->nxt));
          }
          e1118 = e1118->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_220 = 0.0;
      __SQL_SUM_AGGREGATE_220INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1120 = LOCATION.head;
        while (e1120) {
          long inventory_locn = e1120->LOCATION_LOCN;
          long location_zip = e1120->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1120->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1120->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1120->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1120->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1120->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1120->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1120->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1120->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1120->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1120->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1120->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1120->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1120->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1120 = e1120->__av;
          { //slice
            const HASH_RES_t h74 = CENSUS_mapkey0_idxfn::hash(se4107.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1121 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1121 = &(i1121->buckets_[h74 % i1121->size_]);
            CENSUS_entry* e1121;
            do if ((e1121 = n1121->obj) && h74 == n1121->hash && CENSUS_mapkey0_idxfn::equals(se4107, *e1121)) {
              long census_population = e1121->CENSUS_POPULATION;
              long census_white = e1121->CENSUS_WHITE;
              long census_asian = e1121->CENSUS_ASIAN;
              long census_pacific = e1121->CENSUS_PACIFIC;
              long census_blackafrican = e1121->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1121->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1121->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1121->CENSUS_HOUSEUNITS;
              long census_families = e1121->CENSUS_FAMILIES;
              long census_households = e1121->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1121->CENSUS_HUSBWIFE;
              long census_males = e1121->CENSUS_MALES;
              long census_females = e1121->CENSUS_FEMALES;
              long census_householdschildren = e1121->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1121->CENSUS_HISPANIC;
              long v1121 = e1121->__av;
              __SQL_SUM_AGGREGATE_220INVENTORY1_P_3.addOrDelOnZero(se4106.modify(inventory_locn), (v1120 * (v1121 * (location_rgn_cd * census_white))));
            } while ((n1121 = n1121->nxt));
          }
          e1120 = e1120->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_221 = 0.0;
      __SQL_SUM_AGGREGATE_221INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1122 = LOCATION.head;
        while (e1122) {
          long inventory_locn = e1122->LOCATION_LOCN;
          long location_zip = e1122->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1122->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1122->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1122->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1122->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1122->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1122->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1122->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1122->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1122->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1122->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1122->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1122->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1122->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1122 = e1122->__av;
          { //slice
            const HASH_RES_t h75 = CENSUS_mapkey0_idxfn::hash(se4110.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1123 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1123 = &(i1123->buckets_[h75 % i1123->size_]);
            CENSUS_entry* e1123;
            do if ((e1123 = n1123->obj) && h75 == n1123->hash && CENSUS_mapkey0_idxfn::equals(se4110, *e1123)) {
              long census_population = e1123->CENSUS_POPULATION;
              long census_white = e1123->CENSUS_WHITE;
              long census_asian = e1123->CENSUS_ASIAN;
              long census_pacific = e1123->CENSUS_PACIFIC;
              long census_blackafrican = e1123->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1123->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1123->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1123->CENSUS_HOUSEUNITS;
              long census_families = e1123->CENSUS_FAMILIES;
              long census_households = e1123->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1123->CENSUS_HUSBWIFE;
              long census_males = e1123->CENSUS_MALES;
              long census_females = e1123->CENSUS_FEMALES;
              long census_householdschildren = e1123->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1123->CENSUS_HISPANIC;
              long v1123 = e1123->__av;
              __SQL_SUM_AGGREGATE_221INVENTORY1_P_3.addOrDelOnZero(se4109.modify(inventory_locn), (v1122 * (v1123 * (location_rgn_cd * census_asian))));
            } while ((n1123 = n1123->nxt));
          }
          e1122 = e1122->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_222 = 0.0;
      __SQL_SUM_AGGREGATE_222INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1124 = LOCATION.head;
        while (e1124) {
          long inventory_locn = e1124->LOCATION_LOCN;
          long location_zip = e1124->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1124->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1124->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1124->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1124->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1124->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1124->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1124->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1124->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1124->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1124->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1124->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1124->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1124->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1124 = e1124->__av;
          { //slice
            const HASH_RES_t h76 = CENSUS_mapkey0_idxfn::hash(se4113.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1125 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1125 = &(i1125->buckets_[h76 % i1125->size_]);
            CENSUS_entry* e1125;
            do if ((e1125 = n1125->obj) && h76 == n1125->hash && CENSUS_mapkey0_idxfn::equals(se4113, *e1125)) {
              long census_population = e1125->CENSUS_POPULATION;
              long census_white = e1125->CENSUS_WHITE;
              long census_asian = e1125->CENSUS_ASIAN;
              long census_pacific = e1125->CENSUS_PACIFIC;
              long census_blackafrican = e1125->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1125->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1125->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1125->CENSUS_HOUSEUNITS;
              long census_families = e1125->CENSUS_FAMILIES;
              long census_households = e1125->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1125->CENSUS_HUSBWIFE;
              long census_males = e1125->CENSUS_MALES;
              long census_females = e1125->CENSUS_FEMALES;
              long census_householdschildren = e1125->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1125->CENSUS_HISPANIC;
              long v1125 = e1125->__av;
              __SQL_SUM_AGGREGATE_222INVENTORY1_P_3.addOrDelOnZero(se4112.modify(inventory_locn), (v1124 * (v1125 * (location_rgn_cd * census_pacific))));
            } while ((n1125 = n1125->nxt));
          }
          e1124 = e1124->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_223 = 0.0;
      __SQL_SUM_AGGREGATE_223INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1126 = LOCATION.head;
        while (e1126) {
          long inventory_locn = e1126->LOCATION_LOCN;
          long location_zip = e1126->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1126->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1126->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1126->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1126->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1126->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1126->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1126->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1126->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1126->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1126->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1126->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1126->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1126->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1126 = e1126->__av;
          { //slice
            const HASH_RES_t h77 = CENSUS_mapkey0_idxfn::hash(se4116.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1127 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1127 = &(i1127->buckets_[h77 % i1127->size_]);
            CENSUS_entry* e1127;
            do if ((e1127 = n1127->obj) && h77 == n1127->hash && CENSUS_mapkey0_idxfn::equals(se4116, *e1127)) {
              long census_population = e1127->CENSUS_POPULATION;
              long census_white = e1127->CENSUS_WHITE;
              long census_asian = e1127->CENSUS_ASIAN;
              long census_pacific = e1127->CENSUS_PACIFIC;
              long census_blackafrican = e1127->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1127->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1127->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1127->CENSUS_HOUSEUNITS;
              long census_families = e1127->CENSUS_FAMILIES;
              long census_households = e1127->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1127->CENSUS_HUSBWIFE;
              long census_males = e1127->CENSUS_MALES;
              long census_females = e1127->CENSUS_FEMALES;
              long census_householdschildren = e1127->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1127->CENSUS_HISPANIC;
              long v1127 = e1127->__av;
              __SQL_SUM_AGGREGATE_223INVENTORY1_P_3.addOrDelOnZero(se4115.modify(inventory_locn), (v1126 * (v1127 * (location_rgn_cd * census_blackafrican))));
            } while ((n1127 = n1127->nxt));
          }
          e1126 = e1126->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_224 = 0.0;
      __SQL_SUM_AGGREGATE_224INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1128 = LOCATION.head;
        while (e1128) {
          long inventory_locn = e1128->LOCATION_LOCN;
          long location_zip = e1128->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1128->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1128->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1128->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1128->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1128->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1128->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1128->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1128->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1128->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1128->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1128->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1128->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1128->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1128 = e1128->__av;
          { //slice
            const HASH_RES_t h78 = CENSUS_mapkey0_idxfn::hash(se4119.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1129 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1129 = &(i1129->buckets_[h78 % i1129->size_]);
            CENSUS_entry* e1129;
            do if ((e1129 = n1129->obj) && h78 == n1129->hash && CENSUS_mapkey0_idxfn::equals(se4119, *e1129)) {
              long census_population = e1129->CENSUS_POPULATION;
              long census_white = e1129->CENSUS_WHITE;
              long census_asian = e1129->CENSUS_ASIAN;
              long census_pacific = e1129->CENSUS_PACIFIC;
              long census_blackafrican = e1129->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1129->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1129->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1129->CENSUS_HOUSEUNITS;
              long census_families = e1129->CENSUS_FAMILIES;
              long census_households = e1129->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1129->CENSUS_HUSBWIFE;
              long census_males = e1129->CENSUS_MALES;
              long census_females = e1129->CENSUS_FEMALES;
              long census_householdschildren = e1129->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1129->CENSUS_HISPANIC;
              long v1129 = e1129->__av;
              __SQL_SUM_AGGREGATE_224INVENTORY1_P_3.addOrDelOnZero(se4118.modify(inventory_locn), (v1128 * (v1129 * (location_rgn_cd * census_medianage))));
            } while ((n1129 = n1129->nxt));
          }
          e1128 = e1128->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_225 = 0.0;
      __SQL_SUM_AGGREGATE_225INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1130 = LOCATION.head;
        while (e1130) {
          long inventory_locn = e1130->LOCATION_LOCN;
          long location_zip = e1130->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1130->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1130->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1130->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1130->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1130->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1130->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1130->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1130->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1130->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1130->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1130->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1130->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1130->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1130 = e1130->__av;
          { //slice
            const HASH_RES_t h79 = CENSUS_mapkey0_idxfn::hash(se4122.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1131 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1131 = &(i1131->buckets_[h79 % i1131->size_]);
            CENSUS_entry* e1131;
            do if ((e1131 = n1131->obj) && h79 == n1131->hash && CENSUS_mapkey0_idxfn::equals(se4122, *e1131)) {
              long census_population = e1131->CENSUS_POPULATION;
              long census_white = e1131->CENSUS_WHITE;
              long census_asian = e1131->CENSUS_ASIAN;
              long census_pacific = e1131->CENSUS_PACIFIC;
              long census_blackafrican = e1131->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1131->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1131->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1131->CENSUS_HOUSEUNITS;
              long census_families = e1131->CENSUS_FAMILIES;
              long census_households = e1131->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1131->CENSUS_HUSBWIFE;
              long census_males = e1131->CENSUS_MALES;
              long census_females = e1131->CENSUS_FEMALES;
              long census_householdschildren = e1131->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1131->CENSUS_HISPANIC;
              long v1131 = e1131->__av;
              __SQL_SUM_AGGREGATE_225INVENTORY1_P_3.addOrDelOnZero(se4121.modify(inventory_locn), (v1130 * (v1131 * (location_rgn_cd * census_occupiedhouseunits))));
            } while ((n1131 = n1131->nxt));
          }
          e1130 = e1130->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_226 = 0.0;
      __SQL_SUM_AGGREGATE_226INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1132 = LOCATION.head;
        while (e1132) {
          long inventory_locn = e1132->LOCATION_LOCN;
          long location_zip = e1132->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1132->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1132->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1132->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1132->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1132->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1132->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1132->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1132->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1132->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1132->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1132->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1132->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1132->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1132 = e1132->__av;
          { //slice
            const HASH_RES_t h80 = CENSUS_mapkey0_idxfn::hash(se4125.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1133 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1133 = &(i1133->buckets_[h80 % i1133->size_]);
            CENSUS_entry* e1133;
            do if ((e1133 = n1133->obj) && h80 == n1133->hash && CENSUS_mapkey0_idxfn::equals(se4125, *e1133)) {
              long census_population = e1133->CENSUS_POPULATION;
              long census_white = e1133->CENSUS_WHITE;
              long census_asian = e1133->CENSUS_ASIAN;
              long census_pacific = e1133->CENSUS_PACIFIC;
              long census_blackafrican = e1133->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1133->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1133->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1133->CENSUS_HOUSEUNITS;
              long census_families = e1133->CENSUS_FAMILIES;
              long census_households = e1133->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1133->CENSUS_HUSBWIFE;
              long census_males = e1133->CENSUS_MALES;
              long census_females = e1133->CENSUS_FEMALES;
              long census_householdschildren = e1133->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1133->CENSUS_HISPANIC;
              long v1133 = e1133->__av;
              __SQL_SUM_AGGREGATE_226INVENTORY1_P_3.addOrDelOnZero(se4124.modify(inventory_locn), (v1132 * (v1133 * (location_rgn_cd * census_houseunits))));
            } while ((n1133 = n1133->nxt));
          }
          e1132 = e1132->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_227 = 0.0;
      __SQL_SUM_AGGREGATE_227INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1134 = LOCATION.head;
        while (e1134) {
          long inventory_locn = e1134->LOCATION_LOCN;
          long location_zip = e1134->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1134->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1134->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1134->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1134->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1134->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1134->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1134->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1134->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1134->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1134->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1134->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1134->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1134->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1134 = e1134->__av;
          { //slice
            const HASH_RES_t h81 = CENSUS_mapkey0_idxfn::hash(se4128.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1135 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1135 = &(i1135->buckets_[h81 % i1135->size_]);
            CENSUS_entry* e1135;
            do if ((e1135 = n1135->obj) && h81 == n1135->hash && CENSUS_mapkey0_idxfn::equals(se4128, *e1135)) {
              long census_population = e1135->CENSUS_POPULATION;
              long census_white = e1135->CENSUS_WHITE;
              long census_asian = e1135->CENSUS_ASIAN;
              long census_pacific = e1135->CENSUS_PACIFIC;
              long census_blackafrican = e1135->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1135->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1135->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1135->CENSUS_HOUSEUNITS;
              long census_families = e1135->CENSUS_FAMILIES;
              long census_households = e1135->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1135->CENSUS_HUSBWIFE;
              long census_males = e1135->CENSUS_MALES;
              long census_females = e1135->CENSUS_FEMALES;
              long census_householdschildren = e1135->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1135->CENSUS_HISPANIC;
              long v1135 = e1135->__av;
              __SQL_SUM_AGGREGATE_227INVENTORY1_P_3.addOrDelOnZero(se4127.modify(inventory_locn), (v1134 * (v1135 * (location_rgn_cd * census_families))));
            } while ((n1135 = n1135->nxt));
          }
          e1134 = e1134->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_228 = 0.0;
      __SQL_SUM_AGGREGATE_228INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1136 = LOCATION.head;
        while (e1136) {
          long inventory_locn = e1136->LOCATION_LOCN;
          long location_zip = e1136->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1136->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1136->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1136->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1136->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1136->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1136->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1136->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1136->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1136->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1136->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1136->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1136->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1136->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1136 = e1136->__av;
          { //slice
            const HASH_RES_t h82 = CENSUS_mapkey0_idxfn::hash(se4131.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1137 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1137 = &(i1137->buckets_[h82 % i1137->size_]);
            CENSUS_entry* e1137;
            do if ((e1137 = n1137->obj) && h82 == n1137->hash && CENSUS_mapkey0_idxfn::equals(se4131, *e1137)) {
              long census_population = e1137->CENSUS_POPULATION;
              long census_white = e1137->CENSUS_WHITE;
              long census_asian = e1137->CENSUS_ASIAN;
              long census_pacific = e1137->CENSUS_PACIFIC;
              long census_blackafrican = e1137->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1137->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1137->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1137->CENSUS_HOUSEUNITS;
              long census_families = e1137->CENSUS_FAMILIES;
              long census_households = e1137->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1137->CENSUS_HUSBWIFE;
              long census_males = e1137->CENSUS_MALES;
              long census_females = e1137->CENSUS_FEMALES;
              long census_householdschildren = e1137->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1137->CENSUS_HISPANIC;
              long v1137 = e1137->__av;
              __SQL_SUM_AGGREGATE_228INVENTORY1_P_3.addOrDelOnZero(se4130.modify(inventory_locn), (v1136 * (v1137 * (location_rgn_cd * census_households))));
            } while ((n1137 = n1137->nxt));
          }
          e1136 = e1136->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_229 = 0.0;
      __SQL_SUM_AGGREGATE_229INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1138 = LOCATION.head;
        while (e1138) {
          long inventory_locn = e1138->LOCATION_LOCN;
          long location_zip = e1138->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1138->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1138->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1138->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1138->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1138->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1138->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1138->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1138->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1138->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1138->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1138->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1138->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1138->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1138 = e1138->__av;
          { //slice
            const HASH_RES_t h83 = CENSUS_mapkey0_idxfn::hash(se4134.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1139 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1139 = &(i1139->buckets_[h83 % i1139->size_]);
            CENSUS_entry* e1139;
            do if ((e1139 = n1139->obj) && h83 == n1139->hash && CENSUS_mapkey0_idxfn::equals(se4134, *e1139)) {
              long census_population = e1139->CENSUS_POPULATION;
              long census_white = e1139->CENSUS_WHITE;
              long census_asian = e1139->CENSUS_ASIAN;
              long census_pacific = e1139->CENSUS_PACIFIC;
              long census_blackafrican = e1139->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1139->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1139->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1139->CENSUS_HOUSEUNITS;
              long census_families = e1139->CENSUS_FAMILIES;
              long census_households = e1139->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1139->CENSUS_HUSBWIFE;
              long census_males = e1139->CENSUS_MALES;
              long census_females = e1139->CENSUS_FEMALES;
              long census_householdschildren = e1139->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1139->CENSUS_HISPANIC;
              long v1139 = e1139->__av;
              __SQL_SUM_AGGREGATE_229INVENTORY1_P_3.addOrDelOnZero(se4133.modify(inventory_locn), (v1138 * (v1139 * (location_rgn_cd * census_husbwife))));
            } while ((n1139 = n1139->nxt));
          }
          e1138 = e1138->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_230 = 0.0;
      __SQL_SUM_AGGREGATE_230INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1140 = LOCATION.head;
        while (e1140) {
          long inventory_locn = e1140->LOCATION_LOCN;
          long location_zip = e1140->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1140->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1140->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1140->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1140->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1140->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1140->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1140->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1140->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1140->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1140->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1140->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1140->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1140->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1140 = e1140->__av;
          { //slice
            const HASH_RES_t h84 = CENSUS_mapkey0_idxfn::hash(se4137.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1141 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1141 = &(i1141->buckets_[h84 % i1141->size_]);
            CENSUS_entry* e1141;
            do if ((e1141 = n1141->obj) && h84 == n1141->hash && CENSUS_mapkey0_idxfn::equals(se4137, *e1141)) {
              long census_population = e1141->CENSUS_POPULATION;
              long census_white = e1141->CENSUS_WHITE;
              long census_asian = e1141->CENSUS_ASIAN;
              long census_pacific = e1141->CENSUS_PACIFIC;
              long census_blackafrican = e1141->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1141->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1141->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1141->CENSUS_HOUSEUNITS;
              long census_families = e1141->CENSUS_FAMILIES;
              long census_households = e1141->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1141->CENSUS_HUSBWIFE;
              long census_males = e1141->CENSUS_MALES;
              long census_females = e1141->CENSUS_FEMALES;
              long census_householdschildren = e1141->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1141->CENSUS_HISPANIC;
              long v1141 = e1141->__av;
              __SQL_SUM_AGGREGATE_230INVENTORY1_P_3.addOrDelOnZero(se4136.modify(inventory_locn), (v1140 * (v1141 * (location_rgn_cd * census_males))));
            } while ((n1141 = n1141->nxt));
          }
          e1140 = e1140->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_231 = 0.0;
      __SQL_SUM_AGGREGATE_231INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1142 = LOCATION.head;
        while (e1142) {
          long inventory_locn = e1142->LOCATION_LOCN;
          long location_zip = e1142->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1142->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1142->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1142->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1142->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1142->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1142->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1142->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1142->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1142->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1142->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1142->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1142->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1142->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1142 = e1142->__av;
          { //slice
            const HASH_RES_t h85 = CENSUS_mapkey0_idxfn::hash(se4140.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1143 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1143 = &(i1143->buckets_[h85 % i1143->size_]);
            CENSUS_entry* e1143;
            do if ((e1143 = n1143->obj) && h85 == n1143->hash && CENSUS_mapkey0_idxfn::equals(se4140, *e1143)) {
              long census_population = e1143->CENSUS_POPULATION;
              long census_white = e1143->CENSUS_WHITE;
              long census_asian = e1143->CENSUS_ASIAN;
              long census_pacific = e1143->CENSUS_PACIFIC;
              long census_blackafrican = e1143->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1143->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1143->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1143->CENSUS_HOUSEUNITS;
              long census_families = e1143->CENSUS_FAMILIES;
              long census_households = e1143->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1143->CENSUS_HUSBWIFE;
              long census_males = e1143->CENSUS_MALES;
              long census_females = e1143->CENSUS_FEMALES;
              long census_householdschildren = e1143->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1143->CENSUS_HISPANIC;
              long v1143 = e1143->__av;
              __SQL_SUM_AGGREGATE_231INVENTORY1_P_3.addOrDelOnZero(se4139.modify(inventory_locn), (v1142 * (v1143 * (location_rgn_cd * census_females))));
            } while ((n1143 = n1143->nxt));
          }
          e1142 = e1142->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_232 = 0.0;
      __SQL_SUM_AGGREGATE_232INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1144 = LOCATION.head;
        while (e1144) {
          long inventory_locn = e1144->LOCATION_LOCN;
          long location_zip = e1144->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1144->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1144->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1144->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1144->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1144->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1144->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1144->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1144->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1144->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1144->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1144->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1144->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1144->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1144 = e1144->__av;
          { //slice
            const HASH_RES_t h86 = CENSUS_mapkey0_idxfn::hash(se4143.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1145 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1145 = &(i1145->buckets_[h86 % i1145->size_]);
            CENSUS_entry* e1145;
            do if ((e1145 = n1145->obj) && h86 == n1145->hash && CENSUS_mapkey0_idxfn::equals(se4143, *e1145)) {
              long census_population = e1145->CENSUS_POPULATION;
              long census_white = e1145->CENSUS_WHITE;
              long census_asian = e1145->CENSUS_ASIAN;
              long census_pacific = e1145->CENSUS_PACIFIC;
              long census_blackafrican = e1145->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1145->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1145->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1145->CENSUS_HOUSEUNITS;
              long census_families = e1145->CENSUS_FAMILIES;
              long census_households = e1145->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1145->CENSUS_HUSBWIFE;
              long census_males = e1145->CENSUS_MALES;
              long census_females = e1145->CENSUS_FEMALES;
              long census_householdschildren = e1145->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1145->CENSUS_HISPANIC;
              long v1145 = e1145->__av;
              __SQL_SUM_AGGREGATE_232INVENTORY1_P_3.addOrDelOnZero(se4142.modify(inventory_locn), (v1144 * (v1145 * (location_rgn_cd * census_householdschildren))));
            } while ((n1145 = n1145->nxt));
          }
          e1144 = e1144->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_233 = 0.0;
      __SQL_SUM_AGGREGATE_233INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1146 = LOCATION.head;
        while (e1146) {
          long inventory_locn = e1146->LOCATION_LOCN;
          long location_zip = e1146->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1146->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1146->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1146->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1146->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1146->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1146->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1146->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1146->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1146->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1146->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1146->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1146->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1146->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1146 = e1146->__av;
          { //slice
            const HASH_RES_t h87 = CENSUS_mapkey0_idxfn::hash(se4146.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1147 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1147 = &(i1147->buckets_[h87 % i1147->size_]);
            CENSUS_entry* e1147;
            do if ((e1147 = n1147->obj) && h87 == n1147->hash && CENSUS_mapkey0_idxfn::equals(se4146, *e1147)) {
              long census_population = e1147->CENSUS_POPULATION;
              long census_white = e1147->CENSUS_WHITE;
              long census_asian = e1147->CENSUS_ASIAN;
              long census_pacific = e1147->CENSUS_PACIFIC;
              long census_blackafrican = e1147->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1147->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1147->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1147->CENSUS_HOUSEUNITS;
              long census_families = e1147->CENSUS_FAMILIES;
              long census_households = e1147->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1147->CENSUS_HUSBWIFE;
              long census_males = e1147->CENSUS_MALES;
              long census_females = e1147->CENSUS_FEMALES;
              long census_householdschildren = e1147->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1147->CENSUS_HISPANIC;
              long v1147 = e1147->__av;
              __SQL_SUM_AGGREGATE_233INVENTORY1_P_3.addOrDelOnZero(se4145.modify(inventory_locn), (v1146 * (v1147 * (location_rgn_cd * census_hispanic))));
            } while ((n1147 = n1147->nxt));
          }
          e1146 = e1146->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_234 = 0.0;
      __SQL_SUM_AGGREGATE_235 = 0.0;
      __SQL_SUM_AGGREGATE_236 = 0.0;
      __SQL_SUM_AGGREGATE_237 = 0.0;
      __SQL_SUM_AGGREGATE_238 = 0.0;
      __SQL_SUM_AGGREGATE_239 = 0.0;
      __SQL_SUM_AGGREGATE_240 = 0.0;
      __SQL_SUM_AGGREGATE_241 = 0.0;
      __SQL_SUM_AGGREGATE_242 = 0.0;
      __SQL_SUM_AGGREGATE_243 = 0.0;
      __SQL_SUM_AGGREGATE_244 = 0.0;
      __SQL_SUM_AGGREGATE_244INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1148 = LOCATION.head;
        while (e1148) {
          long inventory_locn = e1148->LOCATION_LOCN;
          long location_zip = e1148->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1148->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1148->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1148->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1148->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1148->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1148->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1148->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1148->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1148->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1148->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1148->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1148->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1148->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1148 = e1148->__av;
          { //slice
            const HASH_RES_t h88 = CENSUS_mapkey0_idxfn::hash(se4159.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1149 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1149 = &(i1149->buckets_[h88 % i1149->size_]);
            CENSUS_entry* e1149;
            do if ((e1149 = n1149->obj) && h88 == n1149->hash && CENSUS_mapkey0_idxfn::equals(se4159, *e1149)) {
              long census_population = e1149->CENSUS_POPULATION;
              long census_white = e1149->CENSUS_WHITE;
              long census_asian = e1149->CENSUS_ASIAN;
              long census_pacific = e1149->CENSUS_PACIFIC;
              long census_blackafrican = e1149->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1149->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1149->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1149->CENSUS_HOUSEUNITS;
              long census_families = e1149->CENSUS_FAMILIES;
              long census_households = e1149->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1149->CENSUS_HUSBWIFE;
              long census_males = e1149->CENSUS_MALES;
              long census_females = e1149->CENSUS_FEMALES;
              long census_householdschildren = e1149->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1149->CENSUS_HISPANIC;
              long v1149 = e1149->__av;
              __SQL_SUM_AGGREGATE_244INVENTORY1_P_3.addOrDelOnZero(se4158.modify(inventory_locn), (v1148 * (v1149 * (location_clim_zn_nbr * location_clim_zn_nbr))));
            } while ((n1149 = n1149->nxt));
          }
          e1148 = e1148->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_245 = 0.0;
      __SQL_SUM_AGGREGATE_245INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1150 = LOCATION.head;
        while (e1150) {
          long inventory_locn = e1150->LOCATION_LOCN;
          long location_zip = e1150->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1150->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1150->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1150->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1150->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1150->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1150->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1150->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1150->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1150->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1150->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1150->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1150->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1150->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1150 = e1150->__av;
          { //slice
            const HASH_RES_t h89 = CENSUS_mapkey0_idxfn::hash(se4162.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1151 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1151 = &(i1151->buckets_[h89 % i1151->size_]);
            CENSUS_entry* e1151;
            do if ((e1151 = n1151->obj) && h89 == n1151->hash && CENSUS_mapkey0_idxfn::equals(se4162, *e1151)) {
              long census_population = e1151->CENSUS_POPULATION;
              long census_white = e1151->CENSUS_WHITE;
              long census_asian = e1151->CENSUS_ASIAN;
              long census_pacific = e1151->CENSUS_PACIFIC;
              long census_blackafrican = e1151->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1151->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1151->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1151->CENSUS_HOUSEUNITS;
              long census_families = e1151->CENSUS_FAMILIES;
              long census_households = e1151->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1151->CENSUS_HUSBWIFE;
              long census_males = e1151->CENSUS_MALES;
              long census_females = e1151->CENSUS_FEMALES;
              long census_householdschildren = e1151->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1151->CENSUS_HISPANIC;
              long v1151 = e1151->__av;
              __SQL_SUM_AGGREGATE_245INVENTORY1_P_3.addOrDelOnZero(se4161.modify(inventory_locn), (v1150 * (v1151 * (location_clim_zn_nbr * location_tot_area_sq_ft))));
            } while ((n1151 = n1151->nxt));
          }
          e1150 = e1150->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_246 = 0.0;
      __SQL_SUM_AGGREGATE_246INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1152 = LOCATION.head;
        while (e1152) {
          long inventory_locn = e1152->LOCATION_LOCN;
          long location_zip = e1152->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1152->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1152->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1152->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1152->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1152->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1152->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1152->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1152->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1152->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1152->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1152->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1152->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1152->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1152 = e1152->__av;
          { //slice
            const HASH_RES_t h90 = CENSUS_mapkey0_idxfn::hash(se4165.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1153 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1153 = &(i1153->buckets_[h90 % i1153->size_]);
            CENSUS_entry* e1153;
            do if ((e1153 = n1153->obj) && h90 == n1153->hash && CENSUS_mapkey0_idxfn::equals(se4165, *e1153)) {
              long census_population = e1153->CENSUS_POPULATION;
              long census_white = e1153->CENSUS_WHITE;
              long census_asian = e1153->CENSUS_ASIAN;
              long census_pacific = e1153->CENSUS_PACIFIC;
              long census_blackafrican = e1153->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1153->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1153->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1153->CENSUS_HOUSEUNITS;
              long census_families = e1153->CENSUS_FAMILIES;
              long census_households = e1153->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1153->CENSUS_HUSBWIFE;
              long census_males = e1153->CENSUS_MALES;
              long census_females = e1153->CENSUS_FEMALES;
              long census_householdschildren = e1153->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1153->CENSUS_HISPANIC;
              long v1153 = e1153->__av;
              __SQL_SUM_AGGREGATE_246INVENTORY1_P_3.addOrDelOnZero(se4164.modify(inventory_locn), (v1152 * (v1153 * (location_clim_zn_nbr * location_sell_area_sq_ft))));
            } while ((n1153 = n1153->nxt));
          }
          e1152 = e1152->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_247 = 0.0;
      __SQL_SUM_AGGREGATE_247INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1154 = LOCATION.head;
        while (e1154) {
          long inventory_locn = e1154->LOCATION_LOCN;
          long location_zip = e1154->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1154->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1154->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1154->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1154->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1154->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1154->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1154->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1154->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1154->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1154->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1154->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1154->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1154->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1154 = e1154->__av;
          { //slice
            const HASH_RES_t h91 = CENSUS_mapkey0_idxfn::hash(se4168.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1155 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1155 = &(i1155->buckets_[h91 % i1155->size_]);
            CENSUS_entry* e1155;
            do if ((e1155 = n1155->obj) && h91 == n1155->hash && CENSUS_mapkey0_idxfn::equals(se4168, *e1155)) {
              long census_population = e1155->CENSUS_POPULATION;
              long census_white = e1155->CENSUS_WHITE;
              long census_asian = e1155->CENSUS_ASIAN;
              long census_pacific = e1155->CENSUS_PACIFIC;
              long census_blackafrican = e1155->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1155->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1155->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1155->CENSUS_HOUSEUNITS;
              long census_families = e1155->CENSUS_FAMILIES;
              long census_households = e1155->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1155->CENSUS_HUSBWIFE;
              long census_males = e1155->CENSUS_MALES;
              long census_females = e1155->CENSUS_FEMALES;
              long census_householdschildren = e1155->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1155->CENSUS_HISPANIC;
              long v1155 = e1155->__av;
              __SQL_SUM_AGGREGATE_247INVENTORY1_P_3.addOrDelOnZero(se4167.modify(inventory_locn), (v1154 * (v1155 * (location_clim_zn_nbr * location_avghhi))));
            } while ((n1155 = n1155->nxt));
          }
          e1154 = e1154->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_248 = 0.0;
      __SQL_SUM_AGGREGATE_248INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1156 = LOCATION.head;
        while (e1156) {
          long inventory_locn = e1156->LOCATION_LOCN;
          long location_zip = e1156->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1156->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1156->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1156->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1156->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1156->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1156->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1156->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1156->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1156->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1156->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1156->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1156->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1156->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1156 = e1156->__av;
          { //slice
            const HASH_RES_t h92 = CENSUS_mapkey0_idxfn::hash(se4171.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1157 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1157 = &(i1157->buckets_[h92 % i1157->size_]);
            CENSUS_entry* e1157;
            do if ((e1157 = n1157->obj) && h92 == n1157->hash && CENSUS_mapkey0_idxfn::equals(se4171, *e1157)) {
              long census_population = e1157->CENSUS_POPULATION;
              long census_white = e1157->CENSUS_WHITE;
              long census_asian = e1157->CENSUS_ASIAN;
              long census_pacific = e1157->CENSUS_PACIFIC;
              long census_blackafrican = e1157->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1157->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1157->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1157->CENSUS_HOUSEUNITS;
              long census_families = e1157->CENSUS_FAMILIES;
              long census_households = e1157->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1157->CENSUS_HUSBWIFE;
              long census_males = e1157->CENSUS_MALES;
              long census_females = e1157->CENSUS_FEMALES;
              long census_householdschildren = e1157->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1157->CENSUS_HISPANIC;
              long v1157 = e1157->__av;
              __SQL_SUM_AGGREGATE_248INVENTORY1_P_3.addOrDelOnZero(se4170.modify(inventory_locn), (v1156 * (v1157 * (location_clim_zn_nbr * location_supertargetdistance))));
            } while ((n1157 = n1157->nxt));
          }
          e1156 = e1156->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_249 = 0.0;
      __SQL_SUM_AGGREGATE_249INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1158 = LOCATION.head;
        while (e1158) {
          long inventory_locn = e1158->LOCATION_LOCN;
          long location_zip = e1158->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1158->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1158->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1158->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1158->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1158->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1158->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1158->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1158->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1158->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1158->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1158->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1158->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1158->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1158 = e1158->__av;
          { //slice
            const HASH_RES_t h93 = CENSUS_mapkey0_idxfn::hash(se4174.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1159 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1159 = &(i1159->buckets_[h93 % i1159->size_]);
            CENSUS_entry* e1159;
            do if ((e1159 = n1159->obj) && h93 == n1159->hash && CENSUS_mapkey0_idxfn::equals(se4174, *e1159)) {
              long census_population = e1159->CENSUS_POPULATION;
              long census_white = e1159->CENSUS_WHITE;
              long census_asian = e1159->CENSUS_ASIAN;
              long census_pacific = e1159->CENSUS_PACIFIC;
              long census_blackafrican = e1159->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1159->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1159->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1159->CENSUS_HOUSEUNITS;
              long census_families = e1159->CENSUS_FAMILIES;
              long census_households = e1159->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1159->CENSUS_HUSBWIFE;
              long census_males = e1159->CENSUS_MALES;
              long census_females = e1159->CENSUS_FEMALES;
              long census_householdschildren = e1159->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1159->CENSUS_HISPANIC;
              long v1159 = e1159->__av;
              __SQL_SUM_AGGREGATE_249INVENTORY1_P_3.addOrDelOnZero(se4173.modify(inventory_locn), (v1158 * (v1159 * (location_clim_zn_nbr * location_supertargetdrivetime))));
            } while ((n1159 = n1159->nxt));
          }
          e1158 = e1158->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_250 = 0.0;
      __SQL_SUM_AGGREGATE_250INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1160 = LOCATION.head;
        while (e1160) {
          long inventory_locn = e1160->LOCATION_LOCN;
          long location_zip = e1160->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1160->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1160->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1160->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1160->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1160->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1160->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1160->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1160->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1160->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1160->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1160->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1160->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1160->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1160 = e1160->__av;
          { //slice
            const HASH_RES_t h94 = CENSUS_mapkey0_idxfn::hash(se4177.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1161 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1161 = &(i1161->buckets_[h94 % i1161->size_]);
            CENSUS_entry* e1161;
            do if ((e1161 = n1161->obj) && h94 == n1161->hash && CENSUS_mapkey0_idxfn::equals(se4177, *e1161)) {
              long census_population = e1161->CENSUS_POPULATION;
              long census_white = e1161->CENSUS_WHITE;
              long census_asian = e1161->CENSUS_ASIAN;
              long census_pacific = e1161->CENSUS_PACIFIC;
              long census_blackafrican = e1161->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1161->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1161->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1161->CENSUS_HOUSEUNITS;
              long census_families = e1161->CENSUS_FAMILIES;
              long census_households = e1161->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1161->CENSUS_HUSBWIFE;
              long census_males = e1161->CENSUS_MALES;
              long census_females = e1161->CENSUS_FEMALES;
              long census_householdschildren = e1161->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1161->CENSUS_HISPANIC;
              long v1161 = e1161->__av;
              __SQL_SUM_AGGREGATE_250INVENTORY1_P_3.addOrDelOnZero(se4176.modify(inventory_locn), (v1160 * (v1161 * (location_clim_zn_nbr * location_targetdistance))));
            } while ((n1161 = n1161->nxt));
          }
          e1160 = e1160->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_251 = 0.0;
      __SQL_SUM_AGGREGATE_251INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1162 = LOCATION.head;
        while (e1162) {
          long inventory_locn = e1162->LOCATION_LOCN;
          long location_zip = e1162->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1162->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1162->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1162->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1162->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1162->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1162->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1162->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1162->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1162->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1162->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1162->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1162->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1162->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1162 = e1162->__av;
          { //slice
            const HASH_RES_t h95 = CENSUS_mapkey0_idxfn::hash(se4180.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1163 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1163 = &(i1163->buckets_[h95 % i1163->size_]);
            CENSUS_entry* e1163;
            do if ((e1163 = n1163->obj) && h95 == n1163->hash && CENSUS_mapkey0_idxfn::equals(se4180, *e1163)) {
              long census_population = e1163->CENSUS_POPULATION;
              long census_white = e1163->CENSUS_WHITE;
              long census_asian = e1163->CENSUS_ASIAN;
              long census_pacific = e1163->CENSUS_PACIFIC;
              long census_blackafrican = e1163->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1163->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1163->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1163->CENSUS_HOUSEUNITS;
              long census_families = e1163->CENSUS_FAMILIES;
              long census_households = e1163->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1163->CENSUS_HUSBWIFE;
              long census_males = e1163->CENSUS_MALES;
              long census_females = e1163->CENSUS_FEMALES;
              long census_householdschildren = e1163->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1163->CENSUS_HISPANIC;
              long v1163 = e1163->__av;
              __SQL_SUM_AGGREGATE_251INVENTORY1_P_3.addOrDelOnZero(se4179.modify(inventory_locn), (v1162 * (v1163 * (location_clim_zn_nbr * location_targetdrivetime))));
            } while ((n1163 = n1163->nxt));
          }
          e1162 = e1162->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_252 = 0.0;
      __SQL_SUM_AGGREGATE_252INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1164 = LOCATION.head;
        while (e1164) {
          long inventory_locn = e1164->LOCATION_LOCN;
          long location_zip = e1164->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1164->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1164->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1164->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1164->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1164->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1164->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1164->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1164->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1164->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1164->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1164->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1164->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1164->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1164 = e1164->__av;
          { //slice
            const HASH_RES_t h96 = CENSUS_mapkey0_idxfn::hash(se4183.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1165 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1165 = &(i1165->buckets_[h96 % i1165->size_]);
            CENSUS_entry* e1165;
            do if ((e1165 = n1165->obj) && h96 == n1165->hash && CENSUS_mapkey0_idxfn::equals(se4183, *e1165)) {
              long census_population = e1165->CENSUS_POPULATION;
              long census_white = e1165->CENSUS_WHITE;
              long census_asian = e1165->CENSUS_ASIAN;
              long census_pacific = e1165->CENSUS_PACIFIC;
              long census_blackafrican = e1165->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1165->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1165->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1165->CENSUS_HOUSEUNITS;
              long census_families = e1165->CENSUS_FAMILIES;
              long census_households = e1165->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1165->CENSUS_HUSBWIFE;
              long census_males = e1165->CENSUS_MALES;
              long census_females = e1165->CENSUS_FEMALES;
              long census_householdschildren = e1165->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1165->CENSUS_HISPANIC;
              long v1165 = e1165->__av;
              __SQL_SUM_AGGREGATE_252INVENTORY1_P_3.addOrDelOnZero(se4182.modify(inventory_locn), (v1164 * (v1165 * (location_clim_zn_nbr * location_walmartdistance))));
            } while ((n1165 = n1165->nxt));
          }
          e1164 = e1164->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_253 = 0.0;
      __SQL_SUM_AGGREGATE_253INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1166 = LOCATION.head;
        while (e1166) {
          long inventory_locn = e1166->LOCATION_LOCN;
          long location_zip = e1166->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1166->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1166->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1166->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1166->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1166->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1166->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1166->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1166->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1166->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1166->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1166->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1166->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1166->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1166 = e1166->__av;
          { //slice
            const HASH_RES_t h97 = CENSUS_mapkey0_idxfn::hash(se4186.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1167 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1167 = &(i1167->buckets_[h97 % i1167->size_]);
            CENSUS_entry* e1167;
            do if ((e1167 = n1167->obj) && h97 == n1167->hash && CENSUS_mapkey0_idxfn::equals(se4186, *e1167)) {
              long census_population = e1167->CENSUS_POPULATION;
              long census_white = e1167->CENSUS_WHITE;
              long census_asian = e1167->CENSUS_ASIAN;
              long census_pacific = e1167->CENSUS_PACIFIC;
              long census_blackafrican = e1167->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1167->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1167->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1167->CENSUS_HOUSEUNITS;
              long census_families = e1167->CENSUS_FAMILIES;
              long census_households = e1167->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1167->CENSUS_HUSBWIFE;
              long census_males = e1167->CENSUS_MALES;
              long census_females = e1167->CENSUS_FEMALES;
              long census_householdschildren = e1167->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1167->CENSUS_HISPANIC;
              long v1167 = e1167->__av;
              __SQL_SUM_AGGREGATE_253INVENTORY1_P_3.addOrDelOnZero(se4185.modify(inventory_locn), (v1166 * (v1167 * (location_clim_zn_nbr * location_walmartdrivetime))));
            } while ((n1167 = n1167->nxt));
          }
          e1166 = e1166->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_254 = 0.0;
      __SQL_SUM_AGGREGATE_254INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1168 = LOCATION.head;
        while (e1168) {
          long inventory_locn = e1168->LOCATION_LOCN;
          long location_zip = e1168->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1168->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1168->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1168->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1168->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1168->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1168->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1168->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1168->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1168->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1168->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1168->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1168->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1168->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1168 = e1168->__av;
          { //slice
            const HASH_RES_t h98 = CENSUS_mapkey0_idxfn::hash(se4189.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1169 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1169 = &(i1169->buckets_[h98 % i1169->size_]);
            CENSUS_entry* e1169;
            do if ((e1169 = n1169->obj) && h98 == n1169->hash && CENSUS_mapkey0_idxfn::equals(se4189, *e1169)) {
              long census_population = e1169->CENSUS_POPULATION;
              long census_white = e1169->CENSUS_WHITE;
              long census_asian = e1169->CENSUS_ASIAN;
              long census_pacific = e1169->CENSUS_PACIFIC;
              long census_blackafrican = e1169->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1169->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1169->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1169->CENSUS_HOUSEUNITS;
              long census_families = e1169->CENSUS_FAMILIES;
              long census_households = e1169->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1169->CENSUS_HUSBWIFE;
              long census_males = e1169->CENSUS_MALES;
              long census_females = e1169->CENSUS_FEMALES;
              long census_householdschildren = e1169->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1169->CENSUS_HISPANIC;
              long v1169 = e1169->__av;
              __SQL_SUM_AGGREGATE_254INVENTORY1_P_3.addOrDelOnZero(se4188.modify(inventory_locn), (v1168 * (v1169 * (location_clim_zn_nbr * location_walmartsupercenterdistance))));
            } while ((n1169 = n1169->nxt));
          }
          e1168 = e1168->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_255 = 0.0;
      __SQL_SUM_AGGREGATE_255INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1170 = LOCATION.head;
        while (e1170) {
          long inventory_locn = e1170->LOCATION_LOCN;
          long location_zip = e1170->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1170->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1170->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1170->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1170->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1170->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1170->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1170->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1170->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1170->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1170->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1170->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1170->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1170->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1170 = e1170->__av;
          { //slice
            const HASH_RES_t h99 = CENSUS_mapkey0_idxfn::hash(se4192.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1171 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1171 = &(i1171->buckets_[h99 % i1171->size_]);
            CENSUS_entry* e1171;
            do if ((e1171 = n1171->obj) && h99 == n1171->hash && CENSUS_mapkey0_idxfn::equals(se4192, *e1171)) {
              long census_population = e1171->CENSUS_POPULATION;
              long census_white = e1171->CENSUS_WHITE;
              long census_asian = e1171->CENSUS_ASIAN;
              long census_pacific = e1171->CENSUS_PACIFIC;
              long census_blackafrican = e1171->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1171->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1171->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1171->CENSUS_HOUSEUNITS;
              long census_families = e1171->CENSUS_FAMILIES;
              long census_households = e1171->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1171->CENSUS_HUSBWIFE;
              long census_males = e1171->CENSUS_MALES;
              long census_females = e1171->CENSUS_FEMALES;
              long census_householdschildren = e1171->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1171->CENSUS_HISPANIC;
              long v1171 = e1171->__av;
              __SQL_SUM_AGGREGATE_255INVENTORY1_P_3.addOrDelOnZero(se4191.modify(inventory_locn), (v1170 * (v1171 * (location_clim_zn_nbr * location_walmartsupercenterdrivetime))));
            } while ((n1171 = n1171->nxt));
          }
          e1170 = e1170->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_256 = 0.0;
      __SQL_SUM_AGGREGATE_256INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1172 = LOCATION.head;
        while (e1172) {
          long inventory_locn = e1172->LOCATION_LOCN;
          long location_zip = e1172->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1172->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1172->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1172->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1172->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1172->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1172->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1172->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1172->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1172->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1172->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1172->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1172->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1172->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1172 = e1172->__av;
          { //slice
            const HASH_RES_t h100 = CENSUS_mapkey0_idxfn::hash(se4195.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1173 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1173 = &(i1173->buckets_[h100 % i1173->size_]);
            CENSUS_entry* e1173;
            do if ((e1173 = n1173->obj) && h100 == n1173->hash && CENSUS_mapkey0_idxfn::equals(se4195, *e1173)) {
              long census_population = e1173->CENSUS_POPULATION;
              long census_white = e1173->CENSUS_WHITE;
              long census_asian = e1173->CENSUS_ASIAN;
              long census_pacific = e1173->CENSUS_PACIFIC;
              long census_blackafrican = e1173->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1173->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1173->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1173->CENSUS_HOUSEUNITS;
              long census_families = e1173->CENSUS_FAMILIES;
              long census_households = e1173->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1173->CENSUS_HUSBWIFE;
              long census_males = e1173->CENSUS_MALES;
              long census_females = e1173->CENSUS_FEMALES;
              long census_householdschildren = e1173->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1173->CENSUS_HISPANIC;
              long v1173 = e1173->__av;
              __SQL_SUM_AGGREGATE_256INVENTORY1_P_3.addOrDelOnZero(se4194.modify(inventory_locn), (v1172 * (v1173 * (location_clim_zn_nbr * census_population))));
            } while ((n1173 = n1173->nxt));
          }
          e1172 = e1172->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_257 = 0.0;
      __SQL_SUM_AGGREGATE_257INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1174 = LOCATION.head;
        while (e1174) {
          long inventory_locn = e1174->LOCATION_LOCN;
          long location_zip = e1174->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1174->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1174->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1174->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1174->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1174->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1174->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1174->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1174->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1174->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1174->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1174->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1174->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1174->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1174 = e1174->__av;
          { //slice
            const HASH_RES_t h101 = CENSUS_mapkey0_idxfn::hash(se4198.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1175 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1175 = &(i1175->buckets_[h101 % i1175->size_]);
            CENSUS_entry* e1175;
            do if ((e1175 = n1175->obj) && h101 == n1175->hash && CENSUS_mapkey0_idxfn::equals(se4198, *e1175)) {
              long census_population = e1175->CENSUS_POPULATION;
              long census_white = e1175->CENSUS_WHITE;
              long census_asian = e1175->CENSUS_ASIAN;
              long census_pacific = e1175->CENSUS_PACIFIC;
              long census_blackafrican = e1175->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1175->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1175->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1175->CENSUS_HOUSEUNITS;
              long census_families = e1175->CENSUS_FAMILIES;
              long census_households = e1175->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1175->CENSUS_HUSBWIFE;
              long census_males = e1175->CENSUS_MALES;
              long census_females = e1175->CENSUS_FEMALES;
              long census_householdschildren = e1175->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1175->CENSUS_HISPANIC;
              long v1175 = e1175->__av;
              __SQL_SUM_AGGREGATE_257INVENTORY1_P_3.addOrDelOnZero(se4197.modify(inventory_locn), (v1174 * (v1175 * (location_clim_zn_nbr * census_white))));
            } while ((n1175 = n1175->nxt));
          }
          e1174 = e1174->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_258 = 0.0;
      __SQL_SUM_AGGREGATE_258INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1176 = LOCATION.head;
        while (e1176) {
          long inventory_locn = e1176->LOCATION_LOCN;
          long location_zip = e1176->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1176->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1176->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1176->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1176->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1176->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1176->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1176->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1176->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1176->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1176->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1176->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1176->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1176->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1176 = e1176->__av;
          { //slice
            const HASH_RES_t h102 = CENSUS_mapkey0_idxfn::hash(se4201.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1177 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1177 = &(i1177->buckets_[h102 % i1177->size_]);
            CENSUS_entry* e1177;
            do if ((e1177 = n1177->obj) && h102 == n1177->hash && CENSUS_mapkey0_idxfn::equals(se4201, *e1177)) {
              long census_population = e1177->CENSUS_POPULATION;
              long census_white = e1177->CENSUS_WHITE;
              long census_asian = e1177->CENSUS_ASIAN;
              long census_pacific = e1177->CENSUS_PACIFIC;
              long census_blackafrican = e1177->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1177->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1177->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1177->CENSUS_HOUSEUNITS;
              long census_families = e1177->CENSUS_FAMILIES;
              long census_households = e1177->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1177->CENSUS_HUSBWIFE;
              long census_males = e1177->CENSUS_MALES;
              long census_females = e1177->CENSUS_FEMALES;
              long census_householdschildren = e1177->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1177->CENSUS_HISPANIC;
              long v1177 = e1177->__av;
              __SQL_SUM_AGGREGATE_258INVENTORY1_P_3.addOrDelOnZero(se4200.modify(inventory_locn), (v1176 * (v1177 * (location_clim_zn_nbr * census_asian))));
            } while ((n1177 = n1177->nxt));
          }
          e1176 = e1176->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_259 = 0.0;
      __SQL_SUM_AGGREGATE_259INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1178 = LOCATION.head;
        while (e1178) {
          long inventory_locn = e1178->LOCATION_LOCN;
          long location_zip = e1178->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1178->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1178->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1178->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1178->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1178->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1178->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1178->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1178->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1178->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1178->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1178->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1178->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1178->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1178 = e1178->__av;
          { //slice
            const HASH_RES_t h103 = CENSUS_mapkey0_idxfn::hash(se4204.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1179 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1179 = &(i1179->buckets_[h103 % i1179->size_]);
            CENSUS_entry* e1179;
            do if ((e1179 = n1179->obj) && h103 == n1179->hash && CENSUS_mapkey0_idxfn::equals(se4204, *e1179)) {
              long census_population = e1179->CENSUS_POPULATION;
              long census_white = e1179->CENSUS_WHITE;
              long census_asian = e1179->CENSUS_ASIAN;
              long census_pacific = e1179->CENSUS_PACIFIC;
              long census_blackafrican = e1179->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1179->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1179->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1179->CENSUS_HOUSEUNITS;
              long census_families = e1179->CENSUS_FAMILIES;
              long census_households = e1179->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1179->CENSUS_HUSBWIFE;
              long census_males = e1179->CENSUS_MALES;
              long census_females = e1179->CENSUS_FEMALES;
              long census_householdschildren = e1179->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1179->CENSUS_HISPANIC;
              long v1179 = e1179->__av;
              __SQL_SUM_AGGREGATE_259INVENTORY1_P_3.addOrDelOnZero(se4203.modify(inventory_locn), (v1178 * (v1179 * (location_clim_zn_nbr * census_pacific))));
            } while ((n1179 = n1179->nxt));
          }
          e1178 = e1178->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_260 = 0.0;
      __SQL_SUM_AGGREGATE_260INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1180 = LOCATION.head;
        while (e1180) {
          long inventory_locn = e1180->LOCATION_LOCN;
          long location_zip = e1180->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1180->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1180->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1180->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1180->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1180->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1180->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1180->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1180->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1180->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1180->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1180->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1180->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1180->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1180 = e1180->__av;
          { //slice
            const HASH_RES_t h104 = CENSUS_mapkey0_idxfn::hash(se4207.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1181 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1181 = &(i1181->buckets_[h104 % i1181->size_]);
            CENSUS_entry* e1181;
            do if ((e1181 = n1181->obj) && h104 == n1181->hash && CENSUS_mapkey0_idxfn::equals(se4207, *e1181)) {
              long census_population = e1181->CENSUS_POPULATION;
              long census_white = e1181->CENSUS_WHITE;
              long census_asian = e1181->CENSUS_ASIAN;
              long census_pacific = e1181->CENSUS_PACIFIC;
              long census_blackafrican = e1181->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1181->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1181->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1181->CENSUS_HOUSEUNITS;
              long census_families = e1181->CENSUS_FAMILIES;
              long census_households = e1181->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1181->CENSUS_HUSBWIFE;
              long census_males = e1181->CENSUS_MALES;
              long census_females = e1181->CENSUS_FEMALES;
              long census_householdschildren = e1181->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1181->CENSUS_HISPANIC;
              long v1181 = e1181->__av;
              __SQL_SUM_AGGREGATE_260INVENTORY1_P_3.addOrDelOnZero(se4206.modify(inventory_locn), (v1180 * (v1181 * (location_clim_zn_nbr * census_blackafrican))));
            } while ((n1181 = n1181->nxt));
          }
          e1180 = e1180->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_261 = 0.0;
      __SQL_SUM_AGGREGATE_261INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1182 = LOCATION.head;
        while (e1182) {
          long inventory_locn = e1182->LOCATION_LOCN;
          long location_zip = e1182->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1182->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1182->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1182->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1182->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1182->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1182->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1182->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1182->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1182->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1182->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1182->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1182->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1182->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1182 = e1182->__av;
          { //slice
            const HASH_RES_t h105 = CENSUS_mapkey0_idxfn::hash(se4210.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1183 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1183 = &(i1183->buckets_[h105 % i1183->size_]);
            CENSUS_entry* e1183;
            do if ((e1183 = n1183->obj) && h105 == n1183->hash && CENSUS_mapkey0_idxfn::equals(se4210, *e1183)) {
              long census_population = e1183->CENSUS_POPULATION;
              long census_white = e1183->CENSUS_WHITE;
              long census_asian = e1183->CENSUS_ASIAN;
              long census_pacific = e1183->CENSUS_PACIFIC;
              long census_blackafrican = e1183->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1183->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1183->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1183->CENSUS_HOUSEUNITS;
              long census_families = e1183->CENSUS_FAMILIES;
              long census_households = e1183->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1183->CENSUS_HUSBWIFE;
              long census_males = e1183->CENSUS_MALES;
              long census_females = e1183->CENSUS_FEMALES;
              long census_householdschildren = e1183->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1183->CENSUS_HISPANIC;
              long v1183 = e1183->__av;
              __SQL_SUM_AGGREGATE_261INVENTORY1_P_3.addOrDelOnZero(se4209.modify(inventory_locn), (v1182 * (v1183 * (location_clim_zn_nbr * census_medianage))));
            } while ((n1183 = n1183->nxt));
          }
          e1182 = e1182->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_262 = 0.0;
      __SQL_SUM_AGGREGATE_262INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1184 = LOCATION.head;
        while (e1184) {
          long inventory_locn = e1184->LOCATION_LOCN;
          long location_zip = e1184->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1184->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1184->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1184->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1184->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1184->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1184->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1184->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1184->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1184->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1184->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1184->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1184->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1184->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1184 = e1184->__av;
          { //slice
            const HASH_RES_t h106 = CENSUS_mapkey0_idxfn::hash(se4213.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1185 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1185 = &(i1185->buckets_[h106 % i1185->size_]);
            CENSUS_entry* e1185;
            do if ((e1185 = n1185->obj) && h106 == n1185->hash && CENSUS_mapkey0_idxfn::equals(se4213, *e1185)) {
              long census_population = e1185->CENSUS_POPULATION;
              long census_white = e1185->CENSUS_WHITE;
              long census_asian = e1185->CENSUS_ASIAN;
              long census_pacific = e1185->CENSUS_PACIFIC;
              long census_blackafrican = e1185->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1185->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1185->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1185->CENSUS_HOUSEUNITS;
              long census_families = e1185->CENSUS_FAMILIES;
              long census_households = e1185->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1185->CENSUS_HUSBWIFE;
              long census_males = e1185->CENSUS_MALES;
              long census_females = e1185->CENSUS_FEMALES;
              long census_householdschildren = e1185->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1185->CENSUS_HISPANIC;
              long v1185 = e1185->__av;
              __SQL_SUM_AGGREGATE_262INVENTORY1_P_3.addOrDelOnZero(se4212.modify(inventory_locn), (v1184 * (v1185 * (location_clim_zn_nbr * census_occupiedhouseunits))));
            } while ((n1185 = n1185->nxt));
          }
          e1184 = e1184->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_263 = 0.0;
      __SQL_SUM_AGGREGATE_263INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1186 = LOCATION.head;
        while (e1186) {
          long inventory_locn = e1186->LOCATION_LOCN;
          long location_zip = e1186->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1186->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1186->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1186->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1186->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1186->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1186->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1186->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1186->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1186->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1186->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1186->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1186->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1186->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1186 = e1186->__av;
          { //slice
            const HASH_RES_t h107 = CENSUS_mapkey0_idxfn::hash(se4216.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1187 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1187 = &(i1187->buckets_[h107 % i1187->size_]);
            CENSUS_entry* e1187;
            do if ((e1187 = n1187->obj) && h107 == n1187->hash && CENSUS_mapkey0_idxfn::equals(se4216, *e1187)) {
              long census_population = e1187->CENSUS_POPULATION;
              long census_white = e1187->CENSUS_WHITE;
              long census_asian = e1187->CENSUS_ASIAN;
              long census_pacific = e1187->CENSUS_PACIFIC;
              long census_blackafrican = e1187->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1187->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1187->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1187->CENSUS_HOUSEUNITS;
              long census_families = e1187->CENSUS_FAMILIES;
              long census_households = e1187->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1187->CENSUS_HUSBWIFE;
              long census_males = e1187->CENSUS_MALES;
              long census_females = e1187->CENSUS_FEMALES;
              long census_householdschildren = e1187->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1187->CENSUS_HISPANIC;
              long v1187 = e1187->__av;
              __SQL_SUM_AGGREGATE_263INVENTORY1_P_3.addOrDelOnZero(se4215.modify(inventory_locn), (v1186 * (v1187 * (location_clim_zn_nbr * census_houseunits))));
            } while ((n1187 = n1187->nxt));
          }
          e1186 = e1186->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_264 = 0.0;
      __SQL_SUM_AGGREGATE_264INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1188 = LOCATION.head;
        while (e1188) {
          long inventory_locn = e1188->LOCATION_LOCN;
          long location_zip = e1188->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1188->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1188->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1188->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1188->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1188->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1188->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1188->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1188->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1188->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1188->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1188->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1188->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1188->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1188 = e1188->__av;
          { //slice
            const HASH_RES_t h108 = CENSUS_mapkey0_idxfn::hash(se4219.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1189 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1189 = &(i1189->buckets_[h108 % i1189->size_]);
            CENSUS_entry* e1189;
            do if ((e1189 = n1189->obj) && h108 == n1189->hash && CENSUS_mapkey0_idxfn::equals(se4219, *e1189)) {
              long census_population = e1189->CENSUS_POPULATION;
              long census_white = e1189->CENSUS_WHITE;
              long census_asian = e1189->CENSUS_ASIAN;
              long census_pacific = e1189->CENSUS_PACIFIC;
              long census_blackafrican = e1189->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1189->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1189->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1189->CENSUS_HOUSEUNITS;
              long census_families = e1189->CENSUS_FAMILIES;
              long census_households = e1189->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1189->CENSUS_HUSBWIFE;
              long census_males = e1189->CENSUS_MALES;
              long census_females = e1189->CENSUS_FEMALES;
              long census_householdschildren = e1189->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1189->CENSUS_HISPANIC;
              long v1189 = e1189->__av;
              __SQL_SUM_AGGREGATE_264INVENTORY1_P_3.addOrDelOnZero(se4218.modify(inventory_locn), (v1188 * (v1189 * (location_clim_zn_nbr * census_families))));
            } while ((n1189 = n1189->nxt));
          }
          e1188 = e1188->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_265 = 0.0;
      __SQL_SUM_AGGREGATE_265INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1190 = LOCATION.head;
        while (e1190) {
          long inventory_locn = e1190->LOCATION_LOCN;
          long location_zip = e1190->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1190->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1190->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1190->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1190->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1190->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1190->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1190->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1190->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1190->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1190->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1190->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1190->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1190->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1190 = e1190->__av;
          { //slice
            const HASH_RES_t h109 = CENSUS_mapkey0_idxfn::hash(se4222.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1191 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1191 = &(i1191->buckets_[h109 % i1191->size_]);
            CENSUS_entry* e1191;
            do if ((e1191 = n1191->obj) && h109 == n1191->hash && CENSUS_mapkey0_idxfn::equals(se4222, *e1191)) {
              long census_population = e1191->CENSUS_POPULATION;
              long census_white = e1191->CENSUS_WHITE;
              long census_asian = e1191->CENSUS_ASIAN;
              long census_pacific = e1191->CENSUS_PACIFIC;
              long census_blackafrican = e1191->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1191->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1191->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1191->CENSUS_HOUSEUNITS;
              long census_families = e1191->CENSUS_FAMILIES;
              long census_households = e1191->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1191->CENSUS_HUSBWIFE;
              long census_males = e1191->CENSUS_MALES;
              long census_females = e1191->CENSUS_FEMALES;
              long census_householdschildren = e1191->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1191->CENSUS_HISPANIC;
              long v1191 = e1191->__av;
              __SQL_SUM_AGGREGATE_265INVENTORY1_P_3.addOrDelOnZero(se4221.modify(inventory_locn), (v1190 * (v1191 * (location_clim_zn_nbr * census_households))));
            } while ((n1191 = n1191->nxt));
          }
          e1190 = e1190->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_266 = 0.0;
      __SQL_SUM_AGGREGATE_266INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1192 = LOCATION.head;
        while (e1192) {
          long inventory_locn = e1192->LOCATION_LOCN;
          long location_zip = e1192->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1192->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1192->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1192->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1192->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1192->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1192->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1192->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1192->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1192->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1192->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1192->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1192->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1192->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1192 = e1192->__av;
          { //slice
            const HASH_RES_t h110 = CENSUS_mapkey0_idxfn::hash(se4225.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1193 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1193 = &(i1193->buckets_[h110 % i1193->size_]);
            CENSUS_entry* e1193;
            do if ((e1193 = n1193->obj) && h110 == n1193->hash && CENSUS_mapkey0_idxfn::equals(se4225, *e1193)) {
              long census_population = e1193->CENSUS_POPULATION;
              long census_white = e1193->CENSUS_WHITE;
              long census_asian = e1193->CENSUS_ASIAN;
              long census_pacific = e1193->CENSUS_PACIFIC;
              long census_blackafrican = e1193->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1193->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1193->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1193->CENSUS_HOUSEUNITS;
              long census_families = e1193->CENSUS_FAMILIES;
              long census_households = e1193->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1193->CENSUS_HUSBWIFE;
              long census_males = e1193->CENSUS_MALES;
              long census_females = e1193->CENSUS_FEMALES;
              long census_householdschildren = e1193->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1193->CENSUS_HISPANIC;
              long v1193 = e1193->__av;
              __SQL_SUM_AGGREGATE_266INVENTORY1_P_3.addOrDelOnZero(se4224.modify(inventory_locn), (v1192 * (v1193 * (location_clim_zn_nbr * census_husbwife))));
            } while ((n1193 = n1193->nxt));
          }
          e1192 = e1192->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_267 = 0.0;
      __SQL_SUM_AGGREGATE_267INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1194 = LOCATION.head;
        while (e1194) {
          long inventory_locn = e1194->LOCATION_LOCN;
          long location_zip = e1194->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1194->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1194->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1194->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1194->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1194->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1194->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1194->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1194->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1194->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1194->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1194->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1194->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1194->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1194 = e1194->__av;
          { //slice
            const HASH_RES_t h111 = CENSUS_mapkey0_idxfn::hash(se4228.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1195 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1195 = &(i1195->buckets_[h111 % i1195->size_]);
            CENSUS_entry* e1195;
            do if ((e1195 = n1195->obj) && h111 == n1195->hash && CENSUS_mapkey0_idxfn::equals(se4228, *e1195)) {
              long census_population = e1195->CENSUS_POPULATION;
              long census_white = e1195->CENSUS_WHITE;
              long census_asian = e1195->CENSUS_ASIAN;
              long census_pacific = e1195->CENSUS_PACIFIC;
              long census_blackafrican = e1195->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1195->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1195->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1195->CENSUS_HOUSEUNITS;
              long census_families = e1195->CENSUS_FAMILIES;
              long census_households = e1195->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1195->CENSUS_HUSBWIFE;
              long census_males = e1195->CENSUS_MALES;
              long census_females = e1195->CENSUS_FEMALES;
              long census_householdschildren = e1195->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1195->CENSUS_HISPANIC;
              long v1195 = e1195->__av;
              __SQL_SUM_AGGREGATE_267INVENTORY1_P_3.addOrDelOnZero(se4227.modify(inventory_locn), (v1194 * (v1195 * (location_clim_zn_nbr * census_males))));
            } while ((n1195 = n1195->nxt));
          }
          e1194 = e1194->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_268 = 0.0;
      __SQL_SUM_AGGREGATE_268INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1196 = LOCATION.head;
        while (e1196) {
          long inventory_locn = e1196->LOCATION_LOCN;
          long location_zip = e1196->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1196->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1196->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1196->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1196->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1196->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1196->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1196->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1196->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1196->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1196->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1196->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1196->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1196->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1196 = e1196->__av;
          { //slice
            const HASH_RES_t h112 = CENSUS_mapkey0_idxfn::hash(se4231.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1197 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1197 = &(i1197->buckets_[h112 % i1197->size_]);
            CENSUS_entry* e1197;
            do if ((e1197 = n1197->obj) && h112 == n1197->hash && CENSUS_mapkey0_idxfn::equals(se4231, *e1197)) {
              long census_population = e1197->CENSUS_POPULATION;
              long census_white = e1197->CENSUS_WHITE;
              long census_asian = e1197->CENSUS_ASIAN;
              long census_pacific = e1197->CENSUS_PACIFIC;
              long census_blackafrican = e1197->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1197->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1197->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1197->CENSUS_HOUSEUNITS;
              long census_families = e1197->CENSUS_FAMILIES;
              long census_households = e1197->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1197->CENSUS_HUSBWIFE;
              long census_males = e1197->CENSUS_MALES;
              long census_females = e1197->CENSUS_FEMALES;
              long census_householdschildren = e1197->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1197->CENSUS_HISPANIC;
              long v1197 = e1197->__av;
              __SQL_SUM_AGGREGATE_268INVENTORY1_P_3.addOrDelOnZero(se4230.modify(inventory_locn), (v1196 * (v1197 * (location_clim_zn_nbr * census_females))));
            } while ((n1197 = n1197->nxt));
          }
          e1196 = e1196->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_269 = 0.0;
      __SQL_SUM_AGGREGATE_269INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1198 = LOCATION.head;
        while (e1198) {
          long inventory_locn = e1198->LOCATION_LOCN;
          long location_zip = e1198->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1198->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1198->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1198->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1198->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1198->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1198->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1198->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1198->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1198->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1198->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1198->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1198->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1198->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1198 = e1198->__av;
          { //slice
            const HASH_RES_t h113 = CENSUS_mapkey0_idxfn::hash(se4234.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1199 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1199 = &(i1199->buckets_[h113 % i1199->size_]);
            CENSUS_entry* e1199;
            do if ((e1199 = n1199->obj) && h113 == n1199->hash && CENSUS_mapkey0_idxfn::equals(se4234, *e1199)) {
              long census_population = e1199->CENSUS_POPULATION;
              long census_white = e1199->CENSUS_WHITE;
              long census_asian = e1199->CENSUS_ASIAN;
              long census_pacific = e1199->CENSUS_PACIFIC;
              long census_blackafrican = e1199->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1199->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1199->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1199->CENSUS_HOUSEUNITS;
              long census_families = e1199->CENSUS_FAMILIES;
              long census_households = e1199->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1199->CENSUS_HUSBWIFE;
              long census_males = e1199->CENSUS_MALES;
              long census_females = e1199->CENSUS_FEMALES;
              long census_householdschildren = e1199->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1199->CENSUS_HISPANIC;
              long v1199 = e1199->__av;
              __SQL_SUM_AGGREGATE_269INVENTORY1_P_3.addOrDelOnZero(se4233.modify(inventory_locn), (v1198 * (v1199 * (location_clim_zn_nbr * census_householdschildren))));
            } while ((n1199 = n1199->nxt));
          }
          e1198 = e1198->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_270 = 0.0;
      __SQL_SUM_AGGREGATE_270INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1200 = LOCATION.head;
        while (e1200) {
          long inventory_locn = e1200->LOCATION_LOCN;
          long location_zip = e1200->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1200->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1200->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1200->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1200->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1200->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1200->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1200->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1200->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1200->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1200->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1200->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1200->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1200->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1200 = e1200->__av;
          { //slice
            const HASH_RES_t h114 = CENSUS_mapkey0_idxfn::hash(se4237.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1201 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1201 = &(i1201->buckets_[h114 % i1201->size_]);
            CENSUS_entry* e1201;
            do if ((e1201 = n1201->obj) && h114 == n1201->hash && CENSUS_mapkey0_idxfn::equals(se4237, *e1201)) {
              long census_population = e1201->CENSUS_POPULATION;
              long census_white = e1201->CENSUS_WHITE;
              long census_asian = e1201->CENSUS_ASIAN;
              long census_pacific = e1201->CENSUS_PACIFIC;
              long census_blackafrican = e1201->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1201->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1201->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1201->CENSUS_HOUSEUNITS;
              long census_families = e1201->CENSUS_FAMILIES;
              long census_households = e1201->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1201->CENSUS_HUSBWIFE;
              long census_males = e1201->CENSUS_MALES;
              long census_females = e1201->CENSUS_FEMALES;
              long census_householdschildren = e1201->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1201->CENSUS_HISPANIC;
              long v1201 = e1201->__av;
              __SQL_SUM_AGGREGATE_270INVENTORY1_P_3.addOrDelOnZero(se4236.modify(inventory_locn), (v1200 * (v1201 * (location_clim_zn_nbr * census_hispanic))));
            } while ((n1201 = n1201->nxt));
          }
          e1200 = e1200->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_271 = 0.0;
      __SQL_SUM_AGGREGATE_272 = 0.0;
      __SQL_SUM_AGGREGATE_273 = 0.0;
      __SQL_SUM_AGGREGATE_274 = 0.0;
      __SQL_SUM_AGGREGATE_275 = 0.0;
      __SQL_SUM_AGGREGATE_276 = 0.0;
      __SQL_SUM_AGGREGATE_277 = 0.0;
      __SQL_SUM_AGGREGATE_278 = 0.0;
      __SQL_SUM_AGGREGATE_279 = 0.0;
      __SQL_SUM_AGGREGATE_280 = 0.0;
      __SQL_SUM_AGGREGATE_281 = 0.0;
      __SQL_SUM_AGGREGATE_281INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1202 = LOCATION.head;
        while (e1202) {
          long inventory_locn = e1202->LOCATION_LOCN;
          long location_zip = e1202->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1202->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1202->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1202->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1202->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1202->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1202->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1202->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1202->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1202->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1202->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1202->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1202->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1202->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1202 = e1202->__av;
          { //slice
            const HASH_RES_t h115 = CENSUS_mapkey0_idxfn::hash(se4250.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1203 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1203 = &(i1203->buckets_[h115 % i1203->size_]);
            CENSUS_entry* e1203;
            do if ((e1203 = n1203->obj) && h115 == n1203->hash && CENSUS_mapkey0_idxfn::equals(se4250, *e1203)) {
              long census_population = e1203->CENSUS_POPULATION;
              long census_white = e1203->CENSUS_WHITE;
              long census_asian = e1203->CENSUS_ASIAN;
              long census_pacific = e1203->CENSUS_PACIFIC;
              long census_blackafrican = e1203->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1203->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1203->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1203->CENSUS_HOUSEUNITS;
              long census_families = e1203->CENSUS_FAMILIES;
              long census_households = e1203->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1203->CENSUS_HUSBWIFE;
              long census_males = e1203->CENSUS_MALES;
              long census_females = e1203->CENSUS_FEMALES;
              long census_householdschildren = e1203->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1203->CENSUS_HISPANIC;
              long v1203 = e1203->__av;
              __SQL_SUM_AGGREGATE_281INVENTORY1_P_3.addOrDelOnZero(se4249.modify(inventory_locn), (v1202 * (v1203 * (location_tot_area_sq_ft * location_tot_area_sq_ft))));
            } while ((n1203 = n1203->nxt));
          }
          e1202 = e1202->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_282 = 0.0;
      __SQL_SUM_AGGREGATE_282INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1204 = LOCATION.head;
        while (e1204) {
          long inventory_locn = e1204->LOCATION_LOCN;
          long location_zip = e1204->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1204->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1204->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1204->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1204->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1204->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1204->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1204->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1204->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1204->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1204->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1204->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1204->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1204->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1204 = e1204->__av;
          { //slice
            const HASH_RES_t h116 = CENSUS_mapkey0_idxfn::hash(se4253.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1205 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1205 = &(i1205->buckets_[h116 % i1205->size_]);
            CENSUS_entry* e1205;
            do if ((e1205 = n1205->obj) && h116 == n1205->hash && CENSUS_mapkey0_idxfn::equals(se4253, *e1205)) {
              long census_population = e1205->CENSUS_POPULATION;
              long census_white = e1205->CENSUS_WHITE;
              long census_asian = e1205->CENSUS_ASIAN;
              long census_pacific = e1205->CENSUS_PACIFIC;
              long census_blackafrican = e1205->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1205->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1205->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1205->CENSUS_HOUSEUNITS;
              long census_families = e1205->CENSUS_FAMILIES;
              long census_households = e1205->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1205->CENSUS_HUSBWIFE;
              long census_males = e1205->CENSUS_MALES;
              long census_females = e1205->CENSUS_FEMALES;
              long census_householdschildren = e1205->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1205->CENSUS_HISPANIC;
              long v1205 = e1205->__av;
              __SQL_SUM_AGGREGATE_282INVENTORY1_P_3.addOrDelOnZero(se4252.modify(inventory_locn), (v1204 * (v1205 * (location_tot_area_sq_ft * location_sell_area_sq_ft))));
            } while ((n1205 = n1205->nxt));
          }
          e1204 = e1204->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_283 = 0.0;
      __SQL_SUM_AGGREGATE_283INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1206 = LOCATION.head;
        while (e1206) {
          long inventory_locn = e1206->LOCATION_LOCN;
          long location_zip = e1206->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1206->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1206->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1206->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1206->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1206->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1206->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1206->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1206->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1206->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1206->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1206->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1206->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1206->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1206 = e1206->__av;
          { //slice
            const HASH_RES_t h117 = CENSUS_mapkey0_idxfn::hash(se4256.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1207 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1207 = &(i1207->buckets_[h117 % i1207->size_]);
            CENSUS_entry* e1207;
            do if ((e1207 = n1207->obj) && h117 == n1207->hash && CENSUS_mapkey0_idxfn::equals(se4256, *e1207)) {
              long census_population = e1207->CENSUS_POPULATION;
              long census_white = e1207->CENSUS_WHITE;
              long census_asian = e1207->CENSUS_ASIAN;
              long census_pacific = e1207->CENSUS_PACIFIC;
              long census_blackafrican = e1207->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1207->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1207->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1207->CENSUS_HOUSEUNITS;
              long census_families = e1207->CENSUS_FAMILIES;
              long census_households = e1207->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1207->CENSUS_HUSBWIFE;
              long census_males = e1207->CENSUS_MALES;
              long census_females = e1207->CENSUS_FEMALES;
              long census_householdschildren = e1207->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1207->CENSUS_HISPANIC;
              long v1207 = e1207->__av;
              __SQL_SUM_AGGREGATE_283INVENTORY1_P_3.addOrDelOnZero(se4255.modify(inventory_locn), (v1206 * (v1207 * (location_tot_area_sq_ft * location_avghhi))));
            } while ((n1207 = n1207->nxt));
          }
          e1206 = e1206->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_284 = 0.0;
      __SQL_SUM_AGGREGATE_284INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1208 = LOCATION.head;
        while (e1208) {
          long inventory_locn = e1208->LOCATION_LOCN;
          long location_zip = e1208->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1208->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1208->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1208->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1208->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1208->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1208->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1208->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1208->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1208->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1208->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1208->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1208->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1208->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1208 = e1208->__av;
          { //slice
            const HASH_RES_t h118 = CENSUS_mapkey0_idxfn::hash(se4259.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1209 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1209 = &(i1209->buckets_[h118 % i1209->size_]);
            CENSUS_entry* e1209;
            do if ((e1209 = n1209->obj) && h118 == n1209->hash && CENSUS_mapkey0_idxfn::equals(se4259, *e1209)) {
              long census_population = e1209->CENSUS_POPULATION;
              long census_white = e1209->CENSUS_WHITE;
              long census_asian = e1209->CENSUS_ASIAN;
              long census_pacific = e1209->CENSUS_PACIFIC;
              long census_blackafrican = e1209->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1209->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1209->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1209->CENSUS_HOUSEUNITS;
              long census_families = e1209->CENSUS_FAMILIES;
              long census_households = e1209->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1209->CENSUS_HUSBWIFE;
              long census_males = e1209->CENSUS_MALES;
              long census_females = e1209->CENSUS_FEMALES;
              long census_householdschildren = e1209->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1209->CENSUS_HISPANIC;
              long v1209 = e1209->__av;
              __SQL_SUM_AGGREGATE_284INVENTORY1_P_3.addOrDelOnZero(se4258.modify(inventory_locn), (v1208 * (v1209 * (location_tot_area_sq_ft * location_supertargetdistance))));
            } while ((n1209 = n1209->nxt));
          }
          e1208 = e1208->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_285 = 0.0;
      __SQL_SUM_AGGREGATE_285INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1210 = LOCATION.head;
        while (e1210) {
          long inventory_locn = e1210->LOCATION_LOCN;
          long location_zip = e1210->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1210->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1210->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1210->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1210->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1210->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1210->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1210->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1210->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1210->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1210->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1210->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1210->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1210->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1210 = e1210->__av;
          { //slice
            const HASH_RES_t h119 = CENSUS_mapkey0_idxfn::hash(se4262.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1211 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1211 = &(i1211->buckets_[h119 % i1211->size_]);
            CENSUS_entry* e1211;
            do if ((e1211 = n1211->obj) && h119 == n1211->hash && CENSUS_mapkey0_idxfn::equals(se4262, *e1211)) {
              long census_population = e1211->CENSUS_POPULATION;
              long census_white = e1211->CENSUS_WHITE;
              long census_asian = e1211->CENSUS_ASIAN;
              long census_pacific = e1211->CENSUS_PACIFIC;
              long census_blackafrican = e1211->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1211->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1211->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1211->CENSUS_HOUSEUNITS;
              long census_families = e1211->CENSUS_FAMILIES;
              long census_households = e1211->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1211->CENSUS_HUSBWIFE;
              long census_males = e1211->CENSUS_MALES;
              long census_females = e1211->CENSUS_FEMALES;
              long census_householdschildren = e1211->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1211->CENSUS_HISPANIC;
              long v1211 = e1211->__av;
              __SQL_SUM_AGGREGATE_285INVENTORY1_P_3.addOrDelOnZero(se4261.modify(inventory_locn), (v1210 * (v1211 * (location_tot_area_sq_ft * location_supertargetdrivetime))));
            } while ((n1211 = n1211->nxt));
          }
          e1210 = e1210->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_286 = 0.0;
      __SQL_SUM_AGGREGATE_286INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1212 = LOCATION.head;
        while (e1212) {
          long inventory_locn = e1212->LOCATION_LOCN;
          long location_zip = e1212->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1212->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1212->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1212->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1212->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1212->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1212->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1212->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1212->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1212->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1212->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1212->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1212->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1212->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1212 = e1212->__av;
          { //slice
            const HASH_RES_t h120 = CENSUS_mapkey0_idxfn::hash(se4265.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1213 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1213 = &(i1213->buckets_[h120 % i1213->size_]);
            CENSUS_entry* e1213;
            do if ((e1213 = n1213->obj) && h120 == n1213->hash && CENSUS_mapkey0_idxfn::equals(se4265, *e1213)) {
              long census_population = e1213->CENSUS_POPULATION;
              long census_white = e1213->CENSUS_WHITE;
              long census_asian = e1213->CENSUS_ASIAN;
              long census_pacific = e1213->CENSUS_PACIFIC;
              long census_blackafrican = e1213->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1213->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1213->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1213->CENSUS_HOUSEUNITS;
              long census_families = e1213->CENSUS_FAMILIES;
              long census_households = e1213->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1213->CENSUS_HUSBWIFE;
              long census_males = e1213->CENSUS_MALES;
              long census_females = e1213->CENSUS_FEMALES;
              long census_householdschildren = e1213->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1213->CENSUS_HISPANIC;
              long v1213 = e1213->__av;
              __SQL_SUM_AGGREGATE_286INVENTORY1_P_3.addOrDelOnZero(se4264.modify(inventory_locn), (v1212 * (v1213 * (location_tot_area_sq_ft * location_targetdistance))));
            } while ((n1213 = n1213->nxt));
          }
          e1212 = e1212->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_287 = 0.0;
      __SQL_SUM_AGGREGATE_287INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1214 = LOCATION.head;
        while (e1214) {
          long inventory_locn = e1214->LOCATION_LOCN;
          long location_zip = e1214->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1214->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1214->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1214->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1214->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1214->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1214->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1214->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1214->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1214->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1214->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1214->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1214->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1214->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1214 = e1214->__av;
          { //slice
            const HASH_RES_t h121 = CENSUS_mapkey0_idxfn::hash(se4268.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1215 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1215 = &(i1215->buckets_[h121 % i1215->size_]);
            CENSUS_entry* e1215;
            do if ((e1215 = n1215->obj) && h121 == n1215->hash && CENSUS_mapkey0_idxfn::equals(se4268, *e1215)) {
              long census_population = e1215->CENSUS_POPULATION;
              long census_white = e1215->CENSUS_WHITE;
              long census_asian = e1215->CENSUS_ASIAN;
              long census_pacific = e1215->CENSUS_PACIFIC;
              long census_blackafrican = e1215->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1215->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1215->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1215->CENSUS_HOUSEUNITS;
              long census_families = e1215->CENSUS_FAMILIES;
              long census_households = e1215->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1215->CENSUS_HUSBWIFE;
              long census_males = e1215->CENSUS_MALES;
              long census_females = e1215->CENSUS_FEMALES;
              long census_householdschildren = e1215->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1215->CENSUS_HISPANIC;
              long v1215 = e1215->__av;
              __SQL_SUM_AGGREGATE_287INVENTORY1_P_3.addOrDelOnZero(se4267.modify(inventory_locn), (v1214 * (v1215 * (location_tot_area_sq_ft * location_targetdrivetime))));
            } while ((n1215 = n1215->nxt));
          }
          e1214 = e1214->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_288 = 0.0;
      __SQL_SUM_AGGREGATE_288INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1216 = LOCATION.head;
        while (e1216) {
          long inventory_locn = e1216->LOCATION_LOCN;
          long location_zip = e1216->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1216->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1216->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1216->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1216->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1216->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1216->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1216->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1216->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1216->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1216->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1216->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1216->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1216->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1216 = e1216->__av;
          { //slice
            const HASH_RES_t h122 = CENSUS_mapkey0_idxfn::hash(se4271.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1217 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1217 = &(i1217->buckets_[h122 % i1217->size_]);
            CENSUS_entry* e1217;
            do if ((e1217 = n1217->obj) && h122 == n1217->hash && CENSUS_mapkey0_idxfn::equals(se4271, *e1217)) {
              long census_population = e1217->CENSUS_POPULATION;
              long census_white = e1217->CENSUS_WHITE;
              long census_asian = e1217->CENSUS_ASIAN;
              long census_pacific = e1217->CENSUS_PACIFIC;
              long census_blackafrican = e1217->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1217->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1217->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1217->CENSUS_HOUSEUNITS;
              long census_families = e1217->CENSUS_FAMILIES;
              long census_households = e1217->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1217->CENSUS_HUSBWIFE;
              long census_males = e1217->CENSUS_MALES;
              long census_females = e1217->CENSUS_FEMALES;
              long census_householdschildren = e1217->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1217->CENSUS_HISPANIC;
              long v1217 = e1217->__av;
              __SQL_SUM_AGGREGATE_288INVENTORY1_P_3.addOrDelOnZero(se4270.modify(inventory_locn), (v1216 * (v1217 * (location_tot_area_sq_ft * location_walmartdistance))));
            } while ((n1217 = n1217->nxt));
          }
          e1216 = e1216->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_289 = 0.0;
      __SQL_SUM_AGGREGATE_289INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1218 = LOCATION.head;
        while (e1218) {
          long inventory_locn = e1218->LOCATION_LOCN;
          long location_zip = e1218->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1218->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1218->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1218->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1218->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1218->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1218->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1218->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1218->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1218->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1218->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1218->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1218->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1218->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1218 = e1218->__av;
          { //slice
            const HASH_RES_t h123 = CENSUS_mapkey0_idxfn::hash(se4274.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1219 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1219 = &(i1219->buckets_[h123 % i1219->size_]);
            CENSUS_entry* e1219;
            do if ((e1219 = n1219->obj) && h123 == n1219->hash && CENSUS_mapkey0_idxfn::equals(se4274, *e1219)) {
              long census_population = e1219->CENSUS_POPULATION;
              long census_white = e1219->CENSUS_WHITE;
              long census_asian = e1219->CENSUS_ASIAN;
              long census_pacific = e1219->CENSUS_PACIFIC;
              long census_blackafrican = e1219->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1219->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1219->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1219->CENSUS_HOUSEUNITS;
              long census_families = e1219->CENSUS_FAMILIES;
              long census_households = e1219->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1219->CENSUS_HUSBWIFE;
              long census_males = e1219->CENSUS_MALES;
              long census_females = e1219->CENSUS_FEMALES;
              long census_householdschildren = e1219->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1219->CENSUS_HISPANIC;
              long v1219 = e1219->__av;
              __SQL_SUM_AGGREGATE_289INVENTORY1_P_3.addOrDelOnZero(se4273.modify(inventory_locn), (v1218 * (v1219 * (location_tot_area_sq_ft * location_walmartdrivetime))));
            } while ((n1219 = n1219->nxt));
          }
          e1218 = e1218->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_290 = 0.0;
      __SQL_SUM_AGGREGATE_290INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1220 = LOCATION.head;
        while (e1220) {
          long inventory_locn = e1220->LOCATION_LOCN;
          long location_zip = e1220->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1220->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1220->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1220->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1220->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1220->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1220->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1220->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1220->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1220->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1220->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1220->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1220->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1220->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1220 = e1220->__av;
          { //slice
            const HASH_RES_t h124 = CENSUS_mapkey0_idxfn::hash(se4277.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1221 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1221 = &(i1221->buckets_[h124 % i1221->size_]);
            CENSUS_entry* e1221;
            do if ((e1221 = n1221->obj) && h124 == n1221->hash && CENSUS_mapkey0_idxfn::equals(se4277, *e1221)) {
              long census_population = e1221->CENSUS_POPULATION;
              long census_white = e1221->CENSUS_WHITE;
              long census_asian = e1221->CENSUS_ASIAN;
              long census_pacific = e1221->CENSUS_PACIFIC;
              long census_blackafrican = e1221->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1221->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1221->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1221->CENSUS_HOUSEUNITS;
              long census_families = e1221->CENSUS_FAMILIES;
              long census_households = e1221->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1221->CENSUS_HUSBWIFE;
              long census_males = e1221->CENSUS_MALES;
              long census_females = e1221->CENSUS_FEMALES;
              long census_householdschildren = e1221->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1221->CENSUS_HISPANIC;
              long v1221 = e1221->__av;
              __SQL_SUM_AGGREGATE_290INVENTORY1_P_3.addOrDelOnZero(se4276.modify(inventory_locn), (v1220 * (v1221 * (location_tot_area_sq_ft * location_walmartsupercenterdistance))));
            } while ((n1221 = n1221->nxt));
          }
          e1220 = e1220->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_291 = 0.0;
      __SQL_SUM_AGGREGATE_291INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1222 = LOCATION.head;
        while (e1222) {
          long inventory_locn = e1222->LOCATION_LOCN;
          long location_zip = e1222->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1222->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1222->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1222->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1222->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1222->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1222->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1222->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1222->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1222->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1222->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1222->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1222->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1222->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1222 = e1222->__av;
          { //slice
            const HASH_RES_t h125 = CENSUS_mapkey0_idxfn::hash(se4280.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1223 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1223 = &(i1223->buckets_[h125 % i1223->size_]);
            CENSUS_entry* e1223;
            do if ((e1223 = n1223->obj) && h125 == n1223->hash && CENSUS_mapkey0_idxfn::equals(se4280, *e1223)) {
              long census_population = e1223->CENSUS_POPULATION;
              long census_white = e1223->CENSUS_WHITE;
              long census_asian = e1223->CENSUS_ASIAN;
              long census_pacific = e1223->CENSUS_PACIFIC;
              long census_blackafrican = e1223->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1223->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1223->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1223->CENSUS_HOUSEUNITS;
              long census_families = e1223->CENSUS_FAMILIES;
              long census_households = e1223->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1223->CENSUS_HUSBWIFE;
              long census_males = e1223->CENSUS_MALES;
              long census_females = e1223->CENSUS_FEMALES;
              long census_householdschildren = e1223->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1223->CENSUS_HISPANIC;
              long v1223 = e1223->__av;
              __SQL_SUM_AGGREGATE_291INVENTORY1_P_3.addOrDelOnZero(se4279.modify(inventory_locn), (v1222 * (v1223 * (location_tot_area_sq_ft * location_walmartsupercenterdrivetime))));
            } while ((n1223 = n1223->nxt));
          }
          e1222 = e1222->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_292 = 0.0;
      __SQL_SUM_AGGREGATE_292INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1224 = LOCATION.head;
        while (e1224) {
          long inventory_locn = e1224->LOCATION_LOCN;
          long location_zip = e1224->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1224->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1224->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1224->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1224->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1224->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1224->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1224->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1224->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1224->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1224->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1224->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1224->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1224->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1224 = e1224->__av;
          { //slice
            const HASH_RES_t h126 = CENSUS_mapkey0_idxfn::hash(se4283.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1225 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1225 = &(i1225->buckets_[h126 % i1225->size_]);
            CENSUS_entry* e1225;
            do if ((e1225 = n1225->obj) && h126 == n1225->hash && CENSUS_mapkey0_idxfn::equals(se4283, *e1225)) {
              long census_population = e1225->CENSUS_POPULATION;
              long census_white = e1225->CENSUS_WHITE;
              long census_asian = e1225->CENSUS_ASIAN;
              long census_pacific = e1225->CENSUS_PACIFIC;
              long census_blackafrican = e1225->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1225->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1225->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1225->CENSUS_HOUSEUNITS;
              long census_families = e1225->CENSUS_FAMILIES;
              long census_households = e1225->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1225->CENSUS_HUSBWIFE;
              long census_males = e1225->CENSUS_MALES;
              long census_females = e1225->CENSUS_FEMALES;
              long census_householdschildren = e1225->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1225->CENSUS_HISPANIC;
              long v1225 = e1225->__av;
              __SQL_SUM_AGGREGATE_292INVENTORY1_P_3.addOrDelOnZero(se4282.modify(inventory_locn), (v1224 * (v1225 * (location_tot_area_sq_ft * census_population))));
            } while ((n1225 = n1225->nxt));
          }
          e1224 = e1224->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_293 = 0.0;
      __SQL_SUM_AGGREGATE_293INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1226 = LOCATION.head;
        while (e1226) {
          long inventory_locn = e1226->LOCATION_LOCN;
          long location_zip = e1226->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1226->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1226->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1226->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1226->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1226->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1226->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1226->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1226->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1226->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1226->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1226->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1226->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1226->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1226 = e1226->__av;
          { //slice
            const HASH_RES_t h127 = CENSUS_mapkey0_idxfn::hash(se4286.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1227 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1227 = &(i1227->buckets_[h127 % i1227->size_]);
            CENSUS_entry* e1227;
            do if ((e1227 = n1227->obj) && h127 == n1227->hash && CENSUS_mapkey0_idxfn::equals(se4286, *e1227)) {
              long census_population = e1227->CENSUS_POPULATION;
              long census_white = e1227->CENSUS_WHITE;
              long census_asian = e1227->CENSUS_ASIAN;
              long census_pacific = e1227->CENSUS_PACIFIC;
              long census_blackafrican = e1227->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1227->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1227->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1227->CENSUS_HOUSEUNITS;
              long census_families = e1227->CENSUS_FAMILIES;
              long census_households = e1227->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1227->CENSUS_HUSBWIFE;
              long census_males = e1227->CENSUS_MALES;
              long census_females = e1227->CENSUS_FEMALES;
              long census_householdschildren = e1227->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1227->CENSUS_HISPANIC;
              long v1227 = e1227->__av;
              __SQL_SUM_AGGREGATE_293INVENTORY1_P_3.addOrDelOnZero(se4285.modify(inventory_locn), (v1226 * (v1227 * (location_tot_area_sq_ft * census_white))));
            } while ((n1227 = n1227->nxt));
          }
          e1226 = e1226->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_294 = 0.0;
      __SQL_SUM_AGGREGATE_294INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1228 = LOCATION.head;
        while (e1228) {
          long inventory_locn = e1228->LOCATION_LOCN;
          long location_zip = e1228->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1228->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1228->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1228->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1228->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1228->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1228->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1228->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1228->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1228->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1228->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1228->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1228->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1228->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1228 = e1228->__av;
          { //slice
            const HASH_RES_t h128 = CENSUS_mapkey0_idxfn::hash(se4289.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1229 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1229 = &(i1229->buckets_[h128 % i1229->size_]);
            CENSUS_entry* e1229;
            do if ((e1229 = n1229->obj) && h128 == n1229->hash && CENSUS_mapkey0_idxfn::equals(se4289, *e1229)) {
              long census_population = e1229->CENSUS_POPULATION;
              long census_white = e1229->CENSUS_WHITE;
              long census_asian = e1229->CENSUS_ASIAN;
              long census_pacific = e1229->CENSUS_PACIFIC;
              long census_blackafrican = e1229->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1229->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1229->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1229->CENSUS_HOUSEUNITS;
              long census_families = e1229->CENSUS_FAMILIES;
              long census_households = e1229->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1229->CENSUS_HUSBWIFE;
              long census_males = e1229->CENSUS_MALES;
              long census_females = e1229->CENSUS_FEMALES;
              long census_householdschildren = e1229->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1229->CENSUS_HISPANIC;
              long v1229 = e1229->__av;
              __SQL_SUM_AGGREGATE_294INVENTORY1_P_3.addOrDelOnZero(se4288.modify(inventory_locn), (v1228 * (v1229 * (location_tot_area_sq_ft * census_asian))));
            } while ((n1229 = n1229->nxt));
          }
          e1228 = e1228->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_295 = 0.0;
      __SQL_SUM_AGGREGATE_295INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1230 = LOCATION.head;
        while (e1230) {
          long inventory_locn = e1230->LOCATION_LOCN;
          long location_zip = e1230->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1230->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1230->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1230->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1230->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1230->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1230->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1230->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1230->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1230->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1230->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1230->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1230->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1230->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1230 = e1230->__av;
          { //slice
            const HASH_RES_t h129 = CENSUS_mapkey0_idxfn::hash(se4292.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1231 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1231 = &(i1231->buckets_[h129 % i1231->size_]);
            CENSUS_entry* e1231;
            do if ((e1231 = n1231->obj) && h129 == n1231->hash && CENSUS_mapkey0_idxfn::equals(se4292, *e1231)) {
              long census_population = e1231->CENSUS_POPULATION;
              long census_white = e1231->CENSUS_WHITE;
              long census_asian = e1231->CENSUS_ASIAN;
              long census_pacific = e1231->CENSUS_PACIFIC;
              long census_blackafrican = e1231->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1231->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1231->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1231->CENSUS_HOUSEUNITS;
              long census_families = e1231->CENSUS_FAMILIES;
              long census_households = e1231->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1231->CENSUS_HUSBWIFE;
              long census_males = e1231->CENSUS_MALES;
              long census_females = e1231->CENSUS_FEMALES;
              long census_householdschildren = e1231->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1231->CENSUS_HISPANIC;
              long v1231 = e1231->__av;
              __SQL_SUM_AGGREGATE_295INVENTORY1_P_3.addOrDelOnZero(se4291.modify(inventory_locn), (v1230 * (v1231 * (location_tot_area_sq_ft * census_pacific))));
            } while ((n1231 = n1231->nxt));
          }
          e1230 = e1230->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_296 = 0.0;
      __SQL_SUM_AGGREGATE_296INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1232 = LOCATION.head;
        while (e1232) {
          long inventory_locn = e1232->LOCATION_LOCN;
          long location_zip = e1232->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1232->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1232->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1232->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1232->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1232->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1232->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1232->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1232->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1232->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1232->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1232->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1232->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1232->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1232 = e1232->__av;
          { //slice
            const HASH_RES_t h130 = CENSUS_mapkey0_idxfn::hash(se4295.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1233 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1233 = &(i1233->buckets_[h130 % i1233->size_]);
            CENSUS_entry* e1233;
            do if ((e1233 = n1233->obj) && h130 == n1233->hash && CENSUS_mapkey0_idxfn::equals(se4295, *e1233)) {
              long census_population = e1233->CENSUS_POPULATION;
              long census_white = e1233->CENSUS_WHITE;
              long census_asian = e1233->CENSUS_ASIAN;
              long census_pacific = e1233->CENSUS_PACIFIC;
              long census_blackafrican = e1233->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1233->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1233->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1233->CENSUS_HOUSEUNITS;
              long census_families = e1233->CENSUS_FAMILIES;
              long census_households = e1233->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1233->CENSUS_HUSBWIFE;
              long census_males = e1233->CENSUS_MALES;
              long census_females = e1233->CENSUS_FEMALES;
              long census_householdschildren = e1233->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1233->CENSUS_HISPANIC;
              long v1233 = e1233->__av;
              __SQL_SUM_AGGREGATE_296INVENTORY1_P_3.addOrDelOnZero(se4294.modify(inventory_locn), (v1232 * (v1233 * (location_tot_area_sq_ft * census_blackafrican))));
            } while ((n1233 = n1233->nxt));
          }
          e1232 = e1232->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_297 = 0.0;
      __SQL_SUM_AGGREGATE_297INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1234 = LOCATION.head;
        while (e1234) {
          long inventory_locn = e1234->LOCATION_LOCN;
          long location_zip = e1234->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1234->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1234->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1234->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1234->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1234->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1234->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1234->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1234->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1234->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1234->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1234->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1234->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1234->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1234 = e1234->__av;
          { //slice
            const HASH_RES_t h131 = CENSUS_mapkey0_idxfn::hash(se4298.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1235 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1235 = &(i1235->buckets_[h131 % i1235->size_]);
            CENSUS_entry* e1235;
            do if ((e1235 = n1235->obj) && h131 == n1235->hash && CENSUS_mapkey0_idxfn::equals(se4298, *e1235)) {
              long census_population = e1235->CENSUS_POPULATION;
              long census_white = e1235->CENSUS_WHITE;
              long census_asian = e1235->CENSUS_ASIAN;
              long census_pacific = e1235->CENSUS_PACIFIC;
              long census_blackafrican = e1235->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1235->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1235->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1235->CENSUS_HOUSEUNITS;
              long census_families = e1235->CENSUS_FAMILIES;
              long census_households = e1235->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1235->CENSUS_HUSBWIFE;
              long census_males = e1235->CENSUS_MALES;
              long census_females = e1235->CENSUS_FEMALES;
              long census_householdschildren = e1235->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1235->CENSUS_HISPANIC;
              long v1235 = e1235->__av;
              __SQL_SUM_AGGREGATE_297INVENTORY1_P_3.addOrDelOnZero(se4297.modify(inventory_locn), (v1234 * (v1235 * (location_tot_area_sq_ft * census_medianage))));
            } while ((n1235 = n1235->nxt));
          }
          e1234 = e1234->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_298 = 0.0;
      __SQL_SUM_AGGREGATE_298INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1236 = LOCATION.head;
        while (e1236) {
          long inventory_locn = e1236->LOCATION_LOCN;
          long location_zip = e1236->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1236->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1236->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1236->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1236->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1236->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1236->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1236->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1236->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1236->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1236->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1236->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1236->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1236->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1236 = e1236->__av;
          { //slice
            const HASH_RES_t h132 = CENSUS_mapkey0_idxfn::hash(se4301.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1237 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1237 = &(i1237->buckets_[h132 % i1237->size_]);
            CENSUS_entry* e1237;
            do if ((e1237 = n1237->obj) && h132 == n1237->hash && CENSUS_mapkey0_idxfn::equals(se4301, *e1237)) {
              long census_population = e1237->CENSUS_POPULATION;
              long census_white = e1237->CENSUS_WHITE;
              long census_asian = e1237->CENSUS_ASIAN;
              long census_pacific = e1237->CENSUS_PACIFIC;
              long census_blackafrican = e1237->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1237->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1237->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1237->CENSUS_HOUSEUNITS;
              long census_families = e1237->CENSUS_FAMILIES;
              long census_households = e1237->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1237->CENSUS_HUSBWIFE;
              long census_males = e1237->CENSUS_MALES;
              long census_females = e1237->CENSUS_FEMALES;
              long census_householdschildren = e1237->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1237->CENSUS_HISPANIC;
              long v1237 = e1237->__av;
              __SQL_SUM_AGGREGATE_298INVENTORY1_P_3.addOrDelOnZero(se4300.modify(inventory_locn), (v1236 * (v1237 * (location_tot_area_sq_ft * census_occupiedhouseunits))));
            } while ((n1237 = n1237->nxt));
          }
          e1236 = e1236->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_299 = 0.0;
      __SQL_SUM_AGGREGATE_299INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1238 = LOCATION.head;
        while (e1238) {
          long inventory_locn = e1238->LOCATION_LOCN;
          long location_zip = e1238->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1238->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1238->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1238->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1238->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1238->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1238->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1238->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1238->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1238->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1238->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1238->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1238->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1238->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1238 = e1238->__av;
          { //slice
            const HASH_RES_t h133 = CENSUS_mapkey0_idxfn::hash(se4304.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1239 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1239 = &(i1239->buckets_[h133 % i1239->size_]);
            CENSUS_entry* e1239;
            do if ((e1239 = n1239->obj) && h133 == n1239->hash && CENSUS_mapkey0_idxfn::equals(se4304, *e1239)) {
              long census_population = e1239->CENSUS_POPULATION;
              long census_white = e1239->CENSUS_WHITE;
              long census_asian = e1239->CENSUS_ASIAN;
              long census_pacific = e1239->CENSUS_PACIFIC;
              long census_blackafrican = e1239->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1239->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1239->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1239->CENSUS_HOUSEUNITS;
              long census_families = e1239->CENSUS_FAMILIES;
              long census_households = e1239->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1239->CENSUS_HUSBWIFE;
              long census_males = e1239->CENSUS_MALES;
              long census_females = e1239->CENSUS_FEMALES;
              long census_householdschildren = e1239->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1239->CENSUS_HISPANIC;
              long v1239 = e1239->__av;
              __SQL_SUM_AGGREGATE_299INVENTORY1_P_3.addOrDelOnZero(se4303.modify(inventory_locn), (v1238 * (v1239 * (location_tot_area_sq_ft * census_houseunits))));
            } while ((n1239 = n1239->nxt));
          }
          e1238 = e1238->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_300 = 0.0;
      __SQL_SUM_AGGREGATE_300INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1240 = LOCATION.head;
        while (e1240) {
          long inventory_locn = e1240->LOCATION_LOCN;
          long location_zip = e1240->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1240->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1240->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1240->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1240->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1240->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1240->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1240->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1240->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1240->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1240->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1240->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1240->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1240->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1240 = e1240->__av;
          { //slice
            const HASH_RES_t h134 = CENSUS_mapkey0_idxfn::hash(se4307.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1241 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1241 = &(i1241->buckets_[h134 % i1241->size_]);
            CENSUS_entry* e1241;
            do if ((e1241 = n1241->obj) && h134 == n1241->hash && CENSUS_mapkey0_idxfn::equals(se4307, *e1241)) {
              long census_population = e1241->CENSUS_POPULATION;
              long census_white = e1241->CENSUS_WHITE;
              long census_asian = e1241->CENSUS_ASIAN;
              long census_pacific = e1241->CENSUS_PACIFIC;
              long census_blackafrican = e1241->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1241->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1241->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1241->CENSUS_HOUSEUNITS;
              long census_families = e1241->CENSUS_FAMILIES;
              long census_households = e1241->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1241->CENSUS_HUSBWIFE;
              long census_males = e1241->CENSUS_MALES;
              long census_females = e1241->CENSUS_FEMALES;
              long census_householdschildren = e1241->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1241->CENSUS_HISPANIC;
              long v1241 = e1241->__av;
              __SQL_SUM_AGGREGATE_300INVENTORY1_P_3.addOrDelOnZero(se4306.modify(inventory_locn), (v1240 * (v1241 * (location_tot_area_sq_ft * census_families))));
            } while ((n1241 = n1241->nxt));
          }
          e1240 = e1240->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_301 = 0.0;
      __SQL_SUM_AGGREGATE_301INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1242 = LOCATION.head;
        while (e1242) {
          long inventory_locn = e1242->LOCATION_LOCN;
          long location_zip = e1242->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1242->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1242->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1242->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1242->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1242->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1242->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1242->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1242->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1242->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1242->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1242->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1242->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1242->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1242 = e1242->__av;
          { //slice
            const HASH_RES_t h135 = CENSUS_mapkey0_idxfn::hash(se4310.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1243 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1243 = &(i1243->buckets_[h135 % i1243->size_]);
            CENSUS_entry* e1243;
            do if ((e1243 = n1243->obj) && h135 == n1243->hash && CENSUS_mapkey0_idxfn::equals(se4310, *e1243)) {
              long census_population = e1243->CENSUS_POPULATION;
              long census_white = e1243->CENSUS_WHITE;
              long census_asian = e1243->CENSUS_ASIAN;
              long census_pacific = e1243->CENSUS_PACIFIC;
              long census_blackafrican = e1243->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1243->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1243->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1243->CENSUS_HOUSEUNITS;
              long census_families = e1243->CENSUS_FAMILIES;
              long census_households = e1243->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1243->CENSUS_HUSBWIFE;
              long census_males = e1243->CENSUS_MALES;
              long census_females = e1243->CENSUS_FEMALES;
              long census_householdschildren = e1243->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1243->CENSUS_HISPANIC;
              long v1243 = e1243->__av;
              __SQL_SUM_AGGREGATE_301INVENTORY1_P_3.addOrDelOnZero(se4309.modify(inventory_locn), (v1242 * (v1243 * (location_tot_area_sq_ft * census_households))));
            } while ((n1243 = n1243->nxt));
          }
          e1242 = e1242->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_302 = 0.0;
      __SQL_SUM_AGGREGATE_302INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1244 = LOCATION.head;
        while (e1244) {
          long inventory_locn = e1244->LOCATION_LOCN;
          long location_zip = e1244->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1244->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1244->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1244->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1244->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1244->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1244->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1244->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1244->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1244->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1244->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1244->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1244->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1244->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1244 = e1244->__av;
          { //slice
            const HASH_RES_t h136 = CENSUS_mapkey0_idxfn::hash(se4313.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1245 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1245 = &(i1245->buckets_[h136 % i1245->size_]);
            CENSUS_entry* e1245;
            do if ((e1245 = n1245->obj) && h136 == n1245->hash && CENSUS_mapkey0_idxfn::equals(se4313, *e1245)) {
              long census_population = e1245->CENSUS_POPULATION;
              long census_white = e1245->CENSUS_WHITE;
              long census_asian = e1245->CENSUS_ASIAN;
              long census_pacific = e1245->CENSUS_PACIFIC;
              long census_blackafrican = e1245->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1245->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1245->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1245->CENSUS_HOUSEUNITS;
              long census_families = e1245->CENSUS_FAMILIES;
              long census_households = e1245->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1245->CENSUS_HUSBWIFE;
              long census_males = e1245->CENSUS_MALES;
              long census_females = e1245->CENSUS_FEMALES;
              long census_householdschildren = e1245->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1245->CENSUS_HISPANIC;
              long v1245 = e1245->__av;
              __SQL_SUM_AGGREGATE_302INVENTORY1_P_3.addOrDelOnZero(se4312.modify(inventory_locn), (v1244 * (v1245 * (location_tot_area_sq_ft * census_husbwife))));
            } while ((n1245 = n1245->nxt));
          }
          e1244 = e1244->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_303 = 0.0;
      __SQL_SUM_AGGREGATE_303INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1246 = LOCATION.head;
        while (e1246) {
          long inventory_locn = e1246->LOCATION_LOCN;
          long location_zip = e1246->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1246->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1246->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1246->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1246->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1246->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1246->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1246->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1246->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1246->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1246->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1246->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1246->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1246->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1246 = e1246->__av;
          { //slice
            const HASH_RES_t h137 = CENSUS_mapkey0_idxfn::hash(se4316.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1247 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1247 = &(i1247->buckets_[h137 % i1247->size_]);
            CENSUS_entry* e1247;
            do if ((e1247 = n1247->obj) && h137 == n1247->hash && CENSUS_mapkey0_idxfn::equals(se4316, *e1247)) {
              long census_population = e1247->CENSUS_POPULATION;
              long census_white = e1247->CENSUS_WHITE;
              long census_asian = e1247->CENSUS_ASIAN;
              long census_pacific = e1247->CENSUS_PACIFIC;
              long census_blackafrican = e1247->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1247->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1247->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1247->CENSUS_HOUSEUNITS;
              long census_families = e1247->CENSUS_FAMILIES;
              long census_households = e1247->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1247->CENSUS_HUSBWIFE;
              long census_males = e1247->CENSUS_MALES;
              long census_females = e1247->CENSUS_FEMALES;
              long census_householdschildren = e1247->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1247->CENSUS_HISPANIC;
              long v1247 = e1247->__av;
              __SQL_SUM_AGGREGATE_303INVENTORY1_P_3.addOrDelOnZero(se4315.modify(inventory_locn), (v1246 * (v1247 * (location_tot_area_sq_ft * census_males))));
            } while ((n1247 = n1247->nxt));
          }
          e1246 = e1246->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_304 = 0.0;
      __SQL_SUM_AGGREGATE_304INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1248 = LOCATION.head;
        while (e1248) {
          long inventory_locn = e1248->LOCATION_LOCN;
          long location_zip = e1248->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1248->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1248->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1248->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1248->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1248->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1248->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1248->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1248->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1248->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1248->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1248->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1248->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1248->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1248 = e1248->__av;
          { //slice
            const HASH_RES_t h138 = CENSUS_mapkey0_idxfn::hash(se4319.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1249 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1249 = &(i1249->buckets_[h138 % i1249->size_]);
            CENSUS_entry* e1249;
            do if ((e1249 = n1249->obj) && h138 == n1249->hash && CENSUS_mapkey0_idxfn::equals(se4319, *e1249)) {
              long census_population = e1249->CENSUS_POPULATION;
              long census_white = e1249->CENSUS_WHITE;
              long census_asian = e1249->CENSUS_ASIAN;
              long census_pacific = e1249->CENSUS_PACIFIC;
              long census_blackafrican = e1249->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1249->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1249->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1249->CENSUS_HOUSEUNITS;
              long census_families = e1249->CENSUS_FAMILIES;
              long census_households = e1249->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1249->CENSUS_HUSBWIFE;
              long census_males = e1249->CENSUS_MALES;
              long census_females = e1249->CENSUS_FEMALES;
              long census_householdschildren = e1249->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1249->CENSUS_HISPANIC;
              long v1249 = e1249->__av;
              __SQL_SUM_AGGREGATE_304INVENTORY1_P_3.addOrDelOnZero(se4318.modify(inventory_locn), (v1248 * (v1249 * (location_tot_area_sq_ft * census_females))));
            } while ((n1249 = n1249->nxt));
          }
          e1248 = e1248->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_305 = 0.0;
      __SQL_SUM_AGGREGATE_305INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1250 = LOCATION.head;
        while (e1250) {
          long inventory_locn = e1250->LOCATION_LOCN;
          long location_zip = e1250->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1250->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1250->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1250->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1250->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1250->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1250->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1250->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1250->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1250->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1250->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1250->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1250->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1250->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1250 = e1250->__av;
          { //slice
            const HASH_RES_t h139 = CENSUS_mapkey0_idxfn::hash(se4322.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1251 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1251 = &(i1251->buckets_[h139 % i1251->size_]);
            CENSUS_entry* e1251;
            do if ((e1251 = n1251->obj) && h139 == n1251->hash && CENSUS_mapkey0_idxfn::equals(se4322, *e1251)) {
              long census_population = e1251->CENSUS_POPULATION;
              long census_white = e1251->CENSUS_WHITE;
              long census_asian = e1251->CENSUS_ASIAN;
              long census_pacific = e1251->CENSUS_PACIFIC;
              long census_blackafrican = e1251->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1251->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1251->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1251->CENSUS_HOUSEUNITS;
              long census_families = e1251->CENSUS_FAMILIES;
              long census_households = e1251->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1251->CENSUS_HUSBWIFE;
              long census_males = e1251->CENSUS_MALES;
              long census_females = e1251->CENSUS_FEMALES;
              long census_householdschildren = e1251->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1251->CENSUS_HISPANIC;
              long v1251 = e1251->__av;
              __SQL_SUM_AGGREGATE_305INVENTORY1_P_3.addOrDelOnZero(se4321.modify(inventory_locn), (v1250 * (v1251 * (location_tot_area_sq_ft * census_householdschildren))));
            } while ((n1251 = n1251->nxt));
          }
          e1250 = e1250->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_306 = 0.0;
      __SQL_SUM_AGGREGATE_306INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1252 = LOCATION.head;
        while (e1252) {
          long inventory_locn = e1252->LOCATION_LOCN;
          long location_zip = e1252->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1252->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1252->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1252->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1252->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1252->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1252->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1252->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1252->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1252->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1252->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1252->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1252->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1252->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1252 = e1252->__av;
          { //slice
            const HASH_RES_t h140 = CENSUS_mapkey0_idxfn::hash(se4325.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1253 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1253 = &(i1253->buckets_[h140 % i1253->size_]);
            CENSUS_entry* e1253;
            do if ((e1253 = n1253->obj) && h140 == n1253->hash && CENSUS_mapkey0_idxfn::equals(se4325, *e1253)) {
              long census_population = e1253->CENSUS_POPULATION;
              long census_white = e1253->CENSUS_WHITE;
              long census_asian = e1253->CENSUS_ASIAN;
              long census_pacific = e1253->CENSUS_PACIFIC;
              long census_blackafrican = e1253->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1253->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1253->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1253->CENSUS_HOUSEUNITS;
              long census_families = e1253->CENSUS_FAMILIES;
              long census_households = e1253->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1253->CENSUS_HUSBWIFE;
              long census_males = e1253->CENSUS_MALES;
              long census_females = e1253->CENSUS_FEMALES;
              long census_householdschildren = e1253->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1253->CENSUS_HISPANIC;
              long v1253 = e1253->__av;
              __SQL_SUM_AGGREGATE_306INVENTORY1_P_3.addOrDelOnZero(se4324.modify(inventory_locn), (v1252 * (v1253 * (location_tot_area_sq_ft * census_hispanic))));
            } while ((n1253 = n1253->nxt));
          }
          e1252 = e1252->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_307 = 0.0;
      __SQL_SUM_AGGREGATE_308 = 0.0;
      __SQL_SUM_AGGREGATE_309 = 0.0;
      __SQL_SUM_AGGREGATE_310 = 0.0;
      __SQL_SUM_AGGREGATE_311 = 0.0;
      __SQL_SUM_AGGREGATE_312 = 0.0;
      __SQL_SUM_AGGREGATE_313 = 0.0;
      __SQL_SUM_AGGREGATE_314 = 0.0;
      __SQL_SUM_AGGREGATE_315 = 0.0;
      __SQL_SUM_AGGREGATE_316 = 0.0;
      __SQL_SUM_AGGREGATE_317 = 0.0;
      __SQL_SUM_AGGREGATE_317INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1254 = LOCATION.head;
        while (e1254) {
          long inventory_locn = e1254->LOCATION_LOCN;
          long location_zip = e1254->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1254->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1254->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1254->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1254->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1254->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1254->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1254->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1254->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1254->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1254->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1254->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1254->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1254->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1254 = e1254->__av;
          { //slice
            const HASH_RES_t h141 = CENSUS_mapkey0_idxfn::hash(se4338.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1255 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1255 = &(i1255->buckets_[h141 % i1255->size_]);
            CENSUS_entry* e1255;
            do if ((e1255 = n1255->obj) && h141 == n1255->hash && CENSUS_mapkey0_idxfn::equals(se4338, *e1255)) {
              long census_population = e1255->CENSUS_POPULATION;
              long census_white = e1255->CENSUS_WHITE;
              long census_asian = e1255->CENSUS_ASIAN;
              long census_pacific = e1255->CENSUS_PACIFIC;
              long census_blackafrican = e1255->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1255->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1255->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1255->CENSUS_HOUSEUNITS;
              long census_families = e1255->CENSUS_FAMILIES;
              long census_households = e1255->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1255->CENSUS_HUSBWIFE;
              long census_males = e1255->CENSUS_MALES;
              long census_females = e1255->CENSUS_FEMALES;
              long census_householdschildren = e1255->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1255->CENSUS_HISPANIC;
              long v1255 = e1255->__av;
              __SQL_SUM_AGGREGATE_317INVENTORY1_P_3.addOrDelOnZero(se4337.modify(inventory_locn), (v1254 * (v1255 * (location_sell_area_sq_ft * location_sell_area_sq_ft))));
            } while ((n1255 = n1255->nxt));
          }
          e1254 = e1254->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_318 = 0.0;
      __SQL_SUM_AGGREGATE_318INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1256 = LOCATION.head;
        while (e1256) {
          long inventory_locn = e1256->LOCATION_LOCN;
          long location_zip = e1256->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1256->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1256->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1256->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1256->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1256->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1256->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1256->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1256->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1256->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1256->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1256->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1256->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1256->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1256 = e1256->__av;
          { //slice
            const HASH_RES_t h142 = CENSUS_mapkey0_idxfn::hash(se4341.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1257 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1257 = &(i1257->buckets_[h142 % i1257->size_]);
            CENSUS_entry* e1257;
            do if ((e1257 = n1257->obj) && h142 == n1257->hash && CENSUS_mapkey0_idxfn::equals(se4341, *e1257)) {
              long census_population = e1257->CENSUS_POPULATION;
              long census_white = e1257->CENSUS_WHITE;
              long census_asian = e1257->CENSUS_ASIAN;
              long census_pacific = e1257->CENSUS_PACIFIC;
              long census_blackafrican = e1257->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1257->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1257->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1257->CENSUS_HOUSEUNITS;
              long census_families = e1257->CENSUS_FAMILIES;
              long census_households = e1257->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1257->CENSUS_HUSBWIFE;
              long census_males = e1257->CENSUS_MALES;
              long census_females = e1257->CENSUS_FEMALES;
              long census_householdschildren = e1257->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1257->CENSUS_HISPANIC;
              long v1257 = e1257->__av;
              __SQL_SUM_AGGREGATE_318INVENTORY1_P_3.addOrDelOnZero(se4340.modify(inventory_locn), (v1256 * (v1257 * (location_sell_area_sq_ft * location_avghhi))));
            } while ((n1257 = n1257->nxt));
          }
          e1256 = e1256->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_319 = 0.0;
      __SQL_SUM_AGGREGATE_319INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1258 = LOCATION.head;
        while (e1258) {
          long inventory_locn = e1258->LOCATION_LOCN;
          long location_zip = e1258->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1258->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1258->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1258->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1258->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1258->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1258->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1258->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1258->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1258->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1258->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1258->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1258->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1258->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1258 = e1258->__av;
          { //slice
            const HASH_RES_t h143 = CENSUS_mapkey0_idxfn::hash(se4344.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1259 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1259 = &(i1259->buckets_[h143 % i1259->size_]);
            CENSUS_entry* e1259;
            do if ((e1259 = n1259->obj) && h143 == n1259->hash && CENSUS_mapkey0_idxfn::equals(se4344, *e1259)) {
              long census_population = e1259->CENSUS_POPULATION;
              long census_white = e1259->CENSUS_WHITE;
              long census_asian = e1259->CENSUS_ASIAN;
              long census_pacific = e1259->CENSUS_PACIFIC;
              long census_blackafrican = e1259->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1259->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1259->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1259->CENSUS_HOUSEUNITS;
              long census_families = e1259->CENSUS_FAMILIES;
              long census_households = e1259->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1259->CENSUS_HUSBWIFE;
              long census_males = e1259->CENSUS_MALES;
              long census_females = e1259->CENSUS_FEMALES;
              long census_householdschildren = e1259->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1259->CENSUS_HISPANIC;
              long v1259 = e1259->__av;
              __SQL_SUM_AGGREGATE_319INVENTORY1_P_3.addOrDelOnZero(se4343.modify(inventory_locn), (v1258 * (v1259 * (location_sell_area_sq_ft * location_supertargetdistance))));
            } while ((n1259 = n1259->nxt));
          }
          e1258 = e1258->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_320 = 0.0;
      __SQL_SUM_AGGREGATE_320INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1260 = LOCATION.head;
        while (e1260) {
          long inventory_locn = e1260->LOCATION_LOCN;
          long location_zip = e1260->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1260->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1260->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1260->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1260->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1260->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1260->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1260->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1260->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1260->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1260->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1260->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1260->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1260->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1260 = e1260->__av;
          { //slice
            const HASH_RES_t h144 = CENSUS_mapkey0_idxfn::hash(se4347.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1261 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1261 = &(i1261->buckets_[h144 % i1261->size_]);
            CENSUS_entry* e1261;
            do if ((e1261 = n1261->obj) && h144 == n1261->hash && CENSUS_mapkey0_idxfn::equals(se4347, *e1261)) {
              long census_population = e1261->CENSUS_POPULATION;
              long census_white = e1261->CENSUS_WHITE;
              long census_asian = e1261->CENSUS_ASIAN;
              long census_pacific = e1261->CENSUS_PACIFIC;
              long census_blackafrican = e1261->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1261->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1261->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1261->CENSUS_HOUSEUNITS;
              long census_families = e1261->CENSUS_FAMILIES;
              long census_households = e1261->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1261->CENSUS_HUSBWIFE;
              long census_males = e1261->CENSUS_MALES;
              long census_females = e1261->CENSUS_FEMALES;
              long census_householdschildren = e1261->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1261->CENSUS_HISPANIC;
              long v1261 = e1261->__av;
              __SQL_SUM_AGGREGATE_320INVENTORY1_P_3.addOrDelOnZero(se4346.modify(inventory_locn), (v1260 * (v1261 * (location_sell_area_sq_ft * location_supertargetdrivetime))));
            } while ((n1261 = n1261->nxt));
          }
          e1260 = e1260->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_321 = 0.0;
      __SQL_SUM_AGGREGATE_321INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1262 = LOCATION.head;
        while (e1262) {
          long inventory_locn = e1262->LOCATION_LOCN;
          long location_zip = e1262->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1262->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1262->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1262->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1262->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1262->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1262->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1262->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1262->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1262->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1262->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1262->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1262->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1262->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1262 = e1262->__av;
          { //slice
            const HASH_RES_t h145 = CENSUS_mapkey0_idxfn::hash(se4350.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1263 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1263 = &(i1263->buckets_[h145 % i1263->size_]);
            CENSUS_entry* e1263;
            do if ((e1263 = n1263->obj) && h145 == n1263->hash && CENSUS_mapkey0_idxfn::equals(se4350, *e1263)) {
              long census_population = e1263->CENSUS_POPULATION;
              long census_white = e1263->CENSUS_WHITE;
              long census_asian = e1263->CENSUS_ASIAN;
              long census_pacific = e1263->CENSUS_PACIFIC;
              long census_blackafrican = e1263->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1263->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1263->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1263->CENSUS_HOUSEUNITS;
              long census_families = e1263->CENSUS_FAMILIES;
              long census_households = e1263->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1263->CENSUS_HUSBWIFE;
              long census_males = e1263->CENSUS_MALES;
              long census_females = e1263->CENSUS_FEMALES;
              long census_householdschildren = e1263->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1263->CENSUS_HISPANIC;
              long v1263 = e1263->__av;
              __SQL_SUM_AGGREGATE_321INVENTORY1_P_3.addOrDelOnZero(se4349.modify(inventory_locn), (v1262 * (v1263 * (location_sell_area_sq_ft * location_targetdistance))));
            } while ((n1263 = n1263->nxt));
          }
          e1262 = e1262->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_322 = 0.0;
      __SQL_SUM_AGGREGATE_322INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1264 = LOCATION.head;
        while (e1264) {
          long inventory_locn = e1264->LOCATION_LOCN;
          long location_zip = e1264->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1264->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1264->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1264->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1264->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1264->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1264->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1264->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1264->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1264->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1264->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1264->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1264->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1264->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1264 = e1264->__av;
          { //slice
            const HASH_RES_t h146 = CENSUS_mapkey0_idxfn::hash(se4353.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1265 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1265 = &(i1265->buckets_[h146 % i1265->size_]);
            CENSUS_entry* e1265;
            do if ((e1265 = n1265->obj) && h146 == n1265->hash && CENSUS_mapkey0_idxfn::equals(se4353, *e1265)) {
              long census_population = e1265->CENSUS_POPULATION;
              long census_white = e1265->CENSUS_WHITE;
              long census_asian = e1265->CENSUS_ASIAN;
              long census_pacific = e1265->CENSUS_PACIFIC;
              long census_blackafrican = e1265->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1265->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1265->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1265->CENSUS_HOUSEUNITS;
              long census_families = e1265->CENSUS_FAMILIES;
              long census_households = e1265->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1265->CENSUS_HUSBWIFE;
              long census_males = e1265->CENSUS_MALES;
              long census_females = e1265->CENSUS_FEMALES;
              long census_householdschildren = e1265->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1265->CENSUS_HISPANIC;
              long v1265 = e1265->__av;
              __SQL_SUM_AGGREGATE_322INVENTORY1_P_3.addOrDelOnZero(se4352.modify(inventory_locn), (v1264 * (v1265 * (location_sell_area_sq_ft * location_targetdrivetime))));
            } while ((n1265 = n1265->nxt));
          }
          e1264 = e1264->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_323 = 0.0;
      __SQL_SUM_AGGREGATE_323INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1266 = LOCATION.head;
        while (e1266) {
          long inventory_locn = e1266->LOCATION_LOCN;
          long location_zip = e1266->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1266->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1266->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1266->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1266->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1266->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1266->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1266->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1266->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1266->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1266->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1266->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1266->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1266->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1266 = e1266->__av;
          { //slice
            const HASH_RES_t h147 = CENSUS_mapkey0_idxfn::hash(se4356.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1267 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1267 = &(i1267->buckets_[h147 % i1267->size_]);
            CENSUS_entry* e1267;
            do if ((e1267 = n1267->obj) && h147 == n1267->hash && CENSUS_mapkey0_idxfn::equals(se4356, *e1267)) {
              long census_population = e1267->CENSUS_POPULATION;
              long census_white = e1267->CENSUS_WHITE;
              long census_asian = e1267->CENSUS_ASIAN;
              long census_pacific = e1267->CENSUS_PACIFIC;
              long census_blackafrican = e1267->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1267->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1267->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1267->CENSUS_HOUSEUNITS;
              long census_families = e1267->CENSUS_FAMILIES;
              long census_households = e1267->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1267->CENSUS_HUSBWIFE;
              long census_males = e1267->CENSUS_MALES;
              long census_females = e1267->CENSUS_FEMALES;
              long census_householdschildren = e1267->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1267->CENSUS_HISPANIC;
              long v1267 = e1267->__av;
              __SQL_SUM_AGGREGATE_323INVENTORY1_P_3.addOrDelOnZero(se4355.modify(inventory_locn), (v1266 * (v1267 * (location_sell_area_sq_ft * location_walmartdistance))));
            } while ((n1267 = n1267->nxt));
          }
          e1266 = e1266->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_324 = 0.0;
      __SQL_SUM_AGGREGATE_324INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1268 = LOCATION.head;
        while (e1268) {
          long inventory_locn = e1268->LOCATION_LOCN;
          long location_zip = e1268->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1268->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1268->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1268->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1268->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1268->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1268->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1268->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1268->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1268->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1268->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1268->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1268->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1268->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1268 = e1268->__av;
          { //slice
            const HASH_RES_t h148 = CENSUS_mapkey0_idxfn::hash(se4359.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1269 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1269 = &(i1269->buckets_[h148 % i1269->size_]);
            CENSUS_entry* e1269;
            do if ((e1269 = n1269->obj) && h148 == n1269->hash && CENSUS_mapkey0_idxfn::equals(se4359, *e1269)) {
              long census_population = e1269->CENSUS_POPULATION;
              long census_white = e1269->CENSUS_WHITE;
              long census_asian = e1269->CENSUS_ASIAN;
              long census_pacific = e1269->CENSUS_PACIFIC;
              long census_blackafrican = e1269->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1269->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1269->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1269->CENSUS_HOUSEUNITS;
              long census_families = e1269->CENSUS_FAMILIES;
              long census_households = e1269->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1269->CENSUS_HUSBWIFE;
              long census_males = e1269->CENSUS_MALES;
              long census_females = e1269->CENSUS_FEMALES;
              long census_householdschildren = e1269->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1269->CENSUS_HISPANIC;
              long v1269 = e1269->__av;
              __SQL_SUM_AGGREGATE_324INVENTORY1_P_3.addOrDelOnZero(se4358.modify(inventory_locn), (v1268 * (v1269 * (location_sell_area_sq_ft * location_walmartdrivetime))));
            } while ((n1269 = n1269->nxt));
          }
          e1268 = e1268->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_325 = 0.0;
      __SQL_SUM_AGGREGATE_325INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1270 = LOCATION.head;
        while (e1270) {
          long inventory_locn = e1270->LOCATION_LOCN;
          long location_zip = e1270->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1270->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1270->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1270->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1270->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1270->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1270->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1270->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1270->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1270->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1270->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1270->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1270->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1270->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1270 = e1270->__av;
          { //slice
            const HASH_RES_t h149 = CENSUS_mapkey0_idxfn::hash(se4362.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1271 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1271 = &(i1271->buckets_[h149 % i1271->size_]);
            CENSUS_entry* e1271;
            do if ((e1271 = n1271->obj) && h149 == n1271->hash && CENSUS_mapkey0_idxfn::equals(se4362, *e1271)) {
              long census_population = e1271->CENSUS_POPULATION;
              long census_white = e1271->CENSUS_WHITE;
              long census_asian = e1271->CENSUS_ASIAN;
              long census_pacific = e1271->CENSUS_PACIFIC;
              long census_blackafrican = e1271->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1271->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1271->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1271->CENSUS_HOUSEUNITS;
              long census_families = e1271->CENSUS_FAMILIES;
              long census_households = e1271->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1271->CENSUS_HUSBWIFE;
              long census_males = e1271->CENSUS_MALES;
              long census_females = e1271->CENSUS_FEMALES;
              long census_householdschildren = e1271->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1271->CENSUS_HISPANIC;
              long v1271 = e1271->__av;
              __SQL_SUM_AGGREGATE_325INVENTORY1_P_3.addOrDelOnZero(se4361.modify(inventory_locn), (v1270 * (v1271 * (location_sell_area_sq_ft * location_walmartsupercenterdistance))));
            } while ((n1271 = n1271->nxt));
          }
          e1270 = e1270->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_326 = 0.0;
      __SQL_SUM_AGGREGATE_326INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1272 = LOCATION.head;
        while (e1272) {
          long inventory_locn = e1272->LOCATION_LOCN;
          long location_zip = e1272->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1272->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1272->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1272->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1272->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1272->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1272->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1272->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1272->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1272->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1272->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1272->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1272->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1272->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1272 = e1272->__av;
          { //slice
            const HASH_RES_t h150 = CENSUS_mapkey0_idxfn::hash(se4365.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1273 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1273 = &(i1273->buckets_[h150 % i1273->size_]);
            CENSUS_entry* e1273;
            do if ((e1273 = n1273->obj) && h150 == n1273->hash && CENSUS_mapkey0_idxfn::equals(se4365, *e1273)) {
              long census_population = e1273->CENSUS_POPULATION;
              long census_white = e1273->CENSUS_WHITE;
              long census_asian = e1273->CENSUS_ASIAN;
              long census_pacific = e1273->CENSUS_PACIFIC;
              long census_blackafrican = e1273->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1273->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1273->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1273->CENSUS_HOUSEUNITS;
              long census_families = e1273->CENSUS_FAMILIES;
              long census_households = e1273->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1273->CENSUS_HUSBWIFE;
              long census_males = e1273->CENSUS_MALES;
              long census_females = e1273->CENSUS_FEMALES;
              long census_householdschildren = e1273->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1273->CENSUS_HISPANIC;
              long v1273 = e1273->__av;
              __SQL_SUM_AGGREGATE_326INVENTORY1_P_3.addOrDelOnZero(se4364.modify(inventory_locn), (v1272 * (v1273 * (location_sell_area_sq_ft * location_walmartsupercenterdrivetime))));
            } while ((n1273 = n1273->nxt));
          }
          e1272 = e1272->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_327 = 0.0;
      __SQL_SUM_AGGREGATE_327INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1274 = LOCATION.head;
        while (e1274) {
          long inventory_locn = e1274->LOCATION_LOCN;
          long location_zip = e1274->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1274->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1274->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1274->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1274->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1274->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1274->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1274->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1274->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1274->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1274->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1274->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1274->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1274->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1274 = e1274->__av;
          { //slice
            const HASH_RES_t h151 = CENSUS_mapkey0_idxfn::hash(se4368.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1275 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1275 = &(i1275->buckets_[h151 % i1275->size_]);
            CENSUS_entry* e1275;
            do if ((e1275 = n1275->obj) && h151 == n1275->hash && CENSUS_mapkey0_idxfn::equals(se4368, *e1275)) {
              long census_population = e1275->CENSUS_POPULATION;
              long census_white = e1275->CENSUS_WHITE;
              long census_asian = e1275->CENSUS_ASIAN;
              long census_pacific = e1275->CENSUS_PACIFIC;
              long census_blackafrican = e1275->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1275->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1275->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1275->CENSUS_HOUSEUNITS;
              long census_families = e1275->CENSUS_FAMILIES;
              long census_households = e1275->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1275->CENSUS_HUSBWIFE;
              long census_males = e1275->CENSUS_MALES;
              long census_females = e1275->CENSUS_FEMALES;
              long census_householdschildren = e1275->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1275->CENSUS_HISPANIC;
              long v1275 = e1275->__av;
              __SQL_SUM_AGGREGATE_327INVENTORY1_P_3.addOrDelOnZero(se4367.modify(inventory_locn), (v1274 * (v1275 * (location_sell_area_sq_ft * census_population))));
            } while ((n1275 = n1275->nxt));
          }
          e1274 = e1274->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_328 = 0.0;
      __SQL_SUM_AGGREGATE_328INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1276 = LOCATION.head;
        while (e1276) {
          long inventory_locn = e1276->LOCATION_LOCN;
          long location_zip = e1276->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1276->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1276->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1276->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1276->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1276->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1276->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1276->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1276->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1276->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1276->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1276->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1276->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1276->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1276 = e1276->__av;
          { //slice
            const HASH_RES_t h152 = CENSUS_mapkey0_idxfn::hash(se4371.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1277 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1277 = &(i1277->buckets_[h152 % i1277->size_]);
            CENSUS_entry* e1277;
            do if ((e1277 = n1277->obj) && h152 == n1277->hash && CENSUS_mapkey0_idxfn::equals(se4371, *e1277)) {
              long census_population = e1277->CENSUS_POPULATION;
              long census_white = e1277->CENSUS_WHITE;
              long census_asian = e1277->CENSUS_ASIAN;
              long census_pacific = e1277->CENSUS_PACIFIC;
              long census_blackafrican = e1277->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1277->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1277->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1277->CENSUS_HOUSEUNITS;
              long census_families = e1277->CENSUS_FAMILIES;
              long census_households = e1277->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1277->CENSUS_HUSBWIFE;
              long census_males = e1277->CENSUS_MALES;
              long census_females = e1277->CENSUS_FEMALES;
              long census_householdschildren = e1277->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1277->CENSUS_HISPANIC;
              long v1277 = e1277->__av;
              __SQL_SUM_AGGREGATE_328INVENTORY1_P_3.addOrDelOnZero(se4370.modify(inventory_locn), (v1276 * (v1277 * (location_sell_area_sq_ft * census_white))));
            } while ((n1277 = n1277->nxt));
          }
          e1276 = e1276->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_329 = 0.0;
      __SQL_SUM_AGGREGATE_329INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1278 = LOCATION.head;
        while (e1278) {
          long inventory_locn = e1278->LOCATION_LOCN;
          long location_zip = e1278->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1278->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1278->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1278->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1278->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1278->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1278->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1278->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1278->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1278->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1278->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1278->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1278->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1278->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1278 = e1278->__av;
          { //slice
            const HASH_RES_t h153 = CENSUS_mapkey0_idxfn::hash(se4374.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1279 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1279 = &(i1279->buckets_[h153 % i1279->size_]);
            CENSUS_entry* e1279;
            do if ((e1279 = n1279->obj) && h153 == n1279->hash && CENSUS_mapkey0_idxfn::equals(se4374, *e1279)) {
              long census_population = e1279->CENSUS_POPULATION;
              long census_white = e1279->CENSUS_WHITE;
              long census_asian = e1279->CENSUS_ASIAN;
              long census_pacific = e1279->CENSUS_PACIFIC;
              long census_blackafrican = e1279->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1279->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1279->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1279->CENSUS_HOUSEUNITS;
              long census_families = e1279->CENSUS_FAMILIES;
              long census_households = e1279->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1279->CENSUS_HUSBWIFE;
              long census_males = e1279->CENSUS_MALES;
              long census_females = e1279->CENSUS_FEMALES;
              long census_householdschildren = e1279->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1279->CENSUS_HISPANIC;
              long v1279 = e1279->__av;
              __SQL_SUM_AGGREGATE_329INVENTORY1_P_3.addOrDelOnZero(se4373.modify(inventory_locn), (v1278 * (v1279 * (location_sell_area_sq_ft * census_asian))));
            } while ((n1279 = n1279->nxt));
          }
          e1278 = e1278->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_330 = 0.0;
      __SQL_SUM_AGGREGATE_330INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1280 = LOCATION.head;
        while (e1280) {
          long inventory_locn = e1280->LOCATION_LOCN;
          long location_zip = e1280->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1280->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1280->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1280->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1280->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1280->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1280->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1280->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1280->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1280->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1280->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1280->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1280->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1280->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1280 = e1280->__av;
          { //slice
            const HASH_RES_t h154 = CENSUS_mapkey0_idxfn::hash(se4377.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1281 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1281 = &(i1281->buckets_[h154 % i1281->size_]);
            CENSUS_entry* e1281;
            do if ((e1281 = n1281->obj) && h154 == n1281->hash && CENSUS_mapkey0_idxfn::equals(se4377, *e1281)) {
              long census_population = e1281->CENSUS_POPULATION;
              long census_white = e1281->CENSUS_WHITE;
              long census_asian = e1281->CENSUS_ASIAN;
              long census_pacific = e1281->CENSUS_PACIFIC;
              long census_blackafrican = e1281->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1281->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1281->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1281->CENSUS_HOUSEUNITS;
              long census_families = e1281->CENSUS_FAMILIES;
              long census_households = e1281->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1281->CENSUS_HUSBWIFE;
              long census_males = e1281->CENSUS_MALES;
              long census_females = e1281->CENSUS_FEMALES;
              long census_householdschildren = e1281->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1281->CENSUS_HISPANIC;
              long v1281 = e1281->__av;
              __SQL_SUM_AGGREGATE_330INVENTORY1_P_3.addOrDelOnZero(se4376.modify(inventory_locn), (v1280 * (v1281 * (location_sell_area_sq_ft * census_pacific))));
            } while ((n1281 = n1281->nxt));
          }
          e1280 = e1280->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_331 = 0.0;
      __SQL_SUM_AGGREGATE_331INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1282 = LOCATION.head;
        while (e1282) {
          long inventory_locn = e1282->LOCATION_LOCN;
          long location_zip = e1282->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1282->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1282->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1282->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1282->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1282->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1282->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1282->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1282->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1282->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1282->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1282->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1282->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1282->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1282 = e1282->__av;
          { //slice
            const HASH_RES_t h155 = CENSUS_mapkey0_idxfn::hash(se4380.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1283 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1283 = &(i1283->buckets_[h155 % i1283->size_]);
            CENSUS_entry* e1283;
            do if ((e1283 = n1283->obj) && h155 == n1283->hash && CENSUS_mapkey0_idxfn::equals(se4380, *e1283)) {
              long census_population = e1283->CENSUS_POPULATION;
              long census_white = e1283->CENSUS_WHITE;
              long census_asian = e1283->CENSUS_ASIAN;
              long census_pacific = e1283->CENSUS_PACIFIC;
              long census_blackafrican = e1283->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1283->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1283->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1283->CENSUS_HOUSEUNITS;
              long census_families = e1283->CENSUS_FAMILIES;
              long census_households = e1283->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1283->CENSUS_HUSBWIFE;
              long census_males = e1283->CENSUS_MALES;
              long census_females = e1283->CENSUS_FEMALES;
              long census_householdschildren = e1283->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1283->CENSUS_HISPANIC;
              long v1283 = e1283->__av;
              __SQL_SUM_AGGREGATE_331INVENTORY1_P_3.addOrDelOnZero(se4379.modify(inventory_locn), (v1282 * (v1283 * (location_sell_area_sq_ft * census_blackafrican))));
            } while ((n1283 = n1283->nxt));
          }
          e1282 = e1282->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_332 = 0.0;
      __SQL_SUM_AGGREGATE_332INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1284 = LOCATION.head;
        while (e1284) {
          long inventory_locn = e1284->LOCATION_LOCN;
          long location_zip = e1284->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1284->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1284->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1284->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1284->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1284->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1284->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1284->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1284->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1284->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1284->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1284->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1284->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1284->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1284 = e1284->__av;
          { //slice
            const HASH_RES_t h156 = CENSUS_mapkey0_idxfn::hash(se4383.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1285 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1285 = &(i1285->buckets_[h156 % i1285->size_]);
            CENSUS_entry* e1285;
            do if ((e1285 = n1285->obj) && h156 == n1285->hash && CENSUS_mapkey0_idxfn::equals(se4383, *e1285)) {
              long census_population = e1285->CENSUS_POPULATION;
              long census_white = e1285->CENSUS_WHITE;
              long census_asian = e1285->CENSUS_ASIAN;
              long census_pacific = e1285->CENSUS_PACIFIC;
              long census_blackafrican = e1285->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1285->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1285->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1285->CENSUS_HOUSEUNITS;
              long census_families = e1285->CENSUS_FAMILIES;
              long census_households = e1285->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1285->CENSUS_HUSBWIFE;
              long census_males = e1285->CENSUS_MALES;
              long census_females = e1285->CENSUS_FEMALES;
              long census_householdschildren = e1285->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1285->CENSUS_HISPANIC;
              long v1285 = e1285->__av;
              __SQL_SUM_AGGREGATE_332INVENTORY1_P_3.addOrDelOnZero(se4382.modify(inventory_locn), (v1284 * (v1285 * (location_sell_area_sq_ft * census_medianage))));
            } while ((n1285 = n1285->nxt));
          }
          e1284 = e1284->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_333 = 0.0;
      __SQL_SUM_AGGREGATE_333INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1286 = LOCATION.head;
        while (e1286) {
          long inventory_locn = e1286->LOCATION_LOCN;
          long location_zip = e1286->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1286->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1286->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1286->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1286->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1286->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1286->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1286->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1286->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1286->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1286->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1286->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1286->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1286->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1286 = e1286->__av;
          { //slice
            const HASH_RES_t h157 = CENSUS_mapkey0_idxfn::hash(se4386.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1287 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1287 = &(i1287->buckets_[h157 % i1287->size_]);
            CENSUS_entry* e1287;
            do if ((e1287 = n1287->obj) && h157 == n1287->hash && CENSUS_mapkey0_idxfn::equals(se4386, *e1287)) {
              long census_population = e1287->CENSUS_POPULATION;
              long census_white = e1287->CENSUS_WHITE;
              long census_asian = e1287->CENSUS_ASIAN;
              long census_pacific = e1287->CENSUS_PACIFIC;
              long census_blackafrican = e1287->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1287->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1287->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1287->CENSUS_HOUSEUNITS;
              long census_families = e1287->CENSUS_FAMILIES;
              long census_households = e1287->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1287->CENSUS_HUSBWIFE;
              long census_males = e1287->CENSUS_MALES;
              long census_females = e1287->CENSUS_FEMALES;
              long census_householdschildren = e1287->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1287->CENSUS_HISPANIC;
              long v1287 = e1287->__av;
              __SQL_SUM_AGGREGATE_333INVENTORY1_P_3.addOrDelOnZero(se4385.modify(inventory_locn), (v1286 * (v1287 * (location_sell_area_sq_ft * census_occupiedhouseunits))));
            } while ((n1287 = n1287->nxt));
          }
          e1286 = e1286->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_334 = 0.0;
      __SQL_SUM_AGGREGATE_334INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1288 = LOCATION.head;
        while (e1288) {
          long inventory_locn = e1288->LOCATION_LOCN;
          long location_zip = e1288->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1288->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1288->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1288->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1288->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1288->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1288->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1288->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1288->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1288->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1288->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1288->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1288->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1288->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1288 = e1288->__av;
          { //slice
            const HASH_RES_t h158 = CENSUS_mapkey0_idxfn::hash(se4389.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1289 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1289 = &(i1289->buckets_[h158 % i1289->size_]);
            CENSUS_entry* e1289;
            do if ((e1289 = n1289->obj) && h158 == n1289->hash && CENSUS_mapkey0_idxfn::equals(se4389, *e1289)) {
              long census_population = e1289->CENSUS_POPULATION;
              long census_white = e1289->CENSUS_WHITE;
              long census_asian = e1289->CENSUS_ASIAN;
              long census_pacific = e1289->CENSUS_PACIFIC;
              long census_blackafrican = e1289->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1289->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1289->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1289->CENSUS_HOUSEUNITS;
              long census_families = e1289->CENSUS_FAMILIES;
              long census_households = e1289->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1289->CENSUS_HUSBWIFE;
              long census_males = e1289->CENSUS_MALES;
              long census_females = e1289->CENSUS_FEMALES;
              long census_householdschildren = e1289->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1289->CENSUS_HISPANIC;
              long v1289 = e1289->__av;
              __SQL_SUM_AGGREGATE_334INVENTORY1_P_3.addOrDelOnZero(se4388.modify(inventory_locn), (v1288 * (v1289 * (location_sell_area_sq_ft * census_houseunits))));
            } while ((n1289 = n1289->nxt));
          }
          e1288 = e1288->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_335 = 0.0;
      __SQL_SUM_AGGREGATE_335INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1290 = LOCATION.head;
        while (e1290) {
          long inventory_locn = e1290->LOCATION_LOCN;
          long location_zip = e1290->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1290->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1290->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1290->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1290->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1290->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1290->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1290->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1290->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1290->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1290->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1290->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1290->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1290->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1290 = e1290->__av;
          { //slice
            const HASH_RES_t h159 = CENSUS_mapkey0_idxfn::hash(se4392.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1291 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1291 = &(i1291->buckets_[h159 % i1291->size_]);
            CENSUS_entry* e1291;
            do if ((e1291 = n1291->obj) && h159 == n1291->hash && CENSUS_mapkey0_idxfn::equals(se4392, *e1291)) {
              long census_population = e1291->CENSUS_POPULATION;
              long census_white = e1291->CENSUS_WHITE;
              long census_asian = e1291->CENSUS_ASIAN;
              long census_pacific = e1291->CENSUS_PACIFIC;
              long census_blackafrican = e1291->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1291->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1291->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1291->CENSUS_HOUSEUNITS;
              long census_families = e1291->CENSUS_FAMILIES;
              long census_households = e1291->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1291->CENSUS_HUSBWIFE;
              long census_males = e1291->CENSUS_MALES;
              long census_females = e1291->CENSUS_FEMALES;
              long census_householdschildren = e1291->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1291->CENSUS_HISPANIC;
              long v1291 = e1291->__av;
              __SQL_SUM_AGGREGATE_335INVENTORY1_P_3.addOrDelOnZero(se4391.modify(inventory_locn), (v1290 * (v1291 * (location_sell_area_sq_ft * census_families))));
            } while ((n1291 = n1291->nxt));
          }
          e1290 = e1290->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_336 = 0.0;
      __SQL_SUM_AGGREGATE_336INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1292 = LOCATION.head;
        while (e1292) {
          long inventory_locn = e1292->LOCATION_LOCN;
          long location_zip = e1292->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1292->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1292->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1292->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1292->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1292->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1292->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1292->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1292->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1292->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1292->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1292->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1292->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1292->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1292 = e1292->__av;
          { //slice
            const HASH_RES_t h160 = CENSUS_mapkey0_idxfn::hash(se4395.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1293 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1293 = &(i1293->buckets_[h160 % i1293->size_]);
            CENSUS_entry* e1293;
            do if ((e1293 = n1293->obj) && h160 == n1293->hash && CENSUS_mapkey0_idxfn::equals(se4395, *e1293)) {
              long census_population = e1293->CENSUS_POPULATION;
              long census_white = e1293->CENSUS_WHITE;
              long census_asian = e1293->CENSUS_ASIAN;
              long census_pacific = e1293->CENSUS_PACIFIC;
              long census_blackafrican = e1293->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1293->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1293->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1293->CENSUS_HOUSEUNITS;
              long census_families = e1293->CENSUS_FAMILIES;
              long census_households = e1293->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1293->CENSUS_HUSBWIFE;
              long census_males = e1293->CENSUS_MALES;
              long census_females = e1293->CENSUS_FEMALES;
              long census_householdschildren = e1293->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1293->CENSUS_HISPANIC;
              long v1293 = e1293->__av;
              __SQL_SUM_AGGREGATE_336INVENTORY1_P_3.addOrDelOnZero(se4394.modify(inventory_locn), (v1292 * (v1293 * (location_sell_area_sq_ft * census_households))));
            } while ((n1293 = n1293->nxt));
          }
          e1292 = e1292->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_337 = 0.0;
      __SQL_SUM_AGGREGATE_337INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1294 = LOCATION.head;
        while (e1294) {
          long inventory_locn = e1294->LOCATION_LOCN;
          long location_zip = e1294->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1294->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1294->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1294->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1294->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1294->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1294->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1294->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1294->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1294->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1294->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1294->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1294->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1294->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1294 = e1294->__av;
          { //slice
            const HASH_RES_t h161 = CENSUS_mapkey0_idxfn::hash(se4398.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1295 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1295 = &(i1295->buckets_[h161 % i1295->size_]);
            CENSUS_entry* e1295;
            do if ((e1295 = n1295->obj) && h161 == n1295->hash && CENSUS_mapkey0_idxfn::equals(se4398, *e1295)) {
              long census_population = e1295->CENSUS_POPULATION;
              long census_white = e1295->CENSUS_WHITE;
              long census_asian = e1295->CENSUS_ASIAN;
              long census_pacific = e1295->CENSUS_PACIFIC;
              long census_blackafrican = e1295->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1295->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1295->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1295->CENSUS_HOUSEUNITS;
              long census_families = e1295->CENSUS_FAMILIES;
              long census_households = e1295->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1295->CENSUS_HUSBWIFE;
              long census_males = e1295->CENSUS_MALES;
              long census_females = e1295->CENSUS_FEMALES;
              long census_householdschildren = e1295->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1295->CENSUS_HISPANIC;
              long v1295 = e1295->__av;
              __SQL_SUM_AGGREGATE_337INVENTORY1_P_3.addOrDelOnZero(se4397.modify(inventory_locn), (v1294 * (v1295 * (location_sell_area_sq_ft * census_husbwife))));
            } while ((n1295 = n1295->nxt));
          }
          e1294 = e1294->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_338 = 0.0;
      __SQL_SUM_AGGREGATE_338INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1296 = LOCATION.head;
        while (e1296) {
          long inventory_locn = e1296->LOCATION_LOCN;
          long location_zip = e1296->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1296->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1296->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1296->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1296->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1296->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1296->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1296->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1296->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1296->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1296->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1296->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1296->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1296->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1296 = e1296->__av;
          { //slice
            const HASH_RES_t h162 = CENSUS_mapkey0_idxfn::hash(se4401.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1297 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1297 = &(i1297->buckets_[h162 % i1297->size_]);
            CENSUS_entry* e1297;
            do if ((e1297 = n1297->obj) && h162 == n1297->hash && CENSUS_mapkey0_idxfn::equals(se4401, *e1297)) {
              long census_population = e1297->CENSUS_POPULATION;
              long census_white = e1297->CENSUS_WHITE;
              long census_asian = e1297->CENSUS_ASIAN;
              long census_pacific = e1297->CENSUS_PACIFIC;
              long census_blackafrican = e1297->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1297->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1297->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1297->CENSUS_HOUSEUNITS;
              long census_families = e1297->CENSUS_FAMILIES;
              long census_households = e1297->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1297->CENSUS_HUSBWIFE;
              long census_males = e1297->CENSUS_MALES;
              long census_females = e1297->CENSUS_FEMALES;
              long census_householdschildren = e1297->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1297->CENSUS_HISPANIC;
              long v1297 = e1297->__av;
              __SQL_SUM_AGGREGATE_338INVENTORY1_P_3.addOrDelOnZero(se4400.modify(inventory_locn), (v1296 * (v1297 * (location_sell_area_sq_ft * census_males))));
            } while ((n1297 = n1297->nxt));
          }
          e1296 = e1296->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_339 = 0.0;
      __SQL_SUM_AGGREGATE_339INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1298 = LOCATION.head;
        while (e1298) {
          long inventory_locn = e1298->LOCATION_LOCN;
          long location_zip = e1298->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1298->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1298->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1298->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1298->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1298->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1298->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1298->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1298->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1298->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1298->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1298->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1298->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1298->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1298 = e1298->__av;
          { //slice
            const HASH_RES_t h163 = CENSUS_mapkey0_idxfn::hash(se4404.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1299 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1299 = &(i1299->buckets_[h163 % i1299->size_]);
            CENSUS_entry* e1299;
            do if ((e1299 = n1299->obj) && h163 == n1299->hash && CENSUS_mapkey0_idxfn::equals(se4404, *e1299)) {
              long census_population = e1299->CENSUS_POPULATION;
              long census_white = e1299->CENSUS_WHITE;
              long census_asian = e1299->CENSUS_ASIAN;
              long census_pacific = e1299->CENSUS_PACIFIC;
              long census_blackafrican = e1299->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1299->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1299->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1299->CENSUS_HOUSEUNITS;
              long census_families = e1299->CENSUS_FAMILIES;
              long census_households = e1299->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1299->CENSUS_HUSBWIFE;
              long census_males = e1299->CENSUS_MALES;
              long census_females = e1299->CENSUS_FEMALES;
              long census_householdschildren = e1299->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1299->CENSUS_HISPANIC;
              long v1299 = e1299->__av;
              __SQL_SUM_AGGREGATE_339INVENTORY1_P_3.addOrDelOnZero(se4403.modify(inventory_locn), (v1298 * (v1299 * (location_sell_area_sq_ft * census_females))));
            } while ((n1299 = n1299->nxt));
          }
          e1298 = e1298->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_340 = 0.0;
      __SQL_SUM_AGGREGATE_340INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1300 = LOCATION.head;
        while (e1300) {
          long inventory_locn = e1300->LOCATION_LOCN;
          long location_zip = e1300->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1300->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1300->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1300->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1300->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1300->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1300->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1300->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1300->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1300->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1300->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1300->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1300->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1300->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1300 = e1300->__av;
          { //slice
            const HASH_RES_t h164 = CENSUS_mapkey0_idxfn::hash(se4407.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1301 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1301 = &(i1301->buckets_[h164 % i1301->size_]);
            CENSUS_entry* e1301;
            do if ((e1301 = n1301->obj) && h164 == n1301->hash && CENSUS_mapkey0_idxfn::equals(se4407, *e1301)) {
              long census_population = e1301->CENSUS_POPULATION;
              long census_white = e1301->CENSUS_WHITE;
              long census_asian = e1301->CENSUS_ASIAN;
              long census_pacific = e1301->CENSUS_PACIFIC;
              long census_blackafrican = e1301->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1301->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1301->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1301->CENSUS_HOUSEUNITS;
              long census_families = e1301->CENSUS_FAMILIES;
              long census_households = e1301->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1301->CENSUS_HUSBWIFE;
              long census_males = e1301->CENSUS_MALES;
              long census_females = e1301->CENSUS_FEMALES;
              long census_householdschildren = e1301->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1301->CENSUS_HISPANIC;
              long v1301 = e1301->__av;
              __SQL_SUM_AGGREGATE_340INVENTORY1_P_3.addOrDelOnZero(se4406.modify(inventory_locn), (v1300 * (v1301 * (location_sell_area_sq_ft * census_householdschildren))));
            } while ((n1301 = n1301->nxt));
          }
          e1300 = e1300->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_341 = 0.0;
      __SQL_SUM_AGGREGATE_341INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1302 = LOCATION.head;
        while (e1302) {
          long inventory_locn = e1302->LOCATION_LOCN;
          long location_zip = e1302->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1302->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1302->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1302->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1302->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1302->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1302->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1302->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1302->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1302->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1302->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1302->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1302->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1302->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1302 = e1302->__av;
          { //slice
            const HASH_RES_t h165 = CENSUS_mapkey0_idxfn::hash(se4410.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1303 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1303 = &(i1303->buckets_[h165 % i1303->size_]);
            CENSUS_entry* e1303;
            do if ((e1303 = n1303->obj) && h165 == n1303->hash && CENSUS_mapkey0_idxfn::equals(se4410, *e1303)) {
              long census_population = e1303->CENSUS_POPULATION;
              long census_white = e1303->CENSUS_WHITE;
              long census_asian = e1303->CENSUS_ASIAN;
              long census_pacific = e1303->CENSUS_PACIFIC;
              long census_blackafrican = e1303->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1303->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1303->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1303->CENSUS_HOUSEUNITS;
              long census_families = e1303->CENSUS_FAMILIES;
              long census_households = e1303->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1303->CENSUS_HUSBWIFE;
              long census_males = e1303->CENSUS_MALES;
              long census_females = e1303->CENSUS_FEMALES;
              long census_householdschildren = e1303->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1303->CENSUS_HISPANIC;
              long v1303 = e1303->__av;
              __SQL_SUM_AGGREGATE_341INVENTORY1_P_3.addOrDelOnZero(se4409.modify(inventory_locn), (v1302 * (v1303 * (location_sell_area_sq_ft * census_hispanic))));
            } while ((n1303 = n1303->nxt));
          }
          e1302 = e1302->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_342 = 0.0;
      __SQL_SUM_AGGREGATE_343 = 0.0;
      __SQL_SUM_AGGREGATE_344 = 0.0;
      __SQL_SUM_AGGREGATE_345 = 0.0;
      __SQL_SUM_AGGREGATE_346 = 0.0;
      __SQL_SUM_AGGREGATE_347 = 0.0;
      __SQL_SUM_AGGREGATE_348 = 0.0;
      __SQL_SUM_AGGREGATE_349 = 0.0;
      __SQL_SUM_AGGREGATE_350 = 0.0;
      __SQL_SUM_AGGREGATE_351 = 0.0;
      __SQL_SUM_AGGREGATE_352 = 0.0;
      __SQL_SUM_AGGREGATE_352INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1304 = LOCATION.head;
        while (e1304) {
          long inventory_locn = e1304->LOCATION_LOCN;
          long location_zip = e1304->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1304->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1304->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1304->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1304->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1304->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1304->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1304->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1304->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1304->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1304->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1304->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1304->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1304->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1304 = e1304->__av;
          { //slice
            const HASH_RES_t h166 = CENSUS_mapkey0_idxfn::hash(se4423.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1305 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1305 = &(i1305->buckets_[h166 % i1305->size_]);
            CENSUS_entry* e1305;
            do if ((e1305 = n1305->obj) && h166 == n1305->hash && CENSUS_mapkey0_idxfn::equals(se4423, *e1305)) {
              long census_population = e1305->CENSUS_POPULATION;
              long census_white = e1305->CENSUS_WHITE;
              long census_asian = e1305->CENSUS_ASIAN;
              long census_pacific = e1305->CENSUS_PACIFIC;
              long census_blackafrican = e1305->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1305->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1305->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1305->CENSUS_HOUSEUNITS;
              long census_families = e1305->CENSUS_FAMILIES;
              long census_households = e1305->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1305->CENSUS_HUSBWIFE;
              long census_males = e1305->CENSUS_MALES;
              long census_females = e1305->CENSUS_FEMALES;
              long census_householdschildren = e1305->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1305->CENSUS_HISPANIC;
              long v1305 = e1305->__av;
              __SQL_SUM_AGGREGATE_352INVENTORY1_P_3.addOrDelOnZero(se4422.modify(inventory_locn), (v1304 * (v1305 * (location_avghhi * location_avghhi))));
            } while ((n1305 = n1305->nxt));
          }
          e1304 = e1304->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_353 = 0.0;
      __SQL_SUM_AGGREGATE_353INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1306 = LOCATION.head;
        while (e1306) {
          long inventory_locn = e1306->LOCATION_LOCN;
          long location_zip = e1306->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1306->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1306->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1306->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1306->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1306->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1306->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1306->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1306->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1306->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1306->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1306->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1306->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1306->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1306 = e1306->__av;
          { //slice
            const HASH_RES_t h167 = CENSUS_mapkey0_idxfn::hash(se4426.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1307 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1307 = &(i1307->buckets_[h167 % i1307->size_]);
            CENSUS_entry* e1307;
            do if ((e1307 = n1307->obj) && h167 == n1307->hash && CENSUS_mapkey0_idxfn::equals(se4426, *e1307)) {
              long census_population = e1307->CENSUS_POPULATION;
              long census_white = e1307->CENSUS_WHITE;
              long census_asian = e1307->CENSUS_ASIAN;
              long census_pacific = e1307->CENSUS_PACIFIC;
              long census_blackafrican = e1307->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1307->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1307->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1307->CENSUS_HOUSEUNITS;
              long census_families = e1307->CENSUS_FAMILIES;
              long census_households = e1307->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1307->CENSUS_HUSBWIFE;
              long census_males = e1307->CENSUS_MALES;
              long census_females = e1307->CENSUS_FEMALES;
              long census_householdschildren = e1307->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1307->CENSUS_HISPANIC;
              long v1307 = e1307->__av;
              __SQL_SUM_AGGREGATE_353INVENTORY1_P_3.addOrDelOnZero(se4425.modify(inventory_locn), (v1306 * (v1307 * (location_avghhi * location_supertargetdistance))));
            } while ((n1307 = n1307->nxt));
          }
          e1306 = e1306->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_354 = 0.0;
      __SQL_SUM_AGGREGATE_354INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1308 = LOCATION.head;
        while (e1308) {
          long inventory_locn = e1308->LOCATION_LOCN;
          long location_zip = e1308->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1308->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1308->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1308->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1308->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1308->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1308->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1308->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1308->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1308->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1308->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1308->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1308->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1308->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1308 = e1308->__av;
          { //slice
            const HASH_RES_t h168 = CENSUS_mapkey0_idxfn::hash(se4429.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1309 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1309 = &(i1309->buckets_[h168 % i1309->size_]);
            CENSUS_entry* e1309;
            do if ((e1309 = n1309->obj) && h168 == n1309->hash && CENSUS_mapkey0_idxfn::equals(se4429, *e1309)) {
              long census_population = e1309->CENSUS_POPULATION;
              long census_white = e1309->CENSUS_WHITE;
              long census_asian = e1309->CENSUS_ASIAN;
              long census_pacific = e1309->CENSUS_PACIFIC;
              long census_blackafrican = e1309->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1309->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1309->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1309->CENSUS_HOUSEUNITS;
              long census_families = e1309->CENSUS_FAMILIES;
              long census_households = e1309->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1309->CENSUS_HUSBWIFE;
              long census_males = e1309->CENSUS_MALES;
              long census_females = e1309->CENSUS_FEMALES;
              long census_householdschildren = e1309->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1309->CENSUS_HISPANIC;
              long v1309 = e1309->__av;
              __SQL_SUM_AGGREGATE_354INVENTORY1_P_3.addOrDelOnZero(se4428.modify(inventory_locn), (v1308 * (v1309 * (location_avghhi * location_supertargetdrivetime))));
            } while ((n1309 = n1309->nxt));
          }
          e1308 = e1308->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_355 = 0.0;
      __SQL_SUM_AGGREGATE_355INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1310 = LOCATION.head;
        while (e1310) {
          long inventory_locn = e1310->LOCATION_LOCN;
          long location_zip = e1310->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1310->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1310->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1310->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1310->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1310->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1310->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1310->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1310->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1310->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1310->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1310->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1310->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1310->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1310 = e1310->__av;
          { //slice
            const HASH_RES_t h169 = CENSUS_mapkey0_idxfn::hash(se4432.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1311 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1311 = &(i1311->buckets_[h169 % i1311->size_]);
            CENSUS_entry* e1311;
            do if ((e1311 = n1311->obj) && h169 == n1311->hash && CENSUS_mapkey0_idxfn::equals(se4432, *e1311)) {
              long census_population = e1311->CENSUS_POPULATION;
              long census_white = e1311->CENSUS_WHITE;
              long census_asian = e1311->CENSUS_ASIAN;
              long census_pacific = e1311->CENSUS_PACIFIC;
              long census_blackafrican = e1311->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1311->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1311->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1311->CENSUS_HOUSEUNITS;
              long census_families = e1311->CENSUS_FAMILIES;
              long census_households = e1311->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1311->CENSUS_HUSBWIFE;
              long census_males = e1311->CENSUS_MALES;
              long census_females = e1311->CENSUS_FEMALES;
              long census_householdschildren = e1311->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1311->CENSUS_HISPANIC;
              long v1311 = e1311->__av;
              __SQL_SUM_AGGREGATE_355INVENTORY1_P_3.addOrDelOnZero(se4431.modify(inventory_locn), (v1310 * (v1311 * (location_avghhi * location_targetdistance))));
            } while ((n1311 = n1311->nxt));
          }
          e1310 = e1310->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_356 = 0.0;
      __SQL_SUM_AGGREGATE_356INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1312 = LOCATION.head;
        while (e1312) {
          long inventory_locn = e1312->LOCATION_LOCN;
          long location_zip = e1312->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1312->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1312->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1312->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1312->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1312->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1312->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1312->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1312->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1312->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1312->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1312->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1312->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1312->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1312 = e1312->__av;
          { //slice
            const HASH_RES_t h170 = CENSUS_mapkey0_idxfn::hash(se4435.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1313 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1313 = &(i1313->buckets_[h170 % i1313->size_]);
            CENSUS_entry* e1313;
            do if ((e1313 = n1313->obj) && h170 == n1313->hash && CENSUS_mapkey0_idxfn::equals(se4435, *e1313)) {
              long census_population = e1313->CENSUS_POPULATION;
              long census_white = e1313->CENSUS_WHITE;
              long census_asian = e1313->CENSUS_ASIAN;
              long census_pacific = e1313->CENSUS_PACIFIC;
              long census_blackafrican = e1313->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1313->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1313->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1313->CENSUS_HOUSEUNITS;
              long census_families = e1313->CENSUS_FAMILIES;
              long census_households = e1313->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1313->CENSUS_HUSBWIFE;
              long census_males = e1313->CENSUS_MALES;
              long census_females = e1313->CENSUS_FEMALES;
              long census_householdschildren = e1313->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1313->CENSUS_HISPANIC;
              long v1313 = e1313->__av;
              __SQL_SUM_AGGREGATE_356INVENTORY1_P_3.addOrDelOnZero(se4434.modify(inventory_locn), (v1312 * (v1313 * (location_avghhi * location_targetdrivetime))));
            } while ((n1313 = n1313->nxt));
          }
          e1312 = e1312->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_357 = 0.0;
      __SQL_SUM_AGGREGATE_357INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1314 = LOCATION.head;
        while (e1314) {
          long inventory_locn = e1314->LOCATION_LOCN;
          long location_zip = e1314->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1314->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1314->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1314->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1314->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1314->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1314->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1314->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1314->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1314->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1314->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1314->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1314->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1314->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1314 = e1314->__av;
          { //slice
            const HASH_RES_t h171 = CENSUS_mapkey0_idxfn::hash(se4438.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1315 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1315 = &(i1315->buckets_[h171 % i1315->size_]);
            CENSUS_entry* e1315;
            do if ((e1315 = n1315->obj) && h171 == n1315->hash && CENSUS_mapkey0_idxfn::equals(se4438, *e1315)) {
              long census_population = e1315->CENSUS_POPULATION;
              long census_white = e1315->CENSUS_WHITE;
              long census_asian = e1315->CENSUS_ASIAN;
              long census_pacific = e1315->CENSUS_PACIFIC;
              long census_blackafrican = e1315->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1315->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1315->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1315->CENSUS_HOUSEUNITS;
              long census_families = e1315->CENSUS_FAMILIES;
              long census_households = e1315->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1315->CENSUS_HUSBWIFE;
              long census_males = e1315->CENSUS_MALES;
              long census_females = e1315->CENSUS_FEMALES;
              long census_householdschildren = e1315->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1315->CENSUS_HISPANIC;
              long v1315 = e1315->__av;
              __SQL_SUM_AGGREGATE_357INVENTORY1_P_3.addOrDelOnZero(se4437.modify(inventory_locn), (v1314 * (v1315 * (location_avghhi * location_walmartdistance))));
            } while ((n1315 = n1315->nxt));
          }
          e1314 = e1314->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_358 = 0.0;
      __SQL_SUM_AGGREGATE_358INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1316 = LOCATION.head;
        while (e1316) {
          long inventory_locn = e1316->LOCATION_LOCN;
          long location_zip = e1316->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1316->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1316->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1316->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1316->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1316->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1316->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1316->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1316->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1316->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1316->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1316->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1316->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1316->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1316 = e1316->__av;
          { //slice
            const HASH_RES_t h172 = CENSUS_mapkey0_idxfn::hash(se4441.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1317 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1317 = &(i1317->buckets_[h172 % i1317->size_]);
            CENSUS_entry* e1317;
            do if ((e1317 = n1317->obj) && h172 == n1317->hash && CENSUS_mapkey0_idxfn::equals(se4441, *e1317)) {
              long census_population = e1317->CENSUS_POPULATION;
              long census_white = e1317->CENSUS_WHITE;
              long census_asian = e1317->CENSUS_ASIAN;
              long census_pacific = e1317->CENSUS_PACIFIC;
              long census_blackafrican = e1317->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1317->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1317->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1317->CENSUS_HOUSEUNITS;
              long census_families = e1317->CENSUS_FAMILIES;
              long census_households = e1317->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1317->CENSUS_HUSBWIFE;
              long census_males = e1317->CENSUS_MALES;
              long census_females = e1317->CENSUS_FEMALES;
              long census_householdschildren = e1317->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1317->CENSUS_HISPANIC;
              long v1317 = e1317->__av;
              __SQL_SUM_AGGREGATE_358INVENTORY1_P_3.addOrDelOnZero(se4440.modify(inventory_locn), (v1316 * (v1317 * (location_avghhi * location_walmartdrivetime))));
            } while ((n1317 = n1317->nxt));
          }
          e1316 = e1316->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_359 = 0.0;
      __SQL_SUM_AGGREGATE_359INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1318 = LOCATION.head;
        while (e1318) {
          long inventory_locn = e1318->LOCATION_LOCN;
          long location_zip = e1318->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1318->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1318->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1318->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1318->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1318->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1318->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1318->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1318->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1318->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1318->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1318->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1318->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1318->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1318 = e1318->__av;
          { //slice
            const HASH_RES_t h173 = CENSUS_mapkey0_idxfn::hash(se4444.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1319 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1319 = &(i1319->buckets_[h173 % i1319->size_]);
            CENSUS_entry* e1319;
            do if ((e1319 = n1319->obj) && h173 == n1319->hash && CENSUS_mapkey0_idxfn::equals(se4444, *e1319)) {
              long census_population = e1319->CENSUS_POPULATION;
              long census_white = e1319->CENSUS_WHITE;
              long census_asian = e1319->CENSUS_ASIAN;
              long census_pacific = e1319->CENSUS_PACIFIC;
              long census_blackafrican = e1319->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1319->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1319->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1319->CENSUS_HOUSEUNITS;
              long census_families = e1319->CENSUS_FAMILIES;
              long census_households = e1319->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1319->CENSUS_HUSBWIFE;
              long census_males = e1319->CENSUS_MALES;
              long census_females = e1319->CENSUS_FEMALES;
              long census_householdschildren = e1319->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1319->CENSUS_HISPANIC;
              long v1319 = e1319->__av;
              __SQL_SUM_AGGREGATE_359INVENTORY1_P_3.addOrDelOnZero(se4443.modify(inventory_locn), (v1318 * (v1319 * (location_avghhi * location_walmartsupercenterdistance))));
            } while ((n1319 = n1319->nxt));
          }
          e1318 = e1318->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_360 = 0.0;
      __SQL_SUM_AGGREGATE_360INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1320 = LOCATION.head;
        while (e1320) {
          long inventory_locn = e1320->LOCATION_LOCN;
          long location_zip = e1320->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1320->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1320->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1320->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1320->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1320->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1320->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1320->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1320->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1320->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1320->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1320->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1320->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1320->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1320 = e1320->__av;
          { //slice
            const HASH_RES_t h174 = CENSUS_mapkey0_idxfn::hash(se4447.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1321 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1321 = &(i1321->buckets_[h174 % i1321->size_]);
            CENSUS_entry* e1321;
            do if ((e1321 = n1321->obj) && h174 == n1321->hash && CENSUS_mapkey0_idxfn::equals(se4447, *e1321)) {
              long census_population = e1321->CENSUS_POPULATION;
              long census_white = e1321->CENSUS_WHITE;
              long census_asian = e1321->CENSUS_ASIAN;
              long census_pacific = e1321->CENSUS_PACIFIC;
              long census_blackafrican = e1321->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1321->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1321->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1321->CENSUS_HOUSEUNITS;
              long census_families = e1321->CENSUS_FAMILIES;
              long census_households = e1321->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1321->CENSUS_HUSBWIFE;
              long census_males = e1321->CENSUS_MALES;
              long census_females = e1321->CENSUS_FEMALES;
              long census_householdschildren = e1321->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1321->CENSUS_HISPANIC;
              long v1321 = e1321->__av;
              __SQL_SUM_AGGREGATE_360INVENTORY1_P_3.addOrDelOnZero(se4446.modify(inventory_locn), (v1320 * (v1321 * (location_avghhi * location_walmartsupercenterdrivetime))));
            } while ((n1321 = n1321->nxt));
          }
          e1320 = e1320->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_361 = 0.0;
      __SQL_SUM_AGGREGATE_361INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1322 = LOCATION.head;
        while (e1322) {
          long inventory_locn = e1322->LOCATION_LOCN;
          long location_zip = e1322->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1322->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1322->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1322->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1322->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1322->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1322->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1322->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1322->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1322->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1322->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1322->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1322->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1322->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1322 = e1322->__av;
          { //slice
            const HASH_RES_t h175 = CENSUS_mapkey0_idxfn::hash(se4450.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1323 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1323 = &(i1323->buckets_[h175 % i1323->size_]);
            CENSUS_entry* e1323;
            do if ((e1323 = n1323->obj) && h175 == n1323->hash && CENSUS_mapkey0_idxfn::equals(se4450, *e1323)) {
              long census_population = e1323->CENSUS_POPULATION;
              long census_white = e1323->CENSUS_WHITE;
              long census_asian = e1323->CENSUS_ASIAN;
              long census_pacific = e1323->CENSUS_PACIFIC;
              long census_blackafrican = e1323->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1323->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1323->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1323->CENSUS_HOUSEUNITS;
              long census_families = e1323->CENSUS_FAMILIES;
              long census_households = e1323->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1323->CENSUS_HUSBWIFE;
              long census_males = e1323->CENSUS_MALES;
              long census_females = e1323->CENSUS_FEMALES;
              long census_householdschildren = e1323->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1323->CENSUS_HISPANIC;
              long v1323 = e1323->__av;
              __SQL_SUM_AGGREGATE_361INVENTORY1_P_3.addOrDelOnZero(se4449.modify(inventory_locn), (v1322 * (v1323 * (location_avghhi * census_population))));
            } while ((n1323 = n1323->nxt));
          }
          e1322 = e1322->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_362 = 0.0;
      __SQL_SUM_AGGREGATE_362INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1324 = LOCATION.head;
        while (e1324) {
          long inventory_locn = e1324->LOCATION_LOCN;
          long location_zip = e1324->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1324->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1324->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1324->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1324->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1324->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1324->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1324->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1324->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1324->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1324->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1324->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1324->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1324->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1324 = e1324->__av;
          { //slice
            const HASH_RES_t h176 = CENSUS_mapkey0_idxfn::hash(se4453.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1325 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1325 = &(i1325->buckets_[h176 % i1325->size_]);
            CENSUS_entry* e1325;
            do if ((e1325 = n1325->obj) && h176 == n1325->hash && CENSUS_mapkey0_idxfn::equals(se4453, *e1325)) {
              long census_population = e1325->CENSUS_POPULATION;
              long census_white = e1325->CENSUS_WHITE;
              long census_asian = e1325->CENSUS_ASIAN;
              long census_pacific = e1325->CENSUS_PACIFIC;
              long census_blackafrican = e1325->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1325->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1325->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1325->CENSUS_HOUSEUNITS;
              long census_families = e1325->CENSUS_FAMILIES;
              long census_households = e1325->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1325->CENSUS_HUSBWIFE;
              long census_males = e1325->CENSUS_MALES;
              long census_females = e1325->CENSUS_FEMALES;
              long census_householdschildren = e1325->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1325->CENSUS_HISPANIC;
              long v1325 = e1325->__av;
              __SQL_SUM_AGGREGATE_362INVENTORY1_P_3.addOrDelOnZero(se4452.modify(inventory_locn), (v1324 * (v1325 * (location_avghhi * census_white))));
            } while ((n1325 = n1325->nxt));
          }
          e1324 = e1324->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_363 = 0.0;
      __SQL_SUM_AGGREGATE_363INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1326 = LOCATION.head;
        while (e1326) {
          long inventory_locn = e1326->LOCATION_LOCN;
          long location_zip = e1326->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1326->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1326->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1326->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1326->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1326->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1326->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1326->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1326->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1326->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1326->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1326->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1326->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1326->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1326 = e1326->__av;
          { //slice
            const HASH_RES_t h177 = CENSUS_mapkey0_idxfn::hash(se4456.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1327 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1327 = &(i1327->buckets_[h177 % i1327->size_]);
            CENSUS_entry* e1327;
            do if ((e1327 = n1327->obj) && h177 == n1327->hash && CENSUS_mapkey0_idxfn::equals(se4456, *e1327)) {
              long census_population = e1327->CENSUS_POPULATION;
              long census_white = e1327->CENSUS_WHITE;
              long census_asian = e1327->CENSUS_ASIAN;
              long census_pacific = e1327->CENSUS_PACIFIC;
              long census_blackafrican = e1327->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1327->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1327->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1327->CENSUS_HOUSEUNITS;
              long census_families = e1327->CENSUS_FAMILIES;
              long census_households = e1327->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1327->CENSUS_HUSBWIFE;
              long census_males = e1327->CENSUS_MALES;
              long census_females = e1327->CENSUS_FEMALES;
              long census_householdschildren = e1327->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1327->CENSUS_HISPANIC;
              long v1327 = e1327->__av;
              __SQL_SUM_AGGREGATE_363INVENTORY1_P_3.addOrDelOnZero(se4455.modify(inventory_locn), (v1326 * (v1327 * (location_avghhi * census_asian))));
            } while ((n1327 = n1327->nxt));
          }
          e1326 = e1326->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_364 = 0.0;
      __SQL_SUM_AGGREGATE_364INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1328 = LOCATION.head;
        while (e1328) {
          long inventory_locn = e1328->LOCATION_LOCN;
          long location_zip = e1328->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1328->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1328->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1328->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1328->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1328->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1328->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1328->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1328->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1328->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1328->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1328->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1328->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1328->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1328 = e1328->__av;
          { //slice
            const HASH_RES_t h178 = CENSUS_mapkey0_idxfn::hash(se4459.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1329 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1329 = &(i1329->buckets_[h178 % i1329->size_]);
            CENSUS_entry* e1329;
            do if ((e1329 = n1329->obj) && h178 == n1329->hash && CENSUS_mapkey0_idxfn::equals(se4459, *e1329)) {
              long census_population = e1329->CENSUS_POPULATION;
              long census_white = e1329->CENSUS_WHITE;
              long census_asian = e1329->CENSUS_ASIAN;
              long census_pacific = e1329->CENSUS_PACIFIC;
              long census_blackafrican = e1329->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1329->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1329->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1329->CENSUS_HOUSEUNITS;
              long census_families = e1329->CENSUS_FAMILIES;
              long census_households = e1329->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1329->CENSUS_HUSBWIFE;
              long census_males = e1329->CENSUS_MALES;
              long census_females = e1329->CENSUS_FEMALES;
              long census_householdschildren = e1329->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1329->CENSUS_HISPANIC;
              long v1329 = e1329->__av;
              __SQL_SUM_AGGREGATE_364INVENTORY1_P_3.addOrDelOnZero(se4458.modify(inventory_locn), (v1328 * (v1329 * (location_avghhi * census_pacific))));
            } while ((n1329 = n1329->nxt));
          }
          e1328 = e1328->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_365 = 0.0;
      __SQL_SUM_AGGREGATE_365INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1330 = LOCATION.head;
        while (e1330) {
          long inventory_locn = e1330->LOCATION_LOCN;
          long location_zip = e1330->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1330->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1330->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1330->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1330->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1330->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1330->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1330->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1330->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1330->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1330->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1330->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1330->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1330->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1330 = e1330->__av;
          { //slice
            const HASH_RES_t h179 = CENSUS_mapkey0_idxfn::hash(se4462.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1331 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1331 = &(i1331->buckets_[h179 % i1331->size_]);
            CENSUS_entry* e1331;
            do if ((e1331 = n1331->obj) && h179 == n1331->hash && CENSUS_mapkey0_idxfn::equals(se4462, *e1331)) {
              long census_population = e1331->CENSUS_POPULATION;
              long census_white = e1331->CENSUS_WHITE;
              long census_asian = e1331->CENSUS_ASIAN;
              long census_pacific = e1331->CENSUS_PACIFIC;
              long census_blackafrican = e1331->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1331->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1331->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1331->CENSUS_HOUSEUNITS;
              long census_families = e1331->CENSUS_FAMILIES;
              long census_households = e1331->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1331->CENSUS_HUSBWIFE;
              long census_males = e1331->CENSUS_MALES;
              long census_females = e1331->CENSUS_FEMALES;
              long census_householdschildren = e1331->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1331->CENSUS_HISPANIC;
              long v1331 = e1331->__av;
              __SQL_SUM_AGGREGATE_365INVENTORY1_P_3.addOrDelOnZero(se4461.modify(inventory_locn), (v1330 * (v1331 * (location_avghhi * census_blackafrican))));
            } while ((n1331 = n1331->nxt));
          }
          e1330 = e1330->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_366 = 0.0;
      __SQL_SUM_AGGREGATE_366INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1332 = LOCATION.head;
        while (e1332) {
          long inventory_locn = e1332->LOCATION_LOCN;
          long location_zip = e1332->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1332->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1332->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1332->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1332->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1332->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1332->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1332->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1332->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1332->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1332->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1332->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1332->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1332->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1332 = e1332->__av;
          { //slice
            const HASH_RES_t h180 = CENSUS_mapkey0_idxfn::hash(se4465.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1333 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1333 = &(i1333->buckets_[h180 % i1333->size_]);
            CENSUS_entry* e1333;
            do if ((e1333 = n1333->obj) && h180 == n1333->hash && CENSUS_mapkey0_idxfn::equals(se4465, *e1333)) {
              long census_population = e1333->CENSUS_POPULATION;
              long census_white = e1333->CENSUS_WHITE;
              long census_asian = e1333->CENSUS_ASIAN;
              long census_pacific = e1333->CENSUS_PACIFIC;
              long census_blackafrican = e1333->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1333->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1333->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1333->CENSUS_HOUSEUNITS;
              long census_families = e1333->CENSUS_FAMILIES;
              long census_households = e1333->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1333->CENSUS_HUSBWIFE;
              long census_males = e1333->CENSUS_MALES;
              long census_females = e1333->CENSUS_FEMALES;
              long census_householdschildren = e1333->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1333->CENSUS_HISPANIC;
              long v1333 = e1333->__av;
              __SQL_SUM_AGGREGATE_366INVENTORY1_P_3.addOrDelOnZero(se4464.modify(inventory_locn), (v1332 * (v1333 * (location_avghhi * census_medianage))));
            } while ((n1333 = n1333->nxt));
          }
          e1332 = e1332->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_367 = 0.0;
      __SQL_SUM_AGGREGATE_367INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1334 = LOCATION.head;
        while (e1334) {
          long inventory_locn = e1334->LOCATION_LOCN;
          long location_zip = e1334->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1334->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1334->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1334->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1334->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1334->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1334->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1334->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1334->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1334->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1334->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1334->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1334->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1334->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1334 = e1334->__av;
          { //slice
            const HASH_RES_t h181 = CENSUS_mapkey0_idxfn::hash(se4468.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1335 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1335 = &(i1335->buckets_[h181 % i1335->size_]);
            CENSUS_entry* e1335;
            do if ((e1335 = n1335->obj) && h181 == n1335->hash && CENSUS_mapkey0_idxfn::equals(se4468, *e1335)) {
              long census_population = e1335->CENSUS_POPULATION;
              long census_white = e1335->CENSUS_WHITE;
              long census_asian = e1335->CENSUS_ASIAN;
              long census_pacific = e1335->CENSUS_PACIFIC;
              long census_blackafrican = e1335->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1335->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1335->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1335->CENSUS_HOUSEUNITS;
              long census_families = e1335->CENSUS_FAMILIES;
              long census_households = e1335->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1335->CENSUS_HUSBWIFE;
              long census_males = e1335->CENSUS_MALES;
              long census_females = e1335->CENSUS_FEMALES;
              long census_householdschildren = e1335->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1335->CENSUS_HISPANIC;
              long v1335 = e1335->__av;
              __SQL_SUM_AGGREGATE_367INVENTORY1_P_3.addOrDelOnZero(se4467.modify(inventory_locn), (v1334 * (v1335 * (location_avghhi * census_occupiedhouseunits))));
            } while ((n1335 = n1335->nxt));
          }
          e1334 = e1334->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_368 = 0.0;
      __SQL_SUM_AGGREGATE_368INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1336 = LOCATION.head;
        while (e1336) {
          long inventory_locn = e1336->LOCATION_LOCN;
          long location_zip = e1336->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1336->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1336->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1336->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1336->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1336->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1336->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1336->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1336->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1336->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1336->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1336->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1336->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1336->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1336 = e1336->__av;
          { //slice
            const HASH_RES_t h182 = CENSUS_mapkey0_idxfn::hash(se4471.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1337 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1337 = &(i1337->buckets_[h182 % i1337->size_]);
            CENSUS_entry* e1337;
            do if ((e1337 = n1337->obj) && h182 == n1337->hash && CENSUS_mapkey0_idxfn::equals(se4471, *e1337)) {
              long census_population = e1337->CENSUS_POPULATION;
              long census_white = e1337->CENSUS_WHITE;
              long census_asian = e1337->CENSUS_ASIAN;
              long census_pacific = e1337->CENSUS_PACIFIC;
              long census_blackafrican = e1337->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1337->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1337->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1337->CENSUS_HOUSEUNITS;
              long census_families = e1337->CENSUS_FAMILIES;
              long census_households = e1337->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1337->CENSUS_HUSBWIFE;
              long census_males = e1337->CENSUS_MALES;
              long census_females = e1337->CENSUS_FEMALES;
              long census_householdschildren = e1337->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1337->CENSUS_HISPANIC;
              long v1337 = e1337->__av;
              __SQL_SUM_AGGREGATE_368INVENTORY1_P_3.addOrDelOnZero(se4470.modify(inventory_locn), (v1336 * (v1337 * (location_avghhi * census_houseunits))));
            } while ((n1337 = n1337->nxt));
          }
          e1336 = e1336->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_369 = 0.0;
      __SQL_SUM_AGGREGATE_369INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1338 = LOCATION.head;
        while (e1338) {
          long inventory_locn = e1338->LOCATION_LOCN;
          long location_zip = e1338->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1338->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1338->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1338->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1338->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1338->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1338->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1338->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1338->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1338->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1338->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1338->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1338->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1338->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1338 = e1338->__av;
          { //slice
            const HASH_RES_t h183 = CENSUS_mapkey0_idxfn::hash(se4474.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1339 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1339 = &(i1339->buckets_[h183 % i1339->size_]);
            CENSUS_entry* e1339;
            do if ((e1339 = n1339->obj) && h183 == n1339->hash && CENSUS_mapkey0_idxfn::equals(se4474, *e1339)) {
              long census_population = e1339->CENSUS_POPULATION;
              long census_white = e1339->CENSUS_WHITE;
              long census_asian = e1339->CENSUS_ASIAN;
              long census_pacific = e1339->CENSUS_PACIFIC;
              long census_blackafrican = e1339->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1339->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1339->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1339->CENSUS_HOUSEUNITS;
              long census_families = e1339->CENSUS_FAMILIES;
              long census_households = e1339->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1339->CENSUS_HUSBWIFE;
              long census_males = e1339->CENSUS_MALES;
              long census_females = e1339->CENSUS_FEMALES;
              long census_householdschildren = e1339->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1339->CENSUS_HISPANIC;
              long v1339 = e1339->__av;
              __SQL_SUM_AGGREGATE_369INVENTORY1_P_3.addOrDelOnZero(se4473.modify(inventory_locn), (v1338 * (v1339 * (location_avghhi * census_families))));
            } while ((n1339 = n1339->nxt));
          }
          e1338 = e1338->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_370 = 0.0;
      __SQL_SUM_AGGREGATE_370INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1340 = LOCATION.head;
        while (e1340) {
          long inventory_locn = e1340->LOCATION_LOCN;
          long location_zip = e1340->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1340->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1340->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1340->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1340->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1340->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1340->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1340->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1340->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1340->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1340->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1340->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1340->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1340->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1340 = e1340->__av;
          { //slice
            const HASH_RES_t h184 = CENSUS_mapkey0_idxfn::hash(se4477.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1341 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1341 = &(i1341->buckets_[h184 % i1341->size_]);
            CENSUS_entry* e1341;
            do if ((e1341 = n1341->obj) && h184 == n1341->hash && CENSUS_mapkey0_idxfn::equals(se4477, *e1341)) {
              long census_population = e1341->CENSUS_POPULATION;
              long census_white = e1341->CENSUS_WHITE;
              long census_asian = e1341->CENSUS_ASIAN;
              long census_pacific = e1341->CENSUS_PACIFIC;
              long census_blackafrican = e1341->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1341->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1341->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1341->CENSUS_HOUSEUNITS;
              long census_families = e1341->CENSUS_FAMILIES;
              long census_households = e1341->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1341->CENSUS_HUSBWIFE;
              long census_males = e1341->CENSUS_MALES;
              long census_females = e1341->CENSUS_FEMALES;
              long census_householdschildren = e1341->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1341->CENSUS_HISPANIC;
              long v1341 = e1341->__av;
              __SQL_SUM_AGGREGATE_370INVENTORY1_P_3.addOrDelOnZero(se4476.modify(inventory_locn), (v1340 * (v1341 * (location_avghhi * census_households))));
            } while ((n1341 = n1341->nxt));
          }
          e1340 = e1340->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_371 = 0.0;
      __SQL_SUM_AGGREGATE_371INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1342 = LOCATION.head;
        while (e1342) {
          long inventory_locn = e1342->LOCATION_LOCN;
          long location_zip = e1342->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1342->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1342->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1342->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1342->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1342->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1342->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1342->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1342->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1342->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1342->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1342->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1342->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1342->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1342 = e1342->__av;
          { //slice
            const HASH_RES_t h185 = CENSUS_mapkey0_idxfn::hash(se4480.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1343 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1343 = &(i1343->buckets_[h185 % i1343->size_]);
            CENSUS_entry* e1343;
            do if ((e1343 = n1343->obj) && h185 == n1343->hash && CENSUS_mapkey0_idxfn::equals(se4480, *e1343)) {
              long census_population = e1343->CENSUS_POPULATION;
              long census_white = e1343->CENSUS_WHITE;
              long census_asian = e1343->CENSUS_ASIAN;
              long census_pacific = e1343->CENSUS_PACIFIC;
              long census_blackafrican = e1343->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1343->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1343->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1343->CENSUS_HOUSEUNITS;
              long census_families = e1343->CENSUS_FAMILIES;
              long census_households = e1343->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1343->CENSUS_HUSBWIFE;
              long census_males = e1343->CENSUS_MALES;
              long census_females = e1343->CENSUS_FEMALES;
              long census_householdschildren = e1343->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1343->CENSUS_HISPANIC;
              long v1343 = e1343->__av;
              __SQL_SUM_AGGREGATE_371INVENTORY1_P_3.addOrDelOnZero(se4479.modify(inventory_locn), (v1342 * (v1343 * (location_avghhi * census_husbwife))));
            } while ((n1343 = n1343->nxt));
          }
          e1342 = e1342->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_372 = 0.0;
      __SQL_SUM_AGGREGATE_372INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1344 = LOCATION.head;
        while (e1344) {
          long inventory_locn = e1344->LOCATION_LOCN;
          long location_zip = e1344->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1344->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1344->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1344->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1344->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1344->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1344->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1344->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1344->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1344->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1344->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1344->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1344->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1344->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1344 = e1344->__av;
          { //slice
            const HASH_RES_t h186 = CENSUS_mapkey0_idxfn::hash(se4483.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1345 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1345 = &(i1345->buckets_[h186 % i1345->size_]);
            CENSUS_entry* e1345;
            do if ((e1345 = n1345->obj) && h186 == n1345->hash && CENSUS_mapkey0_idxfn::equals(se4483, *e1345)) {
              long census_population = e1345->CENSUS_POPULATION;
              long census_white = e1345->CENSUS_WHITE;
              long census_asian = e1345->CENSUS_ASIAN;
              long census_pacific = e1345->CENSUS_PACIFIC;
              long census_blackafrican = e1345->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1345->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1345->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1345->CENSUS_HOUSEUNITS;
              long census_families = e1345->CENSUS_FAMILIES;
              long census_households = e1345->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1345->CENSUS_HUSBWIFE;
              long census_males = e1345->CENSUS_MALES;
              long census_females = e1345->CENSUS_FEMALES;
              long census_householdschildren = e1345->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1345->CENSUS_HISPANIC;
              long v1345 = e1345->__av;
              __SQL_SUM_AGGREGATE_372INVENTORY1_P_3.addOrDelOnZero(se4482.modify(inventory_locn), (v1344 * (v1345 * (location_avghhi * census_males))));
            } while ((n1345 = n1345->nxt));
          }
          e1344 = e1344->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_373 = 0.0;
      __SQL_SUM_AGGREGATE_373INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1346 = LOCATION.head;
        while (e1346) {
          long inventory_locn = e1346->LOCATION_LOCN;
          long location_zip = e1346->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1346->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1346->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1346->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1346->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1346->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1346->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1346->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1346->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1346->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1346->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1346->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1346->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1346->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1346 = e1346->__av;
          { //slice
            const HASH_RES_t h187 = CENSUS_mapkey0_idxfn::hash(se4486.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1347 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1347 = &(i1347->buckets_[h187 % i1347->size_]);
            CENSUS_entry* e1347;
            do if ((e1347 = n1347->obj) && h187 == n1347->hash && CENSUS_mapkey0_idxfn::equals(se4486, *e1347)) {
              long census_population = e1347->CENSUS_POPULATION;
              long census_white = e1347->CENSUS_WHITE;
              long census_asian = e1347->CENSUS_ASIAN;
              long census_pacific = e1347->CENSUS_PACIFIC;
              long census_blackafrican = e1347->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1347->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1347->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1347->CENSUS_HOUSEUNITS;
              long census_families = e1347->CENSUS_FAMILIES;
              long census_households = e1347->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1347->CENSUS_HUSBWIFE;
              long census_males = e1347->CENSUS_MALES;
              long census_females = e1347->CENSUS_FEMALES;
              long census_householdschildren = e1347->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1347->CENSUS_HISPANIC;
              long v1347 = e1347->__av;
              __SQL_SUM_AGGREGATE_373INVENTORY1_P_3.addOrDelOnZero(se4485.modify(inventory_locn), (v1346 * (v1347 * (location_avghhi * census_females))));
            } while ((n1347 = n1347->nxt));
          }
          e1346 = e1346->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_374 = 0.0;
      __SQL_SUM_AGGREGATE_374INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1348 = LOCATION.head;
        while (e1348) {
          long inventory_locn = e1348->LOCATION_LOCN;
          long location_zip = e1348->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1348->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1348->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1348->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1348->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1348->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1348->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1348->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1348->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1348->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1348->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1348->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1348->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1348->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1348 = e1348->__av;
          { //slice
            const HASH_RES_t h188 = CENSUS_mapkey0_idxfn::hash(se4489.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1349 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1349 = &(i1349->buckets_[h188 % i1349->size_]);
            CENSUS_entry* e1349;
            do if ((e1349 = n1349->obj) && h188 == n1349->hash && CENSUS_mapkey0_idxfn::equals(se4489, *e1349)) {
              long census_population = e1349->CENSUS_POPULATION;
              long census_white = e1349->CENSUS_WHITE;
              long census_asian = e1349->CENSUS_ASIAN;
              long census_pacific = e1349->CENSUS_PACIFIC;
              long census_blackafrican = e1349->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1349->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1349->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1349->CENSUS_HOUSEUNITS;
              long census_families = e1349->CENSUS_FAMILIES;
              long census_households = e1349->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1349->CENSUS_HUSBWIFE;
              long census_males = e1349->CENSUS_MALES;
              long census_females = e1349->CENSUS_FEMALES;
              long census_householdschildren = e1349->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1349->CENSUS_HISPANIC;
              long v1349 = e1349->__av;
              __SQL_SUM_AGGREGATE_374INVENTORY1_P_3.addOrDelOnZero(se4488.modify(inventory_locn), (v1348 * (v1349 * (location_avghhi * census_householdschildren))));
            } while ((n1349 = n1349->nxt));
          }
          e1348 = e1348->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_375 = 0.0;
      __SQL_SUM_AGGREGATE_375INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1350 = LOCATION.head;
        while (e1350) {
          long inventory_locn = e1350->LOCATION_LOCN;
          long location_zip = e1350->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1350->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1350->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1350->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1350->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1350->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1350->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1350->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1350->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1350->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1350->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1350->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1350->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1350->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1350 = e1350->__av;
          { //slice
            const HASH_RES_t h189 = CENSUS_mapkey0_idxfn::hash(se4492.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1351 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1351 = &(i1351->buckets_[h189 % i1351->size_]);
            CENSUS_entry* e1351;
            do if ((e1351 = n1351->obj) && h189 == n1351->hash && CENSUS_mapkey0_idxfn::equals(se4492, *e1351)) {
              long census_population = e1351->CENSUS_POPULATION;
              long census_white = e1351->CENSUS_WHITE;
              long census_asian = e1351->CENSUS_ASIAN;
              long census_pacific = e1351->CENSUS_PACIFIC;
              long census_blackafrican = e1351->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1351->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1351->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1351->CENSUS_HOUSEUNITS;
              long census_families = e1351->CENSUS_FAMILIES;
              long census_households = e1351->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1351->CENSUS_HUSBWIFE;
              long census_males = e1351->CENSUS_MALES;
              long census_females = e1351->CENSUS_FEMALES;
              long census_householdschildren = e1351->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1351->CENSUS_HISPANIC;
              long v1351 = e1351->__av;
              __SQL_SUM_AGGREGATE_375INVENTORY1_P_3.addOrDelOnZero(se4491.modify(inventory_locn), (v1350 * (v1351 * (location_avghhi * census_hispanic))));
            } while ((n1351 = n1351->nxt));
          }
          e1350 = e1350->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_376 = 0.0;
      __SQL_SUM_AGGREGATE_377 = 0.0;
      __SQL_SUM_AGGREGATE_378 = 0.0;
      __SQL_SUM_AGGREGATE_379 = 0.0;
      __SQL_SUM_AGGREGATE_380 = 0.0;
      __SQL_SUM_AGGREGATE_381 = 0.0;
      __SQL_SUM_AGGREGATE_382 = 0.0;
      __SQL_SUM_AGGREGATE_383 = 0.0;
      __SQL_SUM_AGGREGATE_384 = 0.0;
      __SQL_SUM_AGGREGATE_385 = 0.0;
      __SQL_SUM_AGGREGATE_386 = 0.0;
      __SQL_SUM_AGGREGATE_386INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1352 = LOCATION.head;
        while (e1352) {
          long inventory_locn = e1352->LOCATION_LOCN;
          long location_zip = e1352->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1352->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1352->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1352->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1352->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1352->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1352->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1352->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1352->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1352->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1352->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1352->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1352->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1352->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1352 = e1352->__av;
          { //slice
            const HASH_RES_t h190 = CENSUS_mapkey0_idxfn::hash(se4505.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1353 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1353 = &(i1353->buckets_[h190 % i1353->size_]);
            CENSUS_entry* e1353;
            do if ((e1353 = n1353->obj) && h190 == n1353->hash && CENSUS_mapkey0_idxfn::equals(se4505, *e1353)) {
              long census_population = e1353->CENSUS_POPULATION;
              long census_white = e1353->CENSUS_WHITE;
              long census_asian = e1353->CENSUS_ASIAN;
              long census_pacific = e1353->CENSUS_PACIFIC;
              long census_blackafrican = e1353->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1353->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1353->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1353->CENSUS_HOUSEUNITS;
              long census_families = e1353->CENSUS_FAMILIES;
              long census_households = e1353->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1353->CENSUS_HUSBWIFE;
              long census_males = e1353->CENSUS_MALES;
              long census_females = e1353->CENSUS_FEMALES;
              long census_householdschildren = e1353->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1353->CENSUS_HISPANIC;
              long v1353 = e1353->__av;
              __SQL_SUM_AGGREGATE_386INVENTORY1_P_3.addOrDelOnZero(se4504.modify(inventory_locn), (v1352 * (v1353 * (location_supertargetdistance * location_supertargetdistance))));
            } while ((n1353 = n1353->nxt));
          }
          e1352 = e1352->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_387 = 0.0;
      __SQL_SUM_AGGREGATE_387INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1354 = LOCATION.head;
        while (e1354) {
          long inventory_locn = e1354->LOCATION_LOCN;
          long location_zip = e1354->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1354->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1354->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1354->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1354->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1354->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1354->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1354->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1354->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1354->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1354->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1354->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1354->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1354->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1354 = e1354->__av;
          { //slice
            const HASH_RES_t h191 = CENSUS_mapkey0_idxfn::hash(se4508.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1355 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1355 = &(i1355->buckets_[h191 % i1355->size_]);
            CENSUS_entry* e1355;
            do if ((e1355 = n1355->obj) && h191 == n1355->hash && CENSUS_mapkey0_idxfn::equals(se4508, *e1355)) {
              long census_population = e1355->CENSUS_POPULATION;
              long census_white = e1355->CENSUS_WHITE;
              long census_asian = e1355->CENSUS_ASIAN;
              long census_pacific = e1355->CENSUS_PACIFIC;
              long census_blackafrican = e1355->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1355->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1355->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1355->CENSUS_HOUSEUNITS;
              long census_families = e1355->CENSUS_FAMILIES;
              long census_households = e1355->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1355->CENSUS_HUSBWIFE;
              long census_males = e1355->CENSUS_MALES;
              long census_females = e1355->CENSUS_FEMALES;
              long census_householdschildren = e1355->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1355->CENSUS_HISPANIC;
              long v1355 = e1355->__av;
              __SQL_SUM_AGGREGATE_387INVENTORY1_P_3.addOrDelOnZero(se4507.modify(inventory_locn), (v1354 * (v1355 * (location_supertargetdistance * location_supertargetdrivetime))));
            } while ((n1355 = n1355->nxt));
          }
          e1354 = e1354->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_388 = 0.0;
      __SQL_SUM_AGGREGATE_388INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1356 = LOCATION.head;
        while (e1356) {
          long inventory_locn = e1356->LOCATION_LOCN;
          long location_zip = e1356->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1356->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1356->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1356->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1356->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1356->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1356->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1356->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1356->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1356->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1356->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1356->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1356->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1356->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1356 = e1356->__av;
          { //slice
            const HASH_RES_t h192 = CENSUS_mapkey0_idxfn::hash(se4511.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1357 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1357 = &(i1357->buckets_[h192 % i1357->size_]);
            CENSUS_entry* e1357;
            do if ((e1357 = n1357->obj) && h192 == n1357->hash && CENSUS_mapkey0_idxfn::equals(se4511, *e1357)) {
              long census_population = e1357->CENSUS_POPULATION;
              long census_white = e1357->CENSUS_WHITE;
              long census_asian = e1357->CENSUS_ASIAN;
              long census_pacific = e1357->CENSUS_PACIFIC;
              long census_blackafrican = e1357->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1357->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1357->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1357->CENSUS_HOUSEUNITS;
              long census_families = e1357->CENSUS_FAMILIES;
              long census_households = e1357->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1357->CENSUS_HUSBWIFE;
              long census_males = e1357->CENSUS_MALES;
              long census_females = e1357->CENSUS_FEMALES;
              long census_householdschildren = e1357->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1357->CENSUS_HISPANIC;
              long v1357 = e1357->__av;
              __SQL_SUM_AGGREGATE_388INVENTORY1_P_3.addOrDelOnZero(se4510.modify(inventory_locn), (v1356 * (v1357 * (location_supertargetdistance * location_targetdistance))));
            } while ((n1357 = n1357->nxt));
          }
          e1356 = e1356->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_389 = 0.0;
      __SQL_SUM_AGGREGATE_389INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1358 = LOCATION.head;
        while (e1358) {
          long inventory_locn = e1358->LOCATION_LOCN;
          long location_zip = e1358->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1358->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1358->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1358->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1358->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1358->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1358->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1358->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1358->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1358->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1358->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1358->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1358->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1358->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1358 = e1358->__av;
          { //slice
            const HASH_RES_t h193 = CENSUS_mapkey0_idxfn::hash(se4514.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1359 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1359 = &(i1359->buckets_[h193 % i1359->size_]);
            CENSUS_entry* e1359;
            do if ((e1359 = n1359->obj) && h193 == n1359->hash && CENSUS_mapkey0_idxfn::equals(se4514, *e1359)) {
              long census_population = e1359->CENSUS_POPULATION;
              long census_white = e1359->CENSUS_WHITE;
              long census_asian = e1359->CENSUS_ASIAN;
              long census_pacific = e1359->CENSUS_PACIFIC;
              long census_blackafrican = e1359->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1359->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1359->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1359->CENSUS_HOUSEUNITS;
              long census_families = e1359->CENSUS_FAMILIES;
              long census_households = e1359->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1359->CENSUS_HUSBWIFE;
              long census_males = e1359->CENSUS_MALES;
              long census_females = e1359->CENSUS_FEMALES;
              long census_householdschildren = e1359->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1359->CENSUS_HISPANIC;
              long v1359 = e1359->__av;
              __SQL_SUM_AGGREGATE_389INVENTORY1_P_3.addOrDelOnZero(se4513.modify(inventory_locn), (v1358 * (v1359 * (location_supertargetdistance * location_targetdrivetime))));
            } while ((n1359 = n1359->nxt));
          }
          e1358 = e1358->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_390 = 0.0;
      __SQL_SUM_AGGREGATE_390INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1360 = LOCATION.head;
        while (e1360) {
          long inventory_locn = e1360->LOCATION_LOCN;
          long location_zip = e1360->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1360->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1360->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1360->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1360->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1360->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1360->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1360->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1360->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1360->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1360->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1360->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1360->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1360->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1360 = e1360->__av;
          { //slice
            const HASH_RES_t h194 = CENSUS_mapkey0_idxfn::hash(se4517.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1361 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1361 = &(i1361->buckets_[h194 % i1361->size_]);
            CENSUS_entry* e1361;
            do if ((e1361 = n1361->obj) && h194 == n1361->hash && CENSUS_mapkey0_idxfn::equals(se4517, *e1361)) {
              long census_population = e1361->CENSUS_POPULATION;
              long census_white = e1361->CENSUS_WHITE;
              long census_asian = e1361->CENSUS_ASIAN;
              long census_pacific = e1361->CENSUS_PACIFIC;
              long census_blackafrican = e1361->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1361->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1361->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1361->CENSUS_HOUSEUNITS;
              long census_families = e1361->CENSUS_FAMILIES;
              long census_households = e1361->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1361->CENSUS_HUSBWIFE;
              long census_males = e1361->CENSUS_MALES;
              long census_females = e1361->CENSUS_FEMALES;
              long census_householdschildren = e1361->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1361->CENSUS_HISPANIC;
              long v1361 = e1361->__av;
              __SQL_SUM_AGGREGATE_390INVENTORY1_P_3.addOrDelOnZero(se4516.modify(inventory_locn), (v1360 * (v1361 * (location_supertargetdistance * location_walmartdistance))));
            } while ((n1361 = n1361->nxt));
          }
          e1360 = e1360->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_391 = 0.0;
      __SQL_SUM_AGGREGATE_391INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1362 = LOCATION.head;
        while (e1362) {
          long inventory_locn = e1362->LOCATION_LOCN;
          long location_zip = e1362->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1362->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1362->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1362->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1362->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1362->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1362->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1362->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1362->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1362->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1362->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1362->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1362->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1362->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1362 = e1362->__av;
          { //slice
            const HASH_RES_t h195 = CENSUS_mapkey0_idxfn::hash(se4520.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1363 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1363 = &(i1363->buckets_[h195 % i1363->size_]);
            CENSUS_entry* e1363;
            do if ((e1363 = n1363->obj) && h195 == n1363->hash && CENSUS_mapkey0_idxfn::equals(se4520, *e1363)) {
              long census_population = e1363->CENSUS_POPULATION;
              long census_white = e1363->CENSUS_WHITE;
              long census_asian = e1363->CENSUS_ASIAN;
              long census_pacific = e1363->CENSUS_PACIFIC;
              long census_blackafrican = e1363->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1363->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1363->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1363->CENSUS_HOUSEUNITS;
              long census_families = e1363->CENSUS_FAMILIES;
              long census_households = e1363->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1363->CENSUS_HUSBWIFE;
              long census_males = e1363->CENSUS_MALES;
              long census_females = e1363->CENSUS_FEMALES;
              long census_householdschildren = e1363->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1363->CENSUS_HISPANIC;
              long v1363 = e1363->__av;
              __SQL_SUM_AGGREGATE_391INVENTORY1_P_3.addOrDelOnZero(se4519.modify(inventory_locn), (v1362 * (v1363 * (location_supertargetdistance * location_walmartdrivetime))));
            } while ((n1363 = n1363->nxt));
          }
          e1362 = e1362->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_392 = 0.0;
      __SQL_SUM_AGGREGATE_392INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1364 = LOCATION.head;
        while (e1364) {
          long inventory_locn = e1364->LOCATION_LOCN;
          long location_zip = e1364->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1364->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1364->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1364->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1364->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1364->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1364->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1364->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1364->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1364->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1364->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1364->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1364->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1364->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1364 = e1364->__av;
          { //slice
            const HASH_RES_t h196 = CENSUS_mapkey0_idxfn::hash(se4523.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1365 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1365 = &(i1365->buckets_[h196 % i1365->size_]);
            CENSUS_entry* e1365;
            do if ((e1365 = n1365->obj) && h196 == n1365->hash && CENSUS_mapkey0_idxfn::equals(se4523, *e1365)) {
              long census_population = e1365->CENSUS_POPULATION;
              long census_white = e1365->CENSUS_WHITE;
              long census_asian = e1365->CENSUS_ASIAN;
              long census_pacific = e1365->CENSUS_PACIFIC;
              long census_blackafrican = e1365->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1365->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1365->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1365->CENSUS_HOUSEUNITS;
              long census_families = e1365->CENSUS_FAMILIES;
              long census_households = e1365->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1365->CENSUS_HUSBWIFE;
              long census_males = e1365->CENSUS_MALES;
              long census_females = e1365->CENSUS_FEMALES;
              long census_householdschildren = e1365->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1365->CENSUS_HISPANIC;
              long v1365 = e1365->__av;
              __SQL_SUM_AGGREGATE_392INVENTORY1_P_3.addOrDelOnZero(se4522.modify(inventory_locn), (v1364 * (v1365 * (location_supertargetdistance * location_walmartsupercenterdistance))));
            } while ((n1365 = n1365->nxt));
          }
          e1364 = e1364->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_393 = 0.0;
      __SQL_SUM_AGGREGATE_393INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1366 = LOCATION.head;
        while (e1366) {
          long inventory_locn = e1366->LOCATION_LOCN;
          long location_zip = e1366->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1366->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1366->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1366->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1366->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1366->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1366->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1366->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1366->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1366->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1366->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1366->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1366->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1366->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1366 = e1366->__av;
          { //slice
            const HASH_RES_t h197 = CENSUS_mapkey0_idxfn::hash(se4526.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1367 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1367 = &(i1367->buckets_[h197 % i1367->size_]);
            CENSUS_entry* e1367;
            do if ((e1367 = n1367->obj) && h197 == n1367->hash && CENSUS_mapkey0_idxfn::equals(se4526, *e1367)) {
              long census_population = e1367->CENSUS_POPULATION;
              long census_white = e1367->CENSUS_WHITE;
              long census_asian = e1367->CENSUS_ASIAN;
              long census_pacific = e1367->CENSUS_PACIFIC;
              long census_blackafrican = e1367->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1367->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1367->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1367->CENSUS_HOUSEUNITS;
              long census_families = e1367->CENSUS_FAMILIES;
              long census_households = e1367->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1367->CENSUS_HUSBWIFE;
              long census_males = e1367->CENSUS_MALES;
              long census_females = e1367->CENSUS_FEMALES;
              long census_householdschildren = e1367->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1367->CENSUS_HISPANIC;
              long v1367 = e1367->__av;
              __SQL_SUM_AGGREGATE_393INVENTORY1_P_3.addOrDelOnZero(se4525.modify(inventory_locn), (v1366 * (v1367 * (location_supertargetdistance * location_walmartsupercenterdrivetime))));
            } while ((n1367 = n1367->nxt));
          }
          e1366 = e1366->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_394 = 0.0;
      __SQL_SUM_AGGREGATE_394INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1368 = LOCATION.head;
        while (e1368) {
          long inventory_locn = e1368->LOCATION_LOCN;
          long location_zip = e1368->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1368->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1368->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1368->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1368->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1368->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1368->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1368->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1368->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1368->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1368->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1368->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1368->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1368->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1368 = e1368->__av;
          { //slice
            const HASH_RES_t h198 = CENSUS_mapkey0_idxfn::hash(se4529.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1369 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1369 = &(i1369->buckets_[h198 % i1369->size_]);
            CENSUS_entry* e1369;
            do if ((e1369 = n1369->obj) && h198 == n1369->hash && CENSUS_mapkey0_idxfn::equals(se4529, *e1369)) {
              long census_population = e1369->CENSUS_POPULATION;
              long census_white = e1369->CENSUS_WHITE;
              long census_asian = e1369->CENSUS_ASIAN;
              long census_pacific = e1369->CENSUS_PACIFIC;
              long census_blackafrican = e1369->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1369->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1369->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1369->CENSUS_HOUSEUNITS;
              long census_families = e1369->CENSUS_FAMILIES;
              long census_households = e1369->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1369->CENSUS_HUSBWIFE;
              long census_males = e1369->CENSUS_MALES;
              long census_females = e1369->CENSUS_FEMALES;
              long census_householdschildren = e1369->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1369->CENSUS_HISPANIC;
              long v1369 = e1369->__av;
              __SQL_SUM_AGGREGATE_394INVENTORY1_P_3.addOrDelOnZero(se4528.modify(inventory_locn), (v1368 * (v1369 * (location_supertargetdistance * census_population))));
            } while ((n1369 = n1369->nxt));
          }
          e1368 = e1368->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_395 = 0.0;
      __SQL_SUM_AGGREGATE_395INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1370 = LOCATION.head;
        while (e1370) {
          long inventory_locn = e1370->LOCATION_LOCN;
          long location_zip = e1370->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1370->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1370->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1370->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1370->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1370->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1370->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1370->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1370->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1370->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1370->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1370->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1370->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1370->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1370 = e1370->__av;
          { //slice
            const HASH_RES_t h199 = CENSUS_mapkey0_idxfn::hash(se4532.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1371 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1371 = &(i1371->buckets_[h199 % i1371->size_]);
            CENSUS_entry* e1371;
            do if ((e1371 = n1371->obj) && h199 == n1371->hash && CENSUS_mapkey0_idxfn::equals(se4532, *e1371)) {
              long census_population = e1371->CENSUS_POPULATION;
              long census_white = e1371->CENSUS_WHITE;
              long census_asian = e1371->CENSUS_ASIAN;
              long census_pacific = e1371->CENSUS_PACIFIC;
              long census_blackafrican = e1371->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1371->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1371->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1371->CENSUS_HOUSEUNITS;
              long census_families = e1371->CENSUS_FAMILIES;
              long census_households = e1371->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1371->CENSUS_HUSBWIFE;
              long census_males = e1371->CENSUS_MALES;
              long census_females = e1371->CENSUS_FEMALES;
              long census_householdschildren = e1371->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1371->CENSUS_HISPANIC;
              long v1371 = e1371->__av;
              __SQL_SUM_AGGREGATE_395INVENTORY1_P_3.addOrDelOnZero(se4531.modify(inventory_locn), (v1370 * (v1371 * (location_supertargetdistance * census_white))));
            } while ((n1371 = n1371->nxt));
          }
          e1370 = e1370->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_396 = 0.0;
      __SQL_SUM_AGGREGATE_396INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1372 = LOCATION.head;
        while (e1372) {
          long inventory_locn = e1372->LOCATION_LOCN;
          long location_zip = e1372->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1372->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1372->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1372->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1372->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1372->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1372->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1372->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1372->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1372->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1372->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1372->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1372->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1372->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1372 = e1372->__av;
          { //slice
            const HASH_RES_t h200 = CENSUS_mapkey0_idxfn::hash(se4535.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1373 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1373 = &(i1373->buckets_[h200 % i1373->size_]);
            CENSUS_entry* e1373;
            do if ((e1373 = n1373->obj) && h200 == n1373->hash && CENSUS_mapkey0_idxfn::equals(se4535, *e1373)) {
              long census_population = e1373->CENSUS_POPULATION;
              long census_white = e1373->CENSUS_WHITE;
              long census_asian = e1373->CENSUS_ASIAN;
              long census_pacific = e1373->CENSUS_PACIFIC;
              long census_blackafrican = e1373->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1373->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1373->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1373->CENSUS_HOUSEUNITS;
              long census_families = e1373->CENSUS_FAMILIES;
              long census_households = e1373->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1373->CENSUS_HUSBWIFE;
              long census_males = e1373->CENSUS_MALES;
              long census_females = e1373->CENSUS_FEMALES;
              long census_householdschildren = e1373->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1373->CENSUS_HISPANIC;
              long v1373 = e1373->__av;
              __SQL_SUM_AGGREGATE_396INVENTORY1_P_3.addOrDelOnZero(se4534.modify(inventory_locn), (v1372 * (v1373 * (location_supertargetdistance * census_asian))));
            } while ((n1373 = n1373->nxt));
          }
          e1372 = e1372->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_397 = 0.0;
      __SQL_SUM_AGGREGATE_397INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1374 = LOCATION.head;
        while (e1374) {
          long inventory_locn = e1374->LOCATION_LOCN;
          long location_zip = e1374->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1374->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1374->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1374->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1374->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1374->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1374->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1374->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1374->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1374->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1374->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1374->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1374->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1374->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1374 = e1374->__av;
          { //slice
            const HASH_RES_t h201 = CENSUS_mapkey0_idxfn::hash(se4538.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1375 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1375 = &(i1375->buckets_[h201 % i1375->size_]);
            CENSUS_entry* e1375;
            do if ((e1375 = n1375->obj) && h201 == n1375->hash && CENSUS_mapkey0_idxfn::equals(se4538, *e1375)) {
              long census_population = e1375->CENSUS_POPULATION;
              long census_white = e1375->CENSUS_WHITE;
              long census_asian = e1375->CENSUS_ASIAN;
              long census_pacific = e1375->CENSUS_PACIFIC;
              long census_blackafrican = e1375->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1375->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1375->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1375->CENSUS_HOUSEUNITS;
              long census_families = e1375->CENSUS_FAMILIES;
              long census_households = e1375->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1375->CENSUS_HUSBWIFE;
              long census_males = e1375->CENSUS_MALES;
              long census_females = e1375->CENSUS_FEMALES;
              long census_householdschildren = e1375->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1375->CENSUS_HISPANIC;
              long v1375 = e1375->__av;
              __SQL_SUM_AGGREGATE_397INVENTORY1_P_3.addOrDelOnZero(se4537.modify(inventory_locn), (v1374 * (v1375 * (location_supertargetdistance * census_pacific))));
            } while ((n1375 = n1375->nxt));
          }
          e1374 = e1374->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_398 = 0.0;
      __SQL_SUM_AGGREGATE_398INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1376 = LOCATION.head;
        while (e1376) {
          long inventory_locn = e1376->LOCATION_LOCN;
          long location_zip = e1376->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1376->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1376->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1376->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1376->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1376->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1376->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1376->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1376->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1376->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1376->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1376->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1376->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1376->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1376 = e1376->__av;
          { //slice
            const HASH_RES_t h202 = CENSUS_mapkey0_idxfn::hash(se4541.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1377 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1377 = &(i1377->buckets_[h202 % i1377->size_]);
            CENSUS_entry* e1377;
            do if ((e1377 = n1377->obj) && h202 == n1377->hash && CENSUS_mapkey0_idxfn::equals(se4541, *e1377)) {
              long census_population = e1377->CENSUS_POPULATION;
              long census_white = e1377->CENSUS_WHITE;
              long census_asian = e1377->CENSUS_ASIAN;
              long census_pacific = e1377->CENSUS_PACIFIC;
              long census_blackafrican = e1377->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1377->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1377->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1377->CENSUS_HOUSEUNITS;
              long census_families = e1377->CENSUS_FAMILIES;
              long census_households = e1377->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1377->CENSUS_HUSBWIFE;
              long census_males = e1377->CENSUS_MALES;
              long census_females = e1377->CENSUS_FEMALES;
              long census_householdschildren = e1377->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1377->CENSUS_HISPANIC;
              long v1377 = e1377->__av;
              __SQL_SUM_AGGREGATE_398INVENTORY1_P_3.addOrDelOnZero(se4540.modify(inventory_locn), (v1376 * (v1377 * (location_supertargetdistance * census_blackafrican))));
            } while ((n1377 = n1377->nxt));
          }
          e1376 = e1376->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_399 = 0.0;
      __SQL_SUM_AGGREGATE_399INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1378 = LOCATION.head;
        while (e1378) {
          long inventory_locn = e1378->LOCATION_LOCN;
          long location_zip = e1378->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1378->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1378->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1378->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1378->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1378->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1378->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1378->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1378->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1378->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1378->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1378->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1378->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1378->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1378 = e1378->__av;
          { //slice
            const HASH_RES_t h203 = CENSUS_mapkey0_idxfn::hash(se4544.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1379 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1379 = &(i1379->buckets_[h203 % i1379->size_]);
            CENSUS_entry* e1379;
            do if ((e1379 = n1379->obj) && h203 == n1379->hash && CENSUS_mapkey0_idxfn::equals(se4544, *e1379)) {
              long census_population = e1379->CENSUS_POPULATION;
              long census_white = e1379->CENSUS_WHITE;
              long census_asian = e1379->CENSUS_ASIAN;
              long census_pacific = e1379->CENSUS_PACIFIC;
              long census_blackafrican = e1379->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1379->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1379->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1379->CENSUS_HOUSEUNITS;
              long census_families = e1379->CENSUS_FAMILIES;
              long census_households = e1379->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1379->CENSUS_HUSBWIFE;
              long census_males = e1379->CENSUS_MALES;
              long census_females = e1379->CENSUS_FEMALES;
              long census_householdschildren = e1379->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1379->CENSUS_HISPANIC;
              long v1379 = e1379->__av;
              __SQL_SUM_AGGREGATE_399INVENTORY1_P_3.addOrDelOnZero(se4543.modify(inventory_locn), (v1378 * (v1379 * (location_supertargetdistance * census_medianage))));
            } while ((n1379 = n1379->nxt));
          }
          e1378 = e1378->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_400 = 0.0;
      __SQL_SUM_AGGREGATE_400INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1380 = LOCATION.head;
        while (e1380) {
          long inventory_locn = e1380->LOCATION_LOCN;
          long location_zip = e1380->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1380->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1380->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1380->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1380->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1380->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1380->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1380->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1380->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1380->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1380->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1380->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1380->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1380->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1380 = e1380->__av;
          { //slice
            const HASH_RES_t h204 = CENSUS_mapkey0_idxfn::hash(se4547.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1381 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1381 = &(i1381->buckets_[h204 % i1381->size_]);
            CENSUS_entry* e1381;
            do if ((e1381 = n1381->obj) && h204 == n1381->hash && CENSUS_mapkey0_idxfn::equals(se4547, *e1381)) {
              long census_population = e1381->CENSUS_POPULATION;
              long census_white = e1381->CENSUS_WHITE;
              long census_asian = e1381->CENSUS_ASIAN;
              long census_pacific = e1381->CENSUS_PACIFIC;
              long census_blackafrican = e1381->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1381->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1381->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1381->CENSUS_HOUSEUNITS;
              long census_families = e1381->CENSUS_FAMILIES;
              long census_households = e1381->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1381->CENSUS_HUSBWIFE;
              long census_males = e1381->CENSUS_MALES;
              long census_females = e1381->CENSUS_FEMALES;
              long census_householdschildren = e1381->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1381->CENSUS_HISPANIC;
              long v1381 = e1381->__av;
              __SQL_SUM_AGGREGATE_400INVENTORY1_P_3.addOrDelOnZero(se4546.modify(inventory_locn), (v1380 * (v1381 * (location_supertargetdistance * census_occupiedhouseunits))));
            } while ((n1381 = n1381->nxt));
          }
          e1380 = e1380->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_401 = 0.0;
      __SQL_SUM_AGGREGATE_401INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1382 = LOCATION.head;
        while (e1382) {
          long inventory_locn = e1382->LOCATION_LOCN;
          long location_zip = e1382->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1382->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1382->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1382->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1382->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1382->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1382->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1382->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1382->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1382->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1382->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1382->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1382->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1382->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1382 = e1382->__av;
          { //slice
            const HASH_RES_t h205 = CENSUS_mapkey0_idxfn::hash(se4550.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1383 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1383 = &(i1383->buckets_[h205 % i1383->size_]);
            CENSUS_entry* e1383;
            do if ((e1383 = n1383->obj) && h205 == n1383->hash && CENSUS_mapkey0_idxfn::equals(se4550, *e1383)) {
              long census_population = e1383->CENSUS_POPULATION;
              long census_white = e1383->CENSUS_WHITE;
              long census_asian = e1383->CENSUS_ASIAN;
              long census_pacific = e1383->CENSUS_PACIFIC;
              long census_blackafrican = e1383->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1383->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1383->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1383->CENSUS_HOUSEUNITS;
              long census_families = e1383->CENSUS_FAMILIES;
              long census_households = e1383->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1383->CENSUS_HUSBWIFE;
              long census_males = e1383->CENSUS_MALES;
              long census_females = e1383->CENSUS_FEMALES;
              long census_householdschildren = e1383->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1383->CENSUS_HISPANIC;
              long v1383 = e1383->__av;
              __SQL_SUM_AGGREGATE_401INVENTORY1_P_3.addOrDelOnZero(se4549.modify(inventory_locn), (v1382 * (v1383 * (location_supertargetdistance * census_houseunits))));
            } while ((n1383 = n1383->nxt));
          }
          e1382 = e1382->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_402 = 0.0;
      __SQL_SUM_AGGREGATE_402INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1384 = LOCATION.head;
        while (e1384) {
          long inventory_locn = e1384->LOCATION_LOCN;
          long location_zip = e1384->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1384->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1384->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1384->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1384->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1384->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1384->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1384->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1384->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1384->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1384->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1384->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1384->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1384->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1384 = e1384->__av;
          { //slice
            const HASH_RES_t h206 = CENSUS_mapkey0_idxfn::hash(se4553.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1385 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1385 = &(i1385->buckets_[h206 % i1385->size_]);
            CENSUS_entry* e1385;
            do if ((e1385 = n1385->obj) && h206 == n1385->hash && CENSUS_mapkey0_idxfn::equals(se4553, *e1385)) {
              long census_population = e1385->CENSUS_POPULATION;
              long census_white = e1385->CENSUS_WHITE;
              long census_asian = e1385->CENSUS_ASIAN;
              long census_pacific = e1385->CENSUS_PACIFIC;
              long census_blackafrican = e1385->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1385->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1385->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1385->CENSUS_HOUSEUNITS;
              long census_families = e1385->CENSUS_FAMILIES;
              long census_households = e1385->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1385->CENSUS_HUSBWIFE;
              long census_males = e1385->CENSUS_MALES;
              long census_females = e1385->CENSUS_FEMALES;
              long census_householdschildren = e1385->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1385->CENSUS_HISPANIC;
              long v1385 = e1385->__av;
              __SQL_SUM_AGGREGATE_402INVENTORY1_P_3.addOrDelOnZero(se4552.modify(inventory_locn), (v1384 * (v1385 * (location_supertargetdistance * census_families))));
            } while ((n1385 = n1385->nxt));
          }
          e1384 = e1384->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_403 = 0.0;
      __SQL_SUM_AGGREGATE_403INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1386 = LOCATION.head;
        while (e1386) {
          long inventory_locn = e1386->LOCATION_LOCN;
          long location_zip = e1386->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1386->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1386->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1386->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1386->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1386->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1386->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1386->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1386->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1386->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1386->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1386->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1386->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1386->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1386 = e1386->__av;
          { //slice
            const HASH_RES_t h207 = CENSUS_mapkey0_idxfn::hash(se4556.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1387 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1387 = &(i1387->buckets_[h207 % i1387->size_]);
            CENSUS_entry* e1387;
            do if ((e1387 = n1387->obj) && h207 == n1387->hash && CENSUS_mapkey0_idxfn::equals(se4556, *e1387)) {
              long census_population = e1387->CENSUS_POPULATION;
              long census_white = e1387->CENSUS_WHITE;
              long census_asian = e1387->CENSUS_ASIAN;
              long census_pacific = e1387->CENSUS_PACIFIC;
              long census_blackafrican = e1387->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1387->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1387->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1387->CENSUS_HOUSEUNITS;
              long census_families = e1387->CENSUS_FAMILIES;
              long census_households = e1387->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1387->CENSUS_HUSBWIFE;
              long census_males = e1387->CENSUS_MALES;
              long census_females = e1387->CENSUS_FEMALES;
              long census_householdschildren = e1387->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1387->CENSUS_HISPANIC;
              long v1387 = e1387->__av;
              __SQL_SUM_AGGREGATE_403INVENTORY1_P_3.addOrDelOnZero(se4555.modify(inventory_locn), (v1386 * (v1387 * (location_supertargetdistance * census_households))));
            } while ((n1387 = n1387->nxt));
          }
          e1386 = e1386->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_404 = 0.0;
      __SQL_SUM_AGGREGATE_404INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1388 = LOCATION.head;
        while (e1388) {
          long inventory_locn = e1388->LOCATION_LOCN;
          long location_zip = e1388->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1388->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1388->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1388->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1388->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1388->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1388->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1388->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1388->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1388->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1388->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1388->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1388->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1388->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1388 = e1388->__av;
          { //slice
            const HASH_RES_t h208 = CENSUS_mapkey0_idxfn::hash(se4559.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1389 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1389 = &(i1389->buckets_[h208 % i1389->size_]);
            CENSUS_entry* e1389;
            do if ((e1389 = n1389->obj) && h208 == n1389->hash && CENSUS_mapkey0_idxfn::equals(se4559, *e1389)) {
              long census_population = e1389->CENSUS_POPULATION;
              long census_white = e1389->CENSUS_WHITE;
              long census_asian = e1389->CENSUS_ASIAN;
              long census_pacific = e1389->CENSUS_PACIFIC;
              long census_blackafrican = e1389->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1389->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1389->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1389->CENSUS_HOUSEUNITS;
              long census_families = e1389->CENSUS_FAMILIES;
              long census_households = e1389->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1389->CENSUS_HUSBWIFE;
              long census_males = e1389->CENSUS_MALES;
              long census_females = e1389->CENSUS_FEMALES;
              long census_householdschildren = e1389->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1389->CENSUS_HISPANIC;
              long v1389 = e1389->__av;
              __SQL_SUM_AGGREGATE_404INVENTORY1_P_3.addOrDelOnZero(se4558.modify(inventory_locn), (v1388 * (v1389 * (location_supertargetdistance * census_husbwife))));
            } while ((n1389 = n1389->nxt));
          }
          e1388 = e1388->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_405 = 0.0;
      __SQL_SUM_AGGREGATE_405INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1390 = LOCATION.head;
        while (e1390) {
          long inventory_locn = e1390->LOCATION_LOCN;
          long location_zip = e1390->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1390->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1390->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1390->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1390->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1390->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1390->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1390->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1390->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1390->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1390->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1390->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1390->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1390->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1390 = e1390->__av;
          { //slice
            const HASH_RES_t h209 = CENSUS_mapkey0_idxfn::hash(se4562.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1391 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1391 = &(i1391->buckets_[h209 % i1391->size_]);
            CENSUS_entry* e1391;
            do if ((e1391 = n1391->obj) && h209 == n1391->hash && CENSUS_mapkey0_idxfn::equals(se4562, *e1391)) {
              long census_population = e1391->CENSUS_POPULATION;
              long census_white = e1391->CENSUS_WHITE;
              long census_asian = e1391->CENSUS_ASIAN;
              long census_pacific = e1391->CENSUS_PACIFIC;
              long census_blackafrican = e1391->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1391->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1391->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1391->CENSUS_HOUSEUNITS;
              long census_families = e1391->CENSUS_FAMILIES;
              long census_households = e1391->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1391->CENSUS_HUSBWIFE;
              long census_males = e1391->CENSUS_MALES;
              long census_females = e1391->CENSUS_FEMALES;
              long census_householdschildren = e1391->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1391->CENSUS_HISPANIC;
              long v1391 = e1391->__av;
              __SQL_SUM_AGGREGATE_405INVENTORY1_P_3.addOrDelOnZero(se4561.modify(inventory_locn), (v1390 * (v1391 * (location_supertargetdistance * census_males))));
            } while ((n1391 = n1391->nxt));
          }
          e1390 = e1390->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_406 = 0.0;
      __SQL_SUM_AGGREGATE_406INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1392 = LOCATION.head;
        while (e1392) {
          long inventory_locn = e1392->LOCATION_LOCN;
          long location_zip = e1392->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1392->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1392->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1392->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1392->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1392->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1392->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1392->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1392->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1392->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1392->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1392->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1392->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1392->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1392 = e1392->__av;
          { //slice
            const HASH_RES_t h210 = CENSUS_mapkey0_idxfn::hash(se4565.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1393 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1393 = &(i1393->buckets_[h210 % i1393->size_]);
            CENSUS_entry* e1393;
            do if ((e1393 = n1393->obj) && h210 == n1393->hash && CENSUS_mapkey0_idxfn::equals(se4565, *e1393)) {
              long census_population = e1393->CENSUS_POPULATION;
              long census_white = e1393->CENSUS_WHITE;
              long census_asian = e1393->CENSUS_ASIAN;
              long census_pacific = e1393->CENSUS_PACIFIC;
              long census_blackafrican = e1393->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1393->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1393->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1393->CENSUS_HOUSEUNITS;
              long census_families = e1393->CENSUS_FAMILIES;
              long census_households = e1393->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1393->CENSUS_HUSBWIFE;
              long census_males = e1393->CENSUS_MALES;
              long census_females = e1393->CENSUS_FEMALES;
              long census_householdschildren = e1393->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1393->CENSUS_HISPANIC;
              long v1393 = e1393->__av;
              __SQL_SUM_AGGREGATE_406INVENTORY1_P_3.addOrDelOnZero(se4564.modify(inventory_locn), (v1392 * (v1393 * (location_supertargetdistance * census_females))));
            } while ((n1393 = n1393->nxt));
          }
          e1392 = e1392->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_407 = 0.0;
      __SQL_SUM_AGGREGATE_407INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1394 = LOCATION.head;
        while (e1394) {
          long inventory_locn = e1394->LOCATION_LOCN;
          long location_zip = e1394->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1394->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1394->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1394->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1394->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1394->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1394->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1394->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1394->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1394->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1394->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1394->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1394->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1394->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1394 = e1394->__av;
          { //slice
            const HASH_RES_t h211 = CENSUS_mapkey0_idxfn::hash(se4568.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1395 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1395 = &(i1395->buckets_[h211 % i1395->size_]);
            CENSUS_entry* e1395;
            do if ((e1395 = n1395->obj) && h211 == n1395->hash && CENSUS_mapkey0_idxfn::equals(se4568, *e1395)) {
              long census_population = e1395->CENSUS_POPULATION;
              long census_white = e1395->CENSUS_WHITE;
              long census_asian = e1395->CENSUS_ASIAN;
              long census_pacific = e1395->CENSUS_PACIFIC;
              long census_blackafrican = e1395->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1395->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1395->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1395->CENSUS_HOUSEUNITS;
              long census_families = e1395->CENSUS_FAMILIES;
              long census_households = e1395->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1395->CENSUS_HUSBWIFE;
              long census_males = e1395->CENSUS_MALES;
              long census_females = e1395->CENSUS_FEMALES;
              long census_householdschildren = e1395->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1395->CENSUS_HISPANIC;
              long v1395 = e1395->__av;
              __SQL_SUM_AGGREGATE_407INVENTORY1_P_3.addOrDelOnZero(se4567.modify(inventory_locn), (v1394 * (v1395 * (location_supertargetdistance * census_householdschildren))));
            } while ((n1395 = n1395->nxt));
          }
          e1394 = e1394->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_408 = 0.0;
      __SQL_SUM_AGGREGATE_408INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1396 = LOCATION.head;
        while (e1396) {
          long inventory_locn = e1396->LOCATION_LOCN;
          long location_zip = e1396->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1396->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1396->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1396->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1396->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1396->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1396->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1396->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1396->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1396->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1396->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1396->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1396->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1396->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1396 = e1396->__av;
          { //slice
            const HASH_RES_t h212 = CENSUS_mapkey0_idxfn::hash(se4571.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1397 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1397 = &(i1397->buckets_[h212 % i1397->size_]);
            CENSUS_entry* e1397;
            do if ((e1397 = n1397->obj) && h212 == n1397->hash && CENSUS_mapkey0_idxfn::equals(se4571, *e1397)) {
              long census_population = e1397->CENSUS_POPULATION;
              long census_white = e1397->CENSUS_WHITE;
              long census_asian = e1397->CENSUS_ASIAN;
              long census_pacific = e1397->CENSUS_PACIFIC;
              long census_blackafrican = e1397->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1397->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1397->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1397->CENSUS_HOUSEUNITS;
              long census_families = e1397->CENSUS_FAMILIES;
              long census_households = e1397->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1397->CENSUS_HUSBWIFE;
              long census_males = e1397->CENSUS_MALES;
              long census_females = e1397->CENSUS_FEMALES;
              long census_householdschildren = e1397->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1397->CENSUS_HISPANIC;
              long v1397 = e1397->__av;
              __SQL_SUM_AGGREGATE_408INVENTORY1_P_3.addOrDelOnZero(se4570.modify(inventory_locn), (v1396 * (v1397 * (location_supertargetdistance * census_hispanic))));
            } while ((n1397 = n1397->nxt));
          }
          e1396 = e1396->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_409 = 0.0;
      __SQL_SUM_AGGREGATE_410 = 0.0;
      __SQL_SUM_AGGREGATE_411 = 0.0;
      __SQL_SUM_AGGREGATE_412 = 0.0;
      __SQL_SUM_AGGREGATE_413 = 0.0;
      __SQL_SUM_AGGREGATE_414 = 0.0;
      __SQL_SUM_AGGREGATE_415 = 0.0;
      __SQL_SUM_AGGREGATE_416 = 0.0;
      __SQL_SUM_AGGREGATE_417 = 0.0;
      __SQL_SUM_AGGREGATE_418 = 0.0;
      __SQL_SUM_AGGREGATE_419 = 0.0;
      __SQL_SUM_AGGREGATE_419INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1398 = LOCATION.head;
        while (e1398) {
          long inventory_locn = e1398->LOCATION_LOCN;
          long location_zip = e1398->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1398->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1398->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1398->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1398->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1398->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1398->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1398->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1398->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1398->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1398->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1398->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1398->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1398->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1398 = e1398->__av;
          { //slice
            const HASH_RES_t h213 = CENSUS_mapkey0_idxfn::hash(se4584.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1399 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1399 = &(i1399->buckets_[h213 % i1399->size_]);
            CENSUS_entry* e1399;
            do if ((e1399 = n1399->obj) && h213 == n1399->hash && CENSUS_mapkey0_idxfn::equals(se4584, *e1399)) {
              long census_population = e1399->CENSUS_POPULATION;
              long census_white = e1399->CENSUS_WHITE;
              long census_asian = e1399->CENSUS_ASIAN;
              long census_pacific = e1399->CENSUS_PACIFIC;
              long census_blackafrican = e1399->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1399->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1399->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1399->CENSUS_HOUSEUNITS;
              long census_families = e1399->CENSUS_FAMILIES;
              long census_households = e1399->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1399->CENSUS_HUSBWIFE;
              long census_males = e1399->CENSUS_MALES;
              long census_females = e1399->CENSUS_FEMALES;
              long census_householdschildren = e1399->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1399->CENSUS_HISPANIC;
              long v1399 = e1399->__av;
              __SQL_SUM_AGGREGATE_419INVENTORY1_P_3.addOrDelOnZero(se4583.modify(inventory_locn), (v1398 * (v1399 * (location_supertargetdrivetime * location_supertargetdrivetime))));
            } while ((n1399 = n1399->nxt));
          }
          e1398 = e1398->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_420 = 0.0;
      __SQL_SUM_AGGREGATE_420INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1400 = LOCATION.head;
        while (e1400) {
          long inventory_locn = e1400->LOCATION_LOCN;
          long location_zip = e1400->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1400->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1400->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1400->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1400->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1400->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1400->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1400->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1400->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1400->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1400->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1400->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1400->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1400->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1400 = e1400->__av;
          { //slice
            const HASH_RES_t h214 = CENSUS_mapkey0_idxfn::hash(se4587.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1401 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1401 = &(i1401->buckets_[h214 % i1401->size_]);
            CENSUS_entry* e1401;
            do if ((e1401 = n1401->obj) && h214 == n1401->hash && CENSUS_mapkey0_idxfn::equals(se4587, *e1401)) {
              long census_population = e1401->CENSUS_POPULATION;
              long census_white = e1401->CENSUS_WHITE;
              long census_asian = e1401->CENSUS_ASIAN;
              long census_pacific = e1401->CENSUS_PACIFIC;
              long census_blackafrican = e1401->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1401->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1401->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1401->CENSUS_HOUSEUNITS;
              long census_families = e1401->CENSUS_FAMILIES;
              long census_households = e1401->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1401->CENSUS_HUSBWIFE;
              long census_males = e1401->CENSUS_MALES;
              long census_females = e1401->CENSUS_FEMALES;
              long census_householdschildren = e1401->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1401->CENSUS_HISPANIC;
              long v1401 = e1401->__av;
              __SQL_SUM_AGGREGATE_420INVENTORY1_P_3.addOrDelOnZero(se4586.modify(inventory_locn), (v1400 * (v1401 * (location_supertargetdrivetime * location_targetdistance))));
            } while ((n1401 = n1401->nxt));
          }
          e1400 = e1400->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_421 = 0.0;
      __SQL_SUM_AGGREGATE_421INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1402 = LOCATION.head;
        while (e1402) {
          long inventory_locn = e1402->LOCATION_LOCN;
          long location_zip = e1402->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1402->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1402->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1402->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1402->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1402->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1402->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1402->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1402->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1402->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1402->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1402->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1402->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1402->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1402 = e1402->__av;
          { //slice
            const HASH_RES_t h215 = CENSUS_mapkey0_idxfn::hash(se4590.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1403 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1403 = &(i1403->buckets_[h215 % i1403->size_]);
            CENSUS_entry* e1403;
            do if ((e1403 = n1403->obj) && h215 == n1403->hash && CENSUS_mapkey0_idxfn::equals(se4590, *e1403)) {
              long census_population = e1403->CENSUS_POPULATION;
              long census_white = e1403->CENSUS_WHITE;
              long census_asian = e1403->CENSUS_ASIAN;
              long census_pacific = e1403->CENSUS_PACIFIC;
              long census_blackafrican = e1403->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1403->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1403->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1403->CENSUS_HOUSEUNITS;
              long census_families = e1403->CENSUS_FAMILIES;
              long census_households = e1403->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1403->CENSUS_HUSBWIFE;
              long census_males = e1403->CENSUS_MALES;
              long census_females = e1403->CENSUS_FEMALES;
              long census_householdschildren = e1403->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1403->CENSUS_HISPANIC;
              long v1403 = e1403->__av;
              __SQL_SUM_AGGREGATE_421INVENTORY1_P_3.addOrDelOnZero(se4589.modify(inventory_locn), (v1402 * (v1403 * (location_supertargetdrivetime * location_targetdrivetime))));
            } while ((n1403 = n1403->nxt));
          }
          e1402 = e1402->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_422 = 0.0;
      __SQL_SUM_AGGREGATE_422INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1404 = LOCATION.head;
        while (e1404) {
          long inventory_locn = e1404->LOCATION_LOCN;
          long location_zip = e1404->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1404->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1404->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1404->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1404->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1404->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1404->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1404->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1404->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1404->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1404->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1404->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1404->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1404->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1404 = e1404->__av;
          { //slice
            const HASH_RES_t h216 = CENSUS_mapkey0_idxfn::hash(se4593.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1405 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1405 = &(i1405->buckets_[h216 % i1405->size_]);
            CENSUS_entry* e1405;
            do if ((e1405 = n1405->obj) && h216 == n1405->hash && CENSUS_mapkey0_idxfn::equals(se4593, *e1405)) {
              long census_population = e1405->CENSUS_POPULATION;
              long census_white = e1405->CENSUS_WHITE;
              long census_asian = e1405->CENSUS_ASIAN;
              long census_pacific = e1405->CENSUS_PACIFIC;
              long census_blackafrican = e1405->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1405->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1405->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1405->CENSUS_HOUSEUNITS;
              long census_families = e1405->CENSUS_FAMILIES;
              long census_households = e1405->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1405->CENSUS_HUSBWIFE;
              long census_males = e1405->CENSUS_MALES;
              long census_females = e1405->CENSUS_FEMALES;
              long census_householdschildren = e1405->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1405->CENSUS_HISPANIC;
              long v1405 = e1405->__av;
              __SQL_SUM_AGGREGATE_422INVENTORY1_P_3.addOrDelOnZero(se4592.modify(inventory_locn), (v1404 * (v1405 * (location_supertargetdrivetime * location_walmartdistance))));
            } while ((n1405 = n1405->nxt));
          }
          e1404 = e1404->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_423 = 0.0;
      __SQL_SUM_AGGREGATE_423INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1406 = LOCATION.head;
        while (e1406) {
          long inventory_locn = e1406->LOCATION_LOCN;
          long location_zip = e1406->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1406->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1406->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1406->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1406->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1406->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1406->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1406->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1406->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1406->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1406->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1406->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1406->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1406->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1406 = e1406->__av;
          { //slice
            const HASH_RES_t h217 = CENSUS_mapkey0_idxfn::hash(se4596.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1407 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1407 = &(i1407->buckets_[h217 % i1407->size_]);
            CENSUS_entry* e1407;
            do if ((e1407 = n1407->obj) && h217 == n1407->hash && CENSUS_mapkey0_idxfn::equals(se4596, *e1407)) {
              long census_population = e1407->CENSUS_POPULATION;
              long census_white = e1407->CENSUS_WHITE;
              long census_asian = e1407->CENSUS_ASIAN;
              long census_pacific = e1407->CENSUS_PACIFIC;
              long census_blackafrican = e1407->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1407->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1407->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1407->CENSUS_HOUSEUNITS;
              long census_families = e1407->CENSUS_FAMILIES;
              long census_households = e1407->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1407->CENSUS_HUSBWIFE;
              long census_males = e1407->CENSUS_MALES;
              long census_females = e1407->CENSUS_FEMALES;
              long census_householdschildren = e1407->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1407->CENSUS_HISPANIC;
              long v1407 = e1407->__av;
              __SQL_SUM_AGGREGATE_423INVENTORY1_P_3.addOrDelOnZero(se4595.modify(inventory_locn), (v1406 * (v1407 * (location_supertargetdrivetime * location_walmartdrivetime))));
            } while ((n1407 = n1407->nxt));
          }
          e1406 = e1406->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_424 = 0.0;
      __SQL_SUM_AGGREGATE_424INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1408 = LOCATION.head;
        while (e1408) {
          long inventory_locn = e1408->LOCATION_LOCN;
          long location_zip = e1408->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1408->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1408->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1408->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1408->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1408->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1408->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1408->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1408->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1408->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1408->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1408->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1408->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1408->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1408 = e1408->__av;
          { //slice
            const HASH_RES_t h218 = CENSUS_mapkey0_idxfn::hash(se4599.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1409 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1409 = &(i1409->buckets_[h218 % i1409->size_]);
            CENSUS_entry* e1409;
            do if ((e1409 = n1409->obj) && h218 == n1409->hash && CENSUS_mapkey0_idxfn::equals(se4599, *e1409)) {
              long census_population = e1409->CENSUS_POPULATION;
              long census_white = e1409->CENSUS_WHITE;
              long census_asian = e1409->CENSUS_ASIAN;
              long census_pacific = e1409->CENSUS_PACIFIC;
              long census_blackafrican = e1409->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1409->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1409->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1409->CENSUS_HOUSEUNITS;
              long census_families = e1409->CENSUS_FAMILIES;
              long census_households = e1409->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1409->CENSUS_HUSBWIFE;
              long census_males = e1409->CENSUS_MALES;
              long census_females = e1409->CENSUS_FEMALES;
              long census_householdschildren = e1409->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1409->CENSUS_HISPANIC;
              long v1409 = e1409->__av;
              __SQL_SUM_AGGREGATE_424INVENTORY1_P_3.addOrDelOnZero(se4598.modify(inventory_locn), (v1408 * (v1409 * (location_supertargetdrivetime * location_walmartsupercenterdistance))));
            } while ((n1409 = n1409->nxt));
          }
          e1408 = e1408->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_425 = 0.0;
      __SQL_SUM_AGGREGATE_425INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1410 = LOCATION.head;
        while (e1410) {
          long inventory_locn = e1410->LOCATION_LOCN;
          long location_zip = e1410->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1410->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1410->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1410->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1410->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1410->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1410->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1410->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1410->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1410->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1410->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1410->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1410->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1410->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1410 = e1410->__av;
          { //slice
            const HASH_RES_t h219 = CENSUS_mapkey0_idxfn::hash(se4602.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1411 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1411 = &(i1411->buckets_[h219 % i1411->size_]);
            CENSUS_entry* e1411;
            do if ((e1411 = n1411->obj) && h219 == n1411->hash && CENSUS_mapkey0_idxfn::equals(se4602, *e1411)) {
              long census_population = e1411->CENSUS_POPULATION;
              long census_white = e1411->CENSUS_WHITE;
              long census_asian = e1411->CENSUS_ASIAN;
              long census_pacific = e1411->CENSUS_PACIFIC;
              long census_blackafrican = e1411->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1411->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1411->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1411->CENSUS_HOUSEUNITS;
              long census_families = e1411->CENSUS_FAMILIES;
              long census_households = e1411->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1411->CENSUS_HUSBWIFE;
              long census_males = e1411->CENSUS_MALES;
              long census_females = e1411->CENSUS_FEMALES;
              long census_householdschildren = e1411->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1411->CENSUS_HISPANIC;
              long v1411 = e1411->__av;
              __SQL_SUM_AGGREGATE_425INVENTORY1_P_3.addOrDelOnZero(se4601.modify(inventory_locn), (v1410 * (v1411 * (location_supertargetdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n1411 = n1411->nxt));
          }
          e1410 = e1410->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_426 = 0.0;
      __SQL_SUM_AGGREGATE_426INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1412 = LOCATION.head;
        while (e1412) {
          long inventory_locn = e1412->LOCATION_LOCN;
          long location_zip = e1412->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1412->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1412->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1412->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1412->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1412->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1412->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1412->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1412->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1412->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1412->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1412->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1412->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1412->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1412 = e1412->__av;
          { //slice
            const HASH_RES_t h220 = CENSUS_mapkey0_idxfn::hash(se4605.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1413 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1413 = &(i1413->buckets_[h220 % i1413->size_]);
            CENSUS_entry* e1413;
            do if ((e1413 = n1413->obj) && h220 == n1413->hash && CENSUS_mapkey0_idxfn::equals(se4605, *e1413)) {
              long census_population = e1413->CENSUS_POPULATION;
              long census_white = e1413->CENSUS_WHITE;
              long census_asian = e1413->CENSUS_ASIAN;
              long census_pacific = e1413->CENSUS_PACIFIC;
              long census_blackafrican = e1413->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1413->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1413->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1413->CENSUS_HOUSEUNITS;
              long census_families = e1413->CENSUS_FAMILIES;
              long census_households = e1413->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1413->CENSUS_HUSBWIFE;
              long census_males = e1413->CENSUS_MALES;
              long census_females = e1413->CENSUS_FEMALES;
              long census_householdschildren = e1413->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1413->CENSUS_HISPANIC;
              long v1413 = e1413->__av;
              __SQL_SUM_AGGREGATE_426INVENTORY1_P_3.addOrDelOnZero(se4604.modify(inventory_locn), (v1412 * (v1413 * (location_supertargetdrivetime * census_population))));
            } while ((n1413 = n1413->nxt));
          }
          e1412 = e1412->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_427 = 0.0;
      __SQL_SUM_AGGREGATE_427INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1414 = LOCATION.head;
        while (e1414) {
          long inventory_locn = e1414->LOCATION_LOCN;
          long location_zip = e1414->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1414->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1414->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1414->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1414->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1414->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1414->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1414->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1414->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1414->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1414->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1414->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1414->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1414->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1414 = e1414->__av;
          { //slice
            const HASH_RES_t h221 = CENSUS_mapkey0_idxfn::hash(se4608.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1415 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1415 = &(i1415->buckets_[h221 % i1415->size_]);
            CENSUS_entry* e1415;
            do if ((e1415 = n1415->obj) && h221 == n1415->hash && CENSUS_mapkey0_idxfn::equals(se4608, *e1415)) {
              long census_population = e1415->CENSUS_POPULATION;
              long census_white = e1415->CENSUS_WHITE;
              long census_asian = e1415->CENSUS_ASIAN;
              long census_pacific = e1415->CENSUS_PACIFIC;
              long census_blackafrican = e1415->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1415->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1415->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1415->CENSUS_HOUSEUNITS;
              long census_families = e1415->CENSUS_FAMILIES;
              long census_households = e1415->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1415->CENSUS_HUSBWIFE;
              long census_males = e1415->CENSUS_MALES;
              long census_females = e1415->CENSUS_FEMALES;
              long census_householdschildren = e1415->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1415->CENSUS_HISPANIC;
              long v1415 = e1415->__av;
              __SQL_SUM_AGGREGATE_427INVENTORY1_P_3.addOrDelOnZero(se4607.modify(inventory_locn), (v1414 * (v1415 * (location_supertargetdrivetime * census_white))));
            } while ((n1415 = n1415->nxt));
          }
          e1414 = e1414->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_428 = 0.0;
      __SQL_SUM_AGGREGATE_428INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1416 = LOCATION.head;
        while (e1416) {
          long inventory_locn = e1416->LOCATION_LOCN;
          long location_zip = e1416->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1416->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1416->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1416->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1416->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1416->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1416->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1416->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1416->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1416->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1416->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1416->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1416->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1416->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1416 = e1416->__av;
          { //slice
            const HASH_RES_t h222 = CENSUS_mapkey0_idxfn::hash(se4611.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1417 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1417 = &(i1417->buckets_[h222 % i1417->size_]);
            CENSUS_entry* e1417;
            do if ((e1417 = n1417->obj) && h222 == n1417->hash && CENSUS_mapkey0_idxfn::equals(se4611, *e1417)) {
              long census_population = e1417->CENSUS_POPULATION;
              long census_white = e1417->CENSUS_WHITE;
              long census_asian = e1417->CENSUS_ASIAN;
              long census_pacific = e1417->CENSUS_PACIFIC;
              long census_blackafrican = e1417->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1417->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1417->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1417->CENSUS_HOUSEUNITS;
              long census_families = e1417->CENSUS_FAMILIES;
              long census_households = e1417->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1417->CENSUS_HUSBWIFE;
              long census_males = e1417->CENSUS_MALES;
              long census_females = e1417->CENSUS_FEMALES;
              long census_householdschildren = e1417->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1417->CENSUS_HISPANIC;
              long v1417 = e1417->__av;
              __SQL_SUM_AGGREGATE_428INVENTORY1_P_3.addOrDelOnZero(se4610.modify(inventory_locn), (v1416 * (v1417 * (location_supertargetdrivetime * census_asian))));
            } while ((n1417 = n1417->nxt));
          }
          e1416 = e1416->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_429 = 0.0;
      __SQL_SUM_AGGREGATE_429INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1418 = LOCATION.head;
        while (e1418) {
          long inventory_locn = e1418->LOCATION_LOCN;
          long location_zip = e1418->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1418->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1418->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1418->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1418->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1418->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1418->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1418->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1418->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1418->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1418->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1418->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1418->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1418->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1418 = e1418->__av;
          { //slice
            const HASH_RES_t h223 = CENSUS_mapkey0_idxfn::hash(se4614.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1419 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1419 = &(i1419->buckets_[h223 % i1419->size_]);
            CENSUS_entry* e1419;
            do if ((e1419 = n1419->obj) && h223 == n1419->hash && CENSUS_mapkey0_idxfn::equals(se4614, *e1419)) {
              long census_population = e1419->CENSUS_POPULATION;
              long census_white = e1419->CENSUS_WHITE;
              long census_asian = e1419->CENSUS_ASIAN;
              long census_pacific = e1419->CENSUS_PACIFIC;
              long census_blackafrican = e1419->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1419->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1419->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1419->CENSUS_HOUSEUNITS;
              long census_families = e1419->CENSUS_FAMILIES;
              long census_households = e1419->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1419->CENSUS_HUSBWIFE;
              long census_males = e1419->CENSUS_MALES;
              long census_females = e1419->CENSUS_FEMALES;
              long census_householdschildren = e1419->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1419->CENSUS_HISPANIC;
              long v1419 = e1419->__av;
              __SQL_SUM_AGGREGATE_429INVENTORY1_P_3.addOrDelOnZero(se4613.modify(inventory_locn), (v1418 * (v1419 * (location_supertargetdrivetime * census_pacific))));
            } while ((n1419 = n1419->nxt));
          }
          e1418 = e1418->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_430 = 0.0;
      __SQL_SUM_AGGREGATE_430INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1420 = LOCATION.head;
        while (e1420) {
          long inventory_locn = e1420->LOCATION_LOCN;
          long location_zip = e1420->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1420->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1420->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1420->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1420->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1420->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1420->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1420->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1420->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1420->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1420->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1420->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1420->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1420->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1420 = e1420->__av;
          { //slice
            const HASH_RES_t h224 = CENSUS_mapkey0_idxfn::hash(se4617.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1421 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1421 = &(i1421->buckets_[h224 % i1421->size_]);
            CENSUS_entry* e1421;
            do if ((e1421 = n1421->obj) && h224 == n1421->hash && CENSUS_mapkey0_idxfn::equals(se4617, *e1421)) {
              long census_population = e1421->CENSUS_POPULATION;
              long census_white = e1421->CENSUS_WHITE;
              long census_asian = e1421->CENSUS_ASIAN;
              long census_pacific = e1421->CENSUS_PACIFIC;
              long census_blackafrican = e1421->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1421->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1421->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1421->CENSUS_HOUSEUNITS;
              long census_families = e1421->CENSUS_FAMILIES;
              long census_households = e1421->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1421->CENSUS_HUSBWIFE;
              long census_males = e1421->CENSUS_MALES;
              long census_females = e1421->CENSUS_FEMALES;
              long census_householdschildren = e1421->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1421->CENSUS_HISPANIC;
              long v1421 = e1421->__av;
              __SQL_SUM_AGGREGATE_430INVENTORY1_P_3.addOrDelOnZero(se4616.modify(inventory_locn), (v1420 * (v1421 * (location_supertargetdrivetime * census_blackafrican))));
            } while ((n1421 = n1421->nxt));
          }
          e1420 = e1420->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_431 = 0.0;
      __SQL_SUM_AGGREGATE_431INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1422 = LOCATION.head;
        while (e1422) {
          long inventory_locn = e1422->LOCATION_LOCN;
          long location_zip = e1422->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1422->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1422->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1422->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1422->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1422->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1422->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1422->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1422->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1422->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1422->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1422->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1422->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1422->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1422 = e1422->__av;
          { //slice
            const HASH_RES_t h225 = CENSUS_mapkey0_idxfn::hash(se4620.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1423 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1423 = &(i1423->buckets_[h225 % i1423->size_]);
            CENSUS_entry* e1423;
            do if ((e1423 = n1423->obj) && h225 == n1423->hash && CENSUS_mapkey0_idxfn::equals(se4620, *e1423)) {
              long census_population = e1423->CENSUS_POPULATION;
              long census_white = e1423->CENSUS_WHITE;
              long census_asian = e1423->CENSUS_ASIAN;
              long census_pacific = e1423->CENSUS_PACIFIC;
              long census_blackafrican = e1423->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1423->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1423->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1423->CENSUS_HOUSEUNITS;
              long census_families = e1423->CENSUS_FAMILIES;
              long census_households = e1423->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1423->CENSUS_HUSBWIFE;
              long census_males = e1423->CENSUS_MALES;
              long census_females = e1423->CENSUS_FEMALES;
              long census_householdschildren = e1423->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1423->CENSUS_HISPANIC;
              long v1423 = e1423->__av;
              __SQL_SUM_AGGREGATE_431INVENTORY1_P_3.addOrDelOnZero(se4619.modify(inventory_locn), (v1422 * (v1423 * (location_supertargetdrivetime * census_medianage))));
            } while ((n1423 = n1423->nxt));
          }
          e1422 = e1422->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_432 = 0.0;
      __SQL_SUM_AGGREGATE_432INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1424 = LOCATION.head;
        while (e1424) {
          long inventory_locn = e1424->LOCATION_LOCN;
          long location_zip = e1424->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1424->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1424->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1424->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1424->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1424->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1424->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1424->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1424->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1424->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1424->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1424->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1424->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1424->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1424 = e1424->__av;
          { //slice
            const HASH_RES_t h226 = CENSUS_mapkey0_idxfn::hash(se4623.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1425 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1425 = &(i1425->buckets_[h226 % i1425->size_]);
            CENSUS_entry* e1425;
            do if ((e1425 = n1425->obj) && h226 == n1425->hash && CENSUS_mapkey0_idxfn::equals(se4623, *e1425)) {
              long census_population = e1425->CENSUS_POPULATION;
              long census_white = e1425->CENSUS_WHITE;
              long census_asian = e1425->CENSUS_ASIAN;
              long census_pacific = e1425->CENSUS_PACIFIC;
              long census_blackafrican = e1425->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1425->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1425->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1425->CENSUS_HOUSEUNITS;
              long census_families = e1425->CENSUS_FAMILIES;
              long census_households = e1425->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1425->CENSUS_HUSBWIFE;
              long census_males = e1425->CENSUS_MALES;
              long census_females = e1425->CENSUS_FEMALES;
              long census_householdschildren = e1425->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1425->CENSUS_HISPANIC;
              long v1425 = e1425->__av;
              __SQL_SUM_AGGREGATE_432INVENTORY1_P_3.addOrDelOnZero(se4622.modify(inventory_locn), (v1424 * (v1425 * (location_supertargetdrivetime * census_occupiedhouseunits))));
            } while ((n1425 = n1425->nxt));
          }
          e1424 = e1424->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_433 = 0.0;
      __SQL_SUM_AGGREGATE_433INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1426 = LOCATION.head;
        while (e1426) {
          long inventory_locn = e1426->LOCATION_LOCN;
          long location_zip = e1426->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1426->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1426->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1426->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1426->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1426->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1426->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1426->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1426->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1426->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1426->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1426->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1426->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1426->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1426 = e1426->__av;
          { //slice
            const HASH_RES_t h227 = CENSUS_mapkey0_idxfn::hash(se4626.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1427 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1427 = &(i1427->buckets_[h227 % i1427->size_]);
            CENSUS_entry* e1427;
            do if ((e1427 = n1427->obj) && h227 == n1427->hash && CENSUS_mapkey0_idxfn::equals(se4626, *e1427)) {
              long census_population = e1427->CENSUS_POPULATION;
              long census_white = e1427->CENSUS_WHITE;
              long census_asian = e1427->CENSUS_ASIAN;
              long census_pacific = e1427->CENSUS_PACIFIC;
              long census_blackafrican = e1427->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1427->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1427->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1427->CENSUS_HOUSEUNITS;
              long census_families = e1427->CENSUS_FAMILIES;
              long census_households = e1427->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1427->CENSUS_HUSBWIFE;
              long census_males = e1427->CENSUS_MALES;
              long census_females = e1427->CENSUS_FEMALES;
              long census_householdschildren = e1427->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1427->CENSUS_HISPANIC;
              long v1427 = e1427->__av;
              __SQL_SUM_AGGREGATE_433INVENTORY1_P_3.addOrDelOnZero(se4625.modify(inventory_locn), (v1426 * (v1427 * (location_supertargetdrivetime * census_houseunits))));
            } while ((n1427 = n1427->nxt));
          }
          e1426 = e1426->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_434 = 0.0;
      __SQL_SUM_AGGREGATE_434INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1428 = LOCATION.head;
        while (e1428) {
          long inventory_locn = e1428->LOCATION_LOCN;
          long location_zip = e1428->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1428->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1428->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1428->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1428->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1428->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1428->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1428->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1428->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1428->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1428->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1428->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1428->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1428->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1428 = e1428->__av;
          { //slice
            const HASH_RES_t h228 = CENSUS_mapkey0_idxfn::hash(se4629.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1429 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1429 = &(i1429->buckets_[h228 % i1429->size_]);
            CENSUS_entry* e1429;
            do if ((e1429 = n1429->obj) && h228 == n1429->hash && CENSUS_mapkey0_idxfn::equals(se4629, *e1429)) {
              long census_population = e1429->CENSUS_POPULATION;
              long census_white = e1429->CENSUS_WHITE;
              long census_asian = e1429->CENSUS_ASIAN;
              long census_pacific = e1429->CENSUS_PACIFIC;
              long census_blackafrican = e1429->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1429->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1429->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1429->CENSUS_HOUSEUNITS;
              long census_families = e1429->CENSUS_FAMILIES;
              long census_households = e1429->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1429->CENSUS_HUSBWIFE;
              long census_males = e1429->CENSUS_MALES;
              long census_females = e1429->CENSUS_FEMALES;
              long census_householdschildren = e1429->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1429->CENSUS_HISPANIC;
              long v1429 = e1429->__av;
              __SQL_SUM_AGGREGATE_434INVENTORY1_P_3.addOrDelOnZero(se4628.modify(inventory_locn), (v1428 * (v1429 * (location_supertargetdrivetime * census_families))));
            } while ((n1429 = n1429->nxt));
          }
          e1428 = e1428->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_435 = 0.0;
      __SQL_SUM_AGGREGATE_435INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1430 = LOCATION.head;
        while (e1430) {
          long inventory_locn = e1430->LOCATION_LOCN;
          long location_zip = e1430->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1430->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1430->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1430->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1430->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1430->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1430->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1430->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1430->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1430->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1430->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1430->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1430->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1430->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1430 = e1430->__av;
          { //slice
            const HASH_RES_t h229 = CENSUS_mapkey0_idxfn::hash(se4632.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1431 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1431 = &(i1431->buckets_[h229 % i1431->size_]);
            CENSUS_entry* e1431;
            do if ((e1431 = n1431->obj) && h229 == n1431->hash && CENSUS_mapkey0_idxfn::equals(se4632, *e1431)) {
              long census_population = e1431->CENSUS_POPULATION;
              long census_white = e1431->CENSUS_WHITE;
              long census_asian = e1431->CENSUS_ASIAN;
              long census_pacific = e1431->CENSUS_PACIFIC;
              long census_blackafrican = e1431->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1431->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1431->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1431->CENSUS_HOUSEUNITS;
              long census_families = e1431->CENSUS_FAMILIES;
              long census_households = e1431->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1431->CENSUS_HUSBWIFE;
              long census_males = e1431->CENSUS_MALES;
              long census_females = e1431->CENSUS_FEMALES;
              long census_householdschildren = e1431->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1431->CENSUS_HISPANIC;
              long v1431 = e1431->__av;
              __SQL_SUM_AGGREGATE_435INVENTORY1_P_3.addOrDelOnZero(se4631.modify(inventory_locn), (v1430 * (v1431 * (location_supertargetdrivetime * census_households))));
            } while ((n1431 = n1431->nxt));
          }
          e1430 = e1430->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_436 = 0.0;
      __SQL_SUM_AGGREGATE_436INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1432 = LOCATION.head;
        while (e1432) {
          long inventory_locn = e1432->LOCATION_LOCN;
          long location_zip = e1432->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1432->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1432->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1432->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1432->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1432->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1432->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1432->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1432->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1432->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1432->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1432->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1432->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1432->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1432 = e1432->__av;
          { //slice
            const HASH_RES_t h230 = CENSUS_mapkey0_idxfn::hash(se4635.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1433 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1433 = &(i1433->buckets_[h230 % i1433->size_]);
            CENSUS_entry* e1433;
            do if ((e1433 = n1433->obj) && h230 == n1433->hash && CENSUS_mapkey0_idxfn::equals(se4635, *e1433)) {
              long census_population = e1433->CENSUS_POPULATION;
              long census_white = e1433->CENSUS_WHITE;
              long census_asian = e1433->CENSUS_ASIAN;
              long census_pacific = e1433->CENSUS_PACIFIC;
              long census_blackafrican = e1433->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1433->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1433->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1433->CENSUS_HOUSEUNITS;
              long census_families = e1433->CENSUS_FAMILIES;
              long census_households = e1433->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1433->CENSUS_HUSBWIFE;
              long census_males = e1433->CENSUS_MALES;
              long census_females = e1433->CENSUS_FEMALES;
              long census_householdschildren = e1433->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1433->CENSUS_HISPANIC;
              long v1433 = e1433->__av;
              __SQL_SUM_AGGREGATE_436INVENTORY1_P_3.addOrDelOnZero(se4634.modify(inventory_locn), (v1432 * (v1433 * (location_supertargetdrivetime * census_husbwife))));
            } while ((n1433 = n1433->nxt));
          }
          e1432 = e1432->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_437 = 0.0;
      __SQL_SUM_AGGREGATE_437INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1434 = LOCATION.head;
        while (e1434) {
          long inventory_locn = e1434->LOCATION_LOCN;
          long location_zip = e1434->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1434->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1434->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1434->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1434->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1434->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1434->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1434->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1434->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1434->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1434->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1434->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1434->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1434->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1434 = e1434->__av;
          { //slice
            const HASH_RES_t h231 = CENSUS_mapkey0_idxfn::hash(se4638.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1435 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1435 = &(i1435->buckets_[h231 % i1435->size_]);
            CENSUS_entry* e1435;
            do if ((e1435 = n1435->obj) && h231 == n1435->hash && CENSUS_mapkey0_idxfn::equals(se4638, *e1435)) {
              long census_population = e1435->CENSUS_POPULATION;
              long census_white = e1435->CENSUS_WHITE;
              long census_asian = e1435->CENSUS_ASIAN;
              long census_pacific = e1435->CENSUS_PACIFIC;
              long census_blackafrican = e1435->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1435->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1435->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1435->CENSUS_HOUSEUNITS;
              long census_families = e1435->CENSUS_FAMILIES;
              long census_households = e1435->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1435->CENSUS_HUSBWIFE;
              long census_males = e1435->CENSUS_MALES;
              long census_females = e1435->CENSUS_FEMALES;
              long census_householdschildren = e1435->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1435->CENSUS_HISPANIC;
              long v1435 = e1435->__av;
              __SQL_SUM_AGGREGATE_437INVENTORY1_P_3.addOrDelOnZero(se4637.modify(inventory_locn), (v1434 * (v1435 * (location_supertargetdrivetime * census_males))));
            } while ((n1435 = n1435->nxt));
          }
          e1434 = e1434->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_438 = 0.0;
      __SQL_SUM_AGGREGATE_438INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1436 = LOCATION.head;
        while (e1436) {
          long inventory_locn = e1436->LOCATION_LOCN;
          long location_zip = e1436->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1436->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1436->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1436->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1436->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1436->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1436->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1436->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1436->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1436->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1436->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1436->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1436->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1436->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1436 = e1436->__av;
          { //slice
            const HASH_RES_t h232 = CENSUS_mapkey0_idxfn::hash(se4641.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1437 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1437 = &(i1437->buckets_[h232 % i1437->size_]);
            CENSUS_entry* e1437;
            do if ((e1437 = n1437->obj) && h232 == n1437->hash && CENSUS_mapkey0_idxfn::equals(se4641, *e1437)) {
              long census_population = e1437->CENSUS_POPULATION;
              long census_white = e1437->CENSUS_WHITE;
              long census_asian = e1437->CENSUS_ASIAN;
              long census_pacific = e1437->CENSUS_PACIFIC;
              long census_blackafrican = e1437->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1437->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1437->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1437->CENSUS_HOUSEUNITS;
              long census_families = e1437->CENSUS_FAMILIES;
              long census_households = e1437->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1437->CENSUS_HUSBWIFE;
              long census_males = e1437->CENSUS_MALES;
              long census_females = e1437->CENSUS_FEMALES;
              long census_householdschildren = e1437->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1437->CENSUS_HISPANIC;
              long v1437 = e1437->__av;
              __SQL_SUM_AGGREGATE_438INVENTORY1_P_3.addOrDelOnZero(se4640.modify(inventory_locn), (v1436 * (v1437 * (location_supertargetdrivetime * census_females))));
            } while ((n1437 = n1437->nxt));
          }
          e1436 = e1436->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_439 = 0.0;
      __SQL_SUM_AGGREGATE_439INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1438 = LOCATION.head;
        while (e1438) {
          long inventory_locn = e1438->LOCATION_LOCN;
          long location_zip = e1438->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1438->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1438->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1438->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1438->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1438->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1438->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1438->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1438->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1438->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1438->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1438->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1438->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1438->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1438 = e1438->__av;
          { //slice
            const HASH_RES_t h233 = CENSUS_mapkey0_idxfn::hash(se4644.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1439 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1439 = &(i1439->buckets_[h233 % i1439->size_]);
            CENSUS_entry* e1439;
            do if ((e1439 = n1439->obj) && h233 == n1439->hash && CENSUS_mapkey0_idxfn::equals(se4644, *e1439)) {
              long census_population = e1439->CENSUS_POPULATION;
              long census_white = e1439->CENSUS_WHITE;
              long census_asian = e1439->CENSUS_ASIAN;
              long census_pacific = e1439->CENSUS_PACIFIC;
              long census_blackafrican = e1439->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1439->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1439->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1439->CENSUS_HOUSEUNITS;
              long census_families = e1439->CENSUS_FAMILIES;
              long census_households = e1439->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1439->CENSUS_HUSBWIFE;
              long census_males = e1439->CENSUS_MALES;
              long census_females = e1439->CENSUS_FEMALES;
              long census_householdschildren = e1439->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1439->CENSUS_HISPANIC;
              long v1439 = e1439->__av;
              __SQL_SUM_AGGREGATE_439INVENTORY1_P_3.addOrDelOnZero(se4643.modify(inventory_locn), (v1438 * (v1439 * (location_supertargetdrivetime * census_householdschildren))));
            } while ((n1439 = n1439->nxt));
          }
          e1438 = e1438->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_440 = 0.0;
      __SQL_SUM_AGGREGATE_440INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1440 = LOCATION.head;
        while (e1440) {
          long inventory_locn = e1440->LOCATION_LOCN;
          long location_zip = e1440->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1440->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1440->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1440->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1440->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1440->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1440->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1440->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1440->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1440->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1440->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1440->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1440->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1440->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1440 = e1440->__av;
          { //slice
            const HASH_RES_t h234 = CENSUS_mapkey0_idxfn::hash(se4647.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1441 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1441 = &(i1441->buckets_[h234 % i1441->size_]);
            CENSUS_entry* e1441;
            do if ((e1441 = n1441->obj) && h234 == n1441->hash && CENSUS_mapkey0_idxfn::equals(se4647, *e1441)) {
              long census_population = e1441->CENSUS_POPULATION;
              long census_white = e1441->CENSUS_WHITE;
              long census_asian = e1441->CENSUS_ASIAN;
              long census_pacific = e1441->CENSUS_PACIFIC;
              long census_blackafrican = e1441->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1441->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1441->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1441->CENSUS_HOUSEUNITS;
              long census_families = e1441->CENSUS_FAMILIES;
              long census_households = e1441->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1441->CENSUS_HUSBWIFE;
              long census_males = e1441->CENSUS_MALES;
              long census_females = e1441->CENSUS_FEMALES;
              long census_householdschildren = e1441->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1441->CENSUS_HISPANIC;
              long v1441 = e1441->__av;
              __SQL_SUM_AGGREGATE_440INVENTORY1_P_3.addOrDelOnZero(se4646.modify(inventory_locn), (v1440 * (v1441 * (location_supertargetdrivetime * census_hispanic))));
            } while ((n1441 = n1441->nxt));
          }
          e1440 = e1440->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_441 = 0.0;
      __SQL_SUM_AGGREGATE_442 = 0.0;
      __SQL_SUM_AGGREGATE_443 = 0.0;
      __SQL_SUM_AGGREGATE_444 = 0.0;
      __SQL_SUM_AGGREGATE_445 = 0.0;
      __SQL_SUM_AGGREGATE_446 = 0.0;
      __SQL_SUM_AGGREGATE_447 = 0.0;
      __SQL_SUM_AGGREGATE_448 = 0.0;
      __SQL_SUM_AGGREGATE_449 = 0.0;
      __SQL_SUM_AGGREGATE_450 = 0.0;
      __SQL_SUM_AGGREGATE_451 = 0.0;
      __SQL_SUM_AGGREGATE_451INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1442 = LOCATION.head;
        while (e1442) {
          long inventory_locn = e1442->LOCATION_LOCN;
          long location_zip = e1442->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1442->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1442->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1442->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1442->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1442->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1442->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1442->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1442->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1442->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1442->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1442->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1442->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1442->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1442 = e1442->__av;
          { //slice
            const HASH_RES_t h235 = CENSUS_mapkey0_idxfn::hash(se4660.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1443 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1443 = &(i1443->buckets_[h235 % i1443->size_]);
            CENSUS_entry* e1443;
            do if ((e1443 = n1443->obj) && h235 == n1443->hash && CENSUS_mapkey0_idxfn::equals(se4660, *e1443)) {
              long census_population = e1443->CENSUS_POPULATION;
              long census_white = e1443->CENSUS_WHITE;
              long census_asian = e1443->CENSUS_ASIAN;
              long census_pacific = e1443->CENSUS_PACIFIC;
              long census_blackafrican = e1443->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1443->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1443->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1443->CENSUS_HOUSEUNITS;
              long census_families = e1443->CENSUS_FAMILIES;
              long census_households = e1443->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1443->CENSUS_HUSBWIFE;
              long census_males = e1443->CENSUS_MALES;
              long census_females = e1443->CENSUS_FEMALES;
              long census_householdschildren = e1443->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1443->CENSUS_HISPANIC;
              long v1443 = e1443->__av;
              __SQL_SUM_AGGREGATE_451INVENTORY1_P_3.addOrDelOnZero(se4659.modify(inventory_locn), (v1442 * (v1443 * (location_targetdistance * location_targetdistance))));
            } while ((n1443 = n1443->nxt));
          }
          e1442 = e1442->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_452 = 0.0;
      __SQL_SUM_AGGREGATE_452INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1444 = LOCATION.head;
        while (e1444) {
          long inventory_locn = e1444->LOCATION_LOCN;
          long location_zip = e1444->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1444->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1444->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1444->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1444->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1444->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1444->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1444->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1444->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1444->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1444->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1444->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1444->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1444->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1444 = e1444->__av;
          { //slice
            const HASH_RES_t h236 = CENSUS_mapkey0_idxfn::hash(se4663.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1445 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1445 = &(i1445->buckets_[h236 % i1445->size_]);
            CENSUS_entry* e1445;
            do if ((e1445 = n1445->obj) && h236 == n1445->hash && CENSUS_mapkey0_idxfn::equals(se4663, *e1445)) {
              long census_population = e1445->CENSUS_POPULATION;
              long census_white = e1445->CENSUS_WHITE;
              long census_asian = e1445->CENSUS_ASIAN;
              long census_pacific = e1445->CENSUS_PACIFIC;
              long census_blackafrican = e1445->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1445->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1445->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1445->CENSUS_HOUSEUNITS;
              long census_families = e1445->CENSUS_FAMILIES;
              long census_households = e1445->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1445->CENSUS_HUSBWIFE;
              long census_males = e1445->CENSUS_MALES;
              long census_females = e1445->CENSUS_FEMALES;
              long census_householdschildren = e1445->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1445->CENSUS_HISPANIC;
              long v1445 = e1445->__av;
              __SQL_SUM_AGGREGATE_452INVENTORY1_P_3.addOrDelOnZero(se4662.modify(inventory_locn), (v1444 * (v1445 * (location_targetdistance * location_targetdrivetime))));
            } while ((n1445 = n1445->nxt));
          }
          e1444 = e1444->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_453 = 0.0;
      __SQL_SUM_AGGREGATE_453INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1446 = LOCATION.head;
        while (e1446) {
          long inventory_locn = e1446->LOCATION_LOCN;
          long location_zip = e1446->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1446->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1446->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1446->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1446->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1446->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1446->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1446->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1446->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1446->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1446->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1446->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1446->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1446->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1446 = e1446->__av;
          { //slice
            const HASH_RES_t h237 = CENSUS_mapkey0_idxfn::hash(se4666.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1447 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1447 = &(i1447->buckets_[h237 % i1447->size_]);
            CENSUS_entry* e1447;
            do if ((e1447 = n1447->obj) && h237 == n1447->hash && CENSUS_mapkey0_idxfn::equals(se4666, *e1447)) {
              long census_population = e1447->CENSUS_POPULATION;
              long census_white = e1447->CENSUS_WHITE;
              long census_asian = e1447->CENSUS_ASIAN;
              long census_pacific = e1447->CENSUS_PACIFIC;
              long census_blackafrican = e1447->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1447->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1447->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1447->CENSUS_HOUSEUNITS;
              long census_families = e1447->CENSUS_FAMILIES;
              long census_households = e1447->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1447->CENSUS_HUSBWIFE;
              long census_males = e1447->CENSUS_MALES;
              long census_females = e1447->CENSUS_FEMALES;
              long census_householdschildren = e1447->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1447->CENSUS_HISPANIC;
              long v1447 = e1447->__av;
              __SQL_SUM_AGGREGATE_453INVENTORY1_P_3.addOrDelOnZero(se4665.modify(inventory_locn), (v1446 * (v1447 * (location_targetdistance * location_walmartdistance))));
            } while ((n1447 = n1447->nxt));
          }
          e1446 = e1446->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_454 = 0.0;
      __SQL_SUM_AGGREGATE_454INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1448 = LOCATION.head;
        while (e1448) {
          long inventory_locn = e1448->LOCATION_LOCN;
          long location_zip = e1448->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1448->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1448->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1448->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1448->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1448->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1448->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1448->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1448->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1448->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1448->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1448->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1448->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1448->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1448 = e1448->__av;
          { //slice
            const HASH_RES_t h238 = CENSUS_mapkey0_idxfn::hash(se4669.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1449 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1449 = &(i1449->buckets_[h238 % i1449->size_]);
            CENSUS_entry* e1449;
            do if ((e1449 = n1449->obj) && h238 == n1449->hash && CENSUS_mapkey0_idxfn::equals(se4669, *e1449)) {
              long census_population = e1449->CENSUS_POPULATION;
              long census_white = e1449->CENSUS_WHITE;
              long census_asian = e1449->CENSUS_ASIAN;
              long census_pacific = e1449->CENSUS_PACIFIC;
              long census_blackafrican = e1449->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1449->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1449->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1449->CENSUS_HOUSEUNITS;
              long census_families = e1449->CENSUS_FAMILIES;
              long census_households = e1449->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1449->CENSUS_HUSBWIFE;
              long census_males = e1449->CENSUS_MALES;
              long census_females = e1449->CENSUS_FEMALES;
              long census_householdschildren = e1449->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1449->CENSUS_HISPANIC;
              long v1449 = e1449->__av;
              __SQL_SUM_AGGREGATE_454INVENTORY1_P_3.addOrDelOnZero(se4668.modify(inventory_locn), (v1448 * (v1449 * (location_targetdistance * location_walmartdrivetime))));
            } while ((n1449 = n1449->nxt));
          }
          e1448 = e1448->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_455 = 0.0;
      __SQL_SUM_AGGREGATE_455INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1450 = LOCATION.head;
        while (e1450) {
          long inventory_locn = e1450->LOCATION_LOCN;
          long location_zip = e1450->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1450->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1450->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1450->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1450->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1450->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1450->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1450->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1450->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1450->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1450->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1450->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1450->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1450->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1450 = e1450->__av;
          { //slice
            const HASH_RES_t h239 = CENSUS_mapkey0_idxfn::hash(se4672.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1451 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1451 = &(i1451->buckets_[h239 % i1451->size_]);
            CENSUS_entry* e1451;
            do if ((e1451 = n1451->obj) && h239 == n1451->hash && CENSUS_mapkey0_idxfn::equals(se4672, *e1451)) {
              long census_population = e1451->CENSUS_POPULATION;
              long census_white = e1451->CENSUS_WHITE;
              long census_asian = e1451->CENSUS_ASIAN;
              long census_pacific = e1451->CENSUS_PACIFIC;
              long census_blackafrican = e1451->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1451->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1451->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1451->CENSUS_HOUSEUNITS;
              long census_families = e1451->CENSUS_FAMILIES;
              long census_households = e1451->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1451->CENSUS_HUSBWIFE;
              long census_males = e1451->CENSUS_MALES;
              long census_females = e1451->CENSUS_FEMALES;
              long census_householdschildren = e1451->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1451->CENSUS_HISPANIC;
              long v1451 = e1451->__av;
              __SQL_SUM_AGGREGATE_455INVENTORY1_P_3.addOrDelOnZero(se4671.modify(inventory_locn), (v1450 * (v1451 * (location_targetdistance * location_walmartsupercenterdistance))));
            } while ((n1451 = n1451->nxt));
          }
          e1450 = e1450->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_456 = 0.0;
      __SQL_SUM_AGGREGATE_456INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1452 = LOCATION.head;
        while (e1452) {
          long inventory_locn = e1452->LOCATION_LOCN;
          long location_zip = e1452->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1452->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1452->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1452->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1452->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1452->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1452->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1452->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1452->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1452->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1452->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1452->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1452->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1452->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1452 = e1452->__av;
          { //slice
            const HASH_RES_t h240 = CENSUS_mapkey0_idxfn::hash(se4675.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1453 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1453 = &(i1453->buckets_[h240 % i1453->size_]);
            CENSUS_entry* e1453;
            do if ((e1453 = n1453->obj) && h240 == n1453->hash && CENSUS_mapkey0_idxfn::equals(se4675, *e1453)) {
              long census_population = e1453->CENSUS_POPULATION;
              long census_white = e1453->CENSUS_WHITE;
              long census_asian = e1453->CENSUS_ASIAN;
              long census_pacific = e1453->CENSUS_PACIFIC;
              long census_blackafrican = e1453->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1453->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1453->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1453->CENSUS_HOUSEUNITS;
              long census_families = e1453->CENSUS_FAMILIES;
              long census_households = e1453->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1453->CENSUS_HUSBWIFE;
              long census_males = e1453->CENSUS_MALES;
              long census_females = e1453->CENSUS_FEMALES;
              long census_householdschildren = e1453->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1453->CENSUS_HISPANIC;
              long v1453 = e1453->__av;
              __SQL_SUM_AGGREGATE_456INVENTORY1_P_3.addOrDelOnZero(se4674.modify(inventory_locn), (v1452 * (v1453 * (location_targetdistance * location_walmartsupercenterdrivetime))));
            } while ((n1453 = n1453->nxt));
          }
          e1452 = e1452->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_457 = 0.0;
      __SQL_SUM_AGGREGATE_457INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1454 = LOCATION.head;
        while (e1454) {
          long inventory_locn = e1454->LOCATION_LOCN;
          long location_zip = e1454->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1454->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1454->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1454->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1454->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1454->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1454->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1454->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1454->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1454->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1454->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1454->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1454->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1454->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1454 = e1454->__av;
          { //slice
            const HASH_RES_t h241 = CENSUS_mapkey0_idxfn::hash(se4678.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1455 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1455 = &(i1455->buckets_[h241 % i1455->size_]);
            CENSUS_entry* e1455;
            do if ((e1455 = n1455->obj) && h241 == n1455->hash && CENSUS_mapkey0_idxfn::equals(se4678, *e1455)) {
              long census_population = e1455->CENSUS_POPULATION;
              long census_white = e1455->CENSUS_WHITE;
              long census_asian = e1455->CENSUS_ASIAN;
              long census_pacific = e1455->CENSUS_PACIFIC;
              long census_blackafrican = e1455->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1455->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1455->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1455->CENSUS_HOUSEUNITS;
              long census_families = e1455->CENSUS_FAMILIES;
              long census_households = e1455->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1455->CENSUS_HUSBWIFE;
              long census_males = e1455->CENSUS_MALES;
              long census_females = e1455->CENSUS_FEMALES;
              long census_householdschildren = e1455->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1455->CENSUS_HISPANIC;
              long v1455 = e1455->__av;
              __SQL_SUM_AGGREGATE_457INVENTORY1_P_3.addOrDelOnZero(se4677.modify(inventory_locn), (v1454 * (v1455 * (location_targetdistance * census_population))));
            } while ((n1455 = n1455->nxt));
          }
          e1454 = e1454->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_458 = 0.0;
      __SQL_SUM_AGGREGATE_458INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1456 = LOCATION.head;
        while (e1456) {
          long inventory_locn = e1456->LOCATION_LOCN;
          long location_zip = e1456->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1456->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1456->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1456->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1456->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1456->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1456->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1456->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1456->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1456->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1456->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1456->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1456->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1456->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1456 = e1456->__av;
          { //slice
            const HASH_RES_t h242 = CENSUS_mapkey0_idxfn::hash(se4681.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1457 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1457 = &(i1457->buckets_[h242 % i1457->size_]);
            CENSUS_entry* e1457;
            do if ((e1457 = n1457->obj) && h242 == n1457->hash && CENSUS_mapkey0_idxfn::equals(se4681, *e1457)) {
              long census_population = e1457->CENSUS_POPULATION;
              long census_white = e1457->CENSUS_WHITE;
              long census_asian = e1457->CENSUS_ASIAN;
              long census_pacific = e1457->CENSUS_PACIFIC;
              long census_blackafrican = e1457->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1457->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1457->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1457->CENSUS_HOUSEUNITS;
              long census_families = e1457->CENSUS_FAMILIES;
              long census_households = e1457->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1457->CENSUS_HUSBWIFE;
              long census_males = e1457->CENSUS_MALES;
              long census_females = e1457->CENSUS_FEMALES;
              long census_householdschildren = e1457->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1457->CENSUS_HISPANIC;
              long v1457 = e1457->__av;
              __SQL_SUM_AGGREGATE_458INVENTORY1_P_3.addOrDelOnZero(se4680.modify(inventory_locn), (v1456 * (v1457 * (location_targetdistance * census_white))));
            } while ((n1457 = n1457->nxt));
          }
          e1456 = e1456->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_459 = 0.0;
      __SQL_SUM_AGGREGATE_459INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1458 = LOCATION.head;
        while (e1458) {
          long inventory_locn = e1458->LOCATION_LOCN;
          long location_zip = e1458->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1458->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1458->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1458->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1458->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1458->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1458->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1458->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1458->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1458->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1458->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1458->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1458->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1458->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1458 = e1458->__av;
          { //slice
            const HASH_RES_t h243 = CENSUS_mapkey0_idxfn::hash(se4684.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1459 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1459 = &(i1459->buckets_[h243 % i1459->size_]);
            CENSUS_entry* e1459;
            do if ((e1459 = n1459->obj) && h243 == n1459->hash && CENSUS_mapkey0_idxfn::equals(se4684, *e1459)) {
              long census_population = e1459->CENSUS_POPULATION;
              long census_white = e1459->CENSUS_WHITE;
              long census_asian = e1459->CENSUS_ASIAN;
              long census_pacific = e1459->CENSUS_PACIFIC;
              long census_blackafrican = e1459->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1459->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1459->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1459->CENSUS_HOUSEUNITS;
              long census_families = e1459->CENSUS_FAMILIES;
              long census_households = e1459->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1459->CENSUS_HUSBWIFE;
              long census_males = e1459->CENSUS_MALES;
              long census_females = e1459->CENSUS_FEMALES;
              long census_householdschildren = e1459->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1459->CENSUS_HISPANIC;
              long v1459 = e1459->__av;
              __SQL_SUM_AGGREGATE_459INVENTORY1_P_3.addOrDelOnZero(se4683.modify(inventory_locn), (v1458 * (v1459 * (location_targetdistance * census_asian))));
            } while ((n1459 = n1459->nxt));
          }
          e1458 = e1458->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_460 = 0.0;
      __SQL_SUM_AGGREGATE_460INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1460 = LOCATION.head;
        while (e1460) {
          long inventory_locn = e1460->LOCATION_LOCN;
          long location_zip = e1460->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1460->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1460->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1460->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1460->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1460->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1460->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1460->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1460->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1460->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1460->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1460->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1460->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1460->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1460 = e1460->__av;
          { //slice
            const HASH_RES_t h244 = CENSUS_mapkey0_idxfn::hash(se4687.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1461 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1461 = &(i1461->buckets_[h244 % i1461->size_]);
            CENSUS_entry* e1461;
            do if ((e1461 = n1461->obj) && h244 == n1461->hash && CENSUS_mapkey0_idxfn::equals(se4687, *e1461)) {
              long census_population = e1461->CENSUS_POPULATION;
              long census_white = e1461->CENSUS_WHITE;
              long census_asian = e1461->CENSUS_ASIAN;
              long census_pacific = e1461->CENSUS_PACIFIC;
              long census_blackafrican = e1461->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1461->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1461->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1461->CENSUS_HOUSEUNITS;
              long census_families = e1461->CENSUS_FAMILIES;
              long census_households = e1461->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1461->CENSUS_HUSBWIFE;
              long census_males = e1461->CENSUS_MALES;
              long census_females = e1461->CENSUS_FEMALES;
              long census_householdschildren = e1461->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1461->CENSUS_HISPANIC;
              long v1461 = e1461->__av;
              __SQL_SUM_AGGREGATE_460INVENTORY1_P_3.addOrDelOnZero(se4686.modify(inventory_locn), (v1460 * (v1461 * (location_targetdistance * census_pacific))));
            } while ((n1461 = n1461->nxt));
          }
          e1460 = e1460->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_461 = 0.0;
      __SQL_SUM_AGGREGATE_461INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1462 = LOCATION.head;
        while (e1462) {
          long inventory_locn = e1462->LOCATION_LOCN;
          long location_zip = e1462->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1462->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1462->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1462->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1462->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1462->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1462->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1462->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1462->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1462->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1462->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1462->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1462->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1462->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1462 = e1462->__av;
          { //slice
            const HASH_RES_t h245 = CENSUS_mapkey0_idxfn::hash(se4690.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1463 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1463 = &(i1463->buckets_[h245 % i1463->size_]);
            CENSUS_entry* e1463;
            do if ((e1463 = n1463->obj) && h245 == n1463->hash && CENSUS_mapkey0_idxfn::equals(se4690, *e1463)) {
              long census_population = e1463->CENSUS_POPULATION;
              long census_white = e1463->CENSUS_WHITE;
              long census_asian = e1463->CENSUS_ASIAN;
              long census_pacific = e1463->CENSUS_PACIFIC;
              long census_blackafrican = e1463->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1463->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1463->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1463->CENSUS_HOUSEUNITS;
              long census_families = e1463->CENSUS_FAMILIES;
              long census_households = e1463->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1463->CENSUS_HUSBWIFE;
              long census_males = e1463->CENSUS_MALES;
              long census_females = e1463->CENSUS_FEMALES;
              long census_householdschildren = e1463->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1463->CENSUS_HISPANIC;
              long v1463 = e1463->__av;
              __SQL_SUM_AGGREGATE_461INVENTORY1_P_3.addOrDelOnZero(se4689.modify(inventory_locn), (v1462 * (v1463 * (location_targetdistance * census_blackafrican))));
            } while ((n1463 = n1463->nxt));
          }
          e1462 = e1462->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_462 = 0.0;
      __SQL_SUM_AGGREGATE_462INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1464 = LOCATION.head;
        while (e1464) {
          long inventory_locn = e1464->LOCATION_LOCN;
          long location_zip = e1464->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1464->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1464->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1464->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1464->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1464->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1464->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1464->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1464->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1464->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1464->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1464->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1464->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1464->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1464 = e1464->__av;
          { //slice
            const HASH_RES_t h246 = CENSUS_mapkey0_idxfn::hash(se4693.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1465 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1465 = &(i1465->buckets_[h246 % i1465->size_]);
            CENSUS_entry* e1465;
            do if ((e1465 = n1465->obj) && h246 == n1465->hash && CENSUS_mapkey0_idxfn::equals(se4693, *e1465)) {
              long census_population = e1465->CENSUS_POPULATION;
              long census_white = e1465->CENSUS_WHITE;
              long census_asian = e1465->CENSUS_ASIAN;
              long census_pacific = e1465->CENSUS_PACIFIC;
              long census_blackafrican = e1465->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1465->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1465->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1465->CENSUS_HOUSEUNITS;
              long census_families = e1465->CENSUS_FAMILIES;
              long census_households = e1465->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1465->CENSUS_HUSBWIFE;
              long census_males = e1465->CENSUS_MALES;
              long census_females = e1465->CENSUS_FEMALES;
              long census_householdschildren = e1465->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1465->CENSUS_HISPANIC;
              long v1465 = e1465->__av;
              __SQL_SUM_AGGREGATE_462INVENTORY1_P_3.addOrDelOnZero(se4692.modify(inventory_locn), (v1464 * (v1465 * (location_targetdistance * census_medianage))));
            } while ((n1465 = n1465->nxt));
          }
          e1464 = e1464->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_463 = 0.0;
      __SQL_SUM_AGGREGATE_463INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1466 = LOCATION.head;
        while (e1466) {
          long inventory_locn = e1466->LOCATION_LOCN;
          long location_zip = e1466->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1466->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1466->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1466->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1466->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1466->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1466->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1466->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1466->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1466->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1466->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1466->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1466->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1466->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1466 = e1466->__av;
          { //slice
            const HASH_RES_t h247 = CENSUS_mapkey0_idxfn::hash(se4696.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1467 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1467 = &(i1467->buckets_[h247 % i1467->size_]);
            CENSUS_entry* e1467;
            do if ((e1467 = n1467->obj) && h247 == n1467->hash && CENSUS_mapkey0_idxfn::equals(se4696, *e1467)) {
              long census_population = e1467->CENSUS_POPULATION;
              long census_white = e1467->CENSUS_WHITE;
              long census_asian = e1467->CENSUS_ASIAN;
              long census_pacific = e1467->CENSUS_PACIFIC;
              long census_blackafrican = e1467->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1467->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1467->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1467->CENSUS_HOUSEUNITS;
              long census_families = e1467->CENSUS_FAMILIES;
              long census_households = e1467->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1467->CENSUS_HUSBWIFE;
              long census_males = e1467->CENSUS_MALES;
              long census_females = e1467->CENSUS_FEMALES;
              long census_householdschildren = e1467->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1467->CENSUS_HISPANIC;
              long v1467 = e1467->__av;
              __SQL_SUM_AGGREGATE_463INVENTORY1_P_3.addOrDelOnZero(se4695.modify(inventory_locn), (v1466 * (v1467 * (location_targetdistance * census_occupiedhouseunits))));
            } while ((n1467 = n1467->nxt));
          }
          e1466 = e1466->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_464 = 0.0;
      __SQL_SUM_AGGREGATE_464INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1468 = LOCATION.head;
        while (e1468) {
          long inventory_locn = e1468->LOCATION_LOCN;
          long location_zip = e1468->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1468->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1468->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1468->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1468->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1468->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1468->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1468->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1468->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1468->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1468->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1468->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1468->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1468->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1468 = e1468->__av;
          { //slice
            const HASH_RES_t h248 = CENSUS_mapkey0_idxfn::hash(se4699.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1469 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1469 = &(i1469->buckets_[h248 % i1469->size_]);
            CENSUS_entry* e1469;
            do if ((e1469 = n1469->obj) && h248 == n1469->hash && CENSUS_mapkey0_idxfn::equals(se4699, *e1469)) {
              long census_population = e1469->CENSUS_POPULATION;
              long census_white = e1469->CENSUS_WHITE;
              long census_asian = e1469->CENSUS_ASIAN;
              long census_pacific = e1469->CENSUS_PACIFIC;
              long census_blackafrican = e1469->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1469->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1469->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1469->CENSUS_HOUSEUNITS;
              long census_families = e1469->CENSUS_FAMILIES;
              long census_households = e1469->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1469->CENSUS_HUSBWIFE;
              long census_males = e1469->CENSUS_MALES;
              long census_females = e1469->CENSUS_FEMALES;
              long census_householdschildren = e1469->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1469->CENSUS_HISPANIC;
              long v1469 = e1469->__av;
              __SQL_SUM_AGGREGATE_464INVENTORY1_P_3.addOrDelOnZero(se4698.modify(inventory_locn), (v1468 * (v1469 * (location_targetdistance * census_houseunits))));
            } while ((n1469 = n1469->nxt));
          }
          e1468 = e1468->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_465 = 0.0;
      __SQL_SUM_AGGREGATE_465INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1470 = LOCATION.head;
        while (e1470) {
          long inventory_locn = e1470->LOCATION_LOCN;
          long location_zip = e1470->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1470->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1470->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1470->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1470->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1470->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1470->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1470->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1470->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1470->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1470->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1470->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1470->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1470->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1470 = e1470->__av;
          { //slice
            const HASH_RES_t h249 = CENSUS_mapkey0_idxfn::hash(se4702.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1471 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1471 = &(i1471->buckets_[h249 % i1471->size_]);
            CENSUS_entry* e1471;
            do if ((e1471 = n1471->obj) && h249 == n1471->hash && CENSUS_mapkey0_idxfn::equals(se4702, *e1471)) {
              long census_population = e1471->CENSUS_POPULATION;
              long census_white = e1471->CENSUS_WHITE;
              long census_asian = e1471->CENSUS_ASIAN;
              long census_pacific = e1471->CENSUS_PACIFIC;
              long census_blackafrican = e1471->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1471->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1471->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1471->CENSUS_HOUSEUNITS;
              long census_families = e1471->CENSUS_FAMILIES;
              long census_households = e1471->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1471->CENSUS_HUSBWIFE;
              long census_males = e1471->CENSUS_MALES;
              long census_females = e1471->CENSUS_FEMALES;
              long census_householdschildren = e1471->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1471->CENSUS_HISPANIC;
              long v1471 = e1471->__av;
              __SQL_SUM_AGGREGATE_465INVENTORY1_P_3.addOrDelOnZero(se4701.modify(inventory_locn), (v1470 * (v1471 * (location_targetdistance * census_families))));
            } while ((n1471 = n1471->nxt));
          }
          e1470 = e1470->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_466 = 0.0;
      __SQL_SUM_AGGREGATE_466INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1472 = LOCATION.head;
        while (e1472) {
          long inventory_locn = e1472->LOCATION_LOCN;
          long location_zip = e1472->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1472->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1472->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1472->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1472->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1472->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1472->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1472->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1472->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1472->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1472->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1472->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1472->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1472->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1472 = e1472->__av;
          { //slice
            const HASH_RES_t h250 = CENSUS_mapkey0_idxfn::hash(se4705.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1473 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1473 = &(i1473->buckets_[h250 % i1473->size_]);
            CENSUS_entry* e1473;
            do if ((e1473 = n1473->obj) && h250 == n1473->hash && CENSUS_mapkey0_idxfn::equals(se4705, *e1473)) {
              long census_population = e1473->CENSUS_POPULATION;
              long census_white = e1473->CENSUS_WHITE;
              long census_asian = e1473->CENSUS_ASIAN;
              long census_pacific = e1473->CENSUS_PACIFIC;
              long census_blackafrican = e1473->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1473->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1473->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1473->CENSUS_HOUSEUNITS;
              long census_families = e1473->CENSUS_FAMILIES;
              long census_households = e1473->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1473->CENSUS_HUSBWIFE;
              long census_males = e1473->CENSUS_MALES;
              long census_females = e1473->CENSUS_FEMALES;
              long census_householdschildren = e1473->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1473->CENSUS_HISPANIC;
              long v1473 = e1473->__av;
              __SQL_SUM_AGGREGATE_466INVENTORY1_P_3.addOrDelOnZero(se4704.modify(inventory_locn), (v1472 * (v1473 * (location_targetdistance * census_households))));
            } while ((n1473 = n1473->nxt));
          }
          e1472 = e1472->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_467 = 0.0;
      __SQL_SUM_AGGREGATE_467INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1474 = LOCATION.head;
        while (e1474) {
          long inventory_locn = e1474->LOCATION_LOCN;
          long location_zip = e1474->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1474->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1474->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1474->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1474->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1474->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1474->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1474->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1474->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1474->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1474->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1474->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1474->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1474->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1474 = e1474->__av;
          { //slice
            const HASH_RES_t h251 = CENSUS_mapkey0_idxfn::hash(se4708.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1475 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1475 = &(i1475->buckets_[h251 % i1475->size_]);
            CENSUS_entry* e1475;
            do if ((e1475 = n1475->obj) && h251 == n1475->hash && CENSUS_mapkey0_idxfn::equals(se4708, *e1475)) {
              long census_population = e1475->CENSUS_POPULATION;
              long census_white = e1475->CENSUS_WHITE;
              long census_asian = e1475->CENSUS_ASIAN;
              long census_pacific = e1475->CENSUS_PACIFIC;
              long census_blackafrican = e1475->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1475->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1475->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1475->CENSUS_HOUSEUNITS;
              long census_families = e1475->CENSUS_FAMILIES;
              long census_households = e1475->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1475->CENSUS_HUSBWIFE;
              long census_males = e1475->CENSUS_MALES;
              long census_females = e1475->CENSUS_FEMALES;
              long census_householdschildren = e1475->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1475->CENSUS_HISPANIC;
              long v1475 = e1475->__av;
              __SQL_SUM_AGGREGATE_467INVENTORY1_P_3.addOrDelOnZero(se4707.modify(inventory_locn), (v1474 * (v1475 * (location_targetdistance * census_husbwife))));
            } while ((n1475 = n1475->nxt));
          }
          e1474 = e1474->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_468 = 0.0;
      __SQL_SUM_AGGREGATE_468INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1476 = LOCATION.head;
        while (e1476) {
          long inventory_locn = e1476->LOCATION_LOCN;
          long location_zip = e1476->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1476->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1476->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1476->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1476->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1476->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1476->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1476->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1476->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1476->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1476->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1476->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1476->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1476->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1476 = e1476->__av;
          { //slice
            const HASH_RES_t h252 = CENSUS_mapkey0_idxfn::hash(se4711.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1477 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1477 = &(i1477->buckets_[h252 % i1477->size_]);
            CENSUS_entry* e1477;
            do if ((e1477 = n1477->obj) && h252 == n1477->hash && CENSUS_mapkey0_idxfn::equals(se4711, *e1477)) {
              long census_population = e1477->CENSUS_POPULATION;
              long census_white = e1477->CENSUS_WHITE;
              long census_asian = e1477->CENSUS_ASIAN;
              long census_pacific = e1477->CENSUS_PACIFIC;
              long census_blackafrican = e1477->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1477->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1477->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1477->CENSUS_HOUSEUNITS;
              long census_families = e1477->CENSUS_FAMILIES;
              long census_households = e1477->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1477->CENSUS_HUSBWIFE;
              long census_males = e1477->CENSUS_MALES;
              long census_females = e1477->CENSUS_FEMALES;
              long census_householdschildren = e1477->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1477->CENSUS_HISPANIC;
              long v1477 = e1477->__av;
              __SQL_SUM_AGGREGATE_468INVENTORY1_P_3.addOrDelOnZero(se4710.modify(inventory_locn), (v1476 * (v1477 * (location_targetdistance * census_males))));
            } while ((n1477 = n1477->nxt));
          }
          e1476 = e1476->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_469 = 0.0;
      __SQL_SUM_AGGREGATE_469INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1478 = LOCATION.head;
        while (e1478) {
          long inventory_locn = e1478->LOCATION_LOCN;
          long location_zip = e1478->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1478->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1478->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1478->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1478->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1478->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1478->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1478->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1478->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1478->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1478->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1478->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1478->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1478->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1478 = e1478->__av;
          { //slice
            const HASH_RES_t h253 = CENSUS_mapkey0_idxfn::hash(se4714.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1479 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1479 = &(i1479->buckets_[h253 % i1479->size_]);
            CENSUS_entry* e1479;
            do if ((e1479 = n1479->obj) && h253 == n1479->hash && CENSUS_mapkey0_idxfn::equals(se4714, *e1479)) {
              long census_population = e1479->CENSUS_POPULATION;
              long census_white = e1479->CENSUS_WHITE;
              long census_asian = e1479->CENSUS_ASIAN;
              long census_pacific = e1479->CENSUS_PACIFIC;
              long census_blackafrican = e1479->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1479->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1479->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1479->CENSUS_HOUSEUNITS;
              long census_families = e1479->CENSUS_FAMILIES;
              long census_households = e1479->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1479->CENSUS_HUSBWIFE;
              long census_males = e1479->CENSUS_MALES;
              long census_females = e1479->CENSUS_FEMALES;
              long census_householdschildren = e1479->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1479->CENSUS_HISPANIC;
              long v1479 = e1479->__av;
              __SQL_SUM_AGGREGATE_469INVENTORY1_P_3.addOrDelOnZero(se4713.modify(inventory_locn), (v1478 * (v1479 * (location_targetdistance * census_females))));
            } while ((n1479 = n1479->nxt));
          }
          e1478 = e1478->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_470 = 0.0;
      __SQL_SUM_AGGREGATE_470INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1480 = LOCATION.head;
        while (e1480) {
          long inventory_locn = e1480->LOCATION_LOCN;
          long location_zip = e1480->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1480->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1480->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1480->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1480->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1480->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1480->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1480->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1480->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1480->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1480->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1480->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1480->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1480->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1480 = e1480->__av;
          { //slice
            const HASH_RES_t h254 = CENSUS_mapkey0_idxfn::hash(se4717.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1481 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1481 = &(i1481->buckets_[h254 % i1481->size_]);
            CENSUS_entry* e1481;
            do if ((e1481 = n1481->obj) && h254 == n1481->hash && CENSUS_mapkey0_idxfn::equals(se4717, *e1481)) {
              long census_population = e1481->CENSUS_POPULATION;
              long census_white = e1481->CENSUS_WHITE;
              long census_asian = e1481->CENSUS_ASIAN;
              long census_pacific = e1481->CENSUS_PACIFIC;
              long census_blackafrican = e1481->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1481->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1481->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1481->CENSUS_HOUSEUNITS;
              long census_families = e1481->CENSUS_FAMILIES;
              long census_households = e1481->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1481->CENSUS_HUSBWIFE;
              long census_males = e1481->CENSUS_MALES;
              long census_females = e1481->CENSUS_FEMALES;
              long census_householdschildren = e1481->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1481->CENSUS_HISPANIC;
              long v1481 = e1481->__av;
              __SQL_SUM_AGGREGATE_470INVENTORY1_P_3.addOrDelOnZero(se4716.modify(inventory_locn), (v1480 * (v1481 * (location_targetdistance * census_householdschildren))));
            } while ((n1481 = n1481->nxt));
          }
          e1480 = e1480->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_471 = 0.0;
      __SQL_SUM_AGGREGATE_471INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1482 = LOCATION.head;
        while (e1482) {
          long inventory_locn = e1482->LOCATION_LOCN;
          long location_zip = e1482->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1482->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1482->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1482->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1482->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1482->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1482->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1482->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1482->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1482->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1482->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1482->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1482->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1482->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1482 = e1482->__av;
          { //slice
            const HASH_RES_t h255 = CENSUS_mapkey0_idxfn::hash(se4720.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1483 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1483 = &(i1483->buckets_[h255 % i1483->size_]);
            CENSUS_entry* e1483;
            do if ((e1483 = n1483->obj) && h255 == n1483->hash && CENSUS_mapkey0_idxfn::equals(se4720, *e1483)) {
              long census_population = e1483->CENSUS_POPULATION;
              long census_white = e1483->CENSUS_WHITE;
              long census_asian = e1483->CENSUS_ASIAN;
              long census_pacific = e1483->CENSUS_PACIFIC;
              long census_blackafrican = e1483->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1483->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1483->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1483->CENSUS_HOUSEUNITS;
              long census_families = e1483->CENSUS_FAMILIES;
              long census_households = e1483->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1483->CENSUS_HUSBWIFE;
              long census_males = e1483->CENSUS_MALES;
              long census_females = e1483->CENSUS_FEMALES;
              long census_householdschildren = e1483->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1483->CENSUS_HISPANIC;
              long v1483 = e1483->__av;
              __SQL_SUM_AGGREGATE_471INVENTORY1_P_3.addOrDelOnZero(se4719.modify(inventory_locn), (v1482 * (v1483 * (location_targetdistance * census_hispanic))));
            } while ((n1483 = n1483->nxt));
          }
          e1482 = e1482->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_472 = 0.0;
      __SQL_SUM_AGGREGATE_473 = 0.0;
      __SQL_SUM_AGGREGATE_474 = 0.0;
      __SQL_SUM_AGGREGATE_475 = 0.0;
      __SQL_SUM_AGGREGATE_476 = 0.0;
      __SQL_SUM_AGGREGATE_477 = 0.0;
      __SQL_SUM_AGGREGATE_478 = 0.0;
      __SQL_SUM_AGGREGATE_479 = 0.0;
      __SQL_SUM_AGGREGATE_480 = 0.0;
      __SQL_SUM_AGGREGATE_481 = 0.0;
      __SQL_SUM_AGGREGATE_482 = 0.0;
      __SQL_SUM_AGGREGATE_482INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1484 = LOCATION.head;
        while (e1484) {
          long inventory_locn = e1484->LOCATION_LOCN;
          long location_zip = e1484->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1484->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1484->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1484->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1484->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1484->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1484->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1484->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1484->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1484->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1484->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1484->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1484->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1484->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1484 = e1484->__av;
          { //slice
            const HASH_RES_t h256 = CENSUS_mapkey0_idxfn::hash(se4733.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1485 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1485 = &(i1485->buckets_[h256 % i1485->size_]);
            CENSUS_entry* e1485;
            do if ((e1485 = n1485->obj) && h256 == n1485->hash && CENSUS_mapkey0_idxfn::equals(se4733, *e1485)) {
              long census_population = e1485->CENSUS_POPULATION;
              long census_white = e1485->CENSUS_WHITE;
              long census_asian = e1485->CENSUS_ASIAN;
              long census_pacific = e1485->CENSUS_PACIFIC;
              long census_blackafrican = e1485->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1485->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1485->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1485->CENSUS_HOUSEUNITS;
              long census_families = e1485->CENSUS_FAMILIES;
              long census_households = e1485->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1485->CENSUS_HUSBWIFE;
              long census_males = e1485->CENSUS_MALES;
              long census_females = e1485->CENSUS_FEMALES;
              long census_householdschildren = e1485->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1485->CENSUS_HISPANIC;
              long v1485 = e1485->__av;
              __SQL_SUM_AGGREGATE_482INVENTORY1_P_3.addOrDelOnZero(se4732.modify(inventory_locn), (v1484 * (v1485 * (location_targetdrivetime * location_targetdrivetime))));
            } while ((n1485 = n1485->nxt));
          }
          e1484 = e1484->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_483 = 0.0;
      __SQL_SUM_AGGREGATE_483INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1486 = LOCATION.head;
        while (e1486) {
          long inventory_locn = e1486->LOCATION_LOCN;
          long location_zip = e1486->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1486->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1486->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1486->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1486->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1486->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1486->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1486->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1486->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1486->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1486->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1486->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1486->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1486->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1486 = e1486->__av;
          { //slice
            const HASH_RES_t h257 = CENSUS_mapkey0_idxfn::hash(se4736.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1487 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1487 = &(i1487->buckets_[h257 % i1487->size_]);
            CENSUS_entry* e1487;
            do if ((e1487 = n1487->obj) && h257 == n1487->hash && CENSUS_mapkey0_idxfn::equals(se4736, *e1487)) {
              long census_population = e1487->CENSUS_POPULATION;
              long census_white = e1487->CENSUS_WHITE;
              long census_asian = e1487->CENSUS_ASIAN;
              long census_pacific = e1487->CENSUS_PACIFIC;
              long census_blackafrican = e1487->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1487->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1487->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1487->CENSUS_HOUSEUNITS;
              long census_families = e1487->CENSUS_FAMILIES;
              long census_households = e1487->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1487->CENSUS_HUSBWIFE;
              long census_males = e1487->CENSUS_MALES;
              long census_females = e1487->CENSUS_FEMALES;
              long census_householdschildren = e1487->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1487->CENSUS_HISPANIC;
              long v1487 = e1487->__av;
              __SQL_SUM_AGGREGATE_483INVENTORY1_P_3.addOrDelOnZero(se4735.modify(inventory_locn), (v1486 * (v1487 * (location_targetdrivetime * location_walmartdistance))));
            } while ((n1487 = n1487->nxt));
          }
          e1486 = e1486->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_484 = 0.0;
      __SQL_SUM_AGGREGATE_484INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1488 = LOCATION.head;
        while (e1488) {
          long inventory_locn = e1488->LOCATION_LOCN;
          long location_zip = e1488->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1488->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1488->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1488->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1488->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1488->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1488->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1488->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1488->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1488->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1488->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1488->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1488->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1488->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1488 = e1488->__av;
          { //slice
            const HASH_RES_t h258 = CENSUS_mapkey0_idxfn::hash(se4739.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1489 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1489 = &(i1489->buckets_[h258 % i1489->size_]);
            CENSUS_entry* e1489;
            do if ((e1489 = n1489->obj) && h258 == n1489->hash && CENSUS_mapkey0_idxfn::equals(se4739, *e1489)) {
              long census_population = e1489->CENSUS_POPULATION;
              long census_white = e1489->CENSUS_WHITE;
              long census_asian = e1489->CENSUS_ASIAN;
              long census_pacific = e1489->CENSUS_PACIFIC;
              long census_blackafrican = e1489->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1489->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1489->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1489->CENSUS_HOUSEUNITS;
              long census_families = e1489->CENSUS_FAMILIES;
              long census_households = e1489->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1489->CENSUS_HUSBWIFE;
              long census_males = e1489->CENSUS_MALES;
              long census_females = e1489->CENSUS_FEMALES;
              long census_householdschildren = e1489->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1489->CENSUS_HISPANIC;
              long v1489 = e1489->__av;
              __SQL_SUM_AGGREGATE_484INVENTORY1_P_3.addOrDelOnZero(se4738.modify(inventory_locn), (v1488 * (v1489 * (location_targetdrivetime * location_walmartdrivetime))));
            } while ((n1489 = n1489->nxt));
          }
          e1488 = e1488->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_485 = 0.0;
      __SQL_SUM_AGGREGATE_485INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1490 = LOCATION.head;
        while (e1490) {
          long inventory_locn = e1490->LOCATION_LOCN;
          long location_zip = e1490->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1490->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1490->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1490->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1490->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1490->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1490->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1490->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1490->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1490->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1490->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1490->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1490->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1490->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1490 = e1490->__av;
          { //slice
            const HASH_RES_t h259 = CENSUS_mapkey0_idxfn::hash(se4742.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1491 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1491 = &(i1491->buckets_[h259 % i1491->size_]);
            CENSUS_entry* e1491;
            do if ((e1491 = n1491->obj) && h259 == n1491->hash && CENSUS_mapkey0_idxfn::equals(se4742, *e1491)) {
              long census_population = e1491->CENSUS_POPULATION;
              long census_white = e1491->CENSUS_WHITE;
              long census_asian = e1491->CENSUS_ASIAN;
              long census_pacific = e1491->CENSUS_PACIFIC;
              long census_blackafrican = e1491->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1491->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1491->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1491->CENSUS_HOUSEUNITS;
              long census_families = e1491->CENSUS_FAMILIES;
              long census_households = e1491->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1491->CENSUS_HUSBWIFE;
              long census_males = e1491->CENSUS_MALES;
              long census_females = e1491->CENSUS_FEMALES;
              long census_householdschildren = e1491->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1491->CENSUS_HISPANIC;
              long v1491 = e1491->__av;
              __SQL_SUM_AGGREGATE_485INVENTORY1_P_3.addOrDelOnZero(se4741.modify(inventory_locn), (v1490 * (v1491 * (location_targetdrivetime * location_walmartsupercenterdistance))));
            } while ((n1491 = n1491->nxt));
          }
          e1490 = e1490->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_486 = 0.0;
      __SQL_SUM_AGGREGATE_486INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1492 = LOCATION.head;
        while (e1492) {
          long inventory_locn = e1492->LOCATION_LOCN;
          long location_zip = e1492->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1492->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1492->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1492->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1492->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1492->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1492->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1492->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1492->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1492->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1492->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1492->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1492->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1492->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1492 = e1492->__av;
          { //slice
            const HASH_RES_t h260 = CENSUS_mapkey0_idxfn::hash(se4745.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1493 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1493 = &(i1493->buckets_[h260 % i1493->size_]);
            CENSUS_entry* e1493;
            do if ((e1493 = n1493->obj) && h260 == n1493->hash && CENSUS_mapkey0_idxfn::equals(se4745, *e1493)) {
              long census_population = e1493->CENSUS_POPULATION;
              long census_white = e1493->CENSUS_WHITE;
              long census_asian = e1493->CENSUS_ASIAN;
              long census_pacific = e1493->CENSUS_PACIFIC;
              long census_blackafrican = e1493->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1493->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1493->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1493->CENSUS_HOUSEUNITS;
              long census_families = e1493->CENSUS_FAMILIES;
              long census_households = e1493->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1493->CENSUS_HUSBWIFE;
              long census_males = e1493->CENSUS_MALES;
              long census_females = e1493->CENSUS_FEMALES;
              long census_householdschildren = e1493->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1493->CENSUS_HISPANIC;
              long v1493 = e1493->__av;
              __SQL_SUM_AGGREGATE_486INVENTORY1_P_3.addOrDelOnZero(se4744.modify(inventory_locn), (v1492 * (v1493 * (location_targetdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n1493 = n1493->nxt));
          }
          e1492 = e1492->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_487 = 0.0;
      __SQL_SUM_AGGREGATE_487INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1494 = LOCATION.head;
        while (e1494) {
          long inventory_locn = e1494->LOCATION_LOCN;
          long location_zip = e1494->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1494->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1494->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1494->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1494->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1494->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1494->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1494->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1494->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1494->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1494->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1494->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1494->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1494->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1494 = e1494->__av;
          { //slice
            const HASH_RES_t h261 = CENSUS_mapkey0_idxfn::hash(se4748.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1495 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1495 = &(i1495->buckets_[h261 % i1495->size_]);
            CENSUS_entry* e1495;
            do if ((e1495 = n1495->obj) && h261 == n1495->hash && CENSUS_mapkey0_idxfn::equals(se4748, *e1495)) {
              long census_population = e1495->CENSUS_POPULATION;
              long census_white = e1495->CENSUS_WHITE;
              long census_asian = e1495->CENSUS_ASIAN;
              long census_pacific = e1495->CENSUS_PACIFIC;
              long census_blackafrican = e1495->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1495->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1495->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1495->CENSUS_HOUSEUNITS;
              long census_families = e1495->CENSUS_FAMILIES;
              long census_households = e1495->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1495->CENSUS_HUSBWIFE;
              long census_males = e1495->CENSUS_MALES;
              long census_females = e1495->CENSUS_FEMALES;
              long census_householdschildren = e1495->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1495->CENSUS_HISPANIC;
              long v1495 = e1495->__av;
              __SQL_SUM_AGGREGATE_487INVENTORY1_P_3.addOrDelOnZero(se4747.modify(inventory_locn), (v1494 * (v1495 * (location_targetdrivetime * census_population))));
            } while ((n1495 = n1495->nxt));
          }
          e1494 = e1494->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_488 = 0.0;
      __SQL_SUM_AGGREGATE_488INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1496 = LOCATION.head;
        while (e1496) {
          long inventory_locn = e1496->LOCATION_LOCN;
          long location_zip = e1496->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1496->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1496->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1496->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1496->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1496->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1496->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1496->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1496->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1496->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1496->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1496->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1496->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1496->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1496 = e1496->__av;
          { //slice
            const HASH_RES_t h262 = CENSUS_mapkey0_idxfn::hash(se4751.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1497 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1497 = &(i1497->buckets_[h262 % i1497->size_]);
            CENSUS_entry* e1497;
            do if ((e1497 = n1497->obj) && h262 == n1497->hash && CENSUS_mapkey0_idxfn::equals(se4751, *e1497)) {
              long census_population = e1497->CENSUS_POPULATION;
              long census_white = e1497->CENSUS_WHITE;
              long census_asian = e1497->CENSUS_ASIAN;
              long census_pacific = e1497->CENSUS_PACIFIC;
              long census_blackafrican = e1497->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1497->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1497->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1497->CENSUS_HOUSEUNITS;
              long census_families = e1497->CENSUS_FAMILIES;
              long census_households = e1497->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1497->CENSUS_HUSBWIFE;
              long census_males = e1497->CENSUS_MALES;
              long census_females = e1497->CENSUS_FEMALES;
              long census_householdschildren = e1497->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1497->CENSUS_HISPANIC;
              long v1497 = e1497->__av;
              __SQL_SUM_AGGREGATE_488INVENTORY1_P_3.addOrDelOnZero(se4750.modify(inventory_locn), (v1496 * (v1497 * (location_targetdrivetime * census_white))));
            } while ((n1497 = n1497->nxt));
          }
          e1496 = e1496->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_489 = 0.0;
      __SQL_SUM_AGGREGATE_489INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1498 = LOCATION.head;
        while (e1498) {
          long inventory_locn = e1498->LOCATION_LOCN;
          long location_zip = e1498->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1498->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1498->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1498->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1498->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1498->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1498->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1498->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1498->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1498->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1498->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1498->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1498->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1498->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1498 = e1498->__av;
          { //slice
            const HASH_RES_t h263 = CENSUS_mapkey0_idxfn::hash(se4754.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1499 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1499 = &(i1499->buckets_[h263 % i1499->size_]);
            CENSUS_entry* e1499;
            do if ((e1499 = n1499->obj) && h263 == n1499->hash && CENSUS_mapkey0_idxfn::equals(se4754, *e1499)) {
              long census_population = e1499->CENSUS_POPULATION;
              long census_white = e1499->CENSUS_WHITE;
              long census_asian = e1499->CENSUS_ASIAN;
              long census_pacific = e1499->CENSUS_PACIFIC;
              long census_blackafrican = e1499->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1499->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1499->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1499->CENSUS_HOUSEUNITS;
              long census_families = e1499->CENSUS_FAMILIES;
              long census_households = e1499->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1499->CENSUS_HUSBWIFE;
              long census_males = e1499->CENSUS_MALES;
              long census_females = e1499->CENSUS_FEMALES;
              long census_householdschildren = e1499->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1499->CENSUS_HISPANIC;
              long v1499 = e1499->__av;
              __SQL_SUM_AGGREGATE_489INVENTORY1_P_3.addOrDelOnZero(se4753.modify(inventory_locn), (v1498 * (v1499 * (location_targetdrivetime * census_asian))));
            } while ((n1499 = n1499->nxt));
          }
          e1498 = e1498->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_490 = 0.0;
      __SQL_SUM_AGGREGATE_490INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1500 = LOCATION.head;
        while (e1500) {
          long inventory_locn = e1500->LOCATION_LOCN;
          long location_zip = e1500->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1500->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1500->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1500->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1500->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1500->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1500->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1500->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1500->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1500->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1500->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1500->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1500->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1500->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1500 = e1500->__av;
          { //slice
            const HASH_RES_t h264 = CENSUS_mapkey0_idxfn::hash(se4757.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1501 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1501 = &(i1501->buckets_[h264 % i1501->size_]);
            CENSUS_entry* e1501;
            do if ((e1501 = n1501->obj) && h264 == n1501->hash && CENSUS_mapkey0_idxfn::equals(se4757, *e1501)) {
              long census_population = e1501->CENSUS_POPULATION;
              long census_white = e1501->CENSUS_WHITE;
              long census_asian = e1501->CENSUS_ASIAN;
              long census_pacific = e1501->CENSUS_PACIFIC;
              long census_blackafrican = e1501->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1501->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1501->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1501->CENSUS_HOUSEUNITS;
              long census_families = e1501->CENSUS_FAMILIES;
              long census_households = e1501->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1501->CENSUS_HUSBWIFE;
              long census_males = e1501->CENSUS_MALES;
              long census_females = e1501->CENSUS_FEMALES;
              long census_householdschildren = e1501->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1501->CENSUS_HISPANIC;
              long v1501 = e1501->__av;
              __SQL_SUM_AGGREGATE_490INVENTORY1_P_3.addOrDelOnZero(se4756.modify(inventory_locn), (v1500 * (v1501 * (location_targetdrivetime * census_pacific))));
            } while ((n1501 = n1501->nxt));
          }
          e1500 = e1500->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_491 = 0.0;
      __SQL_SUM_AGGREGATE_491INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1502 = LOCATION.head;
        while (e1502) {
          long inventory_locn = e1502->LOCATION_LOCN;
          long location_zip = e1502->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1502->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1502->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1502->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1502->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1502->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1502->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1502->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1502->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1502->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1502->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1502->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1502->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1502->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1502 = e1502->__av;
          { //slice
            const HASH_RES_t h265 = CENSUS_mapkey0_idxfn::hash(se4760.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1503 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1503 = &(i1503->buckets_[h265 % i1503->size_]);
            CENSUS_entry* e1503;
            do if ((e1503 = n1503->obj) && h265 == n1503->hash && CENSUS_mapkey0_idxfn::equals(se4760, *e1503)) {
              long census_population = e1503->CENSUS_POPULATION;
              long census_white = e1503->CENSUS_WHITE;
              long census_asian = e1503->CENSUS_ASIAN;
              long census_pacific = e1503->CENSUS_PACIFIC;
              long census_blackafrican = e1503->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1503->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1503->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1503->CENSUS_HOUSEUNITS;
              long census_families = e1503->CENSUS_FAMILIES;
              long census_households = e1503->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1503->CENSUS_HUSBWIFE;
              long census_males = e1503->CENSUS_MALES;
              long census_females = e1503->CENSUS_FEMALES;
              long census_householdschildren = e1503->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1503->CENSUS_HISPANIC;
              long v1503 = e1503->__av;
              __SQL_SUM_AGGREGATE_491INVENTORY1_P_3.addOrDelOnZero(se4759.modify(inventory_locn), (v1502 * (v1503 * (location_targetdrivetime * census_blackafrican))));
            } while ((n1503 = n1503->nxt));
          }
          e1502 = e1502->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_492 = 0.0;
      __SQL_SUM_AGGREGATE_492INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1504 = LOCATION.head;
        while (e1504) {
          long inventory_locn = e1504->LOCATION_LOCN;
          long location_zip = e1504->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1504->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1504->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1504->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1504->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1504->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1504->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1504->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1504->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1504->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1504->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1504->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1504->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1504->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1504 = e1504->__av;
          { //slice
            const HASH_RES_t h266 = CENSUS_mapkey0_idxfn::hash(se4763.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1505 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1505 = &(i1505->buckets_[h266 % i1505->size_]);
            CENSUS_entry* e1505;
            do if ((e1505 = n1505->obj) && h266 == n1505->hash && CENSUS_mapkey0_idxfn::equals(se4763, *e1505)) {
              long census_population = e1505->CENSUS_POPULATION;
              long census_white = e1505->CENSUS_WHITE;
              long census_asian = e1505->CENSUS_ASIAN;
              long census_pacific = e1505->CENSUS_PACIFIC;
              long census_blackafrican = e1505->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1505->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1505->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1505->CENSUS_HOUSEUNITS;
              long census_families = e1505->CENSUS_FAMILIES;
              long census_households = e1505->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1505->CENSUS_HUSBWIFE;
              long census_males = e1505->CENSUS_MALES;
              long census_females = e1505->CENSUS_FEMALES;
              long census_householdschildren = e1505->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1505->CENSUS_HISPANIC;
              long v1505 = e1505->__av;
              __SQL_SUM_AGGREGATE_492INVENTORY1_P_3.addOrDelOnZero(se4762.modify(inventory_locn), (v1504 * (v1505 * (location_targetdrivetime * census_medianage))));
            } while ((n1505 = n1505->nxt));
          }
          e1504 = e1504->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_493 = 0.0;
      __SQL_SUM_AGGREGATE_493INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1506 = LOCATION.head;
        while (e1506) {
          long inventory_locn = e1506->LOCATION_LOCN;
          long location_zip = e1506->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1506->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1506->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1506->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1506->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1506->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1506->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1506->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1506->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1506->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1506->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1506->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1506->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1506->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1506 = e1506->__av;
          { //slice
            const HASH_RES_t h267 = CENSUS_mapkey0_idxfn::hash(se4766.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1507 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1507 = &(i1507->buckets_[h267 % i1507->size_]);
            CENSUS_entry* e1507;
            do if ((e1507 = n1507->obj) && h267 == n1507->hash && CENSUS_mapkey0_idxfn::equals(se4766, *e1507)) {
              long census_population = e1507->CENSUS_POPULATION;
              long census_white = e1507->CENSUS_WHITE;
              long census_asian = e1507->CENSUS_ASIAN;
              long census_pacific = e1507->CENSUS_PACIFIC;
              long census_blackafrican = e1507->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1507->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1507->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1507->CENSUS_HOUSEUNITS;
              long census_families = e1507->CENSUS_FAMILIES;
              long census_households = e1507->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1507->CENSUS_HUSBWIFE;
              long census_males = e1507->CENSUS_MALES;
              long census_females = e1507->CENSUS_FEMALES;
              long census_householdschildren = e1507->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1507->CENSUS_HISPANIC;
              long v1507 = e1507->__av;
              __SQL_SUM_AGGREGATE_493INVENTORY1_P_3.addOrDelOnZero(se4765.modify(inventory_locn), (v1506 * (v1507 * (location_targetdrivetime * census_occupiedhouseunits))));
            } while ((n1507 = n1507->nxt));
          }
          e1506 = e1506->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_494 = 0.0;
      __SQL_SUM_AGGREGATE_494INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1508 = LOCATION.head;
        while (e1508) {
          long inventory_locn = e1508->LOCATION_LOCN;
          long location_zip = e1508->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1508->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1508->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1508->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1508->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1508->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1508->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1508->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1508->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1508->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1508->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1508->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1508->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1508->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1508 = e1508->__av;
          { //slice
            const HASH_RES_t h268 = CENSUS_mapkey0_idxfn::hash(se4769.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1509 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1509 = &(i1509->buckets_[h268 % i1509->size_]);
            CENSUS_entry* e1509;
            do if ((e1509 = n1509->obj) && h268 == n1509->hash && CENSUS_mapkey0_idxfn::equals(se4769, *e1509)) {
              long census_population = e1509->CENSUS_POPULATION;
              long census_white = e1509->CENSUS_WHITE;
              long census_asian = e1509->CENSUS_ASIAN;
              long census_pacific = e1509->CENSUS_PACIFIC;
              long census_blackafrican = e1509->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1509->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1509->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1509->CENSUS_HOUSEUNITS;
              long census_families = e1509->CENSUS_FAMILIES;
              long census_households = e1509->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1509->CENSUS_HUSBWIFE;
              long census_males = e1509->CENSUS_MALES;
              long census_females = e1509->CENSUS_FEMALES;
              long census_householdschildren = e1509->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1509->CENSUS_HISPANIC;
              long v1509 = e1509->__av;
              __SQL_SUM_AGGREGATE_494INVENTORY1_P_3.addOrDelOnZero(se4768.modify(inventory_locn), (v1508 * (v1509 * (location_targetdrivetime * census_houseunits))));
            } while ((n1509 = n1509->nxt));
          }
          e1508 = e1508->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_495 = 0.0;
      __SQL_SUM_AGGREGATE_495INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1510 = LOCATION.head;
        while (e1510) {
          long inventory_locn = e1510->LOCATION_LOCN;
          long location_zip = e1510->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1510->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1510->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1510->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1510->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1510->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1510->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1510->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1510->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1510->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1510->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1510->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1510->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1510->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1510 = e1510->__av;
          { //slice
            const HASH_RES_t h269 = CENSUS_mapkey0_idxfn::hash(se4772.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1511 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1511 = &(i1511->buckets_[h269 % i1511->size_]);
            CENSUS_entry* e1511;
            do if ((e1511 = n1511->obj) && h269 == n1511->hash && CENSUS_mapkey0_idxfn::equals(se4772, *e1511)) {
              long census_population = e1511->CENSUS_POPULATION;
              long census_white = e1511->CENSUS_WHITE;
              long census_asian = e1511->CENSUS_ASIAN;
              long census_pacific = e1511->CENSUS_PACIFIC;
              long census_blackafrican = e1511->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1511->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1511->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1511->CENSUS_HOUSEUNITS;
              long census_families = e1511->CENSUS_FAMILIES;
              long census_households = e1511->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1511->CENSUS_HUSBWIFE;
              long census_males = e1511->CENSUS_MALES;
              long census_females = e1511->CENSUS_FEMALES;
              long census_householdschildren = e1511->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1511->CENSUS_HISPANIC;
              long v1511 = e1511->__av;
              __SQL_SUM_AGGREGATE_495INVENTORY1_P_3.addOrDelOnZero(se4771.modify(inventory_locn), (v1510 * (v1511 * (location_targetdrivetime * census_families))));
            } while ((n1511 = n1511->nxt));
          }
          e1510 = e1510->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_496 = 0.0;
      __SQL_SUM_AGGREGATE_496INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1512 = LOCATION.head;
        while (e1512) {
          long inventory_locn = e1512->LOCATION_LOCN;
          long location_zip = e1512->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1512->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1512->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1512->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1512->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1512->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1512->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1512->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1512->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1512->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1512->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1512->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1512->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1512->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1512 = e1512->__av;
          { //slice
            const HASH_RES_t h270 = CENSUS_mapkey0_idxfn::hash(se4775.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1513 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1513 = &(i1513->buckets_[h270 % i1513->size_]);
            CENSUS_entry* e1513;
            do if ((e1513 = n1513->obj) && h270 == n1513->hash && CENSUS_mapkey0_idxfn::equals(se4775, *e1513)) {
              long census_population = e1513->CENSUS_POPULATION;
              long census_white = e1513->CENSUS_WHITE;
              long census_asian = e1513->CENSUS_ASIAN;
              long census_pacific = e1513->CENSUS_PACIFIC;
              long census_blackafrican = e1513->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1513->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1513->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1513->CENSUS_HOUSEUNITS;
              long census_families = e1513->CENSUS_FAMILIES;
              long census_households = e1513->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1513->CENSUS_HUSBWIFE;
              long census_males = e1513->CENSUS_MALES;
              long census_females = e1513->CENSUS_FEMALES;
              long census_householdschildren = e1513->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1513->CENSUS_HISPANIC;
              long v1513 = e1513->__av;
              __SQL_SUM_AGGREGATE_496INVENTORY1_P_3.addOrDelOnZero(se4774.modify(inventory_locn), (v1512 * (v1513 * (location_targetdrivetime * census_households))));
            } while ((n1513 = n1513->nxt));
          }
          e1512 = e1512->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_497 = 0.0;
      __SQL_SUM_AGGREGATE_497INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1514 = LOCATION.head;
        while (e1514) {
          long inventory_locn = e1514->LOCATION_LOCN;
          long location_zip = e1514->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1514->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1514->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1514->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1514->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1514->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1514->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1514->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1514->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1514->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1514->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1514->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1514->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1514->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1514 = e1514->__av;
          { //slice
            const HASH_RES_t h271 = CENSUS_mapkey0_idxfn::hash(se4778.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1515 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1515 = &(i1515->buckets_[h271 % i1515->size_]);
            CENSUS_entry* e1515;
            do if ((e1515 = n1515->obj) && h271 == n1515->hash && CENSUS_mapkey0_idxfn::equals(se4778, *e1515)) {
              long census_population = e1515->CENSUS_POPULATION;
              long census_white = e1515->CENSUS_WHITE;
              long census_asian = e1515->CENSUS_ASIAN;
              long census_pacific = e1515->CENSUS_PACIFIC;
              long census_blackafrican = e1515->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1515->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1515->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1515->CENSUS_HOUSEUNITS;
              long census_families = e1515->CENSUS_FAMILIES;
              long census_households = e1515->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1515->CENSUS_HUSBWIFE;
              long census_males = e1515->CENSUS_MALES;
              long census_females = e1515->CENSUS_FEMALES;
              long census_householdschildren = e1515->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1515->CENSUS_HISPANIC;
              long v1515 = e1515->__av;
              __SQL_SUM_AGGREGATE_497INVENTORY1_P_3.addOrDelOnZero(se4777.modify(inventory_locn), (v1514 * (v1515 * (location_targetdrivetime * census_husbwife))));
            } while ((n1515 = n1515->nxt));
          }
          e1514 = e1514->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_498 = 0.0;
      __SQL_SUM_AGGREGATE_498INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1516 = LOCATION.head;
        while (e1516) {
          long inventory_locn = e1516->LOCATION_LOCN;
          long location_zip = e1516->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1516->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1516->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1516->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1516->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1516->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1516->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1516->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1516->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1516->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1516->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1516->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1516->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1516->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1516 = e1516->__av;
          { //slice
            const HASH_RES_t h272 = CENSUS_mapkey0_idxfn::hash(se4781.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1517 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1517 = &(i1517->buckets_[h272 % i1517->size_]);
            CENSUS_entry* e1517;
            do if ((e1517 = n1517->obj) && h272 == n1517->hash && CENSUS_mapkey0_idxfn::equals(se4781, *e1517)) {
              long census_population = e1517->CENSUS_POPULATION;
              long census_white = e1517->CENSUS_WHITE;
              long census_asian = e1517->CENSUS_ASIAN;
              long census_pacific = e1517->CENSUS_PACIFIC;
              long census_blackafrican = e1517->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1517->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1517->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1517->CENSUS_HOUSEUNITS;
              long census_families = e1517->CENSUS_FAMILIES;
              long census_households = e1517->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1517->CENSUS_HUSBWIFE;
              long census_males = e1517->CENSUS_MALES;
              long census_females = e1517->CENSUS_FEMALES;
              long census_householdschildren = e1517->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1517->CENSUS_HISPANIC;
              long v1517 = e1517->__av;
              __SQL_SUM_AGGREGATE_498INVENTORY1_P_3.addOrDelOnZero(se4780.modify(inventory_locn), (v1516 * (v1517 * (location_targetdrivetime * census_males))));
            } while ((n1517 = n1517->nxt));
          }
          e1516 = e1516->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_499 = 0.0;
      __SQL_SUM_AGGREGATE_499INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1518 = LOCATION.head;
        while (e1518) {
          long inventory_locn = e1518->LOCATION_LOCN;
          long location_zip = e1518->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1518->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1518->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1518->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1518->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1518->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1518->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1518->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1518->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1518->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1518->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1518->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1518->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1518->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1518 = e1518->__av;
          { //slice
            const HASH_RES_t h273 = CENSUS_mapkey0_idxfn::hash(se4784.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1519 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1519 = &(i1519->buckets_[h273 % i1519->size_]);
            CENSUS_entry* e1519;
            do if ((e1519 = n1519->obj) && h273 == n1519->hash && CENSUS_mapkey0_idxfn::equals(se4784, *e1519)) {
              long census_population = e1519->CENSUS_POPULATION;
              long census_white = e1519->CENSUS_WHITE;
              long census_asian = e1519->CENSUS_ASIAN;
              long census_pacific = e1519->CENSUS_PACIFIC;
              long census_blackafrican = e1519->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1519->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1519->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1519->CENSUS_HOUSEUNITS;
              long census_families = e1519->CENSUS_FAMILIES;
              long census_households = e1519->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1519->CENSUS_HUSBWIFE;
              long census_males = e1519->CENSUS_MALES;
              long census_females = e1519->CENSUS_FEMALES;
              long census_householdschildren = e1519->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1519->CENSUS_HISPANIC;
              long v1519 = e1519->__av;
              __SQL_SUM_AGGREGATE_499INVENTORY1_P_3.addOrDelOnZero(se4783.modify(inventory_locn), (v1518 * (v1519 * (location_targetdrivetime * census_females))));
            } while ((n1519 = n1519->nxt));
          }
          e1518 = e1518->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_500 = 0.0;
      __SQL_SUM_AGGREGATE_500INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1520 = LOCATION.head;
        while (e1520) {
          long inventory_locn = e1520->LOCATION_LOCN;
          long location_zip = e1520->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1520->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1520->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1520->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1520->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1520->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1520->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1520->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1520->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1520->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1520->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1520->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1520->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1520->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1520 = e1520->__av;
          { //slice
            const HASH_RES_t h274 = CENSUS_mapkey0_idxfn::hash(se4787.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1521 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1521 = &(i1521->buckets_[h274 % i1521->size_]);
            CENSUS_entry* e1521;
            do if ((e1521 = n1521->obj) && h274 == n1521->hash && CENSUS_mapkey0_idxfn::equals(se4787, *e1521)) {
              long census_population = e1521->CENSUS_POPULATION;
              long census_white = e1521->CENSUS_WHITE;
              long census_asian = e1521->CENSUS_ASIAN;
              long census_pacific = e1521->CENSUS_PACIFIC;
              long census_blackafrican = e1521->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1521->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1521->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1521->CENSUS_HOUSEUNITS;
              long census_families = e1521->CENSUS_FAMILIES;
              long census_households = e1521->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1521->CENSUS_HUSBWIFE;
              long census_males = e1521->CENSUS_MALES;
              long census_females = e1521->CENSUS_FEMALES;
              long census_householdschildren = e1521->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1521->CENSUS_HISPANIC;
              long v1521 = e1521->__av;
              __SQL_SUM_AGGREGATE_500INVENTORY1_P_3.addOrDelOnZero(se4786.modify(inventory_locn), (v1520 * (v1521 * (location_targetdrivetime * census_householdschildren))));
            } while ((n1521 = n1521->nxt));
          }
          e1520 = e1520->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_501 = 0.0;
      __SQL_SUM_AGGREGATE_501INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1522 = LOCATION.head;
        while (e1522) {
          long inventory_locn = e1522->LOCATION_LOCN;
          long location_zip = e1522->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1522->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1522->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1522->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1522->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1522->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1522->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1522->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1522->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1522->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1522->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1522->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1522->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1522->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1522 = e1522->__av;
          { //slice
            const HASH_RES_t h275 = CENSUS_mapkey0_idxfn::hash(se4790.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1523 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1523 = &(i1523->buckets_[h275 % i1523->size_]);
            CENSUS_entry* e1523;
            do if ((e1523 = n1523->obj) && h275 == n1523->hash && CENSUS_mapkey0_idxfn::equals(se4790, *e1523)) {
              long census_population = e1523->CENSUS_POPULATION;
              long census_white = e1523->CENSUS_WHITE;
              long census_asian = e1523->CENSUS_ASIAN;
              long census_pacific = e1523->CENSUS_PACIFIC;
              long census_blackafrican = e1523->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1523->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1523->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1523->CENSUS_HOUSEUNITS;
              long census_families = e1523->CENSUS_FAMILIES;
              long census_households = e1523->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1523->CENSUS_HUSBWIFE;
              long census_males = e1523->CENSUS_MALES;
              long census_females = e1523->CENSUS_FEMALES;
              long census_householdschildren = e1523->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1523->CENSUS_HISPANIC;
              long v1523 = e1523->__av;
              __SQL_SUM_AGGREGATE_501INVENTORY1_P_3.addOrDelOnZero(se4789.modify(inventory_locn), (v1522 * (v1523 * (location_targetdrivetime * census_hispanic))));
            } while ((n1523 = n1523->nxt));
          }
          e1522 = e1522->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_502 = 0.0;
      __SQL_SUM_AGGREGATE_503 = 0.0;
      __SQL_SUM_AGGREGATE_504 = 0.0;
      __SQL_SUM_AGGREGATE_505 = 0.0;
      __SQL_SUM_AGGREGATE_506 = 0.0;
      __SQL_SUM_AGGREGATE_507 = 0.0;
      __SQL_SUM_AGGREGATE_508 = 0.0;
      __SQL_SUM_AGGREGATE_509 = 0.0;
      __SQL_SUM_AGGREGATE_510 = 0.0;
      __SQL_SUM_AGGREGATE_511 = 0.0;
      __SQL_SUM_AGGREGATE_512 = 0.0;
      __SQL_SUM_AGGREGATE_512INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1524 = LOCATION.head;
        while (e1524) {
          long inventory_locn = e1524->LOCATION_LOCN;
          long location_zip = e1524->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1524->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1524->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1524->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1524->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1524->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1524->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1524->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1524->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1524->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1524->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1524->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1524->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1524->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1524 = e1524->__av;
          { //slice
            const HASH_RES_t h276 = CENSUS_mapkey0_idxfn::hash(se4803.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1525 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1525 = &(i1525->buckets_[h276 % i1525->size_]);
            CENSUS_entry* e1525;
            do if ((e1525 = n1525->obj) && h276 == n1525->hash && CENSUS_mapkey0_idxfn::equals(se4803, *e1525)) {
              long census_population = e1525->CENSUS_POPULATION;
              long census_white = e1525->CENSUS_WHITE;
              long census_asian = e1525->CENSUS_ASIAN;
              long census_pacific = e1525->CENSUS_PACIFIC;
              long census_blackafrican = e1525->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1525->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1525->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1525->CENSUS_HOUSEUNITS;
              long census_families = e1525->CENSUS_FAMILIES;
              long census_households = e1525->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1525->CENSUS_HUSBWIFE;
              long census_males = e1525->CENSUS_MALES;
              long census_females = e1525->CENSUS_FEMALES;
              long census_householdschildren = e1525->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1525->CENSUS_HISPANIC;
              long v1525 = e1525->__av;
              __SQL_SUM_AGGREGATE_512INVENTORY1_P_3.addOrDelOnZero(se4802.modify(inventory_locn), (v1524 * (v1525 * (location_walmartdistance * location_walmartdistance))));
            } while ((n1525 = n1525->nxt));
          }
          e1524 = e1524->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_513 = 0.0;
      __SQL_SUM_AGGREGATE_513INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1526 = LOCATION.head;
        while (e1526) {
          long inventory_locn = e1526->LOCATION_LOCN;
          long location_zip = e1526->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1526->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1526->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1526->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1526->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1526->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1526->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1526->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1526->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1526->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1526->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1526->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1526->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1526->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1526 = e1526->__av;
          { //slice
            const HASH_RES_t h277 = CENSUS_mapkey0_idxfn::hash(se4806.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1527 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1527 = &(i1527->buckets_[h277 % i1527->size_]);
            CENSUS_entry* e1527;
            do if ((e1527 = n1527->obj) && h277 == n1527->hash && CENSUS_mapkey0_idxfn::equals(se4806, *e1527)) {
              long census_population = e1527->CENSUS_POPULATION;
              long census_white = e1527->CENSUS_WHITE;
              long census_asian = e1527->CENSUS_ASIAN;
              long census_pacific = e1527->CENSUS_PACIFIC;
              long census_blackafrican = e1527->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1527->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1527->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1527->CENSUS_HOUSEUNITS;
              long census_families = e1527->CENSUS_FAMILIES;
              long census_households = e1527->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1527->CENSUS_HUSBWIFE;
              long census_males = e1527->CENSUS_MALES;
              long census_females = e1527->CENSUS_FEMALES;
              long census_householdschildren = e1527->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1527->CENSUS_HISPANIC;
              long v1527 = e1527->__av;
              __SQL_SUM_AGGREGATE_513INVENTORY1_P_3.addOrDelOnZero(se4805.modify(inventory_locn), (v1526 * (v1527 * (location_walmartdistance * location_walmartdrivetime))));
            } while ((n1527 = n1527->nxt));
          }
          e1526 = e1526->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_514 = 0.0;
      __SQL_SUM_AGGREGATE_514INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1528 = LOCATION.head;
        while (e1528) {
          long inventory_locn = e1528->LOCATION_LOCN;
          long location_zip = e1528->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1528->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1528->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1528->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1528->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1528->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1528->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1528->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1528->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1528->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1528->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1528->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1528->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1528->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1528 = e1528->__av;
          { //slice
            const HASH_RES_t h278 = CENSUS_mapkey0_idxfn::hash(se4809.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1529 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1529 = &(i1529->buckets_[h278 % i1529->size_]);
            CENSUS_entry* e1529;
            do if ((e1529 = n1529->obj) && h278 == n1529->hash && CENSUS_mapkey0_idxfn::equals(se4809, *e1529)) {
              long census_population = e1529->CENSUS_POPULATION;
              long census_white = e1529->CENSUS_WHITE;
              long census_asian = e1529->CENSUS_ASIAN;
              long census_pacific = e1529->CENSUS_PACIFIC;
              long census_blackafrican = e1529->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1529->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1529->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1529->CENSUS_HOUSEUNITS;
              long census_families = e1529->CENSUS_FAMILIES;
              long census_households = e1529->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1529->CENSUS_HUSBWIFE;
              long census_males = e1529->CENSUS_MALES;
              long census_females = e1529->CENSUS_FEMALES;
              long census_householdschildren = e1529->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1529->CENSUS_HISPANIC;
              long v1529 = e1529->__av;
              __SQL_SUM_AGGREGATE_514INVENTORY1_P_3.addOrDelOnZero(se4808.modify(inventory_locn), (v1528 * (v1529 * (location_walmartdistance * location_walmartsupercenterdistance))));
            } while ((n1529 = n1529->nxt));
          }
          e1528 = e1528->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_515 = 0.0;
      __SQL_SUM_AGGREGATE_515INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1530 = LOCATION.head;
        while (e1530) {
          long inventory_locn = e1530->LOCATION_LOCN;
          long location_zip = e1530->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1530->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1530->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1530->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1530->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1530->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1530->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1530->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1530->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1530->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1530->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1530->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1530->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1530->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1530 = e1530->__av;
          { //slice
            const HASH_RES_t h279 = CENSUS_mapkey0_idxfn::hash(se4812.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1531 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1531 = &(i1531->buckets_[h279 % i1531->size_]);
            CENSUS_entry* e1531;
            do if ((e1531 = n1531->obj) && h279 == n1531->hash && CENSUS_mapkey0_idxfn::equals(se4812, *e1531)) {
              long census_population = e1531->CENSUS_POPULATION;
              long census_white = e1531->CENSUS_WHITE;
              long census_asian = e1531->CENSUS_ASIAN;
              long census_pacific = e1531->CENSUS_PACIFIC;
              long census_blackafrican = e1531->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1531->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1531->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1531->CENSUS_HOUSEUNITS;
              long census_families = e1531->CENSUS_FAMILIES;
              long census_households = e1531->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1531->CENSUS_HUSBWIFE;
              long census_males = e1531->CENSUS_MALES;
              long census_females = e1531->CENSUS_FEMALES;
              long census_householdschildren = e1531->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1531->CENSUS_HISPANIC;
              long v1531 = e1531->__av;
              __SQL_SUM_AGGREGATE_515INVENTORY1_P_3.addOrDelOnZero(se4811.modify(inventory_locn), (v1530 * (v1531 * (location_walmartdistance * location_walmartsupercenterdrivetime))));
            } while ((n1531 = n1531->nxt));
          }
          e1530 = e1530->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_516 = 0.0;
      __SQL_SUM_AGGREGATE_516INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1532 = LOCATION.head;
        while (e1532) {
          long inventory_locn = e1532->LOCATION_LOCN;
          long location_zip = e1532->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1532->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1532->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1532->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1532->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1532->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1532->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1532->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1532->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1532->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1532->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1532->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1532->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1532->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1532 = e1532->__av;
          { //slice
            const HASH_RES_t h280 = CENSUS_mapkey0_idxfn::hash(se4815.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1533 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1533 = &(i1533->buckets_[h280 % i1533->size_]);
            CENSUS_entry* e1533;
            do if ((e1533 = n1533->obj) && h280 == n1533->hash && CENSUS_mapkey0_idxfn::equals(se4815, *e1533)) {
              long census_population = e1533->CENSUS_POPULATION;
              long census_white = e1533->CENSUS_WHITE;
              long census_asian = e1533->CENSUS_ASIAN;
              long census_pacific = e1533->CENSUS_PACIFIC;
              long census_blackafrican = e1533->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1533->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1533->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1533->CENSUS_HOUSEUNITS;
              long census_families = e1533->CENSUS_FAMILIES;
              long census_households = e1533->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1533->CENSUS_HUSBWIFE;
              long census_males = e1533->CENSUS_MALES;
              long census_females = e1533->CENSUS_FEMALES;
              long census_householdschildren = e1533->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1533->CENSUS_HISPANIC;
              long v1533 = e1533->__av;
              __SQL_SUM_AGGREGATE_516INVENTORY1_P_3.addOrDelOnZero(se4814.modify(inventory_locn), (v1532 * (v1533 * (location_walmartdistance * census_population))));
            } while ((n1533 = n1533->nxt));
          }
          e1532 = e1532->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_517 = 0.0;
      __SQL_SUM_AGGREGATE_517INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1534 = LOCATION.head;
        while (e1534) {
          long inventory_locn = e1534->LOCATION_LOCN;
          long location_zip = e1534->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1534->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1534->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1534->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1534->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1534->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1534->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1534->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1534->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1534->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1534->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1534->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1534->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1534->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1534 = e1534->__av;
          { //slice
            const HASH_RES_t h281 = CENSUS_mapkey0_idxfn::hash(se4818.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1535 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1535 = &(i1535->buckets_[h281 % i1535->size_]);
            CENSUS_entry* e1535;
            do if ((e1535 = n1535->obj) && h281 == n1535->hash && CENSUS_mapkey0_idxfn::equals(se4818, *e1535)) {
              long census_population = e1535->CENSUS_POPULATION;
              long census_white = e1535->CENSUS_WHITE;
              long census_asian = e1535->CENSUS_ASIAN;
              long census_pacific = e1535->CENSUS_PACIFIC;
              long census_blackafrican = e1535->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1535->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1535->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1535->CENSUS_HOUSEUNITS;
              long census_families = e1535->CENSUS_FAMILIES;
              long census_households = e1535->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1535->CENSUS_HUSBWIFE;
              long census_males = e1535->CENSUS_MALES;
              long census_females = e1535->CENSUS_FEMALES;
              long census_householdschildren = e1535->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1535->CENSUS_HISPANIC;
              long v1535 = e1535->__av;
              __SQL_SUM_AGGREGATE_517INVENTORY1_P_3.addOrDelOnZero(se4817.modify(inventory_locn), (v1534 * (v1535 * (location_walmartdistance * census_white))));
            } while ((n1535 = n1535->nxt));
          }
          e1534 = e1534->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_518 = 0.0;
      __SQL_SUM_AGGREGATE_518INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1536 = LOCATION.head;
        while (e1536) {
          long inventory_locn = e1536->LOCATION_LOCN;
          long location_zip = e1536->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1536->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1536->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1536->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1536->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1536->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1536->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1536->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1536->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1536->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1536->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1536->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1536->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1536->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1536 = e1536->__av;
          { //slice
            const HASH_RES_t h282 = CENSUS_mapkey0_idxfn::hash(se4821.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1537 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1537 = &(i1537->buckets_[h282 % i1537->size_]);
            CENSUS_entry* e1537;
            do if ((e1537 = n1537->obj) && h282 == n1537->hash && CENSUS_mapkey0_idxfn::equals(se4821, *e1537)) {
              long census_population = e1537->CENSUS_POPULATION;
              long census_white = e1537->CENSUS_WHITE;
              long census_asian = e1537->CENSUS_ASIAN;
              long census_pacific = e1537->CENSUS_PACIFIC;
              long census_blackafrican = e1537->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1537->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1537->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1537->CENSUS_HOUSEUNITS;
              long census_families = e1537->CENSUS_FAMILIES;
              long census_households = e1537->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1537->CENSUS_HUSBWIFE;
              long census_males = e1537->CENSUS_MALES;
              long census_females = e1537->CENSUS_FEMALES;
              long census_householdschildren = e1537->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1537->CENSUS_HISPANIC;
              long v1537 = e1537->__av;
              __SQL_SUM_AGGREGATE_518INVENTORY1_P_3.addOrDelOnZero(se4820.modify(inventory_locn), (v1536 * (v1537 * (location_walmartdistance * census_asian))));
            } while ((n1537 = n1537->nxt));
          }
          e1536 = e1536->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_519 = 0.0;
      __SQL_SUM_AGGREGATE_519INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1538 = LOCATION.head;
        while (e1538) {
          long inventory_locn = e1538->LOCATION_LOCN;
          long location_zip = e1538->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1538->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1538->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1538->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1538->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1538->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1538->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1538->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1538->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1538->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1538->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1538->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1538->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1538->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1538 = e1538->__av;
          { //slice
            const HASH_RES_t h283 = CENSUS_mapkey0_idxfn::hash(se4824.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1539 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1539 = &(i1539->buckets_[h283 % i1539->size_]);
            CENSUS_entry* e1539;
            do if ((e1539 = n1539->obj) && h283 == n1539->hash && CENSUS_mapkey0_idxfn::equals(se4824, *e1539)) {
              long census_population = e1539->CENSUS_POPULATION;
              long census_white = e1539->CENSUS_WHITE;
              long census_asian = e1539->CENSUS_ASIAN;
              long census_pacific = e1539->CENSUS_PACIFIC;
              long census_blackafrican = e1539->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1539->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1539->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1539->CENSUS_HOUSEUNITS;
              long census_families = e1539->CENSUS_FAMILIES;
              long census_households = e1539->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1539->CENSUS_HUSBWIFE;
              long census_males = e1539->CENSUS_MALES;
              long census_females = e1539->CENSUS_FEMALES;
              long census_householdschildren = e1539->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1539->CENSUS_HISPANIC;
              long v1539 = e1539->__av;
              __SQL_SUM_AGGREGATE_519INVENTORY1_P_3.addOrDelOnZero(se4823.modify(inventory_locn), (v1538 * (v1539 * (location_walmartdistance * census_pacific))));
            } while ((n1539 = n1539->nxt));
          }
          e1538 = e1538->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_520 = 0.0;
      __SQL_SUM_AGGREGATE_520INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1540 = LOCATION.head;
        while (e1540) {
          long inventory_locn = e1540->LOCATION_LOCN;
          long location_zip = e1540->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1540->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1540->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1540->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1540->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1540->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1540->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1540->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1540->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1540->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1540->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1540->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1540->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1540->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1540 = e1540->__av;
          { //slice
            const HASH_RES_t h284 = CENSUS_mapkey0_idxfn::hash(se4827.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1541 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1541 = &(i1541->buckets_[h284 % i1541->size_]);
            CENSUS_entry* e1541;
            do if ((e1541 = n1541->obj) && h284 == n1541->hash && CENSUS_mapkey0_idxfn::equals(se4827, *e1541)) {
              long census_population = e1541->CENSUS_POPULATION;
              long census_white = e1541->CENSUS_WHITE;
              long census_asian = e1541->CENSUS_ASIAN;
              long census_pacific = e1541->CENSUS_PACIFIC;
              long census_blackafrican = e1541->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1541->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1541->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1541->CENSUS_HOUSEUNITS;
              long census_families = e1541->CENSUS_FAMILIES;
              long census_households = e1541->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1541->CENSUS_HUSBWIFE;
              long census_males = e1541->CENSUS_MALES;
              long census_females = e1541->CENSUS_FEMALES;
              long census_householdschildren = e1541->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1541->CENSUS_HISPANIC;
              long v1541 = e1541->__av;
              __SQL_SUM_AGGREGATE_520INVENTORY1_P_3.addOrDelOnZero(se4826.modify(inventory_locn), (v1540 * (v1541 * (location_walmartdistance * census_blackafrican))));
            } while ((n1541 = n1541->nxt));
          }
          e1540 = e1540->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_521 = 0.0;
      __SQL_SUM_AGGREGATE_521INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1542 = LOCATION.head;
        while (e1542) {
          long inventory_locn = e1542->LOCATION_LOCN;
          long location_zip = e1542->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1542->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1542->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1542->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1542->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1542->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1542->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1542->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1542->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1542->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1542->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1542->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1542->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1542->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1542 = e1542->__av;
          { //slice
            const HASH_RES_t h285 = CENSUS_mapkey0_idxfn::hash(se4830.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1543 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1543 = &(i1543->buckets_[h285 % i1543->size_]);
            CENSUS_entry* e1543;
            do if ((e1543 = n1543->obj) && h285 == n1543->hash && CENSUS_mapkey0_idxfn::equals(se4830, *e1543)) {
              long census_population = e1543->CENSUS_POPULATION;
              long census_white = e1543->CENSUS_WHITE;
              long census_asian = e1543->CENSUS_ASIAN;
              long census_pacific = e1543->CENSUS_PACIFIC;
              long census_blackafrican = e1543->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1543->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1543->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1543->CENSUS_HOUSEUNITS;
              long census_families = e1543->CENSUS_FAMILIES;
              long census_households = e1543->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1543->CENSUS_HUSBWIFE;
              long census_males = e1543->CENSUS_MALES;
              long census_females = e1543->CENSUS_FEMALES;
              long census_householdschildren = e1543->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1543->CENSUS_HISPANIC;
              long v1543 = e1543->__av;
              __SQL_SUM_AGGREGATE_521INVENTORY1_P_3.addOrDelOnZero(se4829.modify(inventory_locn), (v1542 * (v1543 * (location_walmartdistance * census_medianage))));
            } while ((n1543 = n1543->nxt));
          }
          e1542 = e1542->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_522 = 0.0;
      __SQL_SUM_AGGREGATE_522INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1544 = LOCATION.head;
        while (e1544) {
          long inventory_locn = e1544->LOCATION_LOCN;
          long location_zip = e1544->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1544->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1544->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1544->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1544->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1544->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1544->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1544->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1544->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1544->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1544->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1544->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1544->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1544->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1544 = e1544->__av;
          { //slice
            const HASH_RES_t h286 = CENSUS_mapkey0_idxfn::hash(se4833.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1545 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1545 = &(i1545->buckets_[h286 % i1545->size_]);
            CENSUS_entry* e1545;
            do if ((e1545 = n1545->obj) && h286 == n1545->hash && CENSUS_mapkey0_idxfn::equals(se4833, *e1545)) {
              long census_population = e1545->CENSUS_POPULATION;
              long census_white = e1545->CENSUS_WHITE;
              long census_asian = e1545->CENSUS_ASIAN;
              long census_pacific = e1545->CENSUS_PACIFIC;
              long census_blackafrican = e1545->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1545->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1545->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1545->CENSUS_HOUSEUNITS;
              long census_families = e1545->CENSUS_FAMILIES;
              long census_households = e1545->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1545->CENSUS_HUSBWIFE;
              long census_males = e1545->CENSUS_MALES;
              long census_females = e1545->CENSUS_FEMALES;
              long census_householdschildren = e1545->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1545->CENSUS_HISPANIC;
              long v1545 = e1545->__av;
              __SQL_SUM_AGGREGATE_522INVENTORY1_P_3.addOrDelOnZero(se4832.modify(inventory_locn), (v1544 * (v1545 * (location_walmartdistance * census_occupiedhouseunits))));
            } while ((n1545 = n1545->nxt));
          }
          e1544 = e1544->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_523 = 0.0;
      __SQL_SUM_AGGREGATE_523INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1546 = LOCATION.head;
        while (e1546) {
          long inventory_locn = e1546->LOCATION_LOCN;
          long location_zip = e1546->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1546->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1546->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1546->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1546->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1546->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1546->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1546->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1546->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1546->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1546->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1546->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1546->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1546->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1546 = e1546->__av;
          { //slice
            const HASH_RES_t h287 = CENSUS_mapkey0_idxfn::hash(se4836.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1547 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1547 = &(i1547->buckets_[h287 % i1547->size_]);
            CENSUS_entry* e1547;
            do if ((e1547 = n1547->obj) && h287 == n1547->hash && CENSUS_mapkey0_idxfn::equals(se4836, *e1547)) {
              long census_population = e1547->CENSUS_POPULATION;
              long census_white = e1547->CENSUS_WHITE;
              long census_asian = e1547->CENSUS_ASIAN;
              long census_pacific = e1547->CENSUS_PACIFIC;
              long census_blackafrican = e1547->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1547->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1547->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1547->CENSUS_HOUSEUNITS;
              long census_families = e1547->CENSUS_FAMILIES;
              long census_households = e1547->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1547->CENSUS_HUSBWIFE;
              long census_males = e1547->CENSUS_MALES;
              long census_females = e1547->CENSUS_FEMALES;
              long census_householdschildren = e1547->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1547->CENSUS_HISPANIC;
              long v1547 = e1547->__av;
              __SQL_SUM_AGGREGATE_523INVENTORY1_P_3.addOrDelOnZero(se4835.modify(inventory_locn), (v1546 * (v1547 * (location_walmartdistance * census_houseunits))));
            } while ((n1547 = n1547->nxt));
          }
          e1546 = e1546->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_524 = 0.0;
      __SQL_SUM_AGGREGATE_524INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1548 = LOCATION.head;
        while (e1548) {
          long inventory_locn = e1548->LOCATION_LOCN;
          long location_zip = e1548->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1548->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1548->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1548->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1548->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1548->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1548->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1548->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1548->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1548->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1548->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1548->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1548->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1548->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1548 = e1548->__av;
          { //slice
            const HASH_RES_t h288 = CENSUS_mapkey0_idxfn::hash(se4839.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1549 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1549 = &(i1549->buckets_[h288 % i1549->size_]);
            CENSUS_entry* e1549;
            do if ((e1549 = n1549->obj) && h288 == n1549->hash && CENSUS_mapkey0_idxfn::equals(se4839, *e1549)) {
              long census_population = e1549->CENSUS_POPULATION;
              long census_white = e1549->CENSUS_WHITE;
              long census_asian = e1549->CENSUS_ASIAN;
              long census_pacific = e1549->CENSUS_PACIFIC;
              long census_blackafrican = e1549->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1549->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1549->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1549->CENSUS_HOUSEUNITS;
              long census_families = e1549->CENSUS_FAMILIES;
              long census_households = e1549->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1549->CENSUS_HUSBWIFE;
              long census_males = e1549->CENSUS_MALES;
              long census_females = e1549->CENSUS_FEMALES;
              long census_householdschildren = e1549->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1549->CENSUS_HISPANIC;
              long v1549 = e1549->__av;
              __SQL_SUM_AGGREGATE_524INVENTORY1_P_3.addOrDelOnZero(se4838.modify(inventory_locn), (v1548 * (v1549 * (location_walmartdistance * census_families))));
            } while ((n1549 = n1549->nxt));
          }
          e1548 = e1548->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_525 = 0.0;
      __SQL_SUM_AGGREGATE_525INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1550 = LOCATION.head;
        while (e1550) {
          long inventory_locn = e1550->LOCATION_LOCN;
          long location_zip = e1550->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1550->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1550->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1550->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1550->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1550->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1550->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1550->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1550->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1550->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1550->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1550->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1550->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1550->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1550 = e1550->__av;
          { //slice
            const HASH_RES_t h289 = CENSUS_mapkey0_idxfn::hash(se4842.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1551 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1551 = &(i1551->buckets_[h289 % i1551->size_]);
            CENSUS_entry* e1551;
            do if ((e1551 = n1551->obj) && h289 == n1551->hash && CENSUS_mapkey0_idxfn::equals(se4842, *e1551)) {
              long census_population = e1551->CENSUS_POPULATION;
              long census_white = e1551->CENSUS_WHITE;
              long census_asian = e1551->CENSUS_ASIAN;
              long census_pacific = e1551->CENSUS_PACIFIC;
              long census_blackafrican = e1551->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1551->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1551->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1551->CENSUS_HOUSEUNITS;
              long census_families = e1551->CENSUS_FAMILIES;
              long census_households = e1551->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1551->CENSUS_HUSBWIFE;
              long census_males = e1551->CENSUS_MALES;
              long census_females = e1551->CENSUS_FEMALES;
              long census_householdschildren = e1551->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1551->CENSUS_HISPANIC;
              long v1551 = e1551->__av;
              __SQL_SUM_AGGREGATE_525INVENTORY1_P_3.addOrDelOnZero(se4841.modify(inventory_locn), (v1550 * (v1551 * (location_walmartdistance * census_households))));
            } while ((n1551 = n1551->nxt));
          }
          e1550 = e1550->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_526 = 0.0;
      __SQL_SUM_AGGREGATE_526INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1552 = LOCATION.head;
        while (e1552) {
          long inventory_locn = e1552->LOCATION_LOCN;
          long location_zip = e1552->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1552->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1552->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1552->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1552->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1552->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1552->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1552->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1552->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1552->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1552->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1552->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1552->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1552->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1552 = e1552->__av;
          { //slice
            const HASH_RES_t h290 = CENSUS_mapkey0_idxfn::hash(se4845.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1553 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1553 = &(i1553->buckets_[h290 % i1553->size_]);
            CENSUS_entry* e1553;
            do if ((e1553 = n1553->obj) && h290 == n1553->hash && CENSUS_mapkey0_idxfn::equals(se4845, *e1553)) {
              long census_population = e1553->CENSUS_POPULATION;
              long census_white = e1553->CENSUS_WHITE;
              long census_asian = e1553->CENSUS_ASIAN;
              long census_pacific = e1553->CENSUS_PACIFIC;
              long census_blackafrican = e1553->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1553->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1553->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1553->CENSUS_HOUSEUNITS;
              long census_families = e1553->CENSUS_FAMILIES;
              long census_households = e1553->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1553->CENSUS_HUSBWIFE;
              long census_males = e1553->CENSUS_MALES;
              long census_females = e1553->CENSUS_FEMALES;
              long census_householdschildren = e1553->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1553->CENSUS_HISPANIC;
              long v1553 = e1553->__av;
              __SQL_SUM_AGGREGATE_526INVENTORY1_P_3.addOrDelOnZero(se4844.modify(inventory_locn), (v1552 * (v1553 * (location_walmartdistance * census_husbwife))));
            } while ((n1553 = n1553->nxt));
          }
          e1552 = e1552->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_527 = 0.0;
      __SQL_SUM_AGGREGATE_527INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1554 = LOCATION.head;
        while (e1554) {
          long inventory_locn = e1554->LOCATION_LOCN;
          long location_zip = e1554->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1554->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1554->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1554->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1554->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1554->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1554->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1554->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1554->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1554->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1554->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1554->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1554->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1554->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1554 = e1554->__av;
          { //slice
            const HASH_RES_t h291 = CENSUS_mapkey0_idxfn::hash(se4848.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1555 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1555 = &(i1555->buckets_[h291 % i1555->size_]);
            CENSUS_entry* e1555;
            do if ((e1555 = n1555->obj) && h291 == n1555->hash && CENSUS_mapkey0_idxfn::equals(se4848, *e1555)) {
              long census_population = e1555->CENSUS_POPULATION;
              long census_white = e1555->CENSUS_WHITE;
              long census_asian = e1555->CENSUS_ASIAN;
              long census_pacific = e1555->CENSUS_PACIFIC;
              long census_blackafrican = e1555->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1555->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1555->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1555->CENSUS_HOUSEUNITS;
              long census_families = e1555->CENSUS_FAMILIES;
              long census_households = e1555->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1555->CENSUS_HUSBWIFE;
              long census_males = e1555->CENSUS_MALES;
              long census_females = e1555->CENSUS_FEMALES;
              long census_householdschildren = e1555->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1555->CENSUS_HISPANIC;
              long v1555 = e1555->__av;
              __SQL_SUM_AGGREGATE_527INVENTORY1_P_3.addOrDelOnZero(se4847.modify(inventory_locn), (v1554 * (v1555 * (location_walmartdistance * census_males))));
            } while ((n1555 = n1555->nxt));
          }
          e1554 = e1554->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_528 = 0.0;
      __SQL_SUM_AGGREGATE_528INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1556 = LOCATION.head;
        while (e1556) {
          long inventory_locn = e1556->LOCATION_LOCN;
          long location_zip = e1556->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1556->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1556->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1556->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1556->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1556->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1556->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1556->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1556->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1556->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1556->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1556->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1556->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1556->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1556 = e1556->__av;
          { //slice
            const HASH_RES_t h292 = CENSUS_mapkey0_idxfn::hash(se4851.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1557 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1557 = &(i1557->buckets_[h292 % i1557->size_]);
            CENSUS_entry* e1557;
            do if ((e1557 = n1557->obj) && h292 == n1557->hash && CENSUS_mapkey0_idxfn::equals(se4851, *e1557)) {
              long census_population = e1557->CENSUS_POPULATION;
              long census_white = e1557->CENSUS_WHITE;
              long census_asian = e1557->CENSUS_ASIAN;
              long census_pacific = e1557->CENSUS_PACIFIC;
              long census_blackafrican = e1557->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1557->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1557->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1557->CENSUS_HOUSEUNITS;
              long census_families = e1557->CENSUS_FAMILIES;
              long census_households = e1557->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1557->CENSUS_HUSBWIFE;
              long census_males = e1557->CENSUS_MALES;
              long census_females = e1557->CENSUS_FEMALES;
              long census_householdschildren = e1557->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1557->CENSUS_HISPANIC;
              long v1557 = e1557->__av;
              __SQL_SUM_AGGREGATE_528INVENTORY1_P_3.addOrDelOnZero(se4850.modify(inventory_locn), (v1556 * (v1557 * (location_walmartdistance * census_females))));
            } while ((n1557 = n1557->nxt));
          }
          e1556 = e1556->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_529 = 0.0;
      __SQL_SUM_AGGREGATE_529INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1558 = LOCATION.head;
        while (e1558) {
          long inventory_locn = e1558->LOCATION_LOCN;
          long location_zip = e1558->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1558->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1558->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1558->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1558->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1558->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1558->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1558->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1558->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1558->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1558->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1558->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1558->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1558->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1558 = e1558->__av;
          { //slice
            const HASH_RES_t h293 = CENSUS_mapkey0_idxfn::hash(se4854.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1559 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1559 = &(i1559->buckets_[h293 % i1559->size_]);
            CENSUS_entry* e1559;
            do if ((e1559 = n1559->obj) && h293 == n1559->hash && CENSUS_mapkey0_idxfn::equals(se4854, *e1559)) {
              long census_population = e1559->CENSUS_POPULATION;
              long census_white = e1559->CENSUS_WHITE;
              long census_asian = e1559->CENSUS_ASIAN;
              long census_pacific = e1559->CENSUS_PACIFIC;
              long census_blackafrican = e1559->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1559->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1559->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1559->CENSUS_HOUSEUNITS;
              long census_families = e1559->CENSUS_FAMILIES;
              long census_households = e1559->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1559->CENSUS_HUSBWIFE;
              long census_males = e1559->CENSUS_MALES;
              long census_females = e1559->CENSUS_FEMALES;
              long census_householdschildren = e1559->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1559->CENSUS_HISPANIC;
              long v1559 = e1559->__av;
              __SQL_SUM_AGGREGATE_529INVENTORY1_P_3.addOrDelOnZero(se4853.modify(inventory_locn), (v1558 * (v1559 * (location_walmartdistance * census_householdschildren))));
            } while ((n1559 = n1559->nxt));
          }
          e1558 = e1558->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_530 = 0.0;
      __SQL_SUM_AGGREGATE_530INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1560 = LOCATION.head;
        while (e1560) {
          long inventory_locn = e1560->LOCATION_LOCN;
          long location_zip = e1560->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1560->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1560->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1560->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1560->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1560->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1560->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1560->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1560->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1560->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1560->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1560->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1560->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1560->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1560 = e1560->__av;
          { //slice
            const HASH_RES_t h294 = CENSUS_mapkey0_idxfn::hash(se4857.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1561 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1561 = &(i1561->buckets_[h294 % i1561->size_]);
            CENSUS_entry* e1561;
            do if ((e1561 = n1561->obj) && h294 == n1561->hash && CENSUS_mapkey0_idxfn::equals(se4857, *e1561)) {
              long census_population = e1561->CENSUS_POPULATION;
              long census_white = e1561->CENSUS_WHITE;
              long census_asian = e1561->CENSUS_ASIAN;
              long census_pacific = e1561->CENSUS_PACIFIC;
              long census_blackafrican = e1561->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1561->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1561->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1561->CENSUS_HOUSEUNITS;
              long census_families = e1561->CENSUS_FAMILIES;
              long census_households = e1561->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1561->CENSUS_HUSBWIFE;
              long census_males = e1561->CENSUS_MALES;
              long census_females = e1561->CENSUS_FEMALES;
              long census_householdschildren = e1561->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1561->CENSUS_HISPANIC;
              long v1561 = e1561->__av;
              __SQL_SUM_AGGREGATE_530INVENTORY1_P_3.addOrDelOnZero(se4856.modify(inventory_locn), (v1560 * (v1561 * (location_walmartdistance * census_hispanic))));
            } while ((n1561 = n1561->nxt));
          }
          e1560 = e1560->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_531 = 0.0;
      __SQL_SUM_AGGREGATE_532 = 0.0;
      __SQL_SUM_AGGREGATE_533 = 0.0;
      __SQL_SUM_AGGREGATE_534 = 0.0;
      __SQL_SUM_AGGREGATE_535 = 0.0;
      __SQL_SUM_AGGREGATE_536 = 0.0;
      __SQL_SUM_AGGREGATE_537 = 0.0;
      __SQL_SUM_AGGREGATE_538 = 0.0;
      __SQL_SUM_AGGREGATE_539 = 0.0;
      __SQL_SUM_AGGREGATE_540 = 0.0;
      __SQL_SUM_AGGREGATE_541 = 0.0;
      __SQL_SUM_AGGREGATE_541INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1562 = LOCATION.head;
        while (e1562) {
          long inventory_locn = e1562->LOCATION_LOCN;
          long location_zip = e1562->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1562->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1562->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1562->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1562->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1562->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1562->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1562->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1562->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1562->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1562->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1562->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1562->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1562->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1562 = e1562->__av;
          { //slice
            const HASH_RES_t h295 = CENSUS_mapkey0_idxfn::hash(se4870.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1563 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1563 = &(i1563->buckets_[h295 % i1563->size_]);
            CENSUS_entry* e1563;
            do if ((e1563 = n1563->obj) && h295 == n1563->hash && CENSUS_mapkey0_idxfn::equals(se4870, *e1563)) {
              long census_population = e1563->CENSUS_POPULATION;
              long census_white = e1563->CENSUS_WHITE;
              long census_asian = e1563->CENSUS_ASIAN;
              long census_pacific = e1563->CENSUS_PACIFIC;
              long census_blackafrican = e1563->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1563->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1563->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1563->CENSUS_HOUSEUNITS;
              long census_families = e1563->CENSUS_FAMILIES;
              long census_households = e1563->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1563->CENSUS_HUSBWIFE;
              long census_males = e1563->CENSUS_MALES;
              long census_females = e1563->CENSUS_FEMALES;
              long census_householdschildren = e1563->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1563->CENSUS_HISPANIC;
              long v1563 = e1563->__av;
              __SQL_SUM_AGGREGATE_541INVENTORY1_P_3.addOrDelOnZero(se4869.modify(inventory_locn), (v1562 * (v1563 * (location_walmartdrivetime * location_walmartdrivetime))));
            } while ((n1563 = n1563->nxt));
          }
          e1562 = e1562->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_542 = 0.0;
      __SQL_SUM_AGGREGATE_542INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1564 = LOCATION.head;
        while (e1564) {
          long inventory_locn = e1564->LOCATION_LOCN;
          long location_zip = e1564->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1564->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1564->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1564->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1564->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1564->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1564->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1564->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1564->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1564->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1564->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1564->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1564->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1564->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1564 = e1564->__av;
          { //slice
            const HASH_RES_t h296 = CENSUS_mapkey0_idxfn::hash(se4873.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1565 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1565 = &(i1565->buckets_[h296 % i1565->size_]);
            CENSUS_entry* e1565;
            do if ((e1565 = n1565->obj) && h296 == n1565->hash && CENSUS_mapkey0_idxfn::equals(se4873, *e1565)) {
              long census_population = e1565->CENSUS_POPULATION;
              long census_white = e1565->CENSUS_WHITE;
              long census_asian = e1565->CENSUS_ASIAN;
              long census_pacific = e1565->CENSUS_PACIFIC;
              long census_blackafrican = e1565->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1565->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1565->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1565->CENSUS_HOUSEUNITS;
              long census_families = e1565->CENSUS_FAMILIES;
              long census_households = e1565->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1565->CENSUS_HUSBWIFE;
              long census_males = e1565->CENSUS_MALES;
              long census_females = e1565->CENSUS_FEMALES;
              long census_householdschildren = e1565->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1565->CENSUS_HISPANIC;
              long v1565 = e1565->__av;
              __SQL_SUM_AGGREGATE_542INVENTORY1_P_3.addOrDelOnZero(se4872.modify(inventory_locn), (v1564 * (v1565 * (location_walmartdrivetime * location_walmartsupercenterdistance))));
            } while ((n1565 = n1565->nxt));
          }
          e1564 = e1564->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_543 = 0.0;
      __SQL_SUM_AGGREGATE_543INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1566 = LOCATION.head;
        while (e1566) {
          long inventory_locn = e1566->LOCATION_LOCN;
          long location_zip = e1566->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1566->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1566->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1566->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1566->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1566->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1566->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1566->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1566->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1566->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1566->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1566->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1566->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1566->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1566 = e1566->__av;
          { //slice
            const HASH_RES_t h297 = CENSUS_mapkey0_idxfn::hash(se4876.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1567 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1567 = &(i1567->buckets_[h297 % i1567->size_]);
            CENSUS_entry* e1567;
            do if ((e1567 = n1567->obj) && h297 == n1567->hash && CENSUS_mapkey0_idxfn::equals(se4876, *e1567)) {
              long census_population = e1567->CENSUS_POPULATION;
              long census_white = e1567->CENSUS_WHITE;
              long census_asian = e1567->CENSUS_ASIAN;
              long census_pacific = e1567->CENSUS_PACIFIC;
              long census_blackafrican = e1567->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1567->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1567->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1567->CENSUS_HOUSEUNITS;
              long census_families = e1567->CENSUS_FAMILIES;
              long census_households = e1567->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1567->CENSUS_HUSBWIFE;
              long census_males = e1567->CENSUS_MALES;
              long census_females = e1567->CENSUS_FEMALES;
              long census_householdschildren = e1567->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1567->CENSUS_HISPANIC;
              long v1567 = e1567->__av;
              __SQL_SUM_AGGREGATE_543INVENTORY1_P_3.addOrDelOnZero(se4875.modify(inventory_locn), (v1566 * (v1567 * (location_walmartdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n1567 = n1567->nxt));
          }
          e1566 = e1566->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_544 = 0.0;
      __SQL_SUM_AGGREGATE_544INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1568 = LOCATION.head;
        while (e1568) {
          long inventory_locn = e1568->LOCATION_LOCN;
          long location_zip = e1568->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1568->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1568->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1568->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1568->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1568->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1568->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1568->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1568->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1568->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1568->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1568->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1568->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1568->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1568 = e1568->__av;
          { //slice
            const HASH_RES_t h298 = CENSUS_mapkey0_idxfn::hash(se4879.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1569 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1569 = &(i1569->buckets_[h298 % i1569->size_]);
            CENSUS_entry* e1569;
            do if ((e1569 = n1569->obj) && h298 == n1569->hash && CENSUS_mapkey0_idxfn::equals(se4879, *e1569)) {
              long census_population = e1569->CENSUS_POPULATION;
              long census_white = e1569->CENSUS_WHITE;
              long census_asian = e1569->CENSUS_ASIAN;
              long census_pacific = e1569->CENSUS_PACIFIC;
              long census_blackafrican = e1569->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1569->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1569->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1569->CENSUS_HOUSEUNITS;
              long census_families = e1569->CENSUS_FAMILIES;
              long census_households = e1569->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1569->CENSUS_HUSBWIFE;
              long census_males = e1569->CENSUS_MALES;
              long census_females = e1569->CENSUS_FEMALES;
              long census_householdschildren = e1569->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1569->CENSUS_HISPANIC;
              long v1569 = e1569->__av;
              __SQL_SUM_AGGREGATE_544INVENTORY1_P_3.addOrDelOnZero(se4878.modify(inventory_locn), (v1568 * (v1569 * (location_walmartdrivetime * census_population))));
            } while ((n1569 = n1569->nxt));
          }
          e1568 = e1568->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_545 = 0.0;
      __SQL_SUM_AGGREGATE_545INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1570 = LOCATION.head;
        while (e1570) {
          long inventory_locn = e1570->LOCATION_LOCN;
          long location_zip = e1570->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1570->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1570->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1570->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1570->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1570->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1570->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1570->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1570->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1570->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1570->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1570->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1570->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1570->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1570 = e1570->__av;
          { //slice
            const HASH_RES_t h299 = CENSUS_mapkey0_idxfn::hash(se4882.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1571 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1571 = &(i1571->buckets_[h299 % i1571->size_]);
            CENSUS_entry* e1571;
            do if ((e1571 = n1571->obj) && h299 == n1571->hash && CENSUS_mapkey0_idxfn::equals(se4882, *e1571)) {
              long census_population = e1571->CENSUS_POPULATION;
              long census_white = e1571->CENSUS_WHITE;
              long census_asian = e1571->CENSUS_ASIAN;
              long census_pacific = e1571->CENSUS_PACIFIC;
              long census_blackafrican = e1571->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1571->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1571->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1571->CENSUS_HOUSEUNITS;
              long census_families = e1571->CENSUS_FAMILIES;
              long census_households = e1571->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1571->CENSUS_HUSBWIFE;
              long census_males = e1571->CENSUS_MALES;
              long census_females = e1571->CENSUS_FEMALES;
              long census_householdschildren = e1571->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1571->CENSUS_HISPANIC;
              long v1571 = e1571->__av;
              __SQL_SUM_AGGREGATE_545INVENTORY1_P_3.addOrDelOnZero(se4881.modify(inventory_locn), (v1570 * (v1571 * (location_walmartdrivetime * census_white))));
            } while ((n1571 = n1571->nxt));
          }
          e1570 = e1570->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_546 = 0.0;
      __SQL_SUM_AGGREGATE_546INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1572 = LOCATION.head;
        while (e1572) {
          long inventory_locn = e1572->LOCATION_LOCN;
          long location_zip = e1572->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1572->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1572->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1572->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1572->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1572->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1572->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1572->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1572->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1572->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1572->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1572->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1572->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1572->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1572 = e1572->__av;
          { //slice
            const HASH_RES_t h300 = CENSUS_mapkey0_idxfn::hash(se4885.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1573 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1573 = &(i1573->buckets_[h300 % i1573->size_]);
            CENSUS_entry* e1573;
            do if ((e1573 = n1573->obj) && h300 == n1573->hash && CENSUS_mapkey0_idxfn::equals(se4885, *e1573)) {
              long census_population = e1573->CENSUS_POPULATION;
              long census_white = e1573->CENSUS_WHITE;
              long census_asian = e1573->CENSUS_ASIAN;
              long census_pacific = e1573->CENSUS_PACIFIC;
              long census_blackafrican = e1573->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1573->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1573->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1573->CENSUS_HOUSEUNITS;
              long census_families = e1573->CENSUS_FAMILIES;
              long census_households = e1573->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1573->CENSUS_HUSBWIFE;
              long census_males = e1573->CENSUS_MALES;
              long census_females = e1573->CENSUS_FEMALES;
              long census_householdschildren = e1573->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1573->CENSUS_HISPANIC;
              long v1573 = e1573->__av;
              __SQL_SUM_AGGREGATE_546INVENTORY1_P_3.addOrDelOnZero(se4884.modify(inventory_locn), (v1572 * (v1573 * (location_walmartdrivetime * census_asian))));
            } while ((n1573 = n1573->nxt));
          }
          e1572 = e1572->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_547 = 0.0;
      __SQL_SUM_AGGREGATE_547INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1574 = LOCATION.head;
        while (e1574) {
          long inventory_locn = e1574->LOCATION_LOCN;
          long location_zip = e1574->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1574->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1574->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1574->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1574->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1574->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1574->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1574->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1574->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1574->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1574->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1574->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1574->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1574->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1574 = e1574->__av;
          { //slice
            const HASH_RES_t h301 = CENSUS_mapkey0_idxfn::hash(se4888.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1575 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1575 = &(i1575->buckets_[h301 % i1575->size_]);
            CENSUS_entry* e1575;
            do if ((e1575 = n1575->obj) && h301 == n1575->hash && CENSUS_mapkey0_idxfn::equals(se4888, *e1575)) {
              long census_population = e1575->CENSUS_POPULATION;
              long census_white = e1575->CENSUS_WHITE;
              long census_asian = e1575->CENSUS_ASIAN;
              long census_pacific = e1575->CENSUS_PACIFIC;
              long census_blackafrican = e1575->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1575->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1575->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1575->CENSUS_HOUSEUNITS;
              long census_families = e1575->CENSUS_FAMILIES;
              long census_households = e1575->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1575->CENSUS_HUSBWIFE;
              long census_males = e1575->CENSUS_MALES;
              long census_females = e1575->CENSUS_FEMALES;
              long census_householdschildren = e1575->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1575->CENSUS_HISPANIC;
              long v1575 = e1575->__av;
              __SQL_SUM_AGGREGATE_547INVENTORY1_P_3.addOrDelOnZero(se4887.modify(inventory_locn), (v1574 * (v1575 * (location_walmartdrivetime * census_pacific))));
            } while ((n1575 = n1575->nxt));
          }
          e1574 = e1574->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_548 = 0.0;
      __SQL_SUM_AGGREGATE_548INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1576 = LOCATION.head;
        while (e1576) {
          long inventory_locn = e1576->LOCATION_LOCN;
          long location_zip = e1576->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1576->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1576->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1576->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1576->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1576->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1576->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1576->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1576->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1576->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1576->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1576->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1576->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1576->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1576 = e1576->__av;
          { //slice
            const HASH_RES_t h302 = CENSUS_mapkey0_idxfn::hash(se4891.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1577 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1577 = &(i1577->buckets_[h302 % i1577->size_]);
            CENSUS_entry* e1577;
            do if ((e1577 = n1577->obj) && h302 == n1577->hash && CENSUS_mapkey0_idxfn::equals(se4891, *e1577)) {
              long census_population = e1577->CENSUS_POPULATION;
              long census_white = e1577->CENSUS_WHITE;
              long census_asian = e1577->CENSUS_ASIAN;
              long census_pacific = e1577->CENSUS_PACIFIC;
              long census_blackafrican = e1577->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1577->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1577->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1577->CENSUS_HOUSEUNITS;
              long census_families = e1577->CENSUS_FAMILIES;
              long census_households = e1577->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1577->CENSUS_HUSBWIFE;
              long census_males = e1577->CENSUS_MALES;
              long census_females = e1577->CENSUS_FEMALES;
              long census_householdschildren = e1577->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1577->CENSUS_HISPANIC;
              long v1577 = e1577->__av;
              __SQL_SUM_AGGREGATE_548INVENTORY1_P_3.addOrDelOnZero(se4890.modify(inventory_locn), (v1576 * (v1577 * (location_walmartdrivetime * census_blackafrican))));
            } while ((n1577 = n1577->nxt));
          }
          e1576 = e1576->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_549 = 0.0;
      __SQL_SUM_AGGREGATE_549INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1578 = LOCATION.head;
        while (e1578) {
          long inventory_locn = e1578->LOCATION_LOCN;
          long location_zip = e1578->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1578->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1578->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1578->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1578->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1578->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1578->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1578->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1578->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1578->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1578->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1578->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1578->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1578->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1578 = e1578->__av;
          { //slice
            const HASH_RES_t h303 = CENSUS_mapkey0_idxfn::hash(se4894.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1579 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1579 = &(i1579->buckets_[h303 % i1579->size_]);
            CENSUS_entry* e1579;
            do if ((e1579 = n1579->obj) && h303 == n1579->hash && CENSUS_mapkey0_idxfn::equals(se4894, *e1579)) {
              long census_population = e1579->CENSUS_POPULATION;
              long census_white = e1579->CENSUS_WHITE;
              long census_asian = e1579->CENSUS_ASIAN;
              long census_pacific = e1579->CENSUS_PACIFIC;
              long census_blackafrican = e1579->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1579->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1579->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1579->CENSUS_HOUSEUNITS;
              long census_families = e1579->CENSUS_FAMILIES;
              long census_households = e1579->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1579->CENSUS_HUSBWIFE;
              long census_males = e1579->CENSUS_MALES;
              long census_females = e1579->CENSUS_FEMALES;
              long census_householdschildren = e1579->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1579->CENSUS_HISPANIC;
              long v1579 = e1579->__av;
              __SQL_SUM_AGGREGATE_549INVENTORY1_P_3.addOrDelOnZero(se4893.modify(inventory_locn), (v1578 * (v1579 * (location_walmartdrivetime * census_medianage))));
            } while ((n1579 = n1579->nxt));
          }
          e1578 = e1578->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_550 = 0.0;
      __SQL_SUM_AGGREGATE_550INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1580 = LOCATION.head;
        while (e1580) {
          long inventory_locn = e1580->LOCATION_LOCN;
          long location_zip = e1580->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1580->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1580->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1580->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1580->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1580->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1580->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1580->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1580->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1580->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1580->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1580->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1580->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1580->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1580 = e1580->__av;
          { //slice
            const HASH_RES_t h304 = CENSUS_mapkey0_idxfn::hash(se4897.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1581 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1581 = &(i1581->buckets_[h304 % i1581->size_]);
            CENSUS_entry* e1581;
            do if ((e1581 = n1581->obj) && h304 == n1581->hash && CENSUS_mapkey0_idxfn::equals(se4897, *e1581)) {
              long census_population = e1581->CENSUS_POPULATION;
              long census_white = e1581->CENSUS_WHITE;
              long census_asian = e1581->CENSUS_ASIAN;
              long census_pacific = e1581->CENSUS_PACIFIC;
              long census_blackafrican = e1581->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1581->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1581->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1581->CENSUS_HOUSEUNITS;
              long census_families = e1581->CENSUS_FAMILIES;
              long census_households = e1581->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1581->CENSUS_HUSBWIFE;
              long census_males = e1581->CENSUS_MALES;
              long census_females = e1581->CENSUS_FEMALES;
              long census_householdschildren = e1581->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1581->CENSUS_HISPANIC;
              long v1581 = e1581->__av;
              __SQL_SUM_AGGREGATE_550INVENTORY1_P_3.addOrDelOnZero(se4896.modify(inventory_locn), (v1580 * (v1581 * (location_walmartdrivetime * census_occupiedhouseunits))));
            } while ((n1581 = n1581->nxt));
          }
          e1580 = e1580->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_551 = 0.0;
      __SQL_SUM_AGGREGATE_551INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1582 = LOCATION.head;
        while (e1582) {
          long inventory_locn = e1582->LOCATION_LOCN;
          long location_zip = e1582->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1582->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1582->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1582->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1582->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1582->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1582->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1582->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1582->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1582->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1582->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1582->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1582->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1582->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1582 = e1582->__av;
          { //slice
            const HASH_RES_t h305 = CENSUS_mapkey0_idxfn::hash(se4900.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1583 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1583 = &(i1583->buckets_[h305 % i1583->size_]);
            CENSUS_entry* e1583;
            do if ((e1583 = n1583->obj) && h305 == n1583->hash && CENSUS_mapkey0_idxfn::equals(se4900, *e1583)) {
              long census_population = e1583->CENSUS_POPULATION;
              long census_white = e1583->CENSUS_WHITE;
              long census_asian = e1583->CENSUS_ASIAN;
              long census_pacific = e1583->CENSUS_PACIFIC;
              long census_blackafrican = e1583->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1583->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1583->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1583->CENSUS_HOUSEUNITS;
              long census_families = e1583->CENSUS_FAMILIES;
              long census_households = e1583->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1583->CENSUS_HUSBWIFE;
              long census_males = e1583->CENSUS_MALES;
              long census_females = e1583->CENSUS_FEMALES;
              long census_householdschildren = e1583->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1583->CENSUS_HISPANIC;
              long v1583 = e1583->__av;
              __SQL_SUM_AGGREGATE_551INVENTORY1_P_3.addOrDelOnZero(se4899.modify(inventory_locn), (v1582 * (v1583 * (location_walmartdrivetime * census_houseunits))));
            } while ((n1583 = n1583->nxt));
          }
          e1582 = e1582->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_552 = 0.0;
      __SQL_SUM_AGGREGATE_552INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1584 = LOCATION.head;
        while (e1584) {
          long inventory_locn = e1584->LOCATION_LOCN;
          long location_zip = e1584->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1584->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1584->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1584->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1584->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1584->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1584->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1584->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1584->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1584->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1584->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1584->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1584->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1584->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1584 = e1584->__av;
          { //slice
            const HASH_RES_t h306 = CENSUS_mapkey0_idxfn::hash(se4903.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1585 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1585 = &(i1585->buckets_[h306 % i1585->size_]);
            CENSUS_entry* e1585;
            do if ((e1585 = n1585->obj) && h306 == n1585->hash && CENSUS_mapkey0_idxfn::equals(se4903, *e1585)) {
              long census_population = e1585->CENSUS_POPULATION;
              long census_white = e1585->CENSUS_WHITE;
              long census_asian = e1585->CENSUS_ASIAN;
              long census_pacific = e1585->CENSUS_PACIFIC;
              long census_blackafrican = e1585->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1585->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1585->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1585->CENSUS_HOUSEUNITS;
              long census_families = e1585->CENSUS_FAMILIES;
              long census_households = e1585->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1585->CENSUS_HUSBWIFE;
              long census_males = e1585->CENSUS_MALES;
              long census_females = e1585->CENSUS_FEMALES;
              long census_householdschildren = e1585->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1585->CENSUS_HISPANIC;
              long v1585 = e1585->__av;
              __SQL_SUM_AGGREGATE_552INVENTORY1_P_3.addOrDelOnZero(se4902.modify(inventory_locn), (v1584 * (v1585 * (location_walmartdrivetime * census_families))));
            } while ((n1585 = n1585->nxt));
          }
          e1584 = e1584->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_553 = 0.0;
      __SQL_SUM_AGGREGATE_553INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1586 = LOCATION.head;
        while (e1586) {
          long inventory_locn = e1586->LOCATION_LOCN;
          long location_zip = e1586->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1586->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1586->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1586->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1586->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1586->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1586->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1586->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1586->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1586->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1586->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1586->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1586->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1586->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1586 = e1586->__av;
          { //slice
            const HASH_RES_t h307 = CENSUS_mapkey0_idxfn::hash(se4906.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1587 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1587 = &(i1587->buckets_[h307 % i1587->size_]);
            CENSUS_entry* e1587;
            do if ((e1587 = n1587->obj) && h307 == n1587->hash && CENSUS_mapkey0_idxfn::equals(se4906, *e1587)) {
              long census_population = e1587->CENSUS_POPULATION;
              long census_white = e1587->CENSUS_WHITE;
              long census_asian = e1587->CENSUS_ASIAN;
              long census_pacific = e1587->CENSUS_PACIFIC;
              long census_blackafrican = e1587->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1587->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1587->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1587->CENSUS_HOUSEUNITS;
              long census_families = e1587->CENSUS_FAMILIES;
              long census_households = e1587->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1587->CENSUS_HUSBWIFE;
              long census_males = e1587->CENSUS_MALES;
              long census_females = e1587->CENSUS_FEMALES;
              long census_householdschildren = e1587->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1587->CENSUS_HISPANIC;
              long v1587 = e1587->__av;
              __SQL_SUM_AGGREGATE_553INVENTORY1_P_3.addOrDelOnZero(se4905.modify(inventory_locn), (v1586 * (v1587 * (location_walmartdrivetime * census_households))));
            } while ((n1587 = n1587->nxt));
          }
          e1586 = e1586->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_554 = 0.0;
      __SQL_SUM_AGGREGATE_554INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1588 = LOCATION.head;
        while (e1588) {
          long inventory_locn = e1588->LOCATION_LOCN;
          long location_zip = e1588->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1588->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1588->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1588->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1588->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1588->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1588->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1588->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1588->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1588->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1588->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1588->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1588->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1588->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1588 = e1588->__av;
          { //slice
            const HASH_RES_t h308 = CENSUS_mapkey0_idxfn::hash(se4909.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1589 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1589 = &(i1589->buckets_[h308 % i1589->size_]);
            CENSUS_entry* e1589;
            do if ((e1589 = n1589->obj) && h308 == n1589->hash && CENSUS_mapkey0_idxfn::equals(se4909, *e1589)) {
              long census_population = e1589->CENSUS_POPULATION;
              long census_white = e1589->CENSUS_WHITE;
              long census_asian = e1589->CENSUS_ASIAN;
              long census_pacific = e1589->CENSUS_PACIFIC;
              long census_blackafrican = e1589->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1589->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1589->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1589->CENSUS_HOUSEUNITS;
              long census_families = e1589->CENSUS_FAMILIES;
              long census_households = e1589->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1589->CENSUS_HUSBWIFE;
              long census_males = e1589->CENSUS_MALES;
              long census_females = e1589->CENSUS_FEMALES;
              long census_householdschildren = e1589->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1589->CENSUS_HISPANIC;
              long v1589 = e1589->__av;
              __SQL_SUM_AGGREGATE_554INVENTORY1_P_3.addOrDelOnZero(se4908.modify(inventory_locn), (v1588 * (v1589 * (location_walmartdrivetime * census_husbwife))));
            } while ((n1589 = n1589->nxt));
          }
          e1588 = e1588->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_555 = 0.0;
      __SQL_SUM_AGGREGATE_555INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1590 = LOCATION.head;
        while (e1590) {
          long inventory_locn = e1590->LOCATION_LOCN;
          long location_zip = e1590->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1590->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1590->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1590->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1590->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1590->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1590->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1590->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1590->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1590->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1590->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1590->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1590->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1590->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1590 = e1590->__av;
          { //slice
            const HASH_RES_t h309 = CENSUS_mapkey0_idxfn::hash(se4912.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1591 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1591 = &(i1591->buckets_[h309 % i1591->size_]);
            CENSUS_entry* e1591;
            do if ((e1591 = n1591->obj) && h309 == n1591->hash && CENSUS_mapkey0_idxfn::equals(se4912, *e1591)) {
              long census_population = e1591->CENSUS_POPULATION;
              long census_white = e1591->CENSUS_WHITE;
              long census_asian = e1591->CENSUS_ASIAN;
              long census_pacific = e1591->CENSUS_PACIFIC;
              long census_blackafrican = e1591->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1591->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1591->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1591->CENSUS_HOUSEUNITS;
              long census_families = e1591->CENSUS_FAMILIES;
              long census_households = e1591->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1591->CENSUS_HUSBWIFE;
              long census_males = e1591->CENSUS_MALES;
              long census_females = e1591->CENSUS_FEMALES;
              long census_householdschildren = e1591->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1591->CENSUS_HISPANIC;
              long v1591 = e1591->__av;
              __SQL_SUM_AGGREGATE_555INVENTORY1_P_3.addOrDelOnZero(se4911.modify(inventory_locn), (v1590 * (v1591 * (location_walmartdrivetime * census_males))));
            } while ((n1591 = n1591->nxt));
          }
          e1590 = e1590->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_556 = 0.0;
      __SQL_SUM_AGGREGATE_556INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1592 = LOCATION.head;
        while (e1592) {
          long inventory_locn = e1592->LOCATION_LOCN;
          long location_zip = e1592->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1592->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1592->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1592->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1592->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1592->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1592->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1592->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1592->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1592->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1592->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1592->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1592->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1592->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1592 = e1592->__av;
          { //slice
            const HASH_RES_t h310 = CENSUS_mapkey0_idxfn::hash(se4915.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1593 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1593 = &(i1593->buckets_[h310 % i1593->size_]);
            CENSUS_entry* e1593;
            do if ((e1593 = n1593->obj) && h310 == n1593->hash && CENSUS_mapkey0_idxfn::equals(se4915, *e1593)) {
              long census_population = e1593->CENSUS_POPULATION;
              long census_white = e1593->CENSUS_WHITE;
              long census_asian = e1593->CENSUS_ASIAN;
              long census_pacific = e1593->CENSUS_PACIFIC;
              long census_blackafrican = e1593->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1593->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1593->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1593->CENSUS_HOUSEUNITS;
              long census_families = e1593->CENSUS_FAMILIES;
              long census_households = e1593->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1593->CENSUS_HUSBWIFE;
              long census_males = e1593->CENSUS_MALES;
              long census_females = e1593->CENSUS_FEMALES;
              long census_householdschildren = e1593->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1593->CENSUS_HISPANIC;
              long v1593 = e1593->__av;
              __SQL_SUM_AGGREGATE_556INVENTORY1_P_3.addOrDelOnZero(se4914.modify(inventory_locn), (v1592 * (v1593 * (location_walmartdrivetime * census_females))));
            } while ((n1593 = n1593->nxt));
          }
          e1592 = e1592->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_557 = 0.0;
      __SQL_SUM_AGGREGATE_557INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1594 = LOCATION.head;
        while (e1594) {
          long inventory_locn = e1594->LOCATION_LOCN;
          long location_zip = e1594->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1594->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1594->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1594->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1594->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1594->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1594->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1594->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1594->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1594->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1594->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1594->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1594->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1594->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1594 = e1594->__av;
          { //slice
            const HASH_RES_t h311 = CENSUS_mapkey0_idxfn::hash(se4918.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1595 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1595 = &(i1595->buckets_[h311 % i1595->size_]);
            CENSUS_entry* e1595;
            do if ((e1595 = n1595->obj) && h311 == n1595->hash && CENSUS_mapkey0_idxfn::equals(se4918, *e1595)) {
              long census_population = e1595->CENSUS_POPULATION;
              long census_white = e1595->CENSUS_WHITE;
              long census_asian = e1595->CENSUS_ASIAN;
              long census_pacific = e1595->CENSUS_PACIFIC;
              long census_blackafrican = e1595->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1595->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1595->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1595->CENSUS_HOUSEUNITS;
              long census_families = e1595->CENSUS_FAMILIES;
              long census_households = e1595->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1595->CENSUS_HUSBWIFE;
              long census_males = e1595->CENSUS_MALES;
              long census_females = e1595->CENSUS_FEMALES;
              long census_householdschildren = e1595->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1595->CENSUS_HISPANIC;
              long v1595 = e1595->__av;
              __SQL_SUM_AGGREGATE_557INVENTORY1_P_3.addOrDelOnZero(se4917.modify(inventory_locn), (v1594 * (v1595 * (location_walmartdrivetime * census_householdschildren))));
            } while ((n1595 = n1595->nxt));
          }
          e1594 = e1594->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_558 = 0.0;
      __SQL_SUM_AGGREGATE_558INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1596 = LOCATION.head;
        while (e1596) {
          long inventory_locn = e1596->LOCATION_LOCN;
          long location_zip = e1596->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1596->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1596->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1596->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1596->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1596->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1596->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1596->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1596->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1596->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1596->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1596->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1596->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1596->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1596 = e1596->__av;
          { //slice
            const HASH_RES_t h312 = CENSUS_mapkey0_idxfn::hash(se4921.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1597 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1597 = &(i1597->buckets_[h312 % i1597->size_]);
            CENSUS_entry* e1597;
            do if ((e1597 = n1597->obj) && h312 == n1597->hash && CENSUS_mapkey0_idxfn::equals(se4921, *e1597)) {
              long census_population = e1597->CENSUS_POPULATION;
              long census_white = e1597->CENSUS_WHITE;
              long census_asian = e1597->CENSUS_ASIAN;
              long census_pacific = e1597->CENSUS_PACIFIC;
              long census_blackafrican = e1597->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1597->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1597->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1597->CENSUS_HOUSEUNITS;
              long census_families = e1597->CENSUS_FAMILIES;
              long census_households = e1597->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1597->CENSUS_HUSBWIFE;
              long census_males = e1597->CENSUS_MALES;
              long census_females = e1597->CENSUS_FEMALES;
              long census_householdschildren = e1597->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1597->CENSUS_HISPANIC;
              long v1597 = e1597->__av;
              __SQL_SUM_AGGREGATE_558INVENTORY1_P_3.addOrDelOnZero(se4920.modify(inventory_locn), (v1596 * (v1597 * (location_walmartdrivetime * census_hispanic))));
            } while ((n1597 = n1597->nxt));
          }
          e1596 = e1596->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_559 = 0.0;
      __SQL_SUM_AGGREGATE_560 = 0.0;
      __SQL_SUM_AGGREGATE_561 = 0.0;
      __SQL_SUM_AGGREGATE_562 = 0.0;
      __SQL_SUM_AGGREGATE_563 = 0.0;
      __SQL_SUM_AGGREGATE_564 = 0.0;
      __SQL_SUM_AGGREGATE_565 = 0.0;
      __SQL_SUM_AGGREGATE_566 = 0.0;
      __SQL_SUM_AGGREGATE_567 = 0.0;
      __SQL_SUM_AGGREGATE_568 = 0.0;
      __SQL_SUM_AGGREGATE_569 = 0.0;
      __SQL_SUM_AGGREGATE_569INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1598 = LOCATION.head;
        while (e1598) {
          long inventory_locn = e1598->LOCATION_LOCN;
          long location_zip = e1598->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1598->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1598->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1598->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1598->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1598->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1598->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1598->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1598->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1598->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1598->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1598->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1598->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1598->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1598 = e1598->__av;
          { //slice
            const HASH_RES_t h313 = CENSUS_mapkey0_idxfn::hash(se4934.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1599 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1599 = &(i1599->buckets_[h313 % i1599->size_]);
            CENSUS_entry* e1599;
            do if ((e1599 = n1599->obj) && h313 == n1599->hash && CENSUS_mapkey0_idxfn::equals(se4934, *e1599)) {
              long census_population = e1599->CENSUS_POPULATION;
              long census_white = e1599->CENSUS_WHITE;
              long census_asian = e1599->CENSUS_ASIAN;
              long census_pacific = e1599->CENSUS_PACIFIC;
              long census_blackafrican = e1599->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1599->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1599->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1599->CENSUS_HOUSEUNITS;
              long census_families = e1599->CENSUS_FAMILIES;
              long census_households = e1599->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1599->CENSUS_HUSBWIFE;
              long census_males = e1599->CENSUS_MALES;
              long census_females = e1599->CENSUS_FEMALES;
              long census_householdschildren = e1599->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1599->CENSUS_HISPANIC;
              long v1599 = e1599->__av;
              __SQL_SUM_AGGREGATE_569INVENTORY1_P_3.addOrDelOnZero(se4933.modify(inventory_locn), (v1598 * (v1599 * (location_walmartsupercenterdistance * location_walmartsupercenterdistance))));
            } while ((n1599 = n1599->nxt));
          }
          e1598 = e1598->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_570 = 0.0;
      __SQL_SUM_AGGREGATE_570INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1600 = LOCATION.head;
        while (e1600) {
          long inventory_locn = e1600->LOCATION_LOCN;
          long location_zip = e1600->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1600->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1600->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1600->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1600->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1600->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1600->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1600->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1600->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1600->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1600->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1600->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1600->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1600->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1600 = e1600->__av;
          { //slice
            const HASH_RES_t h314 = CENSUS_mapkey0_idxfn::hash(se4937.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1601 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1601 = &(i1601->buckets_[h314 % i1601->size_]);
            CENSUS_entry* e1601;
            do if ((e1601 = n1601->obj) && h314 == n1601->hash && CENSUS_mapkey0_idxfn::equals(se4937, *e1601)) {
              long census_population = e1601->CENSUS_POPULATION;
              long census_white = e1601->CENSUS_WHITE;
              long census_asian = e1601->CENSUS_ASIAN;
              long census_pacific = e1601->CENSUS_PACIFIC;
              long census_blackafrican = e1601->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1601->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1601->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1601->CENSUS_HOUSEUNITS;
              long census_families = e1601->CENSUS_FAMILIES;
              long census_households = e1601->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1601->CENSUS_HUSBWIFE;
              long census_males = e1601->CENSUS_MALES;
              long census_females = e1601->CENSUS_FEMALES;
              long census_householdschildren = e1601->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1601->CENSUS_HISPANIC;
              long v1601 = e1601->__av;
              __SQL_SUM_AGGREGATE_570INVENTORY1_P_3.addOrDelOnZero(se4936.modify(inventory_locn), (v1600 * (v1601 * (location_walmartsupercenterdistance * location_walmartsupercenterdrivetime))));
            } while ((n1601 = n1601->nxt));
          }
          e1600 = e1600->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_571 = 0.0;
      __SQL_SUM_AGGREGATE_571INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1602 = LOCATION.head;
        while (e1602) {
          long inventory_locn = e1602->LOCATION_LOCN;
          long location_zip = e1602->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1602->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1602->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1602->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1602->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1602->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1602->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1602->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1602->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1602->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1602->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1602->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1602->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1602->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1602 = e1602->__av;
          { //slice
            const HASH_RES_t h315 = CENSUS_mapkey0_idxfn::hash(se4940.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1603 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1603 = &(i1603->buckets_[h315 % i1603->size_]);
            CENSUS_entry* e1603;
            do if ((e1603 = n1603->obj) && h315 == n1603->hash && CENSUS_mapkey0_idxfn::equals(se4940, *e1603)) {
              long census_population = e1603->CENSUS_POPULATION;
              long census_white = e1603->CENSUS_WHITE;
              long census_asian = e1603->CENSUS_ASIAN;
              long census_pacific = e1603->CENSUS_PACIFIC;
              long census_blackafrican = e1603->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1603->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1603->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1603->CENSUS_HOUSEUNITS;
              long census_families = e1603->CENSUS_FAMILIES;
              long census_households = e1603->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1603->CENSUS_HUSBWIFE;
              long census_males = e1603->CENSUS_MALES;
              long census_females = e1603->CENSUS_FEMALES;
              long census_householdschildren = e1603->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1603->CENSUS_HISPANIC;
              long v1603 = e1603->__av;
              __SQL_SUM_AGGREGATE_571INVENTORY1_P_3.addOrDelOnZero(se4939.modify(inventory_locn), (v1602 * (v1603 * (location_walmartsupercenterdistance * census_population))));
            } while ((n1603 = n1603->nxt));
          }
          e1602 = e1602->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_572 = 0.0;
      __SQL_SUM_AGGREGATE_572INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1604 = LOCATION.head;
        while (e1604) {
          long inventory_locn = e1604->LOCATION_LOCN;
          long location_zip = e1604->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1604->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1604->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1604->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1604->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1604->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1604->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1604->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1604->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1604->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1604->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1604->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1604->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1604->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1604 = e1604->__av;
          { //slice
            const HASH_RES_t h316 = CENSUS_mapkey0_idxfn::hash(se4943.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1605 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1605 = &(i1605->buckets_[h316 % i1605->size_]);
            CENSUS_entry* e1605;
            do if ((e1605 = n1605->obj) && h316 == n1605->hash && CENSUS_mapkey0_idxfn::equals(se4943, *e1605)) {
              long census_population = e1605->CENSUS_POPULATION;
              long census_white = e1605->CENSUS_WHITE;
              long census_asian = e1605->CENSUS_ASIAN;
              long census_pacific = e1605->CENSUS_PACIFIC;
              long census_blackafrican = e1605->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1605->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1605->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1605->CENSUS_HOUSEUNITS;
              long census_families = e1605->CENSUS_FAMILIES;
              long census_households = e1605->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1605->CENSUS_HUSBWIFE;
              long census_males = e1605->CENSUS_MALES;
              long census_females = e1605->CENSUS_FEMALES;
              long census_householdschildren = e1605->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1605->CENSUS_HISPANIC;
              long v1605 = e1605->__av;
              __SQL_SUM_AGGREGATE_572INVENTORY1_P_3.addOrDelOnZero(se4942.modify(inventory_locn), (v1604 * (v1605 * (location_walmartsupercenterdistance * census_white))));
            } while ((n1605 = n1605->nxt));
          }
          e1604 = e1604->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_573 = 0.0;
      __SQL_SUM_AGGREGATE_573INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1606 = LOCATION.head;
        while (e1606) {
          long inventory_locn = e1606->LOCATION_LOCN;
          long location_zip = e1606->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1606->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1606->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1606->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1606->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1606->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1606->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1606->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1606->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1606->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1606->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1606->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1606->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1606->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1606 = e1606->__av;
          { //slice
            const HASH_RES_t h317 = CENSUS_mapkey0_idxfn::hash(se4946.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1607 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1607 = &(i1607->buckets_[h317 % i1607->size_]);
            CENSUS_entry* e1607;
            do if ((e1607 = n1607->obj) && h317 == n1607->hash && CENSUS_mapkey0_idxfn::equals(se4946, *e1607)) {
              long census_population = e1607->CENSUS_POPULATION;
              long census_white = e1607->CENSUS_WHITE;
              long census_asian = e1607->CENSUS_ASIAN;
              long census_pacific = e1607->CENSUS_PACIFIC;
              long census_blackafrican = e1607->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1607->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1607->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1607->CENSUS_HOUSEUNITS;
              long census_families = e1607->CENSUS_FAMILIES;
              long census_households = e1607->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1607->CENSUS_HUSBWIFE;
              long census_males = e1607->CENSUS_MALES;
              long census_females = e1607->CENSUS_FEMALES;
              long census_householdschildren = e1607->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1607->CENSUS_HISPANIC;
              long v1607 = e1607->__av;
              __SQL_SUM_AGGREGATE_573INVENTORY1_P_3.addOrDelOnZero(se4945.modify(inventory_locn), (v1606 * (v1607 * (location_walmartsupercenterdistance * census_asian))));
            } while ((n1607 = n1607->nxt));
          }
          e1606 = e1606->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_574 = 0.0;
      __SQL_SUM_AGGREGATE_574INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1608 = LOCATION.head;
        while (e1608) {
          long inventory_locn = e1608->LOCATION_LOCN;
          long location_zip = e1608->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1608->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1608->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1608->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1608->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1608->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1608->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1608->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1608->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1608->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1608->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1608->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1608->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1608->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1608 = e1608->__av;
          { //slice
            const HASH_RES_t h318 = CENSUS_mapkey0_idxfn::hash(se4949.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1609 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1609 = &(i1609->buckets_[h318 % i1609->size_]);
            CENSUS_entry* e1609;
            do if ((e1609 = n1609->obj) && h318 == n1609->hash && CENSUS_mapkey0_idxfn::equals(se4949, *e1609)) {
              long census_population = e1609->CENSUS_POPULATION;
              long census_white = e1609->CENSUS_WHITE;
              long census_asian = e1609->CENSUS_ASIAN;
              long census_pacific = e1609->CENSUS_PACIFIC;
              long census_blackafrican = e1609->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1609->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1609->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1609->CENSUS_HOUSEUNITS;
              long census_families = e1609->CENSUS_FAMILIES;
              long census_households = e1609->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1609->CENSUS_HUSBWIFE;
              long census_males = e1609->CENSUS_MALES;
              long census_females = e1609->CENSUS_FEMALES;
              long census_householdschildren = e1609->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1609->CENSUS_HISPANIC;
              long v1609 = e1609->__av;
              __SQL_SUM_AGGREGATE_574INVENTORY1_P_3.addOrDelOnZero(se4948.modify(inventory_locn), (v1608 * (v1609 * (location_walmartsupercenterdistance * census_pacific))));
            } while ((n1609 = n1609->nxt));
          }
          e1608 = e1608->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_575 = 0.0;
      __SQL_SUM_AGGREGATE_575INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1610 = LOCATION.head;
        while (e1610) {
          long inventory_locn = e1610->LOCATION_LOCN;
          long location_zip = e1610->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1610->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1610->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1610->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1610->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1610->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1610->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1610->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1610->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1610->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1610->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1610->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1610->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1610->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1610 = e1610->__av;
          { //slice
            const HASH_RES_t h319 = CENSUS_mapkey0_idxfn::hash(se4952.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1611 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1611 = &(i1611->buckets_[h319 % i1611->size_]);
            CENSUS_entry* e1611;
            do if ((e1611 = n1611->obj) && h319 == n1611->hash && CENSUS_mapkey0_idxfn::equals(se4952, *e1611)) {
              long census_population = e1611->CENSUS_POPULATION;
              long census_white = e1611->CENSUS_WHITE;
              long census_asian = e1611->CENSUS_ASIAN;
              long census_pacific = e1611->CENSUS_PACIFIC;
              long census_blackafrican = e1611->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1611->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1611->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1611->CENSUS_HOUSEUNITS;
              long census_families = e1611->CENSUS_FAMILIES;
              long census_households = e1611->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1611->CENSUS_HUSBWIFE;
              long census_males = e1611->CENSUS_MALES;
              long census_females = e1611->CENSUS_FEMALES;
              long census_householdschildren = e1611->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1611->CENSUS_HISPANIC;
              long v1611 = e1611->__av;
              __SQL_SUM_AGGREGATE_575INVENTORY1_P_3.addOrDelOnZero(se4951.modify(inventory_locn), (v1610 * (v1611 * (location_walmartsupercenterdistance * census_blackafrican))));
            } while ((n1611 = n1611->nxt));
          }
          e1610 = e1610->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_576 = 0.0;
      __SQL_SUM_AGGREGATE_576INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1612 = LOCATION.head;
        while (e1612) {
          long inventory_locn = e1612->LOCATION_LOCN;
          long location_zip = e1612->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1612->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1612->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1612->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1612->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1612->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1612->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1612->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1612->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1612->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1612->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1612->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1612->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1612->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1612 = e1612->__av;
          { //slice
            const HASH_RES_t h320 = CENSUS_mapkey0_idxfn::hash(se4955.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1613 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1613 = &(i1613->buckets_[h320 % i1613->size_]);
            CENSUS_entry* e1613;
            do if ((e1613 = n1613->obj) && h320 == n1613->hash && CENSUS_mapkey0_idxfn::equals(se4955, *e1613)) {
              long census_population = e1613->CENSUS_POPULATION;
              long census_white = e1613->CENSUS_WHITE;
              long census_asian = e1613->CENSUS_ASIAN;
              long census_pacific = e1613->CENSUS_PACIFIC;
              long census_blackafrican = e1613->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1613->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1613->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1613->CENSUS_HOUSEUNITS;
              long census_families = e1613->CENSUS_FAMILIES;
              long census_households = e1613->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1613->CENSUS_HUSBWIFE;
              long census_males = e1613->CENSUS_MALES;
              long census_females = e1613->CENSUS_FEMALES;
              long census_householdschildren = e1613->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1613->CENSUS_HISPANIC;
              long v1613 = e1613->__av;
              __SQL_SUM_AGGREGATE_576INVENTORY1_P_3.addOrDelOnZero(se4954.modify(inventory_locn), (v1612 * (v1613 * (location_walmartsupercenterdistance * census_medianage))));
            } while ((n1613 = n1613->nxt));
          }
          e1612 = e1612->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_577 = 0.0;
      __SQL_SUM_AGGREGATE_577INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1614 = LOCATION.head;
        while (e1614) {
          long inventory_locn = e1614->LOCATION_LOCN;
          long location_zip = e1614->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1614->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1614->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1614->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1614->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1614->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1614->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1614->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1614->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1614->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1614->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1614->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1614->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1614->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1614 = e1614->__av;
          { //slice
            const HASH_RES_t h321 = CENSUS_mapkey0_idxfn::hash(se4958.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1615 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1615 = &(i1615->buckets_[h321 % i1615->size_]);
            CENSUS_entry* e1615;
            do if ((e1615 = n1615->obj) && h321 == n1615->hash && CENSUS_mapkey0_idxfn::equals(se4958, *e1615)) {
              long census_population = e1615->CENSUS_POPULATION;
              long census_white = e1615->CENSUS_WHITE;
              long census_asian = e1615->CENSUS_ASIAN;
              long census_pacific = e1615->CENSUS_PACIFIC;
              long census_blackafrican = e1615->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1615->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1615->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1615->CENSUS_HOUSEUNITS;
              long census_families = e1615->CENSUS_FAMILIES;
              long census_households = e1615->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1615->CENSUS_HUSBWIFE;
              long census_males = e1615->CENSUS_MALES;
              long census_females = e1615->CENSUS_FEMALES;
              long census_householdschildren = e1615->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1615->CENSUS_HISPANIC;
              long v1615 = e1615->__av;
              __SQL_SUM_AGGREGATE_577INVENTORY1_P_3.addOrDelOnZero(se4957.modify(inventory_locn), (v1614 * (v1615 * (location_walmartsupercenterdistance * census_occupiedhouseunits))));
            } while ((n1615 = n1615->nxt));
          }
          e1614 = e1614->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_578 = 0.0;
      __SQL_SUM_AGGREGATE_578INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1616 = LOCATION.head;
        while (e1616) {
          long inventory_locn = e1616->LOCATION_LOCN;
          long location_zip = e1616->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1616->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1616->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1616->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1616->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1616->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1616->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1616->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1616->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1616->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1616->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1616->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1616->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1616->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1616 = e1616->__av;
          { //slice
            const HASH_RES_t h322 = CENSUS_mapkey0_idxfn::hash(se4961.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1617 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1617 = &(i1617->buckets_[h322 % i1617->size_]);
            CENSUS_entry* e1617;
            do if ((e1617 = n1617->obj) && h322 == n1617->hash && CENSUS_mapkey0_idxfn::equals(se4961, *e1617)) {
              long census_population = e1617->CENSUS_POPULATION;
              long census_white = e1617->CENSUS_WHITE;
              long census_asian = e1617->CENSUS_ASIAN;
              long census_pacific = e1617->CENSUS_PACIFIC;
              long census_blackafrican = e1617->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1617->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1617->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1617->CENSUS_HOUSEUNITS;
              long census_families = e1617->CENSUS_FAMILIES;
              long census_households = e1617->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1617->CENSUS_HUSBWIFE;
              long census_males = e1617->CENSUS_MALES;
              long census_females = e1617->CENSUS_FEMALES;
              long census_householdschildren = e1617->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1617->CENSUS_HISPANIC;
              long v1617 = e1617->__av;
              __SQL_SUM_AGGREGATE_578INVENTORY1_P_3.addOrDelOnZero(se4960.modify(inventory_locn), (v1616 * (v1617 * (location_walmartsupercenterdistance * census_houseunits))));
            } while ((n1617 = n1617->nxt));
          }
          e1616 = e1616->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_579 = 0.0;
      __SQL_SUM_AGGREGATE_579INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1618 = LOCATION.head;
        while (e1618) {
          long inventory_locn = e1618->LOCATION_LOCN;
          long location_zip = e1618->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1618->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1618->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1618->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1618->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1618->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1618->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1618->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1618->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1618->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1618->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1618->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1618->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1618->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1618 = e1618->__av;
          { //slice
            const HASH_RES_t h323 = CENSUS_mapkey0_idxfn::hash(se4964.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1619 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1619 = &(i1619->buckets_[h323 % i1619->size_]);
            CENSUS_entry* e1619;
            do if ((e1619 = n1619->obj) && h323 == n1619->hash && CENSUS_mapkey0_idxfn::equals(se4964, *e1619)) {
              long census_population = e1619->CENSUS_POPULATION;
              long census_white = e1619->CENSUS_WHITE;
              long census_asian = e1619->CENSUS_ASIAN;
              long census_pacific = e1619->CENSUS_PACIFIC;
              long census_blackafrican = e1619->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1619->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1619->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1619->CENSUS_HOUSEUNITS;
              long census_families = e1619->CENSUS_FAMILIES;
              long census_households = e1619->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1619->CENSUS_HUSBWIFE;
              long census_males = e1619->CENSUS_MALES;
              long census_females = e1619->CENSUS_FEMALES;
              long census_householdschildren = e1619->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1619->CENSUS_HISPANIC;
              long v1619 = e1619->__av;
              __SQL_SUM_AGGREGATE_579INVENTORY1_P_3.addOrDelOnZero(se4963.modify(inventory_locn), (v1618 * (v1619 * (location_walmartsupercenterdistance * census_families))));
            } while ((n1619 = n1619->nxt));
          }
          e1618 = e1618->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_580 = 0.0;
      __SQL_SUM_AGGREGATE_580INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1620 = LOCATION.head;
        while (e1620) {
          long inventory_locn = e1620->LOCATION_LOCN;
          long location_zip = e1620->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1620->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1620->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1620->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1620->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1620->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1620->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1620->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1620->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1620->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1620->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1620->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1620->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1620->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1620 = e1620->__av;
          { //slice
            const HASH_RES_t h324 = CENSUS_mapkey0_idxfn::hash(se4967.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1621 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1621 = &(i1621->buckets_[h324 % i1621->size_]);
            CENSUS_entry* e1621;
            do if ((e1621 = n1621->obj) && h324 == n1621->hash && CENSUS_mapkey0_idxfn::equals(se4967, *e1621)) {
              long census_population = e1621->CENSUS_POPULATION;
              long census_white = e1621->CENSUS_WHITE;
              long census_asian = e1621->CENSUS_ASIAN;
              long census_pacific = e1621->CENSUS_PACIFIC;
              long census_blackafrican = e1621->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1621->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1621->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1621->CENSUS_HOUSEUNITS;
              long census_families = e1621->CENSUS_FAMILIES;
              long census_households = e1621->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1621->CENSUS_HUSBWIFE;
              long census_males = e1621->CENSUS_MALES;
              long census_females = e1621->CENSUS_FEMALES;
              long census_householdschildren = e1621->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1621->CENSUS_HISPANIC;
              long v1621 = e1621->__av;
              __SQL_SUM_AGGREGATE_580INVENTORY1_P_3.addOrDelOnZero(se4966.modify(inventory_locn), (v1620 * (v1621 * (location_walmartsupercenterdistance * census_households))));
            } while ((n1621 = n1621->nxt));
          }
          e1620 = e1620->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_581 = 0.0;
      __SQL_SUM_AGGREGATE_581INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1622 = LOCATION.head;
        while (e1622) {
          long inventory_locn = e1622->LOCATION_LOCN;
          long location_zip = e1622->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1622->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1622->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1622->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1622->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1622->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1622->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1622->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1622->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1622->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1622->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1622->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1622->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1622->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1622 = e1622->__av;
          { //slice
            const HASH_RES_t h325 = CENSUS_mapkey0_idxfn::hash(se4970.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1623 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1623 = &(i1623->buckets_[h325 % i1623->size_]);
            CENSUS_entry* e1623;
            do if ((e1623 = n1623->obj) && h325 == n1623->hash && CENSUS_mapkey0_idxfn::equals(se4970, *e1623)) {
              long census_population = e1623->CENSUS_POPULATION;
              long census_white = e1623->CENSUS_WHITE;
              long census_asian = e1623->CENSUS_ASIAN;
              long census_pacific = e1623->CENSUS_PACIFIC;
              long census_blackafrican = e1623->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1623->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1623->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1623->CENSUS_HOUSEUNITS;
              long census_families = e1623->CENSUS_FAMILIES;
              long census_households = e1623->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1623->CENSUS_HUSBWIFE;
              long census_males = e1623->CENSUS_MALES;
              long census_females = e1623->CENSUS_FEMALES;
              long census_householdschildren = e1623->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1623->CENSUS_HISPANIC;
              long v1623 = e1623->__av;
              __SQL_SUM_AGGREGATE_581INVENTORY1_P_3.addOrDelOnZero(se4969.modify(inventory_locn), (v1622 * (v1623 * (location_walmartsupercenterdistance * census_husbwife))));
            } while ((n1623 = n1623->nxt));
          }
          e1622 = e1622->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_582 = 0.0;
      __SQL_SUM_AGGREGATE_582INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1624 = LOCATION.head;
        while (e1624) {
          long inventory_locn = e1624->LOCATION_LOCN;
          long location_zip = e1624->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1624->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1624->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1624->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1624->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1624->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1624->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1624->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1624->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1624->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1624->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1624->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1624->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1624->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1624 = e1624->__av;
          { //slice
            const HASH_RES_t h326 = CENSUS_mapkey0_idxfn::hash(se4973.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1625 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1625 = &(i1625->buckets_[h326 % i1625->size_]);
            CENSUS_entry* e1625;
            do if ((e1625 = n1625->obj) && h326 == n1625->hash && CENSUS_mapkey0_idxfn::equals(se4973, *e1625)) {
              long census_population = e1625->CENSUS_POPULATION;
              long census_white = e1625->CENSUS_WHITE;
              long census_asian = e1625->CENSUS_ASIAN;
              long census_pacific = e1625->CENSUS_PACIFIC;
              long census_blackafrican = e1625->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1625->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1625->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1625->CENSUS_HOUSEUNITS;
              long census_families = e1625->CENSUS_FAMILIES;
              long census_households = e1625->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1625->CENSUS_HUSBWIFE;
              long census_males = e1625->CENSUS_MALES;
              long census_females = e1625->CENSUS_FEMALES;
              long census_householdschildren = e1625->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1625->CENSUS_HISPANIC;
              long v1625 = e1625->__av;
              __SQL_SUM_AGGREGATE_582INVENTORY1_P_3.addOrDelOnZero(se4972.modify(inventory_locn), (v1624 * (v1625 * (location_walmartsupercenterdistance * census_males))));
            } while ((n1625 = n1625->nxt));
          }
          e1624 = e1624->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_583 = 0.0;
      __SQL_SUM_AGGREGATE_583INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1626 = LOCATION.head;
        while (e1626) {
          long inventory_locn = e1626->LOCATION_LOCN;
          long location_zip = e1626->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1626->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1626->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1626->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1626->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1626->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1626->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1626->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1626->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1626->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1626->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1626->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1626->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1626->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1626 = e1626->__av;
          { //slice
            const HASH_RES_t h327 = CENSUS_mapkey0_idxfn::hash(se4976.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1627 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1627 = &(i1627->buckets_[h327 % i1627->size_]);
            CENSUS_entry* e1627;
            do if ((e1627 = n1627->obj) && h327 == n1627->hash && CENSUS_mapkey0_idxfn::equals(se4976, *e1627)) {
              long census_population = e1627->CENSUS_POPULATION;
              long census_white = e1627->CENSUS_WHITE;
              long census_asian = e1627->CENSUS_ASIAN;
              long census_pacific = e1627->CENSUS_PACIFIC;
              long census_blackafrican = e1627->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1627->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1627->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1627->CENSUS_HOUSEUNITS;
              long census_families = e1627->CENSUS_FAMILIES;
              long census_households = e1627->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1627->CENSUS_HUSBWIFE;
              long census_males = e1627->CENSUS_MALES;
              long census_females = e1627->CENSUS_FEMALES;
              long census_householdschildren = e1627->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1627->CENSUS_HISPANIC;
              long v1627 = e1627->__av;
              __SQL_SUM_AGGREGATE_583INVENTORY1_P_3.addOrDelOnZero(se4975.modify(inventory_locn), (v1626 * (v1627 * (location_walmartsupercenterdistance * census_females))));
            } while ((n1627 = n1627->nxt));
          }
          e1626 = e1626->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_584 = 0.0;
      __SQL_SUM_AGGREGATE_584INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1628 = LOCATION.head;
        while (e1628) {
          long inventory_locn = e1628->LOCATION_LOCN;
          long location_zip = e1628->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1628->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1628->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1628->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1628->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1628->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1628->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1628->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1628->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1628->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1628->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1628->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1628->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1628->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1628 = e1628->__av;
          { //slice
            const HASH_RES_t h328 = CENSUS_mapkey0_idxfn::hash(se4979.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1629 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1629 = &(i1629->buckets_[h328 % i1629->size_]);
            CENSUS_entry* e1629;
            do if ((e1629 = n1629->obj) && h328 == n1629->hash && CENSUS_mapkey0_idxfn::equals(se4979, *e1629)) {
              long census_population = e1629->CENSUS_POPULATION;
              long census_white = e1629->CENSUS_WHITE;
              long census_asian = e1629->CENSUS_ASIAN;
              long census_pacific = e1629->CENSUS_PACIFIC;
              long census_blackafrican = e1629->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1629->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1629->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1629->CENSUS_HOUSEUNITS;
              long census_families = e1629->CENSUS_FAMILIES;
              long census_households = e1629->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1629->CENSUS_HUSBWIFE;
              long census_males = e1629->CENSUS_MALES;
              long census_females = e1629->CENSUS_FEMALES;
              long census_householdschildren = e1629->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1629->CENSUS_HISPANIC;
              long v1629 = e1629->__av;
              __SQL_SUM_AGGREGATE_584INVENTORY1_P_3.addOrDelOnZero(se4978.modify(inventory_locn), (v1628 * (v1629 * (location_walmartsupercenterdistance * census_householdschildren))));
            } while ((n1629 = n1629->nxt));
          }
          e1628 = e1628->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_585 = 0.0;
      __SQL_SUM_AGGREGATE_585INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1630 = LOCATION.head;
        while (e1630) {
          long inventory_locn = e1630->LOCATION_LOCN;
          long location_zip = e1630->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1630->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1630->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1630->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1630->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1630->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1630->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1630->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1630->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1630->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1630->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1630->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1630->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1630->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1630 = e1630->__av;
          { //slice
            const HASH_RES_t h329 = CENSUS_mapkey0_idxfn::hash(se4982.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1631 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1631 = &(i1631->buckets_[h329 % i1631->size_]);
            CENSUS_entry* e1631;
            do if ((e1631 = n1631->obj) && h329 == n1631->hash && CENSUS_mapkey0_idxfn::equals(se4982, *e1631)) {
              long census_population = e1631->CENSUS_POPULATION;
              long census_white = e1631->CENSUS_WHITE;
              long census_asian = e1631->CENSUS_ASIAN;
              long census_pacific = e1631->CENSUS_PACIFIC;
              long census_blackafrican = e1631->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1631->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1631->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1631->CENSUS_HOUSEUNITS;
              long census_families = e1631->CENSUS_FAMILIES;
              long census_households = e1631->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1631->CENSUS_HUSBWIFE;
              long census_males = e1631->CENSUS_MALES;
              long census_females = e1631->CENSUS_FEMALES;
              long census_householdschildren = e1631->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1631->CENSUS_HISPANIC;
              long v1631 = e1631->__av;
              __SQL_SUM_AGGREGATE_585INVENTORY1_P_3.addOrDelOnZero(se4981.modify(inventory_locn), (v1630 * (v1631 * (location_walmartsupercenterdistance * census_hispanic))));
            } while ((n1631 = n1631->nxt));
          }
          e1630 = e1630->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_586 = 0.0;
      __SQL_SUM_AGGREGATE_587 = 0.0;
      __SQL_SUM_AGGREGATE_588 = 0.0;
      __SQL_SUM_AGGREGATE_589 = 0.0;
      __SQL_SUM_AGGREGATE_590 = 0.0;
      __SQL_SUM_AGGREGATE_591 = 0.0;
      __SQL_SUM_AGGREGATE_592 = 0.0;
      __SQL_SUM_AGGREGATE_593 = 0.0;
      __SQL_SUM_AGGREGATE_594 = 0.0;
      __SQL_SUM_AGGREGATE_595 = 0.0;
      __SQL_SUM_AGGREGATE_596 = 0.0;
      __SQL_SUM_AGGREGATE_596INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1632 = LOCATION.head;
        while (e1632) {
          long inventory_locn = e1632->LOCATION_LOCN;
          long location_zip = e1632->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1632->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1632->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1632->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1632->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1632->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1632->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1632->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1632->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1632->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1632->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1632->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1632->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1632->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1632 = e1632->__av;
          { //slice
            const HASH_RES_t h330 = CENSUS_mapkey0_idxfn::hash(se4995.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1633 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1633 = &(i1633->buckets_[h330 % i1633->size_]);
            CENSUS_entry* e1633;
            do if ((e1633 = n1633->obj) && h330 == n1633->hash && CENSUS_mapkey0_idxfn::equals(se4995, *e1633)) {
              long census_population = e1633->CENSUS_POPULATION;
              long census_white = e1633->CENSUS_WHITE;
              long census_asian = e1633->CENSUS_ASIAN;
              long census_pacific = e1633->CENSUS_PACIFIC;
              long census_blackafrican = e1633->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1633->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1633->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1633->CENSUS_HOUSEUNITS;
              long census_families = e1633->CENSUS_FAMILIES;
              long census_households = e1633->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1633->CENSUS_HUSBWIFE;
              long census_males = e1633->CENSUS_MALES;
              long census_females = e1633->CENSUS_FEMALES;
              long census_householdschildren = e1633->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1633->CENSUS_HISPANIC;
              long v1633 = e1633->__av;
              __SQL_SUM_AGGREGATE_596INVENTORY1_P_3.addOrDelOnZero(se4994.modify(inventory_locn), (v1632 * (v1633 * (location_walmartsupercenterdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n1633 = n1633->nxt));
          }
          e1632 = e1632->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_597 = 0.0;
      __SQL_SUM_AGGREGATE_597INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1634 = LOCATION.head;
        while (e1634) {
          long inventory_locn = e1634->LOCATION_LOCN;
          long location_zip = e1634->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1634->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1634->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1634->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1634->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1634->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1634->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1634->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1634->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1634->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1634->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1634->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1634->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1634->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1634 = e1634->__av;
          { //slice
            const HASH_RES_t h331 = CENSUS_mapkey0_idxfn::hash(se4998.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1635 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1635 = &(i1635->buckets_[h331 % i1635->size_]);
            CENSUS_entry* e1635;
            do if ((e1635 = n1635->obj) && h331 == n1635->hash && CENSUS_mapkey0_idxfn::equals(se4998, *e1635)) {
              long census_population = e1635->CENSUS_POPULATION;
              long census_white = e1635->CENSUS_WHITE;
              long census_asian = e1635->CENSUS_ASIAN;
              long census_pacific = e1635->CENSUS_PACIFIC;
              long census_blackafrican = e1635->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1635->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1635->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1635->CENSUS_HOUSEUNITS;
              long census_families = e1635->CENSUS_FAMILIES;
              long census_households = e1635->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1635->CENSUS_HUSBWIFE;
              long census_males = e1635->CENSUS_MALES;
              long census_females = e1635->CENSUS_FEMALES;
              long census_householdschildren = e1635->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1635->CENSUS_HISPANIC;
              long v1635 = e1635->__av;
              __SQL_SUM_AGGREGATE_597INVENTORY1_P_3.addOrDelOnZero(se4997.modify(inventory_locn), (v1634 * (v1635 * (location_walmartsupercenterdrivetime * census_population))));
            } while ((n1635 = n1635->nxt));
          }
          e1634 = e1634->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_598 = 0.0;
      __SQL_SUM_AGGREGATE_598INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1636 = LOCATION.head;
        while (e1636) {
          long inventory_locn = e1636->LOCATION_LOCN;
          long location_zip = e1636->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1636->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1636->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1636->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1636->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1636->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1636->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1636->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1636->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1636->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1636->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1636->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1636->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1636->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1636 = e1636->__av;
          { //slice
            const HASH_RES_t h332 = CENSUS_mapkey0_idxfn::hash(se5001.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1637 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1637 = &(i1637->buckets_[h332 % i1637->size_]);
            CENSUS_entry* e1637;
            do if ((e1637 = n1637->obj) && h332 == n1637->hash && CENSUS_mapkey0_idxfn::equals(se5001, *e1637)) {
              long census_population = e1637->CENSUS_POPULATION;
              long census_white = e1637->CENSUS_WHITE;
              long census_asian = e1637->CENSUS_ASIAN;
              long census_pacific = e1637->CENSUS_PACIFIC;
              long census_blackafrican = e1637->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1637->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1637->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1637->CENSUS_HOUSEUNITS;
              long census_families = e1637->CENSUS_FAMILIES;
              long census_households = e1637->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1637->CENSUS_HUSBWIFE;
              long census_males = e1637->CENSUS_MALES;
              long census_females = e1637->CENSUS_FEMALES;
              long census_householdschildren = e1637->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1637->CENSUS_HISPANIC;
              long v1637 = e1637->__av;
              __SQL_SUM_AGGREGATE_598INVENTORY1_P_3.addOrDelOnZero(se5000.modify(inventory_locn), (v1636 * (v1637 * (location_walmartsupercenterdrivetime * census_white))));
            } while ((n1637 = n1637->nxt));
          }
          e1636 = e1636->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_599 = 0.0;
      __SQL_SUM_AGGREGATE_599INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1638 = LOCATION.head;
        while (e1638) {
          long inventory_locn = e1638->LOCATION_LOCN;
          long location_zip = e1638->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1638->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1638->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1638->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1638->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1638->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1638->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1638->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1638->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1638->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1638->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1638->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1638->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1638->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1638 = e1638->__av;
          { //slice
            const HASH_RES_t h333 = CENSUS_mapkey0_idxfn::hash(se5004.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1639 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1639 = &(i1639->buckets_[h333 % i1639->size_]);
            CENSUS_entry* e1639;
            do if ((e1639 = n1639->obj) && h333 == n1639->hash && CENSUS_mapkey0_idxfn::equals(se5004, *e1639)) {
              long census_population = e1639->CENSUS_POPULATION;
              long census_white = e1639->CENSUS_WHITE;
              long census_asian = e1639->CENSUS_ASIAN;
              long census_pacific = e1639->CENSUS_PACIFIC;
              long census_blackafrican = e1639->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1639->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1639->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1639->CENSUS_HOUSEUNITS;
              long census_families = e1639->CENSUS_FAMILIES;
              long census_households = e1639->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1639->CENSUS_HUSBWIFE;
              long census_males = e1639->CENSUS_MALES;
              long census_females = e1639->CENSUS_FEMALES;
              long census_householdschildren = e1639->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1639->CENSUS_HISPANIC;
              long v1639 = e1639->__av;
              __SQL_SUM_AGGREGATE_599INVENTORY1_P_3.addOrDelOnZero(se5003.modify(inventory_locn), (v1638 * (v1639 * (location_walmartsupercenterdrivetime * census_asian))));
            } while ((n1639 = n1639->nxt));
          }
          e1638 = e1638->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_600 = 0.0;
      __SQL_SUM_AGGREGATE_600INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1640 = LOCATION.head;
        while (e1640) {
          long inventory_locn = e1640->LOCATION_LOCN;
          long location_zip = e1640->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1640->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1640->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1640->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1640->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1640->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1640->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1640->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1640->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1640->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1640->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1640->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1640->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1640->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1640 = e1640->__av;
          { //slice
            const HASH_RES_t h334 = CENSUS_mapkey0_idxfn::hash(se5007.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1641 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1641 = &(i1641->buckets_[h334 % i1641->size_]);
            CENSUS_entry* e1641;
            do if ((e1641 = n1641->obj) && h334 == n1641->hash && CENSUS_mapkey0_idxfn::equals(se5007, *e1641)) {
              long census_population = e1641->CENSUS_POPULATION;
              long census_white = e1641->CENSUS_WHITE;
              long census_asian = e1641->CENSUS_ASIAN;
              long census_pacific = e1641->CENSUS_PACIFIC;
              long census_blackafrican = e1641->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1641->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1641->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1641->CENSUS_HOUSEUNITS;
              long census_families = e1641->CENSUS_FAMILIES;
              long census_households = e1641->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1641->CENSUS_HUSBWIFE;
              long census_males = e1641->CENSUS_MALES;
              long census_females = e1641->CENSUS_FEMALES;
              long census_householdschildren = e1641->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1641->CENSUS_HISPANIC;
              long v1641 = e1641->__av;
              __SQL_SUM_AGGREGATE_600INVENTORY1_P_3.addOrDelOnZero(se5006.modify(inventory_locn), (v1640 * (v1641 * (location_walmartsupercenterdrivetime * census_pacific))));
            } while ((n1641 = n1641->nxt));
          }
          e1640 = e1640->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_601 = 0.0;
      __SQL_SUM_AGGREGATE_601INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1642 = LOCATION.head;
        while (e1642) {
          long inventory_locn = e1642->LOCATION_LOCN;
          long location_zip = e1642->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1642->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1642->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1642->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1642->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1642->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1642->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1642->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1642->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1642->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1642->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1642->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1642->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1642->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1642 = e1642->__av;
          { //slice
            const HASH_RES_t h335 = CENSUS_mapkey0_idxfn::hash(se5010.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1643 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1643 = &(i1643->buckets_[h335 % i1643->size_]);
            CENSUS_entry* e1643;
            do if ((e1643 = n1643->obj) && h335 == n1643->hash && CENSUS_mapkey0_idxfn::equals(se5010, *e1643)) {
              long census_population = e1643->CENSUS_POPULATION;
              long census_white = e1643->CENSUS_WHITE;
              long census_asian = e1643->CENSUS_ASIAN;
              long census_pacific = e1643->CENSUS_PACIFIC;
              long census_blackafrican = e1643->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1643->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1643->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1643->CENSUS_HOUSEUNITS;
              long census_families = e1643->CENSUS_FAMILIES;
              long census_households = e1643->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1643->CENSUS_HUSBWIFE;
              long census_males = e1643->CENSUS_MALES;
              long census_females = e1643->CENSUS_FEMALES;
              long census_householdschildren = e1643->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1643->CENSUS_HISPANIC;
              long v1643 = e1643->__av;
              __SQL_SUM_AGGREGATE_601INVENTORY1_P_3.addOrDelOnZero(se5009.modify(inventory_locn), (v1642 * (v1643 * (location_walmartsupercenterdrivetime * census_blackafrican))));
            } while ((n1643 = n1643->nxt));
          }
          e1642 = e1642->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_602 = 0.0;
      __SQL_SUM_AGGREGATE_602INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1644 = LOCATION.head;
        while (e1644) {
          long inventory_locn = e1644->LOCATION_LOCN;
          long location_zip = e1644->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1644->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1644->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1644->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1644->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1644->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1644->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1644->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1644->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1644->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1644->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1644->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1644->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1644->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1644 = e1644->__av;
          { //slice
            const HASH_RES_t h336 = CENSUS_mapkey0_idxfn::hash(se5013.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1645 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1645 = &(i1645->buckets_[h336 % i1645->size_]);
            CENSUS_entry* e1645;
            do if ((e1645 = n1645->obj) && h336 == n1645->hash && CENSUS_mapkey0_idxfn::equals(se5013, *e1645)) {
              long census_population = e1645->CENSUS_POPULATION;
              long census_white = e1645->CENSUS_WHITE;
              long census_asian = e1645->CENSUS_ASIAN;
              long census_pacific = e1645->CENSUS_PACIFIC;
              long census_blackafrican = e1645->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1645->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1645->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1645->CENSUS_HOUSEUNITS;
              long census_families = e1645->CENSUS_FAMILIES;
              long census_households = e1645->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1645->CENSUS_HUSBWIFE;
              long census_males = e1645->CENSUS_MALES;
              long census_females = e1645->CENSUS_FEMALES;
              long census_householdschildren = e1645->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1645->CENSUS_HISPANIC;
              long v1645 = e1645->__av;
              __SQL_SUM_AGGREGATE_602INVENTORY1_P_3.addOrDelOnZero(se5012.modify(inventory_locn), (v1644 * (v1645 * (location_walmartsupercenterdrivetime * census_medianage))));
            } while ((n1645 = n1645->nxt));
          }
          e1644 = e1644->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_603 = 0.0;
      __SQL_SUM_AGGREGATE_603INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1646 = LOCATION.head;
        while (e1646) {
          long inventory_locn = e1646->LOCATION_LOCN;
          long location_zip = e1646->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1646->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1646->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1646->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1646->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1646->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1646->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1646->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1646->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1646->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1646->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1646->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1646->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1646->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1646 = e1646->__av;
          { //slice
            const HASH_RES_t h337 = CENSUS_mapkey0_idxfn::hash(se5016.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1647 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1647 = &(i1647->buckets_[h337 % i1647->size_]);
            CENSUS_entry* e1647;
            do if ((e1647 = n1647->obj) && h337 == n1647->hash && CENSUS_mapkey0_idxfn::equals(se5016, *e1647)) {
              long census_population = e1647->CENSUS_POPULATION;
              long census_white = e1647->CENSUS_WHITE;
              long census_asian = e1647->CENSUS_ASIAN;
              long census_pacific = e1647->CENSUS_PACIFIC;
              long census_blackafrican = e1647->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1647->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1647->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1647->CENSUS_HOUSEUNITS;
              long census_families = e1647->CENSUS_FAMILIES;
              long census_households = e1647->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1647->CENSUS_HUSBWIFE;
              long census_males = e1647->CENSUS_MALES;
              long census_females = e1647->CENSUS_FEMALES;
              long census_householdschildren = e1647->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1647->CENSUS_HISPANIC;
              long v1647 = e1647->__av;
              __SQL_SUM_AGGREGATE_603INVENTORY1_P_3.addOrDelOnZero(se5015.modify(inventory_locn), (v1646 * (v1647 * (location_walmartsupercenterdrivetime * census_occupiedhouseunits))));
            } while ((n1647 = n1647->nxt));
          }
          e1646 = e1646->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_604 = 0.0;
      __SQL_SUM_AGGREGATE_604INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1648 = LOCATION.head;
        while (e1648) {
          long inventory_locn = e1648->LOCATION_LOCN;
          long location_zip = e1648->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1648->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1648->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1648->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1648->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1648->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1648->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1648->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1648->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1648->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1648->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1648->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1648->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1648->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1648 = e1648->__av;
          { //slice
            const HASH_RES_t h338 = CENSUS_mapkey0_idxfn::hash(se5019.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1649 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1649 = &(i1649->buckets_[h338 % i1649->size_]);
            CENSUS_entry* e1649;
            do if ((e1649 = n1649->obj) && h338 == n1649->hash && CENSUS_mapkey0_idxfn::equals(se5019, *e1649)) {
              long census_population = e1649->CENSUS_POPULATION;
              long census_white = e1649->CENSUS_WHITE;
              long census_asian = e1649->CENSUS_ASIAN;
              long census_pacific = e1649->CENSUS_PACIFIC;
              long census_blackafrican = e1649->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1649->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1649->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1649->CENSUS_HOUSEUNITS;
              long census_families = e1649->CENSUS_FAMILIES;
              long census_households = e1649->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1649->CENSUS_HUSBWIFE;
              long census_males = e1649->CENSUS_MALES;
              long census_females = e1649->CENSUS_FEMALES;
              long census_householdschildren = e1649->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1649->CENSUS_HISPANIC;
              long v1649 = e1649->__av;
              __SQL_SUM_AGGREGATE_604INVENTORY1_P_3.addOrDelOnZero(se5018.modify(inventory_locn), (v1648 * (v1649 * (location_walmartsupercenterdrivetime * census_houseunits))));
            } while ((n1649 = n1649->nxt));
          }
          e1648 = e1648->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_605 = 0.0;
      __SQL_SUM_AGGREGATE_605INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1650 = LOCATION.head;
        while (e1650) {
          long inventory_locn = e1650->LOCATION_LOCN;
          long location_zip = e1650->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1650->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1650->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1650->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1650->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1650->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1650->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1650->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1650->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1650->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1650->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1650->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1650->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1650->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1650 = e1650->__av;
          { //slice
            const HASH_RES_t h339 = CENSUS_mapkey0_idxfn::hash(se5022.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1651 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1651 = &(i1651->buckets_[h339 % i1651->size_]);
            CENSUS_entry* e1651;
            do if ((e1651 = n1651->obj) && h339 == n1651->hash && CENSUS_mapkey0_idxfn::equals(se5022, *e1651)) {
              long census_population = e1651->CENSUS_POPULATION;
              long census_white = e1651->CENSUS_WHITE;
              long census_asian = e1651->CENSUS_ASIAN;
              long census_pacific = e1651->CENSUS_PACIFIC;
              long census_blackafrican = e1651->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1651->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1651->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1651->CENSUS_HOUSEUNITS;
              long census_families = e1651->CENSUS_FAMILIES;
              long census_households = e1651->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1651->CENSUS_HUSBWIFE;
              long census_males = e1651->CENSUS_MALES;
              long census_females = e1651->CENSUS_FEMALES;
              long census_householdschildren = e1651->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1651->CENSUS_HISPANIC;
              long v1651 = e1651->__av;
              __SQL_SUM_AGGREGATE_605INVENTORY1_P_3.addOrDelOnZero(se5021.modify(inventory_locn), (v1650 * (v1651 * (location_walmartsupercenterdrivetime * census_families))));
            } while ((n1651 = n1651->nxt));
          }
          e1650 = e1650->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_606 = 0.0;
      __SQL_SUM_AGGREGATE_606INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1652 = LOCATION.head;
        while (e1652) {
          long inventory_locn = e1652->LOCATION_LOCN;
          long location_zip = e1652->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1652->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1652->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1652->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1652->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1652->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1652->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1652->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1652->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1652->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1652->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1652->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1652->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1652->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1652 = e1652->__av;
          { //slice
            const HASH_RES_t h340 = CENSUS_mapkey0_idxfn::hash(se5025.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1653 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1653 = &(i1653->buckets_[h340 % i1653->size_]);
            CENSUS_entry* e1653;
            do if ((e1653 = n1653->obj) && h340 == n1653->hash && CENSUS_mapkey0_idxfn::equals(se5025, *e1653)) {
              long census_population = e1653->CENSUS_POPULATION;
              long census_white = e1653->CENSUS_WHITE;
              long census_asian = e1653->CENSUS_ASIAN;
              long census_pacific = e1653->CENSUS_PACIFIC;
              long census_blackafrican = e1653->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1653->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1653->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1653->CENSUS_HOUSEUNITS;
              long census_families = e1653->CENSUS_FAMILIES;
              long census_households = e1653->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1653->CENSUS_HUSBWIFE;
              long census_males = e1653->CENSUS_MALES;
              long census_females = e1653->CENSUS_FEMALES;
              long census_householdschildren = e1653->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1653->CENSUS_HISPANIC;
              long v1653 = e1653->__av;
              __SQL_SUM_AGGREGATE_606INVENTORY1_P_3.addOrDelOnZero(se5024.modify(inventory_locn), (v1652 * (v1653 * (location_walmartsupercenterdrivetime * census_households))));
            } while ((n1653 = n1653->nxt));
          }
          e1652 = e1652->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_607 = 0.0;
      __SQL_SUM_AGGREGATE_607INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1654 = LOCATION.head;
        while (e1654) {
          long inventory_locn = e1654->LOCATION_LOCN;
          long location_zip = e1654->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1654->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1654->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1654->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1654->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1654->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1654->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1654->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1654->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1654->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1654->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1654->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1654->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1654->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1654 = e1654->__av;
          { //slice
            const HASH_RES_t h341 = CENSUS_mapkey0_idxfn::hash(se5028.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1655 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1655 = &(i1655->buckets_[h341 % i1655->size_]);
            CENSUS_entry* e1655;
            do if ((e1655 = n1655->obj) && h341 == n1655->hash && CENSUS_mapkey0_idxfn::equals(se5028, *e1655)) {
              long census_population = e1655->CENSUS_POPULATION;
              long census_white = e1655->CENSUS_WHITE;
              long census_asian = e1655->CENSUS_ASIAN;
              long census_pacific = e1655->CENSUS_PACIFIC;
              long census_blackafrican = e1655->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1655->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1655->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1655->CENSUS_HOUSEUNITS;
              long census_families = e1655->CENSUS_FAMILIES;
              long census_households = e1655->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1655->CENSUS_HUSBWIFE;
              long census_males = e1655->CENSUS_MALES;
              long census_females = e1655->CENSUS_FEMALES;
              long census_householdschildren = e1655->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1655->CENSUS_HISPANIC;
              long v1655 = e1655->__av;
              __SQL_SUM_AGGREGATE_607INVENTORY1_P_3.addOrDelOnZero(se5027.modify(inventory_locn), (v1654 * (v1655 * (location_walmartsupercenterdrivetime * census_husbwife))));
            } while ((n1655 = n1655->nxt));
          }
          e1654 = e1654->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_608 = 0.0;
      __SQL_SUM_AGGREGATE_608INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1656 = LOCATION.head;
        while (e1656) {
          long inventory_locn = e1656->LOCATION_LOCN;
          long location_zip = e1656->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1656->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1656->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1656->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1656->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1656->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1656->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1656->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1656->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1656->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1656->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1656->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1656->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1656->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1656 = e1656->__av;
          { //slice
            const HASH_RES_t h342 = CENSUS_mapkey0_idxfn::hash(se5031.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1657 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1657 = &(i1657->buckets_[h342 % i1657->size_]);
            CENSUS_entry* e1657;
            do if ((e1657 = n1657->obj) && h342 == n1657->hash && CENSUS_mapkey0_idxfn::equals(se5031, *e1657)) {
              long census_population = e1657->CENSUS_POPULATION;
              long census_white = e1657->CENSUS_WHITE;
              long census_asian = e1657->CENSUS_ASIAN;
              long census_pacific = e1657->CENSUS_PACIFIC;
              long census_blackafrican = e1657->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1657->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1657->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1657->CENSUS_HOUSEUNITS;
              long census_families = e1657->CENSUS_FAMILIES;
              long census_households = e1657->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1657->CENSUS_HUSBWIFE;
              long census_males = e1657->CENSUS_MALES;
              long census_females = e1657->CENSUS_FEMALES;
              long census_householdschildren = e1657->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1657->CENSUS_HISPANIC;
              long v1657 = e1657->__av;
              __SQL_SUM_AGGREGATE_608INVENTORY1_P_3.addOrDelOnZero(se5030.modify(inventory_locn), (v1656 * (v1657 * (location_walmartsupercenterdrivetime * census_males))));
            } while ((n1657 = n1657->nxt));
          }
          e1656 = e1656->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_609 = 0.0;
      __SQL_SUM_AGGREGATE_609INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1658 = LOCATION.head;
        while (e1658) {
          long inventory_locn = e1658->LOCATION_LOCN;
          long location_zip = e1658->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1658->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1658->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1658->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1658->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1658->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1658->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1658->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1658->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1658->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1658->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1658->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1658->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1658->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1658 = e1658->__av;
          { //slice
            const HASH_RES_t h343 = CENSUS_mapkey0_idxfn::hash(se5034.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1659 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1659 = &(i1659->buckets_[h343 % i1659->size_]);
            CENSUS_entry* e1659;
            do if ((e1659 = n1659->obj) && h343 == n1659->hash && CENSUS_mapkey0_idxfn::equals(se5034, *e1659)) {
              long census_population = e1659->CENSUS_POPULATION;
              long census_white = e1659->CENSUS_WHITE;
              long census_asian = e1659->CENSUS_ASIAN;
              long census_pacific = e1659->CENSUS_PACIFIC;
              long census_blackafrican = e1659->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1659->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1659->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1659->CENSUS_HOUSEUNITS;
              long census_families = e1659->CENSUS_FAMILIES;
              long census_households = e1659->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1659->CENSUS_HUSBWIFE;
              long census_males = e1659->CENSUS_MALES;
              long census_females = e1659->CENSUS_FEMALES;
              long census_householdschildren = e1659->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1659->CENSUS_HISPANIC;
              long v1659 = e1659->__av;
              __SQL_SUM_AGGREGATE_609INVENTORY1_P_3.addOrDelOnZero(se5033.modify(inventory_locn), (v1658 * (v1659 * (location_walmartsupercenterdrivetime * census_females))));
            } while ((n1659 = n1659->nxt));
          }
          e1658 = e1658->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_610 = 0.0;
      __SQL_SUM_AGGREGATE_610INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1660 = LOCATION.head;
        while (e1660) {
          long inventory_locn = e1660->LOCATION_LOCN;
          long location_zip = e1660->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1660->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1660->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1660->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1660->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1660->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1660->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1660->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1660->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1660->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1660->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1660->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1660->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1660->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1660 = e1660->__av;
          { //slice
            const HASH_RES_t h344 = CENSUS_mapkey0_idxfn::hash(se5037.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1661 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1661 = &(i1661->buckets_[h344 % i1661->size_]);
            CENSUS_entry* e1661;
            do if ((e1661 = n1661->obj) && h344 == n1661->hash && CENSUS_mapkey0_idxfn::equals(se5037, *e1661)) {
              long census_population = e1661->CENSUS_POPULATION;
              long census_white = e1661->CENSUS_WHITE;
              long census_asian = e1661->CENSUS_ASIAN;
              long census_pacific = e1661->CENSUS_PACIFIC;
              long census_blackafrican = e1661->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1661->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1661->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1661->CENSUS_HOUSEUNITS;
              long census_families = e1661->CENSUS_FAMILIES;
              long census_households = e1661->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1661->CENSUS_HUSBWIFE;
              long census_males = e1661->CENSUS_MALES;
              long census_females = e1661->CENSUS_FEMALES;
              long census_householdschildren = e1661->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1661->CENSUS_HISPANIC;
              long v1661 = e1661->__av;
              __SQL_SUM_AGGREGATE_610INVENTORY1_P_3.addOrDelOnZero(se5036.modify(inventory_locn), (v1660 * (v1661 * (location_walmartsupercenterdrivetime * census_householdschildren))));
            } while ((n1661 = n1661->nxt));
          }
          e1660 = e1660->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_611 = 0.0;
      __SQL_SUM_AGGREGATE_611INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1662 = LOCATION.head;
        while (e1662) {
          long inventory_locn = e1662->LOCATION_LOCN;
          long location_zip = e1662->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1662->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1662->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1662->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1662->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1662->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1662->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1662->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1662->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1662->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1662->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1662->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1662->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1662->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1662 = e1662->__av;
          { //slice
            const HASH_RES_t h345 = CENSUS_mapkey0_idxfn::hash(se5040.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1663 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1663 = &(i1663->buckets_[h345 % i1663->size_]);
            CENSUS_entry* e1663;
            do if ((e1663 = n1663->obj) && h345 == n1663->hash && CENSUS_mapkey0_idxfn::equals(se5040, *e1663)) {
              long census_population = e1663->CENSUS_POPULATION;
              long census_white = e1663->CENSUS_WHITE;
              long census_asian = e1663->CENSUS_ASIAN;
              long census_pacific = e1663->CENSUS_PACIFIC;
              long census_blackafrican = e1663->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1663->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1663->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1663->CENSUS_HOUSEUNITS;
              long census_families = e1663->CENSUS_FAMILIES;
              long census_households = e1663->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1663->CENSUS_HUSBWIFE;
              long census_males = e1663->CENSUS_MALES;
              long census_females = e1663->CENSUS_FEMALES;
              long census_householdschildren = e1663->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1663->CENSUS_HISPANIC;
              long v1663 = e1663->__av;
              __SQL_SUM_AGGREGATE_611INVENTORY1_P_3.addOrDelOnZero(se5039.modify(inventory_locn), (v1662 * (v1663 * (location_walmartsupercenterdrivetime * census_hispanic))));
            } while ((n1663 = n1663->nxt));
          }
          e1662 = e1662->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_612 = 0.0;
      __SQL_SUM_AGGREGATE_613 = 0.0;
      __SQL_SUM_AGGREGATE_614 = 0.0;
      __SQL_SUM_AGGREGATE_615 = 0.0;
      __SQL_SUM_AGGREGATE_616 = 0.0;
      __SQL_SUM_AGGREGATE_617 = 0.0;
      __SQL_SUM_AGGREGATE_618 = 0.0;
      __SQL_SUM_AGGREGATE_619 = 0.0;
      __SQL_SUM_AGGREGATE_620 = 0.0;
      __SQL_SUM_AGGREGATE_621 = 0.0;
      __SQL_SUM_AGGREGATE_622INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1664 = LOCATION.head;
        while (e1664) {
          long inventory_locn = e1664->LOCATION_LOCN;
          long location_zip = e1664->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1664->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1664->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1664->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1664->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1664->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1664->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1664->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1664->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1664->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1664->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1664->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1664->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1664->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1664 = e1664->__av;
          { //slice
            const HASH_RES_t h346 = CENSUS_mapkey0_idxfn::hash(se5052.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1665 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1665 = &(i1665->buckets_[h346 % i1665->size_]);
            CENSUS_entry* e1665;
            do if ((e1665 = n1665->obj) && h346 == n1665->hash && CENSUS_mapkey0_idxfn::equals(se5052, *e1665)) {
              long census_population = e1665->CENSUS_POPULATION;
              long census_white = e1665->CENSUS_WHITE;
              long census_asian = e1665->CENSUS_ASIAN;
              long census_pacific = e1665->CENSUS_PACIFIC;
              long census_blackafrican = e1665->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1665->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1665->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1665->CENSUS_HOUSEUNITS;
              long census_families = e1665->CENSUS_FAMILIES;
              long census_households = e1665->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1665->CENSUS_HUSBWIFE;
              long census_males = e1665->CENSUS_MALES;
              long census_females = e1665->CENSUS_FEMALES;
              long census_householdschildren = e1665->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1665->CENSUS_HISPANIC;
              long v1665 = e1665->__av;
              __SQL_SUM_AGGREGATE_622INVENTORY1_P_3.addOrDelOnZero(se5051.modify(inventory_locn), (v1664 * (v1665 * (census_population * census_population))));
            } while ((n1665 = n1665->nxt));
          }
          e1664 = e1664->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_623INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1666 = LOCATION.head;
        while (e1666) {
          long inventory_locn = e1666->LOCATION_LOCN;
          long location_zip = e1666->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1666->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1666->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1666->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1666->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1666->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1666->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1666->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1666->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1666->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1666->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1666->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1666->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1666->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1666 = e1666->__av;
          { //slice
            const HASH_RES_t h347 = CENSUS_mapkey0_idxfn::hash(se5054.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1667 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1667 = &(i1667->buckets_[h347 % i1667->size_]);
            CENSUS_entry* e1667;
            do if ((e1667 = n1667->obj) && h347 == n1667->hash && CENSUS_mapkey0_idxfn::equals(se5054, *e1667)) {
              long census_population = e1667->CENSUS_POPULATION;
              long census_white = e1667->CENSUS_WHITE;
              long census_asian = e1667->CENSUS_ASIAN;
              long census_pacific = e1667->CENSUS_PACIFIC;
              long census_blackafrican = e1667->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1667->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1667->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1667->CENSUS_HOUSEUNITS;
              long census_families = e1667->CENSUS_FAMILIES;
              long census_households = e1667->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1667->CENSUS_HUSBWIFE;
              long census_males = e1667->CENSUS_MALES;
              long census_females = e1667->CENSUS_FEMALES;
              long census_householdschildren = e1667->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1667->CENSUS_HISPANIC;
              long v1667 = e1667->__av;
              __SQL_SUM_AGGREGATE_623INVENTORY1_P_3.addOrDelOnZero(se5053.modify(inventory_locn), (v1666 * (v1667 * (census_population * census_white))));
            } while ((n1667 = n1667->nxt));
          }
          e1666 = e1666->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_624INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1668 = LOCATION.head;
        while (e1668) {
          long inventory_locn = e1668->LOCATION_LOCN;
          long location_zip = e1668->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1668->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1668->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1668->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1668->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1668->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1668->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1668->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1668->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1668->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1668->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1668->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1668->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1668->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1668 = e1668->__av;
          { //slice
            const HASH_RES_t h348 = CENSUS_mapkey0_idxfn::hash(se5056.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1669 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1669 = &(i1669->buckets_[h348 % i1669->size_]);
            CENSUS_entry* e1669;
            do if ((e1669 = n1669->obj) && h348 == n1669->hash && CENSUS_mapkey0_idxfn::equals(se5056, *e1669)) {
              long census_population = e1669->CENSUS_POPULATION;
              long census_white = e1669->CENSUS_WHITE;
              long census_asian = e1669->CENSUS_ASIAN;
              long census_pacific = e1669->CENSUS_PACIFIC;
              long census_blackafrican = e1669->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1669->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1669->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1669->CENSUS_HOUSEUNITS;
              long census_families = e1669->CENSUS_FAMILIES;
              long census_households = e1669->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1669->CENSUS_HUSBWIFE;
              long census_males = e1669->CENSUS_MALES;
              long census_females = e1669->CENSUS_FEMALES;
              long census_householdschildren = e1669->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1669->CENSUS_HISPANIC;
              long v1669 = e1669->__av;
              __SQL_SUM_AGGREGATE_624INVENTORY1_P_3.addOrDelOnZero(se5055.modify(inventory_locn), (v1668 * (v1669 * (census_population * census_asian))));
            } while ((n1669 = n1669->nxt));
          }
          e1668 = e1668->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_625INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1670 = LOCATION.head;
        while (e1670) {
          long inventory_locn = e1670->LOCATION_LOCN;
          long location_zip = e1670->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1670->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1670->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1670->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1670->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1670->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1670->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1670->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1670->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1670->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1670->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1670->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1670->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1670->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1670 = e1670->__av;
          { //slice
            const HASH_RES_t h349 = CENSUS_mapkey0_idxfn::hash(se5058.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1671 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1671 = &(i1671->buckets_[h349 % i1671->size_]);
            CENSUS_entry* e1671;
            do if ((e1671 = n1671->obj) && h349 == n1671->hash && CENSUS_mapkey0_idxfn::equals(se5058, *e1671)) {
              long census_population = e1671->CENSUS_POPULATION;
              long census_white = e1671->CENSUS_WHITE;
              long census_asian = e1671->CENSUS_ASIAN;
              long census_pacific = e1671->CENSUS_PACIFIC;
              long census_blackafrican = e1671->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1671->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1671->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1671->CENSUS_HOUSEUNITS;
              long census_families = e1671->CENSUS_FAMILIES;
              long census_households = e1671->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1671->CENSUS_HUSBWIFE;
              long census_males = e1671->CENSUS_MALES;
              long census_females = e1671->CENSUS_FEMALES;
              long census_householdschildren = e1671->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1671->CENSUS_HISPANIC;
              long v1671 = e1671->__av;
              __SQL_SUM_AGGREGATE_625INVENTORY1_P_3.addOrDelOnZero(se5057.modify(inventory_locn), (v1670 * (v1671 * (census_population * census_pacific))));
            } while ((n1671 = n1671->nxt));
          }
          e1670 = e1670->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_626INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1672 = LOCATION.head;
        while (e1672) {
          long inventory_locn = e1672->LOCATION_LOCN;
          long location_zip = e1672->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1672->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1672->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1672->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1672->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1672->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1672->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1672->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1672->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1672->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1672->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1672->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1672->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1672->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1672 = e1672->__av;
          { //slice
            const HASH_RES_t h350 = CENSUS_mapkey0_idxfn::hash(se5060.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1673 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1673 = &(i1673->buckets_[h350 % i1673->size_]);
            CENSUS_entry* e1673;
            do if ((e1673 = n1673->obj) && h350 == n1673->hash && CENSUS_mapkey0_idxfn::equals(se5060, *e1673)) {
              long census_population = e1673->CENSUS_POPULATION;
              long census_white = e1673->CENSUS_WHITE;
              long census_asian = e1673->CENSUS_ASIAN;
              long census_pacific = e1673->CENSUS_PACIFIC;
              long census_blackafrican = e1673->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1673->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1673->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1673->CENSUS_HOUSEUNITS;
              long census_families = e1673->CENSUS_FAMILIES;
              long census_households = e1673->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1673->CENSUS_HUSBWIFE;
              long census_males = e1673->CENSUS_MALES;
              long census_females = e1673->CENSUS_FEMALES;
              long census_householdschildren = e1673->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1673->CENSUS_HISPANIC;
              long v1673 = e1673->__av;
              __SQL_SUM_AGGREGATE_626INVENTORY1_P_3.addOrDelOnZero(se5059.modify(inventory_locn), (v1672 * (v1673 * (census_population * census_blackafrican))));
            } while ((n1673 = n1673->nxt));
          }
          e1672 = e1672->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_627 = 0.0;
      __SQL_SUM_AGGREGATE_627INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1674 = LOCATION.head;
        while (e1674) {
          long inventory_locn = e1674->LOCATION_LOCN;
          long location_zip = e1674->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1674->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1674->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1674->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1674->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1674->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1674->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1674->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1674->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1674->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1674->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1674->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1674->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1674->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1674 = e1674->__av;
          { //slice
            const HASH_RES_t h351 = CENSUS_mapkey0_idxfn::hash(se5063.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1675 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1675 = &(i1675->buckets_[h351 % i1675->size_]);
            CENSUS_entry* e1675;
            do if ((e1675 = n1675->obj) && h351 == n1675->hash && CENSUS_mapkey0_idxfn::equals(se5063, *e1675)) {
              long census_population = e1675->CENSUS_POPULATION;
              long census_white = e1675->CENSUS_WHITE;
              long census_asian = e1675->CENSUS_ASIAN;
              long census_pacific = e1675->CENSUS_PACIFIC;
              long census_blackafrican = e1675->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1675->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1675->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1675->CENSUS_HOUSEUNITS;
              long census_families = e1675->CENSUS_FAMILIES;
              long census_households = e1675->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1675->CENSUS_HUSBWIFE;
              long census_males = e1675->CENSUS_MALES;
              long census_females = e1675->CENSUS_FEMALES;
              long census_householdschildren = e1675->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1675->CENSUS_HISPANIC;
              long v1675 = e1675->__av;
              __SQL_SUM_AGGREGATE_627INVENTORY1_P_3.addOrDelOnZero(se5062.modify(inventory_locn), (v1674 * (v1675 * (census_population * census_medianage))));
            } while ((n1675 = n1675->nxt));
          }
          e1674 = e1674->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_628INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1676 = LOCATION.head;
        while (e1676) {
          long inventory_locn = e1676->LOCATION_LOCN;
          long location_zip = e1676->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1676->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1676->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1676->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1676->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1676->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1676->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1676->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1676->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1676->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1676->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1676->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1676->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1676->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1676 = e1676->__av;
          { //slice
            const HASH_RES_t h352 = CENSUS_mapkey0_idxfn::hash(se5065.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1677 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1677 = &(i1677->buckets_[h352 % i1677->size_]);
            CENSUS_entry* e1677;
            do if ((e1677 = n1677->obj) && h352 == n1677->hash && CENSUS_mapkey0_idxfn::equals(se5065, *e1677)) {
              long census_population = e1677->CENSUS_POPULATION;
              long census_white = e1677->CENSUS_WHITE;
              long census_asian = e1677->CENSUS_ASIAN;
              long census_pacific = e1677->CENSUS_PACIFIC;
              long census_blackafrican = e1677->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1677->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1677->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1677->CENSUS_HOUSEUNITS;
              long census_families = e1677->CENSUS_FAMILIES;
              long census_households = e1677->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1677->CENSUS_HUSBWIFE;
              long census_males = e1677->CENSUS_MALES;
              long census_females = e1677->CENSUS_FEMALES;
              long census_householdschildren = e1677->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1677->CENSUS_HISPANIC;
              long v1677 = e1677->__av;
              __SQL_SUM_AGGREGATE_628INVENTORY1_P_3.addOrDelOnZero(se5064.modify(inventory_locn), (v1676 * (v1677 * (census_population * census_occupiedhouseunits))));
            } while ((n1677 = n1677->nxt));
          }
          e1676 = e1676->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_629INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1678 = LOCATION.head;
        while (e1678) {
          long inventory_locn = e1678->LOCATION_LOCN;
          long location_zip = e1678->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1678->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1678->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1678->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1678->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1678->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1678->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1678->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1678->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1678->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1678->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1678->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1678->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1678->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1678 = e1678->__av;
          { //slice
            const HASH_RES_t h353 = CENSUS_mapkey0_idxfn::hash(se5067.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1679 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1679 = &(i1679->buckets_[h353 % i1679->size_]);
            CENSUS_entry* e1679;
            do if ((e1679 = n1679->obj) && h353 == n1679->hash && CENSUS_mapkey0_idxfn::equals(se5067, *e1679)) {
              long census_population = e1679->CENSUS_POPULATION;
              long census_white = e1679->CENSUS_WHITE;
              long census_asian = e1679->CENSUS_ASIAN;
              long census_pacific = e1679->CENSUS_PACIFIC;
              long census_blackafrican = e1679->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1679->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1679->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1679->CENSUS_HOUSEUNITS;
              long census_families = e1679->CENSUS_FAMILIES;
              long census_households = e1679->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1679->CENSUS_HUSBWIFE;
              long census_males = e1679->CENSUS_MALES;
              long census_females = e1679->CENSUS_FEMALES;
              long census_householdschildren = e1679->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1679->CENSUS_HISPANIC;
              long v1679 = e1679->__av;
              __SQL_SUM_AGGREGATE_629INVENTORY1_P_3.addOrDelOnZero(se5066.modify(inventory_locn), (v1678 * (v1679 * (census_population * census_houseunits))));
            } while ((n1679 = n1679->nxt));
          }
          e1678 = e1678->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_630INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1680 = LOCATION.head;
        while (e1680) {
          long inventory_locn = e1680->LOCATION_LOCN;
          long location_zip = e1680->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1680->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1680->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1680->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1680->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1680->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1680->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1680->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1680->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1680->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1680->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1680->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1680->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1680->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1680 = e1680->__av;
          { //slice
            const HASH_RES_t h354 = CENSUS_mapkey0_idxfn::hash(se5069.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1681 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1681 = &(i1681->buckets_[h354 % i1681->size_]);
            CENSUS_entry* e1681;
            do if ((e1681 = n1681->obj) && h354 == n1681->hash && CENSUS_mapkey0_idxfn::equals(se5069, *e1681)) {
              long census_population = e1681->CENSUS_POPULATION;
              long census_white = e1681->CENSUS_WHITE;
              long census_asian = e1681->CENSUS_ASIAN;
              long census_pacific = e1681->CENSUS_PACIFIC;
              long census_blackafrican = e1681->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1681->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1681->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1681->CENSUS_HOUSEUNITS;
              long census_families = e1681->CENSUS_FAMILIES;
              long census_households = e1681->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1681->CENSUS_HUSBWIFE;
              long census_males = e1681->CENSUS_MALES;
              long census_females = e1681->CENSUS_FEMALES;
              long census_householdschildren = e1681->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1681->CENSUS_HISPANIC;
              long v1681 = e1681->__av;
              __SQL_SUM_AGGREGATE_630INVENTORY1_P_3.addOrDelOnZero(se5068.modify(inventory_locn), (v1680 * (v1681 * (census_population * census_families))));
            } while ((n1681 = n1681->nxt));
          }
          e1680 = e1680->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_631INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1682 = LOCATION.head;
        while (e1682) {
          long inventory_locn = e1682->LOCATION_LOCN;
          long location_zip = e1682->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1682->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1682->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1682->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1682->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1682->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1682->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1682->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1682->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1682->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1682->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1682->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1682->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1682->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1682 = e1682->__av;
          { //slice
            const HASH_RES_t h355 = CENSUS_mapkey0_idxfn::hash(se5071.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1683 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1683 = &(i1683->buckets_[h355 % i1683->size_]);
            CENSUS_entry* e1683;
            do if ((e1683 = n1683->obj) && h355 == n1683->hash && CENSUS_mapkey0_idxfn::equals(se5071, *e1683)) {
              long census_population = e1683->CENSUS_POPULATION;
              long census_white = e1683->CENSUS_WHITE;
              long census_asian = e1683->CENSUS_ASIAN;
              long census_pacific = e1683->CENSUS_PACIFIC;
              long census_blackafrican = e1683->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1683->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1683->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1683->CENSUS_HOUSEUNITS;
              long census_families = e1683->CENSUS_FAMILIES;
              long census_households = e1683->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1683->CENSUS_HUSBWIFE;
              long census_males = e1683->CENSUS_MALES;
              long census_females = e1683->CENSUS_FEMALES;
              long census_householdschildren = e1683->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1683->CENSUS_HISPANIC;
              long v1683 = e1683->__av;
              __SQL_SUM_AGGREGATE_631INVENTORY1_P_3.addOrDelOnZero(se5070.modify(inventory_locn), (v1682 * (v1683 * (census_population * census_households))));
            } while ((n1683 = n1683->nxt));
          }
          e1682 = e1682->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_632INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1684 = LOCATION.head;
        while (e1684) {
          long inventory_locn = e1684->LOCATION_LOCN;
          long location_zip = e1684->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1684->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1684->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1684->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1684->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1684->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1684->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1684->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1684->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1684->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1684->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1684->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1684->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1684->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1684 = e1684->__av;
          { //slice
            const HASH_RES_t h356 = CENSUS_mapkey0_idxfn::hash(se5073.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1685 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1685 = &(i1685->buckets_[h356 % i1685->size_]);
            CENSUS_entry* e1685;
            do if ((e1685 = n1685->obj) && h356 == n1685->hash && CENSUS_mapkey0_idxfn::equals(se5073, *e1685)) {
              long census_population = e1685->CENSUS_POPULATION;
              long census_white = e1685->CENSUS_WHITE;
              long census_asian = e1685->CENSUS_ASIAN;
              long census_pacific = e1685->CENSUS_PACIFIC;
              long census_blackafrican = e1685->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1685->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1685->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1685->CENSUS_HOUSEUNITS;
              long census_families = e1685->CENSUS_FAMILIES;
              long census_households = e1685->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1685->CENSUS_HUSBWIFE;
              long census_males = e1685->CENSUS_MALES;
              long census_females = e1685->CENSUS_FEMALES;
              long census_householdschildren = e1685->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1685->CENSUS_HISPANIC;
              long v1685 = e1685->__av;
              __SQL_SUM_AGGREGATE_632INVENTORY1_P_3.addOrDelOnZero(se5072.modify(inventory_locn), (v1684 * (v1685 * (census_population * census_husbwife))));
            } while ((n1685 = n1685->nxt));
          }
          e1684 = e1684->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_633INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1686 = LOCATION.head;
        while (e1686) {
          long inventory_locn = e1686->LOCATION_LOCN;
          long location_zip = e1686->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1686->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1686->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1686->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1686->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1686->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1686->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1686->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1686->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1686->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1686->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1686->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1686->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1686->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1686 = e1686->__av;
          { //slice
            const HASH_RES_t h357 = CENSUS_mapkey0_idxfn::hash(se5075.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1687 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1687 = &(i1687->buckets_[h357 % i1687->size_]);
            CENSUS_entry* e1687;
            do if ((e1687 = n1687->obj) && h357 == n1687->hash && CENSUS_mapkey0_idxfn::equals(se5075, *e1687)) {
              long census_population = e1687->CENSUS_POPULATION;
              long census_white = e1687->CENSUS_WHITE;
              long census_asian = e1687->CENSUS_ASIAN;
              long census_pacific = e1687->CENSUS_PACIFIC;
              long census_blackafrican = e1687->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1687->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1687->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1687->CENSUS_HOUSEUNITS;
              long census_families = e1687->CENSUS_FAMILIES;
              long census_households = e1687->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1687->CENSUS_HUSBWIFE;
              long census_males = e1687->CENSUS_MALES;
              long census_females = e1687->CENSUS_FEMALES;
              long census_householdschildren = e1687->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1687->CENSUS_HISPANIC;
              long v1687 = e1687->__av;
              __SQL_SUM_AGGREGATE_633INVENTORY1_P_3.addOrDelOnZero(se5074.modify(inventory_locn), (v1686 * (v1687 * (census_population * census_males))));
            } while ((n1687 = n1687->nxt));
          }
          e1686 = e1686->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_634INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1688 = LOCATION.head;
        while (e1688) {
          long inventory_locn = e1688->LOCATION_LOCN;
          long location_zip = e1688->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1688->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1688->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1688->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1688->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1688->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1688->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1688->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1688->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1688->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1688->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1688->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1688->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1688->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1688 = e1688->__av;
          { //slice
            const HASH_RES_t h358 = CENSUS_mapkey0_idxfn::hash(se5077.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1689 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1689 = &(i1689->buckets_[h358 % i1689->size_]);
            CENSUS_entry* e1689;
            do if ((e1689 = n1689->obj) && h358 == n1689->hash && CENSUS_mapkey0_idxfn::equals(se5077, *e1689)) {
              long census_population = e1689->CENSUS_POPULATION;
              long census_white = e1689->CENSUS_WHITE;
              long census_asian = e1689->CENSUS_ASIAN;
              long census_pacific = e1689->CENSUS_PACIFIC;
              long census_blackafrican = e1689->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1689->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1689->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1689->CENSUS_HOUSEUNITS;
              long census_families = e1689->CENSUS_FAMILIES;
              long census_households = e1689->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1689->CENSUS_HUSBWIFE;
              long census_males = e1689->CENSUS_MALES;
              long census_females = e1689->CENSUS_FEMALES;
              long census_householdschildren = e1689->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1689->CENSUS_HISPANIC;
              long v1689 = e1689->__av;
              __SQL_SUM_AGGREGATE_634INVENTORY1_P_3.addOrDelOnZero(se5076.modify(inventory_locn), (v1688 * (v1689 * (census_population * census_females))));
            } while ((n1689 = n1689->nxt));
          }
          e1688 = e1688->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_635INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1690 = LOCATION.head;
        while (e1690) {
          long inventory_locn = e1690->LOCATION_LOCN;
          long location_zip = e1690->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1690->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1690->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1690->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1690->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1690->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1690->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1690->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1690->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1690->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1690->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1690->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1690->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1690->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1690 = e1690->__av;
          { //slice
            const HASH_RES_t h359 = CENSUS_mapkey0_idxfn::hash(se5079.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1691 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1691 = &(i1691->buckets_[h359 % i1691->size_]);
            CENSUS_entry* e1691;
            do if ((e1691 = n1691->obj) && h359 == n1691->hash && CENSUS_mapkey0_idxfn::equals(se5079, *e1691)) {
              long census_population = e1691->CENSUS_POPULATION;
              long census_white = e1691->CENSUS_WHITE;
              long census_asian = e1691->CENSUS_ASIAN;
              long census_pacific = e1691->CENSUS_PACIFIC;
              long census_blackafrican = e1691->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1691->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1691->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1691->CENSUS_HOUSEUNITS;
              long census_families = e1691->CENSUS_FAMILIES;
              long census_households = e1691->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1691->CENSUS_HUSBWIFE;
              long census_males = e1691->CENSUS_MALES;
              long census_females = e1691->CENSUS_FEMALES;
              long census_householdschildren = e1691->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1691->CENSUS_HISPANIC;
              long v1691 = e1691->__av;
              __SQL_SUM_AGGREGATE_635INVENTORY1_P_3.addOrDelOnZero(se5078.modify(inventory_locn), (v1690 * (v1691 * (census_population * census_householdschildren))));
            } while ((n1691 = n1691->nxt));
          }
          e1690 = e1690->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_636INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1692 = LOCATION.head;
        while (e1692) {
          long inventory_locn = e1692->LOCATION_LOCN;
          long location_zip = e1692->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1692->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1692->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1692->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1692->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1692->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1692->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1692->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1692->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1692->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1692->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1692->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1692->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1692->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1692 = e1692->__av;
          { //slice
            const HASH_RES_t h360 = CENSUS_mapkey0_idxfn::hash(se5081.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1693 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1693 = &(i1693->buckets_[h360 % i1693->size_]);
            CENSUS_entry* e1693;
            do if ((e1693 = n1693->obj) && h360 == n1693->hash && CENSUS_mapkey0_idxfn::equals(se5081, *e1693)) {
              long census_population = e1693->CENSUS_POPULATION;
              long census_white = e1693->CENSUS_WHITE;
              long census_asian = e1693->CENSUS_ASIAN;
              long census_pacific = e1693->CENSUS_PACIFIC;
              long census_blackafrican = e1693->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1693->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1693->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1693->CENSUS_HOUSEUNITS;
              long census_families = e1693->CENSUS_FAMILIES;
              long census_households = e1693->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1693->CENSUS_HUSBWIFE;
              long census_males = e1693->CENSUS_MALES;
              long census_females = e1693->CENSUS_FEMALES;
              long census_householdschildren = e1693->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1693->CENSUS_HISPANIC;
              long v1693 = e1693->__av;
              __SQL_SUM_AGGREGATE_636INVENTORY1_P_3.addOrDelOnZero(se5080.modify(inventory_locn), (v1692 * (v1693 * (census_population * census_hispanic))));
            } while ((n1693 = n1693->nxt));
          }
          e1692 = e1692->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_640 = 0.0;
      __SQL_SUM_AGGREGATE_645 = 0.0;
      __SQL_SUM_AGGREGATE_647INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1694 = LOCATION.head;
        while (e1694) {
          long inventory_locn = e1694->LOCATION_LOCN;
          long location_zip = e1694->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1694->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1694->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1694->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1694->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1694->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1694->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1694->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1694->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1694->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1694->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1694->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1694->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1694->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1694 = e1694->__av;
          { //slice
            const HASH_RES_t h361 = CENSUS_mapkey0_idxfn::hash(se5085.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1695 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1695 = &(i1695->buckets_[h361 % i1695->size_]);
            CENSUS_entry* e1695;
            do if ((e1695 = n1695->obj) && h361 == n1695->hash && CENSUS_mapkey0_idxfn::equals(se5085, *e1695)) {
              long census_population = e1695->CENSUS_POPULATION;
              long census_white = e1695->CENSUS_WHITE;
              long census_asian = e1695->CENSUS_ASIAN;
              long census_pacific = e1695->CENSUS_PACIFIC;
              long census_blackafrican = e1695->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1695->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1695->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1695->CENSUS_HOUSEUNITS;
              long census_families = e1695->CENSUS_FAMILIES;
              long census_households = e1695->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1695->CENSUS_HUSBWIFE;
              long census_males = e1695->CENSUS_MALES;
              long census_females = e1695->CENSUS_FEMALES;
              long census_householdschildren = e1695->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1695->CENSUS_HISPANIC;
              long v1695 = e1695->__av;
              __SQL_SUM_AGGREGATE_647INVENTORY1_P_3.addOrDelOnZero(se5084.modify(inventory_locn), (v1694 * (v1695 * (census_white * census_white))));
            } while ((n1695 = n1695->nxt));
          }
          e1694 = e1694->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_648INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1696 = LOCATION.head;
        while (e1696) {
          long inventory_locn = e1696->LOCATION_LOCN;
          long location_zip = e1696->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1696->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1696->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1696->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1696->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1696->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1696->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1696->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1696->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1696->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1696->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1696->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1696->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1696->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1696 = e1696->__av;
          { //slice
            const HASH_RES_t h362 = CENSUS_mapkey0_idxfn::hash(se5087.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1697 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1697 = &(i1697->buckets_[h362 % i1697->size_]);
            CENSUS_entry* e1697;
            do if ((e1697 = n1697->obj) && h362 == n1697->hash && CENSUS_mapkey0_idxfn::equals(se5087, *e1697)) {
              long census_population = e1697->CENSUS_POPULATION;
              long census_white = e1697->CENSUS_WHITE;
              long census_asian = e1697->CENSUS_ASIAN;
              long census_pacific = e1697->CENSUS_PACIFIC;
              long census_blackafrican = e1697->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1697->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1697->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1697->CENSUS_HOUSEUNITS;
              long census_families = e1697->CENSUS_FAMILIES;
              long census_households = e1697->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1697->CENSUS_HUSBWIFE;
              long census_males = e1697->CENSUS_MALES;
              long census_females = e1697->CENSUS_FEMALES;
              long census_householdschildren = e1697->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1697->CENSUS_HISPANIC;
              long v1697 = e1697->__av;
              __SQL_SUM_AGGREGATE_648INVENTORY1_P_3.addOrDelOnZero(se5086.modify(inventory_locn), (v1696 * (v1697 * (census_white * census_asian))));
            } while ((n1697 = n1697->nxt));
          }
          e1696 = e1696->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_649INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1698 = LOCATION.head;
        while (e1698) {
          long inventory_locn = e1698->LOCATION_LOCN;
          long location_zip = e1698->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1698->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1698->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1698->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1698->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1698->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1698->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1698->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1698->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1698->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1698->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1698->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1698->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1698->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1698 = e1698->__av;
          { //slice
            const HASH_RES_t h363 = CENSUS_mapkey0_idxfn::hash(se5089.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1699 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1699 = &(i1699->buckets_[h363 % i1699->size_]);
            CENSUS_entry* e1699;
            do if ((e1699 = n1699->obj) && h363 == n1699->hash && CENSUS_mapkey0_idxfn::equals(se5089, *e1699)) {
              long census_population = e1699->CENSUS_POPULATION;
              long census_white = e1699->CENSUS_WHITE;
              long census_asian = e1699->CENSUS_ASIAN;
              long census_pacific = e1699->CENSUS_PACIFIC;
              long census_blackafrican = e1699->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1699->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1699->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1699->CENSUS_HOUSEUNITS;
              long census_families = e1699->CENSUS_FAMILIES;
              long census_households = e1699->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1699->CENSUS_HUSBWIFE;
              long census_males = e1699->CENSUS_MALES;
              long census_females = e1699->CENSUS_FEMALES;
              long census_householdschildren = e1699->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1699->CENSUS_HISPANIC;
              long v1699 = e1699->__av;
              __SQL_SUM_AGGREGATE_649INVENTORY1_P_3.addOrDelOnZero(se5088.modify(inventory_locn), (v1698 * (v1699 * (census_white * census_pacific))));
            } while ((n1699 = n1699->nxt));
          }
          e1698 = e1698->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_650INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1700 = LOCATION.head;
        while (e1700) {
          long inventory_locn = e1700->LOCATION_LOCN;
          long location_zip = e1700->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1700->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1700->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1700->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1700->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1700->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1700->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1700->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1700->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1700->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1700->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1700->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1700->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1700->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1700 = e1700->__av;
          { //slice
            const HASH_RES_t h364 = CENSUS_mapkey0_idxfn::hash(se5091.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1701 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1701 = &(i1701->buckets_[h364 % i1701->size_]);
            CENSUS_entry* e1701;
            do if ((e1701 = n1701->obj) && h364 == n1701->hash && CENSUS_mapkey0_idxfn::equals(se5091, *e1701)) {
              long census_population = e1701->CENSUS_POPULATION;
              long census_white = e1701->CENSUS_WHITE;
              long census_asian = e1701->CENSUS_ASIAN;
              long census_pacific = e1701->CENSUS_PACIFIC;
              long census_blackafrican = e1701->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1701->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1701->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1701->CENSUS_HOUSEUNITS;
              long census_families = e1701->CENSUS_FAMILIES;
              long census_households = e1701->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1701->CENSUS_HUSBWIFE;
              long census_males = e1701->CENSUS_MALES;
              long census_females = e1701->CENSUS_FEMALES;
              long census_householdschildren = e1701->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1701->CENSUS_HISPANIC;
              long v1701 = e1701->__av;
              __SQL_SUM_AGGREGATE_650INVENTORY1_P_3.addOrDelOnZero(se5090.modify(inventory_locn), (v1700 * (v1701 * (census_white * census_blackafrican))));
            } while ((n1701 = n1701->nxt));
          }
          e1700 = e1700->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_651 = 0.0;
      __SQL_SUM_AGGREGATE_651INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1702 = LOCATION.head;
        while (e1702) {
          long inventory_locn = e1702->LOCATION_LOCN;
          long location_zip = e1702->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1702->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1702->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1702->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1702->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1702->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1702->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1702->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1702->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1702->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1702->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1702->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1702->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1702->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1702 = e1702->__av;
          { //slice
            const HASH_RES_t h365 = CENSUS_mapkey0_idxfn::hash(se5094.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1703 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1703 = &(i1703->buckets_[h365 % i1703->size_]);
            CENSUS_entry* e1703;
            do if ((e1703 = n1703->obj) && h365 == n1703->hash && CENSUS_mapkey0_idxfn::equals(se5094, *e1703)) {
              long census_population = e1703->CENSUS_POPULATION;
              long census_white = e1703->CENSUS_WHITE;
              long census_asian = e1703->CENSUS_ASIAN;
              long census_pacific = e1703->CENSUS_PACIFIC;
              long census_blackafrican = e1703->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1703->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1703->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1703->CENSUS_HOUSEUNITS;
              long census_families = e1703->CENSUS_FAMILIES;
              long census_households = e1703->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1703->CENSUS_HUSBWIFE;
              long census_males = e1703->CENSUS_MALES;
              long census_females = e1703->CENSUS_FEMALES;
              long census_householdschildren = e1703->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1703->CENSUS_HISPANIC;
              long v1703 = e1703->__av;
              __SQL_SUM_AGGREGATE_651INVENTORY1_P_3.addOrDelOnZero(se5093.modify(inventory_locn), (v1702 * (v1703 * (census_white * census_medianage))));
            } while ((n1703 = n1703->nxt));
          }
          e1702 = e1702->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_652INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1704 = LOCATION.head;
        while (e1704) {
          long inventory_locn = e1704->LOCATION_LOCN;
          long location_zip = e1704->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1704->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1704->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1704->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1704->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1704->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1704->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1704->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1704->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1704->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1704->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1704->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1704->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1704->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1704 = e1704->__av;
          { //slice
            const HASH_RES_t h366 = CENSUS_mapkey0_idxfn::hash(se5096.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1705 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1705 = &(i1705->buckets_[h366 % i1705->size_]);
            CENSUS_entry* e1705;
            do if ((e1705 = n1705->obj) && h366 == n1705->hash && CENSUS_mapkey0_idxfn::equals(se5096, *e1705)) {
              long census_population = e1705->CENSUS_POPULATION;
              long census_white = e1705->CENSUS_WHITE;
              long census_asian = e1705->CENSUS_ASIAN;
              long census_pacific = e1705->CENSUS_PACIFIC;
              long census_blackafrican = e1705->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1705->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1705->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1705->CENSUS_HOUSEUNITS;
              long census_families = e1705->CENSUS_FAMILIES;
              long census_households = e1705->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1705->CENSUS_HUSBWIFE;
              long census_males = e1705->CENSUS_MALES;
              long census_females = e1705->CENSUS_FEMALES;
              long census_householdschildren = e1705->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1705->CENSUS_HISPANIC;
              long v1705 = e1705->__av;
              __SQL_SUM_AGGREGATE_652INVENTORY1_P_3.addOrDelOnZero(se5095.modify(inventory_locn), (v1704 * (v1705 * (census_white * census_occupiedhouseunits))));
            } while ((n1705 = n1705->nxt));
          }
          e1704 = e1704->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_653INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1706 = LOCATION.head;
        while (e1706) {
          long inventory_locn = e1706->LOCATION_LOCN;
          long location_zip = e1706->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1706->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1706->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1706->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1706->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1706->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1706->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1706->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1706->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1706->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1706->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1706->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1706->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1706->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1706 = e1706->__av;
          { //slice
            const HASH_RES_t h367 = CENSUS_mapkey0_idxfn::hash(se5098.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1707 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1707 = &(i1707->buckets_[h367 % i1707->size_]);
            CENSUS_entry* e1707;
            do if ((e1707 = n1707->obj) && h367 == n1707->hash && CENSUS_mapkey0_idxfn::equals(se5098, *e1707)) {
              long census_population = e1707->CENSUS_POPULATION;
              long census_white = e1707->CENSUS_WHITE;
              long census_asian = e1707->CENSUS_ASIAN;
              long census_pacific = e1707->CENSUS_PACIFIC;
              long census_blackafrican = e1707->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1707->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1707->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1707->CENSUS_HOUSEUNITS;
              long census_families = e1707->CENSUS_FAMILIES;
              long census_households = e1707->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1707->CENSUS_HUSBWIFE;
              long census_males = e1707->CENSUS_MALES;
              long census_females = e1707->CENSUS_FEMALES;
              long census_householdschildren = e1707->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1707->CENSUS_HISPANIC;
              long v1707 = e1707->__av;
              __SQL_SUM_AGGREGATE_653INVENTORY1_P_3.addOrDelOnZero(se5097.modify(inventory_locn), (v1706 * (v1707 * (census_white * census_houseunits))));
            } while ((n1707 = n1707->nxt));
          }
          e1706 = e1706->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_654INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1708 = LOCATION.head;
        while (e1708) {
          long inventory_locn = e1708->LOCATION_LOCN;
          long location_zip = e1708->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1708->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1708->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1708->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1708->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1708->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1708->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1708->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1708->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1708->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1708->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1708->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1708->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1708->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1708 = e1708->__av;
          { //slice
            const HASH_RES_t h368 = CENSUS_mapkey0_idxfn::hash(se5100.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1709 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1709 = &(i1709->buckets_[h368 % i1709->size_]);
            CENSUS_entry* e1709;
            do if ((e1709 = n1709->obj) && h368 == n1709->hash && CENSUS_mapkey0_idxfn::equals(se5100, *e1709)) {
              long census_population = e1709->CENSUS_POPULATION;
              long census_white = e1709->CENSUS_WHITE;
              long census_asian = e1709->CENSUS_ASIAN;
              long census_pacific = e1709->CENSUS_PACIFIC;
              long census_blackafrican = e1709->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1709->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1709->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1709->CENSUS_HOUSEUNITS;
              long census_families = e1709->CENSUS_FAMILIES;
              long census_households = e1709->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1709->CENSUS_HUSBWIFE;
              long census_males = e1709->CENSUS_MALES;
              long census_females = e1709->CENSUS_FEMALES;
              long census_householdschildren = e1709->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1709->CENSUS_HISPANIC;
              long v1709 = e1709->__av;
              __SQL_SUM_AGGREGATE_654INVENTORY1_P_3.addOrDelOnZero(se5099.modify(inventory_locn), (v1708 * (v1709 * (census_white * census_families))));
            } while ((n1709 = n1709->nxt));
          }
          e1708 = e1708->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_655INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1710 = LOCATION.head;
        while (e1710) {
          long inventory_locn = e1710->LOCATION_LOCN;
          long location_zip = e1710->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1710->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1710->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1710->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1710->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1710->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1710->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1710->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1710->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1710->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1710->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1710->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1710->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1710->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1710 = e1710->__av;
          { //slice
            const HASH_RES_t h369 = CENSUS_mapkey0_idxfn::hash(se5102.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1711 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1711 = &(i1711->buckets_[h369 % i1711->size_]);
            CENSUS_entry* e1711;
            do if ((e1711 = n1711->obj) && h369 == n1711->hash && CENSUS_mapkey0_idxfn::equals(se5102, *e1711)) {
              long census_population = e1711->CENSUS_POPULATION;
              long census_white = e1711->CENSUS_WHITE;
              long census_asian = e1711->CENSUS_ASIAN;
              long census_pacific = e1711->CENSUS_PACIFIC;
              long census_blackafrican = e1711->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1711->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1711->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1711->CENSUS_HOUSEUNITS;
              long census_families = e1711->CENSUS_FAMILIES;
              long census_households = e1711->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1711->CENSUS_HUSBWIFE;
              long census_males = e1711->CENSUS_MALES;
              long census_females = e1711->CENSUS_FEMALES;
              long census_householdschildren = e1711->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1711->CENSUS_HISPANIC;
              long v1711 = e1711->__av;
              __SQL_SUM_AGGREGATE_655INVENTORY1_P_3.addOrDelOnZero(se5101.modify(inventory_locn), (v1710 * (v1711 * (census_white * census_households))));
            } while ((n1711 = n1711->nxt));
          }
          e1710 = e1710->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_656INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1712 = LOCATION.head;
        while (e1712) {
          long inventory_locn = e1712->LOCATION_LOCN;
          long location_zip = e1712->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1712->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1712->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1712->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1712->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1712->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1712->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1712->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1712->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1712->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1712->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1712->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1712->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1712->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1712 = e1712->__av;
          { //slice
            const HASH_RES_t h370 = CENSUS_mapkey0_idxfn::hash(se5104.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1713 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1713 = &(i1713->buckets_[h370 % i1713->size_]);
            CENSUS_entry* e1713;
            do if ((e1713 = n1713->obj) && h370 == n1713->hash && CENSUS_mapkey0_idxfn::equals(se5104, *e1713)) {
              long census_population = e1713->CENSUS_POPULATION;
              long census_white = e1713->CENSUS_WHITE;
              long census_asian = e1713->CENSUS_ASIAN;
              long census_pacific = e1713->CENSUS_PACIFIC;
              long census_blackafrican = e1713->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1713->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1713->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1713->CENSUS_HOUSEUNITS;
              long census_families = e1713->CENSUS_FAMILIES;
              long census_households = e1713->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1713->CENSUS_HUSBWIFE;
              long census_males = e1713->CENSUS_MALES;
              long census_females = e1713->CENSUS_FEMALES;
              long census_householdschildren = e1713->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1713->CENSUS_HISPANIC;
              long v1713 = e1713->__av;
              __SQL_SUM_AGGREGATE_656INVENTORY1_P_3.addOrDelOnZero(se5103.modify(inventory_locn), (v1712 * (v1713 * (census_white * census_husbwife))));
            } while ((n1713 = n1713->nxt));
          }
          e1712 = e1712->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_657INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1714 = LOCATION.head;
        while (e1714) {
          long inventory_locn = e1714->LOCATION_LOCN;
          long location_zip = e1714->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1714->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1714->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1714->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1714->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1714->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1714->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1714->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1714->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1714->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1714->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1714->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1714->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1714->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1714 = e1714->__av;
          { //slice
            const HASH_RES_t h371 = CENSUS_mapkey0_idxfn::hash(se5106.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1715 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1715 = &(i1715->buckets_[h371 % i1715->size_]);
            CENSUS_entry* e1715;
            do if ((e1715 = n1715->obj) && h371 == n1715->hash && CENSUS_mapkey0_idxfn::equals(se5106, *e1715)) {
              long census_population = e1715->CENSUS_POPULATION;
              long census_white = e1715->CENSUS_WHITE;
              long census_asian = e1715->CENSUS_ASIAN;
              long census_pacific = e1715->CENSUS_PACIFIC;
              long census_blackafrican = e1715->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1715->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1715->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1715->CENSUS_HOUSEUNITS;
              long census_families = e1715->CENSUS_FAMILIES;
              long census_households = e1715->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1715->CENSUS_HUSBWIFE;
              long census_males = e1715->CENSUS_MALES;
              long census_females = e1715->CENSUS_FEMALES;
              long census_householdschildren = e1715->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1715->CENSUS_HISPANIC;
              long v1715 = e1715->__av;
              __SQL_SUM_AGGREGATE_657INVENTORY1_P_3.addOrDelOnZero(se5105.modify(inventory_locn), (v1714 * (v1715 * (census_white * census_males))));
            } while ((n1715 = n1715->nxt));
          }
          e1714 = e1714->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_658INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1716 = LOCATION.head;
        while (e1716) {
          long inventory_locn = e1716->LOCATION_LOCN;
          long location_zip = e1716->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1716->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1716->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1716->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1716->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1716->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1716->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1716->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1716->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1716->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1716->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1716->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1716->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1716->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1716 = e1716->__av;
          { //slice
            const HASH_RES_t h372 = CENSUS_mapkey0_idxfn::hash(se5108.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1717 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1717 = &(i1717->buckets_[h372 % i1717->size_]);
            CENSUS_entry* e1717;
            do if ((e1717 = n1717->obj) && h372 == n1717->hash && CENSUS_mapkey0_idxfn::equals(se5108, *e1717)) {
              long census_population = e1717->CENSUS_POPULATION;
              long census_white = e1717->CENSUS_WHITE;
              long census_asian = e1717->CENSUS_ASIAN;
              long census_pacific = e1717->CENSUS_PACIFIC;
              long census_blackafrican = e1717->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1717->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1717->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1717->CENSUS_HOUSEUNITS;
              long census_families = e1717->CENSUS_FAMILIES;
              long census_households = e1717->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1717->CENSUS_HUSBWIFE;
              long census_males = e1717->CENSUS_MALES;
              long census_females = e1717->CENSUS_FEMALES;
              long census_householdschildren = e1717->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1717->CENSUS_HISPANIC;
              long v1717 = e1717->__av;
              __SQL_SUM_AGGREGATE_658INVENTORY1_P_3.addOrDelOnZero(se5107.modify(inventory_locn), (v1716 * (v1717 * (census_white * census_females))));
            } while ((n1717 = n1717->nxt));
          }
          e1716 = e1716->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_659INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1718 = LOCATION.head;
        while (e1718) {
          long inventory_locn = e1718->LOCATION_LOCN;
          long location_zip = e1718->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1718->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1718->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1718->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1718->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1718->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1718->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1718->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1718->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1718->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1718->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1718->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1718->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1718->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1718 = e1718->__av;
          { //slice
            const HASH_RES_t h373 = CENSUS_mapkey0_idxfn::hash(se5110.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1719 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1719 = &(i1719->buckets_[h373 % i1719->size_]);
            CENSUS_entry* e1719;
            do if ((e1719 = n1719->obj) && h373 == n1719->hash && CENSUS_mapkey0_idxfn::equals(se5110, *e1719)) {
              long census_population = e1719->CENSUS_POPULATION;
              long census_white = e1719->CENSUS_WHITE;
              long census_asian = e1719->CENSUS_ASIAN;
              long census_pacific = e1719->CENSUS_PACIFIC;
              long census_blackafrican = e1719->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1719->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1719->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1719->CENSUS_HOUSEUNITS;
              long census_families = e1719->CENSUS_FAMILIES;
              long census_households = e1719->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1719->CENSUS_HUSBWIFE;
              long census_males = e1719->CENSUS_MALES;
              long census_females = e1719->CENSUS_FEMALES;
              long census_householdschildren = e1719->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1719->CENSUS_HISPANIC;
              long v1719 = e1719->__av;
              __SQL_SUM_AGGREGATE_659INVENTORY1_P_3.addOrDelOnZero(se5109.modify(inventory_locn), (v1718 * (v1719 * (census_white * census_householdschildren))));
            } while ((n1719 = n1719->nxt));
          }
          e1718 = e1718->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_660INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1720 = LOCATION.head;
        while (e1720) {
          long inventory_locn = e1720->LOCATION_LOCN;
          long location_zip = e1720->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1720->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1720->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1720->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1720->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1720->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1720->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1720->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1720->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1720->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1720->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1720->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1720->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1720->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1720 = e1720->__av;
          { //slice
            const HASH_RES_t h374 = CENSUS_mapkey0_idxfn::hash(se5112.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1721 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1721 = &(i1721->buckets_[h374 % i1721->size_]);
            CENSUS_entry* e1721;
            do if ((e1721 = n1721->obj) && h374 == n1721->hash && CENSUS_mapkey0_idxfn::equals(se5112, *e1721)) {
              long census_population = e1721->CENSUS_POPULATION;
              long census_white = e1721->CENSUS_WHITE;
              long census_asian = e1721->CENSUS_ASIAN;
              long census_pacific = e1721->CENSUS_PACIFIC;
              long census_blackafrican = e1721->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1721->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1721->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1721->CENSUS_HOUSEUNITS;
              long census_families = e1721->CENSUS_FAMILIES;
              long census_households = e1721->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1721->CENSUS_HUSBWIFE;
              long census_males = e1721->CENSUS_MALES;
              long census_females = e1721->CENSUS_FEMALES;
              long census_householdschildren = e1721->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1721->CENSUS_HISPANIC;
              long v1721 = e1721->__av;
              __SQL_SUM_AGGREGATE_660INVENTORY1_P_3.addOrDelOnZero(se5111.modify(inventory_locn), (v1720 * (v1721 * (census_white * census_hispanic))));
            } while ((n1721 = n1721->nxt));
          }
          e1720 = e1720->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_664 = 0.0;
      __SQL_SUM_AGGREGATE_669 = 0.0;
      __SQL_SUM_AGGREGATE_671INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1722 = LOCATION.head;
        while (e1722) {
          long inventory_locn = e1722->LOCATION_LOCN;
          long location_zip = e1722->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1722->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1722->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1722->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1722->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1722->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1722->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1722->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1722->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1722->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1722->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1722->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1722->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1722->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1722 = e1722->__av;
          { //slice
            const HASH_RES_t h375 = CENSUS_mapkey0_idxfn::hash(se5116.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1723 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1723 = &(i1723->buckets_[h375 % i1723->size_]);
            CENSUS_entry* e1723;
            do if ((e1723 = n1723->obj) && h375 == n1723->hash && CENSUS_mapkey0_idxfn::equals(se5116, *e1723)) {
              long census_population = e1723->CENSUS_POPULATION;
              long census_white = e1723->CENSUS_WHITE;
              long census_asian = e1723->CENSUS_ASIAN;
              long census_pacific = e1723->CENSUS_PACIFIC;
              long census_blackafrican = e1723->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1723->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1723->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1723->CENSUS_HOUSEUNITS;
              long census_families = e1723->CENSUS_FAMILIES;
              long census_households = e1723->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1723->CENSUS_HUSBWIFE;
              long census_males = e1723->CENSUS_MALES;
              long census_females = e1723->CENSUS_FEMALES;
              long census_householdschildren = e1723->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1723->CENSUS_HISPANIC;
              long v1723 = e1723->__av;
              __SQL_SUM_AGGREGATE_671INVENTORY1_P_3.addOrDelOnZero(se5115.modify(inventory_locn), (v1722 * (v1723 * (census_asian * census_asian))));
            } while ((n1723 = n1723->nxt));
          }
          e1722 = e1722->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_672INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1724 = LOCATION.head;
        while (e1724) {
          long inventory_locn = e1724->LOCATION_LOCN;
          long location_zip = e1724->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1724->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1724->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1724->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1724->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1724->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1724->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1724->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1724->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1724->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1724->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1724->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1724->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1724->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1724 = e1724->__av;
          { //slice
            const HASH_RES_t h376 = CENSUS_mapkey0_idxfn::hash(se5118.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1725 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1725 = &(i1725->buckets_[h376 % i1725->size_]);
            CENSUS_entry* e1725;
            do if ((e1725 = n1725->obj) && h376 == n1725->hash && CENSUS_mapkey0_idxfn::equals(se5118, *e1725)) {
              long census_population = e1725->CENSUS_POPULATION;
              long census_white = e1725->CENSUS_WHITE;
              long census_asian = e1725->CENSUS_ASIAN;
              long census_pacific = e1725->CENSUS_PACIFIC;
              long census_blackafrican = e1725->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1725->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1725->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1725->CENSUS_HOUSEUNITS;
              long census_families = e1725->CENSUS_FAMILIES;
              long census_households = e1725->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1725->CENSUS_HUSBWIFE;
              long census_males = e1725->CENSUS_MALES;
              long census_females = e1725->CENSUS_FEMALES;
              long census_householdschildren = e1725->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1725->CENSUS_HISPANIC;
              long v1725 = e1725->__av;
              __SQL_SUM_AGGREGATE_672INVENTORY1_P_3.addOrDelOnZero(se5117.modify(inventory_locn), (v1724 * (v1725 * (census_asian * census_pacific))));
            } while ((n1725 = n1725->nxt));
          }
          e1724 = e1724->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_673INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1726 = LOCATION.head;
        while (e1726) {
          long inventory_locn = e1726->LOCATION_LOCN;
          long location_zip = e1726->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1726->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1726->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1726->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1726->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1726->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1726->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1726->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1726->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1726->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1726->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1726->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1726->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1726->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1726 = e1726->__av;
          { //slice
            const HASH_RES_t h377 = CENSUS_mapkey0_idxfn::hash(se5120.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1727 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1727 = &(i1727->buckets_[h377 % i1727->size_]);
            CENSUS_entry* e1727;
            do if ((e1727 = n1727->obj) && h377 == n1727->hash && CENSUS_mapkey0_idxfn::equals(se5120, *e1727)) {
              long census_population = e1727->CENSUS_POPULATION;
              long census_white = e1727->CENSUS_WHITE;
              long census_asian = e1727->CENSUS_ASIAN;
              long census_pacific = e1727->CENSUS_PACIFIC;
              long census_blackafrican = e1727->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1727->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1727->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1727->CENSUS_HOUSEUNITS;
              long census_families = e1727->CENSUS_FAMILIES;
              long census_households = e1727->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1727->CENSUS_HUSBWIFE;
              long census_males = e1727->CENSUS_MALES;
              long census_females = e1727->CENSUS_FEMALES;
              long census_householdschildren = e1727->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1727->CENSUS_HISPANIC;
              long v1727 = e1727->__av;
              __SQL_SUM_AGGREGATE_673INVENTORY1_P_3.addOrDelOnZero(se5119.modify(inventory_locn), (v1726 * (v1727 * (census_asian * census_blackafrican))));
            } while ((n1727 = n1727->nxt));
          }
          e1726 = e1726->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_674 = 0.0;
      __SQL_SUM_AGGREGATE_674INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1728 = LOCATION.head;
        while (e1728) {
          long inventory_locn = e1728->LOCATION_LOCN;
          long location_zip = e1728->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1728->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1728->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1728->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1728->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1728->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1728->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1728->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1728->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1728->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1728->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1728->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1728->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1728->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1728 = e1728->__av;
          { //slice
            const HASH_RES_t h378 = CENSUS_mapkey0_idxfn::hash(se5123.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1729 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1729 = &(i1729->buckets_[h378 % i1729->size_]);
            CENSUS_entry* e1729;
            do if ((e1729 = n1729->obj) && h378 == n1729->hash && CENSUS_mapkey0_idxfn::equals(se5123, *e1729)) {
              long census_population = e1729->CENSUS_POPULATION;
              long census_white = e1729->CENSUS_WHITE;
              long census_asian = e1729->CENSUS_ASIAN;
              long census_pacific = e1729->CENSUS_PACIFIC;
              long census_blackafrican = e1729->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1729->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1729->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1729->CENSUS_HOUSEUNITS;
              long census_families = e1729->CENSUS_FAMILIES;
              long census_households = e1729->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1729->CENSUS_HUSBWIFE;
              long census_males = e1729->CENSUS_MALES;
              long census_females = e1729->CENSUS_FEMALES;
              long census_householdschildren = e1729->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1729->CENSUS_HISPANIC;
              long v1729 = e1729->__av;
              __SQL_SUM_AGGREGATE_674INVENTORY1_P_3.addOrDelOnZero(se5122.modify(inventory_locn), (v1728 * (v1729 * (census_asian * census_medianage))));
            } while ((n1729 = n1729->nxt));
          }
          e1728 = e1728->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_675INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1730 = LOCATION.head;
        while (e1730) {
          long inventory_locn = e1730->LOCATION_LOCN;
          long location_zip = e1730->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1730->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1730->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1730->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1730->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1730->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1730->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1730->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1730->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1730->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1730->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1730->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1730->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1730->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1730 = e1730->__av;
          { //slice
            const HASH_RES_t h379 = CENSUS_mapkey0_idxfn::hash(se5125.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1731 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1731 = &(i1731->buckets_[h379 % i1731->size_]);
            CENSUS_entry* e1731;
            do if ((e1731 = n1731->obj) && h379 == n1731->hash && CENSUS_mapkey0_idxfn::equals(se5125, *e1731)) {
              long census_population = e1731->CENSUS_POPULATION;
              long census_white = e1731->CENSUS_WHITE;
              long census_asian = e1731->CENSUS_ASIAN;
              long census_pacific = e1731->CENSUS_PACIFIC;
              long census_blackafrican = e1731->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1731->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1731->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1731->CENSUS_HOUSEUNITS;
              long census_families = e1731->CENSUS_FAMILIES;
              long census_households = e1731->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1731->CENSUS_HUSBWIFE;
              long census_males = e1731->CENSUS_MALES;
              long census_females = e1731->CENSUS_FEMALES;
              long census_householdschildren = e1731->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1731->CENSUS_HISPANIC;
              long v1731 = e1731->__av;
              __SQL_SUM_AGGREGATE_675INVENTORY1_P_3.addOrDelOnZero(se5124.modify(inventory_locn), (v1730 * (v1731 * (census_asian * census_occupiedhouseunits))));
            } while ((n1731 = n1731->nxt));
          }
          e1730 = e1730->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_676INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1732 = LOCATION.head;
        while (e1732) {
          long inventory_locn = e1732->LOCATION_LOCN;
          long location_zip = e1732->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1732->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1732->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1732->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1732->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1732->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1732->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1732->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1732->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1732->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1732->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1732->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1732->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1732->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1732 = e1732->__av;
          { //slice
            const HASH_RES_t h380 = CENSUS_mapkey0_idxfn::hash(se5127.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1733 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1733 = &(i1733->buckets_[h380 % i1733->size_]);
            CENSUS_entry* e1733;
            do if ((e1733 = n1733->obj) && h380 == n1733->hash && CENSUS_mapkey0_idxfn::equals(se5127, *e1733)) {
              long census_population = e1733->CENSUS_POPULATION;
              long census_white = e1733->CENSUS_WHITE;
              long census_asian = e1733->CENSUS_ASIAN;
              long census_pacific = e1733->CENSUS_PACIFIC;
              long census_blackafrican = e1733->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1733->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1733->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1733->CENSUS_HOUSEUNITS;
              long census_families = e1733->CENSUS_FAMILIES;
              long census_households = e1733->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1733->CENSUS_HUSBWIFE;
              long census_males = e1733->CENSUS_MALES;
              long census_females = e1733->CENSUS_FEMALES;
              long census_householdschildren = e1733->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1733->CENSUS_HISPANIC;
              long v1733 = e1733->__av;
              __SQL_SUM_AGGREGATE_676INVENTORY1_P_3.addOrDelOnZero(se5126.modify(inventory_locn), (v1732 * (v1733 * (census_asian * census_houseunits))));
            } while ((n1733 = n1733->nxt));
          }
          e1732 = e1732->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_677INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1734 = LOCATION.head;
        while (e1734) {
          long inventory_locn = e1734->LOCATION_LOCN;
          long location_zip = e1734->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1734->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1734->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1734->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1734->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1734->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1734->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1734->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1734->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1734->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1734->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1734->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1734->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1734->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1734 = e1734->__av;
          { //slice
            const HASH_RES_t h381 = CENSUS_mapkey0_idxfn::hash(se5129.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1735 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1735 = &(i1735->buckets_[h381 % i1735->size_]);
            CENSUS_entry* e1735;
            do if ((e1735 = n1735->obj) && h381 == n1735->hash && CENSUS_mapkey0_idxfn::equals(se5129, *e1735)) {
              long census_population = e1735->CENSUS_POPULATION;
              long census_white = e1735->CENSUS_WHITE;
              long census_asian = e1735->CENSUS_ASIAN;
              long census_pacific = e1735->CENSUS_PACIFIC;
              long census_blackafrican = e1735->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1735->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1735->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1735->CENSUS_HOUSEUNITS;
              long census_families = e1735->CENSUS_FAMILIES;
              long census_households = e1735->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1735->CENSUS_HUSBWIFE;
              long census_males = e1735->CENSUS_MALES;
              long census_females = e1735->CENSUS_FEMALES;
              long census_householdschildren = e1735->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1735->CENSUS_HISPANIC;
              long v1735 = e1735->__av;
              __SQL_SUM_AGGREGATE_677INVENTORY1_P_3.addOrDelOnZero(se5128.modify(inventory_locn), (v1734 * (v1735 * (census_asian * census_families))));
            } while ((n1735 = n1735->nxt));
          }
          e1734 = e1734->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_678INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1736 = LOCATION.head;
        while (e1736) {
          long inventory_locn = e1736->LOCATION_LOCN;
          long location_zip = e1736->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1736->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1736->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1736->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1736->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1736->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1736->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1736->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1736->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1736->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1736->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1736->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1736->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1736->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1736 = e1736->__av;
          { //slice
            const HASH_RES_t h382 = CENSUS_mapkey0_idxfn::hash(se5131.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1737 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1737 = &(i1737->buckets_[h382 % i1737->size_]);
            CENSUS_entry* e1737;
            do if ((e1737 = n1737->obj) && h382 == n1737->hash && CENSUS_mapkey0_idxfn::equals(se5131, *e1737)) {
              long census_population = e1737->CENSUS_POPULATION;
              long census_white = e1737->CENSUS_WHITE;
              long census_asian = e1737->CENSUS_ASIAN;
              long census_pacific = e1737->CENSUS_PACIFIC;
              long census_blackafrican = e1737->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1737->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1737->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1737->CENSUS_HOUSEUNITS;
              long census_families = e1737->CENSUS_FAMILIES;
              long census_households = e1737->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1737->CENSUS_HUSBWIFE;
              long census_males = e1737->CENSUS_MALES;
              long census_females = e1737->CENSUS_FEMALES;
              long census_householdschildren = e1737->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1737->CENSUS_HISPANIC;
              long v1737 = e1737->__av;
              __SQL_SUM_AGGREGATE_678INVENTORY1_P_3.addOrDelOnZero(se5130.modify(inventory_locn), (v1736 * (v1737 * (census_asian * census_households))));
            } while ((n1737 = n1737->nxt));
          }
          e1736 = e1736->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_679INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1738 = LOCATION.head;
        while (e1738) {
          long inventory_locn = e1738->LOCATION_LOCN;
          long location_zip = e1738->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1738->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1738->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1738->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1738->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1738->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1738->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1738->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1738->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1738->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1738->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1738->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1738->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1738->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1738 = e1738->__av;
          { //slice
            const HASH_RES_t h383 = CENSUS_mapkey0_idxfn::hash(se5133.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1739 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1739 = &(i1739->buckets_[h383 % i1739->size_]);
            CENSUS_entry* e1739;
            do if ((e1739 = n1739->obj) && h383 == n1739->hash && CENSUS_mapkey0_idxfn::equals(se5133, *e1739)) {
              long census_population = e1739->CENSUS_POPULATION;
              long census_white = e1739->CENSUS_WHITE;
              long census_asian = e1739->CENSUS_ASIAN;
              long census_pacific = e1739->CENSUS_PACIFIC;
              long census_blackafrican = e1739->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1739->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1739->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1739->CENSUS_HOUSEUNITS;
              long census_families = e1739->CENSUS_FAMILIES;
              long census_households = e1739->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1739->CENSUS_HUSBWIFE;
              long census_males = e1739->CENSUS_MALES;
              long census_females = e1739->CENSUS_FEMALES;
              long census_householdschildren = e1739->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1739->CENSUS_HISPANIC;
              long v1739 = e1739->__av;
              __SQL_SUM_AGGREGATE_679INVENTORY1_P_3.addOrDelOnZero(se5132.modify(inventory_locn), (v1738 * (v1739 * (census_asian * census_husbwife))));
            } while ((n1739 = n1739->nxt));
          }
          e1738 = e1738->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_680INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1740 = LOCATION.head;
        while (e1740) {
          long inventory_locn = e1740->LOCATION_LOCN;
          long location_zip = e1740->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1740->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1740->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1740->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1740->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1740->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1740->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1740->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1740->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1740->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1740->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1740->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1740->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1740->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1740 = e1740->__av;
          { //slice
            const HASH_RES_t h384 = CENSUS_mapkey0_idxfn::hash(se5135.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1741 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1741 = &(i1741->buckets_[h384 % i1741->size_]);
            CENSUS_entry* e1741;
            do if ((e1741 = n1741->obj) && h384 == n1741->hash && CENSUS_mapkey0_idxfn::equals(se5135, *e1741)) {
              long census_population = e1741->CENSUS_POPULATION;
              long census_white = e1741->CENSUS_WHITE;
              long census_asian = e1741->CENSUS_ASIAN;
              long census_pacific = e1741->CENSUS_PACIFIC;
              long census_blackafrican = e1741->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1741->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1741->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1741->CENSUS_HOUSEUNITS;
              long census_families = e1741->CENSUS_FAMILIES;
              long census_households = e1741->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1741->CENSUS_HUSBWIFE;
              long census_males = e1741->CENSUS_MALES;
              long census_females = e1741->CENSUS_FEMALES;
              long census_householdschildren = e1741->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1741->CENSUS_HISPANIC;
              long v1741 = e1741->__av;
              __SQL_SUM_AGGREGATE_680INVENTORY1_P_3.addOrDelOnZero(se5134.modify(inventory_locn), (v1740 * (v1741 * (census_asian * census_males))));
            } while ((n1741 = n1741->nxt));
          }
          e1740 = e1740->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_681INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1742 = LOCATION.head;
        while (e1742) {
          long inventory_locn = e1742->LOCATION_LOCN;
          long location_zip = e1742->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1742->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1742->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1742->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1742->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1742->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1742->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1742->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1742->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1742->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1742->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1742->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1742->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1742->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1742 = e1742->__av;
          { //slice
            const HASH_RES_t h385 = CENSUS_mapkey0_idxfn::hash(se5137.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1743 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1743 = &(i1743->buckets_[h385 % i1743->size_]);
            CENSUS_entry* e1743;
            do if ((e1743 = n1743->obj) && h385 == n1743->hash && CENSUS_mapkey0_idxfn::equals(se5137, *e1743)) {
              long census_population = e1743->CENSUS_POPULATION;
              long census_white = e1743->CENSUS_WHITE;
              long census_asian = e1743->CENSUS_ASIAN;
              long census_pacific = e1743->CENSUS_PACIFIC;
              long census_blackafrican = e1743->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1743->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1743->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1743->CENSUS_HOUSEUNITS;
              long census_families = e1743->CENSUS_FAMILIES;
              long census_households = e1743->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1743->CENSUS_HUSBWIFE;
              long census_males = e1743->CENSUS_MALES;
              long census_females = e1743->CENSUS_FEMALES;
              long census_householdschildren = e1743->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1743->CENSUS_HISPANIC;
              long v1743 = e1743->__av;
              __SQL_SUM_AGGREGATE_681INVENTORY1_P_3.addOrDelOnZero(se5136.modify(inventory_locn), (v1742 * (v1743 * (census_asian * census_females))));
            } while ((n1743 = n1743->nxt));
          }
          e1742 = e1742->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_682INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1744 = LOCATION.head;
        while (e1744) {
          long inventory_locn = e1744->LOCATION_LOCN;
          long location_zip = e1744->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1744->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1744->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1744->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1744->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1744->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1744->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1744->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1744->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1744->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1744->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1744->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1744->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1744->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1744 = e1744->__av;
          { //slice
            const HASH_RES_t h386 = CENSUS_mapkey0_idxfn::hash(se5139.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1745 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1745 = &(i1745->buckets_[h386 % i1745->size_]);
            CENSUS_entry* e1745;
            do if ((e1745 = n1745->obj) && h386 == n1745->hash && CENSUS_mapkey0_idxfn::equals(se5139, *e1745)) {
              long census_population = e1745->CENSUS_POPULATION;
              long census_white = e1745->CENSUS_WHITE;
              long census_asian = e1745->CENSUS_ASIAN;
              long census_pacific = e1745->CENSUS_PACIFIC;
              long census_blackafrican = e1745->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1745->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1745->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1745->CENSUS_HOUSEUNITS;
              long census_families = e1745->CENSUS_FAMILIES;
              long census_households = e1745->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1745->CENSUS_HUSBWIFE;
              long census_males = e1745->CENSUS_MALES;
              long census_females = e1745->CENSUS_FEMALES;
              long census_householdschildren = e1745->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1745->CENSUS_HISPANIC;
              long v1745 = e1745->__av;
              __SQL_SUM_AGGREGATE_682INVENTORY1_P_3.addOrDelOnZero(se5138.modify(inventory_locn), (v1744 * (v1745 * (census_asian * census_householdschildren))));
            } while ((n1745 = n1745->nxt));
          }
          e1744 = e1744->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_683INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1746 = LOCATION.head;
        while (e1746) {
          long inventory_locn = e1746->LOCATION_LOCN;
          long location_zip = e1746->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1746->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1746->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1746->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1746->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1746->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1746->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1746->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1746->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1746->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1746->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1746->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1746->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1746->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1746 = e1746->__av;
          { //slice
            const HASH_RES_t h387 = CENSUS_mapkey0_idxfn::hash(se5141.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1747 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1747 = &(i1747->buckets_[h387 % i1747->size_]);
            CENSUS_entry* e1747;
            do if ((e1747 = n1747->obj) && h387 == n1747->hash && CENSUS_mapkey0_idxfn::equals(se5141, *e1747)) {
              long census_population = e1747->CENSUS_POPULATION;
              long census_white = e1747->CENSUS_WHITE;
              long census_asian = e1747->CENSUS_ASIAN;
              long census_pacific = e1747->CENSUS_PACIFIC;
              long census_blackafrican = e1747->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1747->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1747->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1747->CENSUS_HOUSEUNITS;
              long census_families = e1747->CENSUS_FAMILIES;
              long census_households = e1747->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1747->CENSUS_HUSBWIFE;
              long census_males = e1747->CENSUS_MALES;
              long census_females = e1747->CENSUS_FEMALES;
              long census_householdschildren = e1747->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1747->CENSUS_HISPANIC;
              long v1747 = e1747->__av;
              __SQL_SUM_AGGREGATE_683INVENTORY1_P_3.addOrDelOnZero(se5140.modify(inventory_locn), (v1746 * (v1747 * (census_asian * census_hispanic))));
            } while ((n1747 = n1747->nxt));
          }
          e1746 = e1746->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_687 = 0.0;
      __SQL_SUM_AGGREGATE_692 = 0.0;
      __SQL_SUM_AGGREGATE_694INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1748 = LOCATION.head;
        while (e1748) {
          long inventory_locn = e1748->LOCATION_LOCN;
          long location_zip = e1748->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1748->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1748->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1748->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1748->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1748->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1748->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1748->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1748->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1748->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1748->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1748->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1748->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1748->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1748 = e1748->__av;
          { //slice
            const HASH_RES_t h388 = CENSUS_mapkey0_idxfn::hash(se5145.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1749 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1749 = &(i1749->buckets_[h388 % i1749->size_]);
            CENSUS_entry* e1749;
            do if ((e1749 = n1749->obj) && h388 == n1749->hash && CENSUS_mapkey0_idxfn::equals(se5145, *e1749)) {
              long census_population = e1749->CENSUS_POPULATION;
              long census_white = e1749->CENSUS_WHITE;
              long census_asian = e1749->CENSUS_ASIAN;
              long census_pacific = e1749->CENSUS_PACIFIC;
              long census_blackafrican = e1749->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1749->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1749->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1749->CENSUS_HOUSEUNITS;
              long census_families = e1749->CENSUS_FAMILIES;
              long census_households = e1749->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1749->CENSUS_HUSBWIFE;
              long census_males = e1749->CENSUS_MALES;
              long census_females = e1749->CENSUS_FEMALES;
              long census_householdschildren = e1749->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1749->CENSUS_HISPANIC;
              long v1749 = e1749->__av;
              __SQL_SUM_AGGREGATE_694INVENTORY1_P_3.addOrDelOnZero(se5144.modify(inventory_locn), (v1748 * (v1749 * (census_pacific * census_pacific))));
            } while ((n1749 = n1749->nxt));
          }
          e1748 = e1748->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_695INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1750 = LOCATION.head;
        while (e1750) {
          long inventory_locn = e1750->LOCATION_LOCN;
          long location_zip = e1750->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1750->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1750->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1750->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1750->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1750->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1750->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1750->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1750->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1750->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1750->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1750->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1750->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1750->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1750 = e1750->__av;
          { //slice
            const HASH_RES_t h389 = CENSUS_mapkey0_idxfn::hash(se5147.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1751 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1751 = &(i1751->buckets_[h389 % i1751->size_]);
            CENSUS_entry* e1751;
            do if ((e1751 = n1751->obj) && h389 == n1751->hash && CENSUS_mapkey0_idxfn::equals(se5147, *e1751)) {
              long census_population = e1751->CENSUS_POPULATION;
              long census_white = e1751->CENSUS_WHITE;
              long census_asian = e1751->CENSUS_ASIAN;
              long census_pacific = e1751->CENSUS_PACIFIC;
              long census_blackafrican = e1751->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1751->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1751->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1751->CENSUS_HOUSEUNITS;
              long census_families = e1751->CENSUS_FAMILIES;
              long census_households = e1751->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1751->CENSUS_HUSBWIFE;
              long census_males = e1751->CENSUS_MALES;
              long census_females = e1751->CENSUS_FEMALES;
              long census_householdschildren = e1751->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1751->CENSUS_HISPANIC;
              long v1751 = e1751->__av;
              __SQL_SUM_AGGREGATE_695INVENTORY1_P_3.addOrDelOnZero(se5146.modify(inventory_locn), (v1750 * (v1751 * (census_pacific * census_blackafrican))));
            } while ((n1751 = n1751->nxt));
          }
          e1750 = e1750->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_696 = 0.0;
      __SQL_SUM_AGGREGATE_696INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1752 = LOCATION.head;
        while (e1752) {
          long inventory_locn = e1752->LOCATION_LOCN;
          long location_zip = e1752->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1752->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1752->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1752->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1752->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1752->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1752->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1752->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1752->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1752->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1752->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1752->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1752->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1752->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1752 = e1752->__av;
          { //slice
            const HASH_RES_t h390 = CENSUS_mapkey0_idxfn::hash(se5150.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1753 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1753 = &(i1753->buckets_[h390 % i1753->size_]);
            CENSUS_entry* e1753;
            do if ((e1753 = n1753->obj) && h390 == n1753->hash && CENSUS_mapkey0_idxfn::equals(se5150, *e1753)) {
              long census_population = e1753->CENSUS_POPULATION;
              long census_white = e1753->CENSUS_WHITE;
              long census_asian = e1753->CENSUS_ASIAN;
              long census_pacific = e1753->CENSUS_PACIFIC;
              long census_blackafrican = e1753->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1753->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1753->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1753->CENSUS_HOUSEUNITS;
              long census_families = e1753->CENSUS_FAMILIES;
              long census_households = e1753->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1753->CENSUS_HUSBWIFE;
              long census_males = e1753->CENSUS_MALES;
              long census_females = e1753->CENSUS_FEMALES;
              long census_householdschildren = e1753->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1753->CENSUS_HISPANIC;
              long v1753 = e1753->__av;
              __SQL_SUM_AGGREGATE_696INVENTORY1_P_3.addOrDelOnZero(se5149.modify(inventory_locn), (v1752 * (v1753 * (census_pacific * census_medianage))));
            } while ((n1753 = n1753->nxt));
          }
          e1752 = e1752->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_697INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1754 = LOCATION.head;
        while (e1754) {
          long inventory_locn = e1754->LOCATION_LOCN;
          long location_zip = e1754->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1754->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1754->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1754->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1754->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1754->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1754->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1754->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1754->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1754->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1754->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1754->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1754->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1754->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1754 = e1754->__av;
          { //slice
            const HASH_RES_t h391 = CENSUS_mapkey0_idxfn::hash(se5152.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1755 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1755 = &(i1755->buckets_[h391 % i1755->size_]);
            CENSUS_entry* e1755;
            do if ((e1755 = n1755->obj) && h391 == n1755->hash && CENSUS_mapkey0_idxfn::equals(se5152, *e1755)) {
              long census_population = e1755->CENSUS_POPULATION;
              long census_white = e1755->CENSUS_WHITE;
              long census_asian = e1755->CENSUS_ASIAN;
              long census_pacific = e1755->CENSUS_PACIFIC;
              long census_blackafrican = e1755->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1755->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1755->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1755->CENSUS_HOUSEUNITS;
              long census_families = e1755->CENSUS_FAMILIES;
              long census_households = e1755->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1755->CENSUS_HUSBWIFE;
              long census_males = e1755->CENSUS_MALES;
              long census_females = e1755->CENSUS_FEMALES;
              long census_householdschildren = e1755->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1755->CENSUS_HISPANIC;
              long v1755 = e1755->__av;
              __SQL_SUM_AGGREGATE_697INVENTORY1_P_3.addOrDelOnZero(se5151.modify(inventory_locn), (v1754 * (v1755 * (census_pacific * census_occupiedhouseunits))));
            } while ((n1755 = n1755->nxt));
          }
          e1754 = e1754->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_698INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1756 = LOCATION.head;
        while (e1756) {
          long inventory_locn = e1756->LOCATION_LOCN;
          long location_zip = e1756->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1756->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1756->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1756->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1756->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1756->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1756->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1756->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1756->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1756->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1756->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1756->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1756->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1756->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1756 = e1756->__av;
          { //slice
            const HASH_RES_t h392 = CENSUS_mapkey0_idxfn::hash(se5154.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1757 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1757 = &(i1757->buckets_[h392 % i1757->size_]);
            CENSUS_entry* e1757;
            do if ((e1757 = n1757->obj) && h392 == n1757->hash && CENSUS_mapkey0_idxfn::equals(se5154, *e1757)) {
              long census_population = e1757->CENSUS_POPULATION;
              long census_white = e1757->CENSUS_WHITE;
              long census_asian = e1757->CENSUS_ASIAN;
              long census_pacific = e1757->CENSUS_PACIFIC;
              long census_blackafrican = e1757->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1757->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1757->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1757->CENSUS_HOUSEUNITS;
              long census_families = e1757->CENSUS_FAMILIES;
              long census_households = e1757->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1757->CENSUS_HUSBWIFE;
              long census_males = e1757->CENSUS_MALES;
              long census_females = e1757->CENSUS_FEMALES;
              long census_householdschildren = e1757->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1757->CENSUS_HISPANIC;
              long v1757 = e1757->__av;
              __SQL_SUM_AGGREGATE_698INVENTORY1_P_3.addOrDelOnZero(se5153.modify(inventory_locn), (v1756 * (v1757 * (census_pacific * census_houseunits))));
            } while ((n1757 = n1757->nxt));
          }
          e1756 = e1756->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_699INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1758 = LOCATION.head;
        while (e1758) {
          long inventory_locn = e1758->LOCATION_LOCN;
          long location_zip = e1758->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1758->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1758->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1758->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1758->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1758->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1758->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1758->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1758->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1758->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1758->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1758->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1758->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1758->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1758 = e1758->__av;
          { //slice
            const HASH_RES_t h393 = CENSUS_mapkey0_idxfn::hash(se5156.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1759 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1759 = &(i1759->buckets_[h393 % i1759->size_]);
            CENSUS_entry* e1759;
            do if ((e1759 = n1759->obj) && h393 == n1759->hash && CENSUS_mapkey0_idxfn::equals(se5156, *e1759)) {
              long census_population = e1759->CENSUS_POPULATION;
              long census_white = e1759->CENSUS_WHITE;
              long census_asian = e1759->CENSUS_ASIAN;
              long census_pacific = e1759->CENSUS_PACIFIC;
              long census_blackafrican = e1759->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1759->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1759->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1759->CENSUS_HOUSEUNITS;
              long census_families = e1759->CENSUS_FAMILIES;
              long census_households = e1759->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1759->CENSUS_HUSBWIFE;
              long census_males = e1759->CENSUS_MALES;
              long census_females = e1759->CENSUS_FEMALES;
              long census_householdschildren = e1759->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1759->CENSUS_HISPANIC;
              long v1759 = e1759->__av;
              __SQL_SUM_AGGREGATE_699INVENTORY1_P_3.addOrDelOnZero(se5155.modify(inventory_locn), (v1758 * (v1759 * (census_pacific * census_families))));
            } while ((n1759 = n1759->nxt));
          }
          e1758 = e1758->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_700INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1760 = LOCATION.head;
        while (e1760) {
          long inventory_locn = e1760->LOCATION_LOCN;
          long location_zip = e1760->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1760->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1760->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1760->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1760->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1760->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1760->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1760->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1760->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1760->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1760->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1760->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1760->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1760->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1760 = e1760->__av;
          { //slice
            const HASH_RES_t h394 = CENSUS_mapkey0_idxfn::hash(se5158.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1761 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1761 = &(i1761->buckets_[h394 % i1761->size_]);
            CENSUS_entry* e1761;
            do if ((e1761 = n1761->obj) && h394 == n1761->hash && CENSUS_mapkey0_idxfn::equals(se5158, *e1761)) {
              long census_population = e1761->CENSUS_POPULATION;
              long census_white = e1761->CENSUS_WHITE;
              long census_asian = e1761->CENSUS_ASIAN;
              long census_pacific = e1761->CENSUS_PACIFIC;
              long census_blackafrican = e1761->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1761->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1761->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1761->CENSUS_HOUSEUNITS;
              long census_families = e1761->CENSUS_FAMILIES;
              long census_households = e1761->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1761->CENSUS_HUSBWIFE;
              long census_males = e1761->CENSUS_MALES;
              long census_females = e1761->CENSUS_FEMALES;
              long census_householdschildren = e1761->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1761->CENSUS_HISPANIC;
              long v1761 = e1761->__av;
              __SQL_SUM_AGGREGATE_700INVENTORY1_P_3.addOrDelOnZero(se5157.modify(inventory_locn), (v1760 * (v1761 * (census_pacific * census_households))));
            } while ((n1761 = n1761->nxt));
          }
          e1760 = e1760->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_701INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1762 = LOCATION.head;
        while (e1762) {
          long inventory_locn = e1762->LOCATION_LOCN;
          long location_zip = e1762->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1762->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1762->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1762->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1762->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1762->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1762->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1762->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1762->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1762->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1762->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1762->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1762->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1762->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1762 = e1762->__av;
          { //slice
            const HASH_RES_t h395 = CENSUS_mapkey0_idxfn::hash(se5160.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1763 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1763 = &(i1763->buckets_[h395 % i1763->size_]);
            CENSUS_entry* e1763;
            do if ((e1763 = n1763->obj) && h395 == n1763->hash && CENSUS_mapkey0_idxfn::equals(se5160, *e1763)) {
              long census_population = e1763->CENSUS_POPULATION;
              long census_white = e1763->CENSUS_WHITE;
              long census_asian = e1763->CENSUS_ASIAN;
              long census_pacific = e1763->CENSUS_PACIFIC;
              long census_blackafrican = e1763->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1763->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1763->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1763->CENSUS_HOUSEUNITS;
              long census_families = e1763->CENSUS_FAMILIES;
              long census_households = e1763->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1763->CENSUS_HUSBWIFE;
              long census_males = e1763->CENSUS_MALES;
              long census_females = e1763->CENSUS_FEMALES;
              long census_householdschildren = e1763->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1763->CENSUS_HISPANIC;
              long v1763 = e1763->__av;
              __SQL_SUM_AGGREGATE_701INVENTORY1_P_3.addOrDelOnZero(se5159.modify(inventory_locn), (v1762 * (v1763 * (census_pacific * census_husbwife))));
            } while ((n1763 = n1763->nxt));
          }
          e1762 = e1762->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_702INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1764 = LOCATION.head;
        while (e1764) {
          long inventory_locn = e1764->LOCATION_LOCN;
          long location_zip = e1764->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1764->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1764->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1764->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1764->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1764->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1764->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1764->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1764->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1764->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1764->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1764->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1764->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1764->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1764 = e1764->__av;
          { //slice
            const HASH_RES_t h396 = CENSUS_mapkey0_idxfn::hash(se5162.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1765 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1765 = &(i1765->buckets_[h396 % i1765->size_]);
            CENSUS_entry* e1765;
            do if ((e1765 = n1765->obj) && h396 == n1765->hash && CENSUS_mapkey0_idxfn::equals(se5162, *e1765)) {
              long census_population = e1765->CENSUS_POPULATION;
              long census_white = e1765->CENSUS_WHITE;
              long census_asian = e1765->CENSUS_ASIAN;
              long census_pacific = e1765->CENSUS_PACIFIC;
              long census_blackafrican = e1765->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1765->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1765->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1765->CENSUS_HOUSEUNITS;
              long census_families = e1765->CENSUS_FAMILIES;
              long census_households = e1765->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1765->CENSUS_HUSBWIFE;
              long census_males = e1765->CENSUS_MALES;
              long census_females = e1765->CENSUS_FEMALES;
              long census_householdschildren = e1765->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1765->CENSUS_HISPANIC;
              long v1765 = e1765->__av;
              __SQL_SUM_AGGREGATE_702INVENTORY1_P_3.addOrDelOnZero(se5161.modify(inventory_locn), (v1764 * (v1765 * (census_pacific * census_males))));
            } while ((n1765 = n1765->nxt));
          }
          e1764 = e1764->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_703INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1766 = LOCATION.head;
        while (e1766) {
          long inventory_locn = e1766->LOCATION_LOCN;
          long location_zip = e1766->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1766->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1766->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1766->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1766->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1766->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1766->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1766->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1766->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1766->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1766->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1766->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1766->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1766->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1766 = e1766->__av;
          { //slice
            const HASH_RES_t h397 = CENSUS_mapkey0_idxfn::hash(se5164.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1767 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1767 = &(i1767->buckets_[h397 % i1767->size_]);
            CENSUS_entry* e1767;
            do if ((e1767 = n1767->obj) && h397 == n1767->hash && CENSUS_mapkey0_idxfn::equals(se5164, *e1767)) {
              long census_population = e1767->CENSUS_POPULATION;
              long census_white = e1767->CENSUS_WHITE;
              long census_asian = e1767->CENSUS_ASIAN;
              long census_pacific = e1767->CENSUS_PACIFIC;
              long census_blackafrican = e1767->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1767->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1767->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1767->CENSUS_HOUSEUNITS;
              long census_families = e1767->CENSUS_FAMILIES;
              long census_households = e1767->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1767->CENSUS_HUSBWIFE;
              long census_males = e1767->CENSUS_MALES;
              long census_females = e1767->CENSUS_FEMALES;
              long census_householdschildren = e1767->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1767->CENSUS_HISPANIC;
              long v1767 = e1767->__av;
              __SQL_SUM_AGGREGATE_703INVENTORY1_P_3.addOrDelOnZero(se5163.modify(inventory_locn), (v1766 * (v1767 * (census_pacific * census_females))));
            } while ((n1767 = n1767->nxt));
          }
          e1766 = e1766->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_704INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1768 = LOCATION.head;
        while (e1768) {
          long inventory_locn = e1768->LOCATION_LOCN;
          long location_zip = e1768->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1768->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1768->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1768->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1768->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1768->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1768->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1768->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1768->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1768->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1768->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1768->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1768->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1768->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1768 = e1768->__av;
          { //slice
            const HASH_RES_t h398 = CENSUS_mapkey0_idxfn::hash(se5166.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1769 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1769 = &(i1769->buckets_[h398 % i1769->size_]);
            CENSUS_entry* e1769;
            do if ((e1769 = n1769->obj) && h398 == n1769->hash && CENSUS_mapkey0_idxfn::equals(se5166, *e1769)) {
              long census_population = e1769->CENSUS_POPULATION;
              long census_white = e1769->CENSUS_WHITE;
              long census_asian = e1769->CENSUS_ASIAN;
              long census_pacific = e1769->CENSUS_PACIFIC;
              long census_blackafrican = e1769->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1769->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1769->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1769->CENSUS_HOUSEUNITS;
              long census_families = e1769->CENSUS_FAMILIES;
              long census_households = e1769->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1769->CENSUS_HUSBWIFE;
              long census_males = e1769->CENSUS_MALES;
              long census_females = e1769->CENSUS_FEMALES;
              long census_householdschildren = e1769->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1769->CENSUS_HISPANIC;
              long v1769 = e1769->__av;
              __SQL_SUM_AGGREGATE_704INVENTORY1_P_3.addOrDelOnZero(se5165.modify(inventory_locn), (v1768 * (v1769 * (census_pacific * census_householdschildren))));
            } while ((n1769 = n1769->nxt));
          }
          e1768 = e1768->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_705INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1770 = LOCATION.head;
        while (e1770) {
          long inventory_locn = e1770->LOCATION_LOCN;
          long location_zip = e1770->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1770->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1770->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1770->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1770->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1770->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1770->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1770->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1770->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1770->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1770->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1770->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1770->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1770->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1770 = e1770->__av;
          { //slice
            const HASH_RES_t h399 = CENSUS_mapkey0_idxfn::hash(se5168.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1771 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1771 = &(i1771->buckets_[h399 % i1771->size_]);
            CENSUS_entry* e1771;
            do if ((e1771 = n1771->obj) && h399 == n1771->hash && CENSUS_mapkey0_idxfn::equals(se5168, *e1771)) {
              long census_population = e1771->CENSUS_POPULATION;
              long census_white = e1771->CENSUS_WHITE;
              long census_asian = e1771->CENSUS_ASIAN;
              long census_pacific = e1771->CENSUS_PACIFIC;
              long census_blackafrican = e1771->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1771->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1771->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1771->CENSUS_HOUSEUNITS;
              long census_families = e1771->CENSUS_FAMILIES;
              long census_households = e1771->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1771->CENSUS_HUSBWIFE;
              long census_males = e1771->CENSUS_MALES;
              long census_females = e1771->CENSUS_FEMALES;
              long census_householdschildren = e1771->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1771->CENSUS_HISPANIC;
              long v1771 = e1771->__av;
              __SQL_SUM_AGGREGATE_705INVENTORY1_P_3.addOrDelOnZero(se5167.modify(inventory_locn), (v1770 * (v1771 * (census_pacific * census_hispanic))));
            } while ((n1771 = n1771->nxt));
          }
          e1770 = e1770->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_709 = 0.0;
      __SQL_SUM_AGGREGATE_714 = 0.0;
      __SQL_SUM_AGGREGATE_716INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1772 = LOCATION.head;
        while (e1772) {
          long inventory_locn = e1772->LOCATION_LOCN;
          long location_zip = e1772->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1772->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1772->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1772->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1772->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1772->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1772->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1772->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1772->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1772->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1772->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1772->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1772->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1772->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1772 = e1772->__av;
          { //slice
            const HASH_RES_t h400 = CENSUS_mapkey0_idxfn::hash(se5172.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1773 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1773 = &(i1773->buckets_[h400 % i1773->size_]);
            CENSUS_entry* e1773;
            do if ((e1773 = n1773->obj) && h400 == n1773->hash && CENSUS_mapkey0_idxfn::equals(se5172, *e1773)) {
              long census_population = e1773->CENSUS_POPULATION;
              long census_white = e1773->CENSUS_WHITE;
              long census_asian = e1773->CENSUS_ASIAN;
              long census_pacific = e1773->CENSUS_PACIFIC;
              long census_blackafrican = e1773->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1773->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1773->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1773->CENSUS_HOUSEUNITS;
              long census_families = e1773->CENSUS_FAMILIES;
              long census_households = e1773->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1773->CENSUS_HUSBWIFE;
              long census_males = e1773->CENSUS_MALES;
              long census_females = e1773->CENSUS_FEMALES;
              long census_householdschildren = e1773->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1773->CENSUS_HISPANIC;
              long v1773 = e1773->__av;
              __SQL_SUM_AGGREGATE_716INVENTORY1_P_3.addOrDelOnZero(se5171.modify(inventory_locn), (v1772 * (v1773 * (census_blackafrican * census_blackafrican))));
            } while ((n1773 = n1773->nxt));
          }
          e1772 = e1772->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_717 = 0.0;
      __SQL_SUM_AGGREGATE_717INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1774 = LOCATION.head;
        while (e1774) {
          long inventory_locn = e1774->LOCATION_LOCN;
          long location_zip = e1774->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1774->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1774->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1774->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1774->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1774->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1774->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1774->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1774->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1774->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1774->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1774->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1774->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1774->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1774 = e1774->__av;
          { //slice
            const HASH_RES_t h401 = CENSUS_mapkey0_idxfn::hash(se5175.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1775 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1775 = &(i1775->buckets_[h401 % i1775->size_]);
            CENSUS_entry* e1775;
            do if ((e1775 = n1775->obj) && h401 == n1775->hash && CENSUS_mapkey0_idxfn::equals(se5175, *e1775)) {
              long census_population = e1775->CENSUS_POPULATION;
              long census_white = e1775->CENSUS_WHITE;
              long census_asian = e1775->CENSUS_ASIAN;
              long census_pacific = e1775->CENSUS_PACIFIC;
              long census_blackafrican = e1775->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1775->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1775->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1775->CENSUS_HOUSEUNITS;
              long census_families = e1775->CENSUS_FAMILIES;
              long census_households = e1775->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1775->CENSUS_HUSBWIFE;
              long census_males = e1775->CENSUS_MALES;
              long census_females = e1775->CENSUS_FEMALES;
              long census_householdschildren = e1775->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1775->CENSUS_HISPANIC;
              long v1775 = e1775->__av;
              __SQL_SUM_AGGREGATE_717INVENTORY1_P_3.addOrDelOnZero(se5174.modify(inventory_locn), (v1774 * (v1775 * (census_blackafrican * census_medianage))));
            } while ((n1775 = n1775->nxt));
          }
          e1774 = e1774->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_718INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1776 = LOCATION.head;
        while (e1776) {
          long inventory_locn = e1776->LOCATION_LOCN;
          long location_zip = e1776->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1776->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1776->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1776->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1776->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1776->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1776->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1776->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1776->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1776->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1776->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1776->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1776->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1776->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1776 = e1776->__av;
          { //slice
            const HASH_RES_t h402 = CENSUS_mapkey0_idxfn::hash(se5177.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1777 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1777 = &(i1777->buckets_[h402 % i1777->size_]);
            CENSUS_entry* e1777;
            do if ((e1777 = n1777->obj) && h402 == n1777->hash && CENSUS_mapkey0_idxfn::equals(se5177, *e1777)) {
              long census_population = e1777->CENSUS_POPULATION;
              long census_white = e1777->CENSUS_WHITE;
              long census_asian = e1777->CENSUS_ASIAN;
              long census_pacific = e1777->CENSUS_PACIFIC;
              long census_blackafrican = e1777->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1777->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1777->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1777->CENSUS_HOUSEUNITS;
              long census_families = e1777->CENSUS_FAMILIES;
              long census_households = e1777->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1777->CENSUS_HUSBWIFE;
              long census_males = e1777->CENSUS_MALES;
              long census_females = e1777->CENSUS_FEMALES;
              long census_householdschildren = e1777->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1777->CENSUS_HISPANIC;
              long v1777 = e1777->__av;
              __SQL_SUM_AGGREGATE_718INVENTORY1_P_3.addOrDelOnZero(se5176.modify(inventory_locn), (v1776 * (v1777 * (census_blackafrican * census_occupiedhouseunits))));
            } while ((n1777 = n1777->nxt));
          }
          e1776 = e1776->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_719INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1778 = LOCATION.head;
        while (e1778) {
          long inventory_locn = e1778->LOCATION_LOCN;
          long location_zip = e1778->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1778->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1778->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1778->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1778->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1778->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1778->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1778->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1778->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1778->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1778->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1778->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1778->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1778->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1778 = e1778->__av;
          { //slice
            const HASH_RES_t h403 = CENSUS_mapkey0_idxfn::hash(se5179.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1779 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1779 = &(i1779->buckets_[h403 % i1779->size_]);
            CENSUS_entry* e1779;
            do if ((e1779 = n1779->obj) && h403 == n1779->hash && CENSUS_mapkey0_idxfn::equals(se5179, *e1779)) {
              long census_population = e1779->CENSUS_POPULATION;
              long census_white = e1779->CENSUS_WHITE;
              long census_asian = e1779->CENSUS_ASIAN;
              long census_pacific = e1779->CENSUS_PACIFIC;
              long census_blackafrican = e1779->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1779->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1779->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1779->CENSUS_HOUSEUNITS;
              long census_families = e1779->CENSUS_FAMILIES;
              long census_households = e1779->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1779->CENSUS_HUSBWIFE;
              long census_males = e1779->CENSUS_MALES;
              long census_females = e1779->CENSUS_FEMALES;
              long census_householdschildren = e1779->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1779->CENSUS_HISPANIC;
              long v1779 = e1779->__av;
              __SQL_SUM_AGGREGATE_719INVENTORY1_P_3.addOrDelOnZero(se5178.modify(inventory_locn), (v1778 * (v1779 * (census_blackafrican * census_houseunits))));
            } while ((n1779 = n1779->nxt));
          }
          e1778 = e1778->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_720INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1780 = LOCATION.head;
        while (e1780) {
          long inventory_locn = e1780->LOCATION_LOCN;
          long location_zip = e1780->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1780->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1780->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1780->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1780->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1780->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1780->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1780->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1780->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1780->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1780->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1780->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1780->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1780->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1780 = e1780->__av;
          { //slice
            const HASH_RES_t h404 = CENSUS_mapkey0_idxfn::hash(se5181.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1781 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1781 = &(i1781->buckets_[h404 % i1781->size_]);
            CENSUS_entry* e1781;
            do if ((e1781 = n1781->obj) && h404 == n1781->hash && CENSUS_mapkey0_idxfn::equals(se5181, *e1781)) {
              long census_population = e1781->CENSUS_POPULATION;
              long census_white = e1781->CENSUS_WHITE;
              long census_asian = e1781->CENSUS_ASIAN;
              long census_pacific = e1781->CENSUS_PACIFIC;
              long census_blackafrican = e1781->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1781->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1781->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1781->CENSUS_HOUSEUNITS;
              long census_families = e1781->CENSUS_FAMILIES;
              long census_households = e1781->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1781->CENSUS_HUSBWIFE;
              long census_males = e1781->CENSUS_MALES;
              long census_females = e1781->CENSUS_FEMALES;
              long census_householdschildren = e1781->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1781->CENSUS_HISPANIC;
              long v1781 = e1781->__av;
              __SQL_SUM_AGGREGATE_720INVENTORY1_P_3.addOrDelOnZero(se5180.modify(inventory_locn), (v1780 * (v1781 * (census_blackafrican * census_families))));
            } while ((n1781 = n1781->nxt));
          }
          e1780 = e1780->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_721INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1782 = LOCATION.head;
        while (e1782) {
          long inventory_locn = e1782->LOCATION_LOCN;
          long location_zip = e1782->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1782->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1782->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1782->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1782->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1782->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1782->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1782->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1782->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1782->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1782->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1782->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1782->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1782->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1782 = e1782->__av;
          { //slice
            const HASH_RES_t h405 = CENSUS_mapkey0_idxfn::hash(se5183.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1783 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1783 = &(i1783->buckets_[h405 % i1783->size_]);
            CENSUS_entry* e1783;
            do if ((e1783 = n1783->obj) && h405 == n1783->hash && CENSUS_mapkey0_idxfn::equals(se5183, *e1783)) {
              long census_population = e1783->CENSUS_POPULATION;
              long census_white = e1783->CENSUS_WHITE;
              long census_asian = e1783->CENSUS_ASIAN;
              long census_pacific = e1783->CENSUS_PACIFIC;
              long census_blackafrican = e1783->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1783->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1783->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1783->CENSUS_HOUSEUNITS;
              long census_families = e1783->CENSUS_FAMILIES;
              long census_households = e1783->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1783->CENSUS_HUSBWIFE;
              long census_males = e1783->CENSUS_MALES;
              long census_females = e1783->CENSUS_FEMALES;
              long census_householdschildren = e1783->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1783->CENSUS_HISPANIC;
              long v1783 = e1783->__av;
              __SQL_SUM_AGGREGATE_721INVENTORY1_P_3.addOrDelOnZero(se5182.modify(inventory_locn), (v1782 * (v1783 * (census_blackafrican * census_households))));
            } while ((n1783 = n1783->nxt));
          }
          e1782 = e1782->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_722INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1784 = LOCATION.head;
        while (e1784) {
          long inventory_locn = e1784->LOCATION_LOCN;
          long location_zip = e1784->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1784->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1784->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1784->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1784->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1784->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1784->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1784->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1784->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1784->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1784->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1784->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1784->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1784->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1784 = e1784->__av;
          { //slice
            const HASH_RES_t h406 = CENSUS_mapkey0_idxfn::hash(se5185.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1785 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1785 = &(i1785->buckets_[h406 % i1785->size_]);
            CENSUS_entry* e1785;
            do if ((e1785 = n1785->obj) && h406 == n1785->hash && CENSUS_mapkey0_idxfn::equals(se5185, *e1785)) {
              long census_population = e1785->CENSUS_POPULATION;
              long census_white = e1785->CENSUS_WHITE;
              long census_asian = e1785->CENSUS_ASIAN;
              long census_pacific = e1785->CENSUS_PACIFIC;
              long census_blackafrican = e1785->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1785->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1785->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1785->CENSUS_HOUSEUNITS;
              long census_families = e1785->CENSUS_FAMILIES;
              long census_households = e1785->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1785->CENSUS_HUSBWIFE;
              long census_males = e1785->CENSUS_MALES;
              long census_females = e1785->CENSUS_FEMALES;
              long census_householdschildren = e1785->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1785->CENSUS_HISPANIC;
              long v1785 = e1785->__av;
              __SQL_SUM_AGGREGATE_722INVENTORY1_P_3.addOrDelOnZero(se5184.modify(inventory_locn), (v1784 * (v1785 * (census_blackafrican * census_husbwife))));
            } while ((n1785 = n1785->nxt));
          }
          e1784 = e1784->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_723INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1786 = LOCATION.head;
        while (e1786) {
          long inventory_locn = e1786->LOCATION_LOCN;
          long location_zip = e1786->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1786->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1786->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1786->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1786->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1786->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1786->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1786->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1786->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1786->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1786->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1786->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1786->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1786->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1786 = e1786->__av;
          { //slice
            const HASH_RES_t h407 = CENSUS_mapkey0_idxfn::hash(se5187.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1787 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1787 = &(i1787->buckets_[h407 % i1787->size_]);
            CENSUS_entry* e1787;
            do if ((e1787 = n1787->obj) && h407 == n1787->hash && CENSUS_mapkey0_idxfn::equals(se5187, *e1787)) {
              long census_population = e1787->CENSUS_POPULATION;
              long census_white = e1787->CENSUS_WHITE;
              long census_asian = e1787->CENSUS_ASIAN;
              long census_pacific = e1787->CENSUS_PACIFIC;
              long census_blackafrican = e1787->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1787->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1787->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1787->CENSUS_HOUSEUNITS;
              long census_families = e1787->CENSUS_FAMILIES;
              long census_households = e1787->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1787->CENSUS_HUSBWIFE;
              long census_males = e1787->CENSUS_MALES;
              long census_females = e1787->CENSUS_FEMALES;
              long census_householdschildren = e1787->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1787->CENSUS_HISPANIC;
              long v1787 = e1787->__av;
              __SQL_SUM_AGGREGATE_723INVENTORY1_P_3.addOrDelOnZero(se5186.modify(inventory_locn), (v1786 * (v1787 * (census_blackafrican * census_males))));
            } while ((n1787 = n1787->nxt));
          }
          e1786 = e1786->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_724INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1788 = LOCATION.head;
        while (e1788) {
          long inventory_locn = e1788->LOCATION_LOCN;
          long location_zip = e1788->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1788->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1788->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1788->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1788->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1788->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1788->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1788->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1788->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1788->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1788->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1788->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1788->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1788->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1788 = e1788->__av;
          { //slice
            const HASH_RES_t h408 = CENSUS_mapkey0_idxfn::hash(se5189.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1789 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1789 = &(i1789->buckets_[h408 % i1789->size_]);
            CENSUS_entry* e1789;
            do if ((e1789 = n1789->obj) && h408 == n1789->hash && CENSUS_mapkey0_idxfn::equals(se5189, *e1789)) {
              long census_population = e1789->CENSUS_POPULATION;
              long census_white = e1789->CENSUS_WHITE;
              long census_asian = e1789->CENSUS_ASIAN;
              long census_pacific = e1789->CENSUS_PACIFIC;
              long census_blackafrican = e1789->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1789->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1789->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1789->CENSUS_HOUSEUNITS;
              long census_families = e1789->CENSUS_FAMILIES;
              long census_households = e1789->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1789->CENSUS_HUSBWIFE;
              long census_males = e1789->CENSUS_MALES;
              long census_females = e1789->CENSUS_FEMALES;
              long census_householdschildren = e1789->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1789->CENSUS_HISPANIC;
              long v1789 = e1789->__av;
              __SQL_SUM_AGGREGATE_724INVENTORY1_P_3.addOrDelOnZero(se5188.modify(inventory_locn), (v1788 * (v1789 * (census_blackafrican * census_females))));
            } while ((n1789 = n1789->nxt));
          }
          e1788 = e1788->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_725INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1790 = LOCATION.head;
        while (e1790) {
          long inventory_locn = e1790->LOCATION_LOCN;
          long location_zip = e1790->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1790->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1790->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1790->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1790->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1790->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1790->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1790->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1790->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1790->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1790->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1790->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1790->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1790->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1790 = e1790->__av;
          { //slice
            const HASH_RES_t h409 = CENSUS_mapkey0_idxfn::hash(se5191.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1791 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1791 = &(i1791->buckets_[h409 % i1791->size_]);
            CENSUS_entry* e1791;
            do if ((e1791 = n1791->obj) && h409 == n1791->hash && CENSUS_mapkey0_idxfn::equals(se5191, *e1791)) {
              long census_population = e1791->CENSUS_POPULATION;
              long census_white = e1791->CENSUS_WHITE;
              long census_asian = e1791->CENSUS_ASIAN;
              long census_pacific = e1791->CENSUS_PACIFIC;
              long census_blackafrican = e1791->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1791->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1791->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1791->CENSUS_HOUSEUNITS;
              long census_families = e1791->CENSUS_FAMILIES;
              long census_households = e1791->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1791->CENSUS_HUSBWIFE;
              long census_males = e1791->CENSUS_MALES;
              long census_females = e1791->CENSUS_FEMALES;
              long census_householdschildren = e1791->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1791->CENSUS_HISPANIC;
              long v1791 = e1791->__av;
              __SQL_SUM_AGGREGATE_725INVENTORY1_P_3.addOrDelOnZero(se5190.modify(inventory_locn), (v1790 * (v1791 * (census_blackafrican * census_householdschildren))));
            } while ((n1791 = n1791->nxt));
          }
          e1790 = e1790->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_726INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1792 = LOCATION.head;
        while (e1792) {
          long inventory_locn = e1792->LOCATION_LOCN;
          long location_zip = e1792->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1792->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1792->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1792->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1792->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1792->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1792->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1792->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1792->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1792->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1792->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1792->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1792->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1792->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1792 = e1792->__av;
          { //slice
            const HASH_RES_t h410 = CENSUS_mapkey0_idxfn::hash(se5193.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1793 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1793 = &(i1793->buckets_[h410 % i1793->size_]);
            CENSUS_entry* e1793;
            do if ((e1793 = n1793->obj) && h410 == n1793->hash && CENSUS_mapkey0_idxfn::equals(se5193, *e1793)) {
              long census_population = e1793->CENSUS_POPULATION;
              long census_white = e1793->CENSUS_WHITE;
              long census_asian = e1793->CENSUS_ASIAN;
              long census_pacific = e1793->CENSUS_PACIFIC;
              long census_blackafrican = e1793->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1793->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1793->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1793->CENSUS_HOUSEUNITS;
              long census_families = e1793->CENSUS_FAMILIES;
              long census_households = e1793->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1793->CENSUS_HUSBWIFE;
              long census_males = e1793->CENSUS_MALES;
              long census_females = e1793->CENSUS_FEMALES;
              long census_householdschildren = e1793->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1793->CENSUS_HISPANIC;
              long v1793 = e1793->__av;
              __SQL_SUM_AGGREGATE_726INVENTORY1_P_3.addOrDelOnZero(se5192.modify(inventory_locn), (v1792 * (v1793 * (census_blackafrican * census_hispanic))));
            } while ((n1793 = n1793->nxt));
          }
          e1792 = e1792->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_730 = 0.0;
      __SQL_SUM_AGGREGATE_735 = 0.0;
      __SQL_SUM_AGGREGATE_737 = 0.0;
      __SQL_SUM_AGGREGATE_737INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1794 = LOCATION.head;
        while (e1794) {
          long inventory_locn = e1794->LOCATION_LOCN;
          long location_zip = e1794->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1794->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1794->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1794->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1794->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1794->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1794->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1794->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1794->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1794->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1794->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1794->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1794->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1794->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1794 = e1794->__av;
          { //slice
            const HASH_RES_t h411 = CENSUS_mapkey0_idxfn::hash(se5198.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1795 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1795 = &(i1795->buckets_[h411 % i1795->size_]);
            CENSUS_entry* e1795;
            do if ((e1795 = n1795->obj) && h411 == n1795->hash && CENSUS_mapkey0_idxfn::equals(se5198, *e1795)) {
              long census_population = e1795->CENSUS_POPULATION;
              long census_white = e1795->CENSUS_WHITE;
              long census_asian = e1795->CENSUS_ASIAN;
              long census_pacific = e1795->CENSUS_PACIFIC;
              long census_blackafrican = e1795->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1795->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1795->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1795->CENSUS_HOUSEUNITS;
              long census_families = e1795->CENSUS_FAMILIES;
              long census_households = e1795->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1795->CENSUS_HUSBWIFE;
              long census_males = e1795->CENSUS_MALES;
              long census_females = e1795->CENSUS_FEMALES;
              long census_householdschildren = e1795->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1795->CENSUS_HISPANIC;
              long v1795 = e1795->__av;
              __SQL_SUM_AGGREGATE_737INVENTORY1_P_3.addOrDelOnZero(se5197.modify(inventory_locn), (v1794 * (v1795 * (census_medianage * census_medianage))));
            } while ((n1795 = n1795->nxt));
          }
          e1794 = e1794->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_738 = 0.0;
      __SQL_SUM_AGGREGATE_738INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1796 = LOCATION.head;
        while (e1796) {
          long inventory_locn = e1796->LOCATION_LOCN;
          long location_zip = e1796->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1796->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1796->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1796->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1796->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1796->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1796->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1796->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1796->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1796->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1796->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1796->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1796->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1796->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1796 = e1796->__av;
          { //slice
            const HASH_RES_t h412 = CENSUS_mapkey0_idxfn::hash(se5201.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1797 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1797 = &(i1797->buckets_[h412 % i1797->size_]);
            CENSUS_entry* e1797;
            do if ((e1797 = n1797->obj) && h412 == n1797->hash && CENSUS_mapkey0_idxfn::equals(se5201, *e1797)) {
              long census_population = e1797->CENSUS_POPULATION;
              long census_white = e1797->CENSUS_WHITE;
              long census_asian = e1797->CENSUS_ASIAN;
              long census_pacific = e1797->CENSUS_PACIFIC;
              long census_blackafrican = e1797->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1797->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1797->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1797->CENSUS_HOUSEUNITS;
              long census_families = e1797->CENSUS_FAMILIES;
              long census_households = e1797->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1797->CENSUS_HUSBWIFE;
              long census_males = e1797->CENSUS_MALES;
              long census_females = e1797->CENSUS_FEMALES;
              long census_householdschildren = e1797->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1797->CENSUS_HISPANIC;
              long v1797 = e1797->__av;
              __SQL_SUM_AGGREGATE_738INVENTORY1_P_3.addOrDelOnZero(se5200.modify(inventory_locn), (v1796 * (v1797 * (census_medianage * census_occupiedhouseunits))));
            } while ((n1797 = n1797->nxt));
          }
          e1796 = e1796->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_739 = 0.0;
      __SQL_SUM_AGGREGATE_739INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1798 = LOCATION.head;
        while (e1798) {
          long inventory_locn = e1798->LOCATION_LOCN;
          long location_zip = e1798->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1798->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1798->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1798->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1798->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1798->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1798->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1798->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1798->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1798->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1798->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1798->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1798->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1798->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1798 = e1798->__av;
          { //slice
            const HASH_RES_t h413 = CENSUS_mapkey0_idxfn::hash(se5204.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1799 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1799 = &(i1799->buckets_[h413 % i1799->size_]);
            CENSUS_entry* e1799;
            do if ((e1799 = n1799->obj) && h413 == n1799->hash && CENSUS_mapkey0_idxfn::equals(se5204, *e1799)) {
              long census_population = e1799->CENSUS_POPULATION;
              long census_white = e1799->CENSUS_WHITE;
              long census_asian = e1799->CENSUS_ASIAN;
              long census_pacific = e1799->CENSUS_PACIFIC;
              long census_blackafrican = e1799->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1799->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1799->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1799->CENSUS_HOUSEUNITS;
              long census_families = e1799->CENSUS_FAMILIES;
              long census_households = e1799->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1799->CENSUS_HUSBWIFE;
              long census_males = e1799->CENSUS_MALES;
              long census_females = e1799->CENSUS_FEMALES;
              long census_householdschildren = e1799->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1799->CENSUS_HISPANIC;
              long v1799 = e1799->__av;
              __SQL_SUM_AGGREGATE_739INVENTORY1_P_3.addOrDelOnZero(se5203.modify(inventory_locn), (v1798 * (v1799 * (census_medianage * census_houseunits))));
            } while ((n1799 = n1799->nxt));
          }
          e1798 = e1798->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_740 = 0.0;
      __SQL_SUM_AGGREGATE_740INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1800 = LOCATION.head;
        while (e1800) {
          long inventory_locn = e1800->LOCATION_LOCN;
          long location_zip = e1800->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1800->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1800->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1800->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1800->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1800->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1800->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1800->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1800->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1800->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1800->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1800->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1800->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1800->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1800 = e1800->__av;
          { //slice
            const HASH_RES_t h414 = CENSUS_mapkey0_idxfn::hash(se5207.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1801 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1801 = &(i1801->buckets_[h414 % i1801->size_]);
            CENSUS_entry* e1801;
            do if ((e1801 = n1801->obj) && h414 == n1801->hash && CENSUS_mapkey0_idxfn::equals(se5207, *e1801)) {
              long census_population = e1801->CENSUS_POPULATION;
              long census_white = e1801->CENSUS_WHITE;
              long census_asian = e1801->CENSUS_ASIAN;
              long census_pacific = e1801->CENSUS_PACIFIC;
              long census_blackafrican = e1801->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1801->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1801->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1801->CENSUS_HOUSEUNITS;
              long census_families = e1801->CENSUS_FAMILIES;
              long census_households = e1801->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1801->CENSUS_HUSBWIFE;
              long census_males = e1801->CENSUS_MALES;
              long census_females = e1801->CENSUS_FEMALES;
              long census_householdschildren = e1801->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1801->CENSUS_HISPANIC;
              long v1801 = e1801->__av;
              __SQL_SUM_AGGREGATE_740INVENTORY1_P_3.addOrDelOnZero(se5206.modify(inventory_locn), (v1800 * (v1801 * (census_medianage * census_families))));
            } while ((n1801 = n1801->nxt));
          }
          e1800 = e1800->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_741 = 0.0;
      __SQL_SUM_AGGREGATE_741INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1802 = LOCATION.head;
        while (e1802) {
          long inventory_locn = e1802->LOCATION_LOCN;
          long location_zip = e1802->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1802->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1802->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1802->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1802->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1802->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1802->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1802->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1802->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1802->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1802->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1802->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1802->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1802->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1802 = e1802->__av;
          { //slice
            const HASH_RES_t h415 = CENSUS_mapkey0_idxfn::hash(se5210.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1803 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1803 = &(i1803->buckets_[h415 % i1803->size_]);
            CENSUS_entry* e1803;
            do if ((e1803 = n1803->obj) && h415 == n1803->hash && CENSUS_mapkey0_idxfn::equals(se5210, *e1803)) {
              long census_population = e1803->CENSUS_POPULATION;
              long census_white = e1803->CENSUS_WHITE;
              long census_asian = e1803->CENSUS_ASIAN;
              long census_pacific = e1803->CENSUS_PACIFIC;
              long census_blackafrican = e1803->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1803->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1803->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1803->CENSUS_HOUSEUNITS;
              long census_families = e1803->CENSUS_FAMILIES;
              long census_households = e1803->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1803->CENSUS_HUSBWIFE;
              long census_males = e1803->CENSUS_MALES;
              long census_females = e1803->CENSUS_FEMALES;
              long census_householdschildren = e1803->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1803->CENSUS_HISPANIC;
              long v1803 = e1803->__av;
              __SQL_SUM_AGGREGATE_741INVENTORY1_P_3.addOrDelOnZero(se5209.modify(inventory_locn), (v1802 * (v1803 * (census_medianage * census_households))));
            } while ((n1803 = n1803->nxt));
          }
          e1802 = e1802->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_742 = 0.0;
      __SQL_SUM_AGGREGATE_742INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1804 = LOCATION.head;
        while (e1804) {
          long inventory_locn = e1804->LOCATION_LOCN;
          long location_zip = e1804->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1804->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1804->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1804->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1804->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1804->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1804->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1804->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1804->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1804->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1804->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1804->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1804->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1804->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1804 = e1804->__av;
          { //slice
            const HASH_RES_t h416 = CENSUS_mapkey0_idxfn::hash(se5213.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1805 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1805 = &(i1805->buckets_[h416 % i1805->size_]);
            CENSUS_entry* e1805;
            do if ((e1805 = n1805->obj) && h416 == n1805->hash && CENSUS_mapkey0_idxfn::equals(se5213, *e1805)) {
              long census_population = e1805->CENSUS_POPULATION;
              long census_white = e1805->CENSUS_WHITE;
              long census_asian = e1805->CENSUS_ASIAN;
              long census_pacific = e1805->CENSUS_PACIFIC;
              long census_blackafrican = e1805->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1805->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1805->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1805->CENSUS_HOUSEUNITS;
              long census_families = e1805->CENSUS_FAMILIES;
              long census_households = e1805->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1805->CENSUS_HUSBWIFE;
              long census_males = e1805->CENSUS_MALES;
              long census_females = e1805->CENSUS_FEMALES;
              long census_householdschildren = e1805->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1805->CENSUS_HISPANIC;
              long v1805 = e1805->__av;
              __SQL_SUM_AGGREGATE_742INVENTORY1_P_3.addOrDelOnZero(se5212.modify(inventory_locn), (v1804 * (v1805 * (census_medianage * census_husbwife))));
            } while ((n1805 = n1805->nxt));
          }
          e1804 = e1804->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_743 = 0.0;
      __SQL_SUM_AGGREGATE_743INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1806 = LOCATION.head;
        while (e1806) {
          long inventory_locn = e1806->LOCATION_LOCN;
          long location_zip = e1806->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1806->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1806->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1806->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1806->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1806->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1806->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1806->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1806->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1806->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1806->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1806->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1806->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1806->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1806 = e1806->__av;
          { //slice
            const HASH_RES_t h417 = CENSUS_mapkey0_idxfn::hash(se5216.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1807 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1807 = &(i1807->buckets_[h417 % i1807->size_]);
            CENSUS_entry* e1807;
            do if ((e1807 = n1807->obj) && h417 == n1807->hash && CENSUS_mapkey0_idxfn::equals(se5216, *e1807)) {
              long census_population = e1807->CENSUS_POPULATION;
              long census_white = e1807->CENSUS_WHITE;
              long census_asian = e1807->CENSUS_ASIAN;
              long census_pacific = e1807->CENSUS_PACIFIC;
              long census_blackafrican = e1807->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1807->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1807->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1807->CENSUS_HOUSEUNITS;
              long census_families = e1807->CENSUS_FAMILIES;
              long census_households = e1807->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1807->CENSUS_HUSBWIFE;
              long census_males = e1807->CENSUS_MALES;
              long census_females = e1807->CENSUS_FEMALES;
              long census_householdschildren = e1807->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1807->CENSUS_HISPANIC;
              long v1807 = e1807->__av;
              __SQL_SUM_AGGREGATE_743INVENTORY1_P_3.addOrDelOnZero(se5215.modify(inventory_locn), (v1806 * (v1807 * (census_medianage * census_males))));
            } while ((n1807 = n1807->nxt));
          }
          e1806 = e1806->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_744 = 0.0;
      __SQL_SUM_AGGREGATE_744INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1808 = LOCATION.head;
        while (e1808) {
          long inventory_locn = e1808->LOCATION_LOCN;
          long location_zip = e1808->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1808->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1808->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1808->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1808->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1808->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1808->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1808->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1808->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1808->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1808->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1808->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1808->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1808->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1808 = e1808->__av;
          { //slice
            const HASH_RES_t h418 = CENSUS_mapkey0_idxfn::hash(se5219.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1809 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1809 = &(i1809->buckets_[h418 % i1809->size_]);
            CENSUS_entry* e1809;
            do if ((e1809 = n1809->obj) && h418 == n1809->hash && CENSUS_mapkey0_idxfn::equals(se5219, *e1809)) {
              long census_population = e1809->CENSUS_POPULATION;
              long census_white = e1809->CENSUS_WHITE;
              long census_asian = e1809->CENSUS_ASIAN;
              long census_pacific = e1809->CENSUS_PACIFIC;
              long census_blackafrican = e1809->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1809->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1809->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1809->CENSUS_HOUSEUNITS;
              long census_families = e1809->CENSUS_FAMILIES;
              long census_households = e1809->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1809->CENSUS_HUSBWIFE;
              long census_males = e1809->CENSUS_MALES;
              long census_females = e1809->CENSUS_FEMALES;
              long census_householdschildren = e1809->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1809->CENSUS_HISPANIC;
              long v1809 = e1809->__av;
              __SQL_SUM_AGGREGATE_744INVENTORY1_P_3.addOrDelOnZero(se5218.modify(inventory_locn), (v1808 * (v1809 * (census_medianage * census_females))));
            } while ((n1809 = n1809->nxt));
          }
          e1808 = e1808->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_745 = 0.0;
      __SQL_SUM_AGGREGATE_745INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1810 = LOCATION.head;
        while (e1810) {
          long inventory_locn = e1810->LOCATION_LOCN;
          long location_zip = e1810->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1810->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1810->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1810->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1810->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1810->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1810->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1810->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1810->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1810->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1810->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1810->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1810->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1810->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1810 = e1810->__av;
          { //slice
            const HASH_RES_t h419 = CENSUS_mapkey0_idxfn::hash(se5222.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1811 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1811 = &(i1811->buckets_[h419 % i1811->size_]);
            CENSUS_entry* e1811;
            do if ((e1811 = n1811->obj) && h419 == n1811->hash && CENSUS_mapkey0_idxfn::equals(se5222, *e1811)) {
              long census_population = e1811->CENSUS_POPULATION;
              long census_white = e1811->CENSUS_WHITE;
              long census_asian = e1811->CENSUS_ASIAN;
              long census_pacific = e1811->CENSUS_PACIFIC;
              long census_blackafrican = e1811->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1811->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1811->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1811->CENSUS_HOUSEUNITS;
              long census_families = e1811->CENSUS_FAMILIES;
              long census_households = e1811->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1811->CENSUS_HUSBWIFE;
              long census_males = e1811->CENSUS_MALES;
              long census_females = e1811->CENSUS_FEMALES;
              long census_householdschildren = e1811->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1811->CENSUS_HISPANIC;
              long v1811 = e1811->__av;
              __SQL_SUM_AGGREGATE_745INVENTORY1_P_3.addOrDelOnZero(se5221.modify(inventory_locn), (v1810 * (v1811 * (census_medianage * census_householdschildren))));
            } while ((n1811 = n1811->nxt));
          }
          e1810 = e1810->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_746 = 0.0;
      __SQL_SUM_AGGREGATE_746INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1812 = LOCATION.head;
        while (e1812) {
          long inventory_locn = e1812->LOCATION_LOCN;
          long location_zip = e1812->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1812->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1812->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1812->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1812->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1812->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1812->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1812->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1812->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1812->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1812->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1812->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1812->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1812->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1812 = e1812->__av;
          { //slice
            const HASH_RES_t h420 = CENSUS_mapkey0_idxfn::hash(se5225.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1813 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1813 = &(i1813->buckets_[h420 % i1813->size_]);
            CENSUS_entry* e1813;
            do if ((e1813 = n1813->obj) && h420 == n1813->hash && CENSUS_mapkey0_idxfn::equals(se5225, *e1813)) {
              long census_population = e1813->CENSUS_POPULATION;
              long census_white = e1813->CENSUS_WHITE;
              long census_asian = e1813->CENSUS_ASIAN;
              long census_pacific = e1813->CENSUS_PACIFIC;
              long census_blackafrican = e1813->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1813->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1813->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1813->CENSUS_HOUSEUNITS;
              long census_families = e1813->CENSUS_FAMILIES;
              long census_households = e1813->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1813->CENSUS_HUSBWIFE;
              long census_males = e1813->CENSUS_MALES;
              long census_females = e1813->CENSUS_FEMALES;
              long census_householdschildren = e1813->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1813->CENSUS_HISPANIC;
              long v1813 = e1813->__av;
              __SQL_SUM_AGGREGATE_746INVENTORY1_P_3.addOrDelOnZero(se5224.modify(inventory_locn), (v1812 * (v1813 * (census_medianage * census_hispanic))));
            } while ((n1813 = n1813->nxt));
          }
          e1812 = e1812->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_747 = 0.0;
      __SQL_SUM_AGGREGATE_748 = 0.0;
      __SQL_SUM_AGGREGATE_749 = 0.0;
      __SQL_SUM_AGGREGATE_750 = 0.0;
      __SQL_SUM_AGGREGATE_751 = 0.0;
      __SQL_SUM_AGGREGATE_752 = 0.0;
      __SQL_SUM_AGGREGATE_753 = 0.0;
      __SQL_SUM_AGGREGATE_754 = 0.0;
      __SQL_SUM_AGGREGATE_755 = 0.0;
      __SQL_SUM_AGGREGATE_756 = 0.0;
      __SQL_SUM_AGGREGATE_757INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1814 = LOCATION.head;
        while (e1814) {
          long inventory_locn = e1814->LOCATION_LOCN;
          long location_zip = e1814->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1814->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1814->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1814->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1814->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1814->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1814->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1814->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1814->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1814->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1814->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1814->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1814->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1814->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1814 = e1814->__av;
          { //slice
            const HASH_RES_t h421 = CENSUS_mapkey0_idxfn::hash(se5237.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1815 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1815 = &(i1815->buckets_[h421 % i1815->size_]);
            CENSUS_entry* e1815;
            do if ((e1815 = n1815->obj) && h421 == n1815->hash && CENSUS_mapkey0_idxfn::equals(se5237, *e1815)) {
              long census_population = e1815->CENSUS_POPULATION;
              long census_white = e1815->CENSUS_WHITE;
              long census_asian = e1815->CENSUS_ASIAN;
              long census_pacific = e1815->CENSUS_PACIFIC;
              long census_blackafrican = e1815->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1815->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1815->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1815->CENSUS_HOUSEUNITS;
              long census_families = e1815->CENSUS_FAMILIES;
              long census_households = e1815->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1815->CENSUS_HUSBWIFE;
              long census_males = e1815->CENSUS_MALES;
              long census_females = e1815->CENSUS_FEMALES;
              long census_householdschildren = e1815->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1815->CENSUS_HISPANIC;
              long v1815 = e1815->__av;
              __SQL_SUM_AGGREGATE_757INVENTORY1_P_3.addOrDelOnZero(se5236.modify(inventory_locn), (v1814 * (v1815 * (census_occupiedhouseunits * census_occupiedhouseunits))));
            } while ((n1815 = n1815->nxt));
          }
          e1814 = e1814->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_758INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1816 = LOCATION.head;
        while (e1816) {
          long inventory_locn = e1816->LOCATION_LOCN;
          long location_zip = e1816->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1816->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1816->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1816->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1816->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1816->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1816->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1816->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1816->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1816->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1816->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1816->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1816->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1816->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1816 = e1816->__av;
          { //slice
            const HASH_RES_t h422 = CENSUS_mapkey0_idxfn::hash(se5239.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1817 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1817 = &(i1817->buckets_[h422 % i1817->size_]);
            CENSUS_entry* e1817;
            do if ((e1817 = n1817->obj) && h422 == n1817->hash && CENSUS_mapkey0_idxfn::equals(se5239, *e1817)) {
              long census_population = e1817->CENSUS_POPULATION;
              long census_white = e1817->CENSUS_WHITE;
              long census_asian = e1817->CENSUS_ASIAN;
              long census_pacific = e1817->CENSUS_PACIFIC;
              long census_blackafrican = e1817->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1817->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1817->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1817->CENSUS_HOUSEUNITS;
              long census_families = e1817->CENSUS_FAMILIES;
              long census_households = e1817->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1817->CENSUS_HUSBWIFE;
              long census_males = e1817->CENSUS_MALES;
              long census_females = e1817->CENSUS_FEMALES;
              long census_householdschildren = e1817->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1817->CENSUS_HISPANIC;
              long v1817 = e1817->__av;
              __SQL_SUM_AGGREGATE_758INVENTORY1_P_3.addOrDelOnZero(se5238.modify(inventory_locn), (v1816 * (v1817 * (census_occupiedhouseunits * census_houseunits))));
            } while ((n1817 = n1817->nxt));
          }
          e1816 = e1816->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_759INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1818 = LOCATION.head;
        while (e1818) {
          long inventory_locn = e1818->LOCATION_LOCN;
          long location_zip = e1818->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1818->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1818->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1818->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1818->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1818->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1818->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1818->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1818->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1818->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1818->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1818->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1818->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1818->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1818 = e1818->__av;
          { //slice
            const HASH_RES_t h423 = CENSUS_mapkey0_idxfn::hash(se5241.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1819 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1819 = &(i1819->buckets_[h423 % i1819->size_]);
            CENSUS_entry* e1819;
            do if ((e1819 = n1819->obj) && h423 == n1819->hash && CENSUS_mapkey0_idxfn::equals(se5241, *e1819)) {
              long census_population = e1819->CENSUS_POPULATION;
              long census_white = e1819->CENSUS_WHITE;
              long census_asian = e1819->CENSUS_ASIAN;
              long census_pacific = e1819->CENSUS_PACIFIC;
              long census_blackafrican = e1819->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1819->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1819->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1819->CENSUS_HOUSEUNITS;
              long census_families = e1819->CENSUS_FAMILIES;
              long census_households = e1819->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1819->CENSUS_HUSBWIFE;
              long census_males = e1819->CENSUS_MALES;
              long census_females = e1819->CENSUS_FEMALES;
              long census_householdschildren = e1819->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1819->CENSUS_HISPANIC;
              long v1819 = e1819->__av;
              __SQL_SUM_AGGREGATE_759INVENTORY1_P_3.addOrDelOnZero(se5240.modify(inventory_locn), (v1818 * (v1819 * (census_occupiedhouseunits * census_families))));
            } while ((n1819 = n1819->nxt));
          }
          e1818 = e1818->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_760INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1820 = LOCATION.head;
        while (e1820) {
          long inventory_locn = e1820->LOCATION_LOCN;
          long location_zip = e1820->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1820->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1820->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1820->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1820->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1820->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1820->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1820->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1820->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1820->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1820->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1820->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1820->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1820->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1820 = e1820->__av;
          { //slice
            const HASH_RES_t h424 = CENSUS_mapkey0_idxfn::hash(se5243.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1821 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1821 = &(i1821->buckets_[h424 % i1821->size_]);
            CENSUS_entry* e1821;
            do if ((e1821 = n1821->obj) && h424 == n1821->hash && CENSUS_mapkey0_idxfn::equals(se5243, *e1821)) {
              long census_population = e1821->CENSUS_POPULATION;
              long census_white = e1821->CENSUS_WHITE;
              long census_asian = e1821->CENSUS_ASIAN;
              long census_pacific = e1821->CENSUS_PACIFIC;
              long census_blackafrican = e1821->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1821->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1821->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1821->CENSUS_HOUSEUNITS;
              long census_families = e1821->CENSUS_FAMILIES;
              long census_households = e1821->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1821->CENSUS_HUSBWIFE;
              long census_males = e1821->CENSUS_MALES;
              long census_females = e1821->CENSUS_FEMALES;
              long census_householdschildren = e1821->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1821->CENSUS_HISPANIC;
              long v1821 = e1821->__av;
              __SQL_SUM_AGGREGATE_760INVENTORY1_P_3.addOrDelOnZero(se5242.modify(inventory_locn), (v1820 * (v1821 * (census_occupiedhouseunits * census_households))));
            } while ((n1821 = n1821->nxt));
          }
          e1820 = e1820->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_761INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1822 = LOCATION.head;
        while (e1822) {
          long inventory_locn = e1822->LOCATION_LOCN;
          long location_zip = e1822->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1822->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1822->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1822->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1822->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1822->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1822->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1822->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1822->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1822->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1822->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1822->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1822->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1822->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1822 = e1822->__av;
          { //slice
            const HASH_RES_t h425 = CENSUS_mapkey0_idxfn::hash(se5245.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1823 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1823 = &(i1823->buckets_[h425 % i1823->size_]);
            CENSUS_entry* e1823;
            do if ((e1823 = n1823->obj) && h425 == n1823->hash && CENSUS_mapkey0_idxfn::equals(se5245, *e1823)) {
              long census_population = e1823->CENSUS_POPULATION;
              long census_white = e1823->CENSUS_WHITE;
              long census_asian = e1823->CENSUS_ASIAN;
              long census_pacific = e1823->CENSUS_PACIFIC;
              long census_blackafrican = e1823->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1823->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1823->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1823->CENSUS_HOUSEUNITS;
              long census_families = e1823->CENSUS_FAMILIES;
              long census_households = e1823->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1823->CENSUS_HUSBWIFE;
              long census_males = e1823->CENSUS_MALES;
              long census_females = e1823->CENSUS_FEMALES;
              long census_householdschildren = e1823->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1823->CENSUS_HISPANIC;
              long v1823 = e1823->__av;
              __SQL_SUM_AGGREGATE_761INVENTORY1_P_3.addOrDelOnZero(se5244.modify(inventory_locn), (v1822 * (v1823 * (census_occupiedhouseunits * census_husbwife))));
            } while ((n1823 = n1823->nxt));
          }
          e1822 = e1822->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_762INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1824 = LOCATION.head;
        while (e1824) {
          long inventory_locn = e1824->LOCATION_LOCN;
          long location_zip = e1824->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1824->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1824->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1824->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1824->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1824->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1824->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1824->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1824->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1824->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1824->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1824->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1824->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1824->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1824 = e1824->__av;
          { //slice
            const HASH_RES_t h426 = CENSUS_mapkey0_idxfn::hash(se5247.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1825 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1825 = &(i1825->buckets_[h426 % i1825->size_]);
            CENSUS_entry* e1825;
            do if ((e1825 = n1825->obj) && h426 == n1825->hash && CENSUS_mapkey0_idxfn::equals(se5247, *e1825)) {
              long census_population = e1825->CENSUS_POPULATION;
              long census_white = e1825->CENSUS_WHITE;
              long census_asian = e1825->CENSUS_ASIAN;
              long census_pacific = e1825->CENSUS_PACIFIC;
              long census_blackafrican = e1825->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1825->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1825->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1825->CENSUS_HOUSEUNITS;
              long census_families = e1825->CENSUS_FAMILIES;
              long census_households = e1825->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1825->CENSUS_HUSBWIFE;
              long census_males = e1825->CENSUS_MALES;
              long census_females = e1825->CENSUS_FEMALES;
              long census_householdschildren = e1825->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1825->CENSUS_HISPANIC;
              long v1825 = e1825->__av;
              __SQL_SUM_AGGREGATE_762INVENTORY1_P_3.addOrDelOnZero(se5246.modify(inventory_locn), (v1824 * (v1825 * (census_occupiedhouseunits * census_males))));
            } while ((n1825 = n1825->nxt));
          }
          e1824 = e1824->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_763INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1826 = LOCATION.head;
        while (e1826) {
          long inventory_locn = e1826->LOCATION_LOCN;
          long location_zip = e1826->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1826->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1826->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1826->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1826->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1826->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1826->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1826->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1826->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1826->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1826->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1826->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1826->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1826->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1826 = e1826->__av;
          { //slice
            const HASH_RES_t h427 = CENSUS_mapkey0_idxfn::hash(se5249.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1827 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1827 = &(i1827->buckets_[h427 % i1827->size_]);
            CENSUS_entry* e1827;
            do if ((e1827 = n1827->obj) && h427 == n1827->hash && CENSUS_mapkey0_idxfn::equals(se5249, *e1827)) {
              long census_population = e1827->CENSUS_POPULATION;
              long census_white = e1827->CENSUS_WHITE;
              long census_asian = e1827->CENSUS_ASIAN;
              long census_pacific = e1827->CENSUS_PACIFIC;
              long census_blackafrican = e1827->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1827->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1827->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1827->CENSUS_HOUSEUNITS;
              long census_families = e1827->CENSUS_FAMILIES;
              long census_households = e1827->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1827->CENSUS_HUSBWIFE;
              long census_males = e1827->CENSUS_MALES;
              long census_females = e1827->CENSUS_FEMALES;
              long census_householdschildren = e1827->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1827->CENSUS_HISPANIC;
              long v1827 = e1827->__av;
              __SQL_SUM_AGGREGATE_763INVENTORY1_P_3.addOrDelOnZero(se5248.modify(inventory_locn), (v1826 * (v1827 * (census_occupiedhouseunits * census_females))));
            } while ((n1827 = n1827->nxt));
          }
          e1826 = e1826->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_764INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1828 = LOCATION.head;
        while (e1828) {
          long inventory_locn = e1828->LOCATION_LOCN;
          long location_zip = e1828->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1828->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1828->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1828->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1828->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1828->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1828->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1828->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1828->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1828->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1828->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1828->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1828->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1828->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1828 = e1828->__av;
          { //slice
            const HASH_RES_t h428 = CENSUS_mapkey0_idxfn::hash(se5251.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1829 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1829 = &(i1829->buckets_[h428 % i1829->size_]);
            CENSUS_entry* e1829;
            do if ((e1829 = n1829->obj) && h428 == n1829->hash && CENSUS_mapkey0_idxfn::equals(se5251, *e1829)) {
              long census_population = e1829->CENSUS_POPULATION;
              long census_white = e1829->CENSUS_WHITE;
              long census_asian = e1829->CENSUS_ASIAN;
              long census_pacific = e1829->CENSUS_PACIFIC;
              long census_blackafrican = e1829->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1829->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1829->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1829->CENSUS_HOUSEUNITS;
              long census_families = e1829->CENSUS_FAMILIES;
              long census_households = e1829->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1829->CENSUS_HUSBWIFE;
              long census_males = e1829->CENSUS_MALES;
              long census_females = e1829->CENSUS_FEMALES;
              long census_householdschildren = e1829->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1829->CENSUS_HISPANIC;
              long v1829 = e1829->__av;
              __SQL_SUM_AGGREGATE_764INVENTORY1_P_3.addOrDelOnZero(se5250.modify(inventory_locn), (v1828 * (v1829 * (census_occupiedhouseunits * census_householdschildren))));
            } while ((n1829 = n1829->nxt));
          }
          e1828 = e1828->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_765INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1830 = LOCATION.head;
        while (e1830) {
          long inventory_locn = e1830->LOCATION_LOCN;
          long location_zip = e1830->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1830->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1830->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1830->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1830->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1830->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1830->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1830->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1830->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1830->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1830->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1830->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1830->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1830->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1830 = e1830->__av;
          { //slice
            const HASH_RES_t h429 = CENSUS_mapkey0_idxfn::hash(se5253.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1831 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1831 = &(i1831->buckets_[h429 % i1831->size_]);
            CENSUS_entry* e1831;
            do if ((e1831 = n1831->obj) && h429 == n1831->hash && CENSUS_mapkey0_idxfn::equals(se5253, *e1831)) {
              long census_population = e1831->CENSUS_POPULATION;
              long census_white = e1831->CENSUS_WHITE;
              long census_asian = e1831->CENSUS_ASIAN;
              long census_pacific = e1831->CENSUS_PACIFIC;
              long census_blackafrican = e1831->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1831->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1831->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1831->CENSUS_HOUSEUNITS;
              long census_families = e1831->CENSUS_FAMILIES;
              long census_households = e1831->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1831->CENSUS_HUSBWIFE;
              long census_males = e1831->CENSUS_MALES;
              long census_females = e1831->CENSUS_FEMALES;
              long census_householdschildren = e1831->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1831->CENSUS_HISPANIC;
              long v1831 = e1831->__av;
              __SQL_SUM_AGGREGATE_765INVENTORY1_P_3.addOrDelOnZero(se5252.modify(inventory_locn), (v1830 * (v1831 * (census_occupiedhouseunits * census_hispanic))));
            } while ((n1831 = n1831->nxt));
          }
          e1830 = e1830->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_769 = 0.0;
      __SQL_SUM_AGGREGATE_774 = 0.0;
      __SQL_SUM_AGGREGATE_776INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1832 = LOCATION.head;
        while (e1832) {
          long inventory_locn = e1832->LOCATION_LOCN;
          long location_zip = e1832->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1832->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1832->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1832->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1832->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1832->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1832->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1832->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1832->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1832->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1832->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1832->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1832->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1832->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1832 = e1832->__av;
          { //slice
            const HASH_RES_t h430 = CENSUS_mapkey0_idxfn::hash(se5257.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1833 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1833 = &(i1833->buckets_[h430 % i1833->size_]);
            CENSUS_entry* e1833;
            do if ((e1833 = n1833->obj) && h430 == n1833->hash && CENSUS_mapkey0_idxfn::equals(se5257, *e1833)) {
              long census_population = e1833->CENSUS_POPULATION;
              long census_white = e1833->CENSUS_WHITE;
              long census_asian = e1833->CENSUS_ASIAN;
              long census_pacific = e1833->CENSUS_PACIFIC;
              long census_blackafrican = e1833->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1833->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1833->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1833->CENSUS_HOUSEUNITS;
              long census_families = e1833->CENSUS_FAMILIES;
              long census_households = e1833->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1833->CENSUS_HUSBWIFE;
              long census_males = e1833->CENSUS_MALES;
              long census_females = e1833->CENSUS_FEMALES;
              long census_householdschildren = e1833->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1833->CENSUS_HISPANIC;
              long v1833 = e1833->__av;
              __SQL_SUM_AGGREGATE_776INVENTORY1_P_3.addOrDelOnZero(se5256.modify(inventory_locn), (v1832 * (v1833 * (census_houseunits * census_houseunits))));
            } while ((n1833 = n1833->nxt));
          }
          e1832 = e1832->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_777INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1834 = LOCATION.head;
        while (e1834) {
          long inventory_locn = e1834->LOCATION_LOCN;
          long location_zip = e1834->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1834->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1834->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1834->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1834->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1834->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1834->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1834->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1834->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1834->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1834->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1834->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1834->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1834->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1834 = e1834->__av;
          { //slice
            const HASH_RES_t h431 = CENSUS_mapkey0_idxfn::hash(se5259.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1835 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1835 = &(i1835->buckets_[h431 % i1835->size_]);
            CENSUS_entry* e1835;
            do if ((e1835 = n1835->obj) && h431 == n1835->hash && CENSUS_mapkey0_idxfn::equals(se5259, *e1835)) {
              long census_population = e1835->CENSUS_POPULATION;
              long census_white = e1835->CENSUS_WHITE;
              long census_asian = e1835->CENSUS_ASIAN;
              long census_pacific = e1835->CENSUS_PACIFIC;
              long census_blackafrican = e1835->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1835->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1835->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1835->CENSUS_HOUSEUNITS;
              long census_families = e1835->CENSUS_FAMILIES;
              long census_households = e1835->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1835->CENSUS_HUSBWIFE;
              long census_males = e1835->CENSUS_MALES;
              long census_females = e1835->CENSUS_FEMALES;
              long census_householdschildren = e1835->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1835->CENSUS_HISPANIC;
              long v1835 = e1835->__av;
              __SQL_SUM_AGGREGATE_777INVENTORY1_P_3.addOrDelOnZero(se5258.modify(inventory_locn), (v1834 * (v1835 * (census_houseunits * census_families))));
            } while ((n1835 = n1835->nxt));
          }
          e1834 = e1834->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_778INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1836 = LOCATION.head;
        while (e1836) {
          long inventory_locn = e1836->LOCATION_LOCN;
          long location_zip = e1836->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1836->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1836->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1836->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1836->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1836->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1836->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1836->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1836->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1836->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1836->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1836->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1836->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1836->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1836 = e1836->__av;
          { //slice
            const HASH_RES_t h432 = CENSUS_mapkey0_idxfn::hash(se5261.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1837 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1837 = &(i1837->buckets_[h432 % i1837->size_]);
            CENSUS_entry* e1837;
            do if ((e1837 = n1837->obj) && h432 == n1837->hash && CENSUS_mapkey0_idxfn::equals(se5261, *e1837)) {
              long census_population = e1837->CENSUS_POPULATION;
              long census_white = e1837->CENSUS_WHITE;
              long census_asian = e1837->CENSUS_ASIAN;
              long census_pacific = e1837->CENSUS_PACIFIC;
              long census_blackafrican = e1837->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1837->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1837->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1837->CENSUS_HOUSEUNITS;
              long census_families = e1837->CENSUS_FAMILIES;
              long census_households = e1837->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1837->CENSUS_HUSBWIFE;
              long census_males = e1837->CENSUS_MALES;
              long census_females = e1837->CENSUS_FEMALES;
              long census_householdschildren = e1837->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1837->CENSUS_HISPANIC;
              long v1837 = e1837->__av;
              __SQL_SUM_AGGREGATE_778INVENTORY1_P_3.addOrDelOnZero(se5260.modify(inventory_locn), (v1836 * (v1837 * (census_houseunits * census_households))));
            } while ((n1837 = n1837->nxt));
          }
          e1836 = e1836->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_779INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1838 = LOCATION.head;
        while (e1838) {
          long inventory_locn = e1838->LOCATION_LOCN;
          long location_zip = e1838->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1838->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1838->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1838->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1838->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1838->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1838->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1838->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1838->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1838->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1838->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1838->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1838->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1838->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1838 = e1838->__av;
          { //slice
            const HASH_RES_t h433 = CENSUS_mapkey0_idxfn::hash(se5263.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1839 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1839 = &(i1839->buckets_[h433 % i1839->size_]);
            CENSUS_entry* e1839;
            do if ((e1839 = n1839->obj) && h433 == n1839->hash && CENSUS_mapkey0_idxfn::equals(se5263, *e1839)) {
              long census_population = e1839->CENSUS_POPULATION;
              long census_white = e1839->CENSUS_WHITE;
              long census_asian = e1839->CENSUS_ASIAN;
              long census_pacific = e1839->CENSUS_PACIFIC;
              long census_blackafrican = e1839->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1839->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1839->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1839->CENSUS_HOUSEUNITS;
              long census_families = e1839->CENSUS_FAMILIES;
              long census_households = e1839->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1839->CENSUS_HUSBWIFE;
              long census_males = e1839->CENSUS_MALES;
              long census_females = e1839->CENSUS_FEMALES;
              long census_householdschildren = e1839->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1839->CENSUS_HISPANIC;
              long v1839 = e1839->__av;
              __SQL_SUM_AGGREGATE_779INVENTORY1_P_3.addOrDelOnZero(se5262.modify(inventory_locn), (v1838 * (v1839 * (census_houseunits * census_husbwife))));
            } while ((n1839 = n1839->nxt));
          }
          e1838 = e1838->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_780INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1840 = LOCATION.head;
        while (e1840) {
          long inventory_locn = e1840->LOCATION_LOCN;
          long location_zip = e1840->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1840->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1840->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1840->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1840->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1840->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1840->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1840->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1840->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1840->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1840->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1840->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1840->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1840->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1840 = e1840->__av;
          { //slice
            const HASH_RES_t h434 = CENSUS_mapkey0_idxfn::hash(se5265.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1841 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1841 = &(i1841->buckets_[h434 % i1841->size_]);
            CENSUS_entry* e1841;
            do if ((e1841 = n1841->obj) && h434 == n1841->hash && CENSUS_mapkey0_idxfn::equals(se5265, *e1841)) {
              long census_population = e1841->CENSUS_POPULATION;
              long census_white = e1841->CENSUS_WHITE;
              long census_asian = e1841->CENSUS_ASIAN;
              long census_pacific = e1841->CENSUS_PACIFIC;
              long census_blackafrican = e1841->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1841->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1841->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1841->CENSUS_HOUSEUNITS;
              long census_families = e1841->CENSUS_FAMILIES;
              long census_households = e1841->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1841->CENSUS_HUSBWIFE;
              long census_males = e1841->CENSUS_MALES;
              long census_females = e1841->CENSUS_FEMALES;
              long census_householdschildren = e1841->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1841->CENSUS_HISPANIC;
              long v1841 = e1841->__av;
              __SQL_SUM_AGGREGATE_780INVENTORY1_P_3.addOrDelOnZero(se5264.modify(inventory_locn), (v1840 * (v1841 * (census_houseunits * census_males))));
            } while ((n1841 = n1841->nxt));
          }
          e1840 = e1840->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_781INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1842 = LOCATION.head;
        while (e1842) {
          long inventory_locn = e1842->LOCATION_LOCN;
          long location_zip = e1842->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1842->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1842->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1842->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1842->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1842->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1842->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1842->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1842->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1842->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1842->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1842->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1842->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1842->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1842 = e1842->__av;
          { //slice
            const HASH_RES_t h435 = CENSUS_mapkey0_idxfn::hash(se5267.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1843 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1843 = &(i1843->buckets_[h435 % i1843->size_]);
            CENSUS_entry* e1843;
            do if ((e1843 = n1843->obj) && h435 == n1843->hash && CENSUS_mapkey0_idxfn::equals(se5267, *e1843)) {
              long census_population = e1843->CENSUS_POPULATION;
              long census_white = e1843->CENSUS_WHITE;
              long census_asian = e1843->CENSUS_ASIAN;
              long census_pacific = e1843->CENSUS_PACIFIC;
              long census_blackafrican = e1843->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1843->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1843->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1843->CENSUS_HOUSEUNITS;
              long census_families = e1843->CENSUS_FAMILIES;
              long census_households = e1843->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1843->CENSUS_HUSBWIFE;
              long census_males = e1843->CENSUS_MALES;
              long census_females = e1843->CENSUS_FEMALES;
              long census_householdschildren = e1843->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1843->CENSUS_HISPANIC;
              long v1843 = e1843->__av;
              __SQL_SUM_AGGREGATE_781INVENTORY1_P_3.addOrDelOnZero(se5266.modify(inventory_locn), (v1842 * (v1843 * (census_houseunits * census_females))));
            } while ((n1843 = n1843->nxt));
          }
          e1842 = e1842->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_782INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1844 = LOCATION.head;
        while (e1844) {
          long inventory_locn = e1844->LOCATION_LOCN;
          long location_zip = e1844->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1844->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1844->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1844->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1844->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1844->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1844->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1844->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1844->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1844->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1844->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1844->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1844->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1844->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1844 = e1844->__av;
          { //slice
            const HASH_RES_t h436 = CENSUS_mapkey0_idxfn::hash(se5269.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1845 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1845 = &(i1845->buckets_[h436 % i1845->size_]);
            CENSUS_entry* e1845;
            do if ((e1845 = n1845->obj) && h436 == n1845->hash && CENSUS_mapkey0_idxfn::equals(se5269, *e1845)) {
              long census_population = e1845->CENSUS_POPULATION;
              long census_white = e1845->CENSUS_WHITE;
              long census_asian = e1845->CENSUS_ASIAN;
              long census_pacific = e1845->CENSUS_PACIFIC;
              long census_blackafrican = e1845->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1845->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1845->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1845->CENSUS_HOUSEUNITS;
              long census_families = e1845->CENSUS_FAMILIES;
              long census_households = e1845->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1845->CENSUS_HUSBWIFE;
              long census_males = e1845->CENSUS_MALES;
              long census_females = e1845->CENSUS_FEMALES;
              long census_householdschildren = e1845->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1845->CENSUS_HISPANIC;
              long v1845 = e1845->__av;
              __SQL_SUM_AGGREGATE_782INVENTORY1_P_3.addOrDelOnZero(se5268.modify(inventory_locn), (v1844 * (v1845 * (census_houseunits * census_householdschildren))));
            } while ((n1845 = n1845->nxt));
          }
          e1844 = e1844->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_783INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1846 = LOCATION.head;
        while (e1846) {
          long inventory_locn = e1846->LOCATION_LOCN;
          long location_zip = e1846->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1846->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1846->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1846->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1846->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1846->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1846->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1846->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1846->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1846->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1846->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1846->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1846->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1846->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1846 = e1846->__av;
          { //slice
            const HASH_RES_t h437 = CENSUS_mapkey0_idxfn::hash(se5271.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1847 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1847 = &(i1847->buckets_[h437 % i1847->size_]);
            CENSUS_entry* e1847;
            do if ((e1847 = n1847->obj) && h437 == n1847->hash && CENSUS_mapkey0_idxfn::equals(se5271, *e1847)) {
              long census_population = e1847->CENSUS_POPULATION;
              long census_white = e1847->CENSUS_WHITE;
              long census_asian = e1847->CENSUS_ASIAN;
              long census_pacific = e1847->CENSUS_PACIFIC;
              long census_blackafrican = e1847->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1847->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1847->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1847->CENSUS_HOUSEUNITS;
              long census_families = e1847->CENSUS_FAMILIES;
              long census_households = e1847->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1847->CENSUS_HUSBWIFE;
              long census_males = e1847->CENSUS_MALES;
              long census_females = e1847->CENSUS_FEMALES;
              long census_householdschildren = e1847->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1847->CENSUS_HISPANIC;
              long v1847 = e1847->__av;
              __SQL_SUM_AGGREGATE_783INVENTORY1_P_3.addOrDelOnZero(se5270.modify(inventory_locn), (v1846 * (v1847 * (census_houseunits * census_hispanic))));
            } while ((n1847 = n1847->nxt));
          }
          e1846 = e1846->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_787 = 0.0;
      __SQL_SUM_AGGREGATE_792 = 0.0;
      __SQL_SUM_AGGREGATE_794INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1848 = LOCATION.head;
        while (e1848) {
          long inventory_locn = e1848->LOCATION_LOCN;
          long location_zip = e1848->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1848->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1848->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1848->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1848->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1848->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1848->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1848->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1848->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1848->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1848->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1848->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1848->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1848->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1848 = e1848->__av;
          { //slice
            const HASH_RES_t h438 = CENSUS_mapkey0_idxfn::hash(se5275.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1849 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1849 = &(i1849->buckets_[h438 % i1849->size_]);
            CENSUS_entry* e1849;
            do if ((e1849 = n1849->obj) && h438 == n1849->hash && CENSUS_mapkey0_idxfn::equals(se5275, *e1849)) {
              long census_population = e1849->CENSUS_POPULATION;
              long census_white = e1849->CENSUS_WHITE;
              long census_asian = e1849->CENSUS_ASIAN;
              long census_pacific = e1849->CENSUS_PACIFIC;
              long census_blackafrican = e1849->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1849->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1849->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1849->CENSUS_HOUSEUNITS;
              long census_families = e1849->CENSUS_FAMILIES;
              long census_households = e1849->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1849->CENSUS_HUSBWIFE;
              long census_males = e1849->CENSUS_MALES;
              long census_females = e1849->CENSUS_FEMALES;
              long census_householdschildren = e1849->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1849->CENSUS_HISPANIC;
              long v1849 = e1849->__av;
              __SQL_SUM_AGGREGATE_794INVENTORY1_P_3.addOrDelOnZero(se5274.modify(inventory_locn), (v1848 * (v1849 * (census_families * census_families))));
            } while ((n1849 = n1849->nxt));
          }
          e1848 = e1848->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_795INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1850 = LOCATION.head;
        while (e1850) {
          long inventory_locn = e1850->LOCATION_LOCN;
          long location_zip = e1850->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1850->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1850->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1850->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1850->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1850->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1850->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1850->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1850->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1850->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1850->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1850->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1850->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1850->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1850 = e1850->__av;
          { //slice
            const HASH_RES_t h439 = CENSUS_mapkey0_idxfn::hash(se5277.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1851 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1851 = &(i1851->buckets_[h439 % i1851->size_]);
            CENSUS_entry* e1851;
            do if ((e1851 = n1851->obj) && h439 == n1851->hash && CENSUS_mapkey0_idxfn::equals(se5277, *e1851)) {
              long census_population = e1851->CENSUS_POPULATION;
              long census_white = e1851->CENSUS_WHITE;
              long census_asian = e1851->CENSUS_ASIAN;
              long census_pacific = e1851->CENSUS_PACIFIC;
              long census_blackafrican = e1851->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1851->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1851->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1851->CENSUS_HOUSEUNITS;
              long census_families = e1851->CENSUS_FAMILIES;
              long census_households = e1851->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1851->CENSUS_HUSBWIFE;
              long census_males = e1851->CENSUS_MALES;
              long census_females = e1851->CENSUS_FEMALES;
              long census_householdschildren = e1851->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1851->CENSUS_HISPANIC;
              long v1851 = e1851->__av;
              __SQL_SUM_AGGREGATE_795INVENTORY1_P_3.addOrDelOnZero(se5276.modify(inventory_locn), (v1850 * (v1851 * (census_families * census_households))));
            } while ((n1851 = n1851->nxt));
          }
          e1850 = e1850->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_796INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1852 = LOCATION.head;
        while (e1852) {
          long inventory_locn = e1852->LOCATION_LOCN;
          long location_zip = e1852->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1852->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1852->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1852->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1852->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1852->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1852->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1852->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1852->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1852->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1852->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1852->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1852->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1852->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1852 = e1852->__av;
          { //slice
            const HASH_RES_t h440 = CENSUS_mapkey0_idxfn::hash(se5279.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1853 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1853 = &(i1853->buckets_[h440 % i1853->size_]);
            CENSUS_entry* e1853;
            do if ((e1853 = n1853->obj) && h440 == n1853->hash && CENSUS_mapkey0_idxfn::equals(se5279, *e1853)) {
              long census_population = e1853->CENSUS_POPULATION;
              long census_white = e1853->CENSUS_WHITE;
              long census_asian = e1853->CENSUS_ASIAN;
              long census_pacific = e1853->CENSUS_PACIFIC;
              long census_blackafrican = e1853->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1853->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1853->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1853->CENSUS_HOUSEUNITS;
              long census_families = e1853->CENSUS_FAMILIES;
              long census_households = e1853->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1853->CENSUS_HUSBWIFE;
              long census_males = e1853->CENSUS_MALES;
              long census_females = e1853->CENSUS_FEMALES;
              long census_householdschildren = e1853->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1853->CENSUS_HISPANIC;
              long v1853 = e1853->__av;
              __SQL_SUM_AGGREGATE_796INVENTORY1_P_3.addOrDelOnZero(se5278.modify(inventory_locn), (v1852 * (v1853 * (census_families * census_husbwife))));
            } while ((n1853 = n1853->nxt));
          }
          e1852 = e1852->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_797INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1854 = LOCATION.head;
        while (e1854) {
          long inventory_locn = e1854->LOCATION_LOCN;
          long location_zip = e1854->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1854->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1854->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1854->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1854->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1854->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1854->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1854->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1854->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1854->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1854->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1854->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1854->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1854->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1854 = e1854->__av;
          { //slice
            const HASH_RES_t h441 = CENSUS_mapkey0_idxfn::hash(se5281.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1855 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1855 = &(i1855->buckets_[h441 % i1855->size_]);
            CENSUS_entry* e1855;
            do if ((e1855 = n1855->obj) && h441 == n1855->hash && CENSUS_mapkey0_idxfn::equals(se5281, *e1855)) {
              long census_population = e1855->CENSUS_POPULATION;
              long census_white = e1855->CENSUS_WHITE;
              long census_asian = e1855->CENSUS_ASIAN;
              long census_pacific = e1855->CENSUS_PACIFIC;
              long census_blackafrican = e1855->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1855->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1855->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1855->CENSUS_HOUSEUNITS;
              long census_families = e1855->CENSUS_FAMILIES;
              long census_households = e1855->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1855->CENSUS_HUSBWIFE;
              long census_males = e1855->CENSUS_MALES;
              long census_females = e1855->CENSUS_FEMALES;
              long census_householdschildren = e1855->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1855->CENSUS_HISPANIC;
              long v1855 = e1855->__av;
              __SQL_SUM_AGGREGATE_797INVENTORY1_P_3.addOrDelOnZero(se5280.modify(inventory_locn), (v1854 * (v1855 * (census_families * census_males))));
            } while ((n1855 = n1855->nxt));
          }
          e1854 = e1854->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_798INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1856 = LOCATION.head;
        while (e1856) {
          long inventory_locn = e1856->LOCATION_LOCN;
          long location_zip = e1856->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1856->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1856->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1856->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1856->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1856->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1856->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1856->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1856->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1856->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1856->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1856->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1856->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1856->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1856 = e1856->__av;
          { //slice
            const HASH_RES_t h442 = CENSUS_mapkey0_idxfn::hash(se5283.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1857 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1857 = &(i1857->buckets_[h442 % i1857->size_]);
            CENSUS_entry* e1857;
            do if ((e1857 = n1857->obj) && h442 == n1857->hash && CENSUS_mapkey0_idxfn::equals(se5283, *e1857)) {
              long census_population = e1857->CENSUS_POPULATION;
              long census_white = e1857->CENSUS_WHITE;
              long census_asian = e1857->CENSUS_ASIAN;
              long census_pacific = e1857->CENSUS_PACIFIC;
              long census_blackafrican = e1857->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1857->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1857->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1857->CENSUS_HOUSEUNITS;
              long census_families = e1857->CENSUS_FAMILIES;
              long census_households = e1857->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1857->CENSUS_HUSBWIFE;
              long census_males = e1857->CENSUS_MALES;
              long census_females = e1857->CENSUS_FEMALES;
              long census_householdschildren = e1857->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1857->CENSUS_HISPANIC;
              long v1857 = e1857->__av;
              __SQL_SUM_AGGREGATE_798INVENTORY1_P_3.addOrDelOnZero(se5282.modify(inventory_locn), (v1856 * (v1857 * (census_families * census_females))));
            } while ((n1857 = n1857->nxt));
          }
          e1856 = e1856->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_799INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1858 = LOCATION.head;
        while (e1858) {
          long inventory_locn = e1858->LOCATION_LOCN;
          long location_zip = e1858->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1858->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1858->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1858->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1858->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1858->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1858->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1858->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1858->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1858->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1858->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1858->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1858->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1858->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1858 = e1858->__av;
          { //slice
            const HASH_RES_t h443 = CENSUS_mapkey0_idxfn::hash(se5285.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1859 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1859 = &(i1859->buckets_[h443 % i1859->size_]);
            CENSUS_entry* e1859;
            do if ((e1859 = n1859->obj) && h443 == n1859->hash && CENSUS_mapkey0_idxfn::equals(se5285, *e1859)) {
              long census_population = e1859->CENSUS_POPULATION;
              long census_white = e1859->CENSUS_WHITE;
              long census_asian = e1859->CENSUS_ASIAN;
              long census_pacific = e1859->CENSUS_PACIFIC;
              long census_blackafrican = e1859->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1859->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1859->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1859->CENSUS_HOUSEUNITS;
              long census_families = e1859->CENSUS_FAMILIES;
              long census_households = e1859->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1859->CENSUS_HUSBWIFE;
              long census_males = e1859->CENSUS_MALES;
              long census_females = e1859->CENSUS_FEMALES;
              long census_householdschildren = e1859->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1859->CENSUS_HISPANIC;
              long v1859 = e1859->__av;
              __SQL_SUM_AGGREGATE_799INVENTORY1_P_3.addOrDelOnZero(se5284.modify(inventory_locn), (v1858 * (v1859 * (census_families * census_householdschildren))));
            } while ((n1859 = n1859->nxt));
          }
          e1858 = e1858->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_800INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1860 = LOCATION.head;
        while (e1860) {
          long inventory_locn = e1860->LOCATION_LOCN;
          long location_zip = e1860->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1860->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1860->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1860->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1860->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1860->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1860->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1860->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1860->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1860->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1860->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1860->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1860->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1860->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1860 = e1860->__av;
          { //slice
            const HASH_RES_t h444 = CENSUS_mapkey0_idxfn::hash(se5287.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1861 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1861 = &(i1861->buckets_[h444 % i1861->size_]);
            CENSUS_entry* e1861;
            do if ((e1861 = n1861->obj) && h444 == n1861->hash && CENSUS_mapkey0_idxfn::equals(se5287, *e1861)) {
              long census_population = e1861->CENSUS_POPULATION;
              long census_white = e1861->CENSUS_WHITE;
              long census_asian = e1861->CENSUS_ASIAN;
              long census_pacific = e1861->CENSUS_PACIFIC;
              long census_blackafrican = e1861->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1861->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1861->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1861->CENSUS_HOUSEUNITS;
              long census_families = e1861->CENSUS_FAMILIES;
              long census_households = e1861->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1861->CENSUS_HUSBWIFE;
              long census_males = e1861->CENSUS_MALES;
              long census_females = e1861->CENSUS_FEMALES;
              long census_householdschildren = e1861->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1861->CENSUS_HISPANIC;
              long v1861 = e1861->__av;
              __SQL_SUM_AGGREGATE_800INVENTORY1_P_3.addOrDelOnZero(se5286.modify(inventory_locn), (v1860 * (v1861 * (census_families * census_hispanic))));
            } while ((n1861 = n1861->nxt));
          }
          e1860 = e1860->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_804 = 0.0;
      __SQL_SUM_AGGREGATE_809 = 0.0;
      __SQL_SUM_AGGREGATE_811INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1862 = LOCATION.head;
        while (e1862) {
          long inventory_locn = e1862->LOCATION_LOCN;
          long location_zip = e1862->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1862->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1862->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1862->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1862->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1862->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1862->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1862->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1862->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1862->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1862->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1862->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1862->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1862->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1862 = e1862->__av;
          { //slice
            const HASH_RES_t h445 = CENSUS_mapkey0_idxfn::hash(se5291.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1863 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1863 = &(i1863->buckets_[h445 % i1863->size_]);
            CENSUS_entry* e1863;
            do if ((e1863 = n1863->obj) && h445 == n1863->hash && CENSUS_mapkey0_idxfn::equals(se5291, *e1863)) {
              long census_population = e1863->CENSUS_POPULATION;
              long census_white = e1863->CENSUS_WHITE;
              long census_asian = e1863->CENSUS_ASIAN;
              long census_pacific = e1863->CENSUS_PACIFIC;
              long census_blackafrican = e1863->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1863->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1863->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1863->CENSUS_HOUSEUNITS;
              long census_families = e1863->CENSUS_FAMILIES;
              long census_households = e1863->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1863->CENSUS_HUSBWIFE;
              long census_males = e1863->CENSUS_MALES;
              long census_females = e1863->CENSUS_FEMALES;
              long census_householdschildren = e1863->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1863->CENSUS_HISPANIC;
              long v1863 = e1863->__av;
              __SQL_SUM_AGGREGATE_811INVENTORY1_P_3.addOrDelOnZero(se5290.modify(inventory_locn), (v1862 * (v1863 * (census_households * census_households))));
            } while ((n1863 = n1863->nxt));
          }
          e1862 = e1862->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_812INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1864 = LOCATION.head;
        while (e1864) {
          long inventory_locn = e1864->LOCATION_LOCN;
          long location_zip = e1864->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1864->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1864->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1864->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1864->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1864->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1864->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1864->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1864->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1864->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1864->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1864->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1864->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1864->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1864 = e1864->__av;
          { //slice
            const HASH_RES_t h446 = CENSUS_mapkey0_idxfn::hash(se5293.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1865 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1865 = &(i1865->buckets_[h446 % i1865->size_]);
            CENSUS_entry* e1865;
            do if ((e1865 = n1865->obj) && h446 == n1865->hash && CENSUS_mapkey0_idxfn::equals(se5293, *e1865)) {
              long census_population = e1865->CENSUS_POPULATION;
              long census_white = e1865->CENSUS_WHITE;
              long census_asian = e1865->CENSUS_ASIAN;
              long census_pacific = e1865->CENSUS_PACIFIC;
              long census_blackafrican = e1865->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1865->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1865->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1865->CENSUS_HOUSEUNITS;
              long census_families = e1865->CENSUS_FAMILIES;
              long census_households = e1865->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1865->CENSUS_HUSBWIFE;
              long census_males = e1865->CENSUS_MALES;
              long census_females = e1865->CENSUS_FEMALES;
              long census_householdschildren = e1865->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1865->CENSUS_HISPANIC;
              long v1865 = e1865->__av;
              __SQL_SUM_AGGREGATE_812INVENTORY1_P_3.addOrDelOnZero(se5292.modify(inventory_locn), (v1864 * (v1865 * (census_households * census_husbwife))));
            } while ((n1865 = n1865->nxt));
          }
          e1864 = e1864->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_813INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1866 = LOCATION.head;
        while (e1866) {
          long inventory_locn = e1866->LOCATION_LOCN;
          long location_zip = e1866->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1866->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1866->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1866->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1866->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1866->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1866->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1866->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1866->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1866->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1866->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1866->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1866->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1866->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1866 = e1866->__av;
          { //slice
            const HASH_RES_t h447 = CENSUS_mapkey0_idxfn::hash(se5295.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1867 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1867 = &(i1867->buckets_[h447 % i1867->size_]);
            CENSUS_entry* e1867;
            do if ((e1867 = n1867->obj) && h447 == n1867->hash && CENSUS_mapkey0_idxfn::equals(se5295, *e1867)) {
              long census_population = e1867->CENSUS_POPULATION;
              long census_white = e1867->CENSUS_WHITE;
              long census_asian = e1867->CENSUS_ASIAN;
              long census_pacific = e1867->CENSUS_PACIFIC;
              long census_blackafrican = e1867->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1867->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1867->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1867->CENSUS_HOUSEUNITS;
              long census_families = e1867->CENSUS_FAMILIES;
              long census_households = e1867->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1867->CENSUS_HUSBWIFE;
              long census_males = e1867->CENSUS_MALES;
              long census_females = e1867->CENSUS_FEMALES;
              long census_householdschildren = e1867->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1867->CENSUS_HISPANIC;
              long v1867 = e1867->__av;
              __SQL_SUM_AGGREGATE_813INVENTORY1_P_3.addOrDelOnZero(se5294.modify(inventory_locn), (v1866 * (v1867 * (census_households * census_males))));
            } while ((n1867 = n1867->nxt));
          }
          e1866 = e1866->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_814INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1868 = LOCATION.head;
        while (e1868) {
          long inventory_locn = e1868->LOCATION_LOCN;
          long location_zip = e1868->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1868->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1868->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1868->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1868->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1868->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1868->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1868->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1868->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1868->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1868->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1868->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1868->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1868->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1868 = e1868->__av;
          { //slice
            const HASH_RES_t h448 = CENSUS_mapkey0_idxfn::hash(se5297.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1869 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1869 = &(i1869->buckets_[h448 % i1869->size_]);
            CENSUS_entry* e1869;
            do if ((e1869 = n1869->obj) && h448 == n1869->hash && CENSUS_mapkey0_idxfn::equals(se5297, *e1869)) {
              long census_population = e1869->CENSUS_POPULATION;
              long census_white = e1869->CENSUS_WHITE;
              long census_asian = e1869->CENSUS_ASIAN;
              long census_pacific = e1869->CENSUS_PACIFIC;
              long census_blackafrican = e1869->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1869->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1869->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1869->CENSUS_HOUSEUNITS;
              long census_families = e1869->CENSUS_FAMILIES;
              long census_households = e1869->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1869->CENSUS_HUSBWIFE;
              long census_males = e1869->CENSUS_MALES;
              long census_females = e1869->CENSUS_FEMALES;
              long census_householdschildren = e1869->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1869->CENSUS_HISPANIC;
              long v1869 = e1869->__av;
              __SQL_SUM_AGGREGATE_814INVENTORY1_P_3.addOrDelOnZero(se5296.modify(inventory_locn), (v1868 * (v1869 * (census_households * census_females))));
            } while ((n1869 = n1869->nxt));
          }
          e1868 = e1868->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_815INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1870 = LOCATION.head;
        while (e1870) {
          long inventory_locn = e1870->LOCATION_LOCN;
          long location_zip = e1870->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1870->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1870->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1870->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1870->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1870->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1870->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1870->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1870->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1870->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1870->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1870->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1870->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1870->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1870 = e1870->__av;
          { //slice
            const HASH_RES_t h449 = CENSUS_mapkey0_idxfn::hash(se5299.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1871 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1871 = &(i1871->buckets_[h449 % i1871->size_]);
            CENSUS_entry* e1871;
            do if ((e1871 = n1871->obj) && h449 == n1871->hash && CENSUS_mapkey0_idxfn::equals(se5299, *e1871)) {
              long census_population = e1871->CENSUS_POPULATION;
              long census_white = e1871->CENSUS_WHITE;
              long census_asian = e1871->CENSUS_ASIAN;
              long census_pacific = e1871->CENSUS_PACIFIC;
              long census_blackafrican = e1871->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1871->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1871->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1871->CENSUS_HOUSEUNITS;
              long census_families = e1871->CENSUS_FAMILIES;
              long census_households = e1871->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1871->CENSUS_HUSBWIFE;
              long census_males = e1871->CENSUS_MALES;
              long census_females = e1871->CENSUS_FEMALES;
              long census_householdschildren = e1871->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1871->CENSUS_HISPANIC;
              long v1871 = e1871->__av;
              __SQL_SUM_AGGREGATE_815INVENTORY1_P_3.addOrDelOnZero(se5298.modify(inventory_locn), (v1870 * (v1871 * (census_households * census_householdschildren))));
            } while ((n1871 = n1871->nxt));
          }
          e1870 = e1870->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_816INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1872 = LOCATION.head;
        while (e1872) {
          long inventory_locn = e1872->LOCATION_LOCN;
          long location_zip = e1872->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1872->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1872->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1872->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1872->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1872->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1872->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1872->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1872->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1872->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1872->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1872->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1872->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1872->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1872 = e1872->__av;
          { //slice
            const HASH_RES_t h450 = CENSUS_mapkey0_idxfn::hash(se5301.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1873 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1873 = &(i1873->buckets_[h450 % i1873->size_]);
            CENSUS_entry* e1873;
            do if ((e1873 = n1873->obj) && h450 == n1873->hash && CENSUS_mapkey0_idxfn::equals(se5301, *e1873)) {
              long census_population = e1873->CENSUS_POPULATION;
              long census_white = e1873->CENSUS_WHITE;
              long census_asian = e1873->CENSUS_ASIAN;
              long census_pacific = e1873->CENSUS_PACIFIC;
              long census_blackafrican = e1873->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1873->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1873->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1873->CENSUS_HOUSEUNITS;
              long census_families = e1873->CENSUS_FAMILIES;
              long census_households = e1873->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1873->CENSUS_HUSBWIFE;
              long census_males = e1873->CENSUS_MALES;
              long census_females = e1873->CENSUS_FEMALES;
              long census_householdschildren = e1873->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1873->CENSUS_HISPANIC;
              long v1873 = e1873->__av;
              __SQL_SUM_AGGREGATE_816INVENTORY1_P_3.addOrDelOnZero(se5300.modify(inventory_locn), (v1872 * (v1873 * (census_households * census_hispanic))));
            } while ((n1873 = n1873->nxt));
          }
          e1872 = e1872->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_820 = 0.0;
      __SQL_SUM_AGGREGATE_825 = 0.0;
      __SQL_SUM_AGGREGATE_827INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1874 = LOCATION.head;
        while (e1874) {
          long inventory_locn = e1874->LOCATION_LOCN;
          long location_zip = e1874->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1874->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1874->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1874->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1874->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1874->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1874->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1874->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1874->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1874->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1874->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1874->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1874->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1874->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1874 = e1874->__av;
          { //slice
            const HASH_RES_t h451 = CENSUS_mapkey0_idxfn::hash(se5305.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1875 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1875 = &(i1875->buckets_[h451 % i1875->size_]);
            CENSUS_entry* e1875;
            do if ((e1875 = n1875->obj) && h451 == n1875->hash && CENSUS_mapkey0_idxfn::equals(se5305, *e1875)) {
              long census_population = e1875->CENSUS_POPULATION;
              long census_white = e1875->CENSUS_WHITE;
              long census_asian = e1875->CENSUS_ASIAN;
              long census_pacific = e1875->CENSUS_PACIFIC;
              long census_blackafrican = e1875->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1875->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1875->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1875->CENSUS_HOUSEUNITS;
              long census_families = e1875->CENSUS_FAMILIES;
              long census_households = e1875->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1875->CENSUS_HUSBWIFE;
              long census_males = e1875->CENSUS_MALES;
              long census_females = e1875->CENSUS_FEMALES;
              long census_householdschildren = e1875->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1875->CENSUS_HISPANIC;
              long v1875 = e1875->__av;
              __SQL_SUM_AGGREGATE_827INVENTORY1_P_3.addOrDelOnZero(se5304.modify(inventory_locn), (v1874 * (v1875 * (census_husbwife * census_husbwife))));
            } while ((n1875 = n1875->nxt));
          }
          e1874 = e1874->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_828INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1876 = LOCATION.head;
        while (e1876) {
          long inventory_locn = e1876->LOCATION_LOCN;
          long location_zip = e1876->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1876->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1876->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1876->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1876->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1876->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1876->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1876->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1876->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1876->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1876->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1876->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1876->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1876->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1876 = e1876->__av;
          { //slice
            const HASH_RES_t h452 = CENSUS_mapkey0_idxfn::hash(se5307.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1877 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1877 = &(i1877->buckets_[h452 % i1877->size_]);
            CENSUS_entry* e1877;
            do if ((e1877 = n1877->obj) && h452 == n1877->hash && CENSUS_mapkey0_idxfn::equals(se5307, *e1877)) {
              long census_population = e1877->CENSUS_POPULATION;
              long census_white = e1877->CENSUS_WHITE;
              long census_asian = e1877->CENSUS_ASIAN;
              long census_pacific = e1877->CENSUS_PACIFIC;
              long census_blackafrican = e1877->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1877->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1877->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1877->CENSUS_HOUSEUNITS;
              long census_families = e1877->CENSUS_FAMILIES;
              long census_households = e1877->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1877->CENSUS_HUSBWIFE;
              long census_males = e1877->CENSUS_MALES;
              long census_females = e1877->CENSUS_FEMALES;
              long census_householdschildren = e1877->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1877->CENSUS_HISPANIC;
              long v1877 = e1877->__av;
              __SQL_SUM_AGGREGATE_828INVENTORY1_P_3.addOrDelOnZero(se5306.modify(inventory_locn), (v1876 * (v1877 * (census_husbwife * census_males))));
            } while ((n1877 = n1877->nxt));
          }
          e1876 = e1876->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_829INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1878 = LOCATION.head;
        while (e1878) {
          long inventory_locn = e1878->LOCATION_LOCN;
          long location_zip = e1878->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1878->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1878->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1878->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1878->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1878->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1878->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1878->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1878->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1878->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1878->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1878->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1878->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1878->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1878 = e1878->__av;
          { //slice
            const HASH_RES_t h453 = CENSUS_mapkey0_idxfn::hash(se5309.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1879 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1879 = &(i1879->buckets_[h453 % i1879->size_]);
            CENSUS_entry* e1879;
            do if ((e1879 = n1879->obj) && h453 == n1879->hash && CENSUS_mapkey0_idxfn::equals(se5309, *e1879)) {
              long census_population = e1879->CENSUS_POPULATION;
              long census_white = e1879->CENSUS_WHITE;
              long census_asian = e1879->CENSUS_ASIAN;
              long census_pacific = e1879->CENSUS_PACIFIC;
              long census_blackafrican = e1879->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1879->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1879->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1879->CENSUS_HOUSEUNITS;
              long census_families = e1879->CENSUS_FAMILIES;
              long census_households = e1879->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1879->CENSUS_HUSBWIFE;
              long census_males = e1879->CENSUS_MALES;
              long census_females = e1879->CENSUS_FEMALES;
              long census_householdschildren = e1879->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1879->CENSUS_HISPANIC;
              long v1879 = e1879->__av;
              __SQL_SUM_AGGREGATE_829INVENTORY1_P_3.addOrDelOnZero(se5308.modify(inventory_locn), (v1878 * (v1879 * (census_husbwife * census_females))));
            } while ((n1879 = n1879->nxt));
          }
          e1878 = e1878->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_830INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1880 = LOCATION.head;
        while (e1880) {
          long inventory_locn = e1880->LOCATION_LOCN;
          long location_zip = e1880->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1880->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1880->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1880->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1880->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1880->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1880->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1880->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1880->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1880->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1880->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1880->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1880->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1880->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1880 = e1880->__av;
          { //slice
            const HASH_RES_t h454 = CENSUS_mapkey0_idxfn::hash(se5311.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1881 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1881 = &(i1881->buckets_[h454 % i1881->size_]);
            CENSUS_entry* e1881;
            do if ((e1881 = n1881->obj) && h454 == n1881->hash && CENSUS_mapkey0_idxfn::equals(se5311, *e1881)) {
              long census_population = e1881->CENSUS_POPULATION;
              long census_white = e1881->CENSUS_WHITE;
              long census_asian = e1881->CENSUS_ASIAN;
              long census_pacific = e1881->CENSUS_PACIFIC;
              long census_blackafrican = e1881->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1881->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1881->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1881->CENSUS_HOUSEUNITS;
              long census_families = e1881->CENSUS_FAMILIES;
              long census_households = e1881->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1881->CENSUS_HUSBWIFE;
              long census_males = e1881->CENSUS_MALES;
              long census_females = e1881->CENSUS_FEMALES;
              long census_householdschildren = e1881->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1881->CENSUS_HISPANIC;
              long v1881 = e1881->__av;
              __SQL_SUM_AGGREGATE_830INVENTORY1_P_3.addOrDelOnZero(se5310.modify(inventory_locn), (v1880 * (v1881 * (census_husbwife * census_householdschildren))));
            } while ((n1881 = n1881->nxt));
          }
          e1880 = e1880->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_831INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1882 = LOCATION.head;
        while (e1882) {
          long inventory_locn = e1882->LOCATION_LOCN;
          long location_zip = e1882->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1882->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1882->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1882->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1882->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1882->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1882->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1882->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1882->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1882->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1882->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1882->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1882->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1882->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1882 = e1882->__av;
          { //slice
            const HASH_RES_t h455 = CENSUS_mapkey0_idxfn::hash(se5313.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1883 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1883 = &(i1883->buckets_[h455 % i1883->size_]);
            CENSUS_entry* e1883;
            do if ((e1883 = n1883->obj) && h455 == n1883->hash && CENSUS_mapkey0_idxfn::equals(se5313, *e1883)) {
              long census_population = e1883->CENSUS_POPULATION;
              long census_white = e1883->CENSUS_WHITE;
              long census_asian = e1883->CENSUS_ASIAN;
              long census_pacific = e1883->CENSUS_PACIFIC;
              long census_blackafrican = e1883->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1883->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1883->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1883->CENSUS_HOUSEUNITS;
              long census_families = e1883->CENSUS_FAMILIES;
              long census_households = e1883->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1883->CENSUS_HUSBWIFE;
              long census_males = e1883->CENSUS_MALES;
              long census_females = e1883->CENSUS_FEMALES;
              long census_householdschildren = e1883->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1883->CENSUS_HISPANIC;
              long v1883 = e1883->__av;
              __SQL_SUM_AGGREGATE_831INVENTORY1_P_3.addOrDelOnZero(se5312.modify(inventory_locn), (v1882 * (v1883 * (census_husbwife * census_hispanic))));
            } while ((n1883 = n1883->nxt));
          }
          e1882 = e1882->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_835 = 0.0;
      __SQL_SUM_AGGREGATE_840 = 0.0;
      __SQL_SUM_AGGREGATE_842INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1884 = LOCATION.head;
        while (e1884) {
          long inventory_locn = e1884->LOCATION_LOCN;
          long location_zip = e1884->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1884->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1884->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1884->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1884->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1884->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1884->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1884->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1884->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1884->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1884->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1884->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1884->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1884->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1884 = e1884->__av;
          { //slice
            const HASH_RES_t h456 = CENSUS_mapkey0_idxfn::hash(se5317.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1885 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1885 = &(i1885->buckets_[h456 % i1885->size_]);
            CENSUS_entry* e1885;
            do if ((e1885 = n1885->obj) && h456 == n1885->hash && CENSUS_mapkey0_idxfn::equals(se5317, *e1885)) {
              long census_population = e1885->CENSUS_POPULATION;
              long census_white = e1885->CENSUS_WHITE;
              long census_asian = e1885->CENSUS_ASIAN;
              long census_pacific = e1885->CENSUS_PACIFIC;
              long census_blackafrican = e1885->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1885->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1885->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1885->CENSUS_HOUSEUNITS;
              long census_families = e1885->CENSUS_FAMILIES;
              long census_households = e1885->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1885->CENSUS_HUSBWIFE;
              long census_males = e1885->CENSUS_MALES;
              long census_females = e1885->CENSUS_FEMALES;
              long census_householdschildren = e1885->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1885->CENSUS_HISPANIC;
              long v1885 = e1885->__av;
              __SQL_SUM_AGGREGATE_842INVENTORY1_P_3.addOrDelOnZero(se5316.modify(inventory_locn), (v1884 * (v1885 * (census_males * census_males))));
            } while ((n1885 = n1885->nxt));
          }
          e1884 = e1884->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_843INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1886 = LOCATION.head;
        while (e1886) {
          long inventory_locn = e1886->LOCATION_LOCN;
          long location_zip = e1886->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1886->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1886->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1886->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1886->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1886->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1886->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1886->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1886->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1886->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1886->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1886->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1886->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1886->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1886 = e1886->__av;
          { //slice
            const HASH_RES_t h457 = CENSUS_mapkey0_idxfn::hash(se5319.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1887 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1887 = &(i1887->buckets_[h457 % i1887->size_]);
            CENSUS_entry* e1887;
            do if ((e1887 = n1887->obj) && h457 == n1887->hash && CENSUS_mapkey0_idxfn::equals(se5319, *e1887)) {
              long census_population = e1887->CENSUS_POPULATION;
              long census_white = e1887->CENSUS_WHITE;
              long census_asian = e1887->CENSUS_ASIAN;
              long census_pacific = e1887->CENSUS_PACIFIC;
              long census_blackafrican = e1887->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1887->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1887->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1887->CENSUS_HOUSEUNITS;
              long census_families = e1887->CENSUS_FAMILIES;
              long census_households = e1887->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1887->CENSUS_HUSBWIFE;
              long census_males = e1887->CENSUS_MALES;
              long census_females = e1887->CENSUS_FEMALES;
              long census_householdschildren = e1887->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1887->CENSUS_HISPANIC;
              long v1887 = e1887->__av;
              __SQL_SUM_AGGREGATE_843INVENTORY1_P_3.addOrDelOnZero(se5318.modify(inventory_locn), (v1886 * (v1887 * (census_males * census_females))));
            } while ((n1887 = n1887->nxt));
          }
          e1886 = e1886->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_844INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1888 = LOCATION.head;
        while (e1888) {
          long inventory_locn = e1888->LOCATION_LOCN;
          long location_zip = e1888->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1888->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1888->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1888->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1888->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1888->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1888->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1888->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1888->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1888->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1888->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1888->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1888->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1888->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1888 = e1888->__av;
          { //slice
            const HASH_RES_t h458 = CENSUS_mapkey0_idxfn::hash(se5321.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1889 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1889 = &(i1889->buckets_[h458 % i1889->size_]);
            CENSUS_entry* e1889;
            do if ((e1889 = n1889->obj) && h458 == n1889->hash && CENSUS_mapkey0_idxfn::equals(se5321, *e1889)) {
              long census_population = e1889->CENSUS_POPULATION;
              long census_white = e1889->CENSUS_WHITE;
              long census_asian = e1889->CENSUS_ASIAN;
              long census_pacific = e1889->CENSUS_PACIFIC;
              long census_blackafrican = e1889->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1889->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1889->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1889->CENSUS_HOUSEUNITS;
              long census_families = e1889->CENSUS_FAMILIES;
              long census_households = e1889->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1889->CENSUS_HUSBWIFE;
              long census_males = e1889->CENSUS_MALES;
              long census_females = e1889->CENSUS_FEMALES;
              long census_householdschildren = e1889->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1889->CENSUS_HISPANIC;
              long v1889 = e1889->__av;
              __SQL_SUM_AGGREGATE_844INVENTORY1_P_3.addOrDelOnZero(se5320.modify(inventory_locn), (v1888 * (v1889 * (census_males * census_householdschildren))));
            } while ((n1889 = n1889->nxt));
          }
          e1888 = e1888->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_845INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1890 = LOCATION.head;
        while (e1890) {
          long inventory_locn = e1890->LOCATION_LOCN;
          long location_zip = e1890->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1890->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1890->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1890->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1890->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1890->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1890->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1890->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1890->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1890->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1890->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1890->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1890->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1890->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1890 = e1890->__av;
          { //slice
            const HASH_RES_t h459 = CENSUS_mapkey0_idxfn::hash(se5323.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1891 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1891 = &(i1891->buckets_[h459 % i1891->size_]);
            CENSUS_entry* e1891;
            do if ((e1891 = n1891->obj) && h459 == n1891->hash && CENSUS_mapkey0_idxfn::equals(se5323, *e1891)) {
              long census_population = e1891->CENSUS_POPULATION;
              long census_white = e1891->CENSUS_WHITE;
              long census_asian = e1891->CENSUS_ASIAN;
              long census_pacific = e1891->CENSUS_PACIFIC;
              long census_blackafrican = e1891->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1891->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1891->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1891->CENSUS_HOUSEUNITS;
              long census_families = e1891->CENSUS_FAMILIES;
              long census_households = e1891->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1891->CENSUS_HUSBWIFE;
              long census_males = e1891->CENSUS_MALES;
              long census_females = e1891->CENSUS_FEMALES;
              long census_householdschildren = e1891->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1891->CENSUS_HISPANIC;
              long v1891 = e1891->__av;
              __SQL_SUM_AGGREGATE_845INVENTORY1_P_3.addOrDelOnZero(se5322.modify(inventory_locn), (v1890 * (v1891 * (census_males * census_hispanic))));
            } while ((n1891 = n1891->nxt));
          }
          e1890 = e1890->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_849 = 0.0;
      __SQL_SUM_AGGREGATE_854 = 0.0;
      __SQL_SUM_AGGREGATE_856INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1892 = LOCATION.head;
        while (e1892) {
          long inventory_locn = e1892->LOCATION_LOCN;
          long location_zip = e1892->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1892->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1892->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1892->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1892->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1892->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1892->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1892->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1892->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1892->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1892->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1892->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1892->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1892->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1892 = e1892->__av;
          { //slice
            const HASH_RES_t h460 = CENSUS_mapkey0_idxfn::hash(se5327.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1893 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1893 = &(i1893->buckets_[h460 % i1893->size_]);
            CENSUS_entry* e1893;
            do if ((e1893 = n1893->obj) && h460 == n1893->hash && CENSUS_mapkey0_idxfn::equals(se5327, *e1893)) {
              long census_population = e1893->CENSUS_POPULATION;
              long census_white = e1893->CENSUS_WHITE;
              long census_asian = e1893->CENSUS_ASIAN;
              long census_pacific = e1893->CENSUS_PACIFIC;
              long census_blackafrican = e1893->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1893->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1893->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1893->CENSUS_HOUSEUNITS;
              long census_families = e1893->CENSUS_FAMILIES;
              long census_households = e1893->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1893->CENSUS_HUSBWIFE;
              long census_males = e1893->CENSUS_MALES;
              long census_females = e1893->CENSUS_FEMALES;
              long census_householdschildren = e1893->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1893->CENSUS_HISPANIC;
              long v1893 = e1893->__av;
              __SQL_SUM_AGGREGATE_856INVENTORY1_P_3.addOrDelOnZero(se5326.modify(inventory_locn), (v1892 * (v1893 * (census_females * census_females))));
            } while ((n1893 = n1893->nxt));
          }
          e1892 = e1892->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_857INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1894 = LOCATION.head;
        while (e1894) {
          long inventory_locn = e1894->LOCATION_LOCN;
          long location_zip = e1894->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1894->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1894->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1894->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1894->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1894->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1894->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1894->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1894->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1894->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1894->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1894->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1894->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1894->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1894 = e1894->__av;
          { //slice
            const HASH_RES_t h461 = CENSUS_mapkey0_idxfn::hash(se5329.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1895 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1895 = &(i1895->buckets_[h461 % i1895->size_]);
            CENSUS_entry* e1895;
            do if ((e1895 = n1895->obj) && h461 == n1895->hash && CENSUS_mapkey0_idxfn::equals(se5329, *e1895)) {
              long census_population = e1895->CENSUS_POPULATION;
              long census_white = e1895->CENSUS_WHITE;
              long census_asian = e1895->CENSUS_ASIAN;
              long census_pacific = e1895->CENSUS_PACIFIC;
              long census_blackafrican = e1895->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1895->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1895->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1895->CENSUS_HOUSEUNITS;
              long census_families = e1895->CENSUS_FAMILIES;
              long census_households = e1895->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1895->CENSUS_HUSBWIFE;
              long census_males = e1895->CENSUS_MALES;
              long census_females = e1895->CENSUS_FEMALES;
              long census_householdschildren = e1895->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1895->CENSUS_HISPANIC;
              long v1895 = e1895->__av;
              __SQL_SUM_AGGREGATE_857INVENTORY1_P_3.addOrDelOnZero(se5328.modify(inventory_locn), (v1894 * (v1895 * (census_females * census_householdschildren))));
            } while ((n1895 = n1895->nxt));
          }
          e1894 = e1894->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_858INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1896 = LOCATION.head;
        while (e1896) {
          long inventory_locn = e1896->LOCATION_LOCN;
          long location_zip = e1896->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1896->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1896->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1896->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1896->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1896->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1896->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1896->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1896->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1896->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1896->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1896->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1896->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1896->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1896 = e1896->__av;
          { //slice
            const HASH_RES_t h462 = CENSUS_mapkey0_idxfn::hash(se5331.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1897 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1897 = &(i1897->buckets_[h462 % i1897->size_]);
            CENSUS_entry* e1897;
            do if ((e1897 = n1897->obj) && h462 == n1897->hash && CENSUS_mapkey0_idxfn::equals(se5331, *e1897)) {
              long census_population = e1897->CENSUS_POPULATION;
              long census_white = e1897->CENSUS_WHITE;
              long census_asian = e1897->CENSUS_ASIAN;
              long census_pacific = e1897->CENSUS_PACIFIC;
              long census_blackafrican = e1897->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1897->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1897->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1897->CENSUS_HOUSEUNITS;
              long census_families = e1897->CENSUS_FAMILIES;
              long census_households = e1897->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1897->CENSUS_HUSBWIFE;
              long census_males = e1897->CENSUS_MALES;
              long census_females = e1897->CENSUS_FEMALES;
              long census_householdschildren = e1897->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1897->CENSUS_HISPANIC;
              long v1897 = e1897->__av;
              __SQL_SUM_AGGREGATE_858INVENTORY1_P_3.addOrDelOnZero(se5330.modify(inventory_locn), (v1896 * (v1897 * (census_females * census_hispanic))));
            } while ((n1897 = n1897->nxt));
          }
          e1896 = e1896->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_862 = 0.0;
      __SQL_SUM_AGGREGATE_867 = 0.0;
      __SQL_SUM_AGGREGATE_869INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1898 = LOCATION.head;
        while (e1898) {
          long inventory_locn = e1898->LOCATION_LOCN;
          long location_zip = e1898->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1898->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1898->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1898->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1898->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1898->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1898->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1898->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1898->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1898->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1898->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1898->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1898->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1898->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1898 = e1898->__av;
          { //slice
            const HASH_RES_t h463 = CENSUS_mapkey0_idxfn::hash(se5335.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1899 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1899 = &(i1899->buckets_[h463 % i1899->size_]);
            CENSUS_entry* e1899;
            do if ((e1899 = n1899->obj) && h463 == n1899->hash && CENSUS_mapkey0_idxfn::equals(se5335, *e1899)) {
              long census_population = e1899->CENSUS_POPULATION;
              long census_white = e1899->CENSUS_WHITE;
              long census_asian = e1899->CENSUS_ASIAN;
              long census_pacific = e1899->CENSUS_PACIFIC;
              long census_blackafrican = e1899->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1899->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1899->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1899->CENSUS_HOUSEUNITS;
              long census_families = e1899->CENSUS_FAMILIES;
              long census_households = e1899->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1899->CENSUS_HUSBWIFE;
              long census_males = e1899->CENSUS_MALES;
              long census_females = e1899->CENSUS_FEMALES;
              long census_householdschildren = e1899->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1899->CENSUS_HISPANIC;
              long v1899 = e1899->__av;
              __SQL_SUM_AGGREGATE_869INVENTORY1_P_3.addOrDelOnZero(se5334.modify(inventory_locn), (v1898 * (v1899 * (census_householdschildren * census_householdschildren))));
            } while ((n1899 = n1899->nxt));
          }
          e1898 = e1898->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_870INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1900 = LOCATION.head;
        while (e1900) {
          long inventory_locn = e1900->LOCATION_LOCN;
          long location_zip = e1900->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1900->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1900->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1900->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1900->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1900->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1900->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1900->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1900->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1900->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1900->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1900->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1900->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1900->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1900 = e1900->__av;
          { //slice
            const HASH_RES_t h464 = CENSUS_mapkey0_idxfn::hash(se5337.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1901 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1901 = &(i1901->buckets_[h464 % i1901->size_]);
            CENSUS_entry* e1901;
            do if ((e1901 = n1901->obj) && h464 == n1901->hash && CENSUS_mapkey0_idxfn::equals(se5337, *e1901)) {
              long census_population = e1901->CENSUS_POPULATION;
              long census_white = e1901->CENSUS_WHITE;
              long census_asian = e1901->CENSUS_ASIAN;
              long census_pacific = e1901->CENSUS_PACIFIC;
              long census_blackafrican = e1901->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1901->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1901->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1901->CENSUS_HOUSEUNITS;
              long census_families = e1901->CENSUS_FAMILIES;
              long census_households = e1901->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1901->CENSUS_HUSBWIFE;
              long census_males = e1901->CENSUS_MALES;
              long census_females = e1901->CENSUS_FEMALES;
              long census_householdschildren = e1901->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1901->CENSUS_HISPANIC;
              long v1901 = e1901->__av;
              __SQL_SUM_AGGREGATE_870INVENTORY1_P_3.addOrDelOnZero(se5336.modify(inventory_locn), (v1900 * (v1901 * (census_householdschildren * census_hispanic))));
            } while ((n1901 = n1901->nxt));
          }
          e1900 = e1900->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_874 = 0.0;
      __SQL_SUM_AGGREGATE_879 = 0.0;
      __SQL_SUM_AGGREGATE_881INVENTORY1_P_3.clear();
      { //foreach
        LOCATION_entry* e1902 = LOCATION.head;
        while (e1902) {
          long inventory_locn = e1902->LOCATION_LOCN;
          long location_zip = e1902->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1902->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1902->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1902->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1902->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1902->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1902->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1902->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1902->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1902->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1902->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1902->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1902->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1902->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1902 = e1902->__av;
          { //slice
            const HASH_RES_t h465 = CENSUS_mapkey0_idxfn::hash(se5341.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i1903 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n1903 = &(i1903->buckets_[h465 % i1903->size_]);
            CENSUS_entry* e1903;
            do if ((e1903 = n1903->obj) && h465 == n1903->hash && CENSUS_mapkey0_idxfn::equals(se5341, *e1903)) {
              long census_population = e1903->CENSUS_POPULATION;
              long census_white = e1903->CENSUS_WHITE;
              long census_asian = e1903->CENSUS_ASIAN;
              long census_pacific = e1903->CENSUS_PACIFIC;
              long census_blackafrican = e1903->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e1903->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e1903->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e1903->CENSUS_HOUSEUNITS;
              long census_families = e1903->CENSUS_FAMILIES;
              long census_households = e1903->CENSUS_HOUSEHOLDS;
              long census_husbwife = e1903->CENSUS_HUSBWIFE;
              long census_males = e1903->CENSUS_MALES;
              long census_females = e1903->CENSUS_FEMALES;
              long census_householdschildren = e1903->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e1903->CENSUS_HISPANIC;
              long v1903 = e1903->__av;
              __SQL_SUM_AGGREGATE_881INVENTORY1_P_3.addOrDelOnZero(se5340.modify(inventory_locn), (v1902 * (v1903 * (census_hispanic * census_hispanic))));
            } while ((n1903 = n1903->nxt));
          }
          e1902 = e1902->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_885 = 0.0;
      __SQL_SUM_AGGREGATE_890 = 0.0;
      __SQL_SUM_AGGREGATE_892INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1904 = ITEM.head;
        while (e1904) {
          DOUBLE_TYPE inventory_ksn = e1904->ITEM_KSN;
          long item_subcategory = e1904->ITEM_SUBCATEGORY;
          long item_category = e1904->ITEM_CATEGORY;
          long item_categorycluster = e1904->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1904->ITEM_PRIZE;
          long v1904 = e1904->__av;
          __SQL_SUM_AGGREGATE_892INVENTORY1_P_2.addOrDelOnZero(se5344.modify(inventory_ksn), (v1904 * (item_subcategory * item_subcategory)));
          e1904 = e1904->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_893INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1905 = ITEM.head;
        while (e1905) {
          DOUBLE_TYPE inventory_ksn = e1905->ITEM_KSN;
          long item_subcategory = e1905->ITEM_SUBCATEGORY;
          long item_category = e1905->ITEM_CATEGORY;
          long item_categorycluster = e1905->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1905->ITEM_PRIZE;
          long v1905 = e1905->__av;
          __SQL_SUM_AGGREGATE_893INVENTORY1_P_2.addOrDelOnZero(se5345.modify(inventory_ksn), (v1905 * (item_subcategory * item_category)));
          e1905 = e1905->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_894INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1906 = ITEM.head;
        while (e1906) {
          DOUBLE_TYPE inventory_ksn = e1906->ITEM_KSN;
          long item_subcategory = e1906->ITEM_SUBCATEGORY;
          long item_category = e1906->ITEM_CATEGORY;
          long item_categorycluster = e1906->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1906->ITEM_PRIZE;
          long v1906 = e1906->__av;
          __SQL_SUM_AGGREGATE_894INVENTORY1_P_2.addOrDelOnZero(se5346.modify(inventory_ksn), (v1906 * (item_subcategory * item_categorycluster)));
          e1906 = e1906->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_895 = 0.0;
      __SQL_SUM_AGGREGATE_895INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1907 = ITEM.head;
        while (e1907) {
          DOUBLE_TYPE inventory_ksn = e1907->ITEM_KSN;
          long item_subcategory = e1907->ITEM_SUBCATEGORY;
          long item_category = e1907->ITEM_CATEGORY;
          long item_categorycluster = e1907->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1907->ITEM_PRIZE;
          long v1907 = e1907->__av;
          __SQL_SUM_AGGREGATE_895INVENTORY1_P_2.addOrDelOnZero(se5348.modify(inventory_ksn), (v1907 * (item_subcategory * item_prize)));
          e1907 = e1907->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_900 = 0.0;
      __SQL_SUM_AGGREGATE_902INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1908 = ITEM.head;
        while (e1908) {
          DOUBLE_TYPE inventory_ksn = e1908->ITEM_KSN;
          long item_subcategory = e1908->ITEM_SUBCATEGORY;
          long item_category = e1908->ITEM_CATEGORY;
          long item_categorycluster = e1908->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1908->ITEM_PRIZE;
          long v1908 = e1908->__av;
          __SQL_SUM_AGGREGATE_902INVENTORY1_P_2.addOrDelOnZero(se5350.modify(inventory_ksn), (v1908 * (item_category * item_category)));
          e1908 = e1908->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_903INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1909 = ITEM.head;
        while (e1909) {
          DOUBLE_TYPE inventory_ksn = e1909->ITEM_KSN;
          long item_subcategory = e1909->ITEM_SUBCATEGORY;
          long item_category = e1909->ITEM_CATEGORY;
          long item_categorycluster = e1909->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1909->ITEM_PRIZE;
          long v1909 = e1909->__av;
          __SQL_SUM_AGGREGATE_903INVENTORY1_P_2.addOrDelOnZero(se5351.modify(inventory_ksn), (v1909 * (item_category * item_categorycluster)));
          e1909 = e1909->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_904 = 0.0;
      __SQL_SUM_AGGREGATE_904INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1910 = ITEM.head;
        while (e1910) {
          DOUBLE_TYPE inventory_ksn = e1910->ITEM_KSN;
          long item_subcategory = e1910->ITEM_SUBCATEGORY;
          long item_category = e1910->ITEM_CATEGORY;
          long item_categorycluster = e1910->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1910->ITEM_PRIZE;
          long v1910 = e1910->__av;
          __SQL_SUM_AGGREGATE_904INVENTORY1_P_2.addOrDelOnZero(se5353.modify(inventory_ksn), (v1910 * (item_category * item_prize)));
          e1910 = e1910->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_909 = 0.0;
      __SQL_SUM_AGGREGATE_911INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1911 = ITEM.head;
        while (e1911) {
          DOUBLE_TYPE inventory_ksn = e1911->ITEM_KSN;
          long item_subcategory = e1911->ITEM_SUBCATEGORY;
          long item_category = e1911->ITEM_CATEGORY;
          long item_categorycluster = e1911->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1911->ITEM_PRIZE;
          long v1911 = e1911->__av;
          __SQL_SUM_AGGREGATE_911INVENTORY1_P_2.addOrDelOnZero(se5355.modify(inventory_ksn), (v1911 * (item_categorycluster * item_categorycluster)));
          e1911 = e1911->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_912 = 0.0;
      __SQL_SUM_AGGREGATE_912INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1912 = ITEM.head;
        while (e1912) {
          DOUBLE_TYPE inventory_ksn = e1912->ITEM_KSN;
          long item_subcategory = e1912->ITEM_SUBCATEGORY;
          long item_category = e1912->ITEM_CATEGORY;
          long item_categorycluster = e1912->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1912->ITEM_PRIZE;
          long v1912 = e1912->__av;
          __SQL_SUM_AGGREGATE_912INVENTORY1_P_2.addOrDelOnZero(se5357.modify(inventory_ksn), (v1912 * (item_categorycluster * item_prize)));
          e1912 = e1912->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_917 = 0.0;
      __SQL_SUM_AGGREGATE_919 = 0.0;
      __SQL_SUM_AGGREGATE_919INVENTORY1_P_2.clear();
      { //foreach
        ITEM_entry* e1913 = ITEM.head;
        while (e1913) {
          DOUBLE_TYPE inventory_ksn = e1913->ITEM_KSN;
          long item_subcategory = e1913->ITEM_SUBCATEGORY;
          long item_category = e1913->ITEM_CATEGORY;
          long item_categorycluster = e1913->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e1913->ITEM_PRIZE;
          long v1913 = e1913->__av;
          __SQL_SUM_AGGREGATE_919INVENTORY1_P_2.addOrDelOnZero(se5360.modify(inventory_ksn), (v1913 * (item_prize * item_prize)));
          e1913 = e1913->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_920 = 0.0;
      __SQL_SUM_AGGREGATE_921 = 0.0;
      __SQL_SUM_AGGREGATE_922 = 0.0;
      __SQL_SUM_AGGREGATE_923 = 0.0;
      __SQL_SUM_AGGREGATE_924 = 0.0;
      __SQL_SUM_AGGREGATE_925 = 0.0;
      __SQL_SUM_AGGREGATE_926INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1914 = WEATHER.head;
        while (e1914) {
          long inventory_locn = e1914->WEATHER_LOCN;
          long inventory_dateid = e1914->WEATHER_DATEID;
          long weather_rain = e1914->WEATHER_RAIN;
          long weather_snow = e1914->WEATHER_SNOW;
          long weather_maxtemp = e1914->WEATHER_MAXTEMP;
          long weather_mintemp = e1914->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1914->WEATHER_MEANWIND;
          long weather_thunder = e1914->WEATHER_THUNDER;
          long v1914 = e1914->__av;
          __SQL_SUM_AGGREGATE_926INVENTORY1_P_1.addOrDelOnZero(se5367.modify(inventory_locn, inventory_dateid), (v1914 * (weather_rain * weather_rain)));
          e1914 = e1914->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_927INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1915 = WEATHER.head;
        while (e1915) {
          long inventory_locn = e1915->WEATHER_LOCN;
          long inventory_dateid = e1915->WEATHER_DATEID;
          long weather_rain = e1915->WEATHER_RAIN;
          long weather_snow = e1915->WEATHER_SNOW;
          long weather_maxtemp = e1915->WEATHER_MAXTEMP;
          long weather_mintemp = e1915->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1915->WEATHER_MEANWIND;
          long weather_thunder = e1915->WEATHER_THUNDER;
          long v1915 = e1915->__av;
          __SQL_SUM_AGGREGATE_927INVENTORY1_P_1.addOrDelOnZero(se5368.modify(inventory_locn, inventory_dateid), (v1915 * (weather_rain * weather_snow)));
          e1915 = e1915->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_928INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1916 = WEATHER.head;
        while (e1916) {
          long inventory_locn = e1916->WEATHER_LOCN;
          long inventory_dateid = e1916->WEATHER_DATEID;
          long weather_rain = e1916->WEATHER_RAIN;
          long weather_snow = e1916->WEATHER_SNOW;
          long weather_maxtemp = e1916->WEATHER_MAXTEMP;
          long weather_mintemp = e1916->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1916->WEATHER_MEANWIND;
          long weather_thunder = e1916->WEATHER_THUNDER;
          long v1916 = e1916->__av;
          __SQL_SUM_AGGREGATE_928INVENTORY1_P_1.addOrDelOnZero(se5369.modify(inventory_locn, inventory_dateid), (v1916 * (weather_rain * weather_maxtemp)));
          e1916 = e1916->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_929INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1917 = WEATHER.head;
        while (e1917) {
          long inventory_locn = e1917->WEATHER_LOCN;
          long inventory_dateid = e1917->WEATHER_DATEID;
          long weather_rain = e1917->WEATHER_RAIN;
          long weather_snow = e1917->WEATHER_SNOW;
          long weather_maxtemp = e1917->WEATHER_MAXTEMP;
          long weather_mintemp = e1917->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1917->WEATHER_MEANWIND;
          long weather_thunder = e1917->WEATHER_THUNDER;
          long v1917 = e1917->__av;
          __SQL_SUM_AGGREGATE_929INVENTORY1_P_1.addOrDelOnZero(se5370.modify(inventory_locn, inventory_dateid), (v1917 * (weather_rain * weather_mintemp)));
          e1917 = e1917->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_930 = 0.0;
      __SQL_SUM_AGGREGATE_930INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1918 = WEATHER.head;
        while (e1918) {
          long inventory_locn = e1918->WEATHER_LOCN;
          long inventory_dateid = e1918->WEATHER_DATEID;
          long weather_rain = e1918->WEATHER_RAIN;
          long weather_snow = e1918->WEATHER_SNOW;
          long weather_maxtemp = e1918->WEATHER_MAXTEMP;
          long weather_mintemp = e1918->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1918->WEATHER_MEANWIND;
          long weather_thunder = e1918->WEATHER_THUNDER;
          long v1918 = e1918->__av;
          __SQL_SUM_AGGREGATE_930INVENTORY1_P_1.addOrDelOnZero(se5372.modify(inventory_locn, inventory_dateid), (v1918 * (weather_rain * weather_meanwind)));
          e1918 = e1918->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_931INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1919 = WEATHER.head;
        while (e1919) {
          long inventory_locn = e1919->WEATHER_LOCN;
          long inventory_dateid = e1919->WEATHER_DATEID;
          long weather_rain = e1919->WEATHER_RAIN;
          long weather_snow = e1919->WEATHER_SNOW;
          long weather_maxtemp = e1919->WEATHER_MAXTEMP;
          long weather_mintemp = e1919->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1919->WEATHER_MEANWIND;
          long weather_thunder = e1919->WEATHER_THUNDER;
          long v1919 = e1919->__av;
          __SQL_SUM_AGGREGATE_931INVENTORY1_P_1.addOrDelOnZero(se5373.modify(inventory_locn, inventory_dateid), (v1919 * (weather_rain * weather_thunder)));
          e1919 = e1919->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_932INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1920 = WEATHER.head;
        while (e1920) {
          long inventory_locn = e1920->WEATHER_LOCN;
          long inventory_dateid = e1920->WEATHER_DATEID;
          long weather_rain = e1920->WEATHER_RAIN;
          long weather_snow = e1920->WEATHER_SNOW;
          long weather_maxtemp = e1920->WEATHER_MAXTEMP;
          long weather_mintemp = e1920->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1920->WEATHER_MEANWIND;
          long weather_thunder = e1920->WEATHER_THUNDER;
          long v1920 = e1920->__av;
          __SQL_SUM_AGGREGATE_932INVENTORY1_P_1.addOrDelOnZero(se5374.modify(inventory_locn, inventory_dateid), (v1920 * (weather_snow * weather_snow)));
          e1920 = e1920->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_933INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1921 = WEATHER.head;
        while (e1921) {
          long inventory_locn = e1921->WEATHER_LOCN;
          long inventory_dateid = e1921->WEATHER_DATEID;
          long weather_rain = e1921->WEATHER_RAIN;
          long weather_snow = e1921->WEATHER_SNOW;
          long weather_maxtemp = e1921->WEATHER_MAXTEMP;
          long weather_mintemp = e1921->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1921->WEATHER_MEANWIND;
          long weather_thunder = e1921->WEATHER_THUNDER;
          long v1921 = e1921->__av;
          __SQL_SUM_AGGREGATE_933INVENTORY1_P_1.addOrDelOnZero(se5375.modify(inventory_locn, inventory_dateid), (v1921 * (weather_snow * weather_maxtemp)));
          e1921 = e1921->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_934INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1922 = WEATHER.head;
        while (e1922) {
          long inventory_locn = e1922->WEATHER_LOCN;
          long inventory_dateid = e1922->WEATHER_DATEID;
          long weather_rain = e1922->WEATHER_RAIN;
          long weather_snow = e1922->WEATHER_SNOW;
          long weather_maxtemp = e1922->WEATHER_MAXTEMP;
          long weather_mintemp = e1922->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1922->WEATHER_MEANWIND;
          long weather_thunder = e1922->WEATHER_THUNDER;
          long v1922 = e1922->__av;
          __SQL_SUM_AGGREGATE_934INVENTORY1_P_1.addOrDelOnZero(se5376.modify(inventory_locn, inventory_dateid), (v1922 * (weather_snow * weather_mintemp)));
          e1922 = e1922->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_935 = 0.0;
      __SQL_SUM_AGGREGATE_935INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1923 = WEATHER.head;
        while (e1923) {
          long inventory_locn = e1923->WEATHER_LOCN;
          long inventory_dateid = e1923->WEATHER_DATEID;
          long weather_rain = e1923->WEATHER_RAIN;
          long weather_snow = e1923->WEATHER_SNOW;
          long weather_maxtemp = e1923->WEATHER_MAXTEMP;
          long weather_mintemp = e1923->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1923->WEATHER_MEANWIND;
          long weather_thunder = e1923->WEATHER_THUNDER;
          long v1923 = e1923->__av;
          __SQL_SUM_AGGREGATE_935INVENTORY1_P_1.addOrDelOnZero(se5378.modify(inventory_locn, inventory_dateid), (v1923 * (weather_snow * weather_meanwind)));
          e1923 = e1923->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_936INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1924 = WEATHER.head;
        while (e1924) {
          long inventory_locn = e1924->WEATHER_LOCN;
          long inventory_dateid = e1924->WEATHER_DATEID;
          long weather_rain = e1924->WEATHER_RAIN;
          long weather_snow = e1924->WEATHER_SNOW;
          long weather_maxtemp = e1924->WEATHER_MAXTEMP;
          long weather_mintemp = e1924->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1924->WEATHER_MEANWIND;
          long weather_thunder = e1924->WEATHER_THUNDER;
          long v1924 = e1924->__av;
          __SQL_SUM_AGGREGATE_936INVENTORY1_P_1.addOrDelOnZero(se5379.modify(inventory_locn, inventory_dateid), (v1924 * (weather_snow * weather_thunder)));
          e1924 = e1924->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_937INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1925 = WEATHER.head;
        while (e1925) {
          long inventory_locn = e1925->WEATHER_LOCN;
          long inventory_dateid = e1925->WEATHER_DATEID;
          long weather_rain = e1925->WEATHER_RAIN;
          long weather_snow = e1925->WEATHER_SNOW;
          long weather_maxtemp = e1925->WEATHER_MAXTEMP;
          long weather_mintemp = e1925->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1925->WEATHER_MEANWIND;
          long weather_thunder = e1925->WEATHER_THUNDER;
          long v1925 = e1925->__av;
          __SQL_SUM_AGGREGATE_937INVENTORY1_P_1.addOrDelOnZero(se5380.modify(inventory_locn, inventory_dateid), (v1925 * (weather_maxtemp * weather_maxtemp)));
          e1925 = e1925->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_938INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1926 = WEATHER.head;
        while (e1926) {
          long inventory_locn = e1926->WEATHER_LOCN;
          long inventory_dateid = e1926->WEATHER_DATEID;
          long weather_rain = e1926->WEATHER_RAIN;
          long weather_snow = e1926->WEATHER_SNOW;
          long weather_maxtemp = e1926->WEATHER_MAXTEMP;
          long weather_mintemp = e1926->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1926->WEATHER_MEANWIND;
          long weather_thunder = e1926->WEATHER_THUNDER;
          long v1926 = e1926->__av;
          __SQL_SUM_AGGREGATE_938INVENTORY1_P_1.addOrDelOnZero(se5381.modify(inventory_locn, inventory_dateid), (v1926 * (weather_maxtemp * weather_mintemp)));
          e1926 = e1926->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_939 = 0.0;
      __SQL_SUM_AGGREGATE_939INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1927 = WEATHER.head;
        while (e1927) {
          long inventory_locn = e1927->WEATHER_LOCN;
          long inventory_dateid = e1927->WEATHER_DATEID;
          long weather_rain = e1927->WEATHER_RAIN;
          long weather_snow = e1927->WEATHER_SNOW;
          long weather_maxtemp = e1927->WEATHER_MAXTEMP;
          long weather_mintemp = e1927->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1927->WEATHER_MEANWIND;
          long weather_thunder = e1927->WEATHER_THUNDER;
          long v1927 = e1927->__av;
          __SQL_SUM_AGGREGATE_939INVENTORY1_P_1.addOrDelOnZero(se5383.modify(inventory_locn, inventory_dateid), (v1927 * (weather_maxtemp * weather_meanwind)));
          e1927 = e1927->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_940INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1928 = WEATHER.head;
        while (e1928) {
          long inventory_locn = e1928->WEATHER_LOCN;
          long inventory_dateid = e1928->WEATHER_DATEID;
          long weather_rain = e1928->WEATHER_RAIN;
          long weather_snow = e1928->WEATHER_SNOW;
          long weather_maxtemp = e1928->WEATHER_MAXTEMP;
          long weather_mintemp = e1928->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1928->WEATHER_MEANWIND;
          long weather_thunder = e1928->WEATHER_THUNDER;
          long v1928 = e1928->__av;
          __SQL_SUM_AGGREGATE_940INVENTORY1_P_1.addOrDelOnZero(se5384.modify(inventory_locn, inventory_dateid), (v1928 * (weather_maxtemp * weather_thunder)));
          e1928 = e1928->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_941INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1929 = WEATHER.head;
        while (e1929) {
          long inventory_locn = e1929->WEATHER_LOCN;
          long inventory_dateid = e1929->WEATHER_DATEID;
          long weather_rain = e1929->WEATHER_RAIN;
          long weather_snow = e1929->WEATHER_SNOW;
          long weather_maxtemp = e1929->WEATHER_MAXTEMP;
          long weather_mintemp = e1929->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1929->WEATHER_MEANWIND;
          long weather_thunder = e1929->WEATHER_THUNDER;
          long v1929 = e1929->__av;
          __SQL_SUM_AGGREGATE_941INVENTORY1_P_1.addOrDelOnZero(se5385.modify(inventory_locn, inventory_dateid), (v1929 * (weather_mintemp * weather_mintemp)));
          e1929 = e1929->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_942 = 0.0;
      __SQL_SUM_AGGREGATE_942INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1930 = WEATHER.head;
        while (e1930) {
          long inventory_locn = e1930->WEATHER_LOCN;
          long inventory_dateid = e1930->WEATHER_DATEID;
          long weather_rain = e1930->WEATHER_RAIN;
          long weather_snow = e1930->WEATHER_SNOW;
          long weather_maxtemp = e1930->WEATHER_MAXTEMP;
          long weather_mintemp = e1930->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1930->WEATHER_MEANWIND;
          long weather_thunder = e1930->WEATHER_THUNDER;
          long v1930 = e1930->__av;
          __SQL_SUM_AGGREGATE_942INVENTORY1_P_1.addOrDelOnZero(se5387.modify(inventory_locn, inventory_dateid), (v1930 * (weather_mintemp * weather_meanwind)));
          e1930 = e1930->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_943INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1931 = WEATHER.head;
        while (e1931) {
          long inventory_locn = e1931->WEATHER_LOCN;
          long inventory_dateid = e1931->WEATHER_DATEID;
          long weather_rain = e1931->WEATHER_RAIN;
          long weather_snow = e1931->WEATHER_SNOW;
          long weather_maxtemp = e1931->WEATHER_MAXTEMP;
          long weather_mintemp = e1931->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1931->WEATHER_MEANWIND;
          long weather_thunder = e1931->WEATHER_THUNDER;
          long v1931 = e1931->__av;
          __SQL_SUM_AGGREGATE_943INVENTORY1_P_1.addOrDelOnZero(se5388.modify(inventory_locn, inventory_dateid), (v1931 * (weather_mintemp * weather_thunder)));
          e1931 = e1931->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_944 = 0.0;
      __SQL_SUM_AGGREGATE_944INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1932 = WEATHER.head;
        while (e1932) {
          long inventory_locn = e1932->WEATHER_LOCN;
          long inventory_dateid = e1932->WEATHER_DATEID;
          long weather_rain = e1932->WEATHER_RAIN;
          long weather_snow = e1932->WEATHER_SNOW;
          long weather_maxtemp = e1932->WEATHER_MAXTEMP;
          long weather_mintemp = e1932->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1932->WEATHER_MEANWIND;
          long weather_thunder = e1932->WEATHER_THUNDER;
          long v1932 = e1932->__av;
          __SQL_SUM_AGGREGATE_944INVENTORY1_P_1.addOrDelOnZero(se5390.modify(inventory_locn, inventory_dateid), (v1932 * (weather_meanwind * weather_meanwind)));
          e1932 = e1932->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_945 = 0.0;
      __SQL_SUM_AGGREGATE_945INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1933 = WEATHER.head;
        while (e1933) {
          long inventory_locn = e1933->WEATHER_LOCN;
          long inventory_dateid = e1933->WEATHER_DATEID;
          long weather_rain = e1933->WEATHER_RAIN;
          long weather_snow = e1933->WEATHER_SNOW;
          long weather_maxtemp = e1933->WEATHER_MAXTEMP;
          long weather_mintemp = e1933->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1933->WEATHER_MEANWIND;
          long weather_thunder = e1933->WEATHER_THUNDER;
          long v1933 = e1933->__av;
          __SQL_SUM_AGGREGATE_945INVENTORY1_P_1.addOrDelOnZero(se5392.modify(inventory_locn, inventory_dateid), (v1933 * (weather_meanwind * weather_thunder)));
          e1933 = e1933->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_946INVENTORY1_P_1.clear();
      { //foreach
        WEATHER_entry* e1934 = WEATHER.head;
        while (e1934) {
          long inventory_locn = e1934->WEATHER_LOCN;
          long inventory_dateid = e1934->WEATHER_DATEID;
          long weather_rain = e1934->WEATHER_RAIN;
          long weather_snow = e1934->WEATHER_SNOW;
          long weather_maxtemp = e1934->WEATHER_MAXTEMP;
          long weather_mintemp = e1934->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e1934->WEATHER_MEANWIND;
          long weather_thunder = e1934->WEATHER_THUNDER;
          long v1934 = e1934->__av;
          __SQL_SUM_AGGREGATE_946INVENTORY1_P_1.addOrDelOnZero(se5393.modify(inventory_locn, inventory_dateid), (v1934 * (weather_thunder * weather_thunder)));
          e1934 = e1934->nxt;
        }
      }
    }
  
  private:
  
    /* Sample entries for avoiding recreation of temporary objects */
    __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_entry se1;
    __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_entry se2;
    __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_entry se3;
    __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_entry se4;
    __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_entry se5;
    __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_entry se6;
    __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_entry se7;
    __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_entry se8;
    __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_entry se9;
    __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_entry se10;
    __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_entry se11;
    __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_entry se12;
    __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_entry se13;
    __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_entry se14;
    __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_entry se15;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se17;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se18;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se19;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se21;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se22;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se23;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se25;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se26;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se27;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se29;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se30;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se31;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se33;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se34;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se35;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se37;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se38;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se39;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se41;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se42;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se43;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se45;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se46;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se47;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se49;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se50;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se51;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se53;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se54;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se55;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se57;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se58;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se59;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se61;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se62;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se63;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se65;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se66;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se67;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se69;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se70;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se71;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se73;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se74;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se75;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se77;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se78;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se79;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se81;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se82;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se83;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se85;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se86;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se87;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se89;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se90;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se91;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se93;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se94;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se95;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se97;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se98;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se99;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se101;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se102;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se103;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se105;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se106;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se107;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se109;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se110;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se111;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se113;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se114;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se115;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se117;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se118;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se119;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se121;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se122;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se123;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se125;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se126;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se127;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se129;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se130;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se131;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se133;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se134;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se135;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se137;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se138;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se139;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se141;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se142;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se143;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se145;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se146;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se147;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se149;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se150;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se151;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se153;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se154;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se155;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se157;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se158;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se159;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se161;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se162;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se163;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se165;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se166;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se167;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se169;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se170;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se171;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se173;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se174;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se175;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se177;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se178;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se179;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se181;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se182;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se183;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se185;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se186;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se187;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se189;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se190;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se191;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se193;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se194;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se195;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se197;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se198;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se199;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se201;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se202;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se203;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se205;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se206;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se207;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se209;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se210;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se211;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se213;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se214;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se215;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se217;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se218;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se219;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se221;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se222;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se223;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se225;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se226;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se227;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se229;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se230;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se231;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se233;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se234;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se235;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se237;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se238;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se239;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se241;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se242;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se243;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se245;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se246;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se247;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se249;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se250;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se251;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se253;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se254;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se255;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se257;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se258;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se259;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se261;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se262;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se263;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se265;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se266;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se267;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se269;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se270;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se271;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se273;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se274;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se275;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se277;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se278;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se279;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se281;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se282;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se283;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se285;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se286;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se287;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se289;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se290;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se291;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se293;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se294;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se295;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se297;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se298;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se299;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se301;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se302;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se303;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se305;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se306;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se307;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se309;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se310;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se311;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se313;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se314;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se315;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se317;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se318;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se319;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se321;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se322;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se323;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se325;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se326;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se327;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se329;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se330;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se331;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se333;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se334;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se335;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se337;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se338;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se339;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se341;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se342;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se343;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se345;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se346;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se347;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se349;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se350;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se351;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se353;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se354;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se355;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se357;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se358;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se359;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se361;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se362;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se363;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se365;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se366;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se367;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se369;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se370;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se371;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se373;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se374;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se375;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se377;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se378;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se379;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se381;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se382;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se383;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se385;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se386;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se387;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se389;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se390;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se391;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se393;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se394;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se395;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se397;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se398;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se399;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se401;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se402;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se403;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se405;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se406;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se407;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se409;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se410;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se411;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se413;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se414;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se415;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se417;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se418;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se419;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se421;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se422;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se423;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se425;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se426;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se427;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se429;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se430;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se431;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se433;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se434;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se435;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se437;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se438;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se439;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se441;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se442;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se443;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se445;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se446;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se447;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se449;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se450;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se451;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se453;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se454;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se455;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se457;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se458;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se459;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se461;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se462;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se463;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se465;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se466;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se467;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se469;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se470;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se471;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se473;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se474;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se475;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se477;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se478;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se479;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se481;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se482;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se483;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se485;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se486;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se487;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se489;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se490;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se491;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se493;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se494;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se495;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se497;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se498;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se499;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se501;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se502;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se503;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se505;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se506;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se507;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se509;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se510;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se511;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se513;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se514;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se515;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se517;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se518;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se519;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se521;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se522;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se523;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se525;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se526;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se527;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se529;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se530;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se531;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se533;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se534;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se535;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se537;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se538;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se539;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se541;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se542;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se543;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se545;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se546;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se547;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se549;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se550;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se551;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se553;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se554;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se555;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se557;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se558;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se559;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se561;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se562;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se563;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se565;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se566;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se567;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se569;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se570;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se571;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se573;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se574;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se575;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se577;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se578;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se579;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se581;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se582;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se583;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se585;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se586;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se587;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se589;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se590;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se591;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se593;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se594;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se595;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se597;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se598;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se599;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se601;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se602;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se603;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se605;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se606;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se607;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se609;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se610;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se611;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se613;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se614;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se615;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se617;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se618;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se619;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se621;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se622;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se623;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se625;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se626;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se627;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se629;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se630;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se631;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se633;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se634;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se635;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se637;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se638;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se639;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se641;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se642;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se643;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se645;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se646;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se647;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se649;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se650;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se651;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se653;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se654;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se655;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se657;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se658;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se659;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se661;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se662;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se663;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se665;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se666;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se667;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se669;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se670;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se671;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se673;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se674;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se675;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se677;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se678;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se679;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se681;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se682;
    __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry se683;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se685;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se686;
    __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry se687;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se689;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se690;
    __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry se691;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se693;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se694;
    __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry se695;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se697;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se698;
    __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry se699;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se701;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se702;
    __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry se703;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se705;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se706;
    __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry se707;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se709;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se710;
    __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry se711;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se713;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se714;
    __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry se715;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se717;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se718;
    __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry se719;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se721;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se722;
    __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry se723;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se725;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se726;
    __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry se727;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se729;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se730;
    __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry se731;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se733;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se734;
    __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry se735;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se737;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se738;
    __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry se739;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se741;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se742;
    __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry se743;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se745;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se746;
    __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry se747;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se749;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se750;
    __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry se751;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se753;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se754;
    __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry se755;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se757;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se758;
    __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry se759;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se761;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se762;
    __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry se763;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se765;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se766;
    __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry se767;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se769;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se770;
    __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry se771;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se773;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se774;
    __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry se775;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se777;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se778;
    __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry se779;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se781;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se782;
    __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry se783;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se785;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se786;
    __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry se787;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se789;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se790;
    __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry se791;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se793;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se794;
    __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry se795;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se797;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se798;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se799;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se801;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se802;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se803;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se805;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se806;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se807;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se809;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se810;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se811;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se813;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se814;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se815;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se817;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se818;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se819;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se821;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se822;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se823;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se825;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se826;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se827;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se829;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se830;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se831;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se833;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se834;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se835;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se837;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se838;
    __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry se839;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se841;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se842;
    __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry se843;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se845;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se846;
    __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry se847;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se849;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se850;
    __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry se851;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se853;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se854;
    __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry se855;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se857;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se858;
    __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry se859;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se861;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se862;
    __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry se863;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se865;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se866;
    __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry se867;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se869;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se870;
    __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry se871;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se873;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se874;
    __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry se875;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se877;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se878;
    __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry se879;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se881;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se882;
    __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry se883;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se885;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se886;
    __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry se887;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se889;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se890;
    __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry se891;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se893;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se894;
    __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry se895;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se897;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se898;
    __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry se899;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se901;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se902;
    __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry se903;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se905;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se906;
    __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry se907;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se909;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se910;
    __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry se911;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se913;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se914;
    __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry se915;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se917;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se918;
    __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry se919;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se921;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se922;
    __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry se923;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se925;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se926;
    __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry se927;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se929;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se930;
    __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry se931;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se933;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se934;
    __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry se935;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se937;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se938;
    __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry se939;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se941;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se942;
    __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry se943;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se945;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se946;
    __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry se947;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se949;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se950;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se951;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se953;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se954;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se955;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se957;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se958;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se959;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se961;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se962;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se963;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se965;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se966;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se967;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se969;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se970;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se971;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se973;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se974;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se975;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se977;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se978;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se979;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se981;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se982;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se983;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se985;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se986;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se987;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se989;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se990;
    __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry se991;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se993;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se994;
    __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry se995;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se997;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se998;
    __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry se999;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1001;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1002;
    __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry se1003;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1005;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1006;
    __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry se1007;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1009;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1010;
    __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry se1011;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1013;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1014;
    __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry se1015;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1017;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1018;
    __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry se1019;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1021;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1022;
    __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry se1023;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1025;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1026;
    __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry se1027;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1029;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1030;
    __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry se1031;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1033;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1034;
    __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry se1035;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1037;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1038;
    __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry se1039;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1041;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1042;
    __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry se1043;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1045;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1046;
    __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry se1047;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1049;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1050;
    __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry se1051;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1053;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1054;
    __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry se1055;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1057;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1058;
    __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry se1059;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1061;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1062;
    __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry se1063;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1065;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1066;
    __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry se1067;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1069;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1070;
    __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry se1071;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1073;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1074;
    __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry se1075;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1077;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1078;
    __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry se1079;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1081;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1082;
    __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry se1083;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1085;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1086;
    __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry se1087;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1089;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1090;
    __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry se1091;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1093;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1094;
    __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry se1095;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1097;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1098;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1099;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1101;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1102;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1103;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1105;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1106;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1107;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1109;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1110;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1111;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1113;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1114;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1115;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1117;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1118;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1119;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1121;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1122;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1123;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1125;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1126;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1127;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1129;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1130;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1131;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1133;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1134;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se1135;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1137;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1138;
    __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry se1139;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1141;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1142;
    __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry se1143;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1145;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1146;
    __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry se1147;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1149;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1150;
    __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry se1151;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1153;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1154;
    __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry se1155;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1157;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1158;
    __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry se1159;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1161;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1162;
    __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry se1163;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1165;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1166;
    __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry se1167;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1169;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1170;
    __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry se1171;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1173;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1174;
    __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry se1175;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1177;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1178;
    __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry se1179;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1181;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1182;
    __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry se1183;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1185;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1186;
    __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry se1187;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1189;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1190;
    __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry se1191;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1193;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1194;
    __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry se1195;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1197;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1198;
    __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry se1199;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1201;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1202;
    __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry se1203;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1205;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1206;
    __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry se1207;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1209;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1210;
    __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry se1211;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1213;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1214;
    __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry se1215;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1217;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1218;
    __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry se1219;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1221;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1222;
    __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry se1223;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1225;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1226;
    __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry se1227;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1229;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1230;
    __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry se1231;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1233;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1234;
    __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry se1235;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1237;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1238;
    __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry se1239;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1241;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1242;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1243;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1245;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1246;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1247;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1249;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1250;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1251;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1253;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1254;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1255;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1257;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1258;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1259;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1261;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1262;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1263;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1265;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1266;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1267;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1269;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1270;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1271;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1273;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1274;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1275;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1277;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1278;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se1279;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1281;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1282;
    __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry se1283;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1285;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1286;
    __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry se1287;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1289;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1290;
    __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry se1291;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1293;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1294;
    __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry se1295;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1297;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1298;
    __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry se1299;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1301;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1302;
    __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry se1303;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1305;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1306;
    __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry se1307;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1309;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1310;
    __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry se1311;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1313;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1314;
    __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry se1315;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1317;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1318;
    __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry se1319;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1321;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1322;
    __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry se1323;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1325;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1326;
    __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry se1327;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1329;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1330;
    __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry se1331;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1333;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1334;
    __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry se1335;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1337;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1338;
    __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry se1339;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1341;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1342;
    __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry se1343;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1345;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1346;
    __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry se1347;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1349;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1350;
    __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry se1351;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1353;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1354;
    __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry se1355;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1357;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1358;
    __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry se1359;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1361;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1362;
    __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry se1363;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1365;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1366;
    __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry se1367;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1369;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1370;
    __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry se1371;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1373;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1374;
    __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry se1375;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1377;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1378;
    __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry se1379;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1381;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1382;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1383;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1385;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1386;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1387;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1389;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1390;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1391;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1393;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1394;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1395;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1397;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1398;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1399;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1401;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1402;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1403;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1405;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1406;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1407;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1409;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1410;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1411;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1413;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1414;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1415;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1417;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1418;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se1419;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1421;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1422;
    __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry se1423;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1425;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1426;
    __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry se1427;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1429;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1430;
    __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry se1431;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1433;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1434;
    __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry se1435;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1437;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1438;
    __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry se1439;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1441;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1442;
    __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry se1443;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1445;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1446;
    __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry se1447;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1449;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1450;
    __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry se1451;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1453;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1454;
    __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry se1455;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1457;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1458;
    __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry se1459;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1461;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1462;
    __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry se1463;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1465;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1466;
    __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry se1467;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1469;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1470;
    __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry se1471;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1473;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1474;
    __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry se1475;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1477;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1478;
    __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry se1479;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1481;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1482;
    __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry se1483;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1485;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1486;
    __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry se1487;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1489;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1490;
    __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry se1491;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1493;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1494;
    __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry se1495;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1497;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1498;
    __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry se1499;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1501;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1502;
    __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry se1503;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1505;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1506;
    __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry se1507;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1509;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1510;
    __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry se1511;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1513;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1514;
    __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry se1515;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1517;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1518;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1519;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1521;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1522;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1523;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1525;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1526;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1527;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1529;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1530;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1531;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1533;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1534;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1535;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1537;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1538;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1539;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1541;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1542;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1543;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1545;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1546;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1547;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1549;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1550;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1551;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1553;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1554;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se1555;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1557;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1558;
    __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry se1559;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1561;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1562;
    __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry se1563;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1565;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1566;
    __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry se1567;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1569;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1570;
    __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry se1571;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1573;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1574;
    __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry se1575;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1577;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1578;
    __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry se1579;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1581;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1582;
    __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry se1583;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1585;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1586;
    __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry se1587;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1589;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1590;
    __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry se1591;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1593;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1594;
    __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry se1595;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1597;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1598;
    __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry se1599;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1601;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1602;
    __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry se1603;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1605;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1606;
    __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry se1607;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1609;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1610;
    __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry se1611;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1613;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1614;
    __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry se1615;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1617;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1618;
    __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry se1619;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1621;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1622;
    __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry se1623;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1625;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1626;
    __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry se1627;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1629;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1630;
    __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry se1631;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1633;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1634;
    __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry se1635;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1637;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1638;
    __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry se1639;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1641;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1642;
    __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry se1643;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1645;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1646;
    __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry se1647;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1649;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1650;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1651;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1653;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1654;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1655;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1657;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1658;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1659;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1661;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1662;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1663;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1665;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1666;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1667;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1669;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1670;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1671;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1673;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1674;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1675;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1677;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1678;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1679;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1681;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1682;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1683;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1685;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1686;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se1687;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1689;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1690;
    __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry se1691;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1693;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1694;
    __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry se1695;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1697;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1698;
    __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry se1699;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1701;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1702;
    __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry se1703;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1705;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1706;
    __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry se1707;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1709;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1710;
    __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry se1711;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1713;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1714;
    __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry se1715;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1717;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1718;
    __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry se1719;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1721;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1722;
    __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry se1723;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1725;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1726;
    __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry se1727;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1729;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1730;
    __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry se1731;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1733;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1734;
    __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry se1735;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1737;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1738;
    __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry se1739;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1741;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1742;
    __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry se1743;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1745;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1746;
    __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry se1747;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1749;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1750;
    __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry se1751;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1753;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1754;
    __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry se1755;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1757;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1758;
    __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry se1759;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1761;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1762;
    __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry se1763;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1765;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1766;
    __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry se1767;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1769;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1770;
    __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry se1771;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1773;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1774;
    __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry se1775;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1777;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1778;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1779;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1781;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1782;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1783;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1785;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1786;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1787;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1789;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1790;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1791;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1793;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1794;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1795;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1797;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1798;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1799;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1801;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1802;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1803;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1805;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1806;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1807;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1809;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1810;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1811;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1813;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1814;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se1815;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1817;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1818;
    __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry se1819;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1821;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1822;
    __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry se1823;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1825;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1826;
    __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry se1827;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1829;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1830;
    __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry se1831;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1833;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1834;
    __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry se1835;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1837;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1838;
    __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry se1839;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1841;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1842;
    __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry se1843;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1845;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1846;
    __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry se1847;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1849;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1850;
    __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry se1851;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1853;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1854;
    __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry se1855;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1857;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1858;
    __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry se1859;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1861;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1862;
    __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry se1863;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1865;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1866;
    __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry se1867;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1869;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1870;
    __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry se1871;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1873;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1874;
    __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry se1875;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1877;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1878;
    __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry se1879;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1881;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1882;
    __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry se1883;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1885;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1886;
    __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry se1887;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1889;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1890;
    __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry se1891;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1893;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1894;
    __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry se1895;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1897;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1898;
    __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry se1899;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1901;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se1902;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1903;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1905;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se1906;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1907;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1909;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se1910;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1911;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1913;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se1914;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1915;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se1917;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1918;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1919;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se1921;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1922;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1923;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se1925;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1926;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1927;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se1929;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1930;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1931;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se1933;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1934;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1935;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se1937;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1938;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se1939;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1941;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1942;
    __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry se1943;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1945;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1946;
    __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry se1947;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1949;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1950;
    __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry se1951;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1953;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1954;
    __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry se1955;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1957;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1958;
    __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry se1959;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1961;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1962;
    __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry se1963;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1965;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1966;
    __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry se1967;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1969;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1970;
    __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry se1971;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1973;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1974;
    __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry se1975;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1977;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1978;
    __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry se1979;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1981;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1982;
    __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry se1983;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1985;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1986;
    __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry se1987;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1989;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1990;
    __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry se1991;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1993;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1994;
    __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry se1995;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se1997;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se1998;
    __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry se1999;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2001;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2002;
    __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry se2003;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2005;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2006;
    __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry se2007;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2009;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2010;
    __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry se2011;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2013;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2014;
    __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry se2015;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2017;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2018;
    __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry se2019;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2021;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2022;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2023;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2025;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2026;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2027;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2029;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2030;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2031;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2033;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2034;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2035;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2037;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2038;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2039;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2041;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2042;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2043;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2045;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2046;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2047;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2049;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2050;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2051;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2053;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2054;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2055;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2057;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2058;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se2059;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2061;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2062;
    __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry se2063;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2065;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2066;
    __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry se2067;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2069;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2070;
    __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry se2071;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2073;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2074;
    __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry se2075;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2077;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2078;
    __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry se2079;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2081;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2082;
    __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry se2083;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2085;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2086;
    __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry se2087;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2089;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2090;
    __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry se2091;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2093;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2094;
    __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry se2095;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2097;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2098;
    __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry se2099;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2101;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2102;
    __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry se2103;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2105;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2106;
    __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry se2107;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2109;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2110;
    __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry se2111;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2113;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2114;
    __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry se2115;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2117;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2118;
    __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry se2119;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2121;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2122;
    __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry se2123;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2125;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2126;
    __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry se2127;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2129;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2130;
    __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry se2131;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2133;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2134;
    __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry se2135;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2137;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2138;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2139;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2141;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2142;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2143;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2145;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2146;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2147;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2149;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2150;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2151;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2153;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2154;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2155;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2157;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2158;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2159;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2161;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2162;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2163;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2165;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2166;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2167;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2169;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2170;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2171;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2173;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2174;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se2175;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2177;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2178;
    __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry se2179;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2181;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2182;
    __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry se2183;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2185;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2186;
    __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry se2187;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2189;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2190;
    __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry se2191;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2193;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2194;
    __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry se2195;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2197;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2198;
    __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry se2199;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2201;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2202;
    __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry se2203;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2205;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2206;
    __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry se2207;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2209;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2210;
    __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry se2211;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2213;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2214;
    __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry se2215;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2217;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2218;
    __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry se2219;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2221;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2222;
    __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry se2223;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2225;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2226;
    __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry se2227;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2229;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2230;
    __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry se2231;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2233;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2234;
    __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry se2235;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2237;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2238;
    __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry se2239;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2241;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2242;
    __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry se2243;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2245;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2246;
    __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry se2247;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2249;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2250;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2251;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2253;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2254;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2255;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2257;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2258;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2259;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2261;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2262;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2263;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2265;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2266;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2267;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2269;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2270;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2271;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2273;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2274;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2275;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2277;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2278;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2279;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2281;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2282;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2283;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2285;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2286;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se2287;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2289;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2290;
    __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry se2291;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2293;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2294;
    __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry se2295;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2297;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2298;
    __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry se2299;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2301;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2302;
    __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry se2303;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2305;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2306;
    __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry se2307;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2309;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2310;
    __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry se2311;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2313;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2314;
    __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry se2315;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2317;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2318;
    __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry se2319;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2321;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2322;
    __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry se2323;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2325;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2326;
    __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry se2327;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2329;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2330;
    __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry se2331;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2333;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2334;
    __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry se2335;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2337;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2338;
    __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry se2339;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2341;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2342;
    __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry se2343;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2345;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2346;
    __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry se2347;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2349;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2350;
    __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry se2351;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2353;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2354;
    __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry se2355;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2357;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2358;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2359;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2361;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2362;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2363;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2365;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2366;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2367;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2369;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2370;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2371;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2373;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2374;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2375;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2377;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2378;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2379;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2381;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2382;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2383;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2385;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2386;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2387;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2389;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2390;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2391;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2393;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2394;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se2395;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2397;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2398;
    __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry se2399;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2401;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2402;
    __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry se2403;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2405;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2406;
    __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry se2407;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2409;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2410;
    __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry se2411;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2413;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2414;
    __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry se2415;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2417;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2418;
    __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry se2419;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2421;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2422;
    __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry se2423;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2425;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2426;
    __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry se2427;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2429;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2430;
    __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry se2431;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2433;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2434;
    __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry se2435;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2437;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2438;
    __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry se2439;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2441;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2442;
    __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry se2443;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2445;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2446;
    __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry se2447;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2449;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2450;
    __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry se2451;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2453;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2454;
    __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry se2455;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2457;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2458;
    __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry se2459;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2461;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2462;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2463;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2465;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2466;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2467;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2469;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2470;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2471;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2473;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2474;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2475;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2477;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2478;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2479;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2481;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2482;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2483;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2485;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2486;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2487;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2489;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2490;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2491;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2493;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2494;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2495;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2497;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2498;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se2499;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2501;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2502;
    __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry se2503;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2505;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2506;
    __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry se2507;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2509;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2510;
    __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry se2511;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2513;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2514;
    __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry se2515;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2517;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2518;
    __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry se2519;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2521;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2522;
    __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry se2523;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2525;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2526;
    __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry se2527;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2529;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2530;
    __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry se2531;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2533;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2534;
    __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry se2535;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2537;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2538;
    __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry se2539;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2541;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2542;
    __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry se2543;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2545;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2546;
    __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry se2547;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2549;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2550;
    __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry se2551;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2553;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2554;
    __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry se2555;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2557;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2558;
    __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry se2559;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2561;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2562;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2563;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2565;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2566;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2567;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2569;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2570;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2571;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2573;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2574;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2575;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2577;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2578;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2579;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2581;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2582;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2583;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2585;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2586;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2587;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2589;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2590;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2591;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2593;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2594;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2595;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2597;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2598;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se2599;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2601;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2602;
    __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry se2603;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2605;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2606;
    __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry se2607;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2609;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2610;
    __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry se2611;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2613;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2614;
    __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry se2615;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2617;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2618;
    __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry se2619;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2621;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2622;
    __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry se2623;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2625;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2626;
    __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry se2627;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2629;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2630;
    __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry se2631;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2633;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2634;
    __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry se2635;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2637;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2638;
    __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry se2639;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2641;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2642;
    __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry se2643;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2645;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2646;
    __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry se2647;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2649;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2650;
    __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry se2651;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2653;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2654;
    __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry se2655;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2657;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2658;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2659;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2661;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2662;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2663;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2665;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2666;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2667;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2669;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2670;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2671;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2673;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2674;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2675;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2677;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2678;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2679;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2681;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2682;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2683;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2685;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2686;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2687;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2689;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2690;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2691;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2693;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2694;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se2695;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2697;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2698;
    __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry se2699;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2701;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2702;
    __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry se2703;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2705;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2706;
    __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry se2707;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2709;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2710;
    __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry se2711;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2713;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2714;
    __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry se2715;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2717;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2718;
    __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry se2719;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2721;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2722;
    __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry se2723;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2725;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2726;
    __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry se2727;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2729;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2730;
    __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry se2731;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2733;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2734;
    __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry se2735;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2737;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2738;
    __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry se2739;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2741;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2742;
    __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry se2743;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2745;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2746;
    __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry se2747;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2749;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2750;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2751;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2753;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2754;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2755;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2757;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2758;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2759;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2761;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2762;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2763;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2765;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2766;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2767;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2769;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2770;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2771;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2773;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2774;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2775;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2777;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2778;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2779;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2781;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2782;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2783;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2785;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2786;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se2787;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2789;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2790;
    __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry se2791;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2793;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2794;
    __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry se2795;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2797;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2798;
    __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry se2799;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2801;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2802;
    __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry se2803;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2805;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2806;
    __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry se2807;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2809;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2810;
    __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry se2811;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2813;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2814;
    __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry se2815;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2817;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2818;
    __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry se2819;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2821;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2822;
    __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry se2823;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2825;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2826;
    __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry se2827;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2829;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2830;
    __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry se2831;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2833;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2834;
    __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry se2835;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2837;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2838;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2839;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2841;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2842;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2843;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2845;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2846;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2847;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2849;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2850;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2851;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2853;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2854;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2855;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2857;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2858;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2859;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2861;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2862;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2863;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2865;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2866;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2867;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2869;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2870;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2871;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2873;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2874;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se2875;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2877;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2878;
    __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry se2879;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2881;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2882;
    __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry se2883;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2885;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2886;
    __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry se2887;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2889;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2890;
    __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry se2891;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2893;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2894;
    __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry se2895;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2897;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2898;
    __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry se2899;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2901;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2902;
    __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry se2903;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2905;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2906;
    __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry se2907;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2909;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2910;
    __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry se2911;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2913;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2914;
    __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry se2915;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2917;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2918;
    __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry se2919;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2921;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se2922;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2923;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2925;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se2926;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2927;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2929;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se2930;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2931;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2933;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se2934;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2935;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se2937;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2938;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2939;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se2941;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2942;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2943;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se2945;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2946;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2947;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se2949;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2950;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2951;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se2953;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2954;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2955;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se2957;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2958;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se2959;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2961;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2962;
    __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry se2963;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2965;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2966;
    __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry se2967;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2969;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2970;
    __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry se2971;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2973;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2974;
    __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry se2975;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2977;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2978;
    __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry se2979;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2981;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2982;
    __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry se2983;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2985;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2986;
    __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry se2987;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2989;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2990;
    __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry se2991;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2993;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2994;
    __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry se2995;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se2997;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se2998;
    __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry se2999;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3001;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3002;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3003;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3005;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3006;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3007;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3009;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3010;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3011;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3013;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3014;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3015;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3017;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3018;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3019;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3021;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3022;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3023;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3025;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3026;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3027;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3029;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3030;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3031;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3033;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3034;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3035;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3037;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3038;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3039;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3041;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3042;
    __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry se3043;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3045;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3046;
    __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry se3047;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3049;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3050;
    __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry se3051;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3053;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3054;
    __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry se3055;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3057;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3058;
    __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry se3059;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3061;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3062;
    __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry se3063;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3065;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3066;
    __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry se3067;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3069;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3070;
    __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry se3071;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3073;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3074;
    __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry se3075;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3077;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3078;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3079;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3081;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3082;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3083;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3085;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3086;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3087;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3089;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3090;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3091;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3093;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3094;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3095;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3097;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3098;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3099;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3101;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3102;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3103;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3105;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3106;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3107;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3109;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3110;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3111;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3113;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3114;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3115;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3117;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3118;
    __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry se3119;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3121;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3122;
    __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry se3123;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3125;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3126;
    __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry se3127;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3129;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3130;
    __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry se3131;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3133;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3134;
    __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry se3135;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3137;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3138;
    __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry se3139;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3141;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3142;
    __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry se3143;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3145;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3146;
    __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry se3147;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3149;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3150;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3151;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3153;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3154;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3155;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3157;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3158;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3159;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3161;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3162;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3163;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3165;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3166;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3167;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3169;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3170;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3171;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3173;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3174;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3175;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3177;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3178;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3179;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3181;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3182;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3183;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3185;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3186;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3187;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3189;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3190;
    __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry se3191;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3193;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3194;
    __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry se3195;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3197;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3198;
    __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry se3199;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3201;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3202;
    __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry se3203;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3205;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3206;
    __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry se3207;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3209;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3210;
    __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry se3211;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3213;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3214;
    __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry se3215;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3217;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3218;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3219;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3221;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3222;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3223;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3225;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3226;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3227;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3229;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3230;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3231;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3233;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3234;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3235;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3237;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3238;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3239;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3241;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3242;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3243;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3245;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3246;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3247;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3249;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3250;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3251;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3253;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3254;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3255;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3257;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3258;
    __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry se3259;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3261;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3262;
    __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry se3263;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3265;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3266;
    __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry se3267;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3269;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3270;
    __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry se3271;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3273;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3274;
    __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry se3275;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3277;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3278;
    __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry se3279;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3281;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3282;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3283;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3285;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3286;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3287;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3289;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3290;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3291;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3293;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3294;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3295;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3297;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3298;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3299;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3301;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3302;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3303;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3305;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3306;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3307;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3309;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3310;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3311;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3313;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3314;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3315;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3317;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3318;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3319;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3321;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3322;
    __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry se3323;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3325;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3326;
    __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry se3327;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3329;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3330;
    __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry se3331;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3333;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3334;
    __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry se3335;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3337;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3338;
    __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry se3339;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3341;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3342;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3343;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3345;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3346;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3347;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3349;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3350;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3351;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3353;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3354;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3355;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3357;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3358;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3359;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3361;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3362;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3363;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3365;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3366;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3367;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3369;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3370;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3371;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3373;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3374;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3375;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3377;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3378;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3379;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3381;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3382;
    __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry se3383;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3385;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3386;
    __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry se3387;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3389;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3390;
    __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry se3391;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3393;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3394;
    __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry se3395;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3397;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3398;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3399;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3401;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3402;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3403;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3405;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3406;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3407;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3409;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3410;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3411;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3413;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3414;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3415;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3417;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3418;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3419;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3421;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3422;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3423;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3425;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3426;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3427;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3429;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3430;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3431;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3433;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3434;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3435;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3437;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3438;
    __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry se3439;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3441;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3442;
    __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry se3443;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3445;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3446;
    __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry se3447;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3449;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3450;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3451;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3453;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3454;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3455;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3457;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3458;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3459;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3461;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3462;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3463;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3465;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3466;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3467;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3469;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3470;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3471;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3473;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3474;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3475;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3477;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3478;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3479;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3481;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3482;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3483;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3485;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3486;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3487;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3489;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3490;
    __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry se3491;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3493;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3494;
    __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry se3495;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3497;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3498;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3499;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3501;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3502;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3503;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3505;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3506;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3507;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3509;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3510;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3511;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3513;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3514;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3515;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3517;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3518;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3519;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3521;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3522;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3523;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3525;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3526;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3527;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3529;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3530;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3531;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3533;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3534;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3535;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3537;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3538;
    __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry se3539;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3541;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3542;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3543;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3545;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3546;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3547;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3549;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3550;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3551;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3553;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3554;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3555;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3557;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3558;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3559;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3561;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3562;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3563;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3565;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3566;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3567;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3569;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3570;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3571;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3573;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3574;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3575;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3577;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3578;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3579;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3581;
    __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry se3582;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3583;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3585;
    __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry se3586;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3587;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3589;
    __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry se3590;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3591;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3593;
    __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry se3594;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3595;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3597;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3598;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3599;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3601;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3602;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3603;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3605;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3606;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3607;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3609;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3610;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3611;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3613;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3614;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3615;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3617;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3618;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3619;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3621;
    __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry se3622;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3623;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3625;
    __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry se3626;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3627;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3629;
    __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry se3630;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3631;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3633;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3634;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3635;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3637;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3638;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3639;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3641;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3642;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3643;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3645;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3646;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3647;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3649;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3650;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3651;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3653;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3654;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3655;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3657;
    __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry se3658;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3659;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3661;
    __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry se3662;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3663;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3665;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3666;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3667;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3669;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3670;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3671;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3673;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3674;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3675;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3677;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3678;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3679;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3681;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3682;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3683;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3685;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3686;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3687;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3689;
    __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry se3690;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3691;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3693;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3694;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3695;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3697;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3698;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3699;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3701;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3702;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3703;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3705;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3706;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3707;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3709;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3710;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3711;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3713;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3714;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3715;
    __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry se3717;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3718;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3719;
    __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry se3721;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3722;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3723;
    __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry se3725;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3726;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3727;
    __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry se3729;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3730;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3731;
    __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry se3733;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3734;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3735;
    __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry se3737;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3738;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3739;
    __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry se3741;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3742;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3743;
    __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry se3745;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3746;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3747;
    __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry se3749;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3750;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3751;
    __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry se3753;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3754;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3755;
    __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry se3757;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3758;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3759;
    __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry se3761;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3762;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3763;
    __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry se3765;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3766;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3767;
    __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry se3769;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3770;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3771;
    __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry se3773;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3774;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3775;
    __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry se3777;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3778;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3779;
    __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry se3781;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3782;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3783;
    __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry se3785;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3786;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3787;
    __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry se3789;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3790;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3791;
    __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry se3793;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3794;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3795;
    __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry se3797;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3798;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3799;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_entry se3801;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_entry se3802;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_entry se3803;
    CENSUS_entry se3804;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_entry se3809;
    CENSUS_entry se3810;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_entry se3812;
    CENSUS_entry se3813;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_entry se3815;
    CENSUS_entry se3816;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_entry se3818;
    CENSUS_entry se3819;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_entry se3821;
    CENSUS_entry se3822;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_entry se3824;
    CENSUS_entry se3825;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_entry se3827;
    CENSUS_entry se3828;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_entry se3830;
    CENSUS_entry se3831;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_entry se3833;
    CENSUS_entry se3834;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_entry se3836;
    CENSUS_entry se3837;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_entry se3839;
    CENSUS_entry se3840;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_entry se3842;
    CENSUS_entry se3843;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_entry se3845;
    CENSUS_entry se3846;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_entry se3848;
    CENSUS_entry se3849;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_entry se3851;
    CENSUS_entry se3852;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_entry se3854;
    CENSUS_entry se3855;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_entry se3857;
    CENSUS_entry se3858;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_entry se3860;
    CENSUS_entry se3861;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_entry se3863;
    CENSUS_entry se3864;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_entry se3866;
    CENSUS_entry se3867;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_entry se3869;
    CENSUS_entry se3870;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_entry se3872;
    CENSUS_entry se3873;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_entry se3875;
    CENSUS_entry se3876;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_entry se3878;
    CENSUS_entry se3879;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_entry se3881;
    CENSUS_entry se3882;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_entry se3884;
    CENSUS_entry se3885;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_entry se3887;
    CENSUS_entry se3888;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_entry se3890;
    CENSUS_entry se3891;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_entry se3893;
    CENSUS_entry se3894;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_entry se3896;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_entry se3898;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_entry se3900;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_entry se3902;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_entry se3904;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_entry se3906;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_entry se3908;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_entry se3910;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_entry se3912;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_entry se3914;
    __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_entry se3989;
    CENSUS_entry se3990;
    __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_entry se3992;
    CENSUS_entry se3993;
    __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_entry se3995;
    CENSUS_entry se3996;
    __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_entry se3998;
    CENSUS_entry se3999;
    __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_entry se4001;
    CENSUS_entry se4002;
    __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_entry se4004;
    CENSUS_entry se4005;
    __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_entry se4007;
    CENSUS_entry se4008;
    __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_entry se4010;
    CENSUS_entry se4011;
    __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_entry se4013;
    CENSUS_entry se4014;
    __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_entry se4016;
    CENSUS_entry se4017;
    __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_entry se4019;
    CENSUS_entry se4020;
    __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_entry se4022;
    CENSUS_entry se4023;
    __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_entry se4025;
    CENSUS_entry se4026;
    __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_entry se4028;
    CENSUS_entry se4029;
    __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_entry se4030;
    CENSUS_entry se4031;
    __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_entry se4032;
    CENSUS_entry se4033;
    __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_entry se4034;
    CENSUS_entry se4035;
    __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_entry se4036;
    CENSUS_entry se4037;
    __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_entry se4038;
    CENSUS_entry se4039;
    __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_entry se4041;
    CENSUS_entry se4042;
    __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_entry se4043;
    CENSUS_entry se4044;
    __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_entry se4045;
    CENSUS_entry se4046;
    __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_entry se4047;
    CENSUS_entry se4048;
    __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_entry se4049;
    CENSUS_entry se4050;
    __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_entry se4051;
    CENSUS_entry se4052;
    __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_entry se4053;
    CENSUS_entry se4054;
    __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_entry se4055;
    CENSUS_entry se4056;
    __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_entry se4057;
    CENSUS_entry se4058;
    __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_entry se4059;
    CENSUS_entry se4060;
    __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_entry se4064;
    CENSUS_entry se4065;
    __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_entry se4067;
    CENSUS_entry se4068;
    __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_entry se4070;
    CENSUS_entry se4071;
    __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_entry se4073;
    CENSUS_entry se4074;
    __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_entry se4076;
    CENSUS_entry se4077;
    __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_entry se4079;
    CENSUS_entry se4080;
    __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_entry se4082;
    CENSUS_entry se4083;
    __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_entry se4085;
    CENSUS_entry se4086;
    __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_entry se4088;
    CENSUS_entry se4089;
    __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_entry se4091;
    CENSUS_entry se4092;
    __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_entry se4094;
    CENSUS_entry se4095;
    __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_entry se4097;
    CENSUS_entry se4098;
    __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_entry se4100;
    CENSUS_entry se4101;
    __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_entry se4103;
    CENSUS_entry se4104;
    __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_entry se4106;
    CENSUS_entry se4107;
    __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_entry se4109;
    CENSUS_entry se4110;
    __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_entry se4112;
    CENSUS_entry se4113;
    __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_entry se4115;
    CENSUS_entry se4116;
    __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_entry se4118;
    CENSUS_entry se4119;
    __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_entry se4121;
    CENSUS_entry se4122;
    __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_entry se4124;
    CENSUS_entry se4125;
    __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_entry se4127;
    CENSUS_entry se4128;
    __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_entry se4130;
    CENSUS_entry se4131;
    __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_entry se4133;
    CENSUS_entry se4134;
    __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_entry se4136;
    CENSUS_entry se4137;
    __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_entry se4139;
    CENSUS_entry se4140;
    __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_entry se4142;
    CENSUS_entry se4143;
    __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_entry se4145;
    CENSUS_entry se4146;
    __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_entry se4158;
    CENSUS_entry se4159;
    __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_entry se4161;
    CENSUS_entry se4162;
    __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_entry se4164;
    CENSUS_entry se4165;
    __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_entry se4167;
    CENSUS_entry se4168;
    __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_entry se4170;
    CENSUS_entry se4171;
    __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_entry se4173;
    CENSUS_entry se4174;
    __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_entry se4176;
    CENSUS_entry se4177;
    __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_entry se4179;
    CENSUS_entry se4180;
    __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_entry se4182;
    CENSUS_entry se4183;
    __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_entry se4185;
    CENSUS_entry se4186;
    __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_entry se4188;
    CENSUS_entry se4189;
    __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_entry se4191;
    CENSUS_entry se4192;
    __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_entry se4194;
    CENSUS_entry se4195;
    __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_entry se4197;
    CENSUS_entry se4198;
    __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_entry se4200;
    CENSUS_entry se4201;
    __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_entry se4203;
    CENSUS_entry se4204;
    __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_entry se4206;
    CENSUS_entry se4207;
    __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_entry se4209;
    CENSUS_entry se4210;
    __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_entry se4212;
    CENSUS_entry se4213;
    __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_entry se4215;
    CENSUS_entry se4216;
    __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_entry se4218;
    CENSUS_entry se4219;
    __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_entry se4221;
    CENSUS_entry se4222;
    __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_entry se4224;
    CENSUS_entry se4225;
    __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_entry se4227;
    CENSUS_entry se4228;
    __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_entry se4230;
    CENSUS_entry se4231;
    __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_entry se4233;
    CENSUS_entry se4234;
    __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_entry se4236;
    CENSUS_entry se4237;
    __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_entry se4249;
    CENSUS_entry se4250;
    __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_entry se4252;
    CENSUS_entry se4253;
    __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_entry se4255;
    CENSUS_entry se4256;
    __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_entry se4258;
    CENSUS_entry se4259;
    __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_entry se4261;
    CENSUS_entry se4262;
    __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_entry se4264;
    CENSUS_entry se4265;
    __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_entry se4267;
    CENSUS_entry se4268;
    __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_entry se4270;
    CENSUS_entry se4271;
    __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_entry se4273;
    CENSUS_entry se4274;
    __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_entry se4276;
    CENSUS_entry se4277;
    __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_entry se4279;
    CENSUS_entry se4280;
    __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_entry se4282;
    CENSUS_entry se4283;
    __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_entry se4285;
    CENSUS_entry se4286;
    __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_entry se4288;
    CENSUS_entry se4289;
    __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_entry se4291;
    CENSUS_entry se4292;
    __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_entry se4294;
    CENSUS_entry se4295;
    __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_entry se4297;
    CENSUS_entry se4298;
    __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_entry se4300;
    CENSUS_entry se4301;
    __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_entry se4303;
    CENSUS_entry se4304;
    __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_entry se4306;
    CENSUS_entry se4307;
    __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_entry se4309;
    CENSUS_entry se4310;
    __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_entry se4312;
    CENSUS_entry se4313;
    __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_entry se4315;
    CENSUS_entry se4316;
    __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_entry se4318;
    CENSUS_entry se4319;
    __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_entry se4321;
    CENSUS_entry se4322;
    __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_entry se4324;
    CENSUS_entry se4325;
    __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_entry se4337;
    CENSUS_entry se4338;
    __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_entry se4340;
    CENSUS_entry se4341;
    __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_entry se4343;
    CENSUS_entry se4344;
    __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_entry se4346;
    CENSUS_entry se4347;
    __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_entry se4349;
    CENSUS_entry se4350;
    __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_entry se4352;
    CENSUS_entry se4353;
    __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_entry se4355;
    CENSUS_entry se4356;
    __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_entry se4358;
    CENSUS_entry se4359;
    __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_entry se4361;
    CENSUS_entry se4362;
    __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_entry se4364;
    CENSUS_entry se4365;
    __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_entry se4367;
    CENSUS_entry se4368;
    __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_entry se4370;
    CENSUS_entry se4371;
    __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_entry se4373;
    CENSUS_entry se4374;
    __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_entry se4376;
    CENSUS_entry se4377;
    __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_entry se4379;
    CENSUS_entry se4380;
    __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_entry se4382;
    CENSUS_entry se4383;
    __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_entry se4385;
    CENSUS_entry se4386;
    __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_entry se4388;
    CENSUS_entry se4389;
    __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_entry se4391;
    CENSUS_entry se4392;
    __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_entry se4394;
    CENSUS_entry se4395;
    __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_entry se4397;
    CENSUS_entry se4398;
    __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_entry se4400;
    CENSUS_entry se4401;
    __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_entry se4403;
    CENSUS_entry se4404;
    __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_entry se4406;
    CENSUS_entry se4407;
    __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_entry se4409;
    CENSUS_entry se4410;
    __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_entry se4422;
    CENSUS_entry se4423;
    __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_entry se4425;
    CENSUS_entry se4426;
    __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_entry se4428;
    CENSUS_entry se4429;
    __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_entry se4431;
    CENSUS_entry se4432;
    __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_entry se4434;
    CENSUS_entry se4435;
    __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_entry se4437;
    CENSUS_entry se4438;
    __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_entry se4440;
    CENSUS_entry se4441;
    __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_entry se4443;
    CENSUS_entry se4444;
    __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_entry se4446;
    CENSUS_entry se4447;
    __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_entry se4449;
    CENSUS_entry se4450;
    __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_entry se4452;
    CENSUS_entry se4453;
    __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_entry se4455;
    CENSUS_entry se4456;
    __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_entry se4458;
    CENSUS_entry se4459;
    __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_entry se4461;
    CENSUS_entry se4462;
    __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_entry se4464;
    CENSUS_entry se4465;
    __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_entry se4467;
    CENSUS_entry se4468;
    __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_entry se4470;
    CENSUS_entry se4471;
    __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_entry se4473;
    CENSUS_entry se4474;
    __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_entry se4476;
    CENSUS_entry se4477;
    __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_entry se4479;
    CENSUS_entry se4480;
    __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_entry se4482;
    CENSUS_entry se4483;
    __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_entry se4485;
    CENSUS_entry se4486;
    __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_entry se4488;
    CENSUS_entry se4489;
    __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_entry se4491;
    CENSUS_entry se4492;
    __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_entry se4504;
    CENSUS_entry se4505;
    __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_entry se4507;
    CENSUS_entry se4508;
    __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_entry se4510;
    CENSUS_entry se4511;
    __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_entry se4513;
    CENSUS_entry se4514;
    __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_entry se4516;
    CENSUS_entry se4517;
    __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_entry se4519;
    CENSUS_entry se4520;
    __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_entry se4522;
    CENSUS_entry se4523;
    __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_entry se4525;
    CENSUS_entry se4526;
    __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_entry se4528;
    CENSUS_entry se4529;
    __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_entry se4531;
    CENSUS_entry se4532;
    __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_entry se4534;
    CENSUS_entry se4535;
    __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_entry se4537;
    CENSUS_entry se4538;
    __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_entry se4540;
    CENSUS_entry se4541;
    __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_entry se4543;
    CENSUS_entry se4544;
    __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_entry se4546;
    CENSUS_entry se4547;
    __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_entry se4549;
    CENSUS_entry se4550;
    __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_entry se4552;
    CENSUS_entry se4553;
    __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_entry se4555;
    CENSUS_entry se4556;
    __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_entry se4558;
    CENSUS_entry se4559;
    __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_entry se4561;
    CENSUS_entry se4562;
    __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_entry se4564;
    CENSUS_entry se4565;
    __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_entry se4567;
    CENSUS_entry se4568;
    __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_entry se4570;
    CENSUS_entry se4571;
    __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_entry se4583;
    CENSUS_entry se4584;
    __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_entry se4586;
    CENSUS_entry se4587;
    __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_entry se4589;
    CENSUS_entry se4590;
    __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_entry se4592;
    CENSUS_entry se4593;
    __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_entry se4595;
    CENSUS_entry se4596;
    __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_entry se4598;
    CENSUS_entry se4599;
    __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_entry se4601;
    CENSUS_entry se4602;
    __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_entry se4604;
    CENSUS_entry se4605;
    __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_entry se4607;
    CENSUS_entry se4608;
    __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_entry se4610;
    CENSUS_entry se4611;
    __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_entry se4613;
    CENSUS_entry se4614;
    __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_entry se4616;
    CENSUS_entry se4617;
    __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_entry se4619;
    CENSUS_entry se4620;
    __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_entry se4622;
    CENSUS_entry se4623;
    __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_entry se4625;
    CENSUS_entry se4626;
    __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_entry se4628;
    CENSUS_entry se4629;
    __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_entry se4631;
    CENSUS_entry se4632;
    __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_entry se4634;
    CENSUS_entry se4635;
    __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_entry se4637;
    CENSUS_entry se4638;
    __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_entry se4640;
    CENSUS_entry se4641;
    __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_entry se4643;
    CENSUS_entry se4644;
    __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_entry se4646;
    CENSUS_entry se4647;
    __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_entry se4659;
    CENSUS_entry se4660;
    __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_entry se4662;
    CENSUS_entry se4663;
    __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_entry se4665;
    CENSUS_entry se4666;
    __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_entry se4668;
    CENSUS_entry se4669;
    __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_entry se4671;
    CENSUS_entry se4672;
    __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_entry se4674;
    CENSUS_entry se4675;
    __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_entry se4677;
    CENSUS_entry se4678;
    __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_entry se4680;
    CENSUS_entry se4681;
    __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_entry se4683;
    CENSUS_entry se4684;
    __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_entry se4686;
    CENSUS_entry se4687;
    __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_entry se4689;
    CENSUS_entry se4690;
    __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_entry se4692;
    CENSUS_entry se4693;
    __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_entry se4695;
    CENSUS_entry se4696;
    __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_entry se4698;
    CENSUS_entry se4699;
    __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_entry se4701;
    CENSUS_entry se4702;
    __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_entry se4704;
    CENSUS_entry se4705;
    __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_entry se4707;
    CENSUS_entry se4708;
    __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_entry se4710;
    CENSUS_entry se4711;
    __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_entry se4713;
    CENSUS_entry se4714;
    __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_entry se4716;
    CENSUS_entry se4717;
    __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_entry se4719;
    CENSUS_entry se4720;
    __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_entry se4732;
    CENSUS_entry se4733;
    __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_entry se4735;
    CENSUS_entry se4736;
    __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_entry se4738;
    CENSUS_entry se4739;
    __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_entry se4741;
    CENSUS_entry se4742;
    __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_entry se4744;
    CENSUS_entry se4745;
    __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_entry se4747;
    CENSUS_entry se4748;
    __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_entry se4750;
    CENSUS_entry se4751;
    __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_entry se4753;
    CENSUS_entry se4754;
    __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_entry se4756;
    CENSUS_entry se4757;
    __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_entry se4759;
    CENSUS_entry se4760;
    __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_entry se4762;
    CENSUS_entry se4763;
    __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_entry se4765;
    CENSUS_entry se4766;
    __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_entry se4768;
    CENSUS_entry se4769;
    __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_entry se4771;
    CENSUS_entry se4772;
    __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_entry se4774;
    CENSUS_entry se4775;
    __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_entry se4777;
    CENSUS_entry se4778;
    __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_entry se4780;
    CENSUS_entry se4781;
    __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_entry se4783;
    CENSUS_entry se4784;
    __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_entry se4786;
    CENSUS_entry se4787;
    __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_entry se4789;
    CENSUS_entry se4790;
    __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_entry se4802;
    CENSUS_entry se4803;
    __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_entry se4805;
    CENSUS_entry se4806;
    __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_entry se4808;
    CENSUS_entry se4809;
    __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_entry se4811;
    CENSUS_entry se4812;
    __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_entry se4814;
    CENSUS_entry se4815;
    __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_entry se4817;
    CENSUS_entry se4818;
    __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_entry se4820;
    CENSUS_entry se4821;
    __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_entry se4823;
    CENSUS_entry se4824;
    __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_entry se4826;
    CENSUS_entry se4827;
    __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_entry se4829;
    CENSUS_entry se4830;
    __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_entry se4832;
    CENSUS_entry se4833;
    __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_entry se4835;
    CENSUS_entry se4836;
    __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_entry se4838;
    CENSUS_entry se4839;
    __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_entry se4841;
    CENSUS_entry se4842;
    __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_entry se4844;
    CENSUS_entry se4845;
    __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_entry se4847;
    CENSUS_entry se4848;
    __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_entry se4850;
    CENSUS_entry se4851;
    __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_entry se4853;
    CENSUS_entry se4854;
    __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_entry se4856;
    CENSUS_entry se4857;
    __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_entry se4869;
    CENSUS_entry se4870;
    __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_entry se4872;
    CENSUS_entry se4873;
    __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_entry se4875;
    CENSUS_entry se4876;
    __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_entry se4878;
    CENSUS_entry se4879;
    __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_entry se4881;
    CENSUS_entry se4882;
    __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_entry se4884;
    CENSUS_entry se4885;
    __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_entry se4887;
    CENSUS_entry se4888;
    __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_entry se4890;
    CENSUS_entry se4891;
    __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_entry se4893;
    CENSUS_entry se4894;
    __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_entry se4896;
    CENSUS_entry se4897;
    __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_entry se4899;
    CENSUS_entry se4900;
    __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_entry se4902;
    CENSUS_entry se4903;
    __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_entry se4905;
    CENSUS_entry se4906;
    __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_entry se4908;
    CENSUS_entry se4909;
    __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_entry se4911;
    CENSUS_entry se4912;
    __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_entry se4914;
    CENSUS_entry se4915;
    __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_entry se4917;
    CENSUS_entry se4918;
    __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_entry se4920;
    CENSUS_entry se4921;
    __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_entry se4933;
    CENSUS_entry se4934;
    __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_entry se4936;
    CENSUS_entry se4937;
    __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_entry se4939;
    CENSUS_entry se4940;
    __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_entry se4942;
    CENSUS_entry se4943;
    __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_entry se4945;
    CENSUS_entry se4946;
    __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_entry se4948;
    CENSUS_entry se4949;
    __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_entry se4951;
    CENSUS_entry se4952;
    __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_entry se4954;
    CENSUS_entry se4955;
    __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_entry se4957;
    CENSUS_entry se4958;
    __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_entry se4960;
    CENSUS_entry se4961;
    __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_entry se4963;
    CENSUS_entry se4964;
    __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_entry se4966;
    CENSUS_entry se4967;
    __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_entry se4969;
    CENSUS_entry se4970;
    __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_entry se4972;
    CENSUS_entry se4973;
    __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_entry se4975;
    CENSUS_entry se4976;
    __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_entry se4978;
    CENSUS_entry se4979;
    __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_entry se4981;
    CENSUS_entry se4982;
    __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_entry se4994;
    CENSUS_entry se4995;
    __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_entry se4997;
    CENSUS_entry se4998;
    __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_entry se5000;
    CENSUS_entry se5001;
    __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_entry se5003;
    CENSUS_entry se5004;
    __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_entry se5006;
    CENSUS_entry se5007;
    __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_entry se5009;
    CENSUS_entry se5010;
    __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_entry se5012;
    CENSUS_entry se5013;
    __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_entry se5015;
    CENSUS_entry se5016;
    __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_entry se5018;
    CENSUS_entry se5019;
    __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_entry se5021;
    CENSUS_entry se5022;
    __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_entry se5024;
    CENSUS_entry se5025;
    __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_entry se5027;
    CENSUS_entry se5028;
    __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_entry se5030;
    CENSUS_entry se5031;
    __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_entry se5033;
    CENSUS_entry se5034;
    __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_entry se5036;
    CENSUS_entry se5037;
    __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_entry se5039;
    CENSUS_entry se5040;
    __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_entry se5051;
    CENSUS_entry se5052;
    __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_entry se5053;
    CENSUS_entry se5054;
    __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_entry se5055;
    CENSUS_entry se5056;
    __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_entry se5057;
    CENSUS_entry se5058;
    __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_entry se5059;
    CENSUS_entry se5060;
    __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_entry se5062;
    CENSUS_entry se5063;
    __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_entry se5064;
    CENSUS_entry se5065;
    __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_entry se5066;
    CENSUS_entry se5067;
    __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_entry se5068;
    CENSUS_entry se5069;
    __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_entry se5070;
    CENSUS_entry se5071;
    __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_entry se5072;
    CENSUS_entry se5073;
    __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_entry se5074;
    CENSUS_entry se5075;
    __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_entry se5076;
    CENSUS_entry se5077;
    __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_entry se5078;
    CENSUS_entry se5079;
    __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_entry se5080;
    CENSUS_entry se5081;
    __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_entry se5084;
    CENSUS_entry se5085;
    __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_entry se5086;
    CENSUS_entry se5087;
    __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_entry se5088;
    CENSUS_entry se5089;
    __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_entry se5090;
    CENSUS_entry se5091;
    __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_entry se5093;
    CENSUS_entry se5094;
    __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_entry se5095;
    CENSUS_entry se5096;
    __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_entry se5097;
    CENSUS_entry se5098;
    __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_entry se5099;
    CENSUS_entry se5100;
    __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_entry se5101;
    CENSUS_entry se5102;
    __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_entry se5103;
    CENSUS_entry se5104;
    __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_entry se5105;
    CENSUS_entry se5106;
    __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_entry se5107;
    CENSUS_entry se5108;
    __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_entry se5109;
    CENSUS_entry se5110;
    __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_entry se5111;
    CENSUS_entry se5112;
    __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_entry se5115;
    CENSUS_entry se5116;
    __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_entry se5117;
    CENSUS_entry se5118;
    __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_entry se5119;
    CENSUS_entry se5120;
    __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_entry se5122;
    CENSUS_entry se5123;
    __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_entry se5124;
    CENSUS_entry se5125;
    __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_entry se5126;
    CENSUS_entry se5127;
    __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_entry se5128;
    CENSUS_entry se5129;
    __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_entry se5130;
    CENSUS_entry se5131;
    __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_entry se5132;
    CENSUS_entry se5133;
    __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_entry se5134;
    CENSUS_entry se5135;
    __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_entry se5136;
    CENSUS_entry se5137;
    __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_entry se5138;
    CENSUS_entry se5139;
    __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_entry se5140;
    CENSUS_entry se5141;
    __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_entry se5144;
    CENSUS_entry se5145;
    __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_entry se5146;
    CENSUS_entry se5147;
    __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_entry se5149;
    CENSUS_entry se5150;
    __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_entry se5151;
    CENSUS_entry se5152;
    __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_entry se5153;
    CENSUS_entry se5154;
    __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_entry se5155;
    CENSUS_entry se5156;
    __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_entry se5157;
    CENSUS_entry se5158;
    __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_entry se5159;
    CENSUS_entry se5160;
    __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_entry se5161;
    CENSUS_entry se5162;
    __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_entry se5163;
    CENSUS_entry se5164;
    __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_entry se5165;
    CENSUS_entry se5166;
    __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_entry se5167;
    CENSUS_entry se5168;
    __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_entry se5171;
    CENSUS_entry se5172;
    __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_entry se5174;
    CENSUS_entry se5175;
    __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_entry se5176;
    CENSUS_entry se5177;
    __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_entry se5178;
    CENSUS_entry se5179;
    __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_entry se5180;
    CENSUS_entry se5181;
    __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_entry se5182;
    CENSUS_entry se5183;
    __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_entry se5184;
    CENSUS_entry se5185;
    __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_entry se5186;
    CENSUS_entry se5187;
    __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_entry se5188;
    CENSUS_entry se5189;
    __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_entry se5190;
    CENSUS_entry se5191;
    __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_entry se5192;
    CENSUS_entry se5193;
    __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_entry se5197;
    CENSUS_entry se5198;
    __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_entry se5200;
    CENSUS_entry se5201;
    __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_entry se5203;
    CENSUS_entry se5204;
    __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_entry se5206;
    CENSUS_entry se5207;
    __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_entry se5209;
    CENSUS_entry se5210;
    __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_entry se5212;
    CENSUS_entry se5213;
    __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_entry se5215;
    CENSUS_entry se5216;
    __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_entry se5218;
    CENSUS_entry se5219;
    __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_entry se5221;
    CENSUS_entry se5222;
    __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_entry se5224;
    CENSUS_entry se5225;
    __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_entry se5236;
    CENSUS_entry se5237;
    __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_entry se5238;
    CENSUS_entry se5239;
    __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_entry se5240;
    CENSUS_entry se5241;
    __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_entry se5242;
    CENSUS_entry se5243;
    __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_entry se5244;
    CENSUS_entry se5245;
    __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_entry se5246;
    CENSUS_entry se5247;
    __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_entry se5248;
    CENSUS_entry se5249;
    __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_entry se5250;
    CENSUS_entry se5251;
    __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_entry se5252;
    CENSUS_entry se5253;
    __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_entry se5256;
    CENSUS_entry se5257;
    __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_entry se5258;
    CENSUS_entry se5259;
    __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_entry se5260;
    CENSUS_entry se5261;
    __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_entry se5262;
    CENSUS_entry se5263;
    __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_entry se5264;
    CENSUS_entry se5265;
    __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_entry se5266;
    CENSUS_entry se5267;
    __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_entry se5268;
    CENSUS_entry se5269;
    __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_entry se5270;
    CENSUS_entry se5271;
    __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_entry se5274;
    CENSUS_entry se5275;
    __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_entry se5276;
    CENSUS_entry se5277;
    __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_entry se5278;
    CENSUS_entry se5279;
    __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_entry se5280;
    CENSUS_entry se5281;
    __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_entry se5282;
    CENSUS_entry se5283;
    __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_entry se5284;
    CENSUS_entry se5285;
    __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_entry se5286;
    CENSUS_entry se5287;
    __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_entry se5290;
    CENSUS_entry se5291;
    __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_entry se5292;
    CENSUS_entry se5293;
    __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_entry se5294;
    CENSUS_entry se5295;
    __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_entry se5296;
    CENSUS_entry se5297;
    __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_entry se5298;
    CENSUS_entry se5299;
    __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_entry se5300;
    CENSUS_entry se5301;
    __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_entry se5304;
    CENSUS_entry se5305;
    __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_entry se5306;
    CENSUS_entry se5307;
    __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_entry se5308;
    CENSUS_entry se5309;
    __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_entry se5310;
    CENSUS_entry se5311;
    __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_entry se5312;
    CENSUS_entry se5313;
    __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_entry se5316;
    CENSUS_entry se5317;
    __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_entry se5318;
    CENSUS_entry se5319;
    __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_entry se5320;
    CENSUS_entry se5321;
    __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_entry se5322;
    CENSUS_entry se5323;
    __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_entry se5326;
    CENSUS_entry se5327;
    __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_entry se5328;
    CENSUS_entry se5329;
    __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_entry se5330;
    CENSUS_entry se5331;
    __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_entry se5334;
    CENSUS_entry se5335;
    __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_entry se5336;
    CENSUS_entry se5337;
    __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_entry se5340;
    CENSUS_entry se5341;
    __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_entry se5344;
    __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_entry se5345;
    __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_entry se5346;
    __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_entry se5348;
    __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_entry se5350;
    __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_entry se5351;
    __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_entry se5353;
    __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_entry se5355;
    __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_entry se5357;
    __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_entry se5360;
    __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_entry se5367;
    __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_entry se5368;
    __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_entry se5369;
    __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_entry se5370;
    __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_entry se5372;
    __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_entry se5373;
    __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_entry se5374;
    __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_entry se5375;
    __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_entry se5376;
    __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_entry se5378;
    __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_entry se5379;
    __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_entry se5380;
    __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_entry se5381;
    __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_entry se5383;
    __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_entry se5384;
    __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_entry se5385;
    __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_entry se5387;
    __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_entry se5388;
    __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_entry se5390;
    __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_entry se5392;
    __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_entry se5393;
  
    /* Data structures used for storing materialized views */
    LOCATION_map LOCATION;
    CENSUS_map CENSUS;
    ITEM_map ITEM;
    WEATHER_map WEATHER;
    __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_1INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_1INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_1INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_1INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_1INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_2INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_3INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_4INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_5INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_5INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_5INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_6INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_6INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_7INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_7INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_8INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_8INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_9INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_9INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_10INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_10INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_11INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_11INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_12INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_12INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_13INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_13INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_14INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_14INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_15INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_15INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_16INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_16INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_17INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_17INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_18INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_18INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_19INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_19INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_20INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_20INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_21INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_21INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_22INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_22INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_23INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_23INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_24INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_24INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_25INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_25INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_26INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_26INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_27INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_27INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_28INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_28INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_29INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_29INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_30INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_30INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_31INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_31INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_32INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_32INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_33INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_33INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_34INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_34INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_35INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_35INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_36INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_36INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_37INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_37INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_38INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_38INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_39INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_39INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_40INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_40INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_41INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_41INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_42INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_42INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_43INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_43INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_44INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_45INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_46INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_47INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_86INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_87INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_88INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_127INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_128INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA_map __SQL_SUM_AGGREGATE_167INVENTORY1_DELTA;
    __SQL_SUM_AGGREGATE_167INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_167INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_168INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_168INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_169INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_169INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_170INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_170INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_171INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_171INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_172INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_172INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_173INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_173INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_174INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_174INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_175INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_175INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_176INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_176INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_177INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_177INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_178INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_178INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_179INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_179INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_180INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_180INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_181INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_181INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_182INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_182INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_183INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_183INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_184INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_184INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_185INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_185INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_186INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_186INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_187INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_187INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_188INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_188INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_189INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_189INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_190INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_190INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_191INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_191INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_192INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_192INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_193INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_193INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_194INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_194INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_195INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_195INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_206INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_206INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_207INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_207INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_208INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_208INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_209INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_209INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_210INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_210INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_211INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_211INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_212INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_212INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_213INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_213INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_214INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_214INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_215INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_215INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_216INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_216INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_217INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_217INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_218INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_218INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_219INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_219INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_220INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_220INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_221INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_221INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_222INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_222INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_223INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_223INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_224INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_224INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_225INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_225INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_226INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_226INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_227INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_227INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_228INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_228INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_229INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_229INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_230INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_230INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_231INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_231INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_232INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_232INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_233INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_233INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_244INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_244INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_245INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_245INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_246INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_246INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_247INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_247INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_248INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_248INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_249INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_249INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_250INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_250INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_251INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_251INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_252INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_252INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_253INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_253INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_254INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_254INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_255INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_255INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_256INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_256INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_257INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_257INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_258INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_258INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_259INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_259INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_260INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_260INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_261INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_261INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_262INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_262INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_263INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_263INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_264INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_264INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_265INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_265INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_266INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_266INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_267INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_267INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_268INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_268INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_269INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_269INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_270INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_270INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_281INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_281INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_282INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_282INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_283INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_283INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_284INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_284INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_285INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_285INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_286INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_286INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_287INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_287INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_288INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_288INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_289INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_289INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_290INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_290INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_291INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_291INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_292INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_292INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_293INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_293INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_294INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_294INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_295INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_295INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_296INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_296INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_297INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_297INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_298INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_298INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_299INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_299INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_300INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_300INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_301INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_301INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_302INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_302INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_303INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_303INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_304INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_304INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_305INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_305INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_306INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_306INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_317INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_317INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_318INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_318INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_319INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_319INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_320INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_320INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_321INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_321INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_322INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_322INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_323INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_323INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_324INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_324INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_325INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_325INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_326INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_326INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_327INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_327INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_328INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_328INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_329INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_329INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_330INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_330INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_331INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_331INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_332INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_332INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_333INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_333INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_334INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_334INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_335INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_335INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_336INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_336INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_337INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_337INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_338INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_338INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_339INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_339INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_340INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_340INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_341INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_341INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_352INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_352INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_353INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_353INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_354INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_354INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_355INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_355INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_356INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_356INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_357INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_357INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_358INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_358INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_359INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_359INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_360INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_360INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_361INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_361INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_362INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_362INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_363INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_363INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_364INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_364INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_365INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_365INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_366INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_366INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_367INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_367INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_368INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_368INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_369INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_369INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_370INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_370INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_371INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_371INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_372INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_372INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_373INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_373INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_374INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_374INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_375INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_375INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_386INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_386INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_387INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_387INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_388INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_388INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_389INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_389INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_390INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_390INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_391INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_391INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_392INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_392INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_393INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_393INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_394INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_394INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_395INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_395INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_396INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_396INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_397INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_397INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_398INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_398INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_399INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_399INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_400INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_400INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_401INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_401INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_402INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_402INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_403INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_403INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_404INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_404INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_405INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_405INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_406INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_406INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_407INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_407INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_408INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_408INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_419INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_419INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_420INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_420INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_421INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_421INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_422INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_422INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_423INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_423INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_424INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_424INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_425INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_425INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_426INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_426INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_427INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_427INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_428INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_428INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_429INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_429INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_430INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_430INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_431INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_431INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_432INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_432INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_433INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_433INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_434INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_434INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_435INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_435INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_436INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_436INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_437INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_437INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_438INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_438INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_439INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_439INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_440INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_440INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_451INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_451INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_452INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_452INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_453INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_453INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_454INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_454INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_455INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_455INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_456INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_456INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_457INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_457INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_458INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_458INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_459INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_459INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_460INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_460INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_461INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_461INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_462INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_462INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_463INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_463INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_464INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_464INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_465INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_465INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_466INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_466INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_467INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_467INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_468INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_468INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_469INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_469INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_470INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_470INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_471INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_471INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_482INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_482INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_483INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_483INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_484INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_484INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_485INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_485INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_486INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_486INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_487INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_487INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_488INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_488INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_489INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_489INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_490INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_490INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_491INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_491INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_492INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_492INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_493INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_493INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_494INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_494INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_495INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_495INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_496INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_496INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_497INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_497INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_498INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_498INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_499INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_499INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_500INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_500INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_501INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_501INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_512INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_512INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_513INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_513INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_514INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_514INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_515INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_515INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_516INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_516INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_517INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_517INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_518INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_518INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_519INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_519INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_520INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_520INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_521INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_521INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_522INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_522INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_523INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_523INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_524INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_524INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_525INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_525INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_526INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_526INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_527INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_527INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_528INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_528INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_529INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_529INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_530INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_530INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_541INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_541INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_542INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_542INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_543INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_543INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_544INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_544INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_545INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_545INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_546INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_546INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_547INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_547INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_548INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_548INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_549INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_549INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_550INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_550INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_551INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_551INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_552INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_552INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_553INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_553INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_554INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_554INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_555INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_555INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_556INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_556INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_557INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_557INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_558INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_558INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_569INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_569INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_570INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_570INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_571INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_571INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_572INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_572INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_573INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_573INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_574INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_574INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_575INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_575INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_576INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_576INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_577INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_577INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_578INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_578INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_579INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_579INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_580INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_580INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_581INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_581INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_582INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_582INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_583INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_583INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_584INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_584INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_585INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_585INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_596INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_596INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_597INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_597INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_598INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_598INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_599INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_599INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_600INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_600INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_601INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_601INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_602INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_602INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_603INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_603INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_604INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_604INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_605INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_605INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_606INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_606INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_607INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_607INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_608INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_608INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_609INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_609INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_610INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_610INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_611INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_611INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_622INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_622INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_623INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_623INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_624INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_624INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_625INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_625INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_626INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_626INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_627INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_627INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_628INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_628INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_629INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_629INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_630INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_630INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_631INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_631INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_632INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_632INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_633INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_633INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_634INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_634INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_635INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_635INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_636INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_636INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_647INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_647INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_648INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_648INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_649INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_649INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_650INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_650INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_651INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_651INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_652INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_652INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_653INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_653INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_654INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_654INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_655INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_655INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_656INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_656INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_657INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_657INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_658INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_658INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_659INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_659INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_660INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_660INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_671INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_671INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_672INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_672INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_673INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_673INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_674INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_674INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_675INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_675INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_676INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_676INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_677INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_677INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_678INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_678INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_679INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_679INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_680INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_680INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_681INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_681INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_682INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_682INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_683INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_683INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_694INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_694INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_695INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_695INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_696INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_696INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_697INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_697INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_698INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_698INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_699INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_699INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_700INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_700INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_701INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_701INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_702INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_702INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_703INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_703INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_704INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_704INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_705INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_705INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_716INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_716INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_717INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_717INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_718INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_718INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_719INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_719INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_720INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_720INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_721INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_721INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_722INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_722INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_723INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_723INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_724INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_724INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_725INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_725INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_726INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_726INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_737INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_737INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_738INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_738INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_739INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_739INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_740INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_740INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_741INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_741INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_742INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_742INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_743INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_743INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_744INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_744INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_745INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_745INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_746INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_746INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_757INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_757INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_758INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_758INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_759INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_759INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_760INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_760INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_761INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_761INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_762INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_762INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_763INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_763INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_764INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_764INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_765INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_765INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_776INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_776INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_777INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_777INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_778INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_778INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_779INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_779INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_780INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_780INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_781INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_781INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_782INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_782INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_783INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_783INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_794INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_794INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_795INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_795INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_796INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_796INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_797INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_797INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_798INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_798INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_799INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_799INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_800INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_800INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_811INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_811INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_812INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_812INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_813INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_813INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_814INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_814INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_815INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_815INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_816INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_816INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_827INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_827INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_828INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_828INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_829INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_829INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_830INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_830INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_831INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_831INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_842INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_842INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_843INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_843INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_844INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_844INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_845INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_845INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_856INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_856INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_857INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_857INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_858INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_858INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_869INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_869INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_870INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_870INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_881INVENTORY1_P_3_map __SQL_SUM_AGGREGATE_881INVENTORY1_P_3;
    __SQL_SUM_AGGREGATE_892INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_892INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_893INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_893INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_894INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_894INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_895INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_895INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_902INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_902INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_903INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_903INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_904INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_904INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_911INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_911INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_912INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_912INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_919INVENTORY1_P_2_map __SQL_SUM_AGGREGATE_919INVENTORY1_P_2;
    __SQL_SUM_AGGREGATE_926INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_926INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_927INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_927INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_928INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_928INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_929INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_929INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_930INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_930INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_931INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_931INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_932INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_932INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_933INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_933INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_934INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_934INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_935INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_935INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_936INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_936INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_937INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_937INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_938INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_938INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_939INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_939INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_940INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_940INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_941INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_941INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_942INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_942INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_943INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_943INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_944INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_944INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_945INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_945INVENTORY1_P_1;
    __SQL_SUM_AGGREGATE_946INVENTORY1_P_1_map __SQL_SUM_AGGREGATE_946INVENTORY1_P_1;
    DELTA_INVENTORY_map DELTA_INVENTORY;
    
    
  
  };
}
        