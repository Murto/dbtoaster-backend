#include <sys/time.h>
#include <vector>
#include "macro.hpp"
#include "types.hpp"
#include "functions.hpp"
#include "hash.hpp"
#include "mmap.hpp"
#include "serialization.hpp"

#define RELATION_INVENTORY_DYNAMIC
#define RELATION_LOCATION_STATIC
#define RELATION_CENSUS_STATIC
#define RELATION_ITEM_STATIC
#define RELATION_WEATHER_STATIC

namespace dbtoaster {
  
  /* Definitions of auxiliary maps for storing materialized views. */
  struct LOCATION_entry {
    long LOCATION_LOCN; long LOCATION_ZIP; DOUBLE_TYPE LOCATION_RGN_CD; DOUBLE_TYPE LOCATION_CLIM_ZN_NBR; DOUBLE_TYPE LOCATION_TOT_AREA_SQ_FT; DOUBLE_TYPE LOCATION_SELL_AREA_SQ_FT; DOUBLE_TYPE LOCATION_AVGHHI; DOUBLE_TYPE LOCATION_SUPERTARGETDISTANCE; DOUBLE_TYPE LOCATION_SUPERTARGETDRIVETIME; DOUBLE_TYPE LOCATION_TARGETDISTANCE; DOUBLE_TYPE LOCATION_TARGETDRIVETIME; DOUBLE_TYPE LOCATION_WALMARTDISTANCE; DOUBLE_TYPE LOCATION_WALMARTDRIVETIME; DOUBLE_TYPE LOCATION_WALMARTSUPERCENTERDISTANCE; DOUBLE_TYPE LOCATION_WALMARTSUPERCENTERDRIVETIME; long __av;  LOCATION_entry* nxt; LOCATION_entry* prv;
    explicit LOCATION_entry() : nxt(nullptr), prv(nullptr) { /*LOCATION_LOCN = 0L; LOCATION_ZIP = 0L; LOCATION_RGN_CD = 0.0; LOCATION_CLIM_ZN_NBR = 0.0; LOCATION_TOT_AREA_SQ_FT = 0.0; LOCATION_SELL_AREA_SQ_FT = 0.0; LOCATION_AVGHHI = 0.0; LOCATION_SUPERTARGETDISTANCE = 0.0; LOCATION_SUPERTARGETDRIVETIME = 0.0; LOCATION_TARGETDISTANCE = 0.0; LOCATION_TARGETDRIVETIME = 0.0; LOCATION_WALMARTDISTANCE = 0.0; LOCATION_WALMARTDRIVETIME = 0.0; LOCATION_WALMARTSUPERCENTERDISTANCE = 0.0; LOCATION_WALMARTSUPERCENTERDRIVETIME = 0.0; __av = 0L; */ }
    explicit LOCATION_entry(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3, const DOUBLE_TYPE c4, const DOUBLE_TYPE c5, const DOUBLE_TYPE c6, const DOUBLE_TYPE c7, const DOUBLE_TYPE c8, const DOUBLE_TYPE c9, const DOUBLE_TYPE c10, const DOUBLE_TYPE c11, const DOUBLE_TYPE c12, const DOUBLE_TYPE c13, const DOUBLE_TYPE c14, const long c15) { LOCATION_LOCN = c0; LOCATION_ZIP = c1; LOCATION_RGN_CD = c2; LOCATION_CLIM_ZN_NBR = c3; LOCATION_TOT_AREA_SQ_FT = c4; LOCATION_SELL_AREA_SQ_FT = c5; LOCATION_AVGHHI = c6; LOCATION_SUPERTARGETDISTANCE = c7; LOCATION_SUPERTARGETDRIVETIME = c8; LOCATION_TARGETDISTANCE = c9; LOCATION_TARGETDRIVETIME = c10; LOCATION_WALMARTDISTANCE = c11; LOCATION_WALMARTDRIVETIME = c12; LOCATION_WALMARTSUPERCENTERDISTANCE = c13; LOCATION_WALMARTSUPERCENTERDRIVETIME = c14; __av = c15; }
    LOCATION_entry(const LOCATION_entry& other) : LOCATION_LOCN( other.LOCATION_LOCN ), LOCATION_ZIP( other.LOCATION_ZIP ), LOCATION_RGN_CD( other.LOCATION_RGN_CD ), LOCATION_CLIM_ZN_NBR( other.LOCATION_CLIM_ZN_NBR ), LOCATION_TOT_AREA_SQ_FT( other.LOCATION_TOT_AREA_SQ_FT ), LOCATION_SELL_AREA_SQ_FT( other.LOCATION_SELL_AREA_SQ_FT ), LOCATION_AVGHHI( other.LOCATION_AVGHHI ), LOCATION_SUPERTARGETDISTANCE( other.LOCATION_SUPERTARGETDISTANCE ), LOCATION_SUPERTARGETDRIVETIME( other.LOCATION_SUPERTARGETDRIVETIME ), LOCATION_TARGETDISTANCE( other.LOCATION_TARGETDISTANCE ), LOCATION_TARGETDRIVETIME( other.LOCATION_TARGETDRIVETIME ), LOCATION_WALMARTDISTANCE( other.LOCATION_WALMARTDISTANCE ), LOCATION_WALMARTDRIVETIME( other.LOCATION_WALMARTDRIVETIME ), LOCATION_WALMARTSUPERCENTERDISTANCE( other.LOCATION_WALMARTSUPERCENTERDISTANCE ), LOCATION_WALMARTSUPERCENTERDRIVETIME( other.LOCATION_WALMARTSUPERCENTERDRIVETIME ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE LOCATION_entry& modify(const long c0, const long c1, const DOUBLE_TYPE c2, const DOUBLE_TYPE c3, const DOUBLE_TYPE c4, const DOUBLE_TYPE c5, const DOUBLE_TYPE c6, const DOUBLE_TYPE c7, const DOUBLE_TYPE c8, const DOUBLE_TYPE c9, const DOUBLE_TYPE c10, const DOUBLE_TYPE c11, const DOUBLE_TYPE c12, const DOUBLE_TYPE c13, const DOUBLE_TYPE c14) { LOCATION_LOCN = c0; LOCATION_ZIP = c1; LOCATION_RGN_CD = c2; LOCATION_CLIM_ZN_NBR = c3; LOCATION_TOT_AREA_SQ_FT = c4; LOCATION_SELL_AREA_SQ_FT = c5; LOCATION_AVGHHI = c6; LOCATION_SUPERTARGETDISTANCE = c7; LOCATION_SUPERTARGETDRIVETIME = c8; LOCATION_TARGETDISTANCE = c9; LOCATION_TARGETDRIVETIME = c10; LOCATION_WALMARTDISTANCE = c11; LOCATION_WALMARTDRIVETIME = c12; LOCATION_WALMARTSUPERCENTERDISTANCE = c13; LOCATION_WALMARTSUPERCENTERDRIVETIME = c14;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_ZIP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_RGN_CD);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_CLIM_ZN_NBR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TOT_AREA_SQ_FT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SELL_AREA_SQ_FT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_AVGHHI);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SUPERTARGETDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_SUPERTARGETDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TARGETDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_TARGETDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTSUPERCENTERDISTANCE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, LOCATION_WALMARTSUPERCENTERDRIVETIME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct LOCATION_mapkey01234567891011121314_idxfn {
    FORCE_INLINE static size_t hash(const LOCATION_entry& e) {
      size_t h = 0;
      hash_combine(h, e.LOCATION_LOCN);
      hash_combine(h, e.LOCATION_ZIP);
      hash_combine(h, e.LOCATION_RGN_CD);
      hash_combine(h, e.LOCATION_CLIM_ZN_NBR);
      hash_combine(h, e.LOCATION_TOT_AREA_SQ_FT);
      hash_combine(h, e.LOCATION_SELL_AREA_SQ_FT);
      hash_combine(h, e.LOCATION_AVGHHI);
      hash_combine(h, e.LOCATION_SUPERTARGETDISTANCE);
      hash_combine(h, e.LOCATION_SUPERTARGETDRIVETIME);
      hash_combine(h, e.LOCATION_TARGETDISTANCE);
      hash_combine(h, e.LOCATION_TARGETDRIVETIME);
      hash_combine(h, e.LOCATION_WALMARTDISTANCE);
      hash_combine(h, e.LOCATION_WALMARTDRIVETIME);
      hash_combine(h, e.LOCATION_WALMARTSUPERCENTERDISTANCE);
      hash_combine(h, e.LOCATION_WALMARTSUPERCENTERDRIVETIME);
      return h;
    }
    FORCE_INLINE static bool equals(const LOCATION_entry& x, const LOCATION_entry& y) {
      return x.LOCATION_LOCN == y.LOCATION_LOCN && x.LOCATION_ZIP == y.LOCATION_ZIP && x.LOCATION_RGN_CD == y.LOCATION_RGN_CD && x.LOCATION_CLIM_ZN_NBR == y.LOCATION_CLIM_ZN_NBR && x.LOCATION_TOT_AREA_SQ_FT == y.LOCATION_TOT_AREA_SQ_FT && x.LOCATION_SELL_AREA_SQ_FT == y.LOCATION_SELL_AREA_SQ_FT && x.LOCATION_AVGHHI == y.LOCATION_AVGHHI && x.LOCATION_SUPERTARGETDISTANCE == y.LOCATION_SUPERTARGETDISTANCE && x.LOCATION_SUPERTARGETDRIVETIME == y.LOCATION_SUPERTARGETDRIVETIME && x.LOCATION_TARGETDISTANCE == y.LOCATION_TARGETDISTANCE && x.LOCATION_TARGETDRIVETIME == y.LOCATION_TARGETDRIVETIME && x.LOCATION_WALMARTDISTANCE == y.LOCATION_WALMARTDISTANCE && x.LOCATION_WALMARTDRIVETIME == y.LOCATION_WALMARTDRIVETIME && x.LOCATION_WALMARTSUPERCENTERDISTANCE == y.LOCATION_WALMARTSUPERCENTERDISTANCE && x.LOCATION_WALMARTSUPERCENTERDRIVETIME == y.LOCATION_WALMARTSUPERCENTERDRIVETIME;
    }
  };
  
  typedef MultiHashMap<LOCATION_entry, long, 
    HashIndex<LOCATION_entry, long, LOCATION_mapkey01234567891011121314_idxfn, true>
  > LOCATION_map;
  typedef HashIndex<LOCATION_entry, long, LOCATION_mapkey01234567891011121314_idxfn, true> HashIndex_LOCATION_map_01234567891011121314;
  
  struct CENSUS_entry {
    long CENSUS_ZIP; long CENSUS_POPULATION; long CENSUS_WHITE; long CENSUS_ASIAN; long CENSUS_PACIFIC; long CENSUS_BLACKAFRICAN; DOUBLE_TYPE CENSUS_MEDIANAGE; long CENSUS_OCCUPIEDHOUSEUNITS; long CENSUS_HOUSEUNITS; long CENSUS_FAMILIES; long CENSUS_HOUSEHOLDS; long CENSUS_HUSBWIFE; long CENSUS_MALES; long CENSUS_FEMALES; long CENSUS_HOUSEHOLDSCHILDREN; long CENSUS_HISPANIC; long __av;  CENSUS_entry* nxt; CENSUS_entry* prv;
    explicit CENSUS_entry() : nxt(nullptr), prv(nullptr) { /*CENSUS_ZIP = 0L; CENSUS_POPULATION = 0L; CENSUS_WHITE = 0L; CENSUS_ASIAN = 0L; CENSUS_PACIFIC = 0L; CENSUS_BLACKAFRICAN = 0L; CENSUS_MEDIANAGE = 0.0; CENSUS_OCCUPIEDHOUSEUNITS = 0L; CENSUS_HOUSEUNITS = 0L; CENSUS_FAMILIES = 0L; CENSUS_HOUSEHOLDS = 0L; CENSUS_HUSBWIFE = 0L; CENSUS_MALES = 0L; CENSUS_FEMALES = 0L; CENSUS_HOUSEHOLDSCHILDREN = 0L; CENSUS_HISPANIC = 0L; __av = 0L; */ }
    explicit CENSUS_entry(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const long c14, const long c15, const long c16) { CENSUS_ZIP = c0; CENSUS_POPULATION = c1; CENSUS_WHITE = c2; CENSUS_ASIAN = c3; CENSUS_PACIFIC = c4; CENSUS_BLACKAFRICAN = c5; CENSUS_MEDIANAGE = c6; CENSUS_OCCUPIEDHOUSEUNITS = c7; CENSUS_HOUSEUNITS = c8; CENSUS_FAMILIES = c9; CENSUS_HOUSEHOLDS = c10; CENSUS_HUSBWIFE = c11; CENSUS_MALES = c12; CENSUS_FEMALES = c13; CENSUS_HOUSEHOLDSCHILDREN = c14; CENSUS_HISPANIC = c15; __av = c16; }
    CENSUS_entry(const CENSUS_entry& other) : CENSUS_ZIP( other.CENSUS_ZIP ), CENSUS_POPULATION( other.CENSUS_POPULATION ), CENSUS_WHITE( other.CENSUS_WHITE ), CENSUS_ASIAN( other.CENSUS_ASIAN ), CENSUS_PACIFIC( other.CENSUS_PACIFIC ), CENSUS_BLACKAFRICAN( other.CENSUS_BLACKAFRICAN ), CENSUS_MEDIANAGE( other.CENSUS_MEDIANAGE ), CENSUS_OCCUPIEDHOUSEUNITS( other.CENSUS_OCCUPIEDHOUSEUNITS ), CENSUS_HOUSEUNITS( other.CENSUS_HOUSEUNITS ), CENSUS_FAMILIES( other.CENSUS_FAMILIES ), CENSUS_HOUSEHOLDS( other.CENSUS_HOUSEHOLDS ), CENSUS_HUSBWIFE( other.CENSUS_HUSBWIFE ), CENSUS_MALES( other.CENSUS_MALES ), CENSUS_FEMALES( other.CENSUS_FEMALES ), CENSUS_HOUSEHOLDSCHILDREN( other.CENSUS_HOUSEHOLDSCHILDREN ), CENSUS_HISPANIC( other.CENSUS_HISPANIC ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE CENSUS_entry& modify(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const long c14, const long c15) { CENSUS_ZIP = c0; CENSUS_POPULATION = c1; CENSUS_WHITE = c2; CENSUS_ASIAN = c3; CENSUS_PACIFIC = c4; CENSUS_BLACKAFRICAN = c5; CENSUS_MEDIANAGE = c6; CENSUS_OCCUPIEDHOUSEUNITS = c7; CENSUS_HOUSEUNITS = c8; CENSUS_FAMILIES = c9; CENSUS_HOUSEHOLDS = c10; CENSUS_HUSBWIFE = c11; CENSUS_MALES = c12; CENSUS_FEMALES = c13; CENSUS_HOUSEHOLDSCHILDREN = c14; CENSUS_HISPANIC = c15;  return *this; }
    FORCE_INLINE CENSUS_entry& modify0(const long c0) { CENSUS_ZIP = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_ZIP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_POPULATION);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_WHITE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_ASIAN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_PACIFIC);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_BLACKAFRICAN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_MEDIANAGE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_OCCUPIEDHOUSEUNITS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEUNITS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_FAMILIES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEHOLDS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HUSBWIFE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_MALES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_FEMALES);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HOUSEHOLDSCHILDREN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CENSUS_HISPANIC);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct CENSUS_mapkey0123456789101112131415_idxfn {
    FORCE_INLINE static size_t hash(const CENSUS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CENSUS_ZIP);
      hash_combine(h, e.CENSUS_POPULATION);
      hash_combine(h, e.CENSUS_WHITE);
      hash_combine(h, e.CENSUS_ASIAN);
      hash_combine(h, e.CENSUS_PACIFIC);
      hash_combine(h, e.CENSUS_BLACKAFRICAN);
      hash_combine(h, e.CENSUS_MEDIANAGE);
      hash_combine(h, e.CENSUS_OCCUPIEDHOUSEUNITS);
      hash_combine(h, e.CENSUS_HOUSEUNITS);
      hash_combine(h, e.CENSUS_FAMILIES);
      hash_combine(h, e.CENSUS_HOUSEHOLDS);
      hash_combine(h, e.CENSUS_HUSBWIFE);
      hash_combine(h, e.CENSUS_MALES);
      hash_combine(h, e.CENSUS_FEMALES);
      hash_combine(h, e.CENSUS_HOUSEHOLDSCHILDREN);
      hash_combine(h, e.CENSUS_HISPANIC);
      return h;
    }
    FORCE_INLINE static bool equals(const CENSUS_entry& x, const CENSUS_entry& y) {
      return x.CENSUS_ZIP == y.CENSUS_ZIP && x.CENSUS_POPULATION == y.CENSUS_POPULATION && x.CENSUS_WHITE == y.CENSUS_WHITE && x.CENSUS_ASIAN == y.CENSUS_ASIAN && x.CENSUS_PACIFIC == y.CENSUS_PACIFIC && x.CENSUS_BLACKAFRICAN == y.CENSUS_BLACKAFRICAN && x.CENSUS_MEDIANAGE == y.CENSUS_MEDIANAGE && x.CENSUS_OCCUPIEDHOUSEUNITS == y.CENSUS_OCCUPIEDHOUSEUNITS && x.CENSUS_HOUSEUNITS == y.CENSUS_HOUSEUNITS && x.CENSUS_FAMILIES == y.CENSUS_FAMILIES && x.CENSUS_HOUSEHOLDS == y.CENSUS_HOUSEHOLDS && x.CENSUS_HUSBWIFE == y.CENSUS_HUSBWIFE && x.CENSUS_MALES == y.CENSUS_MALES && x.CENSUS_FEMALES == y.CENSUS_FEMALES && x.CENSUS_HOUSEHOLDSCHILDREN == y.CENSUS_HOUSEHOLDSCHILDREN && x.CENSUS_HISPANIC == y.CENSUS_HISPANIC;
    }
  };
  
  struct CENSUS_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const CENSUS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CENSUS_ZIP);
      return h;
    }
    FORCE_INLINE static bool equals(const CENSUS_entry& x, const CENSUS_entry& y) {
      return x.CENSUS_ZIP == y.CENSUS_ZIP;
    }
  };
  
  typedef MultiHashMap<CENSUS_entry, long, 
    HashIndex<CENSUS_entry, long, CENSUS_mapkey0123456789101112131415_idxfn, true>,
    HashIndex<CENSUS_entry, long, CENSUS_mapkey0_idxfn, false>
  > CENSUS_map;
  typedef HashIndex<CENSUS_entry, long, CENSUS_mapkey0123456789101112131415_idxfn, true> HashIndex_CENSUS_map_0123456789101112131415;
  typedef HashIndex<CENSUS_entry, long, CENSUS_mapkey0_idxfn, false> HashIndex_CENSUS_map_0;
  
  struct ITEM_entry {
    DOUBLE_TYPE ITEM_KSN; long ITEM_SUBCATEGORY; long ITEM_CATEGORY; long ITEM_CATEGORYCLUSTER; DOUBLE_TYPE ITEM_PRIZE; long __av;  ITEM_entry* nxt; ITEM_entry* prv;
    explicit ITEM_entry() : nxt(nullptr), prv(nullptr) { /*ITEM_KSN = 0.0; ITEM_SUBCATEGORY = 0L; ITEM_CATEGORY = 0L; ITEM_CATEGORYCLUSTER = 0L; ITEM_PRIZE = 0.0; __av = 0L; */ }
    explicit ITEM_entry(const DOUBLE_TYPE c0, const long c1, const long c2, const long c3, const DOUBLE_TYPE c4, const long c5) { ITEM_KSN = c0; ITEM_SUBCATEGORY = c1; ITEM_CATEGORY = c2; ITEM_CATEGORYCLUSTER = c3; ITEM_PRIZE = c4; __av = c5; }
    ITEM_entry(const ITEM_entry& other) : ITEM_KSN( other.ITEM_KSN ), ITEM_SUBCATEGORY( other.ITEM_SUBCATEGORY ), ITEM_CATEGORY( other.ITEM_CATEGORY ), ITEM_CATEGORYCLUSTER( other.ITEM_CATEGORYCLUSTER ), ITEM_PRIZE( other.ITEM_PRIZE ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE ITEM_entry& modify(const DOUBLE_TYPE c0, const long c1, const long c2, const long c3, const DOUBLE_TYPE c4) { ITEM_KSN = c0; ITEM_SUBCATEGORY = c1; ITEM_CATEGORY = c2; ITEM_CATEGORYCLUSTER = c3; ITEM_PRIZE = c4;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_SUBCATEGORY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_CATEGORY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_CATEGORYCLUSTER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_PRIZE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct ITEM_mapkey01234_idxfn {
    FORCE_INLINE static size_t hash(const ITEM_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_KSN);
      hash_combine(h, e.ITEM_SUBCATEGORY);
      hash_combine(h, e.ITEM_CATEGORY);
      hash_combine(h, e.ITEM_CATEGORYCLUSTER);
      hash_combine(h, e.ITEM_PRIZE);
      return h;
    }
    FORCE_INLINE static bool equals(const ITEM_entry& x, const ITEM_entry& y) {
      return x.ITEM_KSN == y.ITEM_KSN && x.ITEM_SUBCATEGORY == y.ITEM_SUBCATEGORY && x.ITEM_CATEGORY == y.ITEM_CATEGORY && x.ITEM_CATEGORYCLUSTER == y.ITEM_CATEGORYCLUSTER && x.ITEM_PRIZE == y.ITEM_PRIZE;
    }
  };
  
  typedef MultiHashMap<ITEM_entry, long, 
    HashIndex<ITEM_entry, long, ITEM_mapkey01234_idxfn, true>
  > ITEM_map;
  typedef HashIndex<ITEM_entry, long, ITEM_mapkey01234_idxfn, true> HashIndex_ITEM_map_01234;
  
  struct WEATHER_entry {
    long WEATHER_LOCN; long WEATHER_DATEID; long WEATHER_RAIN; long WEATHER_SNOW; long WEATHER_MAXTEMP; long WEATHER_MINTEMP; DOUBLE_TYPE WEATHER_MEANWIND; long WEATHER_THUNDER; long __av;  WEATHER_entry* nxt; WEATHER_entry* prv;
    explicit WEATHER_entry() : nxt(nullptr), prv(nullptr) { /*WEATHER_LOCN = 0L; WEATHER_DATEID = 0L; WEATHER_RAIN = 0L; WEATHER_SNOW = 0L; WEATHER_MAXTEMP = 0L; WEATHER_MINTEMP = 0L; WEATHER_MEANWIND = 0.0; WEATHER_THUNDER = 0L; __av = 0L; */ }
    explicit WEATHER_entry(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7, const long c8) { WEATHER_LOCN = c0; WEATHER_DATEID = c1; WEATHER_RAIN = c2; WEATHER_SNOW = c3; WEATHER_MAXTEMP = c4; WEATHER_MINTEMP = c5; WEATHER_MEANWIND = c6; WEATHER_THUNDER = c7; __av = c8; }
    WEATHER_entry(const WEATHER_entry& other) : WEATHER_LOCN( other.WEATHER_LOCN ), WEATHER_DATEID( other.WEATHER_DATEID ), WEATHER_RAIN( other.WEATHER_RAIN ), WEATHER_SNOW( other.WEATHER_SNOW ), WEATHER_MAXTEMP( other.WEATHER_MAXTEMP ), WEATHER_MINTEMP( other.WEATHER_MINTEMP ), WEATHER_MEANWIND( other.WEATHER_MEANWIND ), WEATHER_THUNDER( other.WEATHER_THUNDER ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE WEATHER_entry& modify(const long c0, const long c1, const long c2, const long c3, const long c4, const long c5, const DOUBLE_TYPE c6, const long c7) { WEATHER_LOCN = c0; WEATHER_DATEID = c1; WEATHER_RAIN = c2; WEATHER_SNOW = c3; WEATHER_MAXTEMP = c4; WEATHER_MINTEMP = c5; WEATHER_MEANWIND = c6; WEATHER_THUNDER = c7;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_RAIN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_SNOW);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MAXTEMP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MINTEMP);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_MEANWIND);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, WEATHER_THUNDER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct WEATHER_mapkey01234567_idxfn {
    FORCE_INLINE static size_t hash(const WEATHER_entry& e) {
      size_t h = 0;
      hash_combine(h, e.WEATHER_LOCN);
      hash_combine(h, e.WEATHER_DATEID);
      hash_combine(h, e.WEATHER_RAIN);
      hash_combine(h, e.WEATHER_SNOW);
      hash_combine(h, e.WEATHER_MAXTEMP);
      hash_combine(h, e.WEATHER_MINTEMP);
      hash_combine(h, e.WEATHER_MEANWIND);
      hash_combine(h, e.WEATHER_THUNDER);
      return h;
    }
    FORCE_INLINE static bool equals(const WEATHER_entry& x, const WEATHER_entry& y) {
      return x.WEATHER_LOCN == y.WEATHER_LOCN && x.WEATHER_DATEID == y.WEATHER_DATEID && x.WEATHER_RAIN == y.WEATHER_RAIN && x.WEATHER_SNOW == y.WEATHER_SNOW && x.WEATHER_MAXTEMP == y.WEATHER_MAXTEMP && x.WEATHER_MINTEMP == y.WEATHER_MINTEMP && x.WEATHER_MEANWIND == y.WEATHER_MEANWIND && x.WEATHER_THUNDER == y.WEATHER_THUNDER;
    }
  };
  
  typedef MultiHashMap<WEATHER_entry, long, 
    HashIndex<WEATHER_entry, long, WEATHER_mapkey01234567_idxfn, true>
  > WEATHER_map;
  typedef HashIndex<WEATHER_entry, long, WEATHER_mapkey01234567_idxfn, true> HashIndex_WEATHER_map_01234567;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry(const __SQL_SUM_AGGREGATE_1INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry(const __SQL_SUM_AGGREGATE_1INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_1INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_1INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_1INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_1INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_1INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry(const __SQL_SUM_AGGREGATE_1INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_1INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_1INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_1INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_1INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_1INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_1INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_1INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_1INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_1INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_1INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_1INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_5INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_5INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_5INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry(const __SQL_SUM_AGGREGATE_5INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_5INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_5INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_5INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_5INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_5INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_5INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_5INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_5INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_5INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_5INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_5INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_5INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_6INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_6INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_6INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_6INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_6INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry(const __SQL_SUM_AGGREGATE_6INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_6INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_6INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_6INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_6INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_6INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_6INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_6INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_6INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_6INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_6INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_6INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_6INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_6INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_7INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_7INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_7INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_7INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_7INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry(const __SQL_SUM_AGGREGATE_7INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_7INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_7INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_7INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_7INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_7INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_7INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_7INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_7INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_7INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_7INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_7INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_7INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_7INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_8INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_8INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_8INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_8INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_8INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry(const __SQL_SUM_AGGREGATE_8INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_8INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_8INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_8INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_8INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_8INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_8INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_8INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_8INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_8INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_8INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_8INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_8INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_8INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_9INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_9INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_9INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_9INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_9INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry(const __SQL_SUM_AGGREGATE_9INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_9INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_9INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_9INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_9INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_9INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_9INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_9INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_9INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_9INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_9INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_9INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_9INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_9INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_10INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_10INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_10INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_10INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_10INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry(const __SQL_SUM_AGGREGATE_10INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_10INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_10INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_10INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_10INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_10INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_10INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_10INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_10INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_10INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_10INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_10INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_10INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_10INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_11INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_11INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_11INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_11INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_11INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry(const __SQL_SUM_AGGREGATE_11INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_11INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_11INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_11INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_11INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_11INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_11INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_11INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_11INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_11INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_11INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_11INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_11INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_11INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_12INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_12INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_12INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_12INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_12INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry(const __SQL_SUM_AGGREGATE_12INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_12INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_12INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_12INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_12INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_12INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_12INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_12INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_12INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_12INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_12INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_12INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_12INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_12INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_13INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_13INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_13INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_13INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_13INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry(const __SQL_SUM_AGGREGATE_13INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_13INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_13INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_13INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_13INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_13INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_13INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_13INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_13INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_13INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_13INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_13INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_13INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_13INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_14INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_14INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_14INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_14INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_14INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry(const __SQL_SUM_AGGREGATE_14INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_14INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_14INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_14INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_14INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_14INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_14INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_14INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_14INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_14INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_14INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_14INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_14INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_14INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_15INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_15INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_15INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_15INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_15INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry(const __SQL_SUM_AGGREGATE_15INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_15INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_15INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_15INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_15INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_15INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_15INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_15INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_15INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_15INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_15INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_15INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_15INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_15INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_16INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_16INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_16INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_16INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_16INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry(const __SQL_SUM_AGGREGATE_16INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_16INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_16INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_16INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_16INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_16INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_16INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_16INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_16INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_16INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_16INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_16INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_16INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_16INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_17INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_17INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_17INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_17INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_17INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry(const __SQL_SUM_AGGREGATE_17INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_17INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_17INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_17INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_17INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_17INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_17INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_17INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_17INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_17INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_17INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_17INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_17INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_17INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_18INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_18INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_18INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_18INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_18INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry(const __SQL_SUM_AGGREGATE_18INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_18INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_18INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_18INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_18INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_18INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_18INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_18INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_18INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_18INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_18INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_18INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_18INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_18INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_19INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_19INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_19INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_19INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_19INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry(const __SQL_SUM_AGGREGATE_19INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_19INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_19INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_19INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_19INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_19INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_19INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_19INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_19INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_19INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_19INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_19INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_19INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_19INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_20INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_20INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_20INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_20INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_20INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry(const __SQL_SUM_AGGREGATE_20INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_20INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_20INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_20INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_20INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_20INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_20INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_20INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_20INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_20INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_20INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_20INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_20INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_20INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_21INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_21INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_21INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_21INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_21INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry(const __SQL_SUM_AGGREGATE_21INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_21INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_21INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_21INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_21INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_21INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_21INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_21INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_21INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_21INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_21INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_21INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_21INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_21INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_22INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_22INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_22INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_22INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_22INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry(const __SQL_SUM_AGGREGATE_22INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_22INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_22INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_22INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_22INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_22INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_22INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_22INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_22INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_22INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_22INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_22INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_22INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_22INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_23INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_23INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_23INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_23INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_23INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry(const __SQL_SUM_AGGREGATE_23INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_23INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_23INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_23INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_23INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_23INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_23INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_23INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_23INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_23INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_23INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_23INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_23INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_23INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_24INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_24INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_24INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_24INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_24INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry(const __SQL_SUM_AGGREGATE_24INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_24INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_24INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_24INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_24INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_24INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_24INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_24INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_24INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_24INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_24INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_24INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_24INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_24INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_25INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_25INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_25INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_25INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_25INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry(const __SQL_SUM_AGGREGATE_25INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_25INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_25INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_25INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_25INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_25INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_25INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_25INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_25INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_25INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_25INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_25INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_25INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_25INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_26INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_26INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_26INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_26INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_26INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry(const __SQL_SUM_AGGREGATE_26INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_26INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_26INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_26INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_26INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_26INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_26INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_26INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_26INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_26INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_26INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_26INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_26INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_26INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_27INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_27INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_27INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_27INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_27INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry(const __SQL_SUM_AGGREGATE_27INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_27INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_27INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_27INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_27INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_27INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_27INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_27INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_27INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_27INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_27INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_27INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_27INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_27INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_28INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_28INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_28INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_28INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_28INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry(const __SQL_SUM_AGGREGATE_28INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_28INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_28INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_28INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_28INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_28INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_28INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_28INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_28INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_28INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_28INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_28INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_28INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_28INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_29INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_29INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_29INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_29INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_29INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry(const __SQL_SUM_AGGREGATE_29INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_29INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_29INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_29INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_29INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_29INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_29INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_29INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_29INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_29INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_29INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_29INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_29INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_29INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_30INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_30INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_30INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_30INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_30INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry(const __SQL_SUM_AGGREGATE_30INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_30INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_30INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_30INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_30INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_30INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_30INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_30INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_30INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_30INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_30INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_30INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_30INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_30INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_31INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_31INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_31INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_31INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_31INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry(const __SQL_SUM_AGGREGATE_31INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_31INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_31INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_31INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_31INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_31INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_31INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_31INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_31INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_31INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_31INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_31INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_31INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_31INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_32INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_32INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_32INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_32INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_32INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry(const __SQL_SUM_AGGREGATE_32INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_32INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_32INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_32INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_32INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_32INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_32INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_32INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_32INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_32INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_32INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_32INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_32INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_32INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_33INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_33INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_33INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_33INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_33INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry(const __SQL_SUM_AGGREGATE_33INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_33INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_33INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_33INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_33INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_33INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_33INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_33INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_33INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_33INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_33INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_33INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_33INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_33INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_34INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_34INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_34INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_34INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_34INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry(const __SQL_SUM_AGGREGATE_34INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_34INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_34INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_34INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_34INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_34INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_34INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_34INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_34INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_34INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_34INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_34INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_34INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_34INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_35INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_35INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_35INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_35INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_35INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry(const __SQL_SUM_AGGREGATE_35INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_35INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_35INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_35INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_35INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_35INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_35INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_35INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_35INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_35INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_35INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_35INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_35INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_35INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_36INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_36INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_36INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_36INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_36INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry(const __SQL_SUM_AGGREGATE_36INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_36INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_36INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_36INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_36INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_36INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_36INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_36INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_36INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_36INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_36INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_36INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_36INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_36INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_37INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_37INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_37INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_37INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_37INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry(const __SQL_SUM_AGGREGATE_37INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_37INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_37INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_37INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_37INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_37INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_37INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_37INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_37INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_37INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_37INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_37INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_37INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_37INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_38INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_38INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_38INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_38INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_38INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry(const __SQL_SUM_AGGREGATE_38INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_38INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_38INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_38INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_38INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_38INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_38INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_38INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_38INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_38INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_38INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_38INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_38INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_38INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_39INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_39INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_39INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_39INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_39INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry(const __SQL_SUM_AGGREGATE_39INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_39INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_39INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_39INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_39INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_39INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_39INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_39INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_39INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_39INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_39INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_39INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_39INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_39INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_40INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_40INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_40INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_40INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_40INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry(const __SQL_SUM_AGGREGATE_40INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_40INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_40INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_40INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_40INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_40INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_40INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_40INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_40INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_40INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_40INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_40INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_40INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_40INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_41INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_41INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_41INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_41INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_41INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry(const __SQL_SUM_AGGREGATE_41INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_41INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_41INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_41INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_41INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_41INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_41INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_41INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_41INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_41INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_41INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_41INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_41INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_41INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_42INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_42INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_42INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_42INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_42INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry(const __SQL_SUM_AGGREGATE_42INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_42INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_42INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_42INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_42INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_42INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_42INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_42INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_42INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_42INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_42INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_42INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_42INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_42INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_43INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_43INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_43INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_43INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_43INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry(const __SQL_SUM_AGGREGATE_43INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_43INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_43INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_43INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_43INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_43INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_43INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_43INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_43INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_43INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_43INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_43INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_43INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_43INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_121INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_121INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_121INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_121INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_121INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_121INVENTORY3_entry(const __SQL_SUM_AGGREGATE_121INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_121INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_121INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_121INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_121INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_121INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_121INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_121INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_121INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_121INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_121INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_121INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_121INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_121INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_122INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_122INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_122INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_122INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_122INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_122INVENTORY3_entry(const __SQL_SUM_AGGREGATE_122INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_122INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_122INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_122INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_122INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_122INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_122INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_122INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_122INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_122INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_122INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_122INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_122INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_122INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_123INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_123INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_123INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_123INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_123INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_123INVENTORY3_entry(const __SQL_SUM_AGGREGATE_123INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_123INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_123INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_123INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_123INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_123INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_123INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_123INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_123INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_123INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_123INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_123INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_123INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_123INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_124INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_124INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_124INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_124INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_124INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_124INVENTORY3_entry(const __SQL_SUM_AGGREGATE_124INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_124INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_124INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_124INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_124INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_124INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_124INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_124INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_124INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_124INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_124INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_124INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_124INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_124INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_125INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_125INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_125INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_125INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_125INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_125INVENTORY3_entry(const __SQL_SUM_AGGREGATE_125INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_125INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_125INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_125INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_125INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_125INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_125INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_125INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_125INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_125INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_125INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_125INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_125INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_125INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_126INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_126INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_126INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_126INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_126INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_126INVENTORY3_entry(const __SQL_SUM_AGGREGATE_126INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_126INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_126INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_126INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_126INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_126INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_126INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_126INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_126INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_126INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_126INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_126INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_126INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_126INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_157INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_157INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_157INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_157INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_157INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_157INVENTORY2_entry(const __SQL_SUM_AGGREGATE_157INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_157INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_157INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_157INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_157INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_157INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_157INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_157INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_157INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_157INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_157INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_157INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_157INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_157INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_158INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_158INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_158INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_158INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_158INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_158INVENTORY2_entry(const __SQL_SUM_AGGREGATE_158INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_158INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_158INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_158INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_158INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_158INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_158INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_158INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_158INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_158INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_158INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_158INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_158INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_158INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_159INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_159INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_159INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_159INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_159INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_159INVENTORY2_entry(const __SQL_SUM_AGGREGATE_159INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_159INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_159INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_159INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_159INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_159INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_159INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_159INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_159INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_159INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_159INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_159INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_159INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_159INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_160INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_160INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_160INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_160INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_160INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_160INVENTORY2_entry(const __SQL_SUM_AGGREGATE_160INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_160INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_160INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_160INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_160INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_160INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_160INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_160INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_160INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_160INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_160INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_160INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_160INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_160INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_167INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_167INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_167INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_167INVENTORY1_entry(const __SQL_SUM_AGGREGATE_167INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_167INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_167INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_167INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_167INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_167INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_167INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_167INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_167INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_167INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_167INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_167INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_168INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_168INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_168INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_168INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_168INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_168INVENTORY1_entry(const __SQL_SUM_AGGREGATE_168INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_168INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_168INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_168INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_168INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_168INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_168INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_168INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_168INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_168INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_168INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_168INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_168INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_168INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_169INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_169INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_169INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_169INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_169INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_169INVENTORY1_entry(const __SQL_SUM_AGGREGATE_169INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_169INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_169INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_169INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_169INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_169INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_169INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_169INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_169INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_169INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_169INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_169INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_169INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_169INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_170INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_170INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_170INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_170INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_170INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_170INVENTORY1_entry(const __SQL_SUM_AGGREGATE_170INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_170INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_170INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_170INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_170INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_170INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_170INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_170INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_170INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_170INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_170INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_170INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_170INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_170INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_171INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_171INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_171INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_171INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_171INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_171INVENTORY1_entry(const __SQL_SUM_AGGREGATE_171INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_171INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_171INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_171INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_171INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_171INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_171INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_171INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_171INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_171INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_171INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_171INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_171INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_171INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_172INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_172INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_172INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_172INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_172INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_172INVENTORY1_entry(const __SQL_SUM_AGGREGATE_172INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_172INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_172INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_172INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_172INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_172INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_172INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_172INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_172INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_172INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_172INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_172INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_172INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_172INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_173INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_173INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_173INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_173INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_173INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_173INVENTORY1_entry(const __SQL_SUM_AGGREGATE_173INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_173INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_173INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_173INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_173INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_173INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_173INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_173INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_173INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_173INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_173INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_173INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_173INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_173INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_174INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_174INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_174INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_174INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_174INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_174INVENTORY1_entry(const __SQL_SUM_AGGREGATE_174INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_174INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_174INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_174INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_174INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_174INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_174INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_174INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_174INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_174INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_174INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_174INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_174INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_174INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_175INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_175INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_175INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_175INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_175INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_175INVENTORY1_entry(const __SQL_SUM_AGGREGATE_175INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_175INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_175INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_175INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_175INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_175INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_175INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_175INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_175INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_175INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_175INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_175INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_175INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_175INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_176INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_176INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_176INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_176INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_176INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_176INVENTORY1_entry(const __SQL_SUM_AGGREGATE_176INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_176INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_176INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_176INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_176INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_176INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_176INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_176INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_176INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_176INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_176INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_176INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_176INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_176INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_177INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_177INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_177INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_177INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_177INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_177INVENTORY1_entry(const __SQL_SUM_AGGREGATE_177INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_177INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_177INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_177INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_177INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_177INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_177INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_177INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_177INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_177INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_177INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_177INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_177INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_177INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_178INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_178INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_178INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_178INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_178INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_178INVENTORY1_entry(const __SQL_SUM_AGGREGATE_178INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_178INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_178INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_178INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_178INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_178INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_178INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_178INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_178INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_178INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_178INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_178INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_178INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_178INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_179INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_179INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_179INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_179INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_179INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_179INVENTORY1_entry(const __SQL_SUM_AGGREGATE_179INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_179INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_179INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_179INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_179INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_179INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_179INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_179INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_179INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_179INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_179INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_179INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_179INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_179INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_180INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_180INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_180INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_180INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_180INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_180INVENTORY1_entry(const __SQL_SUM_AGGREGATE_180INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_180INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_180INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_180INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_180INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_180INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_180INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_180INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_180INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_180INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_180INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_180INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_180INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_180INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_181INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_181INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_181INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_181INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_181INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_181INVENTORY1_entry(const __SQL_SUM_AGGREGATE_181INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_181INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_181INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_181INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_181INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_181INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_181INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_181INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_181INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_181INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_181INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_181INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_181INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_181INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_182INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_182INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_182INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_182INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_182INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_182INVENTORY1_entry(const __SQL_SUM_AGGREGATE_182INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_182INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_182INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_182INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_182INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_182INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_182INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_182INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_182INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_182INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_182INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_182INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_182INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_182INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_183INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_183INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_183INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_183INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_183INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_183INVENTORY1_entry(const __SQL_SUM_AGGREGATE_183INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_183INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_183INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_183INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_183INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_183INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_183INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_183INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_183INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_183INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_183INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_183INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_183INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_183INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_184INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_184INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_184INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_184INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_184INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_184INVENTORY1_entry(const __SQL_SUM_AGGREGATE_184INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_184INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_184INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_184INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_184INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_184INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_184INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_184INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_184INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_184INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_184INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_184INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_184INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_184INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_185INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_185INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_185INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_185INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_185INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_185INVENTORY1_entry(const __SQL_SUM_AGGREGATE_185INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_185INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_185INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_185INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_185INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_185INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_185INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_185INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_185INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_185INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_185INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_185INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_185INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_185INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_186INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_186INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_186INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_186INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_186INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_186INVENTORY1_entry(const __SQL_SUM_AGGREGATE_186INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_186INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_186INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_186INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_186INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_186INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_186INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_186INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_186INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_186INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_186INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_186INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_186INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_186INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_187INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_187INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_187INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_187INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_187INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_187INVENTORY1_entry(const __SQL_SUM_AGGREGATE_187INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_187INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_187INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_187INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_187INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_187INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_187INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_187INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_187INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_187INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_187INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_187INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_187INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_187INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_188INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_188INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_188INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_188INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_188INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_188INVENTORY1_entry(const __SQL_SUM_AGGREGATE_188INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_188INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_188INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_188INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_188INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_188INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_188INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_188INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_188INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_188INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_188INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_188INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_188INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_188INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_189INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_189INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_189INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_189INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_189INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_189INVENTORY1_entry(const __SQL_SUM_AGGREGATE_189INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_189INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_189INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_189INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_189INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_189INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_189INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_189INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_189INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_189INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_189INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_189INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_189INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_189INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_190INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_190INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_190INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_190INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_190INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_190INVENTORY1_entry(const __SQL_SUM_AGGREGATE_190INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_190INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_190INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_190INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_190INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_190INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_190INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_190INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_190INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_190INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_190INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_190INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_190INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_190INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_191INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_191INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_191INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_191INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_191INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_191INVENTORY1_entry(const __SQL_SUM_AGGREGATE_191INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_191INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_191INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_191INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_191INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_191INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_191INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_191INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_191INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_191INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_191INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_191INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_191INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_191INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_192INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_192INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_192INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_192INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_192INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_192INVENTORY1_entry(const __SQL_SUM_AGGREGATE_192INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_192INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_192INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_192INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_192INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_192INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_192INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_192INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_192INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_192INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_192INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_192INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_192INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_192INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_193INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_193INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_193INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_193INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_193INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_193INVENTORY1_entry(const __SQL_SUM_AGGREGATE_193INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_193INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_193INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_193INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_193INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_193INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_193INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_193INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_193INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_193INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_193INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_193INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_193INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_193INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_194INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_194INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_194INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_194INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_194INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_194INVENTORY1_entry(const __SQL_SUM_AGGREGATE_194INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_194INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_194INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_194INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_194INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_194INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_194INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_194INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_194INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_194INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_194INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_194INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_194INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_194INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_195INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_195INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_195INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_195INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_195INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_195INVENTORY1_entry(const __SQL_SUM_AGGREGATE_195INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_195INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_195INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_195INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_195INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_195INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_195INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_195INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_195INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_195INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_195INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_195INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_195INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_195INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_206INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_206INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_206INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_206INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_206INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_206INVENTORY1_entry(const __SQL_SUM_AGGREGATE_206INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_206INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_206INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_206INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_206INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_206INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_206INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_206INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_206INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_206INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_206INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_206INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_206INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_206INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_207INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_207INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_207INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_207INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_207INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_207INVENTORY1_entry(const __SQL_SUM_AGGREGATE_207INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_207INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_207INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_207INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_207INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_207INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_207INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_207INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_207INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_207INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_207INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_207INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_207INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_207INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_208INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_208INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_208INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_208INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_208INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_208INVENTORY1_entry(const __SQL_SUM_AGGREGATE_208INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_208INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_208INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_208INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_208INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_208INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_208INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_208INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_208INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_208INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_208INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_208INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_208INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_208INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_209INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_209INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_209INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_209INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_209INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_209INVENTORY1_entry(const __SQL_SUM_AGGREGATE_209INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_209INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_209INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_209INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_209INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_209INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_209INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_209INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_209INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_209INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_209INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_209INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_209INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_209INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_210INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_210INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_210INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_210INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_210INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_210INVENTORY1_entry(const __SQL_SUM_AGGREGATE_210INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_210INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_210INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_210INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_210INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_210INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_210INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_210INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_210INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_210INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_210INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_210INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_210INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_210INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_211INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_211INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_211INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_211INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_211INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_211INVENTORY1_entry(const __SQL_SUM_AGGREGATE_211INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_211INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_211INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_211INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_211INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_211INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_211INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_211INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_211INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_211INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_211INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_211INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_211INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_211INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_212INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_212INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_212INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_212INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_212INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_212INVENTORY1_entry(const __SQL_SUM_AGGREGATE_212INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_212INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_212INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_212INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_212INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_212INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_212INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_212INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_212INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_212INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_212INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_212INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_212INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_212INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_213INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_213INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_213INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_213INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_213INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_213INVENTORY1_entry(const __SQL_SUM_AGGREGATE_213INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_213INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_213INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_213INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_213INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_213INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_213INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_213INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_213INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_213INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_213INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_213INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_213INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_213INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_214INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_214INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_214INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_214INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_214INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_214INVENTORY1_entry(const __SQL_SUM_AGGREGATE_214INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_214INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_214INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_214INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_214INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_214INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_214INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_214INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_214INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_214INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_214INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_214INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_214INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_214INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_215INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_215INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_215INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_215INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_215INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_215INVENTORY1_entry(const __SQL_SUM_AGGREGATE_215INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_215INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_215INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_215INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_215INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_215INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_215INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_215INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_215INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_215INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_215INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_215INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_215INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_215INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_216INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_216INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_216INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_216INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_216INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_216INVENTORY1_entry(const __SQL_SUM_AGGREGATE_216INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_216INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_216INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_216INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_216INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_216INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_216INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_216INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_216INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_216INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_216INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_216INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_216INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_216INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_217INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_217INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_217INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_217INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_217INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_217INVENTORY1_entry(const __SQL_SUM_AGGREGATE_217INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_217INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_217INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_217INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_217INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_217INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_217INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_217INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_217INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_217INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_217INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_217INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_217INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_217INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_218INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_218INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_218INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_218INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_218INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_218INVENTORY1_entry(const __SQL_SUM_AGGREGATE_218INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_218INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_218INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_218INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_218INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_218INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_218INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_218INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_218INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_218INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_218INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_218INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_218INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_218INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_219INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_219INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_219INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_219INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_219INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_219INVENTORY1_entry(const __SQL_SUM_AGGREGATE_219INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_219INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_219INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_219INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_219INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_219INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_219INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_219INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_219INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_219INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_219INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_219INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_219INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_219INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_220INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_220INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_220INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_220INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_220INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_220INVENTORY1_entry(const __SQL_SUM_AGGREGATE_220INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_220INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_220INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_220INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_220INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_220INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_220INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_220INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_220INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_220INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_220INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_220INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_220INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_220INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_221INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_221INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_221INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_221INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_221INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_221INVENTORY1_entry(const __SQL_SUM_AGGREGATE_221INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_221INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_221INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_221INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_221INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_221INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_221INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_221INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_221INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_221INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_221INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_221INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_221INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_221INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_222INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_222INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_222INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_222INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_222INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_222INVENTORY1_entry(const __SQL_SUM_AGGREGATE_222INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_222INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_222INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_222INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_222INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_222INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_222INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_222INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_222INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_222INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_222INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_222INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_222INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_222INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_223INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_223INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_223INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_223INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_223INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_223INVENTORY1_entry(const __SQL_SUM_AGGREGATE_223INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_223INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_223INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_223INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_223INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_223INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_223INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_223INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_223INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_223INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_223INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_223INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_223INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_223INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_224INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_224INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_224INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_224INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_224INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_224INVENTORY1_entry(const __SQL_SUM_AGGREGATE_224INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_224INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_224INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_224INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_224INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_224INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_224INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_224INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_224INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_224INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_224INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_224INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_224INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_224INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_225INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_225INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_225INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_225INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_225INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_225INVENTORY1_entry(const __SQL_SUM_AGGREGATE_225INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_225INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_225INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_225INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_225INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_225INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_225INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_225INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_225INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_225INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_225INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_225INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_225INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_225INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_226INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_226INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_226INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_226INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_226INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_226INVENTORY1_entry(const __SQL_SUM_AGGREGATE_226INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_226INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_226INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_226INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_226INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_226INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_226INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_226INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_226INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_226INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_226INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_226INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_226INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_226INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_227INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_227INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_227INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_227INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_227INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_227INVENTORY1_entry(const __SQL_SUM_AGGREGATE_227INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_227INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_227INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_227INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_227INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_227INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_227INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_227INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_227INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_227INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_227INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_227INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_227INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_227INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_228INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_228INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_228INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_228INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_228INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_228INVENTORY1_entry(const __SQL_SUM_AGGREGATE_228INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_228INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_228INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_228INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_228INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_228INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_228INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_228INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_228INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_228INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_228INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_228INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_228INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_228INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_229INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_229INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_229INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_229INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_229INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_229INVENTORY1_entry(const __SQL_SUM_AGGREGATE_229INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_229INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_229INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_229INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_229INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_229INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_229INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_229INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_229INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_229INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_229INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_229INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_229INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_229INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_230INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_230INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_230INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_230INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_230INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_230INVENTORY1_entry(const __SQL_SUM_AGGREGATE_230INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_230INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_230INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_230INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_230INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_230INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_230INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_230INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_230INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_230INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_230INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_230INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_230INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_230INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_231INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_231INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_231INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_231INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_231INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_231INVENTORY1_entry(const __SQL_SUM_AGGREGATE_231INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_231INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_231INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_231INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_231INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_231INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_231INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_231INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_231INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_231INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_231INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_231INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_231INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_231INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_232INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_232INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_232INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_232INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_232INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_232INVENTORY1_entry(const __SQL_SUM_AGGREGATE_232INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_232INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_232INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_232INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_232INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_232INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_232INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_232INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_232INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_232INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_232INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_232INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_232INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_232INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_233INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_233INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_233INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_233INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_233INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_233INVENTORY1_entry(const __SQL_SUM_AGGREGATE_233INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_233INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_233INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_233INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_233INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_233INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_233INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_233INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_233INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_233INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_233INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_233INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_233INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_233INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_244INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_244INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_244INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_244INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_244INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_244INVENTORY1_entry(const __SQL_SUM_AGGREGATE_244INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_244INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_244INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_244INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_244INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_244INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_244INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_244INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_244INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_244INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_244INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_244INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_244INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_244INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_245INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_245INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_245INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_245INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_245INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_245INVENTORY1_entry(const __SQL_SUM_AGGREGATE_245INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_245INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_245INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_245INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_245INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_245INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_245INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_245INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_245INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_245INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_245INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_245INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_245INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_245INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_246INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_246INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_246INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_246INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_246INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_246INVENTORY1_entry(const __SQL_SUM_AGGREGATE_246INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_246INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_246INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_246INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_246INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_246INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_246INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_246INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_246INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_246INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_246INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_246INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_246INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_246INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_247INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_247INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_247INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_247INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_247INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_247INVENTORY1_entry(const __SQL_SUM_AGGREGATE_247INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_247INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_247INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_247INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_247INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_247INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_247INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_247INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_247INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_247INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_247INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_247INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_247INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_247INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_248INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_248INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_248INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_248INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_248INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_248INVENTORY1_entry(const __SQL_SUM_AGGREGATE_248INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_248INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_248INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_248INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_248INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_248INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_248INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_248INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_248INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_248INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_248INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_248INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_248INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_248INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_249INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_249INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_249INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_249INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_249INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_249INVENTORY1_entry(const __SQL_SUM_AGGREGATE_249INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_249INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_249INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_249INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_249INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_249INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_249INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_249INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_249INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_249INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_249INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_249INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_249INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_249INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_250INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_250INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_250INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_250INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_250INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_250INVENTORY1_entry(const __SQL_SUM_AGGREGATE_250INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_250INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_250INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_250INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_250INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_250INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_250INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_250INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_250INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_250INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_250INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_250INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_250INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_250INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_251INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_251INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_251INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_251INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_251INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_251INVENTORY1_entry(const __SQL_SUM_AGGREGATE_251INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_251INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_251INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_251INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_251INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_251INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_251INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_251INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_251INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_251INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_251INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_251INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_251INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_251INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_252INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_252INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_252INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_252INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_252INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_252INVENTORY1_entry(const __SQL_SUM_AGGREGATE_252INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_252INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_252INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_252INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_252INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_252INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_252INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_252INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_252INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_252INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_252INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_252INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_252INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_252INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_253INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_253INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_253INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_253INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_253INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_253INVENTORY1_entry(const __SQL_SUM_AGGREGATE_253INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_253INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_253INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_253INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_253INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_253INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_253INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_253INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_253INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_253INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_253INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_253INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_253INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_253INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_254INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_254INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_254INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_254INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_254INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_254INVENTORY1_entry(const __SQL_SUM_AGGREGATE_254INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_254INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_254INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_254INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_254INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_254INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_254INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_254INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_254INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_254INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_254INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_254INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_254INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_254INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_255INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_255INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_255INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_255INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_255INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_255INVENTORY1_entry(const __SQL_SUM_AGGREGATE_255INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_255INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_255INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_255INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_255INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_255INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_255INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_255INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_255INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_255INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_255INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_255INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_255INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_255INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_256INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_256INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_256INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_256INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_256INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_256INVENTORY1_entry(const __SQL_SUM_AGGREGATE_256INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_256INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_256INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_256INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_256INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_256INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_256INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_256INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_256INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_256INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_256INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_256INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_256INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_256INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_257INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_257INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_257INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_257INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_257INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_257INVENTORY1_entry(const __SQL_SUM_AGGREGATE_257INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_257INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_257INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_257INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_257INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_257INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_257INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_257INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_257INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_257INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_257INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_257INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_257INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_257INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_258INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_258INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_258INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_258INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_258INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_258INVENTORY1_entry(const __SQL_SUM_AGGREGATE_258INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_258INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_258INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_258INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_258INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_258INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_258INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_258INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_258INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_258INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_258INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_258INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_258INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_258INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_259INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_259INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_259INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_259INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_259INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_259INVENTORY1_entry(const __SQL_SUM_AGGREGATE_259INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_259INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_259INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_259INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_259INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_259INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_259INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_259INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_259INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_259INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_259INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_259INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_259INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_259INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_260INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_260INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_260INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_260INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_260INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_260INVENTORY1_entry(const __SQL_SUM_AGGREGATE_260INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_260INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_260INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_260INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_260INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_260INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_260INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_260INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_260INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_260INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_260INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_260INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_260INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_260INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_261INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_261INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_261INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_261INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_261INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_261INVENTORY1_entry(const __SQL_SUM_AGGREGATE_261INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_261INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_261INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_261INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_261INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_261INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_261INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_261INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_261INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_261INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_261INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_261INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_261INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_261INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_262INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_262INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_262INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_262INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_262INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_262INVENTORY1_entry(const __SQL_SUM_AGGREGATE_262INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_262INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_262INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_262INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_262INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_262INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_262INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_262INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_262INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_262INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_262INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_262INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_262INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_262INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_263INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_263INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_263INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_263INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_263INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_263INVENTORY1_entry(const __SQL_SUM_AGGREGATE_263INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_263INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_263INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_263INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_263INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_263INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_263INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_263INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_263INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_263INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_263INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_263INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_263INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_263INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_264INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_264INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_264INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_264INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_264INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_264INVENTORY1_entry(const __SQL_SUM_AGGREGATE_264INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_264INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_264INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_264INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_264INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_264INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_264INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_264INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_264INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_264INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_264INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_264INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_264INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_264INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_265INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_265INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_265INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_265INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_265INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_265INVENTORY1_entry(const __SQL_SUM_AGGREGATE_265INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_265INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_265INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_265INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_265INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_265INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_265INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_265INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_265INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_265INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_265INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_265INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_265INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_265INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_266INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_266INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_266INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_266INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_266INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_266INVENTORY1_entry(const __SQL_SUM_AGGREGATE_266INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_266INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_266INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_266INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_266INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_266INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_266INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_266INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_266INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_266INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_266INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_266INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_266INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_266INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_267INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_267INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_267INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_267INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_267INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_267INVENTORY1_entry(const __SQL_SUM_AGGREGATE_267INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_267INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_267INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_267INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_267INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_267INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_267INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_267INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_267INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_267INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_267INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_267INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_267INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_267INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_268INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_268INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_268INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_268INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_268INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_268INVENTORY1_entry(const __SQL_SUM_AGGREGATE_268INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_268INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_268INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_268INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_268INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_268INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_268INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_268INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_268INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_268INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_268INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_268INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_268INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_268INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_269INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_269INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_269INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_269INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_269INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_269INVENTORY1_entry(const __SQL_SUM_AGGREGATE_269INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_269INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_269INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_269INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_269INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_269INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_269INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_269INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_269INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_269INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_269INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_269INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_269INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_269INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_270INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_270INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_270INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_270INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_270INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_270INVENTORY1_entry(const __SQL_SUM_AGGREGATE_270INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_270INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_270INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_270INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_270INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_270INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_270INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_270INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_270INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_270INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_270INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_270INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_270INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_270INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_281INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_281INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_281INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_281INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_281INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_281INVENTORY1_entry(const __SQL_SUM_AGGREGATE_281INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_281INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_281INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_281INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_281INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_281INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_281INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_281INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_281INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_281INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_281INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_281INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_281INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_281INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_282INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_282INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_282INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_282INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_282INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_282INVENTORY1_entry(const __SQL_SUM_AGGREGATE_282INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_282INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_282INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_282INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_282INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_282INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_282INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_282INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_282INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_282INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_282INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_282INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_282INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_282INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_283INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_283INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_283INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_283INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_283INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_283INVENTORY1_entry(const __SQL_SUM_AGGREGATE_283INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_283INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_283INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_283INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_283INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_283INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_283INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_283INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_283INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_283INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_283INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_283INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_283INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_283INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_284INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_284INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_284INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_284INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_284INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_284INVENTORY1_entry(const __SQL_SUM_AGGREGATE_284INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_284INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_284INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_284INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_284INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_284INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_284INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_284INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_284INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_284INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_284INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_284INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_284INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_284INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_285INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_285INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_285INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_285INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_285INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_285INVENTORY1_entry(const __SQL_SUM_AGGREGATE_285INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_285INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_285INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_285INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_285INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_285INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_285INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_285INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_285INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_285INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_285INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_285INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_285INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_285INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_286INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_286INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_286INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_286INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_286INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_286INVENTORY1_entry(const __SQL_SUM_AGGREGATE_286INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_286INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_286INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_286INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_286INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_286INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_286INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_286INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_286INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_286INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_286INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_286INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_286INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_286INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_287INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_287INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_287INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_287INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_287INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_287INVENTORY1_entry(const __SQL_SUM_AGGREGATE_287INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_287INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_287INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_287INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_287INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_287INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_287INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_287INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_287INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_287INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_287INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_287INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_287INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_287INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_288INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_288INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_288INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_288INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_288INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_288INVENTORY1_entry(const __SQL_SUM_AGGREGATE_288INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_288INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_288INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_288INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_288INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_288INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_288INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_288INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_288INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_288INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_288INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_288INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_288INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_288INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_289INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_289INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_289INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_289INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_289INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_289INVENTORY1_entry(const __SQL_SUM_AGGREGATE_289INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_289INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_289INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_289INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_289INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_289INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_289INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_289INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_289INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_289INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_289INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_289INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_289INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_289INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_290INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_290INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_290INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_290INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_290INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_290INVENTORY1_entry(const __SQL_SUM_AGGREGATE_290INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_290INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_290INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_290INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_290INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_290INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_290INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_290INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_290INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_290INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_290INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_290INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_290INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_290INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_291INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_291INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_291INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_291INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_291INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_291INVENTORY1_entry(const __SQL_SUM_AGGREGATE_291INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_291INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_291INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_291INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_291INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_291INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_291INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_291INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_291INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_291INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_291INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_291INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_291INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_291INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_292INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_292INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_292INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_292INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_292INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_292INVENTORY1_entry(const __SQL_SUM_AGGREGATE_292INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_292INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_292INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_292INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_292INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_292INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_292INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_292INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_292INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_292INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_292INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_292INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_292INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_292INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_293INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_293INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_293INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_293INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_293INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_293INVENTORY1_entry(const __SQL_SUM_AGGREGATE_293INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_293INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_293INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_293INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_293INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_293INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_293INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_293INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_293INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_293INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_293INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_293INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_293INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_293INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_294INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_294INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_294INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_294INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_294INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_294INVENTORY1_entry(const __SQL_SUM_AGGREGATE_294INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_294INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_294INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_294INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_294INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_294INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_294INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_294INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_294INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_294INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_294INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_294INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_294INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_294INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_295INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_295INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_295INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_295INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_295INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_295INVENTORY1_entry(const __SQL_SUM_AGGREGATE_295INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_295INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_295INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_295INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_295INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_295INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_295INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_295INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_295INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_295INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_295INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_295INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_295INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_295INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_296INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_296INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_296INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_296INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_296INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_296INVENTORY1_entry(const __SQL_SUM_AGGREGATE_296INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_296INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_296INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_296INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_296INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_296INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_296INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_296INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_296INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_296INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_296INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_296INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_296INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_296INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_297INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_297INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_297INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_297INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_297INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_297INVENTORY1_entry(const __SQL_SUM_AGGREGATE_297INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_297INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_297INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_297INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_297INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_297INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_297INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_297INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_297INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_297INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_297INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_297INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_297INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_297INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_298INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_298INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_298INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_298INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_298INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_298INVENTORY1_entry(const __SQL_SUM_AGGREGATE_298INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_298INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_298INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_298INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_298INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_298INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_298INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_298INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_298INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_298INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_298INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_298INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_298INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_298INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_299INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_299INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_299INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_299INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_299INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_299INVENTORY1_entry(const __SQL_SUM_AGGREGATE_299INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_299INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_299INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_299INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_299INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_299INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_299INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_299INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_299INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_299INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_299INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_299INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_299INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_299INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_300INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_300INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_300INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_300INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_300INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_300INVENTORY1_entry(const __SQL_SUM_AGGREGATE_300INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_300INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_300INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_300INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_300INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_300INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_300INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_300INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_300INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_300INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_300INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_300INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_300INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_300INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_301INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_301INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_301INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_301INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_301INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_301INVENTORY1_entry(const __SQL_SUM_AGGREGATE_301INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_301INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_301INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_301INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_301INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_301INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_301INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_301INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_301INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_301INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_301INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_301INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_301INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_301INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_302INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_302INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_302INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_302INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_302INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_302INVENTORY1_entry(const __SQL_SUM_AGGREGATE_302INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_302INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_302INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_302INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_302INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_302INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_302INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_302INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_302INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_302INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_302INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_302INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_302INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_302INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_303INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_303INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_303INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_303INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_303INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_303INVENTORY1_entry(const __SQL_SUM_AGGREGATE_303INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_303INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_303INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_303INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_303INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_303INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_303INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_303INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_303INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_303INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_303INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_303INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_303INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_303INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_304INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_304INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_304INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_304INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_304INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_304INVENTORY1_entry(const __SQL_SUM_AGGREGATE_304INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_304INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_304INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_304INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_304INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_304INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_304INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_304INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_304INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_304INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_304INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_304INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_304INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_304INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_305INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_305INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_305INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_305INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_305INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_305INVENTORY1_entry(const __SQL_SUM_AGGREGATE_305INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_305INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_305INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_305INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_305INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_305INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_305INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_305INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_305INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_305INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_305INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_305INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_305INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_305INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_306INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_306INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_306INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_306INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_306INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_306INVENTORY1_entry(const __SQL_SUM_AGGREGATE_306INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_306INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_306INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_306INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_306INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_306INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_306INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_306INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_306INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_306INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_306INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_306INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_306INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_306INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_317INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_317INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_317INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_317INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_317INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_317INVENTORY1_entry(const __SQL_SUM_AGGREGATE_317INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_317INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_317INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_317INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_317INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_317INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_317INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_317INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_317INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_317INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_317INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_317INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_317INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_317INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_318INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_318INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_318INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_318INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_318INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_318INVENTORY1_entry(const __SQL_SUM_AGGREGATE_318INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_318INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_318INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_318INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_318INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_318INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_318INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_318INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_318INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_318INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_318INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_318INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_318INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_318INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_319INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_319INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_319INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_319INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_319INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_319INVENTORY1_entry(const __SQL_SUM_AGGREGATE_319INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_319INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_319INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_319INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_319INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_319INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_319INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_319INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_319INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_319INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_319INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_319INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_319INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_319INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_320INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_320INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_320INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_320INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_320INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_320INVENTORY1_entry(const __SQL_SUM_AGGREGATE_320INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_320INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_320INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_320INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_320INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_320INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_320INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_320INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_320INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_320INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_320INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_320INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_320INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_320INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_321INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_321INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_321INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_321INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_321INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_321INVENTORY1_entry(const __SQL_SUM_AGGREGATE_321INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_321INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_321INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_321INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_321INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_321INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_321INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_321INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_321INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_321INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_321INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_321INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_321INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_321INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_322INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_322INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_322INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_322INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_322INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_322INVENTORY1_entry(const __SQL_SUM_AGGREGATE_322INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_322INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_322INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_322INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_322INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_322INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_322INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_322INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_322INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_322INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_322INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_322INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_322INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_322INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_323INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_323INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_323INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_323INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_323INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_323INVENTORY1_entry(const __SQL_SUM_AGGREGATE_323INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_323INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_323INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_323INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_323INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_323INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_323INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_323INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_323INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_323INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_323INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_323INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_323INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_323INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_324INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_324INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_324INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_324INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_324INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_324INVENTORY1_entry(const __SQL_SUM_AGGREGATE_324INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_324INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_324INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_324INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_324INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_324INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_324INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_324INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_324INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_324INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_324INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_324INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_324INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_324INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_325INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_325INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_325INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_325INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_325INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_325INVENTORY1_entry(const __SQL_SUM_AGGREGATE_325INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_325INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_325INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_325INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_325INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_325INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_325INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_325INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_325INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_325INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_325INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_325INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_325INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_325INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_326INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_326INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_326INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_326INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_326INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_326INVENTORY1_entry(const __SQL_SUM_AGGREGATE_326INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_326INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_326INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_326INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_326INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_326INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_326INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_326INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_326INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_326INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_326INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_326INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_326INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_326INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_327INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_327INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_327INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_327INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_327INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_327INVENTORY1_entry(const __SQL_SUM_AGGREGATE_327INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_327INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_327INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_327INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_327INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_327INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_327INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_327INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_327INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_327INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_327INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_327INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_327INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_327INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_328INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_328INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_328INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_328INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_328INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_328INVENTORY1_entry(const __SQL_SUM_AGGREGATE_328INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_328INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_328INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_328INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_328INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_328INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_328INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_328INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_328INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_328INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_328INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_328INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_328INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_328INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_329INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_329INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_329INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_329INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_329INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_329INVENTORY1_entry(const __SQL_SUM_AGGREGATE_329INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_329INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_329INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_329INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_329INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_329INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_329INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_329INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_329INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_329INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_329INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_329INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_329INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_329INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_330INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_330INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_330INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_330INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_330INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_330INVENTORY1_entry(const __SQL_SUM_AGGREGATE_330INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_330INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_330INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_330INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_330INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_330INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_330INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_330INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_330INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_330INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_330INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_330INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_330INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_330INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_331INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_331INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_331INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_331INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_331INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_331INVENTORY1_entry(const __SQL_SUM_AGGREGATE_331INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_331INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_331INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_331INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_331INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_331INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_331INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_331INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_331INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_331INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_331INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_331INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_331INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_331INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_332INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_332INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_332INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_332INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_332INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_332INVENTORY1_entry(const __SQL_SUM_AGGREGATE_332INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_332INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_332INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_332INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_332INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_332INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_332INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_332INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_332INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_332INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_332INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_332INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_332INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_332INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_333INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_333INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_333INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_333INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_333INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_333INVENTORY1_entry(const __SQL_SUM_AGGREGATE_333INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_333INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_333INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_333INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_333INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_333INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_333INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_333INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_333INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_333INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_333INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_333INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_333INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_333INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_334INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_334INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_334INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_334INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_334INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_334INVENTORY1_entry(const __SQL_SUM_AGGREGATE_334INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_334INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_334INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_334INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_334INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_334INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_334INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_334INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_334INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_334INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_334INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_334INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_334INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_334INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_335INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_335INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_335INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_335INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_335INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_335INVENTORY1_entry(const __SQL_SUM_AGGREGATE_335INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_335INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_335INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_335INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_335INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_335INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_335INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_335INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_335INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_335INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_335INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_335INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_335INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_335INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_336INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_336INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_336INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_336INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_336INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_336INVENTORY1_entry(const __SQL_SUM_AGGREGATE_336INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_336INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_336INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_336INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_336INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_336INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_336INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_336INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_336INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_336INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_336INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_336INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_336INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_336INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_337INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_337INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_337INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_337INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_337INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_337INVENTORY1_entry(const __SQL_SUM_AGGREGATE_337INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_337INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_337INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_337INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_337INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_337INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_337INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_337INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_337INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_337INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_337INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_337INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_337INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_337INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_338INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_338INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_338INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_338INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_338INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_338INVENTORY1_entry(const __SQL_SUM_AGGREGATE_338INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_338INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_338INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_338INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_338INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_338INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_338INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_338INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_338INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_338INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_338INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_338INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_338INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_338INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_339INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_339INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_339INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_339INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_339INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_339INVENTORY1_entry(const __SQL_SUM_AGGREGATE_339INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_339INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_339INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_339INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_339INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_339INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_339INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_339INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_339INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_339INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_339INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_339INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_339INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_339INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_340INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_340INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_340INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_340INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_340INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_340INVENTORY1_entry(const __SQL_SUM_AGGREGATE_340INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_340INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_340INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_340INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_340INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_340INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_340INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_340INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_340INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_340INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_340INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_340INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_340INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_340INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_341INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_341INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_341INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_341INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_341INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_341INVENTORY1_entry(const __SQL_SUM_AGGREGATE_341INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_341INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_341INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_341INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_341INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_341INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_341INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_341INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_341INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_341INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_341INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_341INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_341INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_341INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_352INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_352INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_352INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_352INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_352INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_352INVENTORY1_entry(const __SQL_SUM_AGGREGATE_352INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_352INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_352INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_352INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_352INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_352INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_352INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_352INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_352INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_352INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_352INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_352INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_352INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_352INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_353INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_353INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_353INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_353INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_353INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_353INVENTORY1_entry(const __SQL_SUM_AGGREGATE_353INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_353INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_353INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_353INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_353INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_353INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_353INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_353INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_353INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_353INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_353INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_353INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_353INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_353INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_354INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_354INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_354INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_354INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_354INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_354INVENTORY1_entry(const __SQL_SUM_AGGREGATE_354INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_354INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_354INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_354INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_354INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_354INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_354INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_354INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_354INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_354INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_354INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_354INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_354INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_354INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_355INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_355INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_355INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_355INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_355INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_355INVENTORY1_entry(const __SQL_SUM_AGGREGATE_355INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_355INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_355INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_355INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_355INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_355INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_355INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_355INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_355INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_355INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_355INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_355INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_355INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_355INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_356INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_356INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_356INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_356INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_356INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_356INVENTORY1_entry(const __SQL_SUM_AGGREGATE_356INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_356INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_356INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_356INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_356INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_356INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_356INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_356INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_356INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_356INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_356INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_356INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_356INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_356INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_357INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_357INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_357INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_357INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_357INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_357INVENTORY1_entry(const __SQL_SUM_AGGREGATE_357INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_357INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_357INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_357INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_357INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_357INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_357INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_357INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_357INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_357INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_357INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_357INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_357INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_357INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_358INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_358INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_358INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_358INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_358INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_358INVENTORY1_entry(const __SQL_SUM_AGGREGATE_358INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_358INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_358INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_358INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_358INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_358INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_358INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_358INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_358INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_358INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_358INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_358INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_358INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_358INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_359INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_359INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_359INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_359INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_359INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_359INVENTORY1_entry(const __SQL_SUM_AGGREGATE_359INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_359INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_359INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_359INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_359INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_359INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_359INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_359INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_359INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_359INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_359INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_359INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_359INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_359INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_360INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_360INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_360INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_360INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_360INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_360INVENTORY1_entry(const __SQL_SUM_AGGREGATE_360INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_360INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_360INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_360INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_360INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_360INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_360INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_360INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_360INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_360INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_360INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_360INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_360INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_360INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_361INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_361INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_361INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_361INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_361INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_361INVENTORY1_entry(const __SQL_SUM_AGGREGATE_361INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_361INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_361INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_361INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_361INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_361INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_361INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_361INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_361INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_361INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_361INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_361INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_361INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_361INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_362INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_362INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_362INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_362INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_362INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_362INVENTORY1_entry(const __SQL_SUM_AGGREGATE_362INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_362INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_362INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_362INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_362INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_362INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_362INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_362INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_362INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_362INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_362INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_362INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_362INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_362INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_363INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_363INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_363INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_363INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_363INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_363INVENTORY1_entry(const __SQL_SUM_AGGREGATE_363INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_363INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_363INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_363INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_363INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_363INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_363INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_363INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_363INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_363INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_363INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_363INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_363INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_363INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_364INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_364INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_364INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_364INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_364INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_364INVENTORY1_entry(const __SQL_SUM_AGGREGATE_364INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_364INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_364INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_364INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_364INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_364INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_364INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_364INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_364INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_364INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_364INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_364INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_364INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_364INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_365INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_365INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_365INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_365INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_365INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_365INVENTORY1_entry(const __SQL_SUM_AGGREGATE_365INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_365INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_365INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_365INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_365INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_365INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_365INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_365INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_365INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_365INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_365INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_365INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_365INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_365INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_366INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_366INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_366INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_366INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_366INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_366INVENTORY1_entry(const __SQL_SUM_AGGREGATE_366INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_366INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_366INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_366INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_366INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_366INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_366INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_366INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_366INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_366INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_366INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_366INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_366INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_366INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_367INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_367INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_367INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_367INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_367INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_367INVENTORY1_entry(const __SQL_SUM_AGGREGATE_367INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_367INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_367INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_367INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_367INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_367INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_367INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_367INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_367INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_367INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_367INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_367INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_367INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_367INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_368INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_368INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_368INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_368INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_368INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_368INVENTORY1_entry(const __SQL_SUM_AGGREGATE_368INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_368INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_368INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_368INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_368INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_368INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_368INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_368INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_368INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_368INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_368INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_368INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_368INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_368INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_369INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_369INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_369INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_369INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_369INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_369INVENTORY1_entry(const __SQL_SUM_AGGREGATE_369INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_369INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_369INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_369INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_369INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_369INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_369INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_369INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_369INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_369INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_369INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_369INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_369INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_369INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_370INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_370INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_370INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_370INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_370INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_370INVENTORY1_entry(const __SQL_SUM_AGGREGATE_370INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_370INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_370INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_370INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_370INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_370INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_370INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_370INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_370INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_370INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_370INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_370INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_370INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_370INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_371INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_371INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_371INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_371INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_371INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_371INVENTORY1_entry(const __SQL_SUM_AGGREGATE_371INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_371INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_371INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_371INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_371INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_371INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_371INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_371INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_371INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_371INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_371INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_371INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_371INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_371INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_372INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_372INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_372INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_372INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_372INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_372INVENTORY1_entry(const __SQL_SUM_AGGREGATE_372INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_372INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_372INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_372INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_372INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_372INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_372INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_372INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_372INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_372INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_372INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_372INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_372INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_372INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_373INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_373INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_373INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_373INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_373INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_373INVENTORY1_entry(const __SQL_SUM_AGGREGATE_373INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_373INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_373INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_373INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_373INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_373INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_373INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_373INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_373INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_373INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_373INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_373INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_373INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_373INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_374INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_374INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_374INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_374INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_374INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_374INVENTORY1_entry(const __SQL_SUM_AGGREGATE_374INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_374INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_374INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_374INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_374INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_374INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_374INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_374INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_374INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_374INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_374INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_374INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_374INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_374INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_375INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_375INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_375INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_375INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_375INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_375INVENTORY1_entry(const __SQL_SUM_AGGREGATE_375INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_375INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_375INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_375INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_375INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_375INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_375INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_375INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_375INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_375INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_375INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_375INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_375INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_375INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_386INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_386INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_386INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_386INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_386INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_386INVENTORY1_entry(const __SQL_SUM_AGGREGATE_386INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_386INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_386INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_386INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_386INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_386INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_386INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_386INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_386INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_386INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_386INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_386INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_386INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_386INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_387INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_387INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_387INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_387INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_387INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_387INVENTORY1_entry(const __SQL_SUM_AGGREGATE_387INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_387INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_387INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_387INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_387INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_387INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_387INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_387INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_387INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_387INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_387INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_387INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_387INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_387INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_388INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_388INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_388INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_388INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_388INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_388INVENTORY1_entry(const __SQL_SUM_AGGREGATE_388INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_388INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_388INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_388INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_388INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_388INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_388INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_388INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_388INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_388INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_388INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_388INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_388INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_388INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_389INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_389INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_389INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_389INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_389INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_389INVENTORY1_entry(const __SQL_SUM_AGGREGATE_389INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_389INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_389INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_389INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_389INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_389INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_389INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_389INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_389INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_389INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_389INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_389INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_389INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_389INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_390INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_390INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_390INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_390INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_390INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_390INVENTORY1_entry(const __SQL_SUM_AGGREGATE_390INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_390INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_390INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_390INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_390INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_390INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_390INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_390INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_390INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_390INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_390INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_390INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_390INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_390INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_391INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_391INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_391INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_391INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_391INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_391INVENTORY1_entry(const __SQL_SUM_AGGREGATE_391INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_391INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_391INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_391INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_391INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_391INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_391INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_391INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_391INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_391INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_391INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_391INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_391INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_391INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_392INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_392INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_392INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_392INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_392INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_392INVENTORY1_entry(const __SQL_SUM_AGGREGATE_392INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_392INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_392INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_392INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_392INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_392INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_392INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_392INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_392INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_392INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_392INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_392INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_392INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_392INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_393INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_393INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_393INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_393INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_393INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_393INVENTORY1_entry(const __SQL_SUM_AGGREGATE_393INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_393INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_393INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_393INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_393INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_393INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_393INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_393INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_393INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_393INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_393INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_393INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_393INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_393INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_394INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_394INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_394INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_394INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_394INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_394INVENTORY1_entry(const __SQL_SUM_AGGREGATE_394INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_394INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_394INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_394INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_394INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_394INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_394INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_394INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_394INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_394INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_394INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_394INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_394INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_394INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_395INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_395INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_395INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_395INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_395INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_395INVENTORY1_entry(const __SQL_SUM_AGGREGATE_395INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_395INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_395INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_395INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_395INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_395INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_395INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_395INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_395INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_395INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_395INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_395INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_395INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_395INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_396INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_396INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_396INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_396INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_396INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_396INVENTORY1_entry(const __SQL_SUM_AGGREGATE_396INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_396INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_396INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_396INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_396INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_396INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_396INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_396INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_396INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_396INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_396INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_396INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_396INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_396INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_397INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_397INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_397INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_397INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_397INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_397INVENTORY1_entry(const __SQL_SUM_AGGREGATE_397INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_397INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_397INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_397INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_397INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_397INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_397INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_397INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_397INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_397INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_397INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_397INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_397INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_397INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_398INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_398INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_398INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_398INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_398INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_398INVENTORY1_entry(const __SQL_SUM_AGGREGATE_398INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_398INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_398INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_398INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_398INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_398INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_398INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_398INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_398INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_398INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_398INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_398INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_398INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_398INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_399INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_399INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_399INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_399INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_399INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_399INVENTORY1_entry(const __SQL_SUM_AGGREGATE_399INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_399INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_399INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_399INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_399INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_399INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_399INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_399INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_399INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_399INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_399INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_399INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_399INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_399INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_400INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_400INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_400INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_400INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_400INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_400INVENTORY1_entry(const __SQL_SUM_AGGREGATE_400INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_400INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_400INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_400INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_400INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_400INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_400INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_400INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_400INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_400INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_400INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_400INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_400INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_400INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_401INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_401INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_401INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_401INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_401INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_401INVENTORY1_entry(const __SQL_SUM_AGGREGATE_401INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_401INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_401INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_401INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_401INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_401INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_401INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_401INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_401INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_401INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_401INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_401INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_401INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_401INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_402INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_402INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_402INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_402INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_402INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_402INVENTORY1_entry(const __SQL_SUM_AGGREGATE_402INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_402INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_402INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_402INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_402INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_402INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_402INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_402INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_402INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_402INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_402INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_402INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_402INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_402INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_403INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_403INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_403INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_403INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_403INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_403INVENTORY1_entry(const __SQL_SUM_AGGREGATE_403INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_403INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_403INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_403INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_403INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_403INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_403INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_403INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_403INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_403INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_403INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_403INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_403INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_403INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_404INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_404INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_404INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_404INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_404INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_404INVENTORY1_entry(const __SQL_SUM_AGGREGATE_404INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_404INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_404INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_404INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_404INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_404INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_404INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_404INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_404INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_404INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_404INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_404INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_404INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_404INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_405INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_405INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_405INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_405INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_405INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_405INVENTORY1_entry(const __SQL_SUM_AGGREGATE_405INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_405INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_405INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_405INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_405INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_405INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_405INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_405INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_405INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_405INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_405INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_405INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_405INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_405INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_406INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_406INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_406INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_406INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_406INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_406INVENTORY1_entry(const __SQL_SUM_AGGREGATE_406INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_406INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_406INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_406INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_406INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_406INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_406INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_406INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_406INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_406INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_406INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_406INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_406INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_406INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_407INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_407INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_407INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_407INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_407INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_407INVENTORY1_entry(const __SQL_SUM_AGGREGATE_407INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_407INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_407INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_407INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_407INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_407INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_407INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_407INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_407INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_407INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_407INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_407INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_407INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_407INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_408INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_408INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_408INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_408INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_408INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_408INVENTORY1_entry(const __SQL_SUM_AGGREGATE_408INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_408INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_408INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_408INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_408INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_408INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_408INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_408INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_408INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_408INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_408INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_408INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_408INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_408INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_419INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_419INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_419INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_419INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_419INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_419INVENTORY1_entry(const __SQL_SUM_AGGREGATE_419INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_419INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_419INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_419INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_419INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_419INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_419INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_419INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_419INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_419INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_419INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_419INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_419INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_419INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_420INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_420INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_420INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_420INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_420INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_420INVENTORY1_entry(const __SQL_SUM_AGGREGATE_420INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_420INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_420INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_420INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_420INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_420INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_420INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_420INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_420INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_420INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_420INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_420INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_420INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_420INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_421INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_421INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_421INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_421INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_421INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_421INVENTORY1_entry(const __SQL_SUM_AGGREGATE_421INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_421INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_421INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_421INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_421INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_421INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_421INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_421INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_421INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_421INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_421INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_421INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_421INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_421INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_422INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_422INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_422INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_422INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_422INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_422INVENTORY1_entry(const __SQL_SUM_AGGREGATE_422INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_422INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_422INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_422INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_422INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_422INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_422INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_422INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_422INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_422INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_422INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_422INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_422INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_422INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_423INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_423INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_423INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_423INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_423INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_423INVENTORY1_entry(const __SQL_SUM_AGGREGATE_423INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_423INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_423INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_423INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_423INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_423INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_423INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_423INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_423INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_423INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_423INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_423INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_423INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_423INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_424INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_424INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_424INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_424INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_424INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_424INVENTORY1_entry(const __SQL_SUM_AGGREGATE_424INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_424INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_424INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_424INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_424INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_424INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_424INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_424INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_424INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_424INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_424INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_424INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_424INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_424INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_425INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_425INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_425INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_425INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_425INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_425INVENTORY1_entry(const __SQL_SUM_AGGREGATE_425INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_425INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_425INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_425INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_425INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_425INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_425INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_425INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_425INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_425INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_425INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_425INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_425INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_425INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_426INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_426INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_426INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_426INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_426INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_426INVENTORY1_entry(const __SQL_SUM_AGGREGATE_426INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_426INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_426INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_426INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_426INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_426INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_426INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_426INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_426INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_426INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_426INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_426INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_426INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_426INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_427INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_427INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_427INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_427INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_427INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_427INVENTORY1_entry(const __SQL_SUM_AGGREGATE_427INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_427INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_427INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_427INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_427INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_427INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_427INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_427INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_427INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_427INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_427INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_427INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_427INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_427INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_428INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_428INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_428INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_428INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_428INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_428INVENTORY1_entry(const __SQL_SUM_AGGREGATE_428INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_428INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_428INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_428INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_428INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_428INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_428INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_428INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_428INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_428INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_428INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_428INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_428INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_428INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_429INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_429INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_429INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_429INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_429INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_429INVENTORY1_entry(const __SQL_SUM_AGGREGATE_429INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_429INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_429INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_429INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_429INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_429INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_429INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_429INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_429INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_429INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_429INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_429INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_429INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_429INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_430INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_430INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_430INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_430INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_430INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_430INVENTORY1_entry(const __SQL_SUM_AGGREGATE_430INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_430INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_430INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_430INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_430INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_430INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_430INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_430INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_430INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_430INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_430INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_430INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_430INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_430INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_431INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_431INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_431INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_431INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_431INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_431INVENTORY1_entry(const __SQL_SUM_AGGREGATE_431INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_431INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_431INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_431INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_431INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_431INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_431INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_431INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_431INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_431INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_431INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_431INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_431INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_431INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_432INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_432INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_432INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_432INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_432INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_432INVENTORY1_entry(const __SQL_SUM_AGGREGATE_432INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_432INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_432INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_432INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_432INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_432INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_432INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_432INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_432INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_432INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_432INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_432INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_432INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_432INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_433INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_433INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_433INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_433INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_433INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_433INVENTORY1_entry(const __SQL_SUM_AGGREGATE_433INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_433INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_433INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_433INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_433INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_433INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_433INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_433INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_433INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_433INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_433INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_433INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_433INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_433INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_434INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_434INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_434INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_434INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_434INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_434INVENTORY1_entry(const __SQL_SUM_AGGREGATE_434INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_434INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_434INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_434INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_434INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_434INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_434INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_434INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_434INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_434INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_434INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_434INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_434INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_434INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_435INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_435INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_435INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_435INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_435INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_435INVENTORY1_entry(const __SQL_SUM_AGGREGATE_435INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_435INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_435INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_435INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_435INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_435INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_435INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_435INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_435INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_435INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_435INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_435INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_435INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_435INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_436INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_436INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_436INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_436INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_436INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_436INVENTORY1_entry(const __SQL_SUM_AGGREGATE_436INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_436INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_436INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_436INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_436INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_436INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_436INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_436INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_436INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_436INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_436INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_436INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_436INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_436INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_437INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_437INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_437INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_437INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_437INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_437INVENTORY1_entry(const __SQL_SUM_AGGREGATE_437INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_437INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_437INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_437INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_437INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_437INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_437INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_437INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_437INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_437INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_437INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_437INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_437INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_437INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_438INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_438INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_438INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_438INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_438INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_438INVENTORY1_entry(const __SQL_SUM_AGGREGATE_438INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_438INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_438INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_438INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_438INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_438INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_438INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_438INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_438INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_438INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_438INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_438INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_438INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_438INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_439INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_439INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_439INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_439INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_439INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_439INVENTORY1_entry(const __SQL_SUM_AGGREGATE_439INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_439INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_439INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_439INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_439INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_439INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_439INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_439INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_439INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_439INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_439INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_439INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_439INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_439INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_440INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_440INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_440INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_440INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_440INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_440INVENTORY1_entry(const __SQL_SUM_AGGREGATE_440INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_440INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_440INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_440INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_440INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_440INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_440INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_440INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_440INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_440INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_440INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_440INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_440INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_440INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_451INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_451INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_451INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_451INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_451INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_451INVENTORY1_entry(const __SQL_SUM_AGGREGATE_451INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_451INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_451INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_451INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_451INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_451INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_451INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_451INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_451INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_451INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_451INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_451INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_451INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_451INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_452INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_452INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_452INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_452INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_452INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_452INVENTORY1_entry(const __SQL_SUM_AGGREGATE_452INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_452INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_452INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_452INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_452INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_452INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_452INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_452INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_452INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_452INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_452INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_452INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_452INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_452INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_453INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_453INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_453INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_453INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_453INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_453INVENTORY1_entry(const __SQL_SUM_AGGREGATE_453INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_453INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_453INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_453INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_453INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_453INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_453INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_453INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_453INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_453INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_453INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_453INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_453INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_453INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_454INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_454INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_454INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_454INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_454INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_454INVENTORY1_entry(const __SQL_SUM_AGGREGATE_454INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_454INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_454INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_454INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_454INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_454INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_454INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_454INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_454INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_454INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_454INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_454INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_454INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_454INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_455INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_455INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_455INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_455INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_455INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_455INVENTORY1_entry(const __SQL_SUM_AGGREGATE_455INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_455INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_455INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_455INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_455INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_455INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_455INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_455INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_455INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_455INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_455INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_455INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_455INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_455INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_456INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_456INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_456INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_456INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_456INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_456INVENTORY1_entry(const __SQL_SUM_AGGREGATE_456INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_456INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_456INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_456INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_456INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_456INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_456INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_456INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_456INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_456INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_456INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_456INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_456INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_456INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_457INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_457INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_457INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_457INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_457INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_457INVENTORY1_entry(const __SQL_SUM_AGGREGATE_457INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_457INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_457INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_457INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_457INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_457INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_457INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_457INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_457INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_457INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_457INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_457INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_457INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_457INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_458INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_458INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_458INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_458INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_458INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_458INVENTORY1_entry(const __SQL_SUM_AGGREGATE_458INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_458INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_458INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_458INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_458INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_458INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_458INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_458INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_458INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_458INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_458INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_458INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_458INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_458INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_459INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_459INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_459INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_459INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_459INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_459INVENTORY1_entry(const __SQL_SUM_AGGREGATE_459INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_459INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_459INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_459INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_459INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_459INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_459INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_459INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_459INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_459INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_459INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_459INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_459INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_459INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_460INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_460INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_460INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_460INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_460INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_460INVENTORY1_entry(const __SQL_SUM_AGGREGATE_460INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_460INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_460INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_460INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_460INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_460INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_460INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_460INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_460INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_460INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_460INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_460INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_460INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_460INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_461INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_461INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_461INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_461INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_461INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_461INVENTORY1_entry(const __SQL_SUM_AGGREGATE_461INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_461INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_461INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_461INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_461INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_461INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_461INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_461INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_461INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_461INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_461INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_461INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_461INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_461INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_462INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_462INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_462INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_462INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_462INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_462INVENTORY1_entry(const __SQL_SUM_AGGREGATE_462INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_462INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_462INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_462INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_462INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_462INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_462INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_462INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_462INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_462INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_462INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_462INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_462INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_462INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_463INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_463INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_463INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_463INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_463INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_463INVENTORY1_entry(const __SQL_SUM_AGGREGATE_463INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_463INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_463INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_463INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_463INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_463INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_463INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_463INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_463INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_463INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_463INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_463INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_463INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_463INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_464INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_464INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_464INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_464INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_464INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_464INVENTORY1_entry(const __SQL_SUM_AGGREGATE_464INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_464INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_464INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_464INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_464INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_464INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_464INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_464INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_464INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_464INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_464INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_464INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_464INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_464INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_465INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_465INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_465INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_465INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_465INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_465INVENTORY1_entry(const __SQL_SUM_AGGREGATE_465INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_465INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_465INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_465INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_465INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_465INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_465INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_465INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_465INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_465INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_465INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_465INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_465INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_465INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_466INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_466INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_466INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_466INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_466INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_466INVENTORY1_entry(const __SQL_SUM_AGGREGATE_466INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_466INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_466INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_466INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_466INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_466INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_466INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_466INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_466INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_466INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_466INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_466INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_466INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_466INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_467INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_467INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_467INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_467INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_467INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_467INVENTORY1_entry(const __SQL_SUM_AGGREGATE_467INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_467INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_467INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_467INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_467INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_467INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_467INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_467INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_467INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_467INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_467INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_467INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_467INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_467INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_468INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_468INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_468INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_468INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_468INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_468INVENTORY1_entry(const __SQL_SUM_AGGREGATE_468INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_468INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_468INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_468INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_468INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_468INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_468INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_468INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_468INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_468INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_468INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_468INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_468INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_468INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_469INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_469INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_469INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_469INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_469INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_469INVENTORY1_entry(const __SQL_SUM_AGGREGATE_469INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_469INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_469INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_469INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_469INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_469INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_469INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_469INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_469INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_469INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_469INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_469INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_469INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_469INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_470INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_470INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_470INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_470INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_470INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_470INVENTORY1_entry(const __SQL_SUM_AGGREGATE_470INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_470INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_470INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_470INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_470INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_470INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_470INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_470INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_470INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_470INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_470INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_470INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_470INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_470INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_471INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_471INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_471INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_471INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_471INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_471INVENTORY1_entry(const __SQL_SUM_AGGREGATE_471INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_471INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_471INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_471INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_471INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_471INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_471INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_471INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_471INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_471INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_471INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_471INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_471INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_471INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_482INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_482INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_482INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_482INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_482INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_482INVENTORY1_entry(const __SQL_SUM_AGGREGATE_482INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_482INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_482INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_482INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_482INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_482INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_482INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_482INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_482INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_482INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_482INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_482INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_482INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_482INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_483INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_483INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_483INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_483INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_483INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_483INVENTORY1_entry(const __SQL_SUM_AGGREGATE_483INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_483INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_483INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_483INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_483INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_483INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_483INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_483INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_483INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_483INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_483INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_483INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_483INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_483INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_484INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_484INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_484INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_484INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_484INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_484INVENTORY1_entry(const __SQL_SUM_AGGREGATE_484INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_484INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_484INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_484INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_484INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_484INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_484INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_484INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_484INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_484INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_484INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_484INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_484INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_484INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_485INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_485INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_485INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_485INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_485INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_485INVENTORY1_entry(const __SQL_SUM_AGGREGATE_485INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_485INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_485INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_485INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_485INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_485INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_485INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_485INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_485INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_485INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_485INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_485INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_485INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_485INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_486INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_486INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_486INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_486INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_486INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_486INVENTORY1_entry(const __SQL_SUM_AGGREGATE_486INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_486INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_486INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_486INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_486INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_486INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_486INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_486INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_486INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_486INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_486INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_486INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_486INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_486INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_487INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_487INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_487INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_487INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_487INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_487INVENTORY1_entry(const __SQL_SUM_AGGREGATE_487INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_487INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_487INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_487INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_487INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_487INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_487INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_487INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_487INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_487INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_487INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_487INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_487INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_487INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_488INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_488INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_488INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_488INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_488INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_488INVENTORY1_entry(const __SQL_SUM_AGGREGATE_488INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_488INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_488INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_488INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_488INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_488INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_488INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_488INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_488INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_488INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_488INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_488INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_488INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_488INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_489INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_489INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_489INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_489INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_489INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_489INVENTORY1_entry(const __SQL_SUM_AGGREGATE_489INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_489INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_489INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_489INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_489INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_489INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_489INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_489INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_489INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_489INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_489INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_489INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_489INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_489INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_490INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_490INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_490INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_490INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_490INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_490INVENTORY1_entry(const __SQL_SUM_AGGREGATE_490INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_490INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_490INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_490INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_490INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_490INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_490INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_490INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_490INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_490INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_490INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_490INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_490INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_490INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_491INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_491INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_491INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_491INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_491INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_491INVENTORY1_entry(const __SQL_SUM_AGGREGATE_491INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_491INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_491INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_491INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_491INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_491INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_491INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_491INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_491INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_491INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_491INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_491INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_491INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_491INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_492INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_492INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_492INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_492INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_492INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_492INVENTORY1_entry(const __SQL_SUM_AGGREGATE_492INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_492INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_492INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_492INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_492INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_492INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_492INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_492INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_492INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_492INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_492INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_492INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_492INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_492INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_493INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_493INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_493INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_493INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_493INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_493INVENTORY1_entry(const __SQL_SUM_AGGREGATE_493INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_493INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_493INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_493INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_493INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_493INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_493INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_493INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_493INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_493INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_493INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_493INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_493INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_493INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_494INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_494INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_494INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_494INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_494INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_494INVENTORY1_entry(const __SQL_SUM_AGGREGATE_494INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_494INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_494INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_494INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_494INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_494INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_494INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_494INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_494INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_494INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_494INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_494INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_494INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_494INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_495INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_495INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_495INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_495INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_495INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_495INVENTORY1_entry(const __SQL_SUM_AGGREGATE_495INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_495INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_495INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_495INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_495INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_495INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_495INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_495INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_495INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_495INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_495INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_495INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_495INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_495INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_496INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_496INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_496INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_496INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_496INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_496INVENTORY1_entry(const __SQL_SUM_AGGREGATE_496INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_496INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_496INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_496INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_496INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_496INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_496INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_496INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_496INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_496INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_496INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_496INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_496INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_496INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_497INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_497INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_497INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_497INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_497INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_497INVENTORY1_entry(const __SQL_SUM_AGGREGATE_497INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_497INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_497INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_497INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_497INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_497INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_497INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_497INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_497INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_497INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_497INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_497INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_497INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_497INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_498INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_498INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_498INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_498INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_498INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_498INVENTORY1_entry(const __SQL_SUM_AGGREGATE_498INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_498INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_498INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_498INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_498INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_498INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_498INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_498INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_498INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_498INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_498INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_498INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_498INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_498INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_499INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_499INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_499INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_499INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_499INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_499INVENTORY1_entry(const __SQL_SUM_AGGREGATE_499INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_499INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_499INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_499INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_499INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_499INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_499INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_499INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_499INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_499INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_499INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_499INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_499INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_499INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_500INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_500INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_500INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_500INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_500INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_500INVENTORY1_entry(const __SQL_SUM_AGGREGATE_500INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_500INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_500INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_500INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_500INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_500INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_500INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_500INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_500INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_500INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_500INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_500INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_500INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_500INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_501INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_501INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_501INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_501INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_501INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_501INVENTORY1_entry(const __SQL_SUM_AGGREGATE_501INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_501INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_501INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_501INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_501INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_501INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_501INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_501INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_501INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_501INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_501INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_501INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_501INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_501INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_512INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_512INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_512INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_512INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_512INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_512INVENTORY1_entry(const __SQL_SUM_AGGREGATE_512INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_512INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_512INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_512INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_512INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_512INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_512INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_512INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_512INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_512INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_512INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_512INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_512INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_512INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_513INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_513INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_513INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_513INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_513INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_513INVENTORY1_entry(const __SQL_SUM_AGGREGATE_513INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_513INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_513INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_513INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_513INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_513INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_513INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_513INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_513INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_513INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_513INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_513INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_513INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_513INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_514INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_514INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_514INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_514INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_514INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_514INVENTORY1_entry(const __SQL_SUM_AGGREGATE_514INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_514INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_514INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_514INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_514INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_514INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_514INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_514INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_514INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_514INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_514INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_514INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_514INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_514INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_515INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_515INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_515INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_515INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_515INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_515INVENTORY1_entry(const __SQL_SUM_AGGREGATE_515INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_515INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_515INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_515INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_515INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_515INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_515INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_515INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_515INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_515INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_515INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_515INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_515INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_515INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_516INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_516INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_516INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_516INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_516INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_516INVENTORY1_entry(const __SQL_SUM_AGGREGATE_516INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_516INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_516INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_516INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_516INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_516INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_516INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_516INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_516INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_516INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_516INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_516INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_516INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_516INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_517INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_517INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_517INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_517INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_517INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_517INVENTORY1_entry(const __SQL_SUM_AGGREGATE_517INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_517INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_517INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_517INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_517INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_517INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_517INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_517INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_517INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_517INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_517INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_517INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_517INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_517INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_518INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_518INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_518INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_518INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_518INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_518INVENTORY1_entry(const __SQL_SUM_AGGREGATE_518INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_518INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_518INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_518INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_518INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_518INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_518INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_518INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_518INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_518INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_518INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_518INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_518INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_518INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_519INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_519INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_519INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_519INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_519INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_519INVENTORY1_entry(const __SQL_SUM_AGGREGATE_519INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_519INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_519INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_519INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_519INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_519INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_519INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_519INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_519INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_519INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_519INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_519INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_519INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_519INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_520INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_520INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_520INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_520INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_520INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_520INVENTORY1_entry(const __SQL_SUM_AGGREGATE_520INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_520INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_520INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_520INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_520INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_520INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_520INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_520INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_520INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_520INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_520INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_520INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_520INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_520INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_521INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_521INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_521INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_521INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_521INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_521INVENTORY1_entry(const __SQL_SUM_AGGREGATE_521INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_521INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_521INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_521INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_521INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_521INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_521INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_521INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_521INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_521INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_521INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_521INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_521INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_521INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_522INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_522INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_522INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_522INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_522INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_522INVENTORY1_entry(const __SQL_SUM_AGGREGATE_522INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_522INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_522INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_522INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_522INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_522INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_522INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_522INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_522INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_522INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_522INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_522INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_522INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_522INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_523INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_523INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_523INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_523INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_523INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_523INVENTORY1_entry(const __SQL_SUM_AGGREGATE_523INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_523INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_523INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_523INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_523INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_523INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_523INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_523INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_523INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_523INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_523INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_523INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_523INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_523INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_524INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_524INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_524INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_524INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_524INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_524INVENTORY1_entry(const __SQL_SUM_AGGREGATE_524INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_524INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_524INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_524INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_524INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_524INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_524INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_524INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_524INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_524INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_524INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_524INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_524INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_524INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_525INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_525INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_525INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_525INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_525INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_525INVENTORY1_entry(const __SQL_SUM_AGGREGATE_525INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_525INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_525INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_525INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_525INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_525INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_525INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_525INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_525INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_525INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_525INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_525INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_525INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_525INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_526INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_526INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_526INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_526INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_526INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_526INVENTORY1_entry(const __SQL_SUM_AGGREGATE_526INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_526INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_526INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_526INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_526INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_526INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_526INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_526INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_526INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_526INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_526INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_526INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_526INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_526INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_527INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_527INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_527INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_527INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_527INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_527INVENTORY1_entry(const __SQL_SUM_AGGREGATE_527INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_527INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_527INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_527INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_527INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_527INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_527INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_527INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_527INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_527INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_527INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_527INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_527INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_527INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_528INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_528INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_528INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_528INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_528INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_528INVENTORY1_entry(const __SQL_SUM_AGGREGATE_528INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_528INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_528INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_528INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_528INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_528INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_528INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_528INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_528INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_528INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_528INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_528INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_528INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_528INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_529INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_529INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_529INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_529INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_529INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_529INVENTORY1_entry(const __SQL_SUM_AGGREGATE_529INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_529INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_529INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_529INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_529INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_529INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_529INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_529INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_529INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_529INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_529INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_529INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_529INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_529INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_530INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_530INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_530INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_530INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_530INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_530INVENTORY1_entry(const __SQL_SUM_AGGREGATE_530INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_530INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_530INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_530INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_530INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_530INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_530INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_530INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_530INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_530INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_530INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_530INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_530INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_530INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_541INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_541INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_541INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_541INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_541INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_541INVENTORY1_entry(const __SQL_SUM_AGGREGATE_541INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_541INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_541INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_541INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_541INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_541INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_541INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_541INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_541INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_541INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_541INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_541INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_541INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_541INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_542INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_542INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_542INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_542INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_542INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_542INVENTORY1_entry(const __SQL_SUM_AGGREGATE_542INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_542INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_542INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_542INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_542INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_542INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_542INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_542INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_542INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_542INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_542INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_542INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_542INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_542INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_543INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_543INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_543INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_543INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_543INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_543INVENTORY1_entry(const __SQL_SUM_AGGREGATE_543INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_543INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_543INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_543INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_543INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_543INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_543INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_543INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_543INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_543INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_543INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_543INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_543INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_543INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_544INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_544INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_544INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_544INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_544INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_544INVENTORY1_entry(const __SQL_SUM_AGGREGATE_544INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_544INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_544INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_544INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_544INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_544INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_544INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_544INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_544INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_544INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_544INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_544INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_544INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_544INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_545INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_545INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_545INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_545INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_545INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_545INVENTORY1_entry(const __SQL_SUM_AGGREGATE_545INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_545INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_545INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_545INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_545INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_545INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_545INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_545INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_545INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_545INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_545INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_545INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_545INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_545INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_546INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_546INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_546INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_546INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_546INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_546INVENTORY1_entry(const __SQL_SUM_AGGREGATE_546INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_546INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_546INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_546INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_546INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_546INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_546INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_546INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_546INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_546INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_546INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_546INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_546INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_546INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_547INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_547INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_547INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_547INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_547INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_547INVENTORY1_entry(const __SQL_SUM_AGGREGATE_547INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_547INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_547INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_547INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_547INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_547INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_547INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_547INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_547INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_547INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_547INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_547INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_547INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_547INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_548INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_548INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_548INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_548INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_548INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_548INVENTORY1_entry(const __SQL_SUM_AGGREGATE_548INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_548INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_548INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_548INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_548INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_548INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_548INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_548INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_548INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_548INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_548INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_548INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_548INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_548INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_549INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_549INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_549INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_549INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_549INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_549INVENTORY1_entry(const __SQL_SUM_AGGREGATE_549INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_549INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_549INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_549INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_549INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_549INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_549INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_549INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_549INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_549INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_549INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_549INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_549INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_549INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_550INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_550INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_550INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_550INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_550INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_550INVENTORY1_entry(const __SQL_SUM_AGGREGATE_550INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_550INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_550INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_550INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_550INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_550INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_550INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_550INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_550INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_550INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_550INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_550INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_550INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_550INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_551INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_551INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_551INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_551INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_551INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_551INVENTORY1_entry(const __SQL_SUM_AGGREGATE_551INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_551INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_551INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_551INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_551INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_551INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_551INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_551INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_551INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_551INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_551INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_551INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_551INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_551INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_552INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_552INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_552INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_552INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_552INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_552INVENTORY1_entry(const __SQL_SUM_AGGREGATE_552INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_552INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_552INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_552INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_552INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_552INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_552INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_552INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_552INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_552INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_552INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_552INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_552INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_552INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_553INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_553INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_553INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_553INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_553INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_553INVENTORY1_entry(const __SQL_SUM_AGGREGATE_553INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_553INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_553INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_553INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_553INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_553INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_553INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_553INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_553INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_553INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_553INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_553INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_553INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_553INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_554INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_554INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_554INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_554INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_554INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_554INVENTORY1_entry(const __SQL_SUM_AGGREGATE_554INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_554INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_554INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_554INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_554INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_554INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_554INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_554INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_554INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_554INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_554INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_554INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_554INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_554INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_555INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_555INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_555INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_555INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_555INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_555INVENTORY1_entry(const __SQL_SUM_AGGREGATE_555INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_555INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_555INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_555INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_555INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_555INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_555INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_555INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_555INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_555INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_555INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_555INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_555INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_555INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_556INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_556INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_556INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_556INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_556INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_556INVENTORY1_entry(const __SQL_SUM_AGGREGATE_556INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_556INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_556INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_556INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_556INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_556INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_556INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_556INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_556INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_556INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_556INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_556INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_556INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_556INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_557INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_557INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_557INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_557INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_557INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_557INVENTORY1_entry(const __SQL_SUM_AGGREGATE_557INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_557INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_557INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_557INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_557INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_557INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_557INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_557INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_557INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_557INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_557INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_557INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_557INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_557INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_558INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_558INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_558INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_558INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_558INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_558INVENTORY1_entry(const __SQL_SUM_AGGREGATE_558INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_558INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_558INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_558INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_558INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_558INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_558INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_558INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_558INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_558INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_558INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_558INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_558INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_558INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_569INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_569INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_569INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_569INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_569INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_569INVENTORY1_entry(const __SQL_SUM_AGGREGATE_569INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_569INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_569INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_569INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_569INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_569INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_569INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_569INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_569INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_569INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_569INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_569INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_569INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_569INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_570INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_570INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_570INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_570INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_570INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_570INVENTORY1_entry(const __SQL_SUM_AGGREGATE_570INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_570INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_570INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_570INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_570INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_570INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_570INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_570INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_570INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_570INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_570INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_570INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_570INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_570INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_571INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_571INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_571INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_571INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_571INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_571INVENTORY1_entry(const __SQL_SUM_AGGREGATE_571INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_571INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_571INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_571INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_571INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_571INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_571INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_571INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_571INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_571INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_571INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_571INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_571INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_571INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_572INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_572INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_572INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_572INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_572INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_572INVENTORY1_entry(const __SQL_SUM_AGGREGATE_572INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_572INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_572INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_572INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_572INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_572INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_572INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_572INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_572INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_572INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_572INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_572INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_572INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_572INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_573INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_573INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_573INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_573INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_573INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_573INVENTORY1_entry(const __SQL_SUM_AGGREGATE_573INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_573INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_573INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_573INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_573INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_573INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_573INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_573INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_573INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_573INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_573INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_573INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_573INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_573INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_574INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_574INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_574INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_574INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_574INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_574INVENTORY1_entry(const __SQL_SUM_AGGREGATE_574INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_574INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_574INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_574INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_574INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_574INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_574INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_574INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_574INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_574INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_574INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_574INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_574INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_574INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_575INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_575INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_575INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_575INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_575INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_575INVENTORY1_entry(const __SQL_SUM_AGGREGATE_575INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_575INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_575INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_575INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_575INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_575INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_575INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_575INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_575INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_575INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_575INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_575INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_575INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_575INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_576INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_576INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_576INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_576INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_576INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_576INVENTORY1_entry(const __SQL_SUM_AGGREGATE_576INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_576INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_576INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_576INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_576INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_576INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_576INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_576INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_576INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_576INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_576INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_576INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_576INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_576INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_577INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_577INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_577INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_577INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_577INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_577INVENTORY1_entry(const __SQL_SUM_AGGREGATE_577INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_577INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_577INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_577INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_577INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_577INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_577INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_577INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_577INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_577INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_577INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_577INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_577INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_577INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_578INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_578INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_578INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_578INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_578INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_578INVENTORY1_entry(const __SQL_SUM_AGGREGATE_578INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_578INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_578INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_578INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_578INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_578INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_578INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_578INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_578INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_578INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_578INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_578INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_578INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_578INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_579INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_579INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_579INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_579INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_579INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_579INVENTORY1_entry(const __SQL_SUM_AGGREGATE_579INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_579INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_579INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_579INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_579INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_579INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_579INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_579INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_579INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_579INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_579INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_579INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_579INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_579INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_580INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_580INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_580INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_580INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_580INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_580INVENTORY1_entry(const __SQL_SUM_AGGREGATE_580INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_580INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_580INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_580INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_580INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_580INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_580INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_580INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_580INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_580INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_580INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_580INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_580INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_580INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_581INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_581INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_581INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_581INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_581INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_581INVENTORY1_entry(const __SQL_SUM_AGGREGATE_581INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_581INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_581INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_581INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_581INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_581INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_581INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_581INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_581INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_581INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_581INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_581INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_581INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_581INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_582INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_582INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_582INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_582INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_582INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_582INVENTORY1_entry(const __SQL_SUM_AGGREGATE_582INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_582INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_582INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_582INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_582INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_582INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_582INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_582INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_582INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_582INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_582INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_582INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_582INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_582INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_583INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_583INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_583INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_583INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_583INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_583INVENTORY1_entry(const __SQL_SUM_AGGREGATE_583INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_583INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_583INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_583INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_583INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_583INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_583INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_583INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_583INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_583INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_583INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_583INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_583INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_583INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_584INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_584INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_584INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_584INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_584INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_584INVENTORY1_entry(const __SQL_SUM_AGGREGATE_584INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_584INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_584INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_584INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_584INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_584INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_584INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_584INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_584INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_584INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_584INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_584INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_584INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_584INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_585INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_585INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_585INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_585INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_585INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_585INVENTORY1_entry(const __SQL_SUM_AGGREGATE_585INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_585INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_585INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_585INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_585INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_585INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_585INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_585INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_585INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_585INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_585INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_585INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_585INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_585INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_596INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_596INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_596INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_596INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_596INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_596INVENTORY1_entry(const __SQL_SUM_AGGREGATE_596INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_596INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_596INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_596INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_596INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_596INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_596INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_596INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_596INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_596INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_596INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_596INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_596INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_596INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_597INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_597INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_597INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_597INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_597INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_597INVENTORY1_entry(const __SQL_SUM_AGGREGATE_597INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_597INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_597INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_597INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_597INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_597INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_597INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_597INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_597INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_597INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_597INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_597INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_597INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_597INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_598INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_598INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_598INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_598INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_598INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_598INVENTORY1_entry(const __SQL_SUM_AGGREGATE_598INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_598INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_598INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_598INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_598INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_598INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_598INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_598INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_598INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_598INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_598INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_598INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_598INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_598INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_599INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_599INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_599INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_599INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_599INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_599INVENTORY1_entry(const __SQL_SUM_AGGREGATE_599INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_599INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_599INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_599INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_599INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_599INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_599INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_599INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_599INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_599INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_599INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_599INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_599INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_599INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_600INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_600INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_600INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_600INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_600INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_600INVENTORY1_entry(const __SQL_SUM_AGGREGATE_600INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_600INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_600INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_600INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_600INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_600INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_600INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_600INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_600INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_600INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_600INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_600INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_600INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_600INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_601INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_601INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_601INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_601INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_601INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_601INVENTORY1_entry(const __SQL_SUM_AGGREGATE_601INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_601INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_601INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_601INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_601INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_601INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_601INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_601INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_601INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_601INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_601INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_601INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_601INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_601INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_602INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_602INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_602INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_602INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_602INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_602INVENTORY1_entry(const __SQL_SUM_AGGREGATE_602INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_602INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_602INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_602INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_602INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_602INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_602INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_602INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_602INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_602INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_602INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_602INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_602INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_602INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_603INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_603INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_603INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_603INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_603INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_603INVENTORY1_entry(const __SQL_SUM_AGGREGATE_603INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_603INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_603INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_603INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_603INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_603INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_603INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_603INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_603INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_603INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_603INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_603INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_603INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_603INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_604INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_604INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_604INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_604INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_604INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_604INVENTORY1_entry(const __SQL_SUM_AGGREGATE_604INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_604INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_604INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_604INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_604INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_604INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_604INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_604INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_604INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_604INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_604INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_604INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_604INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_604INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_605INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_605INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_605INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_605INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_605INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_605INVENTORY1_entry(const __SQL_SUM_AGGREGATE_605INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_605INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_605INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_605INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_605INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_605INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_605INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_605INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_605INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_605INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_605INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_605INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_605INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_605INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_606INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_606INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_606INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_606INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_606INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_606INVENTORY1_entry(const __SQL_SUM_AGGREGATE_606INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_606INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_606INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_606INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_606INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_606INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_606INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_606INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_606INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_606INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_606INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_606INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_606INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_606INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_607INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_607INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_607INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_607INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_607INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_607INVENTORY1_entry(const __SQL_SUM_AGGREGATE_607INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_607INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_607INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_607INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_607INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_607INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_607INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_607INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_607INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_607INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_607INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_607INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_607INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_607INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_608INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_608INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_608INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_608INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_608INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_608INVENTORY1_entry(const __SQL_SUM_AGGREGATE_608INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_608INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_608INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_608INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_608INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_608INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_608INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_608INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_608INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_608INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_608INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_608INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_608INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_608INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_609INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_609INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_609INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_609INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_609INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_609INVENTORY1_entry(const __SQL_SUM_AGGREGATE_609INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_609INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_609INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_609INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_609INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_609INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_609INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_609INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_609INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_609INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_609INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_609INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_609INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_609INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_610INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_610INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_610INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_610INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_610INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_610INVENTORY1_entry(const __SQL_SUM_AGGREGATE_610INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_610INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_610INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_610INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_610INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_610INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_610INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_610INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_610INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_610INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_610INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_610INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_610INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_610INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_611INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_611INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_611INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_611INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_611INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_611INVENTORY1_entry(const __SQL_SUM_AGGREGATE_611INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_611INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_611INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_611INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_611INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_611INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_611INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_611INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_611INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_611INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_611INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_611INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_611INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_611INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_622INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_622INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_622INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_622INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_622INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_622INVENTORY1_entry(const __SQL_SUM_AGGREGATE_622INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_622INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_622INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_622INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_622INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_622INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_622INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_622INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_622INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_622INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_622INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_622INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_622INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_622INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_623INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_623INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_623INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_623INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_623INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_623INVENTORY1_entry(const __SQL_SUM_AGGREGATE_623INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_623INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_623INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_623INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_623INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_623INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_623INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_623INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_623INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_623INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_623INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_623INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_623INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_623INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_624INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_624INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_624INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_624INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_624INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_624INVENTORY1_entry(const __SQL_SUM_AGGREGATE_624INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_624INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_624INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_624INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_624INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_624INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_624INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_624INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_624INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_624INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_624INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_624INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_624INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_624INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_625INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_625INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_625INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_625INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_625INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_625INVENTORY1_entry(const __SQL_SUM_AGGREGATE_625INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_625INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_625INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_625INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_625INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_625INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_625INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_625INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_625INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_625INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_625INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_625INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_625INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_625INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_626INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_626INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_626INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_626INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_626INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_626INVENTORY1_entry(const __SQL_SUM_AGGREGATE_626INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_626INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_626INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_626INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_626INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_626INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_626INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_626INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_626INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_626INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_626INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_626INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_626INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_626INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_627INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_627INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_627INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_627INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_627INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_627INVENTORY1_entry(const __SQL_SUM_AGGREGATE_627INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_627INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_627INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_627INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_627INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_627INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_627INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_627INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_627INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_627INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_627INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_627INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_627INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_627INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_628INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_628INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_628INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_628INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_628INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_628INVENTORY1_entry(const __SQL_SUM_AGGREGATE_628INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_628INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_628INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_628INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_628INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_628INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_628INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_628INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_628INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_628INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_628INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_628INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_628INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_628INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_629INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_629INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_629INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_629INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_629INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_629INVENTORY1_entry(const __SQL_SUM_AGGREGATE_629INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_629INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_629INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_629INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_629INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_629INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_629INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_629INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_629INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_629INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_629INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_629INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_629INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_629INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_630INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_630INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_630INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_630INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_630INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_630INVENTORY1_entry(const __SQL_SUM_AGGREGATE_630INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_630INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_630INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_630INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_630INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_630INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_630INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_630INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_630INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_630INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_630INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_630INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_630INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_630INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_631INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_631INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_631INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_631INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_631INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_631INVENTORY1_entry(const __SQL_SUM_AGGREGATE_631INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_631INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_631INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_631INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_631INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_631INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_631INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_631INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_631INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_631INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_631INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_631INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_631INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_631INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_632INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_632INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_632INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_632INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_632INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_632INVENTORY1_entry(const __SQL_SUM_AGGREGATE_632INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_632INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_632INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_632INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_632INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_632INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_632INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_632INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_632INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_632INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_632INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_632INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_632INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_632INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_633INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_633INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_633INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_633INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_633INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_633INVENTORY1_entry(const __SQL_SUM_AGGREGATE_633INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_633INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_633INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_633INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_633INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_633INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_633INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_633INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_633INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_633INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_633INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_633INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_633INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_633INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_634INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_634INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_634INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_634INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_634INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_634INVENTORY1_entry(const __SQL_SUM_AGGREGATE_634INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_634INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_634INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_634INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_634INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_634INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_634INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_634INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_634INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_634INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_634INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_634INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_634INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_634INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_635INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_635INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_635INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_635INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_635INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_635INVENTORY1_entry(const __SQL_SUM_AGGREGATE_635INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_635INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_635INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_635INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_635INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_635INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_635INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_635INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_635INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_635INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_635INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_635INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_635INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_635INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_636INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_636INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_636INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_636INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_636INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_636INVENTORY1_entry(const __SQL_SUM_AGGREGATE_636INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_636INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_636INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_636INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_636INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_636INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_636INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_636INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_636INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_636INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_636INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_636INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_636INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_636INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_647INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_647INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_647INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_647INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_647INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_647INVENTORY1_entry(const __SQL_SUM_AGGREGATE_647INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_647INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_647INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_647INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_647INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_647INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_647INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_647INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_647INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_647INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_647INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_647INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_647INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_647INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_648INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_648INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_648INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_648INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_648INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_648INVENTORY1_entry(const __SQL_SUM_AGGREGATE_648INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_648INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_648INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_648INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_648INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_648INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_648INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_648INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_648INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_648INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_648INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_648INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_648INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_648INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_649INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_649INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_649INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_649INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_649INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_649INVENTORY1_entry(const __SQL_SUM_AGGREGATE_649INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_649INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_649INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_649INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_649INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_649INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_649INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_649INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_649INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_649INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_649INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_649INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_649INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_649INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_650INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_650INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_650INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_650INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_650INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_650INVENTORY1_entry(const __SQL_SUM_AGGREGATE_650INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_650INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_650INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_650INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_650INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_650INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_650INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_650INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_650INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_650INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_650INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_650INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_650INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_650INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_651INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_651INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_651INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_651INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_651INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_651INVENTORY1_entry(const __SQL_SUM_AGGREGATE_651INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_651INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_651INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_651INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_651INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_651INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_651INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_651INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_651INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_651INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_651INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_651INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_651INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_651INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_652INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_652INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_652INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_652INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_652INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_652INVENTORY1_entry(const __SQL_SUM_AGGREGATE_652INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_652INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_652INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_652INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_652INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_652INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_652INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_652INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_652INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_652INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_652INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_652INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_652INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_652INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_653INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_653INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_653INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_653INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_653INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_653INVENTORY1_entry(const __SQL_SUM_AGGREGATE_653INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_653INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_653INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_653INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_653INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_653INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_653INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_653INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_653INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_653INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_653INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_653INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_653INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_653INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_654INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_654INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_654INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_654INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_654INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_654INVENTORY1_entry(const __SQL_SUM_AGGREGATE_654INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_654INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_654INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_654INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_654INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_654INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_654INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_654INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_654INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_654INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_654INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_654INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_654INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_654INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_655INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_655INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_655INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_655INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_655INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_655INVENTORY1_entry(const __SQL_SUM_AGGREGATE_655INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_655INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_655INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_655INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_655INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_655INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_655INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_655INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_655INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_655INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_655INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_655INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_655INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_655INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_656INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_656INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_656INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_656INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_656INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_656INVENTORY1_entry(const __SQL_SUM_AGGREGATE_656INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_656INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_656INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_656INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_656INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_656INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_656INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_656INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_656INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_656INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_656INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_656INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_656INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_656INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_657INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_657INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_657INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_657INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_657INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_657INVENTORY1_entry(const __SQL_SUM_AGGREGATE_657INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_657INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_657INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_657INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_657INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_657INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_657INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_657INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_657INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_657INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_657INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_657INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_657INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_657INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_658INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_658INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_658INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_658INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_658INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_658INVENTORY1_entry(const __SQL_SUM_AGGREGATE_658INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_658INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_658INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_658INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_658INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_658INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_658INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_658INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_658INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_658INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_658INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_658INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_658INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_658INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_659INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_659INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_659INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_659INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_659INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_659INVENTORY1_entry(const __SQL_SUM_AGGREGATE_659INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_659INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_659INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_659INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_659INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_659INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_659INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_659INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_659INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_659INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_659INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_659INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_659INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_659INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_660INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_660INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_660INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_660INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_660INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_660INVENTORY1_entry(const __SQL_SUM_AGGREGATE_660INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_660INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_660INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_660INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_660INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_660INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_660INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_660INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_660INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_660INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_660INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_660INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_660INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_660INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_671INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_671INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_671INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_671INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_671INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_671INVENTORY1_entry(const __SQL_SUM_AGGREGATE_671INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_671INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_671INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_671INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_671INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_671INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_671INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_671INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_671INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_671INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_671INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_671INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_671INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_671INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_672INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_672INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_672INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_672INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_672INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_672INVENTORY1_entry(const __SQL_SUM_AGGREGATE_672INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_672INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_672INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_672INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_672INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_672INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_672INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_672INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_672INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_672INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_672INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_672INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_672INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_672INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_673INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_673INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_673INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_673INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_673INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_673INVENTORY1_entry(const __SQL_SUM_AGGREGATE_673INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_673INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_673INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_673INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_673INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_673INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_673INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_673INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_673INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_673INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_673INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_673INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_673INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_673INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_674INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_674INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_674INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_674INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_674INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_674INVENTORY1_entry(const __SQL_SUM_AGGREGATE_674INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_674INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_674INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_674INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_674INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_674INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_674INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_674INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_674INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_674INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_674INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_674INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_674INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_674INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_675INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_675INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_675INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_675INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_675INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_675INVENTORY1_entry(const __SQL_SUM_AGGREGATE_675INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_675INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_675INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_675INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_675INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_675INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_675INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_675INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_675INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_675INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_675INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_675INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_675INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_675INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_676INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_676INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_676INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_676INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_676INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_676INVENTORY1_entry(const __SQL_SUM_AGGREGATE_676INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_676INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_676INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_676INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_676INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_676INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_676INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_676INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_676INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_676INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_676INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_676INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_676INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_676INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_677INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_677INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_677INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_677INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_677INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_677INVENTORY1_entry(const __SQL_SUM_AGGREGATE_677INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_677INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_677INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_677INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_677INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_677INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_677INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_677INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_677INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_677INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_677INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_677INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_677INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_677INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_678INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_678INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_678INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_678INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_678INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_678INVENTORY1_entry(const __SQL_SUM_AGGREGATE_678INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_678INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_678INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_678INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_678INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_678INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_678INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_678INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_678INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_678INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_678INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_678INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_678INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_678INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_679INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_679INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_679INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_679INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_679INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_679INVENTORY1_entry(const __SQL_SUM_AGGREGATE_679INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_679INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_679INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_679INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_679INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_679INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_679INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_679INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_679INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_679INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_679INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_679INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_679INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_679INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_680INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_680INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_680INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_680INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_680INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_680INVENTORY1_entry(const __SQL_SUM_AGGREGATE_680INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_680INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_680INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_680INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_680INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_680INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_680INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_680INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_680INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_680INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_680INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_680INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_680INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_680INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_681INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_681INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_681INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_681INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_681INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_681INVENTORY1_entry(const __SQL_SUM_AGGREGATE_681INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_681INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_681INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_681INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_681INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_681INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_681INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_681INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_681INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_681INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_681INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_681INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_681INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_681INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_682INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_682INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_682INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_682INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_682INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_682INVENTORY1_entry(const __SQL_SUM_AGGREGATE_682INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_682INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_682INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_682INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_682INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_682INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_682INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_682INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_682INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_682INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_682INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_682INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_682INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_682INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_683INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_683INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_683INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_683INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_683INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_683INVENTORY1_entry(const __SQL_SUM_AGGREGATE_683INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_683INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_683INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_683INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_683INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_683INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_683INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_683INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_683INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_683INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_683INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_683INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_683INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_683INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_694INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_694INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_694INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_694INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_694INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_694INVENTORY1_entry(const __SQL_SUM_AGGREGATE_694INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_694INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_694INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_694INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_694INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_694INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_694INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_694INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_694INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_694INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_694INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_694INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_694INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_694INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_695INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_695INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_695INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_695INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_695INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_695INVENTORY1_entry(const __SQL_SUM_AGGREGATE_695INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_695INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_695INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_695INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_695INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_695INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_695INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_695INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_695INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_695INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_695INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_695INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_695INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_695INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_696INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_696INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_696INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_696INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_696INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_696INVENTORY1_entry(const __SQL_SUM_AGGREGATE_696INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_696INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_696INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_696INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_696INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_696INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_696INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_696INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_696INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_696INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_696INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_696INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_696INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_696INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_697INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_697INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_697INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_697INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_697INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_697INVENTORY1_entry(const __SQL_SUM_AGGREGATE_697INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_697INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_697INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_697INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_697INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_697INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_697INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_697INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_697INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_697INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_697INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_697INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_697INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_697INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_698INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_698INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_698INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_698INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_698INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_698INVENTORY1_entry(const __SQL_SUM_AGGREGATE_698INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_698INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_698INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_698INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_698INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_698INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_698INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_698INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_698INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_698INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_698INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_698INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_698INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_698INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_699INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_699INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_699INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_699INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_699INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_699INVENTORY1_entry(const __SQL_SUM_AGGREGATE_699INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_699INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_699INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_699INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_699INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_699INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_699INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_699INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_699INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_699INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_699INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_699INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_699INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_699INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_700INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_700INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_700INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_700INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_700INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_700INVENTORY1_entry(const __SQL_SUM_AGGREGATE_700INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_700INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_700INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_700INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_700INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_700INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_700INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_700INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_700INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_700INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_700INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_700INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_700INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_700INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_701INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_701INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_701INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_701INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_701INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_701INVENTORY1_entry(const __SQL_SUM_AGGREGATE_701INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_701INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_701INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_701INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_701INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_701INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_701INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_701INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_701INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_701INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_701INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_701INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_701INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_701INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_702INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_702INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_702INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_702INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_702INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_702INVENTORY1_entry(const __SQL_SUM_AGGREGATE_702INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_702INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_702INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_702INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_702INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_702INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_702INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_702INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_702INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_702INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_702INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_702INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_702INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_702INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_703INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_703INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_703INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_703INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_703INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_703INVENTORY1_entry(const __SQL_SUM_AGGREGATE_703INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_703INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_703INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_703INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_703INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_703INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_703INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_703INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_703INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_703INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_703INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_703INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_703INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_703INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_704INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_704INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_704INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_704INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_704INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_704INVENTORY1_entry(const __SQL_SUM_AGGREGATE_704INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_704INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_704INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_704INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_704INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_704INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_704INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_704INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_704INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_704INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_704INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_704INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_704INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_704INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_705INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_705INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_705INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_705INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_705INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_705INVENTORY1_entry(const __SQL_SUM_AGGREGATE_705INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_705INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_705INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_705INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_705INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_705INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_705INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_705INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_705INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_705INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_705INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_705INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_705INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_705INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_716INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_716INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_716INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_716INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_716INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_716INVENTORY1_entry(const __SQL_SUM_AGGREGATE_716INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_716INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_716INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_716INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_716INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_716INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_716INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_716INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_716INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_716INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_716INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_716INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_716INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_716INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_717INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_717INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_717INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_717INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_717INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_717INVENTORY1_entry(const __SQL_SUM_AGGREGATE_717INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_717INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_717INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_717INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_717INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_717INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_717INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_717INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_717INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_717INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_717INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_717INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_717INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_717INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_718INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_718INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_718INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_718INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_718INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_718INVENTORY1_entry(const __SQL_SUM_AGGREGATE_718INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_718INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_718INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_718INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_718INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_718INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_718INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_718INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_718INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_718INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_718INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_718INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_718INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_718INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_719INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_719INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_719INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_719INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_719INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_719INVENTORY1_entry(const __SQL_SUM_AGGREGATE_719INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_719INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_719INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_719INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_719INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_719INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_719INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_719INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_719INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_719INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_719INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_719INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_719INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_719INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_720INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_720INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_720INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_720INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_720INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_720INVENTORY1_entry(const __SQL_SUM_AGGREGATE_720INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_720INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_720INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_720INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_720INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_720INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_720INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_720INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_720INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_720INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_720INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_720INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_720INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_720INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_721INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_721INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_721INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_721INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_721INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_721INVENTORY1_entry(const __SQL_SUM_AGGREGATE_721INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_721INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_721INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_721INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_721INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_721INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_721INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_721INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_721INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_721INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_721INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_721INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_721INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_721INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_722INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_722INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_722INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_722INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_722INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_722INVENTORY1_entry(const __SQL_SUM_AGGREGATE_722INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_722INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_722INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_722INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_722INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_722INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_722INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_722INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_722INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_722INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_722INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_722INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_722INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_722INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_723INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_723INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_723INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_723INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_723INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_723INVENTORY1_entry(const __SQL_SUM_AGGREGATE_723INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_723INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_723INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_723INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_723INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_723INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_723INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_723INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_723INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_723INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_723INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_723INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_723INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_723INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_724INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_724INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_724INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_724INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_724INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_724INVENTORY1_entry(const __SQL_SUM_AGGREGATE_724INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_724INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_724INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_724INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_724INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_724INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_724INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_724INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_724INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_724INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_724INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_724INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_724INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_724INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_725INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_725INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_725INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_725INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_725INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_725INVENTORY1_entry(const __SQL_SUM_AGGREGATE_725INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_725INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_725INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_725INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_725INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_725INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_725INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_725INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_725INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_725INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_725INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_725INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_725INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_725INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_726INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_726INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_726INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_726INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_726INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_726INVENTORY1_entry(const __SQL_SUM_AGGREGATE_726INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_726INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_726INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_726INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_726INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_726INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_726INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_726INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_726INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_726INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_726INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_726INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_726INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_726INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_737INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_737INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_737INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_737INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_737INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_737INVENTORY1_entry(const __SQL_SUM_AGGREGATE_737INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_737INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_737INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_737INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_737INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_737INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_737INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_737INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_737INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_737INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_737INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_737INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_737INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_737INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_738INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_738INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_738INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_738INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_738INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_738INVENTORY1_entry(const __SQL_SUM_AGGREGATE_738INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_738INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_738INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_738INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_738INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_738INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_738INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_738INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_738INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_738INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_738INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_738INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_738INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_738INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_739INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_739INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_739INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_739INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_739INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_739INVENTORY1_entry(const __SQL_SUM_AGGREGATE_739INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_739INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_739INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_739INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_739INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_739INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_739INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_739INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_739INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_739INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_739INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_739INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_739INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_739INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_740INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_740INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_740INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_740INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_740INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_740INVENTORY1_entry(const __SQL_SUM_AGGREGATE_740INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_740INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_740INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_740INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_740INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_740INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_740INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_740INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_740INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_740INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_740INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_740INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_740INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_740INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_741INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_741INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_741INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_741INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_741INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_741INVENTORY1_entry(const __SQL_SUM_AGGREGATE_741INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_741INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_741INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_741INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_741INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_741INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_741INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_741INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_741INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_741INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_741INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_741INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_741INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_741INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_742INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_742INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_742INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_742INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_742INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_742INVENTORY1_entry(const __SQL_SUM_AGGREGATE_742INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_742INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_742INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_742INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_742INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_742INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_742INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_742INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_742INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_742INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_742INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_742INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_742INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_742INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_743INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_743INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_743INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_743INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_743INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_743INVENTORY1_entry(const __SQL_SUM_AGGREGATE_743INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_743INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_743INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_743INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_743INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_743INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_743INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_743INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_743INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_743INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_743INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_743INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_743INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_743INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_744INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_744INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_744INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_744INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_744INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_744INVENTORY1_entry(const __SQL_SUM_AGGREGATE_744INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_744INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_744INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_744INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_744INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_744INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_744INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_744INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_744INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_744INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_744INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_744INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_744INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_744INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_745INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_745INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_745INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_745INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_745INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_745INVENTORY1_entry(const __SQL_SUM_AGGREGATE_745INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_745INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_745INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_745INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_745INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_745INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_745INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_745INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_745INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_745INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_745INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_745INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_745INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_745INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_746INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_746INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_746INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_746INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_746INVENTORY1_entry(const long c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_746INVENTORY1_entry(const __SQL_SUM_AGGREGATE_746INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_746INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_746INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_746INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_746INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_746INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_746INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_746INVENTORY1_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_746INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_746INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_746INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_746INVENTORY1_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_746INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_746INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_757INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_757INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_757INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_757INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_757INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_757INVENTORY1_entry(const __SQL_SUM_AGGREGATE_757INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_757INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_757INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_757INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_757INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_757INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_757INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_757INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_757INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_757INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_757INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_757INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_757INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_757INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_758INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_758INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_758INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_758INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_758INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_758INVENTORY1_entry(const __SQL_SUM_AGGREGATE_758INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_758INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_758INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_758INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_758INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_758INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_758INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_758INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_758INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_758INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_758INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_758INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_758INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_758INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_759INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_759INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_759INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_759INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_759INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_759INVENTORY1_entry(const __SQL_SUM_AGGREGATE_759INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_759INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_759INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_759INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_759INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_759INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_759INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_759INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_759INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_759INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_759INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_759INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_759INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_759INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_760INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_760INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_760INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_760INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_760INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_760INVENTORY1_entry(const __SQL_SUM_AGGREGATE_760INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_760INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_760INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_760INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_760INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_760INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_760INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_760INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_760INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_760INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_760INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_760INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_760INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_760INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_761INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_761INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_761INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_761INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_761INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_761INVENTORY1_entry(const __SQL_SUM_AGGREGATE_761INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_761INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_761INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_761INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_761INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_761INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_761INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_761INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_761INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_761INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_761INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_761INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_761INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_761INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_762INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_762INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_762INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_762INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_762INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_762INVENTORY1_entry(const __SQL_SUM_AGGREGATE_762INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_762INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_762INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_762INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_762INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_762INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_762INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_762INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_762INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_762INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_762INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_762INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_762INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_762INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_763INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_763INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_763INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_763INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_763INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_763INVENTORY1_entry(const __SQL_SUM_AGGREGATE_763INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_763INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_763INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_763INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_763INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_763INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_763INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_763INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_763INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_763INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_763INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_763INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_763INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_763INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_764INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_764INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_764INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_764INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_764INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_764INVENTORY1_entry(const __SQL_SUM_AGGREGATE_764INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_764INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_764INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_764INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_764INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_764INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_764INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_764INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_764INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_764INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_764INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_764INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_764INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_764INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_765INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_765INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_765INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_765INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_765INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_765INVENTORY1_entry(const __SQL_SUM_AGGREGATE_765INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_765INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_765INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_765INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_765INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_765INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_765INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_765INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_765INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_765INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_765INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_765INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_765INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_765INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_776INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_776INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_776INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_776INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_776INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_776INVENTORY1_entry(const __SQL_SUM_AGGREGATE_776INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_776INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_776INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_776INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_776INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_776INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_776INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_776INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_776INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_776INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_776INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_776INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_776INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_776INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_777INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_777INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_777INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_777INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_777INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_777INVENTORY1_entry(const __SQL_SUM_AGGREGATE_777INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_777INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_777INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_777INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_777INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_777INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_777INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_777INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_777INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_777INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_777INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_777INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_777INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_777INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_778INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_778INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_778INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_778INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_778INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_778INVENTORY1_entry(const __SQL_SUM_AGGREGATE_778INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_778INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_778INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_778INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_778INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_778INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_778INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_778INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_778INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_778INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_778INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_778INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_778INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_778INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_779INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_779INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_779INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_779INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_779INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_779INVENTORY1_entry(const __SQL_SUM_AGGREGATE_779INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_779INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_779INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_779INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_779INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_779INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_779INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_779INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_779INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_779INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_779INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_779INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_779INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_779INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_780INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_780INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_780INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_780INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_780INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_780INVENTORY1_entry(const __SQL_SUM_AGGREGATE_780INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_780INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_780INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_780INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_780INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_780INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_780INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_780INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_780INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_780INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_780INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_780INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_780INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_780INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_781INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_781INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_781INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_781INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_781INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_781INVENTORY1_entry(const __SQL_SUM_AGGREGATE_781INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_781INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_781INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_781INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_781INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_781INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_781INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_781INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_781INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_781INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_781INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_781INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_781INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_781INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_782INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_782INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_782INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_782INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_782INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_782INVENTORY1_entry(const __SQL_SUM_AGGREGATE_782INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_782INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_782INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_782INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_782INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_782INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_782INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_782INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_782INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_782INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_782INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_782INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_782INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_782INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_783INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_783INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_783INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_783INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_783INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_783INVENTORY1_entry(const __SQL_SUM_AGGREGATE_783INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_783INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_783INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_783INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_783INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_783INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_783INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_783INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_783INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_783INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_783INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_783INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_783INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_783INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_794INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_794INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_794INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_794INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_794INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_794INVENTORY1_entry(const __SQL_SUM_AGGREGATE_794INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_794INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_794INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_794INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_794INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_794INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_794INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_794INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_794INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_794INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_794INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_794INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_794INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_794INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_795INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_795INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_795INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_795INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_795INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_795INVENTORY1_entry(const __SQL_SUM_AGGREGATE_795INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_795INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_795INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_795INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_795INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_795INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_795INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_795INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_795INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_795INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_795INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_795INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_795INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_795INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_796INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_796INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_796INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_796INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_796INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_796INVENTORY1_entry(const __SQL_SUM_AGGREGATE_796INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_796INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_796INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_796INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_796INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_796INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_796INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_796INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_796INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_796INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_796INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_796INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_796INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_796INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_797INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_797INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_797INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_797INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_797INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_797INVENTORY1_entry(const __SQL_SUM_AGGREGATE_797INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_797INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_797INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_797INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_797INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_797INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_797INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_797INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_797INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_797INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_797INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_797INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_797INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_797INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_798INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_798INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_798INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_798INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_798INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_798INVENTORY1_entry(const __SQL_SUM_AGGREGATE_798INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_798INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_798INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_798INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_798INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_798INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_798INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_798INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_798INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_798INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_798INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_798INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_798INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_798INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_799INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_799INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_799INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_799INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_799INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_799INVENTORY1_entry(const __SQL_SUM_AGGREGATE_799INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_799INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_799INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_799INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_799INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_799INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_799INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_799INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_799INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_799INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_799INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_799INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_799INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_799INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_800INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_800INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_800INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_800INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_800INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_800INVENTORY1_entry(const __SQL_SUM_AGGREGATE_800INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_800INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_800INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_800INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_800INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_800INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_800INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_800INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_800INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_800INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_800INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_800INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_800INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_800INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_811INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_811INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_811INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_811INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_811INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_811INVENTORY1_entry(const __SQL_SUM_AGGREGATE_811INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_811INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_811INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_811INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_811INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_811INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_811INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_811INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_811INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_811INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_811INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_811INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_811INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_811INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_812INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_812INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_812INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_812INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_812INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_812INVENTORY1_entry(const __SQL_SUM_AGGREGATE_812INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_812INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_812INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_812INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_812INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_812INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_812INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_812INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_812INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_812INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_812INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_812INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_812INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_812INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_813INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_813INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_813INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_813INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_813INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_813INVENTORY1_entry(const __SQL_SUM_AGGREGATE_813INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_813INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_813INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_813INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_813INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_813INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_813INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_813INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_813INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_813INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_813INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_813INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_813INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_813INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_814INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_814INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_814INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_814INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_814INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_814INVENTORY1_entry(const __SQL_SUM_AGGREGATE_814INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_814INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_814INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_814INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_814INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_814INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_814INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_814INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_814INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_814INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_814INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_814INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_814INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_814INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_815INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_815INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_815INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_815INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_815INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_815INVENTORY1_entry(const __SQL_SUM_AGGREGATE_815INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_815INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_815INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_815INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_815INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_815INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_815INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_815INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_815INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_815INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_815INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_815INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_815INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_815INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_816INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_816INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_816INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_816INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_816INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_816INVENTORY1_entry(const __SQL_SUM_AGGREGATE_816INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_816INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_816INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_816INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_816INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_816INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_816INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_816INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_816INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_816INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_816INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_816INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_816INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_816INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_827INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_827INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_827INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_827INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_827INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_827INVENTORY1_entry(const __SQL_SUM_AGGREGATE_827INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_827INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_827INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_827INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_827INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_827INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_827INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_827INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_827INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_827INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_827INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_827INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_827INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_827INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_828INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_828INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_828INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_828INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_828INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_828INVENTORY1_entry(const __SQL_SUM_AGGREGATE_828INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_828INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_828INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_828INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_828INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_828INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_828INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_828INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_828INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_828INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_828INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_828INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_828INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_828INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_829INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_829INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_829INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_829INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_829INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_829INVENTORY1_entry(const __SQL_SUM_AGGREGATE_829INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_829INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_829INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_829INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_829INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_829INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_829INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_829INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_829INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_829INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_829INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_829INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_829INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_829INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_830INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_830INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_830INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_830INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_830INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_830INVENTORY1_entry(const __SQL_SUM_AGGREGATE_830INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_830INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_830INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_830INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_830INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_830INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_830INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_830INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_830INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_830INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_830INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_830INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_830INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_830INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_831INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_831INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_831INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_831INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_831INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_831INVENTORY1_entry(const __SQL_SUM_AGGREGATE_831INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_831INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_831INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_831INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_831INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_831INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_831INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_831INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_831INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_831INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_831INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_831INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_831INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_831INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_842INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_842INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_842INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_842INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_842INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_842INVENTORY1_entry(const __SQL_SUM_AGGREGATE_842INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_842INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_842INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_842INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_842INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_842INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_842INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_842INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_842INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_842INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_842INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_842INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_842INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_842INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_843INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_843INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_843INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_843INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_843INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_843INVENTORY1_entry(const __SQL_SUM_AGGREGATE_843INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_843INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_843INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_843INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_843INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_843INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_843INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_843INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_843INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_843INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_843INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_843INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_843INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_843INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_844INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_844INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_844INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_844INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_844INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_844INVENTORY1_entry(const __SQL_SUM_AGGREGATE_844INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_844INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_844INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_844INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_844INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_844INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_844INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_844INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_844INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_844INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_844INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_844INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_844INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_844INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_845INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_845INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_845INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_845INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_845INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_845INVENTORY1_entry(const __SQL_SUM_AGGREGATE_845INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_845INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_845INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_845INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_845INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_845INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_845INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_845INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_845INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_845INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_845INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_845INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_845INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_845INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_856INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_856INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_856INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_856INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_856INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_856INVENTORY1_entry(const __SQL_SUM_AGGREGATE_856INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_856INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_856INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_856INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_856INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_856INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_856INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_856INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_856INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_856INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_856INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_856INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_856INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_856INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_857INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_857INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_857INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_857INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_857INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_857INVENTORY1_entry(const __SQL_SUM_AGGREGATE_857INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_857INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_857INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_857INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_857INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_857INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_857INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_857INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_857INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_857INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_857INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_857INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_857INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_857INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_858INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_858INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_858INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_858INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_858INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_858INVENTORY1_entry(const __SQL_SUM_AGGREGATE_858INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_858INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_858INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_858INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_858INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_858INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_858INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_858INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_858INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_858INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_858INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_858INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_858INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_858INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_869INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_869INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_869INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_869INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_869INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_869INVENTORY1_entry(const __SQL_SUM_AGGREGATE_869INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_869INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_869INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_869INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_869INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_869INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_869INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_869INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_869INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_869INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_869INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_869INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_869INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_869INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_870INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_870INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_870INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_870INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_870INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_870INVENTORY1_entry(const __SQL_SUM_AGGREGATE_870INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_870INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_870INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_870INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_870INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_870INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_870INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_870INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_870INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_870INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_870INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_870INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_870INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_870INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_881INVENTORY1_entry {
    long __SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN; long __av;  __SQL_SUM_AGGREGATE_881INVENTORY1_entry* nxt; __SQL_SUM_AGGREGATE_881INVENTORY1_entry* prv;
    explicit __SQL_SUM_AGGREGATE_881INVENTORY1_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_881INVENTORY1_entry(const long c0, const long c1) { __SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_881INVENTORY1_entry(const __SQL_SUM_AGGREGATE_881INVENTORY1_entry& other) : __SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_881INVENTORY1_entry& modify(const long c0) { __SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_881INVENTORY1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_881INVENTORY1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_881INVENTORY1_entry& x, const __SQL_SUM_AGGREGATE_881INVENTORY1_entry& y) {
      return x.__SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_881INVENTORYINVENTORY_LOCN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_881INVENTORY1_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_881INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_881INVENTORY1_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_881INVENTORY1_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_881INVENTORY1_entry, long, __SQL_SUM_AGGREGATE_881INVENTORY1_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_881INVENTORY1_map_0;
  
  struct __SQL_SUM_AGGREGATE_892INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_892INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_892INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_892INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_892INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_892INVENTORY2_entry(const __SQL_SUM_AGGREGATE_892INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_892INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_892INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_892INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_892INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_892INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_892INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_892INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_892INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_892INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_892INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_892INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_892INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_892INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_893INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_893INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_893INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_893INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_893INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_893INVENTORY2_entry(const __SQL_SUM_AGGREGATE_893INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_893INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_893INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_893INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_893INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_893INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_893INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_893INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_893INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_893INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_893INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_893INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_893INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_893INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_894INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_894INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_894INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_894INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_894INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_894INVENTORY2_entry(const __SQL_SUM_AGGREGATE_894INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_894INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_894INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_894INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_894INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_894INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_894INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_894INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_894INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_894INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_894INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_894INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_894INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_894INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_895INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_895INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_895INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_895INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_895INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_895INVENTORY2_entry(const __SQL_SUM_AGGREGATE_895INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_895INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_895INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_895INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_895INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_895INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_895INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_895INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_895INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_895INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_895INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_895INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_895INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_895INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_902INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_902INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_902INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_902INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_902INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_902INVENTORY2_entry(const __SQL_SUM_AGGREGATE_902INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_902INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_902INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_902INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_902INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_902INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_902INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_902INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_902INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_902INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_902INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_902INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_902INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_902INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_903INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_903INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_903INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_903INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_903INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_903INVENTORY2_entry(const __SQL_SUM_AGGREGATE_903INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_903INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_903INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_903INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_903INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_903INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_903INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_903INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_903INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_903INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_903INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_903INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_903INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_903INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_904INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_904INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_904INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_904INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_904INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_904INVENTORY2_entry(const __SQL_SUM_AGGREGATE_904INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_904INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_904INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_904INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_904INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_904INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_904INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_904INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_904INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_904INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_904INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_904INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_904INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_904INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_911INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN; long __av;  __SQL_SUM_AGGREGATE_911INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_911INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_911INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN = 0.0; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_911INVENTORY2_entry(const DOUBLE_TYPE c0, const long c1) { __SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_911INVENTORY2_entry(const __SQL_SUM_AGGREGATE_911INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_911INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_911INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_911INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_911INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_911INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_911INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_911INVENTORY2_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_911INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_911INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_911INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_911INVENTORY2_entry, long, __SQL_SUM_AGGREGATE_911INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_911INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_912INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_912INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_912INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_912INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_912INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_912INVENTORY2_entry(const __SQL_SUM_AGGREGATE_912INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_912INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_912INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_912INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_912INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_912INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_912INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_912INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_912INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_912INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_912INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_912INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_912INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_912INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_919INVENTORY2_entry {
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_919INVENTORY2_entry* nxt; __SQL_SUM_AGGREGATE_919INVENTORY2_entry* prv;
    explicit __SQL_SUM_AGGREGATE_919INVENTORY2_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN = 0.0; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_919INVENTORY2_entry(const DOUBLE_TYPE c0, const DOUBLE_TYPE c1) { __SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN = c0; __av = c1; }
    __SQL_SUM_AGGREGATE_919INVENTORY2_entry(const __SQL_SUM_AGGREGATE_919INVENTORY2_entry& other) : __SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN( other.__SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_919INVENTORY2_entry& modify(const DOUBLE_TYPE c0) { __SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_919INVENTORY2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_919INVENTORY2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_919INVENTORY2_entry& x, const __SQL_SUM_AGGREGATE_919INVENTORY2_entry& y) {
      return x.__SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN == y.__SQL_SUM_AGGREGATE_919INVENTORYINVENTORY_KSN;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_919INVENTORY2_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_919INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_919INVENTORY2_mapkey0_idxfn, true>
  > __SQL_SUM_AGGREGATE_919INVENTORY2_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_919INVENTORY2_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_919INVENTORY2_mapkey0_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_919INVENTORY2_map_0;
  
  struct __SQL_SUM_AGGREGATE_926INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_926INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_926INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_926INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_926INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_926INVENTORY3_entry(const __SQL_SUM_AGGREGATE_926INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_926INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_926INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_926INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_926INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_926INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_926INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_926INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_926INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_926INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_926INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_926INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_926INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_926INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_927INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_927INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_927INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_927INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_927INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_927INVENTORY3_entry(const __SQL_SUM_AGGREGATE_927INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_927INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_927INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_927INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_927INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_927INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_927INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_927INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_927INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_927INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_927INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_927INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_927INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_927INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_928INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_928INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_928INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_928INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_928INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_928INVENTORY3_entry(const __SQL_SUM_AGGREGATE_928INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_928INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_928INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_928INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_928INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_928INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_928INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_928INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_928INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_928INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_928INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_928INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_928INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_928INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_929INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_929INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_929INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_929INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_929INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_929INVENTORY3_entry(const __SQL_SUM_AGGREGATE_929INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_929INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_929INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_929INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_929INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_929INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_929INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_929INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_929INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_929INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_929INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_929INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_929INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_929INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_930INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_930INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_930INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_930INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_930INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_930INVENTORY3_entry(const __SQL_SUM_AGGREGATE_930INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_930INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_930INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_930INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_930INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_930INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_930INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_930INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_930INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_930INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_930INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_930INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_930INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_930INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_931INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_931INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_931INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_931INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_931INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_931INVENTORY3_entry(const __SQL_SUM_AGGREGATE_931INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_931INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_931INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_931INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_931INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_931INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_931INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_931INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_931INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_931INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_931INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_931INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_931INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_931INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_932INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_932INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_932INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_932INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_932INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_932INVENTORY3_entry(const __SQL_SUM_AGGREGATE_932INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_932INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_932INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_932INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_932INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_932INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_932INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_932INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_932INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_932INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_932INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_932INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_932INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_932INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_933INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_933INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_933INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_933INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_933INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_933INVENTORY3_entry(const __SQL_SUM_AGGREGATE_933INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_933INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_933INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_933INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_933INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_933INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_933INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_933INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_933INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_933INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_933INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_933INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_933INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_933INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_934INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_934INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_934INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_934INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_934INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_934INVENTORY3_entry(const __SQL_SUM_AGGREGATE_934INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_934INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_934INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_934INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_934INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_934INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_934INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_934INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_934INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_934INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_934INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_934INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_934INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_934INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_935INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_935INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_935INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_935INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_935INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_935INVENTORY3_entry(const __SQL_SUM_AGGREGATE_935INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_935INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_935INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_935INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_935INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_935INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_935INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_935INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_935INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_935INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_935INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_935INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_935INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_935INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_936INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_936INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_936INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_936INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_936INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_936INVENTORY3_entry(const __SQL_SUM_AGGREGATE_936INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_936INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_936INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_936INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_936INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_936INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_936INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_936INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_936INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_936INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_936INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_936INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_936INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_936INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_937INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_937INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_937INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_937INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_937INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_937INVENTORY3_entry(const __SQL_SUM_AGGREGATE_937INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_937INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_937INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_937INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_937INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_937INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_937INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_937INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_937INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_937INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_937INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_937INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_937INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_937INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_938INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_938INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_938INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_938INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_938INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_938INVENTORY3_entry(const __SQL_SUM_AGGREGATE_938INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_938INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_938INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_938INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_938INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_938INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_938INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_938INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_938INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_938INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_938INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_938INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_938INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_938INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_939INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_939INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_939INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_939INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_939INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_939INVENTORY3_entry(const __SQL_SUM_AGGREGATE_939INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_939INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_939INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_939INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_939INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_939INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_939INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_939INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_939INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_939INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_939INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_939INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_939INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_939INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_940INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_940INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_940INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_940INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_940INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_940INVENTORY3_entry(const __SQL_SUM_AGGREGATE_940INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_940INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_940INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_940INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_940INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_940INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_940INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_940INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_940INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_940INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_940INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_940INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_940INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_940INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_941INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_941INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_941INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_941INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_941INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_941INVENTORY3_entry(const __SQL_SUM_AGGREGATE_941INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_941INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_941INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_941INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_941INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_941INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_941INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_941INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_941INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_941INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_941INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_941INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_941INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_941INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_942INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_942INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_942INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_942INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_942INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_942INVENTORY3_entry(const __SQL_SUM_AGGREGATE_942INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_942INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_942INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_942INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_942INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_942INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_942INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_942INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_942INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_942INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_942INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_942INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_942INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_942INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_943INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_943INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_943INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_943INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_943INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_943INVENTORY3_entry(const __SQL_SUM_AGGREGATE_943INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_943INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_943INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_943INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_943INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_943INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_943INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_943INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_943INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_943INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_943INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_943INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_943INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_943INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_944INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_944INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_944INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_944INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_944INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_944INVENTORY3_entry(const __SQL_SUM_AGGREGATE_944INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_944INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_944INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_944INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_944INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_944INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_944INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_944INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_944INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_944INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_944INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_944INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_944INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_944INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_945INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID; DOUBLE_TYPE __av;  __SQL_SUM_AGGREGATE_945INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_945INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_945INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID = 0L; __av = 0.0; */ }
    explicit __SQL_SUM_AGGREGATE_945INVENTORY3_entry(const long c0, const long c1, const DOUBLE_TYPE c2) { __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_945INVENTORY3_entry(const __SQL_SUM_AGGREGATE_945INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_945INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_945INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_945INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_945INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_945INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_945INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_945INVENTORY3_entry, DOUBLE_TYPE, 
    HashIndex<__SQL_SUM_AGGREGATE_945INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_945INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_945INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_945INVENTORY3_entry, DOUBLE_TYPE, __SQL_SUM_AGGREGATE_945INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_945INVENTORY3_map_01;
  
  struct __SQL_SUM_AGGREGATE_946INVENTORY3_entry {
    long __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN; long __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID; long __av;  __SQL_SUM_AGGREGATE_946INVENTORY3_entry* nxt; __SQL_SUM_AGGREGATE_946INVENTORY3_entry* prv;
    explicit __SQL_SUM_AGGREGATE_946INVENTORY3_entry() : nxt(nullptr), prv(nullptr) { /*__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN = 0L; __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID = 0L; __av = 0L; */ }
    explicit __SQL_SUM_AGGREGATE_946INVENTORY3_entry(const long c0, const long c1, const long c2) { __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID = c1; __av = c2; }
    __SQL_SUM_AGGREGATE_946INVENTORY3_entry(const __SQL_SUM_AGGREGATE_946INVENTORY3_entry& other) : __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN( other.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN ), __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID( other.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID ), __av( other.__av ), nxt( nullptr ), prv( nullptr ) {}
    FORCE_INLINE __SQL_SUM_AGGREGATE_946INVENTORY3_entry& modify(const long c0, const long c1) { __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN = c0; __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID = c1;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct __SQL_SUM_AGGREGATE_946INVENTORY3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const __SQL_SUM_AGGREGATE_946INVENTORY3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN);
      hash_combine(h, e.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID);
      return h;
    }
    FORCE_INLINE static bool equals(const __SQL_SUM_AGGREGATE_946INVENTORY3_entry& x, const __SQL_SUM_AGGREGATE_946INVENTORY3_entry& y) {
      return x.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN == y.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_LOCN && x.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID == y.__SQL_SUM_AGGREGATE_946INVENTORYINVENTORY_DATEID;
    }
  };
  
  typedef MultiHashMap<__SQL_SUM_AGGREGATE_946INVENTORY3_entry, long, 
    HashIndex<__SQL_SUM_AGGREGATE_946INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_946INVENTORY3_mapkey01_idxfn, true>
  > __SQL_SUM_AGGREGATE_946INVENTORY3_map;
  typedef HashIndex<__SQL_SUM_AGGREGATE_946INVENTORY3_entry, long, __SQL_SUM_AGGREGATE_946INVENTORY3_mapkey01_idxfn, true> HashIndex___SQL_SUM_AGGREGATE_946INVENTORY3_map_01;
  
  
  
  /* Type definition providing a way to access the results of the sql program */
  struct tlq_t {
    struct timeval t0, t; long tT, tN, tS;
    tlq_t(): tN(0), tS(0) , __SQL_SUM_AGGREGATE_1(0.0), __SQL_SUM_AGGREGATE_2(0.0), __SQL_SUM_AGGREGATE_3(0.0), __SQL_SUM_AGGREGATE_4(0.0), __SQL_SUM_AGGREGATE_5(0.0), __SQL_SUM_AGGREGATE_6(0.0), __SQL_SUM_AGGREGATE_7(0.0), __SQL_SUM_AGGREGATE_8(0.0), __SQL_SUM_AGGREGATE_9(0.0), __SQL_SUM_AGGREGATE_10(0.0), __SQL_SUM_AGGREGATE_11(0.0), __SQL_SUM_AGGREGATE_12(0.0), __SQL_SUM_AGGREGATE_13(0.0), __SQL_SUM_AGGREGATE_14(0.0), __SQL_SUM_AGGREGATE_15(0.0), __SQL_SUM_AGGREGATE_16(0.0), __SQL_SUM_AGGREGATE_17(0.0), __SQL_SUM_AGGREGATE_18(0.0), __SQL_SUM_AGGREGATE_19(0.0), __SQL_SUM_AGGREGATE_20(0.0), __SQL_SUM_AGGREGATE_21(0.0), __SQL_SUM_AGGREGATE_22(0.0), __SQL_SUM_AGGREGATE_23(0.0), __SQL_SUM_AGGREGATE_24(0.0), __SQL_SUM_AGGREGATE_25(0.0), __SQL_SUM_AGGREGATE_26(0.0), __SQL_SUM_AGGREGATE_27(0.0), __SQL_SUM_AGGREGATE_28(0.0), __SQL_SUM_AGGREGATE_29(0.0), __SQL_SUM_AGGREGATE_30(0.0), __SQL_SUM_AGGREGATE_31(0.0), __SQL_SUM_AGGREGATE_32(0.0), __SQL_SUM_AGGREGATE_33(0.0), __SQL_SUM_AGGREGATE_34(0.0), __SQL_SUM_AGGREGATE_35(0.0), __SQL_SUM_AGGREGATE_36(0.0), __SQL_SUM_AGGREGATE_37(0.0), __SQL_SUM_AGGREGATE_38(0.0), __SQL_SUM_AGGREGATE_39(0.0), __SQL_SUM_AGGREGATE_40(0.0), __SQL_SUM_AGGREGATE_41(0.0), __SQL_SUM_AGGREGATE_42(0.0), __SQL_SUM_AGGREGATE_43(0.0), __SQL_SUM_AGGREGATE_44(0L), __SQL_SUM_AGGREGATE_45(0L), __SQL_SUM_AGGREGATE_46(0.0), __SQL_SUM_AGGREGATE_47(0L), __SQL_SUM_AGGREGATE_48(0.0), __SQL_SUM_AGGREGATE_49(0.0), __SQL_SUM_AGGREGATE_50(0.0), __SQL_SUM_AGGREGATE_51(0.0), __SQL_SUM_AGGREGATE_52(0.0), __SQL_SUM_AGGREGATE_53(0.0), __SQL_SUM_AGGREGATE_54(0.0), __SQL_SUM_AGGREGATE_55(0.0), __SQL_SUM_AGGREGATE_56(0.0), __SQL_SUM_AGGREGATE_57(0.0), __SQL_SUM_AGGREGATE_58(0.0), __SQL_SUM_AGGREGATE_59(0.0), __SQL_SUM_AGGREGATE_60(0.0), __SQL_SUM_AGGREGATE_61(0L), __SQL_SUM_AGGREGATE_62(0L), __SQL_SUM_AGGREGATE_63(0L), __SQL_SUM_AGGREGATE_64(0L), __SQL_SUM_AGGREGATE_65(0L), __SQL_SUM_AGGREGATE_66(0.0), __SQL_SUM_AGGREGATE_67(0L), __SQL_SUM_AGGREGATE_68(0L), __SQL_SUM_AGGREGATE_69(0L), __SQL_SUM_AGGREGATE_70(0L), __SQL_SUM_AGGREGATE_71(0L), __SQL_SUM_AGGREGATE_72(0L), __SQL_SUM_AGGREGATE_73(0L), __SQL_SUM_AGGREGATE_74(0L), __SQL_SUM_AGGREGATE_75(0L), __SQL_SUM_AGGREGATE_76(0L), __SQL_SUM_AGGREGATE_77(0L), __SQL_SUM_AGGREGATE_78(0L), __SQL_SUM_AGGREGATE_79(0.0), __SQL_SUM_AGGREGATE_80(0L), __SQL_SUM_AGGREGATE_81(0L), __SQL_SUM_AGGREGATE_82(0L), __SQL_SUM_AGGREGATE_83(0L), __SQL_SUM_AGGREGATE_84(0.0), __SQL_SUM_AGGREGATE_85(0L), __SQL_SUM_AGGREGATE_86(0L), __SQL_SUM_AGGREGATE_87(0.0), __SQL_SUM_AGGREGATE_88(0L), __SQL_SUM_AGGREGATE_89(0.0), __SQL_SUM_AGGREGATE_90(0.0), __SQL_SUM_AGGREGATE_91(0.0), __SQL_SUM_AGGREGATE_92(0.0), __SQL_SUM_AGGREGATE_93(0.0), __SQL_SUM_AGGREGATE_94(0.0), __SQL_SUM_AGGREGATE_95(0.0), __SQL_SUM_AGGREGATE_96(0.0), __SQL_SUM_AGGREGATE_97(0.0), __SQL_SUM_AGGREGATE_98(0.0), __SQL_SUM_AGGREGATE_99(0.0), __SQL_SUM_AGGREGATE_100(0.0), __SQL_SUM_AGGREGATE_101(0.0), __SQL_SUM_AGGREGATE_102(0L), __SQL_SUM_AGGREGATE_103(0L), __SQL_SUM_AGGREGATE_104(0L), __SQL_SUM_AGGREGATE_105(0L), __SQL_SUM_AGGREGATE_106(0L), __SQL_SUM_AGGREGATE_107(0.0), __SQL_SUM_AGGREGATE_108(0L), __SQL_SUM_AGGREGATE_109(0L), __SQL_SUM_AGGREGATE_110(0L), __SQL_SUM_AGGREGATE_111(0L), __SQL_SUM_AGGREGATE_112(0L), __SQL_SUM_AGGREGATE_113(0L), __SQL_SUM_AGGREGATE_114(0L), __SQL_SUM_AGGREGATE_115(0L), __SQL_SUM_AGGREGATE_116(0L), __SQL_SUM_AGGREGATE_117(0L), __SQL_SUM_AGGREGATE_118(0L), __SQL_SUM_AGGREGATE_119(0L), __SQL_SUM_AGGREGATE_120(0.0), __SQL_SUM_AGGREGATE_121(0L), __SQL_SUM_AGGREGATE_122(0L), __SQL_SUM_AGGREGATE_123(0L), __SQL_SUM_AGGREGATE_124(0L), __SQL_SUM_AGGREGATE_125(0.0), __SQL_SUM_AGGREGATE_126(0L), __SQL_SUM_AGGREGATE_127(0.0), __SQL_SUM_AGGREGATE_128(0.0), __SQL_SUM_AGGREGATE_129(0.0), __SQL_SUM_AGGREGATE_130(0.0), __SQL_SUM_AGGREGATE_131(0.0), __SQL_SUM_AGGREGATE_132(0.0), __SQL_SUM_AGGREGATE_133(0.0), __SQL_SUM_AGGREGATE_134(0.0), __SQL_SUM_AGGREGATE_135(0.0), __SQL_SUM_AGGREGATE_136(0.0), __SQL_SUM_AGGREGATE_137(0.0), __SQL_SUM_AGGREGATE_138(0.0), __SQL_SUM_AGGREGATE_139(0.0), __SQL_SUM_AGGREGATE_140(0.0), __SQL_SUM_AGGREGATE_141(0.0), __SQL_SUM_AGGREGATE_142(0.0), __SQL_SUM_AGGREGATE_143(0.0), __SQL_SUM_AGGREGATE_144(0.0), __SQL_SUM_AGGREGATE_145(0.0), __SQL_SUM_AGGREGATE_146(0.0), __SQL_SUM_AGGREGATE_147(0.0), __SQL_SUM_AGGREGATE_148(0.0), __SQL_SUM_AGGREGATE_149(0.0), __SQL_SUM_AGGREGATE_150(0.0), __SQL_SUM_AGGREGATE_151(0.0), __SQL_SUM_AGGREGATE_152(0.0), __SQL_SUM_AGGREGATE_153(0.0), __SQL_SUM_AGGREGATE_154(0.0), __SQL_SUM_AGGREGATE_155(0.0), __SQL_SUM_AGGREGATE_156(0.0), __SQL_SUM_AGGREGATE_157(0.0), __SQL_SUM_AGGREGATE_158(0.0), __SQL_SUM_AGGREGATE_159(0.0), __SQL_SUM_AGGREGATE_160(0.0), __SQL_SUM_AGGREGATE_161(0.0), __SQL_SUM_AGGREGATE_162(0.0), __SQL_SUM_AGGREGATE_163(0.0), __SQL_SUM_AGGREGATE_164(0.0), __SQL_SUM_AGGREGATE_165(0.0), __SQL_SUM_AGGREGATE_166(0.0), __SQL_SUM_AGGREGATE_167(0L), __SQL_SUM_AGGREGATE_168(0.0), __SQL_SUM_AGGREGATE_169(0.0), __SQL_SUM_AGGREGATE_170(0.0), __SQL_SUM_AGGREGATE_171(0.0), __SQL_SUM_AGGREGATE_172(0.0), __SQL_SUM_AGGREGATE_173(0.0), __SQL_SUM_AGGREGATE_174(0.0), __SQL_SUM_AGGREGATE_175(0.0), __SQL_SUM_AGGREGATE_176(0.0), __SQL_SUM_AGGREGATE_177(0.0), __SQL_SUM_AGGREGATE_178(0.0), __SQL_SUM_AGGREGATE_179(0.0), __SQL_SUM_AGGREGATE_180(0.0), __SQL_SUM_AGGREGATE_181(0L), __SQL_SUM_AGGREGATE_182(0L), __SQL_SUM_AGGREGATE_183(0L), __SQL_SUM_AGGREGATE_184(0L), __SQL_SUM_AGGREGATE_185(0L), __SQL_SUM_AGGREGATE_186(0.0), __SQL_SUM_AGGREGATE_187(0L), __SQL_SUM_AGGREGATE_188(0L), __SQL_SUM_AGGREGATE_189(0L), __SQL_SUM_AGGREGATE_190(0L), __SQL_SUM_AGGREGATE_191(0L), __SQL_SUM_AGGREGATE_192(0L), __SQL_SUM_AGGREGATE_193(0L), __SQL_SUM_AGGREGATE_194(0L), __SQL_SUM_AGGREGATE_195(0L), __SQL_SUM_AGGREGATE_196(0L), __SQL_SUM_AGGREGATE_197(0L), __SQL_SUM_AGGREGATE_198(0L), __SQL_SUM_AGGREGATE_199(0.0), __SQL_SUM_AGGREGATE_200(0L), __SQL_SUM_AGGREGATE_201(0L), __SQL_SUM_AGGREGATE_202(0L), __SQL_SUM_AGGREGATE_203(0L), __SQL_SUM_AGGREGATE_204(0.0), __SQL_SUM_AGGREGATE_205(0L), __SQL_SUM_AGGREGATE_206(0.0), __SQL_SUM_AGGREGATE_207(0.0), __SQL_SUM_AGGREGATE_208(0.0), __SQL_SUM_AGGREGATE_209(0.0), __SQL_SUM_AGGREGATE_210(0.0), __SQL_SUM_AGGREGATE_211(0.0), __SQL_SUM_AGGREGATE_212(0.0), __SQL_SUM_AGGREGATE_213(0.0), __SQL_SUM_AGGREGATE_214(0.0), __SQL_SUM_AGGREGATE_215(0.0), __SQL_SUM_AGGREGATE_216(0.0), __SQL_SUM_AGGREGATE_217(0.0), __SQL_SUM_AGGREGATE_218(0.0), __SQL_SUM_AGGREGATE_219(0.0), __SQL_SUM_AGGREGATE_220(0.0), __SQL_SUM_AGGREGATE_221(0.0), __SQL_SUM_AGGREGATE_222(0.0), __SQL_SUM_AGGREGATE_223(0.0), __SQL_SUM_AGGREGATE_224(0.0), __SQL_SUM_AGGREGATE_225(0.0), __SQL_SUM_AGGREGATE_226(0.0), __SQL_SUM_AGGREGATE_227(0.0), __SQL_SUM_AGGREGATE_228(0.0), __SQL_SUM_AGGREGATE_229(0.0), __SQL_SUM_AGGREGATE_230(0.0), __SQL_SUM_AGGREGATE_231(0.0), __SQL_SUM_AGGREGATE_232(0.0), __SQL_SUM_AGGREGATE_233(0.0), __SQL_SUM_AGGREGATE_234(0.0), __SQL_SUM_AGGREGATE_235(0.0), __SQL_SUM_AGGREGATE_236(0.0), __SQL_SUM_AGGREGATE_237(0.0), __SQL_SUM_AGGREGATE_238(0.0), __SQL_SUM_AGGREGATE_239(0.0), __SQL_SUM_AGGREGATE_240(0.0), __SQL_SUM_AGGREGATE_241(0.0), __SQL_SUM_AGGREGATE_242(0.0), __SQL_SUM_AGGREGATE_243(0.0), __SQL_SUM_AGGREGATE_244(0.0), __SQL_SUM_AGGREGATE_245(0.0), __SQL_SUM_AGGREGATE_246(0.0), __SQL_SUM_AGGREGATE_247(0.0), __SQL_SUM_AGGREGATE_248(0.0), __SQL_SUM_AGGREGATE_249(0.0), __SQL_SUM_AGGREGATE_250(0.0), __SQL_SUM_AGGREGATE_251(0.0), __SQL_SUM_AGGREGATE_252(0.0), __SQL_SUM_AGGREGATE_253(0.0), __SQL_SUM_AGGREGATE_254(0.0), __SQL_SUM_AGGREGATE_255(0.0), __SQL_SUM_AGGREGATE_256(0.0), __SQL_SUM_AGGREGATE_257(0.0), __SQL_SUM_AGGREGATE_258(0.0), __SQL_SUM_AGGREGATE_259(0.0), __SQL_SUM_AGGREGATE_260(0.0), __SQL_SUM_AGGREGATE_261(0.0), __SQL_SUM_AGGREGATE_262(0.0), __SQL_SUM_AGGREGATE_263(0.0), __SQL_SUM_AGGREGATE_264(0.0), __SQL_SUM_AGGREGATE_265(0.0), __SQL_SUM_AGGREGATE_266(0.0), __SQL_SUM_AGGREGATE_267(0.0), __SQL_SUM_AGGREGATE_268(0.0), __SQL_SUM_AGGREGATE_269(0.0), __SQL_SUM_AGGREGATE_270(0.0), __SQL_SUM_AGGREGATE_271(0.0), __SQL_SUM_AGGREGATE_272(0.0), __SQL_SUM_AGGREGATE_273(0.0), __SQL_SUM_AGGREGATE_274(0.0), __SQL_SUM_AGGREGATE_275(0.0), __SQL_SUM_AGGREGATE_276(0.0), __SQL_SUM_AGGREGATE_277(0.0), __SQL_SUM_AGGREGATE_278(0.0), __SQL_SUM_AGGREGATE_279(0.0), __SQL_SUM_AGGREGATE_280(0.0), __SQL_SUM_AGGREGATE_281(0.0), __SQL_SUM_AGGREGATE_282(0.0), __SQL_SUM_AGGREGATE_283(0.0), __SQL_SUM_AGGREGATE_284(0.0), __SQL_SUM_AGGREGATE_285(0.0), __SQL_SUM_AGGREGATE_286(0.0), __SQL_SUM_AGGREGATE_287(0.0), __SQL_SUM_AGGREGATE_288(0.0), __SQL_SUM_AGGREGATE_289(0.0), __SQL_SUM_AGGREGATE_290(0.0), __SQL_SUM_AGGREGATE_291(0.0), __SQL_SUM_AGGREGATE_292(0.0), __SQL_SUM_AGGREGATE_293(0.0), __SQL_SUM_AGGREGATE_294(0.0), __SQL_SUM_AGGREGATE_295(0.0), __SQL_SUM_AGGREGATE_296(0.0), __SQL_SUM_AGGREGATE_297(0.0), __SQL_SUM_AGGREGATE_298(0.0), __SQL_SUM_AGGREGATE_299(0.0), __SQL_SUM_AGGREGATE_300(0.0), __SQL_SUM_AGGREGATE_301(0.0), __SQL_SUM_AGGREGATE_302(0.0), __SQL_SUM_AGGREGATE_303(0.0), __SQL_SUM_AGGREGATE_304(0.0), __SQL_SUM_AGGREGATE_305(0.0), __SQL_SUM_AGGREGATE_306(0.0), __SQL_SUM_AGGREGATE_307(0.0), __SQL_SUM_AGGREGATE_308(0.0), __SQL_SUM_AGGREGATE_309(0.0), __SQL_SUM_AGGREGATE_310(0.0), __SQL_SUM_AGGREGATE_311(0.0), __SQL_SUM_AGGREGATE_312(0.0), __SQL_SUM_AGGREGATE_313(0.0), __SQL_SUM_AGGREGATE_314(0.0), __SQL_SUM_AGGREGATE_315(0.0), __SQL_SUM_AGGREGATE_316(0.0), __SQL_SUM_AGGREGATE_317(0.0), __SQL_SUM_AGGREGATE_318(0.0), __SQL_SUM_AGGREGATE_319(0.0), __SQL_SUM_AGGREGATE_320(0.0), __SQL_SUM_AGGREGATE_321(0.0), __SQL_SUM_AGGREGATE_322(0.0), __SQL_SUM_AGGREGATE_323(0.0), __SQL_SUM_AGGREGATE_324(0.0), __SQL_SUM_AGGREGATE_325(0.0), __SQL_SUM_AGGREGATE_326(0.0), __SQL_SUM_AGGREGATE_327(0.0), __SQL_SUM_AGGREGATE_328(0.0), __SQL_SUM_AGGREGATE_329(0.0), __SQL_SUM_AGGREGATE_330(0.0), __SQL_SUM_AGGREGATE_331(0.0), __SQL_SUM_AGGREGATE_332(0.0), __SQL_SUM_AGGREGATE_333(0.0), __SQL_SUM_AGGREGATE_334(0.0), __SQL_SUM_AGGREGATE_335(0.0), __SQL_SUM_AGGREGATE_336(0.0), __SQL_SUM_AGGREGATE_337(0.0), __SQL_SUM_AGGREGATE_338(0.0), __SQL_SUM_AGGREGATE_339(0.0), __SQL_SUM_AGGREGATE_340(0.0), __SQL_SUM_AGGREGATE_341(0.0), __SQL_SUM_AGGREGATE_342(0.0), __SQL_SUM_AGGREGATE_343(0.0), __SQL_SUM_AGGREGATE_344(0.0), __SQL_SUM_AGGREGATE_345(0.0), __SQL_SUM_AGGREGATE_346(0.0), __SQL_SUM_AGGREGATE_347(0.0), __SQL_SUM_AGGREGATE_348(0.0), __SQL_SUM_AGGREGATE_349(0.0), __SQL_SUM_AGGREGATE_350(0.0), __SQL_SUM_AGGREGATE_351(0.0), __SQL_SUM_AGGREGATE_352(0.0), __SQL_SUM_AGGREGATE_353(0.0), __SQL_SUM_AGGREGATE_354(0.0), __SQL_SUM_AGGREGATE_355(0.0), __SQL_SUM_AGGREGATE_356(0.0), __SQL_SUM_AGGREGATE_357(0.0), __SQL_SUM_AGGREGATE_358(0.0), __SQL_SUM_AGGREGATE_359(0.0), __SQL_SUM_AGGREGATE_360(0.0), __SQL_SUM_AGGREGATE_361(0.0), __SQL_SUM_AGGREGATE_362(0.0), __SQL_SUM_AGGREGATE_363(0.0), __SQL_SUM_AGGREGATE_364(0.0), __SQL_SUM_AGGREGATE_365(0.0), __SQL_SUM_AGGREGATE_366(0.0), __SQL_SUM_AGGREGATE_367(0.0), __SQL_SUM_AGGREGATE_368(0.0), __SQL_SUM_AGGREGATE_369(0.0), __SQL_SUM_AGGREGATE_370(0.0), __SQL_SUM_AGGREGATE_371(0.0), __SQL_SUM_AGGREGATE_372(0.0), __SQL_SUM_AGGREGATE_373(0.0), __SQL_SUM_AGGREGATE_374(0.0), __SQL_SUM_AGGREGATE_375(0.0), __SQL_SUM_AGGREGATE_376(0.0), __SQL_SUM_AGGREGATE_377(0.0), __SQL_SUM_AGGREGATE_378(0.0), __SQL_SUM_AGGREGATE_379(0.0), __SQL_SUM_AGGREGATE_380(0.0), __SQL_SUM_AGGREGATE_381(0.0), __SQL_SUM_AGGREGATE_382(0.0), __SQL_SUM_AGGREGATE_383(0.0), __SQL_SUM_AGGREGATE_384(0.0), __SQL_SUM_AGGREGATE_385(0.0), __SQL_SUM_AGGREGATE_386(0.0), __SQL_SUM_AGGREGATE_387(0.0), __SQL_SUM_AGGREGATE_388(0.0), __SQL_SUM_AGGREGATE_389(0.0), __SQL_SUM_AGGREGATE_390(0.0), __SQL_SUM_AGGREGATE_391(0.0), __SQL_SUM_AGGREGATE_392(0.0), __SQL_SUM_AGGREGATE_393(0.0), __SQL_SUM_AGGREGATE_394(0.0), __SQL_SUM_AGGREGATE_395(0.0), __SQL_SUM_AGGREGATE_396(0.0), __SQL_SUM_AGGREGATE_397(0.0), __SQL_SUM_AGGREGATE_398(0.0), __SQL_SUM_AGGREGATE_399(0.0), __SQL_SUM_AGGREGATE_400(0.0), __SQL_SUM_AGGREGATE_401(0.0), __SQL_SUM_AGGREGATE_402(0.0), __SQL_SUM_AGGREGATE_403(0.0), __SQL_SUM_AGGREGATE_404(0.0), __SQL_SUM_AGGREGATE_405(0.0), __SQL_SUM_AGGREGATE_406(0.0), __SQL_SUM_AGGREGATE_407(0.0), __SQL_SUM_AGGREGATE_408(0.0), __SQL_SUM_AGGREGATE_409(0.0), __SQL_SUM_AGGREGATE_410(0.0), __SQL_SUM_AGGREGATE_411(0.0), __SQL_SUM_AGGREGATE_412(0.0), __SQL_SUM_AGGREGATE_413(0.0), __SQL_SUM_AGGREGATE_414(0.0), __SQL_SUM_AGGREGATE_415(0.0), __SQL_SUM_AGGREGATE_416(0.0), __SQL_SUM_AGGREGATE_417(0.0), __SQL_SUM_AGGREGATE_418(0.0), __SQL_SUM_AGGREGATE_419(0.0), __SQL_SUM_AGGREGATE_420(0.0), __SQL_SUM_AGGREGATE_421(0.0), __SQL_SUM_AGGREGATE_422(0.0), __SQL_SUM_AGGREGATE_423(0.0), __SQL_SUM_AGGREGATE_424(0.0), __SQL_SUM_AGGREGATE_425(0.0), __SQL_SUM_AGGREGATE_426(0.0), __SQL_SUM_AGGREGATE_427(0.0), __SQL_SUM_AGGREGATE_428(0.0), __SQL_SUM_AGGREGATE_429(0.0), __SQL_SUM_AGGREGATE_430(0.0), __SQL_SUM_AGGREGATE_431(0.0), __SQL_SUM_AGGREGATE_432(0.0), __SQL_SUM_AGGREGATE_433(0.0), __SQL_SUM_AGGREGATE_434(0.0), __SQL_SUM_AGGREGATE_435(0.0), __SQL_SUM_AGGREGATE_436(0.0), __SQL_SUM_AGGREGATE_437(0.0), __SQL_SUM_AGGREGATE_438(0.0), __SQL_SUM_AGGREGATE_439(0.0), __SQL_SUM_AGGREGATE_440(0.0), __SQL_SUM_AGGREGATE_441(0.0), __SQL_SUM_AGGREGATE_442(0.0), __SQL_SUM_AGGREGATE_443(0.0), __SQL_SUM_AGGREGATE_444(0.0), __SQL_SUM_AGGREGATE_445(0.0), __SQL_SUM_AGGREGATE_446(0.0), __SQL_SUM_AGGREGATE_447(0.0), __SQL_SUM_AGGREGATE_448(0.0), __SQL_SUM_AGGREGATE_449(0.0), __SQL_SUM_AGGREGATE_450(0.0), __SQL_SUM_AGGREGATE_451(0.0), __SQL_SUM_AGGREGATE_452(0.0), __SQL_SUM_AGGREGATE_453(0.0), __SQL_SUM_AGGREGATE_454(0.0), __SQL_SUM_AGGREGATE_455(0.0), __SQL_SUM_AGGREGATE_456(0.0), __SQL_SUM_AGGREGATE_457(0.0), __SQL_SUM_AGGREGATE_458(0.0), __SQL_SUM_AGGREGATE_459(0.0), __SQL_SUM_AGGREGATE_460(0.0), __SQL_SUM_AGGREGATE_461(0.0), __SQL_SUM_AGGREGATE_462(0.0), __SQL_SUM_AGGREGATE_463(0.0), __SQL_SUM_AGGREGATE_464(0.0), __SQL_SUM_AGGREGATE_465(0.0), __SQL_SUM_AGGREGATE_466(0.0), __SQL_SUM_AGGREGATE_467(0.0), __SQL_SUM_AGGREGATE_468(0.0), __SQL_SUM_AGGREGATE_469(0.0), __SQL_SUM_AGGREGATE_470(0.0), __SQL_SUM_AGGREGATE_471(0.0), __SQL_SUM_AGGREGATE_472(0.0), __SQL_SUM_AGGREGATE_473(0.0), __SQL_SUM_AGGREGATE_474(0.0), __SQL_SUM_AGGREGATE_475(0.0), __SQL_SUM_AGGREGATE_476(0.0), __SQL_SUM_AGGREGATE_477(0.0), __SQL_SUM_AGGREGATE_478(0.0), __SQL_SUM_AGGREGATE_479(0.0), __SQL_SUM_AGGREGATE_480(0.0), __SQL_SUM_AGGREGATE_481(0.0), __SQL_SUM_AGGREGATE_482(0.0), __SQL_SUM_AGGREGATE_483(0.0), __SQL_SUM_AGGREGATE_484(0.0), __SQL_SUM_AGGREGATE_485(0.0), __SQL_SUM_AGGREGATE_486(0.0), __SQL_SUM_AGGREGATE_487(0.0), __SQL_SUM_AGGREGATE_488(0.0), __SQL_SUM_AGGREGATE_489(0.0), __SQL_SUM_AGGREGATE_490(0.0), __SQL_SUM_AGGREGATE_491(0.0), __SQL_SUM_AGGREGATE_492(0.0), __SQL_SUM_AGGREGATE_493(0.0), __SQL_SUM_AGGREGATE_494(0.0), __SQL_SUM_AGGREGATE_495(0.0), __SQL_SUM_AGGREGATE_496(0.0), __SQL_SUM_AGGREGATE_497(0.0), __SQL_SUM_AGGREGATE_498(0.0), __SQL_SUM_AGGREGATE_499(0.0), __SQL_SUM_AGGREGATE_500(0.0), __SQL_SUM_AGGREGATE_501(0.0), __SQL_SUM_AGGREGATE_502(0.0), __SQL_SUM_AGGREGATE_503(0.0), __SQL_SUM_AGGREGATE_504(0.0), __SQL_SUM_AGGREGATE_505(0.0), __SQL_SUM_AGGREGATE_506(0.0), __SQL_SUM_AGGREGATE_507(0.0), __SQL_SUM_AGGREGATE_508(0.0), __SQL_SUM_AGGREGATE_509(0.0), __SQL_SUM_AGGREGATE_510(0.0), __SQL_SUM_AGGREGATE_511(0.0), __SQL_SUM_AGGREGATE_512(0.0), __SQL_SUM_AGGREGATE_513(0.0), __SQL_SUM_AGGREGATE_514(0.0), __SQL_SUM_AGGREGATE_515(0.0), __SQL_SUM_AGGREGATE_516(0.0), __SQL_SUM_AGGREGATE_517(0.0), __SQL_SUM_AGGREGATE_518(0.0), __SQL_SUM_AGGREGATE_519(0.0), __SQL_SUM_AGGREGATE_520(0.0), __SQL_SUM_AGGREGATE_521(0.0), __SQL_SUM_AGGREGATE_522(0.0), __SQL_SUM_AGGREGATE_523(0.0), __SQL_SUM_AGGREGATE_524(0.0), __SQL_SUM_AGGREGATE_525(0.0), __SQL_SUM_AGGREGATE_526(0.0), __SQL_SUM_AGGREGATE_527(0.0), __SQL_SUM_AGGREGATE_528(0.0), __SQL_SUM_AGGREGATE_529(0.0), __SQL_SUM_AGGREGATE_530(0.0), __SQL_SUM_AGGREGATE_531(0.0), __SQL_SUM_AGGREGATE_532(0.0), __SQL_SUM_AGGREGATE_533(0.0), __SQL_SUM_AGGREGATE_534(0.0), __SQL_SUM_AGGREGATE_535(0.0), __SQL_SUM_AGGREGATE_536(0.0), __SQL_SUM_AGGREGATE_537(0.0), __SQL_SUM_AGGREGATE_538(0.0), __SQL_SUM_AGGREGATE_539(0.0), __SQL_SUM_AGGREGATE_540(0.0), __SQL_SUM_AGGREGATE_541(0.0), __SQL_SUM_AGGREGATE_542(0.0), __SQL_SUM_AGGREGATE_543(0.0), __SQL_SUM_AGGREGATE_544(0.0), __SQL_SUM_AGGREGATE_545(0.0), __SQL_SUM_AGGREGATE_546(0.0), __SQL_SUM_AGGREGATE_547(0.0), __SQL_SUM_AGGREGATE_548(0.0), __SQL_SUM_AGGREGATE_549(0.0), __SQL_SUM_AGGREGATE_550(0.0), __SQL_SUM_AGGREGATE_551(0.0), __SQL_SUM_AGGREGATE_552(0.0), __SQL_SUM_AGGREGATE_553(0.0), __SQL_SUM_AGGREGATE_554(0.0), __SQL_SUM_AGGREGATE_555(0.0), __SQL_SUM_AGGREGATE_556(0.0), __SQL_SUM_AGGREGATE_557(0.0), __SQL_SUM_AGGREGATE_558(0.0), __SQL_SUM_AGGREGATE_559(0.0), __SQL_SUM_AGGREGATE_560(0.0), __SQL_SUM_AGGREGATE_561(0.0), __SQL_SUM_AGGREGATE_562(0.0), __SQL_SUM_AGGREGATE_563(0.0), __SQL_SUM_AGGREGATE_564(0.0), __SQL_SUM_AGGREGATE_565(0.0), __SQL_SUM_AGGREGATE_566(0.0), __SQL_SUM_AGGREGATE_567(0.0), __SQL_SUM_AGGREGATE_568(0.0), __SQL_SUM_AGGREGATE_569(0.0), __SQL_SUM_AGGREGATE_570(0.0), __SQL_SUM_AGGREGATE_571(0.0), __SQL_SUM_AGGREGATE_572(0.0), __SQL_SUM_AGGREGATE_573(0.0), __SQL_SUM_AGGREGATE_574(0.0), __SQL_SUM_AGGREGATE_575(0.0), __SQL_SUM_AGGREGATE_576(0.0), __SQL_SUM_AGGREGATE_577(0.0), __SQL_SUM_AGGREGATE_578(0.0), __SQL_SUM_AGGREGATE_579(0.0), __SQL_SUM_AGGREGATE_580(0.0), __SQL_SUM_AGGREGATE_581(0.0), __SQL_SUM_AGGREGATE_582(0.0), __SQL_SUM_AGGREGATE_583(0.0), __SQL_SUM_AGGREGATE_584(0.0), __SQL_SUM_AGGREGATE_585(0.0), __SQL_SUM_AGGREGATE_586(0.0), __SQL_SUM_AGGREGATE_587(0.0), __SQL_SUM_AGGREGATE_588(0.0), __SQL_SUM_AGGREGATE_589(0.0), __SQL_SUM_AGGREGATE_590(0.0), __SQL_SUM_AGGREGATE_591(0.0), __SQL_SUM_AGGREGATE_592(0.0), __SQL_SUM_AGGREGATE_593(0.0), __SQL_SUM_AGGREGATE_594(0.0), __SQL_SUM_AGGREGATE_595(0.0), __SQL_SUM_AGGREGATE_596(0.0), __SQL_SUM_AGGREGATE_597(0.0), __SQL_SUM_AGGREGATE_598(0.0), __SQL_SUM_AGGREGATE_599(0.0), __SQL_SUM_AGGREGATE_600(0.0), __SQL_SUM_AGGREGATE_601(0.0), __SQL_SUM_AGGREGATE_602(0.0), __SQL_SUM_AGGREGATE_603(0.0), __SQL_SUM_AGGREGATE_604(0.0), __SQL_SUM_AGGREGATE_605(0.0), __SQL_SUM_AGGREGATE_606(0.0), __SQL_SUM_AGGREGATE_607(0.0), __SQL_SUM_AGGREGATE_608(0.0), __SQL_SUM_AGGREGATE_609(0.0), __SQL_SUM_AGGREGATE_610(0.0), __SQL_SUM_AGGREGATE_611(0.0), __SQL_SUM_AGGREGATE_612(0.0), __SQL_SUM_AGGREGATE_613(0.0), __SQL_SUM_AGGREGATE_614(0.0), __SQL_SUM_AGGREGATE_615(0.0), __SQL_SUM_AGGREGATE_616(0.0), __SQL_SUM_AGGREGATE_617(0.0), __SQL_SUM_AGGREGATE_618(0.0), __SQL_SUM_AGGREGATE_619(0.0), __SQL_SUM_AGGREGATE_620(0.0), __SQL_SUM_AGGREGATE_621(0.0), __SQL_SUM_AGGREGATE_622(0L), __SQL_SUM_AGGREGATE_623(0L), __SQL_SUM_AGGREGATE_624(0L), __SQL_SUM_AGGREGATE_625(0L), __SQL_SUM_AGGREGATE_626(0L), __SQL_SUM_AGGREGATE_627(0.0), __SQL_SUM_AGGREGATE_628(0L), __SQL_SUM_AGGREGATE_629(0L), __SQL_SUM_AGGREGATE_630(0L), __SQL_SUM_AGGREGATE_631(0L), __SQL_SUM_AGGREGATE_632(0L), __SQL_SUM_AGGREGATE_633(0L), __SQL_SUM_AGGREGATE_634(0L), __SQL_SUM_AGGREGATE_635(0L), __SQL_SUM_AGGREGATE_636(0L), __SQL_SUM_AGGREGATE_637(0L), __SQL_SUM_AGGREGATE_638(0L), __SQL_SUM_AGGREGATE_639(0L), __SQL_SUM_AGGREGATE_640(0.0), __SQL_SUM_AGGREGATE_641(0L), __SQL_SUM_AGGREGATE_642(0L), __SQL_SUM_AGGREGATE_643(0L), __SQL_SUM_AGGREGATE_644(0L), __SQL_SUM_AGGREGATE_645(0.0), __SQL_SUM_AGGREGATE_646(0L), __SQL_SUM_AGGREGATE_647(0L), __SQL_SUM_AGGREGATE_648(0L), __SQL_SUM_AGGREGATE_649(0L), __SQL_SUM_AGGREGATE_650(0L), __SQL_SUM_AGGREGATE_651(0.0), __SQL_SUM_AGGREGATE_652(0L), __SQL_SUM_AGGREGATE_653(0L), __SQL_SUM_AGGREGATE_654(0L), __SQL_SUM_AGGREGATE_655(0L), __SQL_SUM_AGGREGATE_656(0L), __SQL_SUM_AGGREGATE_657(0L), __SQL_SUM_AGGREGATE_658(0L), __SQL_SUM_AGGREGATE_659(0L), __SQL_SUM_AGGREGATE_660(0L), __SQL_SUM_AGGREGATE_661(0L), __SQL_SUM_AGGREGATE_662(0L), __SQL_SUM_AGGREGATE_663(0L), __SQL_SUM_AGGREGATE_664(0.0), __SQL_SUM_AGGREGATE_665(0L), __SQL_SUM_AGGREGATE_666(0L), __SQL_SUM_AGGREGATE_667(0L), __SQL_SUM_AGGREGATE_668(0L), __SQL_SUM_AGGREGATE_669(0.0), __SQL_SUM_AGGREGATE_670(0L), __SQL_SUM_AGGREGATE_671(0L), __SQL_SUM_AGGREGATE_672(0L), __SQL_SUM_AGGREGATE_673(0L), __SQL_SUM_AGGREGATE_674(0.0), __SQL_SUM_AGGREGATE_675(0L), __SQL_SUM_AGGREGATE_676(0L), __SQL_SUM_AGGREGATE_677(0L), __SQL_SUM_AGGREGATE_678(0L), __SQL_SUM_AGGREGATE_679(0L), __SQL_SUM_AGGREGATE_680(0L), __SQL_SUM_AGGREGATE_681(0L), __SQL_SUM_AGGREGATE_682(0L), __SQL_SUM_AGGREGATE_683(0L), __SQL_SUM_AGGREGATE_684(0L), __SQL_SUM_AGGREGATE_685(0L), __SQL_SUM_AGGREGATE_686(0L), __SQL_SUM_AGGREGATE_687(0.0), __SQL_SUM_AGGREGATE_688(0L), __SQL_SUM_AGGREGATE_689(0L), __SQL_SUM_AGGREGATE_690(0L), __SQL_SUM_AGGREGATE_691(0L), __SQL_SUM_AGGREGATE_692(0.0), __SQL_SUM_AGGREGATE_693(0L), __SQL_SUM_AGGREGATE_694(0L), __SQL_SUM_AGGREGATE_695(0L), __SQL_SUM_AGGREGATE_696(0.0), __SQL_SUM_AGGREGATE_697(0L), __SQL_SUM_AGGREGATE_698(0L), __SQL_SUM_AGGREGATE_699(0L), __SQL_SUM_AGGREGATE_700(0L), __SQL_SUM_AGGREGATE_701(0L), __SQL_SUM_AGGREGATE_702(0L), __SQL_SUM_AGGREGATE_703(0L), __SQL_SUM_AGGREGATE_704(0L), __SQL_SUM_AGGREGATE_705(0L), __SQL_SUM_AGGREGATE_706(0L), __SQL_SUM_AGGREGATE_707(0L), __SQL_SUM_AGGREGATE_708(0L), __SQL_SUM_AGGREGATE_709(0.0), __SQL_SUM_AGGREGATE_710(0L), __SQL_SUM_AGGREGATE_711(0L), __SQL_SUM_AGGREGATE_712(0L), __SQL_SUM_AGGREGATE_713(0L), __SQL_SUM_AGGREGATE_714(0.0), __SQL_SUM_AGGREGATE_715(0L), __SQL_SUM_AGGREGATE_716(0L), __SQL_SUM_AGGREGATE_717(0.0), __SQL_SUM_AGGREGATE_718(0L), __SQL_SUM_AGGREGATE_719(0L), __SQL_SUM_AGGREGATE_720(0L), __SQL_SUM_AGGREGATE_721(0L), __SQL_SUM_AGGREGATE_722(0L), __SQL_SUM_AGGREGATE_723(0L), __SQL_SUM_AGGREGATE_724(0L), __SQL_SUM_AGGREGATE_725(0L), __SQL_SUM_AGGREGATE_726(0L), __SQL_SUM_AGGREGATE_727(0L), __SQL_SUM_AGGREGATE_728(0L), __SQL_SUM_AGGREGATE_729(0L), __SQL_SUM_AGGREGATE_730(0.0), __SQL_SUM_AGGREGATE_731(0L), __SQL_SUM_AGGREGATE_732(0L), __SQL_SUM_AGGREGATE_733(0L), __SQL_SUM_AGGREGATE_734(0L), __SQL_SUM_AGGREGATE_735(0.0), __SQL_SUM_AGGREGATE_736(0L), __SQL_SUM_AGGREGATE_737(0.0), __SQL_SUM_AGGREGATE_738(0.0), __SQL_SUM_AGGREGATE_739(0.0), __SQL_SUM_AGGREGATE_740(0.0), __SQL_SUM_AGGREGATE_741(0.0), __SQL_SUM_AGGREGATE_742(0.0), __SQL_SUM_AGGREGATE_743(0.0), __SQL_SUM_AGGREGATE_744(0.0), __SQL_SUM_AGGREGATE_745(0.0), __SQL_SUM_AGGREGATE_746(0.0), __SQL_SUM_AGGREGATE_747(0.0), __SQL_SUM_AGGREGATE_748(0.0), __SQL_SUM_AGGREGATE_749(0.0), __SQL_SUM_AGGREGATE_750(0.0), __SQL_SUM_AGGREGATE_751(0.0), __SQL_SUM_AGGREGATE_752(0.0), __SQL_SUM_AGGREGATE_753(0.0), __SQL_SUM_AGGREGATE_754(0.0), __SQL_SUM_AGGREGATE_755(0.0), __SQL_SUM_AGGREGATE_756(0.0), __SQL_SUM_AGGREGATE_757(0L), __SQL_SUM_AGGREGATE_758(0L), __SQL_SUM_AGGREGATE_759(0L), __SQL_SUM_AGGREGATE_760(0L), __SQL_SUM_AGGREGATE_761(0L), __SQL_SUM_AGGREGATE_762(0L), __SQL_SUM_AGGREGATE_763(0L), __SQL_SUM_AGGREGATE_764(0L), __SQL_SUM_AGGREGATE_765(0L), __SQL_SUM_AGGREGATE_766(0L), __SQL_SUM_AGGREGATE_767(0L), __SQL_SUM_AGGREGATE_768(0L), __SQL_SUM_AGGREGATE_769(0.0), __SQL_SUM_AGGREGATE_770(0L), __SQL_SUM_AGGREGATE_771(0L), __SQL_SUM_AGGREGATE_772(0L), __SQL_SUM_AGGREGATE_773(0L), __SQL_SUM_AGGREGATE_774(0.0), __SQL_SUM_AGGREGATE_775(0L), __SQL_SUM_AGGREGATE_776(0L), __SQL_SUM_AGGREGATE_777(0L), __SQL_SUM_AGGREGATE_778(0L), __SQL_SUM_AGGREGATE_779(0L), __SQL_SUM_AGGREGATE_780(0L), __SQL_SUM_AGGREGATE_781(0L), __SQL_SUM_AGGREGATE_782(0L), __SQL_SUM_AGGREGATE_783(0L), __SQL_SUM_AGGREGATE_784(0L), __SQL_SUM_AGGREGATE_785(0L), __SQL_SUM_AGGREGATE_786(0L), __SQL_SUM_AGGREGATE_787(0.0), __SQL_SUM_AGGREGATE_788(0L), __SQL_SUM_AGGREGATE_789(0L), __SQL_SUM_AGGREGATE_790(0L), __SQL_SUM_AGGREGATE_791(0L), __SQL_SUM_AGGREGATE_792(0.0), __SQL_SUM_AGGREGATE_793(0L), __SQL_SUM_AGGREGATE_794(0L), __SQL_SUM_AGGREGATE_795(0L), __SQL_SUM_AGGREGATE_796(0L), __SQL_SUM_AGGREGATE_797(0L), __SQL_SUM_AGGREGATE_798(0L), __SQL_SUM_AGGREGATE_799(0L), __SQL_SUM_AGGREGATE_800(0L), __SQL_SUM_AGGREGATE_801(0L), __SQL_SUM_AGGREGATE_802(0L), __SQL_SUM_AGGREGATE_803(0L), __SQL_SUM_AGGREGATE_804(0.0), __SQL_SUM_AGGREGATE_805(0L), __SQL_SUM_AGGREGATE_806(0L), __SQL_SUM_AGGREGATE_807(0L), __SQL_SUM_AGGREGATE_808(0L), __SQL_SUM_AGGREGATE_809(0.0), __SQL_SUM_AGGREGATE_810(0L), __SQL_SUM_AGGREGATE_811(0L), __SQL_SUM_AGGREGATE_812(0L), __SQL_SUM_AGGREGATE_813(0L), __SQL_SUM_AGGREGATE_814(0L), __SQL_SUM_AGGREGATE_815(0L), __SQL_SUM_AGGREGATE_816(0L), __SQL_SUM_AGGREGATE_817(0L), __SQL_SUM_AGGREGATE_818(0L), __SQL_SUM_AGGREGATE_819(0L), __SQL_SUM_AGGREGATE_820(0.0), __SQL_SUM_AGGREGATE_821(0L), __SQL_SUM_AGGREGATE_822(0L), __SQL_SUM_AGGREGATE_823(0L), __SQL_SUM_AGGREGATE_824(0L), __SQL_SUM_AGGREGATE_825(0.0), __SQL_SUM_AGGREGATE_826(0L), __SQL_SUM_AGGREGATE_827(0L), __SQL_SUM_AGGREGATE_828(0L), __SQL_SUM_AGGREGATE_829(0L), __SQL_SUM_AGGREGATE_830(0L), __SQL_SUM_AGGREGATE_831(0L), __SQL_SUM_AGGREGATE_832(0L), __SQL_SUM_AGGREGATE_833(0L), __SQL_SUM_AGGREGATE_834(0L), __SQL_SUM_AGGREGATE_835(0.0), __SQL_SUM_AGGREGATE_836(0L), __SQL_SUM_AGGREGATE_837(0L), __SQL_SUM_AGGREGATE_838(0L), __SQL_SUM_AGGREGATE_839(0L), __SQL_SUM_AGGREGATE_840(0.0), __SQL_SUM_AGGREGATE_841(0L), __SQL_SUM_AGGREGATE_842(0L), __SQL_SUM_AGGREGATE_843(0L), __SQL_SUM_AGGREGATE_844(0L), __SQL_SUM_AGGREGATE_845(0L), __SQL_SUM_AGGREGATE_846(0L), __SQL_SUM_AGGREGATE_847(0L), __SQL_SUM_AGGREGATE_848(0L), __SQL_SUM_AGGREGATE_849(0.0), __SQL_SUM_AGGREGATE_850(0L), __SQL_SUM_AGGREGATE_851(0L), __SQL_SUM_AGGREGATE_852(0L), __SQL_SUM_AGGREGATE_853(0L), __SQL_SUM_AGGREGATE_854(0.0), __SQL_SUM_AGGREGATE_855(0L), __SQL_SUM_AGGREGATE_856(0L), __SQL_SUM_AGGREGATE_857(0L), __SQL_SUM_AGGREGATE_858(0L), __SQL_SUM_AGGREGATE_859(0L), __SQL_SUM_AGGREGATE_860(0L), __SQL_SUM_AGGREGATE_861(0L), __SQL_SUM_AGGREGATE_862(0.0), __SQL_SUM_AGGREGATE_863(0L), __SQL_SUM_AGGREGATE_864(0L), __SQL_SUM_AGGREGATE_865(0L), __SQL_SUM_AGGREGATE_866(0L), __SQL_SUM_AGGREGATE_867(0.0), __SQL_SUM_AGGREGATE_868(0L), __SQL_SUM_AGGREGATE_869(0L), __SQL_SUM_AGGREGATE_870(0L), __SQL_SUM_AGGREGATE_871(0L), __SQL_SUM_AGGREGATE_872(0L), __SQL_SUM_AGGREGATE_873(0L), __SQL_SUM_AGGREGATE_874(0.0), __SQL_SUM_AGGREGATE_875(0L), __SQL_SUM_AGGREGATE_876(0L), __SQL_SUM_AGGREGATE_877(0L), __SQL_SUM_AGGREGATE_878(0L), __SQL_SUM_AGGREGATE_879(0.0), __SQL_SUM_AGGREGATE_880(0L), __SQL_SUM_AGGREGATE_881(0L), __SQL_SUM_AGGREGATE_882(0L), __SQL_SUM_AGGREGATE_883(0L), __SQL_SUM_AGGREGATE_884(0L), __SQL_SUM_AGGREGATE_885(0.0), __SQL_SUM_AGGREGATE_886(0L), __SQL_SUM_AGGREGATE_887(0L), __SQL_SUM_AGGREGATE_888(0L), __SQL_SUM_AGGREGATE_889(0L), __SQL_SUM_AGGREGATE_890(0.0), __SQL_SUM_AGGREGATE_891(0L), __SQL_SUM_AGGREGATE_892(0L), __SQL_SUM_AGGREGATE_893(0L), __SQL_SUM_AGGREGATE_894(0L), __SQL_SUM_AGGREGATE_895(0.0), __SQL_SUM_AGGREGATE_896(0L), __SQL_SUM_AGGREGATE_897(0L), __SQL_SUM_AGGREGATE_898(0L), __SQL_SUM_AGGREGATE_899(0L), __SQL_SUM_AGGREGATE_900(0.0), __SQL_SUM_AGGREGATE_901(0L), __SQL_SUM_AGGREGATE_902(0L), __SQL_SUM_AGGREGATE_903(0L), __SQL_SUM_AGGREGATE_904(0.0), __SQL_SUM_AGGREGATE_905(0L), __SQL_SUM_AGGREGATE_906(0L), __SQL_SUM_AGGREGATE_907(0L), __SQL_SUM_AGGREGATE_908(0L), __SQL_SUM_AGGREGATE_909(0.0), __SQL_SUM_AGGREGATE_910(0L), __SQL_SUM_AGGREGATE_911(0L), __SQL_SUM_AGGREGATE_912(0.0), __SQL_SUM_AGGREGATE_913(0L), __SQL_SUM_AGGREGATE_914(0L), __SQL_SUM_AGGREGATE_915(0L), __SQL_SUM_AGGREGATE_916(0L), __SQL_SUM_AGGREGATE_917(0.0), __SQL_SUM_AGGREGATE_918(0L), __SQL_SUM_AGGREGATE_919(0.0), __SQL_SUM_AGGREGATE_920(0.0), __SQL_SUM_AGGREGATE_921(0.0), __SQL_SUM_AGGREGATE_922(0.0), __SQL_SUM_AGGREGATE_923(0.0), __SQL_SUM_AGGREGATE_924(0.0), __SQL_SUM_AGGREGATE_925(0.0), __SQL_SUM_AGGREGATE_926(0L), __SQL_SUM_AGGREGATE_927(0L), __SQL_SUM_AGGREGATE_928(0L), __SQL_SUM_AGGREGATE_929(0L), __SQL_SUM_AGGREGATE_930(0.0), __SQL_SUM_AGGREGATE_931(0L), __SQL_SUM_AGGREGATE_932(0L), __SQL_SUM_AGGREGATE_933(0L), __SQL_SUM_AGGREGATE_934(0L), __SQL_SUM_AGGREGATE_935(0.0), __SQL_SUM_AGGREGATE_936(0L), __SQL_SUM_AGGREGATE_937(0L), __SQL_SUM_AGGREGATE_938(0L), __SQL_SUM_AGGREGATE_939(0.0), __SQL_SUM_AGGREGATE_940(0L), __SQL_SUM_AGGREGATE_941(0L), __SQL_SUM_AGGREGATE_942(0.0), __SQL_SUM_AGGREGATE_943(0L), __SQL_SUM_AGGREGATE_944(0.0), __SQL_SUM_AGGREGATE_945(0.0), __SQL_SUM_AGGREGATE_946(0L) { gettimeofday(&t0, NULL); }
  
    /* Serialization Code */
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const {
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_1 = get___SQL_SUM_AGGREGATE_1();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_1), ___SQL_SUM_AGGREGATE_1, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_2 = get___SQL_SUM_AGGREGATE_2();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_2), ___SQL_SUM_AGGREGATE_2, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_3 = get___SQL_SUM_AGGREGATE_3();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_3), ___SQL_SUM_AGGREGATE_3, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_4 = get___SQL_SUM_AGGREGATE_4();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_4), ___SQL_SUM_AGGREGATE_4, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_5 = get___SQL_SUM_AGGREGATE_5();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_5), ___SQL_SUM_AGGREGATE_5, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_6 = get___SQL_SUM_AGGREGATE_6();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_6), ___SQL_SUM_AGGREGATE_6, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_7 = get___SQL_SUM_AGGREGATE_7();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_7), ___SQL_SUM_AGGREGATE_7, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_8 = get___SQL_SUM_AGGREGATE_8();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_8), ___SQL_SUM_AGGREGATE_8, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_9 = get___SQL_SUM_AGGREGATE_9();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_9), ___SQL_SUM_AGGREGATE_9, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_10 = get___SQL_SUM_AGGREGATE_10();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_10), ___SQL_SUM_AGGREGATE_10, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_11 = get___SQL_SUM_AGGREGATE_11();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_11), ___SQL_SUM_AGGREGATE_11, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_12 = get___SQL_SUM_AGGREGATE_12();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_12), ___SQL_SUM_AGGREGATE_12, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_13 = get___SQL_SUM_AGGREGATE_13();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_13), ___SQL_SUM_AGGREGATE_13, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_14 = get___SQL_SUM_AGGREGATE_14();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_14), ___SQL_SUM_AGGREGATE_14, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_15 = get___SQL_SUM_AGGREGATE_15();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_15), ___SQL_SUM_AGGREGATE_15, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_16 = get___SQL_SUM_AGGREGATE_16();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_16), ___SQL_SUM_AGGREGATE_16, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_17 = get___SQL_SUM_AGGREGATE_17();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_17), ___SQL_SUM_AGGREGATE_17, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_18 = get___SQL_SUM_AGGREGATE_18();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_18), ___SQL_SUM_AGGREGATE_18, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_19 = get___SQL_SUM_AGGREGATE_19();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_19), ___SQL_SUM_AGGREGATE_19, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_20 = get___SQL_SUM_AGGREGATE_20();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_20), ___SQL_SUM_AGGREGATE_20, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_21 = get___SQL_SUM_AGGREGATE_21();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_21), ___SQL_SUM_AGGREGATE_21, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_22 = get___SQL_SUM_AGGREGATE_22();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_22), ___SQL_SUM_AGGREGATE_22, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_23 = get___SQL_SUM_AGGREGATE_23();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_23), ___SQL_SUM_AGGREGATE_23, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_24 = get___SQL_SUM_AGGREGATE_24();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_24), ___SQL_SUM_AGGREGATE_24, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_25 = get___SQL_SUM_AGGREGATE_25();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_25), ___SQL_SUM_AGGREGATE_25, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_26 = get___SQL_SUM_AGGREGATE_26();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_26), ___SQL_SUM_AGGREGATE_26, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_27 = get___SQL_SUM_AGGREGATE_27();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_27), ___SQL_SUM_AGGREGATE_27, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_28 = get___SQL_SUM_AGGREGATE_28();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_28), ___SQL_SUM_AGGREGATE_28, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_29 = get___SQL_SUM_AGGREGATE_29();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_29), ___SQL_SUM_AGGREGATE_29, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_30 = get___SQL_SUM_AGGREGATE_30();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_30), ___SQL_SUM_AGGREGATE_30, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_31 = get___SQL_SUM_AGGREGATE_31();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_31), ___SQL_SUM_AGGREGATE_31, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_32 = get___SQL_SUM_AGGREGATE_32();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_32), ___SQL_SUM_AGGREGATE_32, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_33 = get___SQL_SUM_AGGREGATE_33();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_33), ___SQL_SUM_AGGREGATE_33, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_34 = get___SQL_SUM_AGGREGATE_34();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_34), ___SQL_SUM_AGGREGATE_34, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_35 = get___SQL_SUM_AGGREGATE_35();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_35), ___SQL_SUM_AGGREGATE_35, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_36 = get___SQL_SUM_AGGREGATE_36();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_36), ___SQL_SUM_AGGREGATE_36, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_37 = get___SQL_SUM_AGGREGATE_37();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_37), ___SQL_SUM_AGGREGATE_37, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_38 = get___SQL_SUM_AGGREGATE_38();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_38), ___SQL_SUM_AGGREGATE_38, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_39 = get___SQL_SUM_AGGREGATE_39();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_39), ___SQL_SUM_AGGREGATE_39, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_40 = get___SQL_SUM_AGGREGATE_40();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_40), ___SQL_SUM_AGGREGATE_40, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_41 = get___SQL_SUM_AGGREGATE_41();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_41), ___SQL_SUM_AGGREGATE_41, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_42 = get___SQL_SUM_AGGREGATE_42();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_42), ___SQL_SUM_AGGREGATE_42, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_43 = get___SQL_SUM_AGGREGATE_43();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_43), ___SQL_SUM_AGGREGATE_43, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_44 = get___SQL_SUM_AGGREGATE_44();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_44), ___SQL_SUM_AGGREGATE_44, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_45 = get___SQL_SUM_AGGREGATE_45();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_45), ___SQL_SUM_AGGREGATE_45, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_46 = get___SQL_SUM_AGGREGATE_46();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_46), ___SQL_SUM_AGGREGATE_46, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_47 = get___SQL_SUM_AGGREGATE_47();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_47), ___SQL_SUM_AGGREGATE_47, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_48 = get___SQL_SUM_AGGREGATE_48();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_48), ___SQL_SUM_AGGREGATE_48, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_49 = get___SQL_SUM_AGGREGATE_49();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_49), ___SQL_SUM_AGGREGATE_49, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_50 = get___SQL_SUM_AGGREGATE_50();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_50), ___SQL_SUM_AGGREGATE_50, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_51 = get___SQL_SUM_AGGREGATE_51();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_51), ___SQL_SUM_AGGREGATE_51, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_52 = get___SQL_SUM_AGGREGATE_52();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_52), ___SQL_SUM_AGGREGATE_52, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_53 = get___SQL_SUM_AGGREGATE_53();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_53), ___SQL_SUM_AGGREGATE_53, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_54 = get___SQL_SUM_AGGREGATE_54();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_54), ___SQL_SUM_AGGREGATE_54, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_55 = get___SQL_SUM_AGGREGATE_55();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_55), ___SQL_SUM_AGGREGATE_55, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_56 = get___SQL_SUM_AGGREGATE_56();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_56), ___SQL_SUM_AGGREGATE_56, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_57 = get___SQL_SUM_AGGREGATE_57();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_57), ___SQL_SUM_AGGREGATE_57, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_58 = get___SQL_SUM_AGGREGATE_58();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_58), ___SQL_SUM_AGGREGATE_58, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_59 = get___SQL_SUM_AGGREGATE_59();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_59), ___SQL_SUM_AGGREGATE_59, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_60 = get___SQL_SUM_AGGREGATE_60();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_60), ___SQL_SUM_AGGREGATE_60, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_61 = get___SQL_SUM_AGGREGATE_61();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_61), ___SQL_SUM_AGGREGATE_61, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_62 = get___SQL_SUM_AGGREGATE_62();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_62), ___SQL_SUM_AGGREGATE_62, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_63 = get___SQL_SUM_AGGREGATE_63();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_63), ___SQL_SUM_AGGREGATE_63, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_64 = get___SQL_SUM_AGGREGATE_64();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_64), ___SQL_SUM_AGGREGATE_64, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_65 = get___SQL_SUM_AGGREGATE_65();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_65), ___SQL_SUM_AGGREGATE_65, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_66 = get___SQL_SUM_AGGREGATE_66();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_66), ___SQL_SUM_AGGREGATE_66, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_67 = get___SQL_SUM_AGGREGATE_67();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_67), ___SQL_SUM_AGGREGATE_67, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_68 = get___SQL_SUM_AGGREGATE_68();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_68), ___SQL_SUM_AGGREGATE_68, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_69 = get___SQL_SUM_AGGREGATE_69();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_69), ___SQL_SUM_AGGREGATE_69, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_70 = get___SQL_SUM_AGGREGATE_70();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_70), ___SQL_SUM_AGGREGATE_70, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_71 = get___SQL_SUM_AGGREGATE_71();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_71), ___SQL_SUM_AGGREGATE_71, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_72 = get___SQL_SUM_AGGREGATE_72();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_72), ___SQL_SUM_AGGREGATE_72, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_73 = get___SQL_SUM_AGGREGATE_73();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_73), ___SQL_SUM_AGGREGATE_73, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_74 = get___SQL_SUM_AGGREGATE_74();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_74), ___SQL_SUM_AGGREGATE_74, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_75 = get___SQL_SUM_AGGREGATE_75();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_75), ___SQL_SUM_AGGREGATE_75, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_76 = get___SQL_SUM_AGGREGATE_76();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_76), ___SQL_SUM_AGGREGATE_76, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_77 = get___SQL_SUM_AGGREGATE_77();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_77), ___SQL_SUM_AGGREGATE_77, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_78 = get___SQL_SUM_AGGREGATE_78();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_78), ___SQL_SUM_AGGREGATE_78, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_79 = get___SQL_SUM_AGGREGATE_79();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_79), ___SQL_SUM_AGGREGATE_79, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_80 = get___SQL_SUM_AGGREGATE_80();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_80), ___SQL_SUM_AGGREGATE_80, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_81 = get___SQL_SUM_AGGREGATE_81();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_81), ___SQL_SUM_AGGREGATE_81, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_82 = get___SQL_SUM_AGGREGATE_82();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_82), ___SQL_SUM_AGGREGATE_82, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_83 = get___SQL_SUM_AGGREGATE_83();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_83), ___SQL_SUM_AGGREGATE_83, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_84 = get___SQL_SUM_AGGREGATE_84();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_84), ___SQL_SUM_AGGREGATE_84, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_85 = get___SQL_SUM_AGGREGATE_85();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_85), ___SQL_SUM_AGGREGATE_85, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_86 = get___SQL_SUM_AGGREGATE_86();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_86), ___SQL_SUM_AGGREGATE_86, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_87 = get___SQL_SUM_AGGREGATE_87();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_87), ___SQL_SUM_AGGREGATE_87, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_88 = get___SQL_SUM_AGGREGATE_88();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_88), ___SQL_SUM_AGGREGATE_88, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_89 = get___SQL_SUM_AGGREGATE_89();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_89), ___SQL_SUM_AGGREGATE_89, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_90 = get___SQL_SUM_AGGREGATE_90();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_90), ___SQL_SUM_AGGREGATE_90, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_91 = get___SQL_SUM_AGGREGATE_91();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_91), ___SQL_SUM_AGGREGATE_91, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_92 = get___SQL_SUM_AGGREGATE_92();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_92), ___SQL_SUM_AGGREGATE_92, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_93 = get___SQL_SUM_AGGREGATE_93();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_93), ___SQL_SUM_AGGREGATE_93, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_94 = get___SQL_SUM_AGGREGATE_94();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_94), ___SQL_SUM_AGGREGATE_94, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_95 = get___SQL_SUM_AGGREGATE_95();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_95), ___SQL_SUM_AGGREGATE_95, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_96 = get___SQL_SUM_AGGREGATE_96();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_96), ___SQL_SUM_AGGREGATE_96, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_97 = get___SQL_SUM_AGGREGATE_97();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_97), ___SQL_SUM_AGGREGATE_97, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_98 = get___SQL_SUM_AGGREGATE_98();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_98), ___SQL_SUM_AGGREGATE_98, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_99 = get___SQL_SUM_AGGREGATE_99();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_99), ___SQL_SUM_AGGREGATE_99, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_100 = get___SQL_SUM_AGGREGATE_100();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_100), ___SQL_SUM_AGGREGATE_100, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_101 = get___SQL_SUM_AGGREGATE_101();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_101), ___SQL_SUM_AGGREGATE_101, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_102 = get___SQL_SUM_AGGREGATE_102();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_102), ___SQL_SUM_AGGREGATE_102, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_103 = get___SQL_SUM_AGGREGATE_103();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_103), ___SQL_SUM_AGGREGATE_103, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_104 = get___SQL_SUM_AGGREGATE_104();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_104), ___SQL_SUM_AGGREGATE_104, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_105 = get___SQL_SUM_AGGREGATE_105();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_105), ___SQL_SUM_AGGREGATE_105, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_106 = get___SQL_SUM_AGGREGATE_106();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_106), ___SQL_SUM_AGGREGATE_106, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_107 = get___SQL_SUM_AGGREGATE_107();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_107), ___SQL_SUM_AGGREGATE_107, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_108 = get___SQL_SUM_AGGREGATE_108();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_108), ___SQL_SUM_AGGREGATE_108, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_109 = get___SQL_SUM_AGGREGATE_109();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_109), ___SQL_SUM_AGGREGATE_109, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_110 = get___SQL_SUM_AGGREGATE_110();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_110), ___SQL_SUM_AGGREGATE_110, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_111 = get___SQL_SUM_AGGREGATE_111();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_111), ___SQL_SUM_AGGREGATE_111, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_112 = get___SQL_SUM_AGGREGATE_112();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_112), ___SQL_SUM_AGGREGATE_112, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_113 = get___SQL_SUM_AGGREGATE_113();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_113), ___SQL_SUM_AGGREGATE_113, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_114 = get___SQL_SUM_AGGREGATE_114();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_114), ___SQL_SUM_AGGREGATE_114, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_115 = get___SQL_SUM_AGGREGATE_115();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_115), ___SQL_SUM_AGGREGATE_115, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_116 = get___SQL_SUM_AGGREGATE_116();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_116), ___SQL_SUM_AGGREGATE_116, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_117 = get___SQL_SUM_AGGREGATE_117();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_117), ___SQL_SUM_AGGREGATE_117, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_118 = get___SQL_SUM_AGGREGATE_118();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_118), ___SQL_SUM_AGGREGATE_118, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_119 = get___SQL_SUM_AGGREGATE_119();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_119), ___SQL_SUM_AGGREGATE_119, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_120 = get___SQL_SUM_AGGREGATE_120();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_120), ___SQL_SUM_AGGREGATE_120, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_121 = get___SQL_SUM_AGGREGATE_121();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_121), ___SQL_SUM_AGGREGATE_121, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_122 = get___SQL_SUM_AGGREGATE_122();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_122), ___SQL_SUM_AGGREGATE_122, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_123 = get___SQL_SUM_AGGREGATE_123();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_123), ___SQL_SUM_AGGREGATE_123, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_124 = get___SQL_SUM_AGGREGATE_124();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_124), ___SQL_SUM_AGGREGATE_124, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_125 = get___SQL_SUM_AGGREGATE_125();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_125), ___SQL_SUM_AGGREGATE_125, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_126 = get___SQL_SUM_AGGREGATE_126();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_126), ___SQL_SUM_AGGREGATE_126, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_127 = get___SQL_SUM_AGGREGATE_127();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_127), ___SQL_SUM_AGGREGATE_127, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_128 = get___SQL_SUM_AGGREGATE_128();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_128), ___SQL_SUM_AGGREGATE_128, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_129 = get___SQL_SUM_AGGREGATE_129();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_129), ___SQL_SUM_AGGREGATE_129, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_130 = get___SQL_SUM_AGGREGATE_130();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_130), ___SQL_SUM_AGGREGATE_130, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_131 = get___SQL_SUM_AGGREGATE_131();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_131), ___SQL_SUM_AGGREGATE_131, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_132 = get___SQL_SUM_AGGREGATE_132();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_132), ___SQL_SUM_AGGREGATE_132, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_133 = get___SQL_SUM_AGGREGATE_133();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_133), ___SQL_SUM_AGGREGATE_133, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_134 = get___SQL_SUM_AGGREGATE_134();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_134), ___SQL_SUM_AGGREGATE_134, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_135 = get___SQL_SUM_AGGREGATE_135();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_135), ___SQL_SUM_AGGREGATE_135, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_136 = get___SQL_SUM_AGGREGATE_136();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_136), ___SQL_SUM_AGGREGATE_136, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_137 = get___SQL_SUM_AGGREGATE_137();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_137), ___SQL_SUM_AGGREGATE_137, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_138 = get___SQL_SUM_AGGREGATE_138();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_138), ___SQL_SUM_AGGREGATE_138, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_139 = get___SQL_SUM_AGGREGATE_139();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_139), ___SQL_SUM_AGGREGATE_139, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_140 = get___SQL_SUM_AGGREGATE_140();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_140), ___SQL_SUM_AGGREGATE_140, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_141 = get___SQL_SUM_AGGREGATE_141();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_141), ___SQL_SUM_AGGREGATE_141, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_142 = get___SQL_SUM_AGGREGATE_142();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_142), ___SQL_SUM_AGGREGATE_142, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_143 = get___SQL_SUM_AGGREGATE_143();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_143), ___SQL_SUM_AGGREGATE_143, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_144 = get___SQL_SUM_AGGREGATE_144();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_144), ___SQL_SUM_AGGREGATE_144, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_145 = get___SQL_SUM_AGGREGATE_145();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_145), ___SQL_SUM_AGGREGATE_145, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_146 = get___SQL_SUM_AGGREGATE_146();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_146), ___SQL_SUM_AGGREGATE_146, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_147 = get___SQL_SUM_AGGREGATE_147();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_147), ___SQL_SUM_AGGREGATE_147, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_148 = get___SQL_SUM_AGGREGATE_148();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_148), ___SQL_SUM_AGGREGATE_148, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_149 = get___SQL_SUM_AGGREGATE_149();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_149), ___SQL_SUM_AGGREGATE_149, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_150 = get___SQL_SUM_AGGREGATE_150();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_150), ___SQL_SUM_AGGREGATE_150, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_151 = get___SQL_SUM_AGGREGATE_151();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_151), ___SQL_SUM_AGGREGATE_151, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_152 = get___SQL_SUM_AGGREGATE_152();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_152), ___SQL_SUM_AGGREGATE_152, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_153 = get___SQL_SUM_AGGREGATE_153();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_153), ___SQL_SUM_AGGREGATE_153, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_154 = get___SQL_SUM_AGGREGATE_154();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_154), ___SQL_SUM_AGGREGATE_154, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_155 = get___SQL_SUM_AGGREGATE_155();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_155), ___SQL_SUM_AGGREGATE_155, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_156 = get___SQL_SUM_AGGREGATE_156();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_156), ___SQL_SUM_AGGREGATE_156, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_157 = get___SQL_SUM_AGGREGATE_157();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_157), ___SQL_SUM_AGGREGATE_157, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_158 = get___SQL_SUM_AGGREGATE_158();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_158), ___SQL_SUM_AGGREGATE_158, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_159 = get___SQL_SUM_AGGREGATE_159();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_159), ___SQL_SUM_AGGREGATE_159, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_160 = get___SQL_SUM_AGGREGATE_160();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_160), ___SQL_SUM_AGGREGATE_160, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_161 = get___SQL_SUM_AGGREGATE_161();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_161), ___SQL_SUM_AGGREGATE_161, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_162 = get___SQL_SUM_AGGREGATE_162();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_162), ___SQL_SUM_AGGREGATE_162, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_163 = get___SQL_SUM_AGGREGATE_163();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_163), ___SQL_SUM_AGGREGATE_163, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_164 = get___SQL_SUM_AGGREGATE_164();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_164), ___SQL_SUM_AGGREGATE_164, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_165 = get___SQL_SUM_AGGREGATE_165();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_165), ___SQL_SUM_AGGREGATE_165, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_166 = get___SQL_SUM_AGGREGATE_166();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_166), ___SQL_SUM_AGGREGATE_166, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_167 = get___SQL_SUM_AGGREGATE_167();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_167), ___SQL_SUM_AGGREGATE_167, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_168 = get___SQL_SUM_AGGREGATE_168();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_168), ___SQL_SUM_AGGREGATE_168, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_169 = get___SQL_SUM_AGGREGATE_169();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_169), ___SQL_SUM_AGGREGATE_169, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_170 = get___SQL_SUM_AGGREGATE_170();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_170), ___SQL_SUM_AGGREGATE_170, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_171 = get___SQL_SUM_AGGREGATE_171();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_171), ___SQL_SUM_AGGREGATE_171, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_172 = get___SQL_SUM_AGGREGATE_172();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_172), ___SQL_SUM_AGGREGATE_172, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_173 = get___SQL_SUM_AGGREGATE_173();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_173), ___SQL_SUM_AGGREGATE_173, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_174 = get___SQL_SUM_AGGREGATE_174();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_174), ___SQL_SUM_AGGREGATE_174, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_175 = get___SQL_SUM_AGGREGATE_175();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_175), ___SQL_SUM_AGGREGATE_175, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_176 = get___SQL_SUM_AGGREGATE_176();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_176), ___SQL_SUM_AGGREGATE_176, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_177 = get___SQL_SUM_AGGREGATE_177();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_177), ___SQL_SUM_AGGREGATE_177, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_178 = get___SQL_SUM_AGGREGATE_178();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_178), ___SQL_SUM_AGGREGATE_178, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_179 = get___SQL_SUM_AGGREGATE_179();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_179), ___SQL_SUM_AGGREGATE_179, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_180 = get___SQL_SUM_AGGREGATE_180();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_180), ___SQL_SUM_AGGREGATE_180, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_181 = get___SQL_SUM_AGGREGATE_181();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_181), ___SQL_SUM_AGGREGATE_181, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_182 = get___SQL_SUM_AGGREGATE_182();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_182), ___SQL_SUM_AGGREGATE_182, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_183 = get___SQL_SUM_AGGREGATE_183();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_183), ___SQL_SUM_AGGREGATE_183, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_184 = get___SQL_SUM_AGGREGATE_184();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_184), ___SQL_SUM_AGGREGATE_184, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_185 = get___SQL_SUM_AGGREGATE_185();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_185), ___SQL_SUM_AGGREGATE_185, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_186 = get___SQL_SUM_AGGREGATE_186();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_186), ___SQL_SUM_AGGREGATE_186, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_187 = get___SQL_SUM_AGGREGATE_187();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_187), ___SQL_SUM_AGGREGATE_187, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_188 = get___SQL_SUM_AGGREGATE_188();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_188), ___SQL_SUM_AGGREGATE_188, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_189 = get___SQL_SUM_AGGREGATE_189();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_189), ___SQL_SUM_AGGREGATE_189, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_190 = get___SQL_SUM_AGGREGATE_190();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_190), ___SQL_SUM_AGGREGATE_190, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_191 = get___SQL_SUM_AGGREGATE_191();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_191), ___SQL_SUM_AGGREGATE_191, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_192 = get___SQL_SUM_AGGREGATE_192();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_192), ___SQL_SUM_AGGREGATE_192, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_193 = get___SQL_SUM_AGGREGATE_193();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_193), ___SQL_SUM_AGGREGATE_193, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_194 = get___SQL_SUM_AGGREGATE_194();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_194), ___SQL_SUM_AGGREGATE_194, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_195 = get___SQL_SUM_AGGREGATE_195();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_195), ___SQL_SUM_AGGREGATE_195, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_196 = get___SQL_SUM_AGGREGATE_196();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_196), ___SQL_SUM_AGGREGATE_196, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_197 = get___SQL_SUM_AGGREGATE_197();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_197), ___SQL_SUM_AGGREGATE_197, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_198 = get___SQL_SUM_AGGREGATE_198();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_198), ___SQL_SUM_AGGREGATE_198, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_199 = get___SQL_SUM_AGGREGATE_199();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_199), ___SQL_SUM_AGGREGATE_199, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_200 = get___SQL_SUM_AGGREGATE_200();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_200), ___SQL_SUM_AGGREGATE_200, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_201 = get___SQL_SUM_AGGREGATE_201();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_201), ___SQL_SUM_AGGREGATE_201, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_202 = get___SQL_SUM_AGGREGATE_202();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_202), ___SQL_SUM_AGGREGATE_202, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_203 = get___SQL_SUM_AGGREGATE_203();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_203), ___SQL_SUM_AGGREGATE_203, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_204 = get___SQL_SUM_AGGREGATE_204();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_204), ___SQL_SUM_AGGREGATE_204, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_205 = get___SQL_SUM_AGGREGATE_205();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_205), ___SQL_SUM_AGGREGATE_205, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_206 = get___SQL_SUM_AGGREGATE_206();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_206), ___SQL_SUM_AGGREGATE_206, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_207 = get___SQL_SUM_AGGREGATE_207();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_207), ___SQL_SUM_AGGREGATE_207, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_208 = get___SQL_SUM_AGGREGATE_208();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_208), ___SQL_SUM_AGGREGATE_208, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_209 = get___SQL_SUM_AGGREGATE_209();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_209), ___SQL_SUM_AGGREGATE_209, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_210 = get___SQL_SUM_AGGREGATE_210();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_210), ___SQL_SUM_AGGREGATE_210, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_211 = get___SQL_SUM_AGGREGATE_211();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_211), ___SQL_SUM_AGGREGATE_211, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_212 = get___SQL_SUM_AGGREGATE_212();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_212), ___SQL_SUM_AGGREGATE_212, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_213 = get___SQL_SUM_AGGREGATE_213();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_213), ___SQL_SUM_AGGREGATE_213, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_214 = get___SQL_SUM_AGGREGATE_214();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_214), ___SQL_SUM_AGGREGATE_214, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_215 = get___SQL_SUM_AGGREGATE_215();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_215), ___SQL_SUM_AGGREGATE_215, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_216 = get___SQL_SUM_AGGREGATE_216();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_216), ___SQL_SUM_AGGREGATE_216, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_217 = get___SQL_SUM_AGGREGATE_217();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_217), ___SQL_SUM_AGGREGATE_217, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_218 = get___SQL_SUM_AGGREGATE_218();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_218), ___SQL_SUM_AGGREGATE_218, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_219 = get___SQL_SUM_AGGREGATE_219();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_219), ___SQL_SUM_AGGREGATE_219, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_220 = get___SQL_SUM_AGGREGATE_220();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_220), ___SQL_SUM_AGGREGATE_220, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_221 = get___SQL_SUM_AGGREGATE_221();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_221), ___SQL_SUM_AGGREGATE_221, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_222 = get___SQL_SUM_AGGREGATE_222();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_222), ___SQL_SUM_AGGREGATE_222, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_223 = get___SQL_SUM_AGGREGATE_223();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_223), ___SQL_SUM_AGGREGATE_223, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_224 = get___SQL_SUM_AGGREGATE_224();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_224), ___SQL_SUM_AGGREGATE_224, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_225 = get___SQL_SUM_AGGREGATE_225();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_225), ___SQL_SUM_AGGREGATE_225, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_226 = get___SQL_SUM_AGGREGATE_226();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_226), ___SQL_SUM_AGGREGATE_226, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_227 = get___SQL_SUM_AGGREGATE_227();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_227), ___SQL_SUM_AGGREGATE_227, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_228 = get___SQL_SUM_AGGREGATE_228();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_228), ___SQL_SUM_AGGREGATE_228, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_229 = get___SQL_SUM_AGGREGATE_229();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_229), ___SQL_SUM_AGGREGATE_229, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_230 = get___SQL_SUM_AGGREGATE_230();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_230), ___SQL_SUM_AGGREGATE_230, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_231 = get___SQL_SUM_AGGREGATE_231();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_231), ___SQL_SUM_AGGREGATE_231, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_232 = get___SQL_SUM_AGGREGATE_232();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_232), ___SQL_SUM_AGGREGATE_232, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_233 = get___SQL_SUM_AGGREGATE_233();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_233), ___SQL_SUM_AGGREGATE_233, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_234 = get___SQL_SUM_AGGREGATE_234();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_234), ___SQL_SUM_AGGREGATE_234, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_235 = get___SQL_SUM_AGGREGATE_235();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_235), ___SQL_SUM_AGGREGATE_235, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_236 = get___SQL_SUM_AGGREGATE_236();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_236), ___SQL_SUM_AGGREGATE_236, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_237 = get___SQL_SUM_AGGREGATE_237();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_237), ___SQL_SUM_AGGREGATE_237, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_238 = get___SQL_SUM_AGGREGATE_238();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_238), ___SQL_SUM_AGGREGATE_238, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_239 = get___SQL_SUM_AGGREGATE_239();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_239), ___SQL_SUM_AGGREGATE_239, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_240 = get___SQL_SUM_AGGREGATE_240();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_240), ___SQL_SUM_AGGREGATE_240, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_241 = get___SQL_SUM_AGGREGATE_241();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_241), ___SQL_SUM_AGGREGATE_241, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_242 = get___SQL_SUM_AGGREGATE_242();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_242), ___SQL_SUM_AGGREGATE_242, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_243 = get___SQL_SUM_AGGREGATE_243();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_243), ___SQL_SUM_AGGREGATE_243, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_244 = get___SQL_SUM_AGGREGATE_244();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_244), ___SQL_SUM_AGGREGATE_244, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_245 = get___SQL_SUM_AGGREGATE_245();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_245), ___SQL_SUM_AGGREGATE_245, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_246 = get___SQL_SUM_AGGREGATE_246();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_246), ___SQL_SUM_AGGREGATE_246, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_247 = get___SQL_SUM_AGGREGATE_247();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_247), ___SQL_SUM_AGGREGATE_247, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_248 = get___SQL_SUM_AGGREGATE_248();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_248), ___SQL_SUM_AGGREGATE_248, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_249 = get___SQL_SUM_AGGREGATE_249();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_249), ___SQL_SUM_AGGREGATE_249, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_250 = get___SQL_SUM_AGGREGATE_250();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_250), ___SQL_SUM_AGGREGATE_250, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_251 = get___SQL_SUM_AGGREGATE_251();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_251), ___SQL_SUM_AGGREGATE_251, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_252 = get___SQL_SUM_AGGREGATE_252();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_252), ___SQL_SUM_AGGREGATE_252, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_253 = get___SQL_SUM_AGGREGATE_253();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_253), ___SQL_SUM_AGGREGATE_253, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_254 = get___SQL_SUM_AGGREGATE_254();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_254), ___SQL_SUM_AGGREGATE_254, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_255 = get___SQL_SUM_AGGREGATE_255();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_255), ___SQL_SUM_AGGREGATE_255, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_256 = get___SQL_SUM_AGGREGATE_256();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_256), ___SQL_SUM_AGGREGATE_256, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_257 = get___SQL_SUM_AGGREGATE_257();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_257), ___SQL_SUM_AGGREGATE_257, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_258 = get___SQL_SUM_AGGREGATE_258();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_258), ___SQL_SUM_AGGREGATE_258, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_259 = get___SQL_SUM_AGGREGATE_259();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_259), ___SQL_SUM_AGGREGATE_259, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_260 = get___SQL_SUM_AGGREGATE_260();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_260), ___SQL_SUM_AGGREGATE_260, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_261 = get___SQL_SUM_AGGREGATE_261();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_261), ___SQL_SUM_AGGREGATE_261, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_262 = get___SQL_SUM_AGGREGATE_262();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_262), ___SQL_SUM_AGGREGATE_262, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_263 = get___SQL_SUM_AGGREGATE_263();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_263), ___SQL_SUM_AGGREGATE_263, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_264 = get___SQL_SUM_AGGREGATE_264();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_264), ___SQL_SUM_AGGREGATE_264, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_265 = get___SQL_SUM_AGGREGATE_265();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_265), ___SQL_SUM_AGGREGATE_265, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_266 = get___SQL_SUM_AGGREGATE_266();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_266), ___SQL_SUM_AGGREGATE_266, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_267 = get___SQL_SUM_AGGREGATE_267();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_267), ___SQL_SUM_AGGREGATE_267, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_268 = get___SQL_SUM_AGGREGATE_268();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_268), ___SQL_SUM_AGGREGATE_268, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_269 = get___SQL_SUM_AGGREGATE_269();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_269), ___SQL_SUM_AGGREGATE_269, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_270 = get___SQL_SUM_AGGREGATE_270();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_270), ___SQL_SUM_AGGREGATE_270, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_271 = get___SQL_SUM_AGGREGATE_271();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_271), ___SQL_SUM_AGGREGATE_271, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_272 = get___SQL_SUM_AGGREGATE_272();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_272), ___SQL_SUM_AGGREGATE_272, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_273 = get___SQL_SUM_AGGREGATE_273();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_273), ___SQL_SUM_AGGREGATE_273, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_274 = get___SQL_SUM_AGGREGATE_274();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_274), ___SQL_SUM_AGGREGATE_274, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_275 = get___SQL_SUM_AGGREGATE_275();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_275), ___SQL_SUM_AGGREGATE_275, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_276 = get___SQL_SUM_AGGREGATE_276();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_276), ___SQL_SUM_AGGREGATE_276, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_277 = get___SQL_SUM_AGGREGATE_277();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_277), ___SQL_SUM_AGGREGATE_277, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_278 = get___SQL_SUM_AGGREGATE_278();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_278), ___SQL_SUM_AGGREGATE_278, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_279 = get___SQL_SUM_AGGREGATE_279();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_279), ___SQL_SUM_AGGREGATE_279, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_280 = get___SQL_SUM_AGGREGATE_280();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_280), ___SQL_SUM_AGGREGATE_280, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_281 = get___SQL_SUM_AGGREGATE_281();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_281), ___SQL_SUM_AGGREGATE_281, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_282 = get___SQL_SUM_AGGREGATE_282();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_282), ___SQL_SUM_AGGREGATE_282, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_283 = get___SQL_SUM_AGGREGATE_283();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_283), ___SQL_SUM_AGGREGATE_283, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_284 = get___SQL_SUM_AGGREGATE_284();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_284), ___SQL_SUM_AGGREGATE_284, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_285 = get___SQL_SUM_AGGREGATE_285();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_285), ___SQL_SUM_AGGREGATE_285, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_286 = get___SQL_SUM_AGGREGATE_286();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_286), ___SQL_SUM_AGGREGATE_286, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_287 = get___SQL_SUM_AGGREGATE_287();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_287), ___SQL_SUM_AGGREGATE_287, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_288 = get___SQL_SUM_AGGREGATE_288();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_288), ___SQL_SUM_AGGREGATE_288, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_289 = get___SQL_SUM_AGGREGATE_289();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_289), ___SQL_SUM_AGGREGATE_289, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_290 = get___SQL_SUM_AGGREGATE_290();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_290), ___SQL_SUM_AGGREGATE_290, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_291 = get___SQL_SUM_AGGREGATE_291();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_291), ___SQL_SUM_AGGREGATE_291, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_292 = get___SQL_SUM_AGGREGATE_292();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_292), ___SQL_SUM_AGGREGATE_292, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_293 = get___SQL_SUM_AGGREGATE_293();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_293), ___SQL_SUM_AGGREGATE_293, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_294 = get___SQL_SUM_AGGREGATE_294();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_294), ___SQL_SUM_AGGREGATE_294, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_295 = get___SQL_SUM_AGGREGATE_295();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_295), ___SQL_SUM_AGGREGATE_295, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_296 = get___SQL_SUM_AGGREGATE_296();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_296), ___SQL_SUM_AGGREGATE_296, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_297 = get___SQL_SUM_AGGREGATE_297();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_297), ___SQL_SUM_AGGREGATE_297, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_298 = get___SQL_SUM_AGGREGATE_298();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_298), ___SQL_SUM_AGGREGATE_298, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_299 = get___SQL_SUM_AGGREGATE_299();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_299), ___SQL_SUM_AGGREGATE_299, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_300 = get___SQL_SUM_AGGREGATE_300();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_300), ___SQL_SUM_AGGREGATE_300, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_301 = get___SQL_SUM_AGGREGATE_301();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_301), ___SQL_SUM_AGGREGATE_301, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_302 = get___SQL_SUM_AGGREGATE_302();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_302), ___SQL_SUM_AGGREGATE_302, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_303 = get___SQL_SUM_AGGREGATE_303();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_303), ___SQL_SUM_AGGREGATE_303, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_304 = get___SQL_SUM_AGGREGATE_304();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_304), ___SQL_SUM_AGGREGATE_304, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_305 = get___SQL_SUM_AGGREGATE_305();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_305), ___SQL_SUM_AGGREGATE_305, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_306 = get___SQL_SUM_AGGREGATE_306();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_306), ___SQL_SUM_AGGREGATE_306, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_307 = get___SQL_SUM_AGGREGATE_307();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_307), ___SQL_SUM_AGGREGATE_307, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_308 = get___SQL_SUM_AGGREGATE_308();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_308), ___SQL_SUM_AGGREGATE_308, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_309 = get___SQL_SUM_AGGREGATE_309();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_309), ___SQL_SUM_AGGREGATE_309, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_310 = get___SQL_SUM_AGGREGATE_310();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_310), ___SQL_SUM_AGGREGATE_310, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_311 = get___SQL_SUM_AGGREGATE_311();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_311), ___SQL_SUM_AGGREGATE_311, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_312 = get___SQL_SUM_AGGREGATE_312();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_312), ___SQL_SUM_AGGREGATE_312, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_313 = get___SQL_SUM_AGGREGATE_313();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_313), ___SQL_SUM_AGGREGATE_313, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_314 = get___SQL_SUM_AGGREGATE_314();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_314), ___SQL_SUM_AGGREGATE_314, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_315 = get___SQL_SUM_AGGREGATE_315();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_315), ___SQL_SUM_AGGREGATE_315, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_316 = get___SQL_SUM_AGGREGATE_316();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_316), ___SQL_SUM_AGGREGATE_316, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_317 = get___SQL_SUM_AGGREGATE_317();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_317), ___SQL_SUM_AGGREGATE_317, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_318 = get___SQL_SUM_AGGREGATE_318();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_318), ___SQL_SUM_AGGREGATE_318, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_319 = get___SQL_SUM_AGGREGATE_319();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_319), ___SQL_SUM_AGGREGATE_319, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_320 = get___SQL_SUM_AGGREGATE_320();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_320), ___SQL_SUM_AGGREGATE_320, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_321 = get___SQL_SUM_AGGREGATE_321();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_321), ___SQL_SUM_AGGREGATE_321, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_322 = get___SQL_SUM_AGGREGATE_322();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_322), ___SQL_SUM_AGGREGATE_322, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_323 = get___SQL_SUM_AGGREGATE_323();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_323), ___SQL_SUM_AGGREGATE_323, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_324 = get___SQL_SUM_AGGREGATE_324();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_324), ___SQL_SUM_AGGREGATE_324, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_325 = get___SQL_SUM_AGGREGATE_325();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_325), ___SQL_SUM_AGGREGATE_325, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_326 = get___SQL_SUM_AGGREGATE_326();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_326), ___SQL_SUM_AGGREGATE_326, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_327 = get___SQL_SUM_AGGREGATE_327();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_327), ___SQL_SUM_AGGREGATE_327, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_328 = get___SQL_SUM_AGGREGATE_328();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_328), ___SQL_SUM_AGGREGATE_328, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_329 = get___SQL_SUM_AGGREGATE_329();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_329), ___SQL_SUM_AGGREGATE_329, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_330 = get___SQL_SUM_AGGREGATE_330();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_330), ___SQL_SUM_AGGREGATE_330, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_331 = get___SQL_SUM_AGGREGATE_331();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_331), ___SQL_SUM_AGGREGATE_331, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_332 = get___SQL_SUM_AGGREGATE_332();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_332), ___SQL_SUM_AGGREGATE_332, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_333 = get___SQL_SUM_AGGREGATE_333();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_333), ___SQL_SUM_AGGREGATE_333, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_334 = get___SQL_SUM_AGGREGATE_334();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_334), ___SQL_SUM_AGGREGATE_334, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_335 = get___SQL_SUM_AGGREGATE_335();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_335), ___SQL_SUM_AGGREGATE_335, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_336 = get___SQL_SUM_AGGREGATE_336();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_336), ___SQL_SUM_AGGREGATE_336, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_337 = get___SQL_SUM_AGGREGATE_337();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_337), ___SQL_SUM_AGGREGATE_337, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_338 = get___SQL_SUM_AGGREGATE_338();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_338), ___SQL_SUM_AGGREGATE_338, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_339 = get___SQL_SUM_AGGREGATE_339();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_339), ___SQL_SUM_AGGREGATE_339, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_340 = get___SQL_SUM_AGGREGATE_340();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_340), ___SQL_SUM_AGGREGATE_340, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_341 = get___SQL_SUM_AGGREGATE_341();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_341), ___SQL_SUM_AGGREGATE_341, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_342 = get___SQL_SUM_AGGREGATE_342();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_342), ___SQL_SUM_AGGREGATE_342, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_343 = get___SQL_SUM_AGGREGATE_343();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_343), ___SQL_SUM_AGGREGATE_343, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_344 = get___SQL_SUM_AGGREGATE_344();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_344), ___SQL_SUM_AGGREGATE_344, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_345 = get___SQL_SUM_AGGREGATE_345();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_345), ___SQL_SUM_AGGREGATE_345, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_346 = get___SQL_SUM_AGGREGATE_346();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_346), ___SQL_SUM_AGGREGATE_346, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_347 = get___SQL_SUM_AGGREGATE_347();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_347), ___SQL_SUM_AGGREGATE_347, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_348 = get___SQL_SUM_AGGREGATE_348();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_348), ___SQL_SUM_AGGREGATE_348, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_349 = get___SQL_SUM_AGGREGATE_349();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_349), ___SQL_SUM_AGGREGATE_349, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_350 = get___SQL_SUM_AGGREGATE_350();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_350), ___SQL_SUM_AGGREGATE_350, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_351 = get___SQL_SUM_AGGREGATE_351();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_351), ___SQL_SUM_AGGREGATE_351, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_352 = get___SQL_SUM_AGGREGATE_352();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_352), ___SQL_SUM_AGGREGATE_352, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_353 = get___SQL_SUM_AGGREGATE_353();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_353), ___SQL_SUM_AGGREGATE_353, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_354 = get___SQL_SUM_AGGREGATE_354();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_354), ___SQL_SUM_AGGREGATE_354, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_355 = get___SQL_SUM_AGGREGATE_355();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_355), ___SQL_SUM_AGGREGATE_355, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_356 = get___SQL_SUM_AGGREGATE_356();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_356), ___SQL_SUM_AGGREGATE_356, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_357 = get___SQL_SUM_AGGREGATE_357();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_357), ___SQL_SUM_AGGREGATE_357, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_358 = get___SQL_SUM_AGGREGATE_358();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_358), ___SQL_SUM_AGGREGATE_358, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_359 = get___SQL_SUM_AGGREGATE_359();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_359), ___SQL_SUM_AGGREGATE_359, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_360 = get___SQL_SUM_AGGREGATE_360();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_360), ___SQL_SUM_AGGREGATE_360, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_361 = get___SQL_SUM_AGGREGATE_361();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_361), ___SQL_SUM_AGGREGATE_361, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_362 = get___SQL_SUM_AGGREGATE_362();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_362), ___SQL_SUM_AGGREGATE_362, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_363 = get___SQL_SUM_AGGREGATE_363();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_363), ___SQL_SUM_AGGREGATE_363, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_364 = get___SQL_SUM_AGGREGATE_364();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_364), ___SQL_SUM_AGGREGATE_364, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_365 = get___SQL_SUM_AGGREGATE_365();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_365), ___SQL_SUM_AGGREGATE_365, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_366 = get___SQL_SUM_AGGREGATE_366();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_366), ___SQL_SUM_AGGREGATE_366, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_367 = get___SQL_SUM_AGGREGATE_367();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_367), ___SQL_SUM_AGGREGATE_367, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_368 = get___SQL_SUM_AGGREGATE_368();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_368), ___SQL_SUM_AGGREGATE_368, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_369 = get___SQL_SUM_AGGREGATE_369();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_369), ___SQL_SUM_AGGREGATE_369, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_370 = get___SQL_SUM_AGGREGATE_370();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_370), ___SQL_SUM_AGGREGATE_370, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_371 = get___SQL_SUM_AGGREGATE_371();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_371), ___SQL_SUM_AGGREGATE_371, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_372 = get___SQL_SUM_AGGREGATE_372();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_372), ___SQL_SUM_AGGREGATE_372, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_373 = get___SQL_SUM_AGGREGATE_373();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_373), ___SQL_SUM_AGGREGATE_373, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_374 = get___SQL_SUM_AGGREGATE_374();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_374), ___SQL_SUM_AGGREGATE_374, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_375 = get___SQL_SUM_AGGREGATE_375();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_375), ___SQL_SUM_AGGREGATE_375, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_376 = get___SQL_SUM_AGGREGATE_376();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_376), ___SQL_SUM_AGGREGATE_376, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_377 = get___SQL_SUM_AGGREGATE_377();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_377), ___SQL_SUM_AGGREGATE_377, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_378 = get___SQL_SUM_AGGREGATE_378();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_378), ___SQL_SUM_AGGREGATE_378, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_379 = get___SQL_SUM_AGGREGATE_379();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_379), ___SQL_SUM_AGGREGATE_379, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_380 = get___SQL_SUM_AGGREGATE_380();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_380), ___SQL_SUM_AGGREGATE_380, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_381 = get___SQL_SUM_AGGREGATE_381();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_381), ___SQL_SUM_AGGREGATE_381, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_382 = get___SQL_SUM_AGGREGATE_382();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_382), ___SQL_SUM_AGGREGATE_382, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_383 = get___SQL_SUM_AGGREGATE_383();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_383), ___SQL_SUM_AGGREGATE_383, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_384 = get___SQL_SUM_AGGREGATE_384();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_384), ___SQL_SUM_AGGREGATE_384, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_385 = get___SQL_SUM_AGGREGATE_385();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_385), ___SQL_SUM_AGGREGATE_385, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_386 = get___SQL_SUM_AGGREGATE_386();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_386), ___SQL_SUM_AGGREGATE_386, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_387 = get___SQL_SUM_AGGREGATE_387();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_387), ___SQL_SUM_AGGREGATE_387, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_388 = get___SQL_SUM_AGGREGATE_388();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_388), ___SQL_SUM_AGGREGATE_388, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_389 = get___SQL_SUM_AGGREGATE_389();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_389), ___SQL_SUM_AGGREGATE_389, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_390 = get___SQL_SUM_AGGREGATE_390();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_390), ___SQL_SUM_AGGREGATE_390, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_391 = get___SQL_SUM_AGGREGATE_391();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_391), ___SQL_SUM_AGGREGATE_391, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_392 = get___SQL_SUM_AGGREGATE_392();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_392), ___SQL_SUM_AGGREGATE_392, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_393 = get___SQL_SUM_AGGREGATE_393();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_393), ___SQL_SUM_AGGREGATE_393, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_394 = get___SQL_SUM_AGGREGATE_394();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_394), ___SQL_SUM_AGGREGATE_394, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_395 = get___SQL_SUM_AGGREGATE_395();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_395), ___SQL_SUM_AGGREGATE_395, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_396 = get___SQL_SUM_AGGREGATE_396();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_396), ___SQL_SUM_AGGREGATE_396, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_397 = get___SQL_SUM_AGGREGATE_397();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_397), ___SQL_SUM_AGGREGATE_397, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_398 = get___SQL_SUM_AGGREGATE_398();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_398), ___SQL_SUM_AGGREGATE_398, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_399 = get___SQL_SUM_AGGREGATE_399();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_399), ___SQL_SUM_AGGREGATE_399, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_400 = get___SQL_SUM_AGGREGATE_400();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_400), ___SQL_SUM_AGGREGATE_400, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_401 = get___SQL_SUM_AGGREGATE_401();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_401), ___SQL_SUM_AGGREGATE_401, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_402 = get___SQL_SUM_AGGREGATE_402();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_402), ___SQL_SUM_AGGREGATE_402, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_403 = get___SQL_SUM_AGGREGATE_403();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_403), ___SQL_SUM_AGGREGATE_403, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_404 = get___SQL_SUM_AGGREGATE_404();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_404), ___SQL_SUM_AGGREGATE_404, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_405 = get___SQL_SUM_AGGREGATE_405();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_405), ___SQL_SUM_AGGREGATE_405, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_406 = get___SQL_SUM_AGGREGATE_406();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_406), ___SQL_SUM_AGGREGATE_406, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_407 = get___SQL_SUM_AGGREGATE_407();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_407), ___SQL_SUM_AGGREGATE_407, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_408 = get___SQL_SUM_AGGREGATE_408();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_408), ___SQL_SUM_AGGREGATE_408, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_409 = get___SQL_SUM_AGGREGATE_409();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_409), ___SQL_SUM_AGGREGATE_409, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_410 = get___SQL_SUM_AGGREGATE_410();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_410), ___SQL_SUM_AGGREGATE_410, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_411 = get___SQL_SUM_AGGREGATE_411();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_411), ___SQL_SUM_AGGREGATE_411, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_412 = get___SQL_SUM_AGGREGATE_412();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_412), ___SQL_SUM_AGGREGATE_412, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_413 = get___SQL_SUM_AGGREGATE_413();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_413), ___SQL_SUM_AGGREGATE_413, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_414 = get___SQL_SUM_AGGREGATE_414();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_414), ___SQL_SUM_AGGREGATE_414, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_415 = get___SQL_SUM_AGGREGATE_415();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_415), ___SQL_SUM_AGGREGATE_415, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_416 = get___SQL_SUM_AGGREGATE_416();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_416), ___SQL_SUM_AGGREGATE_416, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_417 = get___SQL_SUM_AGGREGATE_417();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_417), ___SQL_SUM_AGGREGATE_417, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_418 = get___SQL_SUM_AGGREGATE_418();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_418), ___SQL_SUM_AGGREGATE_418, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_419 = get___SQL_SUM_AGGREGATE_419();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_419), ___SQL_SUM_AGGREGATE_419, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_420 = get___SQL_SUM_AGGREGATE_420();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_420), ___SQL_SUM_AGGREGATE_420, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_421 = get___SQL_SUM_AGGREGATE_421();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_421), ___SQL_SUM_AGGREGATE_421, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_422 = get___SQL_SUM_AGGREGATE_422();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_422), ___SQL_SUM_AGGREGATE_422, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_423 = get___SQL_SUM_AGGREGATE_423();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_423), ___SQL_SUM_AGGREGATE_423, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_424 = get___SQL_SUM_AGGREGATE_424();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_424), ___SQL_SUM_AGGREGATE_424, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_425 = get___SQL_SUM_AGGREGATE_425();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_425), ___SQL_SUM_AGGREGATE_425, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_426 = get___SQL_SUM_AGGREGATE_426();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_426), ___SQL_SUM_AGGREGATE_426, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_427 = get___SQL_SUM_AGGREGATE_427();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_427), ___SQL_SUM_AGGREGATE_427, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_428 = get___SQL_SUM_AGGREGATE_428();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_428), ___SQL_SUM_AGGREGATE_428, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_429 = get___SQL_SUM_AGGREGATE_429();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_429), ___SQL_SUM_AGGREGATE_429, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_430 = get___SQL_SUM_AGGREGATE_430();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_430), ___SQL_SUM_AGGREGATE_430, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_431 = get___SQL_SUM_AGGREGATE_431();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_431), ___SQL_SUM_AGGREGATE_431, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_432 = get___SQL_SUM_AGGREGATE_432();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_432), ___SQL_SUM_AGGREGATE_432, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_433 = get___SQL_SUM_AGGREGATE_433();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_433), ___SQL_SUM_AGGREGATE_433, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_434 = get___SQL_SUM_AGGREGATE_434();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_434), ___SQL_SUM_AGGREGATE_434, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_435 = get___SQL_SUM_AGGREGATE_435();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_435), ___SQL_SUM_AGGREGATE_435, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_436 = get___SQL_SUM_AGGREGATE_436();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_436), ___SQL_SUM_AGGREGATE_436, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_437 = get___SQL_SUM_AGGREGATE_437();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_437), ___SQL_SUM_AGGREGATE_437, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_438 = get___SQL_SUM_AGGREGATE_438();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_438), ___SQL_SUM_AGGREGATE_438, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_439 = get___SQL_SUM_AGGREGATE_439();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_439), ___SQL_SUM_AGGREGATE_439, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_440 = get___SQL_SUM_AGGREGATE_440();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_440), ___SQL_SUM_AGGREGATE_440, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_441 = get___SQL_SUM_AGGREGATE_441();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_441), ___SQL_SUM_AGGREGATE_441, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_442 = get___SQL_SUM_AGGREGATE_442();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_442), ___SQL_SUM_AGGREGATE_442, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_443 = get___SQL_SUM_AGGREGATE_443();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_443), ___SQL_SUM_AGGREGATE_443, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_444 = get___SQL_SUM_AGGREGATE_444();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_444), ___SQL_SUM_AGGREGATE_444, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_445 = get___SQL_SUM_AGGREGATE_445();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_445), ___SQL_SUM_AGGREGATE_445, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_446 = get___SQL_SUM_AGGREGATE_446();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_446), ___SQL_SUM_AGGREGATE_446, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_447 = get___SQL_SUM_AGGREGATE_447();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_447), ___SQL_SUM_AGGREGATE_447, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_448 = get___SQL_SUM_AGGREGATE_448();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_448), ___SQL_SUM_AGGREGATE_448, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_449 = get___SQL_SUM_AGGREGATE_449();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_449), ___SQL_SUM_AGGREGATE_449, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_450 = get___SQL_SUM_AGGREGATE_450();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_450), ___SQL_SUM_AGGREGATE_450, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_451 = get___SQL_SUM_AGGREGATE_451();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_451), ___SQL_SUM_AGGREGATE_451, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_452 = get___SQL_SUM_AGGREGATE_452();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_452), ___SQL_SUM_AGGREGATE_452, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_453 = get___SQL_SUM_AGGREGATE_453();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_453), ___SQL_SUM_AGGREGATE_453, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_454 = get___SQL_SUM_AGGREGATE_454();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_454), ___SQL_SUM_AGGREGATE_454, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_455 = get___SQL_SUM_AGGREGATE_455();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_455), ___SQL_SUM_AGGREGATE_455, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_456 = get___SQL_SUM_AGGREGATE_456();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_456), ___SQL_SUM_AGGREGATE_456, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_457 = get___SQL_SUM_AGGREGATE_457();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_457), ___SQL_SUM_AGGREGATE_457, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_458 = get___SQL_SUM_AGGREGATE_458();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_458), ___SQL_SUM_AGGREGATE_458, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_459 = get___SQL_SUM_AGGREGATE_459();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_459), ___SQL_SUM_AGGREGATE_459, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_460 = get___SQL_SUM_AGGREGATE_460();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_460), ___SQL_SUM_AGGREGATE_460, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_461 = get___SQL_SUM_AGGREGATE_461();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_461), ___SQL_SUM_AGGREGATE_461, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_462 = get___SQL_SUM_AGGREGATE_462();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_462), ___SQL_SUM_AGGREGATE_462, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_463 = get___SQL_SUM_AGGREGATE_463();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_463), ___SQL_SUM_AGGREGATE_463, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_464 = get___SQL_SUM_AGGREGATE_464();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_464), ___SQL_SUM_AGGREGATE_464, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_465 = get___SQL_SUM_AGGREGATE_465();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_465), ___SQL_SUM_AGGREGATE_465, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_466 = get___SQL_SUM_AGGREGATE_466();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_466), ___SQL_SUM_AGGREGATE_466, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_467 = get___SQL_SUM_AGGREGATE_467();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_467), ___SQL_SUM_AGGREGATE_467, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_468 = get___SQL_SUM_AGGREGATE_468();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_468), ___SQL_SUM_AGGREGATE_468, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_469 = get___SQL_SUM_AGGREGATE_469();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_469), ___SQL_SUM_AGGREGATE_469, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_470 = get___SQL_SUM_AGGREGATE_470();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_470), ___SQL_SUM_AGGREGATE_470, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_471 = get___SQL_SUM_AGGREGATE_471();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_471), ___SQL_SUM_AGGREGATE_471, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_472 = get___SQL_SUM_AGGREGATE_472();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_472), ___SQL_SUM_AGGREGATE_472, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_473 = get___SQL_SUM_AGGREGATE_473();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_473), ___SQL_SUM_AGGREGATE_473, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_474 = get___SQL_SUM_AGGREGATE_474();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_474), ___SQL_SUM_AGGREGATE_474, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_475 = get___SQL_SUM_AGGREGATE_475();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_475), ___SQL_SUM_AGGREGATE_475, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_476 = get___SQL_SUM_AGGREGATE_476();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_476), ___SQL_SUM_AGGREGATE_476, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_477 = get___SQL_SUM_AGGREGATE_477();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_477), ___SQL_SUM_AGGREGATE_477, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_478 = get___SQL_SUM_AGGREGATE_478();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_478), ___SQL_SUM_AGGREGATE_478, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_479 = get___SQL_SUM_AGGREGATE_479();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_479), ___SQL_SUM_AGGREGATE_479, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_480 = get___SQL_SUM_AGGREGATE_480();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_480), ___SQL_SUM_AGGREGATE_480, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_481 = get___SQL_SUM_AGGREGATE_481();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_481), ___SQL_SUM_AGGREGATE_481, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_482 = get___SQL_SUM_AGGREGATE_482();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_482), ___SQL_SUM_AGGREGATE_482, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_483 = get___SQL_SUM_AGGREGATE_483();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_483), ___SQL_SUM_AGGREGATE_483, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_484 = get___SQL_SUM_AGGREGATE_484();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_484), ___SQL_SUM_AGGREGATE_484, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_485 = get___SQL_SUM_AGGREGATE_485();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_485), ___SQL_SUM_AGGREGATE_485, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_486 = get___SQL_SUM_AGGREGATE_486();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_486), ___SQL_SUM_AGGREGATE_486, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_487 = get___SQL_SUM_AGGREGATE_487();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_487), ___SQL_SUM_AGGREGATE_487, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_488 = get___SQL_SUM_AGGREGATE_488();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_488), ___SQL_SUM_AGGREGATE_488, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_489 = get___SQL_SUM_AGGREGATE_489();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_489), ___SQL_SUM_AGGREGATE_489, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_490 = get___SQL_SUM_AGGREGATE_490();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_490), ___SQL_SUM_AGGREGATE_490, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_491 = get___SQL_SUM_AGGREGATE_491();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_491), ___SQL_SUM_AGGREGATE_491, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_492 = get___SQL_SUM_AGGREGATE_492();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_492), ___SQL_SUM_AGGREGATE_492, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_493 = get___SQL_SUM_AGGREGATE_493();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_493), ___SQL_SUM_AGGREGATE_493, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_494 = get___SQL_SUM_AGGREGATE_494();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_494), ___SQL_SUM_AGGREGATE_494, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_495 = get___SQL_SUM_AGGREGATE_495();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_495), ___SQL_SUM_AGGREGATE_495, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_496 = get___SQL_SUM_AGGREGATE_496();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_496), ___SQL_SUM_AGGREGATE_496, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_497 = get___SQL_SUM_AGGREGATE_497();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_497), ___SQL_SUM_AGGREGATE_497, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_498 = get___SQL_SUM_AGGREGATE_498();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_498), ___SQL_SUM_AGGREGATE_498, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_499 = get___SQL_SUM_AGGREGATE_499();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_499), ___SQL_SUM_AGGREGATE_499, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_500 = get___SQL_SUM_AGGREGATE_500();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_500), ___SQL_SUM_AGGREGATE_500, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_501 = get___SQL_SUM_AGGREGATE_501();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_501), ___SQL_SUM_AGGREGATE_501, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_502 = get___SQL_SUM_AGGREGATE_502();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_502), ___SQL_SUM_AGGREGATE_502, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_503 = get___SQL_SUM_AGGREGATE_503();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_503), ___SQL_SUM_AGGREGATE_503, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_504 = get___SQL_SUM_AGGREGATE_504();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_504), ___SQL_SUM_AGGREGATE_504, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_505 = get___SQL_SUM_AGGREGATE_505();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_505), ___SQL_SUM_AGGREGATE_505, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_506 = get___SQL_SUM_AGGREGATE_506();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_506), ___SQL_SUM_AGGREGATE_506, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_507 = get___SQL_SUM_AGGREGATE_507();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_507), ___SQL_SUM_AGGREGATE_507, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_508 = get___SQL_SUM_AGGREGATE_508();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_508), ___SQL_SUM_AGGREGATE_508, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_509 = get___SQL_SUM_AGGREGATE_509();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_509), ___SQL_SUM_AGGREGATE_509, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_510 = get___SQL_SUM_AGGREGATE_510();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_510), ___SQL_SUM_AGGREGATE_510, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_511 = get___SQL_SUM_AGGREGATE_511();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_511), ___SQL_SUM_AGGREGATE_511, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_512 = get___SQL_SUM_AGGREGATE_512();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_512), ___SQL_SUM_AGGREGATE_512, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_513 = get___SQL_SUM_AGGREGATE_513();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_513), ___SQL_SUM_AGGREGATE_513, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_514 = get___SQL_SUM_AGGREGATE_514();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_514), ___SQL_SUM_AGGREGATE_514, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_515 = get___SQL_SUM_AGGREGATE_515();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_515), ___SQL_SUM_AGGREGATE_515, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_516 = get___SQL_SUM_AGGREGATE_516();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_516), ___SQL_SUM_AGGREGATE_516, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_517 = get___SQL_SUM_AGGREGATE_517();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_517), ___SQL_SUM_AGGREGATE_517, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_518 = get___SQL_SUM_AGGREGATE_518();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_518), ___SQL_SUM_AGGREGATE_518, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_519 = get___SQL_SUM_AGGREGATE_519();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_519), ___SQL_SUM_AGGREGATE_519, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_520 = get___SQL_SUM_AGGREGATE_520();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_520), ___SQL_SUM_AGGREGATE_520, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_521 = get___SQL_SUM_AGGREGATE_521();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_521), ___SQL_SUM_AGGREGATE_521, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_522 = get___SQL_SUM_AGGREGATE_522();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_522), ___SQL_SUM_AGGREGATE_522, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_523 = get___SQL_SUM_AGGREGATE_523();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_523), ___SQL_SUM_AGGREGATE_523, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_524 = get___SQL_SUM_AGGREGATE_524();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_524), ___SQL_SUM_AGGREGATE_524, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_525 = get___SQL_SUM_AGGREGATE_525();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_525), ___SQL_SUM_AGGREGATE_525, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_526 = get___SQL_SUM_AGGREGATE_526();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_526), ___SQL_SUM_AGGREGATE_526, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_527 = get___SQL_SUM_AGGREGATE_527();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_527), ___SQL_SUM_AGGREGATE_527, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_528 = get___SQL_SUM_AGGREGATE_528();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_528), ___SQL_SUM_AGGREGATE_528, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_529 = get___SQL_SUM_AGGREGATE_529();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_529), ___SQL_SUM_AGGREGATE_529, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_530 = get___SQL_SUM_AGGREGATE_530();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_530), ___SQL_SUM_AGGREGATE_530, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_531 = get___SQL_SUM_AGGREGATE_531();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_531), ___SQL_SUM_AGGREGATE_531, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_532 = get___SQL_SUM_AGGREGATE_532();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_532), ___SQL_SUM_AGGREGATE_532, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_533 = get___SQL_SUM_AGGREGATE_533();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_533), ___SQL_SUM_AGGREGATE_533, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_534 = get___SQL_SUM_AGGREGATE_534();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_534), ___SQL_SUM_AGGREGATE_534, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_535 = get___SQL_SUM_AGGREGATE_535();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_535), ___SQL_SUM_AGGREGATE_535, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_536 = get___SQL_SUM_AGGREGATE_536();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_536), ___SQL_SUM_AGGREGATE_536, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_537 = get___SQL_SUM_AGGREGATE_537();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_537), ___SQL_SUM_AGGREGATE_537, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_538 = get___SQL_SUM_AGGREGATE_538();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_538), ___SQL_SUM_AGGREGATE_538, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_539 = get___SQL_SUM_AGGREGATE_539();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_539), ___SQL_SUM_AGGREGATE_539, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_540 = get___SQL_SUM_AGGREGATE_540();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_540), ___SQL_SUM_AGGREGATE_540, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_541 = get___SQL_SUM_AGGREGATE_541();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_541), ___SQL_SUM_AGGREGATE_541, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_542 = get___SQL_SUM_AGGREGATE_542();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_542), ___SQL_SUM_AGGREGATE_542, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_543 = get___SQL_SUM_AGGREGATE_543();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_543), ___SQL_SUM_AGGREGATE_543, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_544 = get___SQL_SUM_AGGREGATE_544();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_544), ___SQL_SUM_AGGREGATE_544, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_545 = get___SQL_SUM_AGGREGATE_545();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_545), ___SQL_SUM_AGGREGATE_545, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_546 = get___SQL_SUM_AGGREGATE_546();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_546), ___SQL_SUM_AGGREGATE_546, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_547 = get___SQL_SUM_AGGREGATE_547();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_547), ___SQL_SUM_AGGREGATE_547, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_548 = get___SQL_SUM_AGGREGATE_548();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_548), ___SQL_SUM_AGGREGATE_548, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_549 = get___SQL_SUM_AGGREGATE_549();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_549), ___SQL_SUM_AGGREGATE_549, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_550 = get___SQL_SUM_AGGREGATE_550();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_550), ___SQL_SUM_AGGREGATE_550, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_551 = get___SQL_SUM_AGGREGATE_551();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_551), ___SQL_SUM_AGGREGATE_551, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_552 = get___SQL_SUM_AGGREGATE_552();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_552), ___SQL_SUM_AGGREGATE_552, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_553 = get___SQL_SUM_AGGREGATE_553();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_553), ___SQL_SUM_AGGREGATE_553, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_554 = get___SQL_SUM_AGGREGATE_554();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_554), ___SQL_SUM_AGGREGATE_554, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_555 = get___SQL_SUM_AGGREGATE_555();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_555), ___SQL_SUM_AGGREGATE_555, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_556 = get___SQL_SUM_AGGREGATE_556();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_556), ___SQL_SUM_AGGREGATE_556, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_557 = get___SQL_SUM_AGGREGATE_557();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_557), ___SQL_SUM_AGGREGATE_557, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_558 = get___SQL_SUM_AGGREGATE_558();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_558), ___SQL_SUM_AGGREGATE_558, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_559 = get___SQL_SUM_AGGREGATE_559();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_559), ___SQL_SUM_AGGREGATE_559, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_560 = get___SQL_SUM_AGGREGATE_560();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_560), ___SQL_SUM_AGGREGATE_560, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_561 = get___SQL_SUM_AGGREGATE_561();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_561), ___SQL_SUM_AGGREGATE_561, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_562 = get___SQL_SUM_AGGREGATE_562();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_562), ___SQL_SUM_AGGREGATE_562, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_563 = get___SQL_SUM_AGGREGATE_563();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_563), ___SQL_SUM_AGGREGATE_563, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_564 = get___SQL_SUM_AGGREGATE_564();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_564), ___SQL_SUM_AGGREGATE_564, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_565 = get___SQL_SUM_AGGREGATE_565();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_565), ___SQL_SUM_AGGREGATE_565, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_566 = get___SQL_SUM_AGGREGATE_566();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_566), ___SQL_SUM_AGGREGATE_566, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_567 = get___SQL_SUM_AGGREGATE_567();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_567), ___SQL_SUM_AGGREGATE_567, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_568 = get___SQL_SUM_AGGREGATE_568();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_568), ___SQL_SUM_AGGREGATE_568, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_569 = get___SQL_SUM_AGGREGATE_569();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_569), ___SQL_SUM_AGGREGATE_569, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_570 = get___SQL_SUM_AGGREGATE_570();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_570), ___SQL_SUM_AGGREGATE_570, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_571 = get___SQL_SUM_AGGREGATE_571();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_571), ___SQL_SUM_AGGREGATE_571, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_572 = get___SQL_SUM_AGGREGATE_572();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_572), ___SQL_SUM_AGGREGATE_572, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_573 = get___SQL_SUM_AGGREGATE_573();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_573), ___SQL_SUM_AGGREGATE_573, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_574 = get___SQL_SUM_AGGREGATE_574();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_574), ___SQL_SUM_AGGREGATE_574, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_575 = get___SQL_SUM_AGGREGATE_575();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_575), ___SQL_SUM_AGGREGATE_575, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_576 = get___SQL_SUM_AGGREGATE_576();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_576), ___SQL_SUM_AGGREGATE_576, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_577 = get___SQL_SUM_AGGREGATE_577();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_577), ___SQL_SUM_AGGREGATE_577, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_578 = get___SQL_SUM_AGGREGATE_578();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_578), ___SQL_SUM_AGGREGATE_578, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_579 = get___SQL_SUM_AGGREGATE_579();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_579), ___SQL_SUM_AGGREGATE_579, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_580 = get___SQL_SUM_AGGREGATE_580();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_580), ___SQL_SUM_AGGREGATE_580, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_581 = get___SQL_SUM_AGGREGATE_581();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_581), ___SQL_SUM_AGGREGATE_581, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_582 = get___SQL_SUM_AGGREGATE_582();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_582), ___SQL_SUM_AGGREGATE_582, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_583 = get___SQL_SUM_AGGREGATE_583();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_583), ___SQL_SUM_AGGREGATE_583, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_584 = get___SQL_SUM_AGGREGATE_584();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_584), ___SQL_SUM_AGGREGATE_584, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_585 = get___SQL_SUM_AGGREGATE_585();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_585), ___SQL_SUM_AGGREGATE_585, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_586 = get___SQL_SUM_AGGREGATE_586();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_586), ___SQL_SUM_AGGREGATE_586, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_587 = get___SQL_SUM_AGGREGATE_587();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_587), ___SQL_SUM_AGGREGATE_587, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_588 = get___SQL_SUM_AGGREGATE_588();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_588), ___SQL_SUM_AGGREGATE_588, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_589 = get___SQL_SUM_AGGREGATE_589();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_589), ___SQL_SUM_AGGREGATE_589, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_590 = get___SQL_SUM_AGGREGATE_590();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_590), ___SQL_SUM_AGGREGATE_590, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_591 = get___SQL_SUM_AGGREGATE_591();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_591), ___SQL_SUM_AGGREGATE_591, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_592 = get___SQL_SUM_AGGREGATE_592();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_592), ___SQL_SUM_AGGREGATE_592, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_593 = get___SQL_SUM_AGGREGATE_593();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_593), ___SQL_SUM_AGGREGATE_593, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_594 = get___SQL_SUM_AGGREGATE_594();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_594), ___SQL_SUM_AGGREGATE_594, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_595 = get___SQL_SUM_AGGREGATE_595();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_595), ___SQL_SUM_AGGREGATE_595, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_596 = get___SQL_SUM_AGGREGATE_596();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_596), ___SQL_SUM_AGGREGATE_596, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_597 = get___SQL_SUM_AGGREGATE_597();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_597), ___SQL_SUM_AGGREGATE_597, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_598 = get___SQL_SUM_AGGREGATE_598();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_598), ___SQL_SUM_AGGREGATE_598, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_599 = get___SQL_SUM_AGGREGATE_599();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_599), ___SQL_SUM_AGGREGATE_599, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_600 = get___SQL_SUM_AGGREGATE_600();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_600), ___SQL_SUM_AGGREGATE_600, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_601 = get___SQL_SUM_AGGREGATE_601();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_601), ___SQL_SUM_AGGREGATE_601, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_602 = get___SQL_SUM_AGGREGATE_602();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_602), ___SQL_SUM_AGGREGATE_602, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_603 = get___SQL_SUM_AGGREGATE_603();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_603), ___SQL_SUM_AGGREGATE_603, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_604 = get___SQL_SUM_AGGREGATE_604();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_604), ___SQL_SUM_AGGREGATE_604, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_605 = get___SQL_SUM_AGGREGATE_605();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_605), ___SQL_SUM_AGGREGATE_605, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_606 = get___SQL_SUM_AGGREGATE_606();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_606), ___SQL_SUM_AGGREGATE_606, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_607 = get___SQL_SUM_AGGREGATE_607();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_607), ___SQL_SUM_AGGREGATE_607, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_608 = get___SQL_SUM_AGGREGATE_608();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_608), ___SQL_SUM_AGGREGATE_608, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_609 = get___SQL_SUM_AGGREGATE_609();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_609), ___SQL_SUM_AGGREGATE_609, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_610 = get___SQL_SUM_AGGREGATE_610();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_610), ___SQL_SUM_AGGREGATE_610, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_611 = get___SQL_SUM_AGGREGATE_611();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_611), ___SQL_SUM_AGGREGATE_611, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_612 = get___SQL_SUM_AGGREGATE_612();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_612), ___SQL_SUM_AGGREGATE_612, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_613 = get___SQL_SUM_AGGREGATE_613();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_613), ___SQL_SUM_AGGREGATE_613, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_614 = get___SQL_SUM_AGGREGATE_614();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_614), ___SQL_SUM_AGGREGATE_614, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_615 = get___SQL_SUM_AGGREGATE_615();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_615), ___SQL_SUM_AGGREGATE_615, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_616 = get___SQL_SUM_AGGREGATE_616();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_616), ___SQL_SUM_AGGREGATE_616, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_617 = get___SQL_SUM_AGGREGATE_617();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_617), ___SQL_SUM_AGGREGATE_617, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_618 = get___SQL_SUM_AGGREGATE_618();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_618), ___SQL_SUM_AGGREGATE_618, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_619 = get___SQL_SUM_AGGREGATE_619();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_619), ___SQL_SUM_AGGREGATE_619, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_620 = get___SQL_SUM_AGGREGATE_620();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_620), ___SQL_SUM_AGGREGATE_620, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_621 = get___SQL_SUM_AGGREGATE_621();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_621), ___SQL_SUM_AGGREGATE_621, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_622 = get___SQL_SUM_AGGREGATE_622();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_622), ___SQL_SUM_AGGREGATE_622, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_623 = get___SQL_SUM_AGGREGATE_623();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_623), ___SQL_SUM_AGGREGATE_623, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_624 = get___SQL_SUM_AGGREGATE_624();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_624), ___SQL_SUM_AGGREGATE_624, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_625 = get___SQL_SUM_AGGREGATE_625();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_625), ___SQL_SUM_AGGREGATE_625, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_626 = get___SQL_SUM_AGGREGATE_626();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_626), ___SQL_SUM_AGGREGATE_626, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_627 = get___SQL_SUM_AGGREGATE_627();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_627), ___SQL_SUM_AGGREGATE_627, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_628 = get___SQL_SUM_AGGREGATE_628();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_628), ___SQL_SUM_AGGREGATE_628, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_629 = get___SQL_SUM_AGGREGATE_629();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_629), ___SQL_SUM_AGGREGATE_629, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_630 = get___SQL_SUM_AGGREGATE_630();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_630), ___SQL_SUM_AGGREGATE_630, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_631 = get___SQL_SUM_AGGREGATE_631();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_631), ___SQL_SUM_AGGREGATE_631, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_632 = get___SQL_SUM_AGGREGATE_632();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_632), ___SQL_SUM_AGGREGATE_632, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_633 = get___SQL_SUM_AGGREGATE_633();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_633), ___SQL_SUM_AGGREGATE_633, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_634 = get___SQL_SUM_AGGREGATE_634();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_634), ___SQL_SUM_AGGREGATE_634, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_635 = get___SQL_SUM_AGGREGATE_635();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_635), ___SQL_SUM_AGGREGATE_635, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_636 = get___SQL_SUM_AGGREGATE_636();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_636), ___SQL_SUM_AGGREGATE_636, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_637 = get___SQL_SUM_AGGREGATE_637();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_637), ___SQL_SUM_AGGREGATE_637, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_638 = get___SQL_SUM_AGGREGATE_638();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_638), ___SQL_SUM_AGGREGATE_638, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_639 = get___SQL_SUM_AGGREGATE_639();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_639), ___SQL_SUM_AGGREGATE_639, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_640 = get___SQL_SUM_AGGREGATE_640();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_640), ___SQL_SUM_AGGREGATE_640, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_641 = get___SQL_SUM_AGGREGATE_641();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_641), ___SQL_SUM_AGGREGATE_641, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_642 = get___SQL_SUM_AGGREGATE_642();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_642), ___SQL_SUM_AGGREGATE_642, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_643 = get___SQL_SUM_AGGREGATE_643();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_643), ___SQL_SUM_AGGREGATE_643, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_644 = get___SQL_SUM_AGGREGATE_644();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_644), ___SQL_SUM_AGGREGATE_644, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_645 = get___SQL_SUM_AGGREGATE_645();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_645), ___SQL_SUM_AGGREGATE_645, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_646 = get___SQL_SUM_AGGREGATE_646();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_646), ___SQL_SUM_AGGREGATE_646, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_647 = get___SQL_SUM_AGGREGATE_647();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_647), ___SQL_SUM_AGGREGATE_647, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_648 = get___SQL_SUM_AGGREGATE_648();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_648), ___SQL_SUM_AGGREGATE_648, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_649 = get___SQL_SUM_AGGREGATE_649();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_649), ___SQL_SUM_AGGREGATE_649, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_650 = get___SQL_SUM_AGGREGATE_650();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_650), ___SQL_SUM_AGGREGATE_650, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_651 = get___SQL_SUM_AGGREGATE_651();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_651), ___SQL_SUM_AGGREGATE_651, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_652 = get___SQL_SUM_AGGREGATE_652();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_652), ___SQL_SUM_AGGREGATE_652, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_653 = get___SQL_SUM_AGGREGATE_653();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_653), ___SQL_SUM_AGGREGATE_653, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_654 = get___SQL_SUM_AGGREGATE_654();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_654), ___SQL_SUM_AGGREGATE_654, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_655 = get___SQL_SUM_AGGREGATE_655();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_655), ___SQL_SUM_AGGREGATE_655, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_656 = get___SQL_SUM_AGGREGATE_656();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_656), ___SQL_SUM_AGGREGATE_656, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_657 = get___SQL_SUM_AGGREGATE_657();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_657), ___SQL_SUM_AGGREGATE_657, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_658 = get___SQL_SUM_AGGREGATE_658();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_658), ___SQL_SUM_AGGREGATE_658, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_659 = get___SQL_SUM_AGGREGATE_659();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_659), ___SQL_SUM_AGGREGATE_659, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_660 = get___SQL_SUM_AGGREGATE_660();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_660), ___SQL_SUM_AGGREGATE_660, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_661 = get___SQL_SUM_AGGREGATE_661();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_661), ___SQL_SUM_AGGREGATE_661, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_662 = get___SQL_SUM_AGGREGATE_662();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_662), ___SQL_SUM_AGGREGATE_662, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_663 = get___SQL_SUM_AGGREGATE_663();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_663), ___SQL_SUM_AGGREGATE_663, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_664 = get___SQL_SUM_AGGREGATE_664();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_664), ___SQL_SUM_AGGREGATE_664, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_665 = get___SQL_SUM_AGGREGATE_665();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_665), ___SQL_SUM_AGGREGATE_665, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_666 = get___SQL_SUM_AGGREGATE_666();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_666), ___SQL_SUM_AGGREGATE_666, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_667 = get___SQL_SUM_AGGREGATE_667();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_667), ___SQL_SUM_AGGREGATE_667, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_668 = get___SQL_SUM_AGGREGATE_668();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_668), ___SQL_SUM_AGGREGATE_668, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_669 = get___SQL_SUM_AGGREGATE_669();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_669), ___SQL_SUM_AGGREGATE_669, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_670 = get___SQL_SUM_AGGREGATE_670();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_670), ___SQL_SUM_AGGREGATE_670, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_671 = get___SQL_SUM_AGGREGATE_671();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_671), ___SQL_SUM_AGGREGATE_671, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_672 = get___SQL_SUM_AGGREGATE_672();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_672), ___SQL_SUM_AGGREGATE_672, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_673 = get___SQL_SUM_AGGREGATE_673();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_673), ___SQL_SUM_AGGREGATE_673, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_674 = get___SQL_SUM_AGGREGATE_674();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_674), ___SQL_SUM_AGGREGATE_674, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_675 = get___SQL_SUM_AGGREGATE_675();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_675), ___SQL_SUM_AGGREGATE_675, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_676 = get___SQL_SUM_AGGREGATE_676();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_676), ___SQL_SUM_AGGREGATE_676, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_677 = get___SQL_SUM_AGGREGATE_677();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_677), ___SQL_SUM_AGGREGATE_677, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_678 = get___SQL_SUM_AGGREGATE_678();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_678), ___SQL_SUM_AGGREGATE_678, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_679 = get___SQL_SUM_AGGREGATE_679();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_679), ___SQL_SUM_AGGREGATE_679, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_680 = get___SQL_SUM_AGGREGATE_680();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_680), ___SQL_SUM_AGGREGATE_680, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_681 = get___SQL_SUM_AGGREGATE_681();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_681), ___SQL_SUM_AGGREGATE_681, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_682 = get___SQL_SUM_AGGREGATE_682();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_682), ___SQL_SUM_AGGREGATE_682, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_683 = get___SQL_SUM_AGGREGATE_683();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_683), ___SQL_SUM_AGGREGATE_683, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_684 = get___SQL_SUM_AGGREGATE_684();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_684), ___SQL_SUM_AGGREGATE_684, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_685 = get___SQL_SUM_AGGREGATE_685();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_685), ___SQL_SUM_AGGREGATE_685, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_686 = get___SQL_SUM_AGGREGATE_686();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_686), ___SQL_SUM_AGGREGATE_686, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_687 = get___SQL_SUM_AGGREGATE_687();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_687), ___SQL_SUM_AGGREGATE_687, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_688 = get___SQL_SUM_AGGREGATE_688();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_688), ___SQL_SUM_AGGREGATE_688, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_689 = get___SQL_SUM_AGGREGATE_689();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_689), ___SQL_SUM_AGGREGATE_689, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_690 = get___SQL_SUM_AGGREGATE_690();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_690), ___SQL_SUM_AGGREGATE_690, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_691 = get___SQL_SUM_AGGREGATE_691();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_691), ___SQL_SUM_AGGREGATE_691, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_692 = get___SQL_SUM_AGGREGATE_692();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_692), ___SQL_SUM_AGGREGATE_692, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_693 = get___SQL_SUM_AGGREGATE_693();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_693), ___SQL_SUM_AGGREGATE_693, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_694 = get___SQL_SUM_AGGREGATE_694();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_694), ___SQL_SUM_AGGREGATE_694, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_695 = get___SQL_SUM_AGGREGATE_695();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_695), ___SQL_SUM_AGGREGATE_695, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_696 = get___SQL_SUM_AGGREGATE_696();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_696), ___SQL_SUM_AGGREGATE_696, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_697 = get___SQL_SUM_AGGREGATE_697();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_697), ___SQL_SUM_AGGREGATE_697, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_698 = get___SQL_SUM_AGGREGATE_698();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_698), ___SQL_SUM_AGGREGATE_698, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_699 = get___SQL_SUM_AGGREGATE_699();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_699), ___SQL_SUM_AGGREGATE_699, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_700 = get___SQL_SUM_AGGREGATE_700();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_700), ___SQL_SUM_AGGREGATE_700, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_701 = get___SQL_SUM_AGGREGATE_701();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_701), ___SQL_SUM_AGGREGATE_701, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_702 = get___SQL_SUM_AGGREGATE_702();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_702), ___SQL_SUM_AGGREGATE_702, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_703 = get___SQL_SUM_AGGREGATE_703();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_703), ___SQL_SUM_AGGREGATE_703, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_704 = get___SQL_SUM_AGGREGATE_704();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_704), ___SQL_SUM_AGGREGATE_704, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_705 = get___SQL_SUM_AGGREGATE_705();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_705), ___SQL_SUM_AGGREGATE_705, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_706 = get___SQL_SUM_AGGREGATE_706();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_706), ___SQL_SUM_AGGREGATE_706, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_707 = get___SQL_SUM_AGGREGATE_707();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_707), ___SQL_SUM_AGGREGATE_707, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_708 = get___SQL_SUM_AGGREGATE_708();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_708), ___SQL_SUM_AGGREGATE_708, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_709 = get___SQL_SUM_AGGREGATE_709();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_709), ___SQL_SUM_AGGREGATE_709, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_710 = get___SQL_SUM_AGGREGATE_710();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_710), ___SQL_SUM_AGGREGATE_710, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_711 = get___SQL_SUM_AGGREGATE_711();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_711), ___SQL_SUM_AGGREGATE_711, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_712 = get___SQL_SUM_AGGREGATE_712();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_712), ___SQL_SUM_AGGREGATE_712, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_713 = get___SQL_SUM_AGGREGATE_713();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_713), ___SQL_SUM_AGGREGATE_713, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_714 = get___SQL_SUM_AGGREGATE_714();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_714), ___SQL_SUM_AGGREGATE_714, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_715 = get___SQL_SUM_AGGREGATE_715();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_715), ___SQL_SUM_AGGREGATE_715, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_716 = get___SQL_SUM_AGGREGATE_716();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_716), ___SQL_SUM_AGGREGATE_716, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_717 = get___SQL_SUM_AGGREGATE_717();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_717), ___SQL_SUM_AGGREGATE_717, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_718 = get___SQL_SUM_AGGREGATE_718();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_718), ___SQL_SUM_AGGREGATE_718, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_719 = get___SQL_SUM_AGGREGATE_719();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_719), ___SQL_SUM_AGGREGATE_719, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_720 = get___SQL_SUM_AGGREGATE_720();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_720), ___SQL_SUM_AGGREGATE_720, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_721 = get___SQL_SUM_AGGREGATE_721();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_721), ___SQL_SUM_AGGREGATE_721, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_722 = get___SQL_SUM_AGGREGATE_722();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_722), ___SQL_SUM_AGGREGATE_722, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_723 = get___SQL_SUM_AGGREGATE_723();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_723), ___SQL_SUM_AGGREGATE_723, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_724 = get___SQL_SUM_AGGREGATE_724();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_724), ___SQL_SUM_AGGREGATE_724, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_725 = get___SQL_SUM_AGGREGATE_725();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_725), ___SQL_SUM_AGGREGATE_725, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_726 = get___SQL_SUM_AGGREGATE_726();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_726), ___SQL_SUM_AGGREGATE_726, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_727 = get___SQL_SUM_AGGREGATE_727();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_727), ___SQL_SUM_AGGREGATE_727, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_728 = get___SQL_SUM_AGGREGATE_728();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_728), ___SQL_SUM_AGGREGATE_728, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_729 = get___SQL_SUM_AGGREGATE_729();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_729), ___SQL_SUM_AGGREGATE_729, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_730 = get___SQL_SUM_AGGREGATE_730();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_730), ___SQL_SUM_AGGREGATE_730, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_731 = get___SQL_SUM_AGGREGATE_731();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_731), ___SQL_SUM_AGGREGATE_731, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_732 = get___SQL_SUM_AGGREGATE_732();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_732), ___SQL_SUM_AGGREGATE_732, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_733 = get___SQL_SUM_AGGREGATE_733();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_733), ___SQL_SUM_AGGREGATE_733, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_734 = get___SQL_SUM_AGGREGATE_734();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_734), ___SQL_SUM_AGGREGATE_734, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_735 = get___SQL_SUM_AGGREGATE_735();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_735), ___SQL_SUM_AGGREGATE_735, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_736 = get___SQL_SUM_AGGREGATE_736();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_736), ___SQL_SUM_AGGREGATE_736, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_737 = get___SQL_SUM_AGGREGATE_737();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_737), ___SQL_SUM_AGGREGATE_737, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_738 = get___SQL_SUM_AGGREGATE_738();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_738), ___SQL_SUM_AGGREGATE_738, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_739 = get___SQL_SUM_AGGREGATE_739();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_739), ___SQL_SUM_AGGREGATE_739, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_740 = get___SQL_SUM_AGGREGATE_740();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_740), ___SQL_SUM_AGGREGATE_740, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_741 = get___SQL_SUM_AGGREGATE_741();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_741), ___SQL_SUM_AGGREGATE_741, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_742 = get___SQL_SUM_AGGREGATE_742();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_742), ___SQL_SUM_AGGREGATE_742, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_743 = get___SQL_SUM_AGGREGATE_743();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_743), ___SQL_SUM_AGGREGATE_743, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_744 = get___SQL_SUM_AGGREGATE_744();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_744), ___SQL_SUM_AGGREGATE_744, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_745 = get___SQL_SUM_AGGREGATE_745();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_745), ___SQL_SUM_AGGREGATE_745, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_746 = get___SQL_SUM_AGGREGATE_746();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_746), ___SQL_SUM_AGGREGATE_746, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_747 = get___SQL_SUM_AGGREGATE_747();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_747), ___SQL_SUM_AGGREGATE_747, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_748 = get___SQL_SUM_AGGREGATE_748();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_748), ___SQL_SUM_AGGREGATE_748, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_749 = get___SQL_SUM_AGGREGATE_749();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_749), ___SQL_SUM_AGGREGATE_749, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_750 = get___SQL_SUM_AGGREGATE_750();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_750), ___SQL_SUM_AGGREGATE_750, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_751 = get___SQL_SUM_AGGREGATE_751();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_751), ___SQL_SUM_AGGREGATE_751, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_752 = get___SQL_SUM_AGGREGATE_752();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_752), ___SQL_SUM_AGGREGATE_752, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_753 = get___SQL_SUM_AGGREGATE_753();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_753), ___SQL_SUM_AGGREGATE_753, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_754 = get___SQL_SUM_AGGREGATE_754();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_754), ___SQL_SUM_AGGREGATE_754, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_755 = get___SQL_SUM_AGGREGATE_755();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_755), ___SQL_SUM_AGGREGATE_755, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_756 = get___SQL_SUM_AGGREGATE_756();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_756), ___SQL_SUM_AGGREGATE_756, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_757 = get___SQL_SUM_AGGREGATE_757();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_757), ___SQL_SUM_AGGREGATE_757, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_758 = get___SQL_SUM_AGGREGATE_758();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_758), ___SQL_SUM_AGGREGATE_758, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_759 = get___SQL_SUM_AGGREGATE_759();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_759), ___SQL_SUM_AGGREGATE_759, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_760 = get___SQL_SUM_AGGREGATE_760();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_760), ___SQL_SUM_AGGREGATE_760, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_761 = get___SQL_SUM_AGGREGATE_761();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_761), ___SQL_SUM_AGGREGATE_761, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_762 = get___SQL_SUM_AGGREGATE_762();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_762), ___SQL_SUM_AGGREGATE_762, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_763 = get___SQL_SUM_AGGREGATE_763();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_763), ___SQL_SUM_AGGREGATE_763, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_764 = get___SQL_SUM_AGGREGATE_764();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_764), ___SQL_SUM_AGGREGATE_764, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_765 = get___SQL_SUM_AGGREGATE_765();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_765), ___SQL_SUM_AGGREGATE_765, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_766 = get___SQL_SUM_AGGREGATE_766();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_766), ___SQL_SUM_AGGREGATE_766, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_767 = get___SQL_SUM_AGGREGATE_767();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_767), ___SQL_SUM_AGGREGATE_767, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_768 = get___SQL_SUM_AGGREGATE_768();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_768), ___SQL_SUM_AGGREGATE_768, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_769 = get___SQL_SUM_AGGREGATE_769();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_769), ___SQL_SUM_AGGREGATE_769, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_770 = get___SQL_SUM_AGGREGATE_770();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_770), ___SQL_SUM_AGGREGATE_770, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_771 = get___SQL_SUM_AGGREGATE_771();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_771), ___SQL_SUM_AGGREGATE_771, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_772 = get___SQL_SUM_AGGREGATE_772();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_772), ___SQL_SUM_AGGREGATE_772, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_773 = get___SQL_SUM_AGGREGATE_773();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_773), ___SQL_SUM_AGGREGATE_773, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_774 = get___SQL_SUM_AGGREGATE_774();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_774), ___SQL_SUM_AGGREGATE_774, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_775 = get___SQL_SUM_AGGREGATE_775();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_775), ___SQL_SUM_AGGREGATE_775, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_776 = get___SQL_SUM_AGGREGATE_776();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_776), ___SQL_SUM_AGGREGATE_776, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_777 = get___SQL_SUM_AGGREGATE_777();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_777), ___SQL_SUM_AGGREGATE_777, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_778 = get___SQL_SUM_AGGREGATE_778();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_778), ___SQL_SUM_AGGREGATE_778, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_779 = get___SQL_SUM_AGGREGATE_779();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_779), ___SQL_SUM_AGGREGATE_779, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_780 = get___SQL_SUM_AGGREGATE_780();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_780), ___SQL_SUM_AGGREGATE_780, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_781 = get___SQL_SUM_AGGREGATE_781();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_781), ___SQL_SUM_AGGREGATE_781, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_782 = get___SQL_SUM_AGGREGATE_782();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_782), ___SQL_SUM_AGGREGATE_782, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_783 = get___SQL_SUM_AGGREGATE_783();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_783), ___SQL_SUM_AGGREGATE_783, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_784 = get___SQL_SUM_AGGREGATE_784();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_784), ___SQL_SUM_AGGREGATE_784, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_785 = get___SQL_SUM_AGGREGATE_785();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_785), ___SQL_SUM_AGGREGATE_785, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_786 = get___SQL_SUM_AGGREGATE_786();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_786), ___SQL_SUM_AGGREGATE_786, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_787 = get___SQL_SUM_AGGREGATE_787();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_787), ___SQL_SUM_AGGREGATE_787, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_788 = get___SQL_SUM_AGGREGATE_788();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_788), ___SQL_SUM_AGGREGATE_788, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_789 = get___SQL_SUM_AGGREGATE_789();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_789), ___SQL_SUM_AGGREGATE_789, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_790 = get___SQL_SUM_AGGREGATE_790();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_790), ___SQL_SUM_AGGREGATE_790, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_791 = get___SQL_SUM_AGGREGATE_791();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_791), ___SQL_SUM_AGGREGATE_791, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_792 = get___SQL_SUM_AGGREGATE_792();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_792), ___SQL_SUM_AGGREGATE_792, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_793 = get___SQL_SUM_AGGREGATE_793();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_793), ___SQL_SUM_AGGREGATE_793, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_794 = get___SQL_SUM_AGGREGATE_794();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_794), ___SQL_SUM_AGGREGATE_794, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_795 = get___SQL_SUM_AGGREGATE_795();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_795), ___SQL_SUM_AGGREGATE_795, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_796 = get___SQL_SUM_AGGREGATE_796();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_796), ___SQL_SUM_AGGREGATE_796, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_797 = get___SQL_SUM_AGGREGATE_797();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_797), ___SQL_SUM_AGGREGATE_797, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_798 = get___SQL_SUM_AGGREGATE_798();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_798), ___SQL_SUM_AGGREGATE_798, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_799 = get___SQL_SUM_AGGREGATE_799();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_799), ___SQL_SUM_AGGREGATE_799, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_800 = get___SQL_SUM_AGGREGATE_800();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_800), ___SQL_SUM_AGGREGATE_800, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_801 = get___SQL_SUM_AGGREGATE_801();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_801), ___SQL_SUM_AGGREGATE_801, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_802 = get___SQL_SUM_AGGREGATE_802();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_802), ___SQL_SUM_AGGREGATE_802, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_803 = get___SQL_SUM_AGGREGATE_803();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_803), ___SQL_SUM_AGGREGATE_803, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_804 = get___SQL_SUM_AGGREGATE_804();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_804), ___SQL_SUM_AGGREGATE_804, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_805 = get___SQL_SUM_AGGREGATE_805();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_805), ___SQL_SUM_AGGREGATE_805, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_806 = get___SQL_SUM_AGGREGATE_806();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_806), ___SQL_SUM_AGGREGATE_806, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_807 = get___SQL_SUM_AGGREGATE_807();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_807), ___SQL_SUM_AGGREGATE_807, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_808 = get___SQL_SUM_AGGREGATE_808();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_808), ___SQL_SUM_AGGREGATE_808, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_809 = get___SQL_SUM_AGGREGATE_809();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_809), ___SQL_SUM_AGGREGATE_809, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_810 = get___SQL_SUM_AGGREGATE_810();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_810), ___SQL_SUM_AGGREGATE_810, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_811 = get___SQL_SUM_AGGREGATE_811();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_811), ___SQL_SUM_AGGREGATE_811, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_812 = get___SQL_SUM_AGGREGATE_812();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_812), ___SQL_SUM_AGGREGATE_812, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_813 = get___SQL_SUM_AGGREGATE_813();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_813), ___SQL_SUM_AGGREGATE_813, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_814 = get___SQL_SUM_AGGREGATE_814();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_814), ___SQL_SUM_AGGREGATE_814, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_815 = get___SQL_SUM_AGGREGATE_815();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_815), ___SQL_SUM_AGGREGATE_815, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_816 = get___SQL_SUM_AGGREGATE_816();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_816), ___SQL_SUM_AGGREGATE_816, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_817 = get___SQL_SUM_AGGREGATE_817();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_817), ___SQL_SUM_AGGREGATE_817, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_818 = get___SQL_SUM_AGGREGATE_818();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_818), ___SQL_SUM_AGGREGATE_818, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_819 = get___SQL_SUM_AGGREGATE_819();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_819), ___SQL_SUM_AGGREGATE_819, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_820 = get___SQL_SUM_AGGREGATE_820();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_820), ___SQL_SUM_AGGREGATE_820, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_821 = get___SQL_SUM_AGGREGATE_821();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_821), ___SQL_SUM_AGGREGATE_821, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_822 = get___SQL_SUM_AGGREGATE_822();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_822), ___SQL_SUM_AGGREGATE_822, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_823 = get___SQL_SUM_AGGREGATE_823();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_823), ___SQL_SUM_AGGREGATE_823, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_824 = get___SQL_SUM_AGGREGATE_824();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_824), ___SQL_SUM_AGGREGATE_824, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_825 = get___SQL_SUM_AGGREGATE_825();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_825), ___SQL_SUM_AGGREGATE_825, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_826 = get___SQL_SUM_AGGREGATE_826();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_826), ___SQL_SUM_AGGREGATE_826, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_827 = get___SQL_SUM_AGGREGATE_827();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_827), ___SQL_SUM_AGGREGATE_827, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_828 = get___SQL_SUM_AGGREGATE_828();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_828), ___SQL_SUM_AGGREGATE_828, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_829 = get___SQL_SUM_AGGREGATE_829();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_829), ___SQL_SUM_AGGREGATE_829, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_830 = get___SQL_SUM_AGGREGATE_830();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_830), ___SQL_SUM_AGGREGATE_830, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_831 = get___SQL_SUM_AGGREGATE_831();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_831), ___SQL_SUM_AGGREGATE_831, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_832 = get___SQL_SUM_AGGREGATE_832();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_832), ___SQL_SUM_AGGREGATE_832, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_833 = get___SQL_SUM_AGGREGATE_833();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_833), ___SQL_SUM_AGGREGATE_833, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_834 = get___SQL_SUM_AGGREGATE_834();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_834), ___SQL_SUM_AGGREGATE_834, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_835 = get___SQL_SUM_AGGREGATE_835();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_835), ___SQL_SUM_AGGREGATE_835, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_836 = get___SQL_SUM_AGGREGATE_836();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_836), ___SQL_SUM_AGGREGATE_836, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_837 = get___SQL_SUM_AGGREGATE_837();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_837), ___SQL_SUM_AGGREGATE_837, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_838 = get___SQL_SUM_AGGREGATE_838();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_838), ___SQL_SUM_AGGREGATE_838, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_839 = get___SQL_SUM_AGGREGATE_839();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_839), ___SQL_SUM_AGGREGATE_839, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_840 = get___SQL_SUM_AGGREGATE_840();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_840), ___SQL_SUM_AGGREGATE_840, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_841 = get___SQL_SUM_AGGREGATE_841();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_841), ___SQL_SUM_AGGREGATE_841, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_842 = get___SQL_SUM_AGGREGATE_842();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_842), ___SQL_SUM_AGGREGATE_842, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_843 = get___SQL_SUM_AGGREGATE_843();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_843), ___SQL_SUM_AGGREGATE_843, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_844 = get___SQL_SUM_AGGREGATE_844();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_844), ___SQL_SUM_AGGREGATE_844, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_845 = get___SQL_SUM_AGGREGATE_845();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_845), ___SQL_SUM_AGGREGATE_845, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_846 = get___SQL_SUM_AGGREGATE_846();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_846), ___SQL_SUM_AGGREGATE_846, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_847 = get___SQL_SUM_AGGREGATE_847();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_847), ___SQL_SUM_AGGREGATE_847, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_848 = get___SQL_SUM_AGGREGATE_848();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_848), ___SQL_SUM_AGGREGATE_848, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_849 = get___SQL_SUM_AGGREGATE_849();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_849), ___SQL_SUM_AGGREGATE_849, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_850 = get___SQL_SUM_AGGREGATE_850();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_850), ___SQL_SUM_AGGREGATE_850, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_851 = get___SQL_SUM_AGGREGATE_851();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_851), ___SQL_SUM_AGGREGATE_851, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_852 = get___SQL_SUM_AGGREGATE_852();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_852), ___SQL_SUM_AGGREGATE_852, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_853 = get___SQL_SUM_AGGREGATE_853();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_853), ___SQL_SUM_AGGREGATE_853, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_854 = get___SQL_SUM_AGGREGATE_854();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_854), ___SQL_SUM_AGGREGATE_854, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_855 = get___SQL_SUM_AGGREGATE_855();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_855), ___SQL_SUM_AGGREGATE_855, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_856 = get___SQL_SUM_AGGREGATE_856();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_856), ___SQL_SUM_AGGREGATE_856, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_857 = get___SQL_SUM_AGGREGATE_857();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_857), ___SQL_SUM_AGGREGATE_857, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_858 = get___SQL_SUM_AGGREGATE_858();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_858), ___SQL_SUM_AGGREGATE_858, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_859 = get___SQL_SUM_AGGREGATE_859();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_859), ___SQL_SUM_AGGREGATE_859, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_860 = get___SQL_SUM_AGGREGATE_860();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_860), ___SQL_SUM_AGGREGATE_860, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_861 = get___SQL_SUM_AGGREGATE_861();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_861), ___SQL_SUM_AGGREGATE_861, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_862 = get___SQL_SUM_AGGREGATE_862();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_862), ___SQL_SUM_AGGREGATE_862, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_863 = get___SQL_SUM_AGGREGATE_863();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_863), ___SQL_SUM_AGGREGATE_863, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_864 = get___SQL_SUM_AGGREGATE_864();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_864), ___SQL_SUM_AGGREGATE_864, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_865 = get___SQL_SUM_AGGREGATE_865();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_865), ___SQL_SUM_AGGREGATE_865, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_866 = get___SQL_SUM_AGGREGATE_866();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_866), ___SQL_SUM_AGGREGATE_866, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_867 = get___SQL_SUM_AGGREGATE_867();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_867), ___SQL_SUM_AGGREGATE_867, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_868 = get___SQL_SUM_AGGREGATE_868();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_868), ___SQL_SUM_AGGREGATE_868, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_869 = get___SQL_SUM_AGGREGATE_869();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_869), ___SQL_SUM_AGGREGATE_869, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_870 = get___SQL_SUM_AGGREGATE_870();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_870), ___SQL_SUM_AGGREGATE_870, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_871 = get___SQL_SUM_AGGREGATE_871();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_871), ___SQL_SUM_AGGREGATE_871, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_872 = get___SQL_SUM_AGGREGATE_872();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_872), ___SQL_SUM_AGGREGATE_872, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_873 = get___SQL_SUM_AGGREGATE_873();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_873), ___SQL_SUM_AGGREGATE_873, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_874 = get___SQL_SUM_AGGREGATE_874();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_874), ___SQL_SUM_AGGREGATE_874, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_875 = get___SQL_SUM_AGGREGATE_875();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_875), ___SQL_SUM_AGGREGATE_875, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_876 = get___SQL_SUM_AGGREGATE_876();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_876), ___SQL_SUM_AGGREGATE_876, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_877 = get___SQL_SUM_AGGREGATE_877();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_877), ___SQL_SUM_AGGREGATE_877, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_878 = get___SQL_SUM_AGGREGATE_878();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_878), ___SQL_SUM_AGGREGATE_878, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_879 = get___SQL_SUM_AGGREGATE_879();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_879), ___SQL_SUM_AGGREGATE_879, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_880 = get___SQL_SUM_AGGREGATE_880();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_880), ___SQL_SUM_AGGREGATE_880, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_881 = get___SQL_SUM_AGGREGATE_881();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_881), ___SQL_SUM_AGGREGATE_881, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_882 = get___SQL_SUM_AGGREGATE_882();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_882), ___SQL_SUM_AGGREGATE_882, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_883 = get___SQL_SUM_AGGREGATE_883();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_883), ___SQL_SUM_AGGREGATE_883, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_884 = get___SQL_SUM_AGGREGATE_884();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_884), ___SQL_SUM_AGGREGATE_884, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_885 = get___SQL_SUM_AGGREGATE_885();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_885), ___SQL_SUM_AGGREGATE_885, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_886 = get___SQL_SUM_AGGREGATE_886();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_886), ___SQL_SUM_AGGREGATE_886, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_887 = get___SQL_SUM_AGGREGATE_887();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_887), ___SQL_SUM_AGGREGATE_887, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_888 = get___SQL_SUM_AGGREGATE_888();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_888), ___SQL_SUM_AGGREGATE_888, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_889 = get___SQL_SUM_AGGREGATE_889();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_889), ___SQL_SUM_AGGREGATE_889, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_890 = get___SQL_SUM_AGGREGATE_890();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_890), ___SQL_SUM_AGGREGATE_890, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_891 = get___SQL_SUM_AGGREGATE_891();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_891), ___SQL_SUM_AGGREGATE_891, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_892 = get___SQL_SUM_AGGREGATE_892();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_892), ___SQL_SUM_AGGREGATE_892, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_893 = get___SQL_SUM_AGGREGATE_893();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_893), ___SQL_SUM_AGGREGATE_893, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_894 = get___SQL_SUM_AGGREGATE_894();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_894), ___SQL_SUM_AGGREGATE_894, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_895 = get___SQL_SUM_AGGREGATE_895();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_895), ___SQL_SUM_AGGREGATE_895, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_896 = get___SQL_SUM_AGGREGATE_896();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_896), ___SQL_SUM_AGGREGATE_896, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_897 = get___SQL_SUM_AGGREGATE_897();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_897), ___SQL_SUM_AGGREGATE_897, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_898 = get___SQL_SUM_AGGREGATE_898();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_898), ___SQL_SUM_AGGREGATE_898, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_899 = get___SQL_SUM_AGGREGATE_899();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_899), ___SQL_SUM_AGGREGATE_899, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_900 = get___SQL_SUM_AGGREGATE_900();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_900), ___SQL_SUM_AGGREGATE_900, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_901 = get___SQL_SUM_AGGREGATE_901();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_901), ___SQL_SUM_AGGREGATE_901, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_902 = get___SQL_SUM_AGGREGATE_902();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_902), ___SQL_SUM_AGGREGATE_902, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_903 = get___SQL_SUM_AGGREGATE_903();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_903), ___SQL_SUM_AGGREGATE_903, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_904 = get___SQL_SUM_AGGREGATE_904();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_904), ___SQL_SUM_AGGREGATE_904, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_905 = get___SQL_SUM_AGGREGATE_905();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_905), ___SQL_SUM_AGGREGATE_905, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_906 = get___SQL_SUM_AGGREGATE_906();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_906), ___SQL_SUM_AGGREGATE_906, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_907 = get___SQL_SUM_AGGREGATE_907();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_907), ___SQL_SUM_AGGREGATE_907, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_908 = get___SQL_SUM_AGGREGATE_908();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_908), ___SQL_SUM_AGGREGATE_908, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_909 = get___SQL_SUM_AGGREGATE_909();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_909), ___SQL_SUM_AGGREGATE_909, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_910 = get___SQL_SUM_AGGREGATE_910();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_910), ___SQL_SUM_AGGREGATE_910, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_911 = get___SQL_SUM_AGGREGATE_911();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_911), ___SQL_SUM_AGGREGATE_911, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_912 = get___SQL_SUM_AGGREGATE_912();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_912), ___SQL_SUM_AGGREGATE_912, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_913 = get___SQL_SUM_AGGREGATE_913();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_913), ___SQL_SUM_AGGREGATE_913, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_914 = get___SQL_SUM_AGGREGATE_914();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_914), ___SQL_SUM_AGGREGATE_914, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_915 = get___SQL_SUM_AGGREGATE_915();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_915), ___SQL_SUM_AGGREGATE_915, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_916 = get___SQL_SUM_AGGREGATE_916();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_916), ___SQL_SUM_AGGREGATE_916, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_917 = get___SQL_SUM_AGGREGATE_917();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_917), ___SQL_SUM_AGGREGATE_917, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_918 = get___SQL_SUM_AGGREGATE_918();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_918), ___SQL_SUM_AGGREGATE_918, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_919 = get___SQL_SUM_AGGREGATE_919();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_919), ___SQL_SUM_AGGREGATE_919, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_920 = get___SQL_SUM_AGGREGATE_920();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_920), ___SQL_SUM_AGGREGATE_920, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_921 = get___SQL_SUM_AGGREGATE_921();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_921), ___SQL_SUM_AGGREGATE_921, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_922 = get___SQL_SUM_AGGREGATE_922();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_922), ___SQL_SUM_AGGREGATE_922, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_923 = get___SQL_SUM_AGGREGATE_923();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_923), ___SQL_SUM_AGGREGATE_923, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_924 = get___SQL_SUM_AGGREGATE_924();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_924), ___SQL_SUM_AGGREGATE_924, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_925 = get___SQL_SUM_AGGREGATE_925();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_925), ___SQL_SUM_AGGREGATE_925, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_926 = get___SQL_SUM_AGGREGATE_926();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_926), ___SQL_SUM_AGGREGATE_926, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_927 = get___SQL_SUM_AGGREGATE_927();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_927), ___SQL_SUM_AGGREGATE_927, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_928 = get___SQL_SUM_AGGREGATE_928();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_928), ___SQL_SUM_AGGREGATE_928, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_929 = get___SQL_SUM_AGGREGATE_929();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_929), ___SQL_SUM_AGGREGATE_929, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_930 = get___SQL_SUM_AGGREGATE_930();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_930), ___SQL_SUM_AGGREGATE_930, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_931 = get___SQL_SUM_AGGREGATE_931();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_931), ___SQL_SUM_AGGREGATE_931, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_932 = get___SQL_SUM_AGGREGATE_932();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_932), ___SQL_SUM_AGGREGATE_932, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_933 = get___SQL_SUM_AGGREGATE_933();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_933), ___SQL_SUM_AGGREGATE_933, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_934 = get___SQL_SUM_AGGREGATE_934();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_934), ___SQL_SUM_AGGREGATE_934, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_935 = get___SQL_SUM_AGGREGATE_935();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_935), ___SQL_SUM_AGGREGATE_935, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_936 = get___SQL_SUM_AGGREGATE_936();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_936), ___SQL_SUM_AGGREGATE_936, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_937 = get___SQL_SUM_AGGREGATE_937();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_937), ___SQL_SUM_AGGREGATE_937, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_938 = get___SQL_SUM_AGGREGATE_938();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_938), ___SQL_SUM_AGGREGATE_938, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_939 = get___SQL_SUM_AGGREGATE_939();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_939), ___SQL_SUM_AGGREGATE_939, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_940 = get___SQL_SUM_AGGREGATE_940();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_940), ___SQL_SUM_AGGREGATE_940, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_941 = get___SQL_SUM_AGGREGATE_941();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_941), ___SQL_SUM_AGGREGATE_941, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_942 = get___SQL_SUM_AGGREGATE_942();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_942), ___SQL_SUM_AGGREGATE_942, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_943 = get___SQL_SUM_AGGREGATE_943();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_943), ___SQL_SUM_AGGREGATE_943, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_944 = get___SQL_SUM_AGGREGATE_944();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_944), ___SQL_SUM_AGGREGATE_944, "\t");
      ar << "\n";
      const DOUBLE_TYPE ___SQL_SUM_AGGREGATE_945 = get___SQL_SUM_AGGREGATE_945();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_945), ___SQL_SUM_AGGREGATE_945, "\t");
      ar << "\n";
      const long ___SQL_SUM_AGGREGATE_946 = get___SQL_SUM_AGGREGATE_946();
      dbtoaster::serialize_nvp_tabbed(ar, STRING(__SQL_SUM_AGGREGATE_946), ___SQL_SUM_AGGREGATE_946, "\t");
    }
  
    /* Functions returning / computing the results of top level queries */
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_1() const {
      return __SQL_SUM_AGGREGATE_1;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_2() const {
      return __SQL_SUM_AGGREGATE_2;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_3() const {
      return __SQL_SUM_AGGREGATE_3;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_4() const {
      return __SQL_SUM_AGGREGATE_4;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_5() const {
      return __SQL_SUM_AGGREGATE_5;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_6() const {
      return __SQL_SUM_AGGREGATE_6;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_7() const {
      return __SQL_SUM_AGGREGATE_7;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_8() const {
      return __SQL_SUM_AGGREGATE_8;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_9() const {
      return __SQL_SUM_AGGREGATE_9;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_10() const {
      return __SQL_SUM_AGGREGATE_10;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_11() const {
      return __SQL_SUM_AGGREGATE_11;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_12() const {
      return __SQL_SUM_AGGREGATE_12;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_13() const {
      return __SQL_SUM_AGGREGATE_13;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_14() const {
      return __SQL_SUM_AGGREGATE_14;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_15() const {
      return __SQL_SUM_AGGREGATE_15;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_16() const {
      return __SQL_SUM_AGGREGATE_16;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_17() const {
      return __SQL_SUM_AGGREGATE_17;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_18() const {
      return __SQL_SUM_AGGREGATE_18;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_19() const {
      return __SQL_SUM_AGGREGATE_19;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_20() const {
      return __SQL_SUM_AGGREGATE_20;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_21() const {
      return __SQL_SUM_AGGREGATE_21;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_22() const {
      return __SQL_SUM_AGGREGATE_22;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_23() const {
      return __SQL_SUM_AGGREGATE_23;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_24() const {
      return __SQL_SUM_AGGREGATE_24;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_25() const {
      return __SQL_SUM_AGGREGATE_25;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_26() const {
      return __SQL_SUM_AGGREGATE_26;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_27() const {
      return __SQL_SUM_AGGREGATE_27;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_28() const {
      return __SQL_SUM_AGGREGATE_28;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_29() const {
      return __SQL_SUM_AGGREGATE_29;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_30() const {
      return __SQL_SUM_AGGREGATE_30;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_31() const {
      return __SQL_SUM_AGGREGATE_31;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_32() const {
      return __SQL_SUM_AGGREGATE_32;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_33() const {
      return __SQL_SUM_AGGREGATE_33;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_34() const {
      return __SQL_SUM_AGGREGATE_34;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_35() const {
      return __SQL_SUM_AGGREGATE_35;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_36() const {
      return __SQL_SUM_AGGREGATE_36;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_37() const {
      return __SQL_SUM_AGGREGATE_37;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_38() const {
      return __SQL_SUM_AGGREGATE_38;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_39() const {
      return __SQL_SUM_AGGREGATE_39;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_40() const {
      return __SQL_SUM_AGGREGATE_40;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_41() const {
      return __SQL_SUM_AGGREGATE_41;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_42() const {
      return __SQL_SUM_AGGREGATE_42;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_43() const {
      return __SQL_SUM_AGGREGATE_43;
    }
    const long get___SQL_SUM_AGGREGATE_44() const {
      return __SQL_SUM_AGGREGATE_44;
    }
    const long get___SQL_SUM_AGGREGATE_45() const {
      return __SQL_SUM_AGGREGATE_45;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_46() const {
      return __SQL_SUM_AGGREGATE_46;
    }
    const long get___SQL_SUM_AGGREGATE_47() const {
      return __SQL_SUM_AGGREGATE_47;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_48() const {
      return __SQL_SUM_AGGREGATE_48;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_49() const {
      return __SQL_SUM_AGGREGATE_49;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_50() const {
      return __SQL_SUM_AGGREGATE_50;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_51() const {
      return __SQL_SUM_AGGREGATE_51;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_52() const {
      return __SQL_SUM_AGGREGATE_52;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_53() const {
      return __SQL_SUM_AGGREGATE_53;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_54() const {
      return __SQL_SUM_AGGREGATE_54;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_55() const {
      return __SQL_SUM_AGGREGATE_55;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_56() const {
      return __SQL_SUM_AGGREGATE_56;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_57() const {
      return __SQL_SUM_AGGREGATE_57;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_58() const {
      return __SQL_SUM_AGGREGATE_58;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_59() const {
      return __SQL_SUM_AGGREGATE_59;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_60() const {
      return __SQL_SUM_AGGREGATE_60;
    }
    const long get___SQL_SUM_AGGREGATE_61() const {
      return __SQL_SUM_AGGREGATE_61;
    }
    const long get___SQL_SUM_AGGREGATE_62() const {
      return __SQL_SUM_AGGREGATE_62;
    }
    const long get___SQL_SUM_AGGREGATE_63() const {
      return __SQL_SUM_AGGREGATE_63;
    }
    const long get___SQL_SUM_AGGREGATE_64() const {
      return __SQL_SUM_AGGREGATE_64;
    }
    const long get___SQL_SUM_AGGREGATE_65() const {
      return __SQL_SUM_AGGREGATE_65;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_66() const {
      return __SQL_SUM_AGGREGATE_66;
    }
    const long get___SQL_SUM_AGGREGATE_67() const {
      return __SQL_SUM_AGGREGATE_67;
    }
    const long get___SQL_SUM_AGGREGATE_68() const {
      return __SQL_SUM_AGGREGATE_68;
    }
    const long get___SQL_SUM_AGGREGATE_69() const {
      return __SQL_SUM_AGGREGATE_69;
    }
    const long get___SQL_SUM_AGGREGATE_70() const {
      return __SQL_SUM_AGGREGATE_70;
    }
    const long get___SQL_SUM_AGGREGATE_71() const {
      return __SQL_SUM_AGGREGATE_71;
    }
    const long get___SQL_SUM_AGGREGATE_72() const {
      return __SQL_SUM_AGGREGATE_72;
    }
    const long get___SQL_SUM_AGGREGATE_73() const {
      return __SQL_SUM_AGGREGATE_73;
    }
    const long get___SQL_SUM_AGGREGATE_74() const {
      return __SQL_SUM_AGGREGATE_74;
    }
    const long get___SQL_SUM_AGGREGATE_75() const {
      return __SQL_SUM_AGGREGATE_75;
    }
    const long get___SQL_SUM_AGGREGATE_76() const {
      return __SQL_SUM_AGGREGATE_76;
    }
    const long get___SQL_SUM_AGGREGATE_77() const {
      return __SQL_SUM_AGGREGATE_77;
    }
    const long get___SQL_SUM_AGGREGATE_78() const {
      return __SQL_SUM_AGGREGATE_78;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_79() const {
      return __SQL_SUM_AGGREGATE_79;
    }
    const long get___SQL_SUM_AGGREGATE_80() const {
      return __SQL_SUM_AGGREGATE_80;
    }
    const long get___SQL_SUM_AGGREGATE_81() const {
      return __SQL_SUM_AGGREGATE_81;
    }
    const long get___SQL_SUM_AGGREGATE_82() const {
      return __SQL_SUM_AGGREGATE_82;
    }
    const long get___SQL_SUM_AGGREGATE_83() const {
      return __SQL_SUM_AGGREGATE_83;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_84() const {
      return __SQL_SUM_AGGREGATE_84;
    }
    const long get___SQL_SUM_AGGREGATE_85() const {
      return __SQL_SUM_AGGREGATE_85;
    }
    const long get___SQL_SUM_AGGREGATE_86() const {
      return __SQL_SUM_AGGREGATE_86;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_87() const {
      return __SQL_SUM_AGGREGATE_87;
    }
    const long get___SQL_SUM_AGGREGATE_88() const {
      return __SQL_SUM_AGGREGATE_88;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_89() const {
      return __SQL_SUM_AGGREGATE_89;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_90() const {
      return __SQL_SUM_AGGREGATE_90;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_91() const {
      return __SQL_SUM_AGGREGATE_91;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_92() const {
      return __SQL_SUM_AGGREGATE_92;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_93() const {
      return __SQL_SUM_AGGREGATE_93;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_94() const {
      return __SQL_SUM_AGGREGATE_94;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_95() const {
      return __SQL_SUM_AGGREGATE_95;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_96() const {
      return __SQL_SUM_AGGREGATE_96;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_97() const {
      return __SQL_SUM_AGGREGATE_97;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_98() const {
      return __SQL_SUM_AGGREGATE_98;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_99() const {
      return __SQL_SUM_AGGREGATE_99;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_100() const {
      return __SQL_SUM_AGGREGATE_100;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_101() const {
      return __SQL_SUM_AGGREGATE_101;
    }
    const long get___SQL_SUM_AGGREGATE_102() const {
      return __SQL_SUM_AGGREGATE_102;
    }
    const long get___SQL_SUM_AGGREGATE_103() const {
      return __SQL_SUM_AGGREGATE_103;
    }
    const long get___SQL_SUM_AGGREGATE_104() const {
      return __SQL_SUM_AGGREGATE_104;
    }
    const long get___SQL_SUM_AGGREGATE_105() const {
      return __SQL_SUM_AGGREGATE_105;
    }
    const long get___SQL_SUM_AGGREGATE_106() const {
      return __SQL_SUM_AGGREGATE_106;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_107() const {
      return __SQL_SUM_AGGREGATE_107;
    }
    const long get___SQL_SUM_AGGREGATE_108() const {
      return __SQL_SUM_AGGREGATE_108;
    }
    const long get___SQL_SUM_AGGREGATE_109() const {
      return __SQL_SUM_AGGREGATE_109;
    }
    const long get___SQL_SUM_AGGREGATE_110() const {
      return __SQL_SUM_AGGREGATE_110;
    }
    const long get___SQL_SUM_AGGREGATE_111() const {
      return __SQL_SUM_AGGREGATE_111;
    }
    const long get___SQL_SUM_AGGREGATE_112() const {
      return __SQL_SUM_AGGREGATE_112;
    }
    const long get___SQL_SUM_AGGREGATE_113() const {
      return __SQL_SUM_AGGREGATE_113;
    }
    const long get___SQL_SUM_AGGREGATE_114() const {
      return __SQL_SUM_AGGREGATE_114;
    }
    const long get___SQL_SUM_AGGREGATE_115() const {
      return __SQL_SUM_AGGREGATE_115;
    }
    const long get___SQL_SUM_AGGREGATE_116() const {
      return __SQL_SUM_AGGREGATE_116;
    }
    const long get___SQL_SUM_AGGREGATE_117() const {
      return __SQL_SUM_AGGREGATE_117;
    }
    const long get___SQL_SUM_AGGREGATE_118() const {
      return __SQL_SUM_AGGREGATE_118;
    }
    const long get___SQL_SUM_AGGREGATE_119() const {
      return __SQL_SUM_AGGREGATE_119;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_120() const {
      return __SQL_SUM_AGGREGATE_120;
    }
    const long get___SQL_SUM_AGGREGATE_121() const {
      return __SQL_SUM_AGGREGATE_121;
    }
    const long get___SQL_SUM_AGGREGATE_122() const {
      return __SQL_SUM_AGGREGATE_122;
    }
    const long get___SQL_SUM_AGGREGATE_123() const {
      return __SQL_SUM_AGGREGATE_123;
    }
    const long get___SQL_SUM_AGGREGATE_124() const {
      return __SQL_SUM_AGGREGATE_124;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_125() const {
      return __SQL_SUM_AGGREGATE_125;
    }
    const long get___SQL_SUM_AGGREGATE_126() const {
      return __SQL_SUM_AGGREGATE_126;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_127() const {
      return __SQL_SUM_AGGREGATE_127;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_128() const {
      return __SQL_SUM_AGGREGATE_128;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_129() const {
      return __SQL_SUM_AGGREGATE_129;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_130() const {
      return __SQL_SUM_AGGREGATE_130;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_131() const {
      return __SQL_SUM_AGGREGATE_131;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_132() const {
      return __SQL_SUM_AGGREGATE_132;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_133() const {
      return __SQL_SUM_AGGREGATE_133;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_134() const {
      return __SQL_SUM_AGGREGATE_134;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_135() const {
      return __SQL_SUM_AGGREGATE_135;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_136() const {
      return __SQL_SUM_AGGREGATE_136;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_137() const {
      return __SQL_SUM_AGGREGATE_137;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_138() const {
      return __SQL_SUM_AGGREGATE_138;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_139() const {
      return __SQL_SUM_AGGREGATE_139;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_140() const {
      return __SQL_SUM_AGGREGATE_140;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_141() const {
      return __SQL_SUM_AGGREGATE_141;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_142() const {
      return __SQL_SUM_AGGREGATE_142;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_143() const {
      return __SQL_SUM_AGGREGATE_143;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_144() const {
      return __SQL_SUM_AGGREGATE_144;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_145() const {
      return __SQL_SUM_AGGREGATE_145;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_146() const {
      return __SQL_SUM_AGGREGATE_146;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_147() const {
      return __SQL_SUM_AGGREGATE_147;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_148() const {
      return __SQL_SUM_AGGREGATE_148;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_149() const {
      return __SQL_SUM_AGGREGATE_149;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_150() const {
      return __SQL_SUM_AGGREGATE_150;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_151() const {
      return __SQL_SUM_AGGREGATE_151;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_152() const {
      return __SQL_SUM_AGGREGATE_152;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_153() const {
      return __SQL_SUM_AGGREGATE_153;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_154() const {
      return __SQL_SUM_AGGREGATE_154;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_155() const {
      return __SQL_SUM_AGGREGATE_155;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_156() const {
      return __SQL_SUM_AGGREGATE_156;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_157() const {
      return __SQL_SUM_AGGREGATE_157;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_158() const {
      return __SQL_SUM_AGGREGATE_158;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_159() const {
      return __SQL_SUM_AGGREGATE_159;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_160() const {
      return __SQL_SUM_AGGREGATE_160;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_161() const {
      return __SQL_SUM_AGGREGATE_161;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_162() const {
      return __SQL_SUM_AGGREGATE_162;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_163() const {
      return __SQL_SUM_AGGREGATE_163;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_164() const {
      return __SQL_SUM_AGGREGATE_164;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_165() const {
      return __SQL_SUM_AGGREGATE_165;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_166() const {
      return __SQL_SUM_AGGREGATE_166;
    }
    const long get___SQL_SUM_AGGREGATE_167() const {
      return __SQL_SUM_AGGREGATE_167;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_168() const {
      return __SQL_SUM_AGGREGATE_168;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_169() const {
      return __SQL_SUM_AGGREGATE_169;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_170() const {
      return __SQL_SUM_AGGREGATE_170;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_171() const {
      return __SQL_SUM_AGGREGATE_171;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_172() const {
      return __SQL_SUM_AGGREGATE_172;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_173() const {
      return __SQL_SUM_AGGREGATE_173;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_174() const {
      return __SQL_SUM_AGGREGATE_174;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_175() const {
      return __SQL_SUM_AGGREGATE_175;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_176() const {
      return __SQL_SUM_AGGREGATE_176;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_177() const {
      return __SQL_SUM_AGGREGATE_177;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_178() const {
      return __SQL_SUM_AGGREGATE_178;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_179() const {
      return __SQL_SUM_AGGREGATE_179;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_180() const {
      return __SQL_SUM_AGGREGATE_180;
    }
    const long get___SQL_SUM_AGGREGATE_181() const {
      return __SQL_SUM_AGGREGATE_181;
    }
    const long get___SQL_SUM_AGGREGATE_182() const {
      return __SQL_SUM_AGGREGATE_182;
    }
    const long get___SQL_SUM_AGGREGATE_183() const {
      return __SQL_SUM_AGGREGATE_183;
    }
    const long get___SQL_SUM_AGGREGATE_184() const {
      return __SQL_SUM_AGGREGATE_184;
    }
    const long get___SQL_SUM_AGGREGATE_185() const {
      return __SQL_SUM_AGGREGATE_185;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_186() const {
      return __SQL_SUM_AGGREGATE_186;
    }
    const long get___SQL_SUM_AGGREGATE_187() const {
      return __SQL_SUM_AGGREGATE_187;
    }
    const long get___SQL_SUM_AGGREGATE_188() const {
      return __SQL_SUM_AGGREGATE_188;
    }
    const long get___SQL_SUM_AGGREGATE_189() const {
      return __SQL_SUM_AGGREGATE_189;
    }
    const long get___SQL_SUM_AGGREGATE_190() const {
      return __SQL_SUM_AGGREGATE_190;
    }
    const long get___SQL_SUM_AGGREGATE_191() const {
      return __SQL_SUM_AGGREGATE_191;
    }
    const long get___SQL_SUM_AGGREGATE_192() const {
      return __SQL_SUM_AGGREGATE_192;
    }
    const long get___SQL_SUM_AGGREGATE_193() const {
      return __SQL_SUM_AGGREGATE_193;
    }
    const long get___SQL_SUM_AGGREGATE_194() const {
      return __SQL_SUM_AGGREGATE_194;
    }
    const long get___SQL_SUM_AGGREGATE_195() const {
      return __SQL_SUM_AGGREGATE_195;
    }
    const long get___SQL_SUM_AGGREGATE_196() const {
      return __SQL_SUM_AGGREGATE_196;
    }
    const long get___SQL_SUM_AGGREGATE_197() const {
      return __SQL_SUM_AGGREGATE_197;
    }
    const long get___SQL_SUM_AGGREGATE_198() const {
      return __SQL_SUM_AGGREGATE_198;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_199() const {
      return __SQL_SUM_AGGREGATE_199;
    }
    const long get___SQL_SUM_AGGREGATE_200() const {
      return __SQL_SUM_AGGREGATE_200;
    }
    const long get___SQL_SUM_AGGREGATE_201() const {
      return __SQL_SUM_AGGREGATE_201;
    }
    const long get___SQL_SUM_AGGREGATE_202() const {
      return __SQL_SUM_AGGREGATE_202;
    }
    const long get___SQL_SUM_AGGREGATE_203() const {
      return __SQL_SUM_AGGREGATE_203;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_204() const {
      return __SQL_SUM_AGGREGATE_204;
    }
    const long get___SQL_SUM_AGGREGATE_205() const {
      return __SQL_SUM_AGGREGATE_205;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_206() const {
      return __SQL_SUM_AGGREGATE_206;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_207() const {
      return __SQL_SUM_AGGREGATE_207;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_208() const {
      return __SQL_SUM_AGGREGATE_208;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_209() const {
      return __SQL_SUM_AGGREGATE_209;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_210() const {
      return __SQL_SUM_AGGREGATE_210;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_211() const {
      return __SQL_SUM_AGGREGATE_211;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_212() const {
      return __SQL_SUM_AGGREGATE_212;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_213() const {
      return __SQL_SUM_AGGREGATE_213;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_214() const {
      return __SQL_SUM_AGGREGATE_214;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_215() const {
      return __SQL_SUM_AGGREGATE_215;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_216() const {
      return __SQL_SUM_AGGREGATE_216;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_217() const {
      return __SQL_SUM_AGGREGATE_217;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_218() const {
      return __SQL_SUM_AGGREGATE_218;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_219() const {
      return __SQL_SUM_AGGREGATE_219;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_220() const {
      return __SQL_SUM_AGGREGATE_220;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_221() const {
      return __SQL_SUM_AGGREGATE_221;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_222() const {
      return __SQL_SUM_AGGREGATE_222;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_223() const {
      return __SQL_SUM_AGGREGATE_223;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_224() const {
      return __SQL_SUM_AGGREGATE_224;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_225() const {
      return __SQL_SUM_AGGREGATE_225;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_226() const {
      return __SQL_SUM_AGGREGATE_226;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_227() const {
      return __SQL_SUM_AGGREGATE_227;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_228() const {
      return __SQL_SUM_AGGREGATE_228;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_229() const {
      return __SQL_SUM_AGGREGATE_229;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_230() const {
      return __SQL_SUM_AGGREGATE_230;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_231() const {
      return __SQL_SUM_AGGREGATE_231;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_232() const {
      return __SQL_SUM_AGGREGATE_232;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_233() const {
      return __SQL_SUM_AGGREGATE_233;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_234() const {
      return __SQL_SUM_AGGREGATE_234;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_235() const {
      return __SQL_SUM_AGGREGATE_235;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_236() const {
      return __SQL_SUM_AGGREGATE_236;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_237() const {
      return __SQL_SUM_AGGREGATE_237;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_238() const {
      return __SQL_SUM_AGGREGATE_238;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_239() const {
      return __SQL_SUM_AGGREGATE_239;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_240() const {
      return __SQL_SUM_AGGREGATE_240;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_241() const {
      return __SQL_SUM_AGGREGATE_241;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_242() const {
      return __SQL_SUM_AGGREGATE_242;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_243() const {
      return __SQL_SUM_AGGREGATE_243;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_244() const {
      return __SQL_SUM_AGGREGATE_244;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_245() const {
      return __SQL_SUM_AGGREGATE_245;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_246() const {
      return __SQL_SUM_AGGREGATE_246;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_247() const {
      return __SQL_SUM_AGGREGATE_247;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_248() const {
      return __SQL_SUM_AGGREGATE_248;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_249() const {
      return __SQL_SUM_AGGREGATE_249;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_250() const {
      return __SQL_SUM_AGGREGATE_250;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_251() const {
      return __SQL_SUM_AGGREGATE_251;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_252() const {
      return __SQL_SUM_AGGREGATE_252;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_253() const {
      return __SQL_SUM_AGGREGATE_253;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_254() const {
      return __SQL_SUM_AGGREGATE_254;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_255() const {
      return __SQL_SUM_AGGREGATE_255;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_256() const {
      return __SQL_SUM_AGGREGATE_256;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_257() const {
      return __SQL_SUM_AGGREGATE_257;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_258() const {
      return __SQL_SUM_AGGREGATE_258;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_259() const {
      return __SQL_SUM_AGGREGATE_259;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_260() const {
      return __SQL_SUM_AGGREGATE_260;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_261() const {
      return __SQL_SUM_AGGREGATE_261;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_262() const {
      return __SQL_SUM_AGGREGATE_262;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_263() const {
      return __SQL_SUM_AGGREGATE_263;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_264() const {
      return __SQL_SUM_AGGREGATE_264;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_265() const {
      return __SQL_SUM_AGGREGATE_265;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_266() const {
      return __SQL_SUM_AGGREGATE_266;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_267() const {
      return __SQL_SUM_AGGREGATE_267;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_268() const {
      return __SQL_SUM_AGGREGATE_268;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_269() const {
      return __SQL_SUM_AGGREGATE_269;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_270() const {
      return __SQL_SUM_AGGREGATE_270;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_271() const {
      return __SQL_SUM_AGGREGATE_271;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_272() const {
      return __SQL_SUM_AGGREGATE_272;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_273() const {
      return __SQL_SUM_AGGREGATE_273;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_274() const {
      return __SQL_SUM_AGGREGATE_274;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_275() const {
      return __SQL_SUM_AGGREGATE_275;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_276() const {
      return __SQL_SUM_AGGREGATE_276;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_277() const {
      return __SQL_SUM_AGGREGATE_277;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_278() const {
      return __SQL_SUM_AGGREGATE_278;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_279() const {
      return __SQL_SUM_AGGREGATE_279;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_280() const {
      return __SQL_SUM_AGGREGATE_280;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_281() const {
      return __SQL_SUM_AGGREGATE_281;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_282() const {
      return __SQL_SUM_AGGREGATE_282;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_283() const {
      return __SQL_SUM_AGGREGATE_283;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_284() const {
      return __SQL_SUM_AGGREGATE_284;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_285() const {
      return __SQL_SUM_AGGREGATE_285;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_286() const {
      return __SQL_SUM_AGGREGATE_286;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_287() const {
      return __SQL_SUM_AGGREGATE_287;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_288() const {
      return __SQL_SUM_AGGREGATE_288;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_289() const {
      return __SQL_SUM_AGGREGATE_289;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_290() const {
      return __SQL_SUM_AGGREGATE_290;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_291() const {
      return __SQL_SUM_AGGREGATE_291;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_292() const {
      return __SQL_SUM_AGGREGATE_292;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_293() const {
      return __SQL_SUM_AGGREGATE_293;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_294() const {
      return __SQL_SUM_AGGREGATE_294;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_295() const {
      return __SQL_SUM_AGGREGATE_295;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_296() const {
      return __SQL_SUM_AGGREGATE_296;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_297() const {
      return __SQL_SUM_AGGREGATE_297;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_298() const {
      return __SQL_SUM_AGGREGATE_298;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_299() const {
      return __SQL_SUM_AGGREGATE_299;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_300() const {
      return __SQL_SUM_AGGREGATE_300;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_301() const {
      return __SQL_SUM_AGGREGATE_301;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_302() const {
      return __SQL_SUM_AGGREGATE_302;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_303() const {
      return __SQL_SUM_AGGREGATE_303;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_304() const {
      return __SQL_SUM_AGGREGATE_304;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_305() const {
      return __SQL_SUM_AGGREGATE_305;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_306() const {
      return __SQL_SUM_AGGREGATE_306;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_307() const {
      return __SQL_SUM_AGGREGATE_307;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_308() const {
      return __SQL_SUM_AGGREGATE_308;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_309() const {
      return __SQL_SUM_AGGREGATE_309;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_310() const {
      return __SQL_SUM_AGGREGATE_310;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_311() const {
      return __SQL_SUM_AGGREGATE_311;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_312() const {
      return __SQL_SUM_AGGREGATE_312;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_313() const {
      return __SQL_SUM_AGGREGATE_313;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_314() const {
      return __SQL_SUM_AGGREGATE_314;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_315() const {
      return __SQL_SUM_AGGREGATE_315;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_316() const {
      return __SQL_SUM_AGGREGATE_316;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_317() const {
      return __SQL_SUM_AGGREGATE_317;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_318() const {
      return __SQL_SUM_AGGREGATE_318;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_319() const {
      return __SQL_SUM_AGGREGATE_319;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_320() const {
      return __SQL_SUM_AGGREGATE_320;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_321() const {
      return __SQL_SUM_AGGREGATE_321;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_322() const {
      return __SQL_SUM_AGGREGATE_322;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_323() const {
      return __SQL_SUM_AGGREGATE_323;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_324() const {
      return __SQL_SUM_AGGREGATE_324;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_325() const {
      return __SQL_SUM_AGGREGATE_325;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_326() const {
      return __SQL_SUM_AGGREGATE_326;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_327() const {
      return __SQL_SUM_AGGREGATE_327;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_328() const {
      return __SQL_SUM_AGGREGATE_328;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_329() const {
      return __SQL_SUM_AGGREGATE_329;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_330() const {
      return __SQL_SUM_AGGREGATE_330;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_331() const {
      return __SQL_SUM_AGGREGATE_331;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_332() const {
      return __SQL_SUM_AGGREGATE_332;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_333() const {
      return __SQL_SUM_AGGREGATE_333;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_334() const {
      return __SQL_SUM_AGGREGATE_334;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_335() const {
      return __SQL_SUM_AGGREGATE_335;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_336() const {
      return __SQL_SUM_AGGREGATE_336;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_337() const {
      return __SQL_SUM_AGGREGATE_337;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_338() const {
      return __SQL_SUM_AGGREGATE_338;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_339() const {
      return __SQL_SUM_AGGREGATE_339;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_340() const {
      return __SQL_SUM_AGGREGATE_340;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_341() const {
      return __SQL_SUM_AGGREGATE_341;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_342() const {
      return __SQL_SUM_AGGREGATE_342;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_343() const {
      return __SQL_SUM_AGGREGATE_343;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_344() const {
      return __SQL_SUM_AGGREGATE_344;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_345() const {
      return __SQL_SUM_AGGREGATE_345;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_346() const {
      return __SQL_SUM_AGGREGATE_346;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_347() const {
      return __SQL_SUM_AGGREGATE_347;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_348() const {
      return __SQL_SUM_AGGREGATE_348;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_349() const {
      return __SQL_SUM_AGGREGATE_349;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_350() const {
      return __SQL_SUM_AGGREGATE_350;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_351() const {
      return __SQL_SUM_AGGREGATE_351;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_352() const {
      return __SQL_SUM_AGGREGATE_352;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_353() const {
      return __SQL_SUM_AGGREGATE_353;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_354() const {
      return __SQL_SUM_AGGREGATE_354;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_355() const {
      return __SQL_SUM_AGGREGATE_355;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_356() const {
      return __SQL_SUM_AGGREGATE_356;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_357() const {
      return __SQL_SUM_AGGREGATE_357;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_358() const {
      return __SQL_SUM_AGGREGATE_358;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_359() const {
      return __SQL_SUM_AGGREGATE_359;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_360() const {
      return __SQL_SUM_AGGREGATE_360;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_361() const {
      return __SQL_SUM_AGGREGATE_361;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_362() const {
      return __SQL_SUM_AGGREGATE_362;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_363() const {
      return __SQL_SUM_AGGREGATE_363;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_364() const {
      return __SQL_SUM_AGGREGATE_364;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_365() const {
      return __SQL_SUM_AGGREGATE_365;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_366() const {
      return __SQL_SUM_AGGREGATE_366;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_367() const {
      return __SQL_SUM_AGGREGATE_367;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_368() const {
      return __SQL_SUM_AGGREGATE_368;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_369() const {
      return __SQL_SUM_AGGREGATE_369;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_370() const {
      return __SQL_SUM_AGGREGATE_370;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_371() const {
      return __SQL_SUM_AGGREGATE_371;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_372() const {
      return __SQL_SUM_AGGREGATE_372;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_373() const {
      return __SQL_SUM_AGGREGATE_373;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_374() const {
      return __SQL_SUM_AGGREGATE_374;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_375() const {
      return __SQL_SUM_AGGREGATE_375;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_376() const {
      return __SQL_SUM_AGGREGATE_376;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_377() const {
      return __SQL_SUM_AGGREGATE_377;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_378() const {
      return __SQL_SUM_AGGREGATE_378;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_379() const {
      return __SQL_SUM_AGGREGATE_379;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_380() const {
      return __SQL_SUM_AGGREGATE_380;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_381() const {
      return __SQL_SUM_AGGREGATE_381;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_382() const {
      return __SQL_SUM_AGGREGATE_382;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_383() const {
      return __SQL_SUM_AGGREGATE_383;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_384() const {
      return __SQL_SUM_AGGREGATE_384;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_385() const {
      return __SQL_SUM_AGGREGATE_385;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_386() const {
      return __SQL_SUM_AGGREGATE_386;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_387() const {
      return __SQL_SUM_AGGREGATE_387;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_388() const {
      return __SQL_SUM_AGGREGATE_388;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_389() const {
      return __SQL_SUM_AGGREGATE_389;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_390() const {
      return __SQL_SUM_AGGREGATE_390;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_391() const {
      return __SQL_SUM_AGGREGATE_391;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_392() const {
      return __SQL_SUM_AGGREGATE_392;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_393() const {
      return __SQL_SUM_AGGREGATE_393;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_394() const {
      return __SQL_SUM_AGGREGATE_394;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_395() const {
      return __SQL_SUM_AGGREGATE_395;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_396() const {
      return __SQL_SUM_AGGREGATE_396;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_397() const {
      return __SQL_SUM_AGGREGATE_397;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_398() const {
      return __SQL_SUM_AGGREGATE_398;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_399() const {
      return __SQL_SUM_AGGREGATE_399;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_400() const {
      return __SQL_SUM_AGGREGATE_400;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_401() const {
      return __SQL_SUM_AGGREGATE_401;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_402() const {
      return __SQL_SUM_AGGREGATE_402;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_403() const {
      return __SQL_SUM_AGGREGATE_403;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_404() const {
      return __SQL_SUM_AGGREGATE_404;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_405() const {
      return __SQL_SUM_AGGREGATE_405;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_406() const {
      return __SQL_SUM_AGGREGATE_406;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_407() const {
      return __SQL_SUM_AGGREGATE_407;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_408() const {
      return __SQL_SUM_AGGREGATE_408;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_409() const {
      return __SQL_SUM_AGGREGATE_409;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_410() const {
      return __SQL_SUM_AGGREGATE_410;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_411() const {
      return __SQL_SUM_AGGREGATE_411;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_412() const {
      return __SQL_SUM_AGGREGATE_412;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_413() const {
      return __SQL_SUM_AGGREGATE_413;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_414() const {
      return __SQL_SUM_AGGREGATE_414;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_415() const {
      return __SQL_SUM_AGGREGATE_415;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_416() const {
      return __SQL_SUM_AGGREGATE_416;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_417() const {
      return __SQL_SUM_AGGREGATE_417;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_418() const {
      return __SQL_SUM_AGGREGATE_418;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_419() const {
      return __SQL_SUM_AGGREGATE_419;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_420() const {
      return __SQL_SUM_AGGREGATE_420;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_421() const {
      return __SQL_SUM_AGGREGATE_421;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_422() const {
      return __SQL_SUM_AGGREGATE_422;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_423() const {
      return __SQL_SUM_AGGREGATE_423;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_424() const {
      return __SQL_SUM_AGGREGATE_424;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_425() const {
      return __SQL_SUM_AGGREGATE_425;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_426() const {
      return __SQL_SUM_AGGREGATE_426;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_427() const {
      return __SQL_SUM_AGGREGATE_427;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_428() const {
      return __SQL_SUM_AGGREGATE_428;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_429() const {
      return __SQL_SUM_AGGREGATE_429;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_430() const {
      return __SQL_SUM_AGGREGATE_430;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_431() const {
      return __SQL_SUM_AGGREGATE_431;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_432() const {
      return __SQL_SUM_AGGREGATE_432;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_433() const {
      return __SQL_SUM_AGGREGATE_433;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_434() const {
      return __SQL_SUM_AGGREGATE_434;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_435() const {
      return __SQL_SUM_AGGREGATE_435;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_436() const {
      return __SQL_SUM_AGGREGATE_436;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_437() const {
      return __SQL_SUM_AGGREGATE_437;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_438() const {
      return __SQL_SUM_AGGREGATE_438;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_439() const {
      return __SQL_SUM_AGGREGATE_439;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_440() const {
      return __SQL_SUM_AGGREGATE_440;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_441() const {
      return __SQL_SUM_AGGREGATE_441;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_442() const {
      return __SQL_SUM_AGGREGATE_442;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_443() const {
      return __SQL_SUM_AGGREGATE_443;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_444() const {
      return __SQL_SUM_AGGREGATE_444;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_445() const {
      return __SQL_SUM_AGGREGATE_445;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_446() const {
      return __SQL_SUM_AGGREGATE_446;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_447() const {
      return __SQL_SUM_AGGREGATE_447;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_448() const {
      return __SQL_SUM_AGGREGATE_448;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_449() const {
      return __SQL_SUM_AGGREGATE_449;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_450() const {
      return __SQL_SUM_AGGREGATE_450;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_451() const {
      return __SQL_SUM_AGGREGATE_451;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_452() const {
      return __SQL_SUM_AGGREGATE_452;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_453() const {
      return __SQL_SUM_AGGREGATE_453;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_454() const {
      return __SQL_SUM_AGGREGATE_454;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_455() const {
      return __SQL_SUM_AGGREGATE_455;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_456() const {
      return __SQL_SUM_AGGREGATE_456;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_457() const {
      return __SQL_SUM_AGGREGATE_457;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_458() const {
      return __SQL_SUM_AGGREGATE_458;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_459() const {
      return __SQL_SUM_AGGREGATE_459;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_460() const {
      return __SQL_SUM_AGGREGATE_460;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_461() const {
      return __SQL_SUM_AGGREGATE_461;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_462() const {
      return __SQL_SUM_AGGREGATE_462;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_463() const {
      return __SQL_SUM_AGGREGATE_463;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_464() const {
      return __SQL_SUM_AGGREGATE_464;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_465() const {
      return __SQL_SUM_AGGREGATE_465;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_466() const {
      return __SQL_SUM_AGGREGATE_466;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_467() const {
      return __SQL_SUM_AGGREGATE_467;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_468() const {
      return __SQL_SUM_AGGREGATE_468;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_469() const {
      return __SQL_SUM_AGGREGATE_469;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_470() const {
      return __SQL_SUM_AGGREGATE_470;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_471() const {
      return __SQL_SUM_AGGREGATE_471;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_472() const {
      return __SQL_SUM_AGGREGATE_472;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_473() const {
      return __SQL_SUM_AGGREGATE_473;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_474() const {
      return __SQL_SUM_AGGREGATE_474;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_475() const {
      return __SQL_SUM_AGGREGATE_475;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_476() const {
      return __SQL_SUM_AGGREGATE_476;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_477() const {
      return __SQL_SUM_AGGREGATE_477;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_478() const {
      return __SQL_SUM_AGGREGATE_478;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_479() const {
      return __SQL_SUM_AGGREGATE_479;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_480() const {
      return __SQL_SUM_AGGREGATE_480;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_481() const {
      return __SQL_SUM_AGGREGATE_481;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_482() const {
      return __SQL_SUM_AGGREGATE_482;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_483() const {
      return __SQL_SUM_AGGREGATE_483;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_484() const {
      return __SQL_SUM_AGGREGATE_484;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_485() const {
      return __SQL_SUM_AGGREGATE_485;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_486() const {
      return __SQL_SUM_AGGREGATE_486;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_487() const {
      return __SQL_SUM_AGGREGATE_487;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_488() const {
      return __SQL_SUM_AGGREGATE_488;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_489() const {
      return __SQL_SUM_AGGREGATE_489;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_490() const {
      return __SQL_SUM_AGGREGATE_490;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_491() const {
      return __SQL_SUM_AGGREGATE_491;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_492() const {
      return __SQL_SUM_AGGREGATE_492;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_493() const {
      return __SQL_SUM_AGGREGATE_493;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_494() const {
      return __SQL_SUM_AGGREGATE_494;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_495() const {
      return __SQL_SUM_AGGREGATE_495;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_496() const {
      return __SQL_SUM_AGGREGATE_496;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_497() const {
      return __SQL_SUM_AGGREGATE_497;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_498() const {
      return __SQL_SUM_AGGREGATE_498;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_499() const {
      return __SQL_SUM_AGGREGATE_499;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_500() const {
      return __SQL_SUM_AGGREGATE_500;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_501() const {
      return __SQL_SUM_AGGREGATE_501;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_502() const {
      return __SQL_SUM_AGGREGATE_502;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_503() const {
      return __SQL_SUM_AGGREGATE_503;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_504() const {
      return __SQL_SUM_AGGREGATE_504;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_505() const {
      return __SQL_SUM_AGGREGATE_505;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_506() const {
      return __SQL_SUM_AGGREGATE_506;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_507() const {
      return __SQL_SUM_AGGREGATE_507;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_508() const {
      return __SQL_SUM_AGGREGATE_508;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_509() const {
      return __SQL_SUM_AGGREGATE_509;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_510() const {
      return __SQL_SUM_AGGREGATE_510;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_511() const {
      return __SQL_SUM_AGGREGATE_511;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_512() const {
      return __SQL_SUM_AGGREGATE_512;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_513() const {
      return __SQL_SUM_AGGREGATE_513;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_514() const {
      return __SQL_SUM_AGGREGATE_514;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_515() const {
      return __SQL_SUM_AGGREGATE_515;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_516() const {
      return __SQL_SUM_AGGREGATE_516;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_517() const {
      return __SQL_SUM_AGGREGATE_517;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_518() const {
      return __SQL_SUM_AGGREGATE_518;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_519() const {
      return __SQL_SUM_AGGREGATE_519;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_520() const {
      return __SQL_SUM_AGGREGATE_520;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_521() const {
      return __SQL_SUM_AGGREGATE_521;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_522() const {
      return __SQL_SUM_AGGREGATE_522;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_523() const {
      return __SQL_SUM_AGGREGATE_523;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_524() const {
      return __SQL_SUM_AGGREGATE_524;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_525() const {
      return __SQL_SUM_AGGREGATE_525;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_526() const {
      return __SQL_SUM_AGGREGATE_526;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_527() const {
      return __SQL_SUM_AGGREGATE_527;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_528() const {
      return __SQL_SUM_AGGREGATE_528;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_529() const {
      return __SQL_SUM_AGGREGATE_529;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_530() const {
      return __SQL_SUM_AGGREGATE_530;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_531() const {
      return __SQL_SUM_AGGREGATE_531;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_532() const {
      return __SQL_SUM_AGGREGATE_532;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_533() const {
      return __SQL_SUM_AGGREGATE_533;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_534() const {
      return __SQL_SUM_AGGREGATE_534;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_535() const {
      return __SQL_SUM_AGGREGATE_535;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_536() const {
      return __SQL_SUM_AGGREGATE_536;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_537() const {
      return __SQL_SUM_AGGREGATE_537;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_538() const {
      return __SQL_SUM_AGGREGATE_538;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_539() const {
      return __SQL_SUM_AGGREGATE_539;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_540() const {
      return __SQL_SUM_AGGREGATE_540;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_541() const {
      return __SQL_SUM_AGGREGATE_541;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_542() const {
      return __SQL_SUM_AGGREGATE_542;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_543() const {
      return __SQL_SUM_AGGREGATE_543;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_544() const {
      return __SQL_SUM_AGGREGATE_544;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_545() const {
      return __SQL_SUM_AGGREGATE_545;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_546() const {
      return __SQL_SUM_AGGREGATE_546;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_547() const {
      return __SQL_SUM_AGGREGATE_547;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_548() const {
      return __SQL_SUM_AGGREGATE_548;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_549() const {
      return __SQL_SUM_AGGREGATE_549;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_550() const {
      return __SQL_SUM_AGGREGATE_550;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_551() const {
      return __SQL_SUM_AGGREGATE_551;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_552() const {
      return __SQL_SUM_AGGREGATE_552;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_553() const {
      return __SQL_SUM_AGGREGATE_553;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_554() const {
      return __SQL_SUM_AGGREGATE_554;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_555() const {
      return __SQL_SUM_AGGREGATE_555;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_556() const {
      return __SQL_SUM_AGGREGATE_556;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_557() const {
      return __SQL_SUM_AGGREGATE_557;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_558() const {
      return __SQL_SUM_AGGREGATE_558;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_559() const {
      return __SQL_SUM_AGGREGATE_559;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_560() const {
      return __SQL_SUM_AGGREGATE_560;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_561() const {
      return __SQL_SUM_AGGREGATE_561;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_562() const {
      return __SQL_SUM_AGGREGATE_562;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_563() const {
      return __SQL_SUM_AGGREGATE_563;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_564() const {
      return __SQL_SUM_AGGREGATE_564;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_565() const {
      return __SQL_SUM_AGGREGATE_565;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_566() const {
      return __SQL_SUM_AGGREGATE_566;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_567() const {
      return __SQL_SUM_AGGREGATE_567;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_568() const {
      return __SQL_SUM_AGGREGATE_568;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_569() const {
      return __SQL_SUM_AGGREGATE_569;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_570() const {
      return __SQL_SUM_AGGREGATE_570;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_571() const {
      return __SQL_SUM_AGGREGATE_571;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_572() const {
      return __SQL_SUM_AGGREGATE_572;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_573() const {
      return __SQL_SUM_AGGREGATE_573;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_574() const {
      return __SQL_SUM_AGGREGATE_574;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_575() const {
      return __SQL_SUM_AGGREGATE_575;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_576() const {
      return __SQL_SUM_AGGREGATE_576;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_577() const {
      return __SQL_SUM_AGGREGATE_577;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_578() const {
      return __SQL_SUM_AGGREGATE_578;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_579() const {
      return __SQL_SUM_AGGREGATE_579;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_580() const {
      return __SQL_SUM_AGGREGATE_580;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_581() const {
      return __SQL_SUM_AGGREGATE_581;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_582() const {
      return __SQL_SUM_AGGREGATE_582;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_583() const {
      return __SQL_SUM_AGGREGATE_583;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_584() const {
      return __SQL_SUM_AGGREGATE_584;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_585() const {
      return __SQL_SUM_AGGREGATE_585;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_586() const {
      return __SQL_SUM_AGGREGATE_586;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_587() const {
      return __SQL_SUM_AGGREGATE_587;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_588() const {
      return __SQL_SUM_AGGREGATE_588;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_589() const {
      return __SQL_SUM_AGGREGATE_589;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_590() const {
      return __SQL_SUM_AGGREGATE_590;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_591() const {
      return __SQL_SUM_AGGREGATE_591;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_592() const {
      return __SQL_SUM_AGGREGATE_592;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_593() const {
      return __SQL_SUM_AGGREGATE_593;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_594() const {
      return __SQL_SUM_AGGREGATE_594;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_595() const {
      return __SQL_SUM_AGGREGATE_595;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_596() const {
      return __SQL_SUM_AGGREGATE_596;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_597() const {
      return __SQL_SUM_AGGREGATE_597;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_598() const {
      return __SQL_SUM_AGGREGATE_598;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_599() const {
      return __SQL_SUM_AGGREGATE_599;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_600() const {
      return __SQL_SUM_AGGREGATE_600;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_601() const {
      return __SQL_SUM_AGGREGATE_601;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_602() const {
      return __SQL_SUM_AGGREGATE_602;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_603() const {
      return __SQL_SUM_AGGREGATE_603;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_604() const {
      return __SQL_SUM_AGGREGATE_604;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_605() const {
      return __SQL_SUM_AGGREGATE_605;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_606() const {
      return __SQL_SUM_AGGREGATE_606;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_607() const {
      return __SQL_SUM_AGGREGATE_607;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_608() const {
      return __SQL_SUM_AGGREGATE_608;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_609() const {
      return __SQL_SUM_AGGREGATE_609;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_610() const {
      return __SQL_SUM_AGGREGATE_610;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_611() const {
      return __SQL_SUM_AGGREGATE_611;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_612() const {
      return __SQL_SUM_AGGREGATE_612;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_613() const {
      return __SQL_SUM_AGGREGATE_613;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_614() const {
      return __SQL_SUM_AGGREGATE_614;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_615() const {
      return __SQL_SUM_AGGREGATE_615;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_616() const {
      return __SQL_SUM_AGGREGATE_616;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_617() const {
      return __SQL_SUM_AGGREGATE_617;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_618() const {
      return __SQL_SUM_AGGREGATE_618;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_619() const {
      return __SQL_SUM_AGGREGATE_619;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_620() const {
      return __SQL_SUM_AGGREGATE_620;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_621() const {
      return __SQL_SUM_AGGREGATE_621;
    }
    const long get___SQL_SUM_AGGREGATE_622() const {
      return __SQL_SUM_AGGREGATE_622;
    }
    const long get___SQL_SUM_AGGREGATE_623() const {
      return __SQL_SUM_AGGREGATE_623;
    }
    const long get___SQL_SUM_AGGREGATE_624() const {
      return __SQL_SUM_AGGREGATE_624;
    }
    const long get___SQL_SUM_AGGREGATE_625() const {
      return __SQL_SUM_AGGREGATE_625;
    }
    const long get___SQL_SUM_AGGREGATE_626() const {
      return __SQL_SUM_AGGREGATE_626;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_627() const {
      return __SQL_SUM_AGGREGATE_627;
    }
    const long get___SQL_SUM_AGGREGATE_628() const {
      return __SQL_SUM_AGGREGATE_628;
    }
    const long get___SQL_SUM_AGGREGATE_629() const {
      return __SQL_SUM_AGGREGATE_629;
    }
    const long get___SQL_SUM_AGGREGATE_630() const {
      return __SQL_SUM_AGGREGATE_630;
    }
    const long get___SQL_SUM_AGGREGATE_631() const {
      return __SQL_SUM_AGGREGATE_631;
    }
    const long get___SQL_SUM_AGGREGATE_632() const {
      return __SQL_SUM_AGGREGATE_632;
    }
    const long get___SQL_SUM_AGGREGATE_633() const {
      return __SQL_SUM_AGGREGATE_633;
    }
    const long get___SQL_SUM_AGGREGATE_634() const {
      return __SQL_SUM_AGGREGATE_634;
    }
    const long get___SQL_SUM_AGGREGATE_635() const {
      return __SQL_SUM_AGGREGATE_635;
    }
    const long get___SQL_SUM_AGGREGATE_636() const {
      return __SQL_SUM_AGGREGATE_636;
    }
    const long get___SQL_SUM_AGGREGATE_637() const {
      return __SQL_SUM_AGGREGATE_637;
    }
    const long get___SQL_SUM_AGGREGATE_638() const {
      return __SQL_SUM_AGGREGATE_638;
    }
    const long get___SQL_SUM_AGGREGATE_639() const {
      return __SQL_SUM_AGGREGATE_639;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_640() const {
      return __SQL_SUM_AGGREGATE_640;
    }
    const long get___SQL_SUM_AGGREGATE_641() const {
      return __SQL_SUM_AGGREGATE_641;
    }
    const long get___SQL_SUM_AGGREGATE_642() const {
      return __SQL_SUM_AGGREGATE_642;
    }
    const long get___SQL_SUM_AGGREGATE_643() const {
      return __SQL_SUM_AGGREGATE_643;
    }
    const long get___SQL_SUM_AGGREGATE_644() const {
      return __SQL_SUM_AGGREGATE_644;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_645() const {
      return __SQL_SUM_AGGREGATE_645;
    }
    const long get___SQL_SUM_AGGREGATE_646() const {
      return __SQL_SUM_AGGREGATE_646;
    }
    const long get___SQL_SUM_AGGREGATE_647() const {
      return __SQL_SUM_AGGREGATE_647;
    }
    const long get___SQL_SUM_AGGREGATE_648() const {
      return __SQL_SUM_AGGREGATE_648;
    }
    const long get___SQL_SUM_AGGREGATE_649() const {
      return __SQL_SUM_AGGREGATE_649;
    }
    const long get___SQL_SUM_AGGREGATE_650() const {
      return __SQL_SUM_AGGREGATE_650;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_651() const {
      return __SQL_SUM_AGGREGATE_651;
    }
    const long get___SQL_SUM_AGGREGATE_652() const {
      return __SQL_SUM_AGGREGATE_652;
    }
    const long get___SQL_SUM_AGGREGATE_653() const {
      return __SQL_SUM_AGGREGATE_653;
    }
    const long get___SQL_SUM_AGGREGATE_654() const {
      return __SQL_SUM_AGGREGATE_654;
    }
    const long get___SQL_SUM_AGGREGATE_655() const {
      return __SQL_SUM_AGGREGATE_655;
    }
    const long get___SQL_SUM_AGGREGATE_656() const {
      return __SQL_SUM_AGGREGATE_656;
    }
    const long get___SQL_SUM_AGGREGATE_657() const {
      return __SQL_SUM_AGGREGATE_657;
    }
    const long get___SQL_SUM_AGGREGATE_658() const {
      return __SQL_SUM_AGGREGATE_658;
    }
    const long get___SQL_SUM_AGGREGATE_659() const {
      return __SQL_SUM_AGGREGATE_659;
    }
    const long get___SQL_SUM_AGGREGATE_660() const {
      return __SQL_SUM_AGGREGATE_660;
    }
    const long get___SQL_SUM_AGGREGATE_661() const {
      return __SQL_SUM_AGGREGATE_661;
    }
    const long get___SQL_SUM_AGGREGATE_662() const {
      return __SQL_SUM_AGGREGATE_662;
    }
    const long get___SQL_SUM_AGGREGATE_663() const {
      return __SQL_SUM_AGGREGATE_663;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_664() const {
      return __SQL_SUM_AGGREGATE_664;
    }
    const long get___SQL_SUM_AGGREGATE_665() const {
      return __SQL_SUM_AGGREGATE_665;
    }
    const long get___SQL_SUM_AGGREGATE_666() const {
      return __SQL_SUM_AGGREGATE_666;
    }
    const long get___SQL_SUM_AGGREGATE_667() const {
      return __SQL_SUM_AGGREGATE_667;
    }
    const long get___SQL_SUM_AGGREGATE_668() const {
      return __SQL_SUM_AGGREGATE_668;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_669() const {
      return __SQL_SUM_AGGREGATE_669;
    }
    const long get___SQL_SUM_AGGREGATE_670() const {
      return __SQL_SUM_AGGREGATE_670;
    }
    const long get___SQL_SUM_AGGREGATE_671() const {
      return __SQL_SUM_AGGREGATE_671;
    }
    const long get___SQL_SUM_AGGREGATE_672() const {
      return __SQL_SUM_AGGREGATE_672;
    }
    const long get___SQL_SUM_AGGREGATE_673() const {
      return __SQL_SUM_AGGREGATE_673;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_674() const {
      return __SQL_SUM_AGGREGATE_674;
    }
    const long get___SQL_SUM_AGGREGATE_675() const {
      return __SQL_SUM_AGGREGATE_675;
    }
    const long get___SQL_SUM_AGGREGATE_676() const {
      return __SQL_SUM_AGGREGATE_676;
    }
    const long get___SQL_SUM_AGGREGATE_677() const {
      return __SQL_SUM_AGGREGATE_677;
    }
    const long get___SQL_SUM_AGGREGATE_678() const {
      return __SQL_SUM_AGGREGATE_678;
    }
    const long get___SQL_SUM_AGGREGATE_679() const {
      return __SQL_SUM_AGGREGATE_679;
    }
    const long get___SQL_SUM_AGGREGATE_680() const {
      return __SQL_SUM_AGGREGATE_680;
    }
    const long get___SQL_SUM_AGGREGATE_681() const {
      return __SQL_SUM_AGGREGATE_681;
    }
    const long get___SQL_SUM_AGGREGATE_682() const {
      return __SQL_SUM_AGGREGATE_682;
    }
    const long get___SQL_SUM_AGGREGATE_683() const {
      return __SQL_SUM_AGGREGATE_683;
    }
    const long get___SQL_SUM_AGGREGATE_684() const {
      return __SQL_SUM_AGGREGATE_684;
    }
    const long get___SQL_SUM_AGGREGATE_685() const {
      return __SQL_SUM_AGGREGATE_685;
    }
    const long get___SQL_SUM_AGGREGATE_686() const {
      return __SQL_SUM_AGGREGATE_686;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_687() const {
      return __SQL_SUM_AGGREGATE_687;
    }
    const long get___SQL_SUM_AGGREGATE_688() const {
      return __SQL_SUM_AGGREGATE_688;
    }
    const long get___SQL_SUM_AGGREGATE_689() const {
      return __SQL_SUM_AGGREGATE_689;
    }
    const long get___SQL_SUM_AGGREGATE_690() const {
      return __SQL_SUM_AGGREGATE_690;
    }
    const long get___SQL_SUM_AGGREGATE_691() const {
      return __SQL_SUM_AGGREGATE_691;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_692() const {
      return __SQL_SUM_AGGREGATE_692;
    }
    const long get___SQL_SUM_AGGREGATE_693() const {
      return __SQL_SUM_AGGREGATE_693;
    }
    const long get___SQL_SUM_AGGREGATE_694() const {
      return __SQL_SUM_AGGREGATE_694;
    }
    const long get___SQL_SUM_AGGREGATE_695() const {
      return __SQL_SUM_AGGREGATE_695;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_696() const {
      return __SQL_SUM_AGGREGATE_696;
    }
    const long get___SQL_SUM_AGGREGATE_697() const {
      return __SQL_SUM_AGGREGATE_697;
    }
    const long get___SQL_SUM_AGGREGATE_698() const {
      return __SQL_SUM_AGGREGATE_698;
    }
    const long get___SQL_SUM_AGGREGATE_699() const {
      return __SQL_SUM_AGGREGATE_699;
    }
    const long get___SQL_SUM_AGGREGATE_700() const {
      return __SQL_SUM_AGGREGATE_700;
    }
    const long get___SQL_SUM_AGGREGATE_701() const {
      return __SQL_SUM_AGGREGATE_701;
    }
    const long get___SQL_SUM_AGGREGATE_702() const {
      return __SQL_SUM_AGGREGATE_702;
    }
    const long get___SQL_SUM_AGGREGATE_703() const {
      return __SQL_SUM_AGGREGATE_703;
    }
    const long get___SQL_SUM_AGGREGATE_704() const {
      return __SQL_SUM_AGGREGATE_704;
    }
    const long get___SQL_SUM_AGGREGATE_705() const {
      return __SQL_SUM_AGGREGATE_705;
    }
    const long get___SQL_SUM_AGGREGATE_706() const {
      return __SQL_SUM_AGGREGATE_706;
    }
    const long get___SQL_SUM_AGGREGATE_707() const {
      return __SQL_SUM_AGGREGATE_707;
    }
    const long get___SQL_SUM_AGGREGATE_708() const {
      return __SQL_SUM_AGGREGATE_708;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_709() const {
      return __SQL_SUM_AGGREGATE_709;
    }
    const long get___SQL_SUM_AGGREGATE_710() const {
      return __SQL_SUM_AGGREGATE_710;
    }
    const long get___SQL_SUM_AGGREGATE_711() const {
      return __SQL_SUM_AGGREGATE_711;
    }
    const long get___SQL_SUM_AGGREGATE_712() const {
      return __SQL_SUM_AGGREGATE_712;
    }
    const long get___SQL_SUM_AGGREGATE_713() const {
      return __SQL_SUM_AGGREGATE_713;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_714() const {
      return __SQL_SUM_AGGREGATE_714;
    }
    const long get___SQL_SUM_AGGREGATE_715() const {
      return __SQL_SUM_AGGREGATE_715;
    }
    const long get___SQL_SUM_AGGREGATE_716() const {
      return __SQL_SUM_AGGREGATE_716;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_717() const {
      return __SQL_SUM_AGGREGATE_717;
    }
    const long get___SQL_SUM_AGGREGATE_718() const {
      return __SQL_SUM_AGGREGATE_718;
    }
    const long get___SQL_SUM_AGGREGATE_719() const {
      return __SQL_SUM_AGGREGATE_719;
    }
    const long get___SQL_SUM_AGGREGATE_720() const {
      return __SQL_SUM_AGGREGATE_720;
    }
    const long get___SQL_SUM_AGGREGATE_721() const {
      return __SQL_SUM_AGGREGATE_721;
    }
    const long get___SQL_SUM_AGGREGATE_722() const {
      return __SQL_SUM_AGGREGATE_722;
    }
    const long get___SQL_SUM_AGGREGATE_723() const {
      return __SQL_SUM_AGGREGATE_723;
    }
    const long get___SQL_SUM_AGGREGATE_724() const {
      return __SQL_SUM_AGGREGATE_724;
    }
    const long get___SQL_SUM_AGGREGATE_725() const {
      return __SQL_SUM_AGGREGATE_725;
    }
    const long get___SQL_SUM_AGGREGATE_726() const {
      return __SQL_SUM_AGGREGATE_726;
    }
    const long get___SQL_SUM_AGGREGATE_727() const {
      return __SQL_SUM_AGGREGATE_727;
    }
    const long get___SQL_SUM_AGGREGATE_728() const {
      return __SQL_SUM_AGGREGATE_728;
    }
    const long get___SQL_SUM_AGGREGATE_729() const {
      return __SQL_SUM_AGGREGATE_729;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_730() const {
      return __SQL_SUM_AGGREGATE_730;
    }
    const long get___SQL_SUM_AGGREGATE_731() const {
      return __SQL_SUM_AGGREGATE_731;
    }
    const long get___SQL_SUM_AGGREGATE_732() const {
      return __SQL_SUM_AGGREGATE_732;
    }
    const long get___SQL_SUM_AGGREGATE_733() const {
      return __SQL_SUM_AGGREGATE_733;
    }
    const long get___SQL_SUM_AGGREGATE_734() const {
      return __SQL_SUM_AGGREGATE_734;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_735() const {
      return __SQL_SUM_AGGREGATE_735;
    }
    const long get___SQL_SUM_AGGREGATE_736() const {
      return __SQL_SUM_AGGREGATE_736;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_737() const {
      return __SQL_SUM_AGGREGATE_737;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_738() const {
      return __SQL_SUM_AGGREGATE_738;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_739() const {
      return __SQL_SUM_AGGREGATE_739;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_740() const {
      return __SQL_SUM_AGGREGATE_740;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_741() const {
      return __SQL_SUM_AGGREGATE_741;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_742() const {
      return __SQL_SUM_AGGREGATE_742;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_743() const {
      return __SQL_SUM_AGGREGATE_743;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_744() const {
      return __SQL_SUM_AGGREGATE_744;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_745() const {
      return __SQL_SUM_AGGREGATE_745;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_746() const {
      return __SQL_SUM_AGGREGATE_746;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_747() const {
      return __SQL_SUM_AGGREGATE_747;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_748() const {
      return __SQL_SUM_AGGREGATE_748;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_749() const {
      return __SQL_SUM_AGGREGATE_749;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_750() const {
      return __SQL_SUM_AGGREGATE_750;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_751() const {
      return __SQL_SUM_AGGREGATE_751;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_752() const {
      return __SQL_SUM_AGGREGATE_752;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_753() const {
      return __SQL_SUM_AGGREGATE_753;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_754() const {
      return __SQL_SUM_AGGREGATE_754;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_755() const {
      return __SQL_SUM_AGGREGATE_755;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_756() const {
      return __SQL_SUM_AGGREGATE_756;
    }
    const long get___SQL_SUM_AGGREGATE_757() const {
      return __SQL_SUM_AGGREGATE_757;
    }
    const long get___SQL_SUM_AGGREGATE_758() const {
      return __SQL_SUM_AGGREGATE_758;
    }
    const long get___SQL_SUM_AGGREGATE_759() const {
      return __SQL_SUM_AGGREGATE_759;
    }
    const long get___SQL_SUM_AGGREGATE_760() const {
      return __SQL_SUM_AGGREGATE_760;
    }
    const long get___SQL_SUM_AGGREGATE_761() const {
      return __SQL_SUM_AGGREGATE_761;
    }
    const long get___SQL_SUM_AGGREGATE_762() const {
      return __SQL_SUM_AGGREGATE_762;
    }
    const long get___SQL_SUM_AGGREGATE_763() const {
      return __SQL_SUM_AGGREGATE_763;
    }
    const long get___SQL_SUM_AGGREGATE_764() const {
      return __SQL_SUM_AGGREGATE_764;
    }
    const long get___SQL_SUM_AGGREGATE_765() const {
      return __SQL_SUM_AGGREGATE_765;
    }
    const long get___SQL_SUM_AGGREGATE_766() const {
      return __SQL_SUM_AGGREGATE_766;
    }
    const long get___SQL_SUM_AGGREGATE_767() const {
      return __SQL_SUM_AGGREGATE_767;
    }
    const long get___SQL_SUM_AGGREGATE_768() const {
      return __SQL_SUM_AGGREGATE_768;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_769() const {
      return __SQL_SUM_AGGREGATE_769;
    }
    const long get___SQL_SUM_AGGREGATE_770() const {
      return __SQL_SUM_AGGREGATE_770;
    }
    const long get___SQL_SUM_AGGREGATE_771() const {
      return __SQL_SUM_AGGREGATE_771;
    }
    const long get___SQL_SUM_AGGREGATE_772() const {
      return __SQL_SUM_AGGREGATE_772;
    }
    const long get___SQL_SUM_AGGREGATE_773() const {
      return __SQL_SUM_AGGREGATE_773;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_774() const {
      return __SQL_SUM_AGGREGATE_774;
    }
    const long get___SQL_SUM_AGGREGATE_775() const {
      return __SQL_SUM_AGGREGATE_775;
    }
    const long get___SQL_SUM_AGGREGATE_776() const {
      return __SQL_SUM_AGGREGATE_776;
    }
    const long get___SQL_SUM_AGGREGATE_777() const {
      return __SQL_SUM_AGGREGATE_777;
    }
    const long get___SQL_SUM_AGGREGATE_778() const {
      return __SQL_SUM_AGGREGATE_778;
    }
    const long get___SQL_SUM_AGGREGATE_779() const {
      return __SQL_SUM_AGGREGATE_779;
    }
    const long get___SQL_SUM_AGGREGATE_780() const {
      return __SQL_SUM_AGGREGATE_780;
    }
    const long get___SQL_SUM_AGGREGATE_781() const {
      return __SQL_SUM_AGGREGATE_781;
    }
    const long get___SQL_SUM_AGGREGATE_782() const {
      return __SQL_SUM_AGGREGATE_782;
    }
    const long get___SQL_SUM_AGGREGATE_783() const {
      return __SQL_SUM_AGGREGATE_783;
    }
    const long get___SQL_SUM_AGGREGATE_784() const {
      return __SQL_SUM_AGGREGATE_784;
    }
    const long get___SQL_SUM_AGGREGATE_785() const {
      return __SQL_SUM_AGGREGATE_785;
    }
    const long get___SQL_SUM_AGGREGATE_786() const {
      return __SQL_SUM_AGGREGATE_786;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_787() const {
      return __SQL_SUM_AGGREGATE_787;
    }
    const long get___SQL_SUM_AGGREGATE_788() const {
      return __SQL_SUM_AGGREGATE_788;
    }
    const long get___SQL_SUM_AGGREGATE_789() const {
      return __SQL_SUM_AGGREGATE_789;
    }
    const long get___SQL_SUM_AGGREGATE_790() const {
      return __SQL_SUM_AGGREGATE_790;
    }
    const long get___SQL_SUM_AGGREGATE_791() const {
      return __SQL_SUM_AGGREGATE_791;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_792() const {
      return __SQL_SUM_AGGREGATE_792;
    }
    const long get___SQL_SUM_AGGREGATE_793() const {
      return __SQL_SUM_AGGREGATE_793;
    }
    const long get___SQL_SUM_AGGREGATE_794() const {
      return __SQL_SUM_AGGREGATE_794;
    }
    const long get___SQL_SUM_AGGREGATE_795() const {
      return __SQL_SUM_AGGREGATE_795;
    }
    const long get___SQL_SUM_AGGREGATE_796() const {
      return __SQL_SUM_AGGREGATE_796;
    }
    const long get___SQL_SUM_AGGREGATE_797() const {
      return __SQL_SUM_AGGREGATE_797;
    }
    const long get___SQL_SUM_AGGREGATE_798() const {
      return __SQL_SUM_AGGREGATE_798;
    }
    const long get___SQL_SUM_AGGREGATE_799() const {
      return __SQL_SUM_AGGREGATE_799;
    }
    const long get___SQL_SUM_AGGREGATE_800() const {
      return __SQL_SUM_AGGREGATE_800;
    }
    const long get___SQL_SUM_AGGREGATE_801() const {
      return __SQL_SUM_AGGREGATE_801;
    }
    const long get___SQL_SUM_AGGREGATE_802() const {
      return __SQL_SUM_AGGREGATE_802;
    }
    const long get___SQL_SUM_AGGREGATE_803() const {
      return __SQL_SUM_AGGREGATE_803;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_804() const {
      return __SQL_SUM_AGGREGATE_804;
    }
    const long get___SQL_SUM_AGGREGATE_805() const {
      return __SQL_SUM_AGGREGATE_805;
    }
    const long get___SQL_SUM_AGGREGATE_806() const {
      return __SQL_SUM_AGGREGATE_806;
    }
    const long get___SQL_SUM_AGGREGATE_807() const {
      return __SQL_SUM_AGGREGATE_807;
    }
    const long get___SQL_SUM_AGGREGATE_808() const {
      return __SQL_SUM_AGGREGATE_808;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_809() const {
      return __SQL_SUM_AGGREGATE_809;
    }
    const long get___SQL_SUM_AGGREGATE_810() const {
      return __SQL_SUM_AGGREGATE_810;
    }
    const long get___SQL_SUM_AGGREGATE_811() const {
      return __SQL_SUM_AGGREGATE_811;
    }
    const long get___SQL_SUM_AGGREGATE_812() const {
      return __SQL_SUM_AGGREGATE_812;
    }
    const long get___SQL_SUM_AGGREGATE_813() const {
      return __SQL_SUM_AGGREGATE_813;
    }
    const long get___SQL_SUM_AGGREGATE_814() const {
      return __SQL_SUM_AGGREGATE_814;
    }
    const long get___SQL_SUM_AGGREGATE_815() const {
      return __SQL_SUM_AGGREGATE_815;
    }
    const long get___SQL_SUM_AGGREGATE_816() const {
      return __SQL_SUM_AGGREGATE_816;
    }
    const long get___SQL_SUM_AGGREGATE_817() const {
      return __SQL_SUM_AGGREGATE_817;
    }
    const long get___SQL_SUM_AGGREGATE_818() const {
      return __SQL_SUM_AGGREGATE_818;
    }
    const long get___SQL_SUM_AGGREGATE_819() const {
      return __SQL_SUM_AGGREGATE_819;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_820() const {
      return __SQL_SUM_AGGREGATE_820;
    }
    const long get___SQL_SUM_AGGREGATE_821() const {
      return __SQL_SUM_AGGREGATE_821;
    }
    const long get___SQL_SUM_AGGREGATE_822() const {
      return __SQL_SUM_AGGREGATE_822;
    }
    const long get___SQL_SUM_AGGREGATE_823() const {
      return __SQL_SUM_AGGREGATE_823;
    }
    const long get___SQL_SUM_AGGREGATE_824() const {
      return __SQL_SUM_AGGREGATE_824;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_825() const {
      return __SQL_SUM_AGGREGATE_825;
    }
    const long get___SQL_SUM_AGGREGATE_826() const {
      return __SQL_SUM_AGGREGATE_826;
    }
    const long get___SQL_SUM_AGGREGATE_827() const {
      return __SQL_SUM_AGGREGATE_827;
    }
    const long get___SQL_SUM_AGGREGATE_828() const {
      return __SQL_SUM_AGGREGATE_828;
    }
    const long get___SQL_SUM_AGGREGATE_829() const {
      return __SQL_SUM_AGGREGATE_829;
    }
    const long get___SQL_SUM_AGGREGATE_830() const {
      return __SQL_SUM_AGGREGATE_830;
    }
    const long get___SQL_SUM_AGGREGATE_831() const {
      return __SQL_SUM_AGGREGATE_831;
    }
    const long get___SQL_SUM_AGGREGATE_832() const {
      return __SQL_SUM_AGGREGATE_832;
    }
    const long get___SQL_SUM_AGGREGATE_833() const {
      return __SQL_SUM_AGGREGATE_833;
    }
    const long get___SQL_SUM_AGGREGATE_834() const {
      return __SQL_SUM_AGGREGATE_834;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_835() const {
      return __SQL_SUM_AGGREGATE_835;
    }
    const long get___SQL_SUM_AGGREGATE_836() const {
      return __SQL_SUM_AGGREGATE_836;
    }
    const long get___SQL_SUM_AGGREGATE_837() const {
      return __SQL_SUM_AGGREGATE_837;
    }
    const long get___SQL_SUM_AGGREGATE_838() const {
      return __SQL_SUM_AGGREGATE_838;
    }
    const long get___SQL_SUM_AGGREGATE_839() const {
      return __SQL_SUM_AGGREGATE_839;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_840() const {
      return __SQL_SUM_AGGREGATE_840;
    }
    const long get___SQL_SUM_AGGREGATE_841() const {
      return __SQL_SUM_AGGREGATE_841;
    }
    const long get___SQL_SUM_AGGREGATE_842() const {
      return __SQL_SUM_AGGREGATE_842;
    }
    const long get___SQL_SUM_AGGREGATE_843() const {
      return __SQL_SUM_AGGREGATE_843;
    }
    const long get___SQL_SUM_AGGREGATE_844() const {
      return __SQL_SUM_AGGREGATE_844;
    }
    const long get___SQL_SUM_AGGREGATE_845() const {
      return __SQL_SUM_AGGREGATE_845;
    }
    const long get___SQL_SUM_AGGREGATE_846() const {
      return __SQL_SUM_AGGREGATE_846;
    }
    const long get___SQL_SUM_AGGREGATE_847() const {
      return __SQL_SUM_AGGREGATE_847;
    }
    const long get___SQL_SUM_AGGREGATE_848() const {
      return __SQL_SUM_AGGREGATE_848;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_849() const {
      return __SQL_SUM_AGGREGATE_849;
    }
    const long get___SQL_SUM_AGGREGATE_850() const {
      return __SQL_SUM_AGGREGATE_850;
    }
    const long get___SQL_SUM_AGGREGATE_851() const {
      return __SQL_SUM_AGGREGATE_851;
    }
    const long get___SQL_SUM_AGGREGATE_852() const {
      return __SQL_SUM_AGGREGATE_852;
    }
    const long get___SQL_SUM_AGGREGATE_853() const {
      return __SQL_SUM_AGGREGATE_853;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_854() const {
      return __SQL_SUM_AGGREGATE_854;
    }
    const long get___SQL_SUM_AGGREGATE_855() const {
      return __SQL_SUM_AGGREGATE_855;
    }
    const long get___SQL_SUM_AGGREGATE_856() const {
      return __SQL_SUM_AGGREGATE_856;
    }
    const long get___SQL_SUM_AGGREGATE_857() const {
      return __SQL_SUM_AGGREGATE_857;
    }
    const long get___SQL_SUM_AGGREGATE_858() const {
      return __SQL_SUM_AGGREGATE_858;
    }
    const long get___SQL_SUM_AGGREGATE_859() const {
      return __SQL_SUM_AGGREGATE_859;
    }
    const long get___SQL_SUM_AGGREGATE_860() const {
      return __SQL_SUM_AGGREGATE_860;
    }
    const long get___SQL_SUM_AGGREGATE_861() const {
      return __SQL_SUM_AGGREGATE_861;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_862() const {
      return __SQL_SUM_AGGREGATE_862;
    }
    const long get___SQL_SUM_AGGREGATE_863() const {
      return __SQL_SUM_AGGREGATE_863;
    }
    const long get___SQL_SUM_AGGREGATE_864() const {
      return __SQL_SUM_AGGREGATE_864;
    }
    const long get___SQL_SUM_AGGREGATE_865() const {
      return __SQL_SUM_AGGREGATE_865;
    }
    const long get___SQL_SUM_AGGREGATE_866() const {
      return __SQL_SUM_AGGREGATE_866;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_867() const {
      return __SQL_SUM_AGGREGATE_867;
    }
    const long get___SQL_SUM_AGGREGATE_868() const {
      return __SQL_SUM_AGGREGATE_868;
    }
    const long get___SQL_SUM_AGGREGATE_869() const {
      return __SQL_SUM_AGGREGATE_869;
    }
    const long get___SQL_SUM_AGGREGATE_870() const {
      return __SQL_SUM_AGGREGATE_870;
    }
    const long get___SQL_SUM_AGGREGATE_871() const {
      return __SQL_SUM_AGGREGATE_871;
    }
    const long get___SQL_SUM_AGGREGATE_872() const {
      return __SQL_SUM_AGGREGATE_872;
    }
    const long get___SQL_SUM_AGGREGATE_873() const {
      return __SQL_SUM_AGGREGATE_873;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_874() const {
      return __SQL_SUM_AGGREGATE_874;
    }
    const long get___SQL_SUM_AGGREGATE_875() const {
      return __SQL_SUM_AGGREGATE_875;
    }
    const long get___SQL_SUM_AGGREGATE_876() const {
      return __SQL_SUM_AGGREGATE_876;
    }
    const long get___SQL_SUM_AGGREGATE_877() const {
      return __SQL_SUM_AGGREGATE_877;
    }
    const long get___SQL_SUM_AGGREGATE_878() const {
      return __SQL_SUM_AGGREGATE_878;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_879() const {
      return __SQL_SUM_AGGREGATE_879;
    }
    const long get___SQL_SUM_AGGREGATE_880() const {
      return __SQL_SUM_AGGREGATE_880;
    }
    const long get___SQL_SUM_AGGREGATE_881() const {
      return __SQL_SUM_AGGREGATE_881;
    }
    const long get___SQL_SUM_AGGREGATE_882() const {
      return __SQL_SUM_AGGREGATE_882;
    }
    const long get___SQL_SUM_AGGREGATE_883() const {
      return __SQL_SUM_AGGREGATE_883;
    }
    const long get___SQL_SUM_AGGREGATE_884() const {
      return __SQL_SUM_AGGREGATE_884;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_885() const {
      return __SQL_SUM_AGGREGATE_885;
    }
    const long get___SQL_SUM_AGGREGATE_886() const {
      return __SQL_SUM_AGGREGATE_886;
    }
    const long get___SQL_SUM_AGGREGATE_887() const {
      return __SQL_SUM_AGGREGATE_887;
    }
    const long get___SQL_SUM_AGGREGATE_888() const {
      return __SQL_SUM_AGGREGATE_888;
    }
    const long get___SQL_SUM_AGGREGATE_889() const {
      return __SQL_SUM_AGGREGATE_889;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_890() const {
      return __SQL_SUM_AGGREGATE_890;
    }
    const long get___SQL_SUM_AGGREGATE_891() const {
      return __SQL_SUM_AGGREGATE_891;
    }
    const long get___SQL_SUM_AGGREGATE_892() const {
      return __SQL_SUM_AGGREGATE_892;
    }
    const long get___SQL_SUM_AGGREGATE_893() const {
      return __SQL_SUM_AGGREGATE_893;
    }
    const long get___SQL_SUM_AGGREGATE_894() const {
      return __SQL_SUM_AGGREGATE_894;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_895() const {
      return __SQL_SUM_AGGREGATE_895;
    }
    const long get___SQL_SUM_AGGREGATE_896() const {
      return __SQL_SUM_AGGREGATE_896;
    }
    const long get___SQL_SUM_AGGREGATE_897() const {
      return __SQL_SUM_AGGREGATE_897;
    }
    const long get___SQL_SUM_AGGREGATE_898() const {
      return __SQL_SUM_AGGREGATE_898;
    }
    const long get___SQL_SUM_AGGREGATE_899() const {
      return __SQL_SUM_AGGREGATE_899;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_900() const {
      return __SQL_SUM_AGGREGATE_900;
    }
    const long get___SQL_SUM_AGGREGATE_901() const {
      return __SQL_SUM_AGGREGATE_901;
    }
    const long get___SQL_SUM_AGGREGATE_902() const {
      return __SQL_SUM_AGGREGATE_902;
    }
    const long get___SQL_SUM_AGGREGATE_903() const {
      return __SQL_SUM_AGGREGATE_903;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_904() const {
      return __SQL_SUM_AGGREGATE_904;
    }
    const long get___SQL_SUM_AGGREGATE_905() const {
      return __SQL_SUM_AGGREGATE_905;
    }
    const long get___SQL_SUM_AGGREGATE_906() const {
      return __SQL_SUM_AGGREGATE_906;
    }
    const long get___SQL_SUM_AGGREGATE_907() const {
      return __SQL_SUM_AGGREGATE_907;
    }
    const long get___SQL_SUM_AGGREGATE_908() const {
      return __SQL_SUM_AGGREGATE_908;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_909() const {
      return __SQL_SUM_AGGREGATE_909;
    }
    const long get___SQL_SUM_AGGREGATE_910() const {
      return __SQL_SUM_AGGREGATE_910;
    }
    const long get___SQL_SUM_AGGREGATE_911() const {
      return __SQL_SUM_AGGREGATE_911;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_912() const {
      return __SQL_SUM_AGGREGATE_912;
    }
    const long get___SQL_SUM_AGGREGATE_913() const {
      return __SQL_SUM_AGGREGATE_913;
    }
    const long get___SQL_SUM_AGGREGATE_914() const {
      return __SQL_SUM_AGGREGATE_914;
    }
    const long get___SQL_SUM_AGGREGATE_915() const {
      return __SQL_SUM_AGGREGATE_915;
    }
    const long get___SQL_SUM_AGGREGATE_916() const {
      return __SQL_SUM_AGGREGATE_916;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_917() const {
      return __SQL_SUM_AGGREGATE_917;
    }
    const long get___SQL_SUM_AGGREGATE_918() const {
      return __SQL_SUM_AGGREGATE_918;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_919() const {
      return __SQL_SUM_AGGREGATE_919;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_920() const {
      return __SQL_SUM_AGGREGATE_920;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_921() const {
      return __SQL_SUM_AGGREGATE_921;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_922() const {
      return __SQL_SUM_AGGREGATE_922;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_923() const {
      return __SQL_SUM_AGGREGATE_923;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_924() const {
      return __SQL_SUM_AGGREGATE_924;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_925() const {
      return __SQL_SUM_AGGREGATE_925;
    }
    const long get___SQL_SUM_AGGREGATE_926() const {
      return __SQL_SUM_AGGREGATE_926;
    }
    const long get___SQL_SUM_AGGREGATE_927() const {
      return __SQL_SUM_AGGREGATE_927;
    }
    const long get___SQL_SUM_AGGREGATE_928() const {
      return __SQL_SUM_AGGREGATE_928;
    }
    const long get___SQL_SUM_AGGREGATE_929() const {
      return __SQL_SUM_AGGREGATE_929;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_930() const {
      return __SQL_SUM_AGGREGATE_930;
    }
    const long get___SQL_SUM_AGGREGATE_931() const {
      return __SQL_SUM_AGGREGATE_931;
    }
    const long get___SQL_SUM_AGGREGATE_932() const {
      return __SQL_SUM_AGGREGATE_932;
    }
    const long get___SQL_SUM_AGGREGATE_933() const {
      return __SQL_SUM_AGGREGATE_933;
    }
    const long get___SQL_SUM_AGGREGATE_934() const {
      return __SQL_SUM_AGGREGATE_934;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_935() const {
      return __SQL_SUM_AGGREGATE_935;
    }
    const long get___SQL_SUM_AGGREGATE_936() const {
      return __SQL_SUM_AGGREGATE_936;
    }
    const long get___SQL_SUM_AGGREGATE_937() const {
      return __SQL_SUM_AGGREGATE_937;
    }
    const long get___SQL_SUM_AGGREGATE_938() const {
      return __SQL_SUM_AGGREGATE_938;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_939() const {
      return __SQL_SUM_AGGREGATE_939;
    }
    const long get___SQL_SUM_AGGREGATE_940() const {
      return __SQL_SUM_AGGREGATE_940;
    }
    const long get___SQL_SUM_AGGREGATE_941() const {
      return __SQL_SUM_AGGREGATE_941;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_942() const {
      return __SQL_SUM_AGGREGATE_942;
    }
    const long get___SQL_SUM_AGGREGATE_943() const {
      return __SQL_SUM_AGGREGATE_943;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_944() const {
      return __SQL_SUM_AGGREGATE_944;
    }
    const DOUBLE_TYPE get___SQL_SUM_AGGREGATE_945() const {
      return __SQL_SUM_AGGREGATE_945;
    }
    const long get___SQL_SUM_AGGREGATE_946() const {
      return __SQL_SUM_AGGREGATE_946;
    }
  
  protected:
    /* Data structures used for storing / computing top level queries */
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_1;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_2;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_3;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_4;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_5;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_6;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_7;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_8;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_9;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_10;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_11;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_12;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_13;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_14;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_15;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_16;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_17;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_18;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_19;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_20;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_21;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_22;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_23;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_24;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_25;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_26;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_27;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_28;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_29;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_30;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_31;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_32;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_33;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_34;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_35;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_36;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_37;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_38;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_39;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_40;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_41;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_42;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_43;
    long __SQL_SUM_AGGREGATE_44;
    long __SQL_SUM_AGGREGATE_45;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_46;
    long __SQL_SUM_AGGREGATE_47;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_48;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_49;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_50;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_51;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_52;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_53;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_54;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_55;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_56;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_57;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_58;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_59;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_60;
    long __SQL_SUM_AGGREGATE_61;
    long __SQL_SUM_AGGREGATE_62;
    long __SQL_SUM_AGGREGATE_63;
    long __SQL_SUM_AGGREGATE_64;
    long __SQL_SUM_AGGREGATE_65;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_66;
    long __SQL_SUM_AGGREGATE_67;
    long __SQL_SUM_AGGREGATE_68;
    long __SQL_SUM_AGGREGATE_69;
    long __SQL_SUM_AGGREGATE_70;
    long __SQL_SUM_AGGREGATE_71;
    long __SQL_SUM_AGGREGATE_72;
    long __SQL_SUM_AGGREGATE_73;
    long __SQL_SUM_AGGREGATE_74;
    long __SQL_SUM_AGGREGATE_75;
    long __SQL_SUM_AGGREGATE_76;
    long __SQL_SUM_AGGREGATE_77;
    long __SQL_SUM_AGGREGATE_78;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_79;
    long __SQL_SUM_AGGREGATE_80;
    long __SQL_SUM_AGGREGATE_81;
    long __SQL_SUM_AGGREGATE_82;
    long __SQL_SUM_AGGREGATE_83;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_84;
    long __SQL_SUM_AGGREGATE_85;
    long __SQL_SUM_AGGREGATE_86;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_87;
    long __SQL_SUM_AGGREGATE_88;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_89;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_90;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_91;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_92;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_93;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_94;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_95;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_96;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_97;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_98;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_99;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_100;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_101;
    long __SQL_SUM_AGGREGATE_102;
    long __SQL_SUM_AGGREGATE_103;
    long __SQL_SUM_AGGREGATE_104;
    long __SQL_SUM_AGGREGATE_105;
    long __SQL_SUM_AGGREGATE_106;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_107;
    long __SQL_SUM_AGGREGATE_108;
    long __SQL_SUM_AGGREGATE_109;
    long __SQL_SUM_AGGREGATE_110;
    long __SQL_SUM_AGGREGATE_111;
    long __SQL_SUM_AGGREGATE_112;
    long __SQL_SUM_AGGREGATE_113;
    long __SQL_SUM_AGGREGATE_114;
    long __SQL_SUM_AGGREGATE_115;
    long __SQL_SUM_AGGREGATE_116;
    long __SQL_SUM_AGGREGATE_117;
    long __SQL_SUM_AGGREGATE_118;
    long __SQL_SUM_AGGREGATE_119;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_120;
    long __SQL_SUM_AGGREGATE_121;
    long __SQL_SUM_AGGREGATE_122;
    long __SQL_SUM_AGGREGATE_123;
    long __SQL_SUM_AGGREGATE_124;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_125;
    long __SQL_SUM_AGGREGATE_126;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_127;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_128;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_129;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_130;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_131;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_132;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_133;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_134;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_135;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_136;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_137;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_138;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_139;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_140;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_141;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_142;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_143;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_144;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_145;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_146;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_147;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_148;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_149;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_150;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_151;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_152;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_153;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_154;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_155;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_156;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_157;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_158;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_159;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_160;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_161;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_162;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_163;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_164;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_165;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_166;
    long __SQL_SUM_AGGREGATE_167;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_168;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_169;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_170;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_171;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_172;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_173;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_174;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_175;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_176;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_177;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_178;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_179;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_180;
    long __SQL_SUM_AGGREGATE_181;
    long __SQL_SUM_AGGREGATE_182;
    long __SQL_SUM_AGGREGATE_183;
    long __SQL_SUM_AGGREGATE_184;
    long __SQL_SUM_AGGREGATE_185;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_186;
    long __SQL_SUM_AGGREGATE_187;
    long __SQL_SUM_AGGREGATE_188;
    long __SQL_SUM_AGGREGATE_189;
    long __SQL_SUM_AGGREGATE_190;
    long __SQL_SUM_AGGREGATE_191;
    long __SQL_SUM_AGGREGATE_192;
    long __SQL_SUM_AGGREGATE_193;
    long __SQL_SUM_AGGREGATE_194;
    long __SQL_SUM_AGGREGATE_195;
    long __SQL_SUM_AGGREGATE_196;
    long __SQL_SUM_AGGREGATE_197;
    long __SQL_SUM_AGGREGATE_198;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_199;
    long __SQL_SUM_AGGREGATE_200;
    long __SQL_SUM_AGGREGATE_201;
    long __SQL_SUM_AGGREGATE_202;
    long __SQL_SUM_AGGREGATE_203;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_204;
    long __SQL_SUM_AGGREGATE_205;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_206;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_207;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_208;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_209;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_210;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_211;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_212;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_213;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_214;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_215;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_216;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_217;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_218;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_219;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_220;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_221;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_222;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_223;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_224;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_225;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_226;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_227;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_228;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_229;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_230;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_231;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_232;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_233;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_234;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_235;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_236;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_237;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_238;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_239;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_240;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_241;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_242;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_243;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_244;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_245;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_246;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_247;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_248;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_249;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_250;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_251;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_252;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_253;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_254;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_255;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_256;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_257;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_258;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_259;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_260;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_261;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_262;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_263;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_264;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_265;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_266;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_267;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_268;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_269;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_270;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_271;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_272;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_273;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_274;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_275;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_276;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_277;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_278;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_279;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_280;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_281;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_282;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_283;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_284;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_285;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_286;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_287;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_288;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_289;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_290;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_291;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_292;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_293;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_294;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_295;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_296;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_297;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_298;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_299;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_300;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_301;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_302;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_303;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_304;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_305;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_306;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_307;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_308;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_309;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_310;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_311;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_312;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_313;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_314;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_315;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_316;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_317;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_318;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_319;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_320;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_321;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_322;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_323;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_324;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_325;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_326;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_327;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_328;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_329;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_330;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_331;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_332;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_333;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_334;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_335;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_336;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_337;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_338;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_339;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_340;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_341;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_342;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_343;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_344;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_345;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_346;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_347;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_348;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_349;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_350;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_351;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_352;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_353;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_354;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_355;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_356;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_357;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_358;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_359;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_360;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_361;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_362;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_363;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_364;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_365;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_366;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_367;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_368;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_369;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_370;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_371;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_372;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_373;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_374;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_375;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_376;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_377;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_378;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_379;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_380;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_381;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_382;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_383;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_384;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_385;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_386;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_387;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_388;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_389;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_390;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_391;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_392;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_393;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_394;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_395;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_396;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_397;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_398;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_399;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_400;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_401;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_402;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_403;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_404;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_405;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_406;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_407;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_408;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_409;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_410;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_411;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_412;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_413;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_414;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_415;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_416;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_417;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_418;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_419;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_420;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_421;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_422;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_423;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_424;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_425;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_426;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_427;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_428;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_429;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_430;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_431;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_432;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_433;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_434;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_435;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_436;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_437;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_438;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_439;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_440;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_441;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_442;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_443;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_444;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_445;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_446;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_447;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_448;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_449;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_450;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_451;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_452;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_453;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_454;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_455;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_456;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_457;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_458;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_459;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_460;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_461;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_462;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_463;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_464;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_465;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_466;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_467;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_468;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_469;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_470;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_471;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_472;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_473;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_474;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_475;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_476;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_477;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_478;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_479;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_480;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_481;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_482;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_483;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_484;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_485;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_486;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_487;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_488;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_489;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_490;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_491;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_492;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_493;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_494;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_495;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_496;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_497;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_498;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_499;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_500;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_501;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_502;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_503;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_504;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_505;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_506;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_507;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_508;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_509;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_510;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_511;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_512;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_513;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_514;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_515;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_516;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_517;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_518;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_519;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_520;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_521;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_522;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_523;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_524;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_525;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_526;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_527;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_528;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_529;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_530;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_531;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_532;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_533;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_534;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_535;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_536;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_537;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_538;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_539;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_540;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_541;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_542;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_543;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_544;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_545;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_546;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_547;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_548;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_549;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_550;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_551;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_552;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_553;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_554;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_555;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_556;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_557;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_558;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_559;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_560;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_561;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_562;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_563;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_564;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_565;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_566;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_567;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_568;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_569;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_570;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_571;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_572;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_573;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_574;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_575;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_576;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_577;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_578;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_579;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_580;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_581;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_582;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_583;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_584;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_585;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_586;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_587;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_588;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_589;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_590;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_591;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_592;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_593;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_594;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_595;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_596;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_597;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_598;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_599;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_600;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_601;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_602;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_603;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_604;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_605;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_606;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_607;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_608;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_609;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_610;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_611;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_612;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_613;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_614;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_615;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_616;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_617;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_618;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_619;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_620;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_621;
    long __SQL_SUM_AGGREGATE_622;
    long __SQL_SUM_AGGREGATE_623;
    long __SQL_SUM_AGGREGATE_624;
    long __SQL_SUM_AGGREGATE_625;
    long __SQL_SUM_AGGREGATE_626;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_627;
    long __SQL_SUM_AGGREGATE_628;
    long __SQL_SUM_AGGREGATE_629;
    long __SQL_SUM_AGGREGATE_630;
    long __SQL_SUM_AGGREGATE_631;
    long __SQL_SUM_AGGREGATE_632;
    long __SQL_SUM_AGGREGATE_633;
    long __SQL_SUM_AGGREGATE_634;
    long __SQL_SUM_AGGREGATE_635;
    long __SQL_SUM_AGGREGATE_636;
    long __SQL_SUM_AGGREGATE_637;
    long __SQL_SUM_AGGREGATE_638;
    long __SQL_SUM_AGGREGATE_639;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_640;
    long __SQL_SUM_AGGREGATE_641;
    long __SQL_SUM_AGGREGATE_642;
    long __SQL_SUM_AGGREGATE_643;
    long __SQL_SUM_AGGREGATE_644;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_645;
    long __SQL_SUM_AGGREGATE_646;
    long __SQL_SUM_AGGREGATE_647;
    long __SQL_SUM_AGGREGATE_648;
    long __SQL_SUM_AGGREGATE_649;
    long __SQL_SUM_AGGREGATE_650;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_651;
    long __SQL_SUM_AGGREGATE_652;
    long __SQL_SUM_AGGREGATE_653;
    long __SQL_SUM_AGGREGATE_654;
    long __SQL_SUM_AGGREGATE_655;
    long __SQL_SUM_AGGREGATE_656;
    long __SQL_SUM_AGGREGATE_657;
    long __SQL_SUM_AGGREGATE_658;
    long __SQL_SUM_AGGREGATE_659;
    long __SQL_SUM_AGGREGATE_660;
    long __SQL_SUM_AGGREGATE_661;
    long __SQL_SUM_AGGREGATE_662;
    long __SQL_SUM_AGGREGATE_663;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_664;
    long __SQL_SUM_AGGREGATE_665;
    long __SQL_SUM_AGGREGATE_666;
    long __SQL_SUM_AGGREGATE_667;
    long __SQL_SUM_AGGREGATE_668;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_669;
    long __SQL_SUM_AGGREGATE_670;
    long __SQL_SUM_AGGREGATE_671;
    long __SQL_SUM_AGGREGATE_672;
    long __SQL_SUM_AGGREGATE_673;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_674;
    long __SQL_SUM_AGGREGATE_675;
    long __SQL_SUM_AGGREGATE_676;
    long __SQL_SUM_AGGREGATE_677;
    long __SQL_SUM_AGGREGATE_678;
    long __SQL_SUM_AGGREGATE_679;
    long __SQL_SUM_AGGREGATE_680;
    long __SQL_SUM_AGGREGATE_681;
    long __SQL_SUM_AGGREGATE_682;
    long __SQL_SUM_AGGREGATE_683;
    long __SQL_SUM_AGGREGATE_684;
    long __SQL_SUM_AGGREGATE_685;
    long __SQL_SUM_AGGREGATE_686;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_687;
    long __SQL_SUM_AGGREGATE_688;
    long __SQL_SUM_AGGREGATE_689;
    long __SQL_SUM_AGGREGATE_690;
    long __SQL_SUM_AGGREGATE_691;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_692;
    long __SQL_SUM_AGGREGATE_693;
    long __SQL_SUM_AGGREGATE_694;
    long __SQL_SUM_AGGREGATE_695;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_696;
    long __SQL_SUM_AGGREGATE_697;
    long __SQL_SUM_AGGREGATE_698;
    long __SQL_SUM_AGGREGATE_699;
    long __SQL_SUM_AGGREGATE_700;
    long __SQL_SUM_AGGREGATE_701;
    long __SQL_SUM_AGGREGATE_702;
    long __SQL_SUM_AGGREGATE_703;
    long __SQL_SUM_AGGREGATE_704;
    long __SQL_SUM_AGGREGATE_705;
    long __SQL_SUM_AGGREGATE_706;
    long __SQL_SUM_AGGREGATE_707;
    long __SQL_SUM_AGGREGATE_708;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_709;
    long __SQL_SUM_AGGREGATE_710;
    long __SQL_SUM_AGGREGATE_711;
    long __SQL_SUM_AGGREGATE_712;
    long __SQL_SUM_AGGREGATE_713;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_714;
    long __SQL_SUM_AGGREGATE_715;
    long __SQL_SUM_AGGREGATE_716;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_717;
    long __SQL_SUM_AGGREGATE_718;
    long __SQL_SUM_AGGREGATE_719;
    long __SQL_SUM_AGGREGATE_720;
    long __SQL_SUM_AGGREGATE_721;
    long __SQL_SUM_AGGREGATE_722;
    long __SQL_SUM_AGGREGATE_723;
    long __SQL_SUM_AGGREGATE_724;
    long __SQL_SUM_AGGREGATE_725;
    long __SQL_SUM_AGGREGATE_726;
    long __SQL_SUM_AGGREGATE_727;
    long __SQL_SUM_AGGREGATE_728;
    long __SQL_SUM_AGGREGATE_729;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_730;
    long __SQL_SUM_AGGREGATE_731;
    long __SQL_SUM_AGGREGATE_732;
    long __SQL_SUM_AGGREGATE_733;
    long __SQL_SUM_AGGREGATE_734;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_735;
    long __SQL_SUM_AGGREGATE_736;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_737;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_738;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_739;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_740;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_741;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_742;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_743;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_744;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_745;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_746;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_747;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_748;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_749;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_750;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_751;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_752;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_753;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_754;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_755;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_756;
    long __SQL_SUM_AGGREGATE_757;
    long __SQL_SUM_AGGREGATE_758;
    long __SQL_SUM_AGGREGATE_759;
    long __SQL_SUM_AGGREGATE_760;
    long __SQL_SUM_AGGREGATE_761;
    long __SQL_SUM_AGGREGATE_762;
    long __SQL_SUM_AGGREGATE_763;
    long __SQL_SUM_AGGREGATE_764;
    long __SQL_SUM_AGGREGATE_765;
    long __SQL_SUM_AGGREGATE_766;
    long __SQL_SUM_AGGREGATE_767;
    long __SQL_SUM_AGGREGATE_768;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_769;
    long __SQL_SUM_AGGREGATE_770;
    long __SQL_SUM_AGGREGATE_771;
    long __SQL_SUM_AGGREGATE_772;
    long __SQL_SUM_AGGREGATE_773;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_774;
    long __SQL_SUM_AGGREGATE_775;
    long __SQL_SUM_AGGREGATE_776;
    long __SQL_SUM_AGGREGATE_777;
    long __SQL_SUM_AGGREGATE_778;
    long __SQL_SUM_AGGREGATE_779;
    long __SQL_SUM_AGGREGATE_780;
    long __SQL_SUM_AGGREGATE_781;
    long __SQL_SUM_AGGREGATE_782;
    long __SQL_SUM_AGGREGATE_783;
    long __SQL_SUM_AGGREGATE_784;
    long __SQL_SUM_AGGREGATE_785;
    long __SQL_SUM_AGGREGATE_786;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_787;
    long __SQL_SUM_AGGREGATE_788;
    long __SQL_SUM_AGGREGATE_789;
    long __SQL_SUM_AGGREGATE_790;
    long __SQL_SUM_AGGREGATE_791;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_792;
    long __SQL_SUM_AGGREGATE_793;
    long __SQL_SUM_AGGREGATE_794;
    long __SQL_SUM_AGGREGATE_795;
    long __SQL_SUM_AGGREGATE_796;
    long __SQL_SUM_AGGREGATE_797;
    long __SQL_SUM_AGGREGATE_798;
    long __SQL_SUM_AGGREGATE_799;
    long __SQL_SUM_AGGREGATE_800;
    long __SQL_SUM_AGGREGATE_801;
    long __SQL_SUM_AGGREGATE_802;
    long __SQL_SUM_AGGREGATE_803;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_804;
    long __SQL_SUM_AGGREGATE_805;
    long __SQL_SUM_AGGREGATE_806;
    long __SQL_SUM_AGGREGATE_807;
    long __SQL_SUM_AGGREGATE_808;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_809;
    long __SQL_SUM_AGGREGATE_810;
    long __SQL_SUM_AGGREGATE_811;
    long __SQL_SUM_AGGREGATE_812;
    long __SQL_SUM_AGGREGATE_813;
    long __SQL_SUM_AGGREGATE_814;
    long __SQL_SUM_AGGREGATE_815;
    long __SQL_SUM_AGGREGATE_816;
    long __SQL_SUM_AGGREGATE_817;
    long __SQL_SUM_AGGREGATE_818;
    long __SQL_SUM_AGGREGATE_819;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_820;
    long __SQL_SUM_AGGREGATE_821;
    long __SQL_SUM_AGGREGATE_822;
    long __SQL_SUM_AGGREGATE_823;
    long __SQL_SUM_AGGREGATE_824;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_825;
    long __SQL_SUM_AGGREGATE_826;
    long __SQL_SUM_AGGREGATE_827;
    long __SQL_SUM_AGGREGATE_828;
    long __SQL_SUM_AGGREGATE_829;
    long __SQL_SUM_AGGREGATE_830;
    long __SQL_SUM_AGGREGATE_831;
    long __SQL_SUM_AGGREGATE_832;
    long __SQL_SUM_AGGREGATE_833;
    long __SQL_SUM_AGGREGATE_834;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_835;
    long __SQL_SUM_AGGREGATE_836;
    long __SQL_SUM_AGGREGATE_837;
    long __SQL_SUM_AGGREGATE_838;
    long __SQL_SUM_AGGREGATE_839;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_840;
    long __SQL_SUM_AGGREGATE_841;
    long __SQL_SUM_AGGREGATE_842;
    long __SQL_SUM_AGGREGATE_843;
    long __SQL_SUM_AGGREGATE_844;
    long __SQL_SUM_AGGREGATE_845;
    long __SQL_SUM_AGGREGATE_846;
    long __SQL_SUM_AGGREGATE_847;
    long __SQL_SUM_AGGREGATE_848;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_849;
    long __SQL_SUM_AGGREGATE_850;
    long __SQL_SUM_AGGREGATE_851;
    long __SQL_SUM_AGGREGATE_852;
    long __SQL_SUM_AGGREGATE_853;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_854;
    long __SQL_SUM_AGGREGATE_855;
    long __SQL_SUM_AGGREGATE_856;
    long __SQL_SUM_AGGREGATE_857;
    long __SQL_SUM_AGGREGATE_858;
    long __SQL_SUM_AGGREGATE_859;
    long __SQL_SUM_AGGREGATE_860;
    long __SQL_SUM_AGGREGATE_861;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_862;
    long __SQL_SUM_AGGREGATE_863;
    long __SQL_SUM_AGGREGATE_864;
    long __SQL_SUM_AGGREGATE_865;
    long __SQL_SUM_AGGREGATE_866;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_867;
    long __SQL_SUM_AGGREGATE_868;
    long __SQL_SUM_AGGREGATE_869;
    long __SQL_SUM_AGGREGATE_870;
    long __SQL_SUM_AGGREGATE_871;
    long __SQL_SUM_AGGREGATE_872;
    long __SQL_SUM_AGGREGATE_873;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_874;
    long __SQL_SUM_AGGREGATE_875;
    long __SQL_SUM_AGGREGATE_876;
    long __SQL_SUM_AGGREGATE_877;
    long __SQL_SUM_AGGREGATE_878;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_879;
    long __SQL_SUM_AGGREGATE_880;
    long __SQL_SUM_AGGREGATE_881;
    long __SQL_SUM_AGGREGATE_882;
    long __SQL_SUM_AGGREGATE_883;
    long __SQL_SUM_AGGREGATE_884;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_885;
    long __SQL_SUM_AGGREGATE_886;
    long __SQL_SUM_AGGREGATE_887;
    long __SQL_SUM_AGGREGATE_888;
    long __SQL_SUM_AGGREGATE_889;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_890;
    long __SQL_SUM_AGGREGATE_891;
    long __SQL_SUM_AGGREGATE_892;
    long __SQL_SUM_AGGREGATE_893;
    long __SQL_SUM_AGGREGATE_894;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_895;
    long __SQL_SUM_AGGREGATE_896;
    long __SQL_SUM_AGGREGATE_897;
    long __SQL_SUM_AGGREGATE_898;
    long __SQL_SUM_AGGREGATE_899;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_900;
    long __SQL_SUM_AGGREGATE_901;
    long __SQL_SUM_AGGREGATE_902;
    long __SQL_SUM_AGGREGATE_903;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_904;
    long __SQL_SUM_AGGREGATE_905;
    long __SQL_SUM_AGGREGATE_906;
    long __SQL_SUM_AGGREGATE_907;
    long __SQL_SUM_AGGREGATE_908;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_909;
    long __SQL_SUM_AGGREGATE_910;
    long __SQL_SUM_AGGREGATE_911;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_912;
    long __SQL_SUM_AGGREGATE_913;
    long __SQL_SUM_AGGREGATE_914;
    long __SQL_SUM_AGGREGATE_915;
    long __SQL_SUM_AGGREGATE_916;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_917;
    long __SQL_SUM_AGGREGATE_918;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_919;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_920;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_921;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_922;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_923;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_924;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_925;
    long __SQL_SUM_AGGREGATE_926;
    long __SQL_SUM_AGGREGATE_927;
    long __SQL_SUM_AGGREGATE_928;
    long __SQL_SUM_AGGREGATE_929;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_930;
    long __SQL_SUM_AGGREGATE_931;
    long __SQL_SUM_AGGREGATE_932;
    long __SQL_SUM_AGGREGATE_933;
    long __SQL_SUM_AGGREGATE_934;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_935;
    long __SQL_SUM_AGGREGATE_936;
    long __SQL_SUM_AGGREGATE_937;
    long __SQL_SUM_AGGREGATE_938;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_939;
    long __SQL_SUM_AGGREGATE_940;
    long __SQL_SUM_AGGREGATE_941;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_942;
    long __SQL_SUM_AGGREGATE_943;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_944;
    DOUBLE_TYPE __SQL_SUM_AGGREGATE_945;
    long __SQL_SUM_AGGREGATE_946;
  
  };
  
  /* Type definition providing a way to incrementally maintain the results of the sql program */
  struct data_t : tlq_t{
    data_t(): tlq_t() {
      
    }
  
  
    /* Trigger functions for table relations */
    void on_insert_LOCATION(const long location_locn, const long location_zip, const DOUBLE_TYPE location_rgn_cd, const DOUBLE_TYPE location_clim_zn_nbr, const DOUBLE_TYPE location_tot_area_sq_ft, const DOUBLE_TYPE location_sell_area_sq_ft, const DOUBLE_TYPE location_avghhi, const DOUBLE_TYPE location_supertargetdistance, const DOUBLE_TYPE location_supertargetdrivetime, const DOUBLE_TYPE location_targetdistance, const DOUBLE_TYPE location_targetdrivetime, const DOUBLE_TYPE location_walmartdistance, const DOUBLE_TYPE location_walmartdrivetime, const DOUBLE_TYPE location_walmartsupercenterdistance, const DOUBLE_TYPE location_walmartsupercenterdrivetime) {
      LOCATION_entry e(location_locn, location_zip, location_rgn_cd, location_clim_zn_nbr, location_tot_area_sq_ft, location_sell_area_sq_ft, location_avghhi, location_supertargetdistance, location_supertargetdrivetime, location_targetdistance, location_targetdrivetime, location_walmartdistance, location_walmartdrivetime, location_walmartsupercenterdistance, location_walmartsupercenterdrivetime, 1L);
      LOCATION.addOrDelOnZero(e,1L);
    }
    
    void on_insert_CENSUS(const long census_zip, const long census_population, const long census_white, const long census_asian, const long census_pacific, const long census_blackafrican, const DOUBLE_TYPE census_medianage, const long census_occupiedhouseunits, const long census_houseunits, const long census_families, const long census_households, const long census_husbwife, const long census_males, const long census_females, const long census_householdschildren, const long census_hispanic) {
      CENSUS_entry e(census_zip, census_population, census_white, census_asian, census_pacific, census_blackafrican, census_medianage, census_occupiedhouseunits, census_houseunits, census_families, census_households, census_husbwife, census_males, census_females, census_householdschildren, census_hispanic, 1L);
      CENSUS.addOrDelOnZero(e,1L);
    }
    
    void on_insert_ITEM(const DOUBLE_TYPE item_ksn, const long item_subcategory, const long item_category, const long item_categorycluster, const DOUBLE_TYPE item_prize) {
      ITEM_entry e(item_ksn, item_subcategory, item_category, item_categorycluster, item_prize, 1L);
      ITEM.addOrDelOnZero(e,1L);
    }
    
    void on_insert_WEATHER(const long weather_locn, const long weather_dateid, const long weather_rain, const long weather_snow, const long weather_maxtemp, const long weather_mintemp, const DOUBLE_TYPE weather_meanwind, const long weather_thunder) {
      WEATHER_entry e(weather_locn, weather_dateid, weather_rain, weather_snow, weather_maxtemp, weather_mintemp, weather_meanwind, weather_thunder, 1L);
      WEATHER.addOrDelOnZero(e,1L);
    }
    
    
    
    /* Trigger functions for stream relations */
    void on_insert_INVENTORY(const long inventory_locn, const long inventory_dateid, const DOUBLE_TYPE inventory_ksn, const DOUBLE_TYPE inventory_inventoryunits) {
      ++tN;
      __SQL_SUM_AGGREGATE_1 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se2.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se4.modify(inventory_locn,inventory_dateid)) * (inventory_inventoryunits * inventory_inventoryunits))));
      __SQL_SUM_AGGREGATE_2 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se6.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se7.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se8.modify(inventory_locn,inventory_dateid)) * (inventory_inventoryunits * inventory_locn))));
      __SQL_SUM_AGGREGATE_3 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se10.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se11.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se12.modify(inventory_locn,inventory_dateid)) * (inventory_inventoryunits * inventory_dateid))));
      __SQL_SUM_AGGREGATE_4 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se14.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se15.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se16.modify(inventory_locn,inventory_dateid)) * (inventory_inventoryunits * inventory_ksn))));
      __SQL_SUM_AGGREGATE_5 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se18.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se19.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se20.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_6 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se22.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se23.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se24.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_7 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se26.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se27.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se28.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_8 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se30.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se31.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se32.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_9 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se34.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se35.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se36.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_10 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se38.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se39.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se40.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_11 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se42.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se43.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se44.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_12 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se46.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se47.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se48.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_13 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se50.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se51.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se52.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_14 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se54.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se55.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se56.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_15 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se58.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se59.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se60.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_16 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se62.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se63.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se64.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_17 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se66.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se67.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se68.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_18 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se70.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se71.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se72.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_19 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se74.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se75.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se76.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_20 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se78.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se79.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se80.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_21 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se82.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se83.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se84.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_22 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se86.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se87.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se88.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_23 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se90.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se91.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se92.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_24 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se94.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se95.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se96.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_25 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se98.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se99.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se100.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_26 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se102.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se103.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se104.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_27 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se106.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se107.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se108.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_28 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se110.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se111.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se112.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_29 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se114.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se115.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se116.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_30 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se118.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se119.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se120.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_31 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se122.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se123.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se124.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_32 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se126.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se127.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se128.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_33 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se130.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se131.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se132.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_34 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se134.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se135.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se136.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_35 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se138.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se139.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se140.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_36 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se142.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se143.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se144.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_37 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se146.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se147.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se148.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_38 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se150.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se151.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se152.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_39 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se154.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se155.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se156.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_40 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se158.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se159.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se160.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_41 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se162.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se163.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se164.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_42 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se166.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se167.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se168.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_43 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se170.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se171.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se172.modify(inventory_locn,inventory_dateid)) * inventory_inventoryunits)));
      __SQL_SUM_AGGREGATE_44 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se174.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se175.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se176.modify(inventory_locn,inventory_dateid)) * (inventory_locn * inventory_locn))));
      __SQL_SUM_AGGREGATE_45 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se178.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se179.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se180.modify(inventory_locn,inventory_dateid)) * (inventory_locn * inventory_dateid))));
      __SQL_SUM_AGGREGATE_46 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se182.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se183.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se184.modify(inventory_locn,inventory_dateid)) * (inventory_locn * inventory_ksn))));
      __SQL_SUM_AGGREGATE_47 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se186.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se187.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se188.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_48 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se190.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se191.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se192.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_49 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se194.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se195.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se196.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_50 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se198.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se199.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se200.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_51 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se202.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se203.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se204.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_52 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se206.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se207.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se208.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_53 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se210.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se211.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se212.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_54 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se214.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se215.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se216.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_55 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se218.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se219.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se220.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_56 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se222.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se223.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se224.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_57 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se226.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se227.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se228.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_58 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se230.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se231.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se232.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_59 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se234.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se235.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se236.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_60 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se238.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se239.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se240.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_61 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se242.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se243.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se244.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_62 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se246.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se247.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se248.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_63 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se250.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se251.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se252.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_64 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se254.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se255.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se256.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_65 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se258.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se259.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se260.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_66 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se262.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se263.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se264.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_67 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se266.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se267.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se268.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_68 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se270.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se271.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se272.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_69 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se274.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se275.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se276.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_70 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se278.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se279.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se280.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_71 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se282.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se283.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se284.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_72 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se286.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se287.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se288.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_73 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se290.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se291.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se292.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_74 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se294.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se295.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se296.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_75 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se298.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se299.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se300.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_76 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se302.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se303.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se304.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_77 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se306.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se307.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se308.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_78 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se310.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se311.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se312.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_79 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se314.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se315.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se316.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_80 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se318.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se319.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se320.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_81 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se322.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se323.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se324.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_82 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se326.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se327.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se328.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_83 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se330.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se331.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se332.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_84 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se334.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se335.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se336.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_85 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se338.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se339.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se340.modify(inventory_locn,inventory_dateid)) * inventory_locn)));
      __SQL_SUM_AGGREGATE_86 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se342.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se343.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se344.modify(inventory_locn,inventory_dateid)) * (inventory_dateid * inventory_dateid))));
      __SQL_SUM_AGGREGATE_87 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se346.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se347.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se348.modify(inventory_locn,inventory_dateid)) * (inventory_dateid * inventory_ksn))));
      __SQL_SUM_AGGREGATE_88 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se350.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se351.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se352.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_89 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se354.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se355.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se356.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_90 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se358.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se359.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se360.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_91 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se362.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se363.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se364.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_92 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se366.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se367.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se368.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_93 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se370.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se371.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se372.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_94 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se374.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se375.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se376.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_95 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se378.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se379.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se380.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_96 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se382.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se383.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se384.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_97 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se386.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se387.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se388.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_98 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se390.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se391.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se392.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_99 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se394.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se395.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se396.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_100 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se398.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se399.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se400.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_101 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se402.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se403.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se404.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_102 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se406.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se407.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se408.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_103 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se410.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se411.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se412.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_104 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se414.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se415.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se416.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_105 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se418.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se419.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se420.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_106 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se422.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se423.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se424.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_107 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se426.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se427.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se428.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_108 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se430.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se431.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se432.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_109 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se434.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se435.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se436.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_110 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se438.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se439.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se440.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_111 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se442.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se443.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se444.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_112 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se446.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se447.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se448.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_113 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se450.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se451.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se452.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_114 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se454.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se455.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se456.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_115 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se458.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se459.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se460.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_116 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se462.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se463.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se464.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_117 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se466.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se467.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se468.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_118 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se470.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se471.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se472.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_119 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se474.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se475.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se476.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_120 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se478.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se479.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se480.modify(inventory_locn,inventory_dateid)) * inventory_dateid)));
      __SQL_SUM_AGGREGATE_121 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se482.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se483.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_121INVENTORY3.getValueOrDefault(se484.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_122 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se486.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se487.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_122INVENTORY3.getValueOrDefault(se488.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_123 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se490.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se491.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_123INVENTORY3.getValueOrDefault(se492.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_124 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se494.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se495.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_124INVENTORY3.getValueOrDefault(se496.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_125 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se498.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se499.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_125INVENTORY3.getValueOrDefault(se500.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_126 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se502.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se503.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_126INVENTORY3.getValueOrDefault(se504.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_127 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se506.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se507.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se508.modify(inventory_locn,inventory_dateid)) * (inventory_ksn * inventory_ksn))));
      __SQL_SUM_AGGREGATE_128 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se510.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se511.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se512.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_129 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se514.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se515.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se516.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_130 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se518.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se519.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se520.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_131 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se522.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se523.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se524.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_132 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se526.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se527.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se528.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_133 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se530.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se531.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se532.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_134 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se534.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se535.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se536.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_135 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se538.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se539.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se540.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_136 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se542.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se543.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se544.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_137 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se546.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se547.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se548.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_138 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se550.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se551.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se552.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_139 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se554.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se555.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se556.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_140 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se558.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se559.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se560.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_141 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se562.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se563.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se564.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_142 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se566.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se567.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se568.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_143 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se570.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se571.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se572.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_144 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se574.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se575.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se576.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_145 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se578.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se579.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se580.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_146 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se582.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se583.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se584.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_147 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se586.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se587.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se588.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_148 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se590.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se591.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se592.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_149 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se594.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se595.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se596.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_150 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se598.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se599.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se600.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_151 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se602.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se603.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se604.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_152 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se606.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se607.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se608.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_153 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se610.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se611.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se612.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_154 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se614.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se615.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se616.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_155 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se618.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se619.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se620.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_156 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se622.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se623.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se624.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_157 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se626.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_157INVENTORY2.getValueOrDefault(se627.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se628.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_158 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se630.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_158INVENTORY2.getValueOrDefault(se631.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se632.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_159 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se634.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_159INVENTORY2.getValueOrDefault(se635.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se636.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_160 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se638.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_160INVENTORY2.getValueOrDefault(se639.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se640.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_161 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se642.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se643.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se644.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_162 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se646.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se647.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se648.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_163 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se650.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se651.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se652.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_164 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se654.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se655.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se656.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_165 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se658.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se659.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se660.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_166 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se662.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se663.modify(inventory_ksn)) * (__SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se664.modify(inventory_locn,inventory_dateid)) * inventory_ksn)));
      __SQL_SUM_AGGREGATE_167 += (__SQL_SUM_AGGREGATE_167INVENTORY1.getValueOrDefault(se666.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se667.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se668.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_168 += (__SQL_SUM_AGGREGATE_168INVENTORY1.getValueOrDefault(se670.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se671.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se672.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_169 += (__SQL_SUM_AGGREGATE_169INVENTORY1.getValueOrDefault(se674.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se675.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se676.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_170 += (__SQL_SUM_AGGREGATE_170INVENTORY1.getValueOrDefault(se678.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se679.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se680.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_171 += (__SQL_SUM_AGGREGATE_171INVENTORY1.getValueOrDefault(se682.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se683.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se684.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_172 += (__SQL_SUM_AGGREGATE_172INVENTORY1.getValueOrDefault(se686.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se687.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se688.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_173 += (__SQL_SUM_AGGREGATE_173INVENTORY1.getValueOrDefault(se690.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se691.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se692.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_174 += (__SQL_SUM_AGGREGATE_174INVENTORY1.getValueOrDefault(se694.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se695.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se696.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_175 += (__SQL_SUM_AGGREGATE_175INVENTORY1.getValueOrDefault(se698.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se699.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se700.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_176 += (__SQL_SUM_AGGREGATE_176INVENTORY1.getValueOrDefault(se702.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se703.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se704.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_177 += (__SQL_SUM_AGGREGATE_177INVENTORY1.getValueOrDefault(se706.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se707.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se708.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_178 += (__SQL_SUM_AGGREGATE_178INVENTORY1.getValueOrDefault(se710.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se711.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se712.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_179 += (__SQL_SUM_AGGREGATE_179INVENTORY1.getValueOrDefault(se714.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se715.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se716.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_180 += (__SQL_SUM_AGGREGATE_180INVENTORY1.getValueOrDefault(se718.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se719.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se720.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_181 += (__SQL_SUM_AGGREGATE_181INVENTORY1.getValueOrDefault(se722.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se723.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se724.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_182 += (__SQL_SUM_AGGREGATE_182INVENTORY1.getValueOrDefault(se726.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se727.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se728.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_183 += (__SQL_SUM_AGGREGATE_183INVENTORY1.getValueOrDefault(se730.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se731.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se732.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_184 += (__SQL_SUM_AGGREGATE_184INVENTORY1.getValueOrDefault(se734.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se735.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se736.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_185 += (__SQL_SUM_AGGREGATE_185INVENTORY1.getValueOrDefault(se738.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se739.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se740.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_186 += (__SQL_SUM_AGGREGATE_186INVENTORY1.getValueOrDefault(se742.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se743.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se744.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_187 += (__SQL_SUM_AGGREGATE_187INVENTORY1.getValueOrDefault(se746.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se747.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se748.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_188 += (__SQL_SUM_AGGREGATE_188INVENTORY1.getValueOrDefault(se750.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se751.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se752.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_189 += (__SQL_SUM_AGGREGATE_189INVENTORY1.getValueOrDefault(se754.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se755.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se756.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_190 += (__SQL_SUM_AGGREGATE_190INVENTORY1.getValueOrDefault(se758.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se759.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se760.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_191 += (__SQL_SUM_AGGREGATE_191INVENTORY1.getValueOrDefault(se762.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se763.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se764.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_192 += (__SQL_SUM_AGGREGATE_192INVENTORY1.getValueOrDefault(se766.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se767.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se768.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_193 += (__SQL_SUM_AGGREGATE_193INVENTORY1.getValueOrDefault(se770.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se771.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se772.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_194 += (__SQL_SUM_AGGREGATE_194INVENTORY1.getValueOrDefault(se774.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se775.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se776.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_195 += (__SQL_SUM_AGGREGATE_195INVENTORY1.getValueOrDefault(se778.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se779.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se780.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_196 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se782.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se783.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se784.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_197 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se786.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se787.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se788.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_198 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se790.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se791.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se792.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_199 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se794.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se795.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se796.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_200 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se798.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se799.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se800.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_201 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se802.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se803.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se804.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_202 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se806.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se807.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se808.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_203 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se810.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se811.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se812.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_204 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se814.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se815.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se816.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_205 += (__SQL_SUM_AGGREGATE_5INVENTORY1.getValueOrDefault(se818.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se819.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se820.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_206 += (__SQL_SUM_AGGREGATE_206INVENTORY1.getValueOrDefault(se822.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se823.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se824.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_207 += (__SQL_SUM_AGGREGATE_207INVENTORY1.getValueOrDefault(se826.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se827.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se828.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_208 += (__SQL_SUM_AGGREGATE_208INVENTORY1.getValueOrDefault(se830.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se831.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se832.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_209 += (__SQL_SUM_AGGREGATE_209INVENTORY1.getValueOrDefault(se834.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se835.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se836.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_210 += (__SQL_SUM_AGGREGATE_210INVENTORY1.getValueOrDefault(se838.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se839.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se840.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_211 += (__SQL_SUM_AGGREGATE_211INVENTORY1.getValueOrDefault(se842.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se843.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se844.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_212 += (__SQL_SUM_AGGREGATE_212INVENTORY1.getValueOrDefault(se846.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se847.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se848.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_213 += (__SQL_SUM_AGGREGATE_213INVENTORY1.getValueOrDefault(se850.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se851.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se852.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_214 += (__SQL_SUM_AGGREGATE_214INVENTORY1.getValueOrDefault(se854.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se855.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se856.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_215 += (__SQL_SUM_AGGREGATE_215INVENTORY1.getValueOrDefault(se858.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se859.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se860.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_216 += (__SQL_SUM_AGGREGATE_216INVENTORY1.getValueOrDefault(se862.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se863.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se864.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_217 += (__SQL_SUM_AGGREGATE_217INVENTORY1.getValueOrDefault(se866.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se867.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se868.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_218 += (__SQL_SUM_AGGREGATE_218INVENTORY1.getValueOrDefault(se870.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se871.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se872.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_219 += (__SQL_SUM_AGGREGATE_219INVENTORY1.getValueOrDefault(se874.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se875.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se876.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_220 += (__SQL_SUM_AGGREGATE_220INVENTORY1.getValueOrDefault(se878.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se879.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se880.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_221 += (__SQL_SUM_AGGREGATE_221INVENTORY1.getValueOrDefault(se882.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se883.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se884.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_222 += (__SQL_SUM_AGGREGATE_222INVENTORY1.getValueOrDefault(se886.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se887.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se888.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_223 += (__SQL_SUM_AGGREGATE_223INVENTORY1.getValueOrDefault(se890.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se891.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se892.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_224 += (__SQL_SUM_AGGREGATE_224INVENTORY1.getValueOrDefault(se894.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se895.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se896.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_225 += (__SQL_SUM_AGGREGATE_225INVENTORY1.getValueOrDefault(se898.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se899.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se900.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_226 += (__SQL_SUM_AGGREGATE_226INVENTORY1.getValueOrDefault(se902.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se903.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se904.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_227 += (__SQL_SUM_AGGREGATE_227INVENTORY1.getValueOrDefault(se906.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se907.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se908.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_228 += (__SQL_SUM_AGGREGATE_228INVENTORY1.getValueOrDefault(se910.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se911.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se912.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_229 += (__SQL_SUM_AGGREGATE_229INVENTORY1.getValueOrDefault(se914.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se915.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se916.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_230 += (__SQL_SUM_AGGREGATE_230INVENTORY1.getValueOrDefault(se918.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se919.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se920.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_231 += (__SQL_SUM_AGGREGATE_231INVENTORY1.getValueOrDefault(se922.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se923.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se924.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_232 += (__SQL_SUM_AGGREGATE_232INVENTORY1.getValueOrDefault(se926.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se927.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se928.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_233 += (__SQL_SUM_AGGREGATE_233INVENTORY1.getValueOrDefault(se930.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se931.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se932.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_234 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se934.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se935.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se936.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_235 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se938.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se939.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se940.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_236 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se942.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se943.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se944.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_237 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se946.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se947.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se948.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_238 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se950.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se951.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se952.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_239 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se954.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se955.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se956.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_240 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se958.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se959.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se960.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_241 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se962.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se963.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se964.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_242 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se966.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se967.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se968.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_243 += (__SQL_SUM_AGGREGATE_6INVENTORY1.getValueOrDefault(se970.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se971.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se972.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_244 += (__SQL_SUM_AGGREGATE_244INVENTORY1.getValueOrDefault(se974.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se975.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se976.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_245 += (__SQL_SUM_AGGREGATE_245INVENTORY1.getValueOrDefault(se978.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se979.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se980.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_246 += (__SQL_SUM_AGGREGATE_246INVENTORY1.getValueOrDefault(se982.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se983.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se984.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_247 += (__SQL_SUM_AGGREGATE_247INVENTORY1.getValueOrDefault(se986.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se987.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se988.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_248 += (__SQL_SUM_AGGREGATE_248INVENTORY1.getValueOrDefault(se990.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se991.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se992.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_249 += (__SQL_SUM_AGGREGATE_249INVENTORY1.getValueOrDefault(se994.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se995.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se996.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_250 += (__SQL_SUM_AGGREGATE_250INVENTORY1.getValueOrDefault(se998.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se999.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1000.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_251 += (__SQL_SUM_AGGREGATE_251INVENTORY1.getValueOrDefault(se1002.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1003.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1004.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_252 += (__SQL_SUM_AGGREGATE_252INVENTORY1.getValueOrDefault(se1006.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1007.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1008.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_253 += (__SQL_SUM_AGGREGATE_253INVENTORY1.getValueOrDefault(se1010.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1011.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1012.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_254 += (__SQL_SUM_AGGREGATE_254INVENTORY1.getValueOrDefault(se1014.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1015.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1016.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_255 += (__SQL_SUM_AGGREGATE_255INVENTORY1.getValueOrDefault(se1018.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1019.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1020.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_256 += (__SQL_SUM_AGGREGATE_256INVENTORY1.getValueOrDefault(se1022.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1023.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1024.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_257 += (__SQL_SUM_AGGREGATE_257INVENTORY1.getValueOrDefault(se1026.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1027.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1028.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_258 += (__SQL_SUM_AGGREGATE_258INVENTORY1.getValueOrDefault(se1030.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1031.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1032.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_259 += (__SQL_SUM_AGGREGATE_259INVENTORY1.getValueOrDefault(se1034.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1035.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1036.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_260 += (__SQL_SUM_AGGREGATE_260INVENTORY1.getValueOrDefault(se1038.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1039.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1040.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_261 += (__SQL_SUM_AGGREGATE_261INVENTORY1.getValueOrDefault(se1042.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1043.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1044.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_262 += (__SQL_SUM_AGGREGATE_262INVENTORY1.getValueOrDefault(se1046.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1047.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1048.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_263 += (__SQL_SUM_AGGREGATE_263INVENTORY1.getValueOrDefault(se1050.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1051.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1052.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_264 += (__SQL_SUM_AGGREGATE_264INVENTORY1.getValueOrDefault(se1054.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1055.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1056.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_265 += (__SQL_SUM_AGGREGATE_265INVENTORY1.getValueOrDefault(se1058.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1059.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1060.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_266 += (__SQL_SUM_AGGREGATE_266INVENTORY1.getValueOrDefault(se1062.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1063.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1064.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_267 += (__SQL_SUM_AGGREGATE_267INVENTORY1.getValueOrDefault(se1066.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1067.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1068.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_268 += (__SQL_SUM_AGGREGATE_268INVENTORY1.getValueOrDefault(se1070.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1071.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1072.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_269 += (__SQL_SUM_AGGREGATE_269INVENTORY1.getValueOrDefault(se1074.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1075.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1076.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_270 += (__SQL_SUM_AGGREGATE_270INVENTORY1.getValueOrDefault(se1078.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1079.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1080.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_271 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1082.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1083.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1084.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_272 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1086.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1087.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1088.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_273 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1090.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1091.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1092.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_274 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1094.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1095.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1096.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_275 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1098.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1099.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1100.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_276 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1102.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1103.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1104.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_277 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1106.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1107.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1108.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_278 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1110.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1111.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1112.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_279 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1114.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1115.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1116.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_280 += (__SQL_SUM_AGGREGATE_7INVENTORY1.getValueOrDefault(se1118.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1119.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1120.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_281 += (__SQL_SUM_AGGREGATE_281INVENTORY1.getValueOrDefault(se1122.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1123.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1124.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_282 += (__SQL_SUM_AGGREGATE_282INVENTORY1.getValueOrDefault(se1126.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1127.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1128.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_283 += (__SQL_SUM_AGGREGATE_283INVENTORY1.getValueOrDefault(se1130.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1131.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1132.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_284 += (__SQL_SUM_AGGREGATE_284INVENTORY1.getValueOrDefault(se1134.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1135.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1136.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_285 += (__SQL_SUM_AGGREGATE_285INVENTORY1.getValueOrDefault(se1138.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1139.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1140.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_286 += (__SQL_SUM_AGGREGATE_286INVENTORY1.getValueOrDefault(se1142.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1143.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1144.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_287 += (__SQL_SUM_AGGREGATE_287INVENTORY1.getValueOrDefault(se1146.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1147.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1148.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_288 += (__SQL_SUM_AGGREGATE_288INVENTORY1.getValueOrDefault(se1150.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1151.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1152.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_289 += (__SQL_SUM_AGGREGATE_289INVENTORY1.getValueOrDefault(se1154.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1155.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1156.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_290 += (__SQL_SUM_AGGREGATE_290INVENTORY1.getValueOrDefault(se1158.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1159.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1160.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_291 += (__SQL_SUM_AGGREGATE_291INVENTORY1.getValueOrDefault(se1162.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1163.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1164.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_292 += (__SQL_SUM_AGGREGATE_292INVENTORY1.getValueOrDefault(se1166.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1167.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1168.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_293 += (__SQL_SUM_AGGREGATE_293INVENTORY1.getValueOrDefault(se1170.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1171.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1172.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_294 += (__SQL_SUM_AGGREGATE_294INVENTORY1.getValueOrDefault(se1174.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1175.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1176.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_295 += (__SQL_SUM_AGGREGATE_295INVENTORY1.getValueOrDefault(se1178.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1179.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1180.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_296 += (__SQL_SUM_AGGREGATE_296INVENTORY1.getValueOrDefault(se1182.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1183.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1184.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_297 += (__SQL_SUM_AGGREGATE_297INVENTORY1.getValueOrDefault(se1186.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1187.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1188.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_298 += (__SQL_SUM_AGGREGATE_298INVENTORY1.getValueOrDefault(se1190.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1191.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1192.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_299 += (__SQL_SUM_AGGREGATE_299INVENTORY1.getValueOrDefault(se1194.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1195.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1196.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_300 += (__SQL_SUM_AGGREGATE_300INVENTORY1.getValueOrDefault(se1198.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1199.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1200.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_301 += (__SQL_SUM_AGGREGATE_301INVENTORY1.getValueOrDefault(se1202.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1203.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1204.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_302 += (__SQL_SUM_AGGREGATE_302INVENTORY1.getValueOrDefault(se1206.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1207.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1208.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_303 += (__SQL_SUM_AGGREGATE_303INVENTORY1.getValueOrDefault(se1210.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1211.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1212.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_304 += (__SQL_SUM_AGGREGATE_304INVENTORY1.getValueOrDefault(se1214.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1215.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1216.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_305 += (__SQL_SUM_AGGREGATE_305INVENTORY1.getValueOrDefault(se1218.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1219.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1220.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_306 += (__SQL_SUM_AGGREGATE_306INVENTORY1.getValueOrDefault(se1222.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1223.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1224.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_307 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1226.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1227.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1228.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_308 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1230.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1231.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1232.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_309 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1234.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1235.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1236.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_310 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1238.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1239.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1240.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_311 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1242.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1243.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1244.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_312 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1246.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1247.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1248.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_313 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1250.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1251.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1252.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_314 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1254.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1255.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1256.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_315 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1258.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1259.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1260.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_316 += (__SQL_SUM_AGGREGATE_8INVENTORY1.getValueOrDefault(se1262.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1263.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1264.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_317 += (__SQL_SUM_AGGREGATE_317INVENTORY1.getValueOrDefault(se1266.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1267.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1268.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_318 += (__SQL_SUM_AGGREGATE_318INVENTORY1.getValueOrDefault(se1270.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1271.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1272.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_319 += (__SQL_SUM_AGGREGATE_319INVENTORY1.getValueOrDefault(se1274.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1275.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1276.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_320 += (__SQL_SUM_AGGREGATE_320INVENTORY1.getValueOrDefault(se1278.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1279.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1280.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_321 += (__SQL_SUM_AGGREGATE_321INVENTORY1.getValueOrDefault(se1282.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1283.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1284.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_322 += (__SQL_SUM_AGGREGATE_322INVENTORY1.getValueOrDefault(se1286.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1287.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1288.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_323 += (__SQL_SUM_AGGREGATE_323INVENTORY1.getValueOrDefault(se1290.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1291.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1292.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_324 += (__SQL_SUM_AGGREGATE_324INVENTORY1.getValueOrDefault(se1294.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1295.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1296.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_325 += (__SQL_SUM_AGGREGATE_325INVENTORY1.getValueOrDefault(se1298.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1299.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1300.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_326 += (__SQL_SUM_AGGREGATE_326INVENTORY1.getValueOrDefault(se1302.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1303.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1304.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_327 += (__SQL_SUM_AGGREGATE_327INVENTORY1.getValueOrDefault(se1306.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1307.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1308.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_328 += (__SQL_SUM_AGGREGATE_328INVENTORY1.getValueOrDefault(se1310.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1311.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1312.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_329 += (__SQL_SUM_AGGREGATE_329INVENTORY1.getValueOrDefault(se1314.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1315.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1316.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_330 += (__SQL_SUM_AGGREGATE_330INVENTORY1.getValueOrDefault(se1318.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1319.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1320.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_331 += (__SQL_SUM_AGGREGATE_331INVENTORY1.getValueOrDefault(se1322.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1323.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1324.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_332 += (__SQL_SUM_AGGREGATE_332INVENTORY1.getValueOrDefault(se1326.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1327.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1328.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_333 += (__SQL_SUM_AGGREGATE_333INVENTORY1.getValueOrDefault(se1330.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1331.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1332.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_334 += (__SQL_SUM_AGGREGATE_334INVENTORY1.getValueOrDefault(se1334.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1335.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1336.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_335 += (__SQL_SUM_AGGREGATE_335INVENTORY1.getValueOrDefault(se1338.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1339.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1340.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_336 += (__SQL_SUM_AGGREGATE_336INVENTORY1.getValueOrDefault(se1342.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1343.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1344.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_337 += (__SQL_SUM_AGGREGATE_337INVENTORY1.getValueOrDefault(se1346.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1347.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1348.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_338 += (__SQL_SUM_AGGREGATE_338INVENTORY1.getValueOrDefault(se1350.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1351.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1352.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_339 += (__SQL_SUM_AGGREGATE_339INVENTORY1.getValueOrDefault(se1354.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1355.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1356.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_340 += (__SQL_SUM_AGGREGATE_340INVENTORY1.getValueOrDefault(se1358.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1359.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1360.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_341 += (__SQL_SUM_AGGREGATE_341INVENTORY1.getValueOrDefault(se1362.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1363.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1364.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_342 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1366.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1367.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1368.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_343 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1370.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1371.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1372.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_344 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1374.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1375.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1376.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_345 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1378.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1379.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1380.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_346 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1382.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1383.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1384.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_347 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1386.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1387.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1388.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_348 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1390.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1391.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1392.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_349 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1394.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1395.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1396.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_350 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1398.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1399.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1400.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_351 += (__SQL_SUM_AGGREGATE_9INVENTORY1.getValueOrDefault(se1402.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1403.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1404.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_352 += (__SQL_SUM_AGGREGATE_352INVENTORY1.getValueOrDefault(se1406.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1407.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1408.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_353 += (__SQL_SUM_AGGREGATE_353INVENTORY1.getValueOrDefault(se1410.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1411.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1412.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_354 += (__SQL_SUM_AGGREGATE_354INVENTORY1.getValueOrDefault(se1414.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1415.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1416.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_355 += (__SQL_SUM_AGGREGATE_355INVENTORY1.getValueOrDefault(se1418.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1419.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1420.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_356 += (__SQL_SUM_AGGREGATE_356INVENTORY1.getValueOrDefault(se1422.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1423.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1424.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_357 += (__SQL_SUM_AGGREGATE_357INVENTORY1.getValueOrDefault(se1426.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1427.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1428.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_358 += (__SQL_SUM_AGGREGATE_358INVENTORY1.getValueOrDefault(se1430.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1431.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1432.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_359 += (__SQL_SUM_AGGREGATE_359INVENTORY1.getValueOrDefault(se1434.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1435.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1436.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_360 += (__SQL_SUM_AGGREGATE_360INVENTORY1.getValueOrDefault(se1438.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1439.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1440.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_361 += (__SQL_SUM_AGGREGATE_361INVENTORY1.getValueOrDefault(se1442.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1443.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1444.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_362 += (__SQL_SUM_AGGREGATE_362INVENTORY1.getValueOrDefault(se1446.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1447.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1448.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_363 += (__SQL_SUM_AGGREGATE_363INVENTORY1.getValueOrDefault(se1450.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1451.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1452.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_364 += (__SQL_SUM_AGGREGATE_364INVENTORY1.getValueOrDefault(se1454.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1455.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1456.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_365 += (__SQL_SUM_AGGREGATE_365INVENTORY1.getValueOrDefault(se1458.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1459.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1460.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_366 += (__SQL_SUM_AGGREGATE_366INVENTORY1.getValueOrDefault(se1462.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1463.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1464.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_367 += (__SQL_SUM_AGGREGATE_367INVENTORY1.getValueOrDefault(se1466.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1467.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1468.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_368 += (__SQL_SUM_AGGREGATE_368INVENTORY1.getValueOrDefault(se1470.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1471.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1472.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_369 += (__SQL_SUM_AGGREGATE_369INVENTORY1.getValueOrDefault(se1474.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1475.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1476.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_370 += (__SQL_SUM_AGGREGATE_370INVENTORY1.getValueOrDefault(se1478.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1479.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1480.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_371 += (__SQL_SUM_AGGREGATE_371INVENTORY1.getValueOrDefault(se1482.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1483.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1484.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_372 += (__SQL_SUM_AGGREGATE_372INVENTORY1.getValueOrDefault(se1486.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1487.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1488.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_373 += (__SQL_SUM_AGGREGATE_373INVENTORY1.getValueOrDefault(se1490.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1491.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1492.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_374 += (__SQL_SUM_AGGREGATE_374INVENTORY1.getValueOrDefault(se1494.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1495.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1496.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_375 += (__SQL_SUM_AGGREGATE_375INVENTORY1.getValueOrDefault(se1498.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1499.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1500.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_376 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1502.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1503.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1504.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_377 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1506.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1507.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1508.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_378 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1510.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1511.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1512.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_379 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1514.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1515.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1516.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_380 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1518.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1519.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1520.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_381 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1522.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1523.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1524.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_382 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1526.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1527.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1528.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_383 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1530.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1531.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1532.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_384 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1534.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1535.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1536.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_385 += (__SQL_SUM_AGGREGATE_10INVENTORY1.getValueOrDefault(se1538.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1539.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1540.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_386 += (__SQL_SUM_AGGREGATE_386INVENTORY1.getValueOrDefault(se1542.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1543.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1544.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_387 += (__SQL_SUM_AGGREGATE_387INVENTORY1.getValueOrDefault(se1546.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1547.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1548.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_388 += (__SQL_SUM_AGGREGATE_388INVENTORY1.getValueOrDefault(se1550.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1551.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1552.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_389 += (__SQL_SUM_AGGREGATE_389INVENTORY1.getValueOrDefault(se1554.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1555.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1556.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_390 += (__SQL_SUM_AGGREGATE_390INVENTORY1.getValueOrDefault(se1558.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1559.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1560.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_391 += (__SQL_SUM_AGGREGATE_391INVENTORY1.getValueOrDefault(se1562.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1563.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1564.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_392 += (__SQL_SUM_AGGREGATE_392INVENTORY1.getValueOrDefault(se1566.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1567.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1568.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_393 += (__SQL_SUM_AGGREGATE_393INVENTORY1.getValueOrDefault(se1570.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1571.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1572.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_394 += (__SQL_SUM_AGGREGATE_394INVENTORY1.getValueOrDefault(se1574.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1575.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1576.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_395 += (__SQL_SUM_AGGREGATE_395INVENTORY1.getValueOrDefault(se1578.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1579.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1580.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_396 += (__SQL_SUM_AGGREGATE_396INVENTORY1.getValueOrDefault(se1582.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1583.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1584.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_397 += (__SQL_SUM_AGGREGATE_397INVENTORY1.getValueOrDefault(se1586.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1587.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1588.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_398 += (__SQL_SUM_AGGREGATE_398INVENTORY1.getValueOrDefault(se1590.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1591.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1592.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_399 += (__SQL_SUM_AGGREGATE_399INVENTORY1.getValueOrDefault(se1594.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1595.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1596.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_400 += (__SQL_SUM_AGGREGATE_400INVENTORY1.getValueOrDefault(se1598.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1599.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1600.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_401 += (__SQL_SUM_AGGREGATE_401INVENTORY1.getValueOrDefault(se1602.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1603.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1604.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_402 += (__SQL_SUM_AGGREGATE_402INVENTORY1.getValueOrDefault(se1606.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1607.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1608.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_403 += (__SQL_SUM_AGGREGATE_403INVENTORY1.getValueOrDefault(se1610.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1611.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1612.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_404 += (__SQL_SUM_AGGREGATE_404INVENTORY1.getValueOrDefault(se1614.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1615.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1616.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_405 += (__SQL_SUM_AGGREGATE_405INVENTORY1.getValueOrDefault(se1618.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1619.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1620.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_406 += (__SQL_SUM_AGGREGATE_406INVENTORY1.getValueOrDefault(se1622.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1623.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1624.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_407 += (__SQL_SUM_AGGREGATE_407INVENTORY1.getValueOrDefault(se1626.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1627.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1628.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_408 += (__SQL_SUM_AGGREGATE_408INVENTORY1.getValueOrDefault(se1630.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1631.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1632.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_409 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1634.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1635.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1636.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_410 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1638.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1639.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1640.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_411 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1642.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1643.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1644.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_412 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1646.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1647.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1648.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_413 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1650.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1651.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1652.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_414 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1654.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1655.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1656.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_415 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1658.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1659.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1660.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_416 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1662.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1663.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1664.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_417 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1666.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1667.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1668.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_418 += (__SQL_SUM_AGGREGATE_11INVENTORY1.getValueOrDefault(se1670.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1671.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1672.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_419 += (__SQL_SUM_AGGREGATE_419INVENTORY1.getValueOrDefault(se1674.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1675.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1676.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_420 += (__SQL_SUM_AGGREGATE_420INVENTORY1.getValueOrDefault(se1678.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1679.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1680.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_421 += (__SQL_SUM_AGGREGATE_421INVENTORY1.getValueOrDefault(se1682.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1683.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1684.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_422 += (__SQL_SUM_AGGREGATE_422INVENTORY1.getValueOrDefault(se1686.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1687.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1688.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_423 += (__SQL_SUM_AGGREGATE_423INVENTORY1.getValueOrDefault(se1690.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1691.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1692.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_424 += (__SQL_SUM_AGGREGATE_424INVENTORY1.getValueOrDefault(se1694.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1695.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1696.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_425 += (__SQL_SUM_AGGREGATE_425INVENTORY1.getValueOrDefault(se1698.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1699.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1700.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_426 += (__SQL_SUM_AGGREGATE_426INVENTORY1.getValueOrDefault(se1702.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1703.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1704.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_427 += (__SQL_SUM_AGGREGATE_427INVENTORY1.getValueOrDefault(se1706.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1707.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1708.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_428 += (__SQL_SUM_AGGREGATE_428INVENTORY1.getValueOrDefault(se1710.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1711.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1712.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_429 += (__SQL_SUM_AGGREGATE_429INVENTORY1.getValueOrDefault(se1714.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1715.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1716.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_430 += (__SQL_SUM_AGGREGATE_430INVENTORY1.getValueOrDefault(se1718.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1719.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1720.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_431 += (__SQL_SUM_AGGREGATE_431INVENTORY1.getValueOrDefault(se1722.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1723.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1724.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_432 += (__SQL_SUM_AGGREGATE_432INVENTORY1.getValueOrDefault(se1726.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1727.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1728.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_433 += (__SQL_SUM_AGGREGATE_433INVENTORY1.getValueOrDefault(se1730.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1731.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1732.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_434 += (__SQL_SUM_AGGREGATE_434INVENTORY1.getValueOrDefault(se1734.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1735.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1736.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_435 += (__SQL_SUM_AGGREGATE_435INVENTORY1.getValueOrDefault(se1738.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1739.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1740.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_436 += (__SQL_SUM_AGGREGATE_436INVENTORY1.getValueOrDefault(se1742.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1743.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1744.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_437 += (__SQL_SUM_AGGREGATE_437INVENTORY1.getValueOrDefault(se1746.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1747.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1748.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_438 += (__SQL_SUM_AGGREGATE_438INVENTORY1.getValueOrDefault(se1750.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1751.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1752.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_439 += (__SQL_SUM_AGGREGATE_439INVENTORY1.getValueOrDefault(se1754.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1755.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1756.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_440 += (__SQL_SUM_AGGREGATE_440INVENTORY1.getValueOrDefault(se1758.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1759.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1760.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_441 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1762.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1763.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1764.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_442 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1766.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1767.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1768.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_443 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1770.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1771.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1772.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_444 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1774.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1775.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1776.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_445 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1778.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1779.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1780.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_446 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1782.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1783.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1784.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_447 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1786.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1787.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1788.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_448 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1790.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1791.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1792.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_449 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1794.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1795.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1796.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_450 += (__SQL_SUM_AGGREGATE_12INVENTORY1.getValueOrDefault(se1798.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1799.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1800.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_451 += (__SQL_SUM_AGGREGATE_451INVENTORY1.getValueOrDefault(se1802.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1803.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1804.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_452 += (__SQL_SUM_AGGREGATE_452INVENTORY1.getValueOrDefault(se1806.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1807.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1808.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_453 += (__SQL_SUM_AGGREGATE_453INVENTORY1.getValueOrDefault(se1810.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1811.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1812.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_454 += (__SQL_SUM_AGGREGATE_454INVENTORY1.getValueOrDefault(se1814.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1815.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1816.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_455 += (__SQL_SUM_AGGREGATE_455INVENTORY1.getValueOrDefault(se1818.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1819.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1820.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_456 += (__SQL_SUM_AGGREGATE_456INVENTORY1.getValueOrDefault(se1822.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1823.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1824.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_457 += (__SQL_SUM_AGGREGATE_457INVENTORY1.getValueOrDefault(se1826.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1827.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1828.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_458 += (__SQL_SUM_AGGREGATE_458INVENTORY1.getValueOrDefault(se1830.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1831.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1832.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_459 += (__SQL_SUM_AGGREGATE_459INVENTORY1.getValueOrDefault(se1834.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1835.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1836.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_460 += (__SQL_SUM_AGGREGATE_460INVENTORY1.getValueOrDefault(se1838.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1839.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1840.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_461 += (__SQL_SUM_AGGREGATE_461INVENTORY1.getValueOrDefault(se1842.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1843.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1844.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_462 += (__SQL_SUM_AGGREGATE_462INVENTORY1.getValueOrDefault(se1846.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1847.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1848.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_463 += (__SQL_SUM_AGGREGATE_463INVENTORY1.getValueOrDefault(se1850.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1851.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1852.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_464 += (__SQL_SUM_AGGREGATE_464INVENTORY1.getValueOrDefault(se1854.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1855.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1856.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_465 += (__SQL_SUM_AGGREGATE_465INVENTORY1.getValueOrDefault(se1858.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1859.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1860.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_466 += (__SQL_SUM_AGGREGATE_466INVENTORY1.getValueOrDefault(se1862.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1863.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1864.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_467 += (__SQL_SUM_AGGREGATE_467INVENTORY1.getValueOrDefault(se1866.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1867.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1868.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_468 += (__SQL_SUM_AGGREGATE_468INVENTORY1.getValueOrDefault(se1870.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1871.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1872.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_469 += (__SQL_SUM_AGGREGATE_469INVENTORY1.getValueOrDefault(se1874.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1875.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1876.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_470 += (__SQL_SUM_AGGREGATE_470INVENTORY1.getValueOrDefault(se1878.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1879.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1880.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_471 += (__SQL_SUM_AGGREGATE_471INVENTORY1.getValueOrDefault(se1882.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1883.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1884.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_472 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1886.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se1887.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1888.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_473 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1890.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se1891.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1892.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_474 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1894.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se1895.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1896.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_475 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1898.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se1899.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1900.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_476 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1902.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1903.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se1904.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_477 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1906.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1907.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se1908.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_478 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1910.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1911.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se1912.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_479 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1914.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1915.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se1916.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_480 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1918.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1919.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se1920.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_481 += (__SQL_SUM_AGGREGATE_13INVENTORY1.getValueOrDefault(se1922.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1923.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se1924.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_482 += (__SQL_SUM_AGGREGATE_482INVENTORY1.getValueOrDefault(se1926.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1927.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1928.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_483 += (__SQL_SUM_AGGREGATE_483INVENTORY1.getValueOrDefault(se1930.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1931.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1932.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_484 += (__SQL_SUM_AGGREGATE_484INVENTORY1.getValueOrDefault(se1934.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1935.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1936.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_485 += (__SQL_SUM_AGGREGATE_485INVENTORY1.getValueOrDefault(se1938.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1939.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1940.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_486 += (__SQL_SUM_AGGREGATE_486INVENTORY1.getValueOrDefault(se1942.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1943.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1944.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_487 += (__SQL_SUM_AGGREGATE_487INVENTORY1.getValueOrDefault(se1946.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1947.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1948.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_488 += (__SQL_SUM_AGGREGATE_488INVENTORY1.getValueOrDefault(se1950.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1951.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1952.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_489 += (__SQL_SUM_AGGREGATE_489INVENTORY1.getValueOrDefault(se1954.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1955.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1956.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_490 += (__SQL_SUM_AGGREGATE_490INVENTORY1.getValueOrDefault(se1958.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1959.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1960.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_491 += (__SQL_SUM_AGGREGATE_491INVENTORY1.getValueOrDefault(se1962.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1963.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1964.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_492 += (__SQL_SUM_AGGREGATE_492INVENTORY1.getValueOrDefault(se1966.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1967.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1968.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_493 += (__SQL_SUM_AGGREGATE_493INVENTORY1.getValueOrDefault(se1970.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1971.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1972.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_494 += (__SQL_SUM_AGGREGATE_494INVENTORY1.getValueOrDefault(se1974.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1975.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1976.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_495 += (__SQL_SUM_AGGREGATE_495INVENTORY1.getValueOrDefault(se1978.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1979.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1980.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_496 += (__SQL_SUM_AGGREGATE_496INVENTORY1.getValueOrDefault(se1982.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1983.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1984.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_497 += (__SQL_SUM_AGGREGATE_497INVENTORY1.getValueOrDefault(se1986.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1987.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1988.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_498 += (__SQL_SUM_AGGREGATE_498INVENTORY1.getValueOrDefault(se1990.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1991.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1992.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_499 += (__SQL_SUM_AGGREGATE_499INVENTORY1.getValueOrDefault(se1994.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1995.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se1996.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_500 += (__SQL_SUM_AGGREGATE_500INVENTORY1.getValueOrDefault(se1998.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se1999.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2000.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_501 += (__SQL_SUM_AGGREGATE_501INVENTORY1.getValueOrDefault(se2002.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2003.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2004.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_502 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2006.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2007.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2008.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_503 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2010.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2011.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2012.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_504 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2014.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2015.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2016.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_505 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2018.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2019.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2020.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_506 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2022.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2023.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2024.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_507 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2026.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2027.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2028.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_508 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2030.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2031.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2032.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_509 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2034.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2035.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2036.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_510 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2038.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2039.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2040.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_511 += (__SQL_SUM_AGGREGATE_14INVENTORY1.getValueOrDefault(se2042.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2043.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2044.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_512 += (__SQL_SUM_AGGREGATE_512INVENTORY1.getValueOrDefault(se2046.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2047.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2048.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_513 += (__SQL_SUM_AGGREGATE_513INVENTORY1.getValueOrDefault(se2050.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2051.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2052.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_514 += (__SQL_SUM_AGGREGATE_514INVENTORY1.getValueOrDefault(se2054.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2055.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2056.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_515 += (__SQL_SUM_AGGREGATE_515INVENTORY1.getValueOrDefault(se2058.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2059.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2060.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_516 += (__SQL_SUM_AGGREGATE_516INVENTORY1.getValueOrDefault(se2062.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2063.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2064.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_517 += (__SQL_SUM_AGGREGATE_517INVENTORY1.getValueOrDefault(se2066.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2067.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2068.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_518 += (__SQL_SUM_AGGREGATE_518INVENTORY1.getValueOrDefault(se2070.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2071.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2072.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_519 += (__SQL_SUM_AGGREGATE_519INVENTORY1.getValueOrDefault(se2074.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2075.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2076.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_520 += (__SQL_SUM_AGGREGATE_520INVENTORY1.getValueOrDefault(se2078.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2079.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2080.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_521 += (__SQL_SUM_AGGREGATE_521INVENTORY1.getValueOrDefault(se2082.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2083.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2084.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_522 += (__SQL_SUM_AGGREGATE_522INVENTORY1.getValueOrDefault(se2086.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2087.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2088.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_523 += (__SQL_SUM_AGGREGATE_523INVENTORY1.getValueOrDefault(se2090.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2091.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2092.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_524 += (__SQL_SUM_AGGREGATE_524INVENTORY1.getValueOrDefault(se2094.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2095.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2096.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_525 += (__SQL_SUM_AGGREGATE_525INVENTORY1.getValueOrDefault(se2098.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2099.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2100.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_526 += (__SQL_SUM_AGGREGATE_526INVENTORY1.getValueOrDefault(se2102.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2103.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2104.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_527 += (__SQL_SUM_AGGREGATE_527INVENTORY1.getValueOrDefault(se2106.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2107.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2108.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_528 += (__SQL_SUM_AGGREGATE_528INVENTORY1.getValueOrDefault(se2110.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2111.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2112.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_529 += (__SQL_SUM_AGGREGATE_529INVENTORY1.getValueOrDefault(se2114.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2115.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2116.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_530 += (__SQL_SUM_AGGREGATE_530INVENTORY1.getValueOrDefault(se2118.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2119.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2120.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_531 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2122.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2123.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2124.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_532 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2126.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2127.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2128.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_533 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2130.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2131.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2132.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_534 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2134.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2135.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2136.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_535 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2138.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2139.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2140.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_536 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2142.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2143.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2144.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_537 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2146.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2147.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2148.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_538 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2150.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2151.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2152.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_539 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2154.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2155.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2156.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_540 += (__SQL_SUM_AGGREGATE_15INVENTORY1.getValueOrDefault(se2158.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2159.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2160.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_541 += (__SQL_SUM_AGGREGATE_541INVENTORY1.getValueOrDefault(se2162.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2163.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2164.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_542 += (__SQL_SUM_AGGREGATE_542INVENTORY1.getValueOrDefault(se2166.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2167.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2168.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_543 += (__SQL_SUM_AGGREGATE_543INVENTORY1.getValueOrDefault(se2170.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2171.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2172.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_544 += (__SQL_SUM_AGGREGATE_544INVENTORY1.getValueOrDefault(se2174.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2175.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2176.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_545 += (__SQL_SUM_AGGREGATE_545INVENTORY1.getValueOrDefault(se2178.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2179.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2180.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_546 += (__SQL_SUM_AGGREGATE_546INVENTORY1.getValueOrDefault(se2182.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2183.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2184.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_547 += (__SQL_SUM_AGGREGATE_547INVENTORY1.getValueOrDefault(se2186.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2187.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2188.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_548 += (__SQL_SUM_AGGREGATE_548INVENTORY1.getValueOrDefault(se2190.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2191.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2192.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_549 += (__SQL_SUM_AGGREGATE_549INVENTORY1.getValueOrDefault(se2194.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2195.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2196.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_550 += (__SQL_SUM_AGGREGATE_550INVENTORY1.getValueOrDefault(se2198.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2199.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2200.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_551 += (__SQL_SUM_AGGREGATE_551INVENTORY1.getValueOrDefault(se2202.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2203.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2204.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_552 += (__SQL_SUM_AGGREGATE_552INVENTORY1.getValueOrDefault(se2206.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2207.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2208.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_553 += (__SQL_SUM_AGGREGATE_553INVENTORY1.getValueOrDefault(se2210.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2211.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2212.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_554 += (__SQL_SUM_AGGREGATE_554INVENTORY1.getValueOrDefault(se2214.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2215.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2216.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_555 += (__SQL_SUM_AGGREGATE_555INVENTORY1.getValueOrDefault(se2218.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2219.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2220.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_556 += (__SQL_SUM_AGGREGATE_556INVENTORY1.getValueOrDefault(se2222.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2223.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2224.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_557 += (__SQL_SUM_AGGREGATE_557INVENTORY1.getValueOrDefault(se2226.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2227.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2228.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_558 += (__SQL_SUM_AGGREGATE_558INVENTORY1.getValueOrDefault(se2230.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2231.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2232.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_559 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2234.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2235.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2236.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_560 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2238.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2239.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2240.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_561 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2242.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2243.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2244.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_562 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2246.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2247.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2248.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_563 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2250.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2251.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2252.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_564 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2254.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2255.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2256.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_565 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2258.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2259.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2260.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_566 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2262.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2263.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2264.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_567 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2266.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2267.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2268.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_568 += (__SQL_SUM_AGGREGATE_16INVENTORY1.getValueOrDefault(se2270.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2271.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2272.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_569 += (__SQL_SUM_AGGREGATE_569INVENTORY1.getValueOrDefault(se2274.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2275.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2276.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_570 += (__SQL_SUM_AGGREGATE_570INVENTORY1.getValueOrDefault(se2278.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2279.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2280.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_571 += (__SQL_SUM_AGGREGATE_571INVENTORY1.getValueOrDefault(se2282.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2283.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2284.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_572 += (__SQL_SUM_AGGREGATE_572INVENTORY1.getValueOrDefault(se2286.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2287.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2288.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_573 += (__SQL_SUM_AGGREGATE_573INVENTORY1.getValueOrDefault(se2290.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2291.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2292.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_574 += (__SQL_SUM_AGGREGATE_574INVENTORY1.getValueOrDefault(se2294.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2295.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2296.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_575 += (__SQL_SUM_AGGREGATE_575INVENTORY1.getValueOrDefault(se2298.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2299.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2300.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_576 += (__SQL_SUM_AGGREGATE_576INVENTORY1.getValueOrDefault(se2302.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2303.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2304.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_577 += (__SQL_SUM_AGGREGATE_577INVENTORY1.getValueOrDefault(se2306.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2307.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2308.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_578 += (__SQL_SUM_AGGREGATE_578INVENTORY1.getValueOrDefault(se2310.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2311.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2312.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_579 += (__SQL_SUM_AGGREGATE_579INVENTORY1.getValueOrDefault(se2314.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2315.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2316.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_580 += (__SQL_SUM_AGGREGATE_580INVENTORY1.getValueOrDefault(se2318.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2319.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2320.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_581 += (__SQL_SUM_AGGREGATE_581INVENTORY1.getValueOrDefault(se2322.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2323.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2324.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_582 += (__SQL_SUM_AGGREGATE_582INVENTORY1.getValueOrDefault(se2326.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2327.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2328.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_583 += (__SQL_SUM_AGGREGATE_583INVENTORY1.getValueOrDefault(se2330.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2331.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2332.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_584 += (__SQL_SUM_AGGREGATE_584INVENTORY1.getValueOrDefault(se2334.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2335.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2336.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_585 += (__SQL_SUM_AGGREGATE_585INVENTORY1.getValueOrDefault(se2338.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2339.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2340.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_586 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2342.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2343.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2344.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_587 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2346.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2347.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2348.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_588 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2350.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2351.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2352.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_589 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2354.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2355.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2356.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_590 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2358.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2359.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2360.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_591 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2362.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2363.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2364.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_592 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2366.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2367.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2368.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_593 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2370.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2371.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2372.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_594 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2374.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2375.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2376.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_595 += (__SQL_SUM_AGGREGATE_17INVENTORY1.getValueOrDefault(se2378.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2379.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2380.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_596 += (__SQL_SUM_AGGREGATE_596INVENTORY1.getValueOrDefault(se2382.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2383.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2384.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_597 += (__SQL_SUM_AGGREGATE_597INVENTORY1.getValueOrDefault(se2386.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2387.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2388.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_598 += (__SQL_SUM_AGGREGATE_598INVENTORY1.getValueOrDefault(se2390.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2391.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2392.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_599 += (__SQL_SUM_AGGREGATE_599INVENTORY1.getValueOrDefault(se2394.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2395.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2396.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_600 += (__SQL_SUM_AGGREGATE_600INVENTORY1.getValueOrDefault(se2398.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2399.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2400.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_601 += (__SQL_SUM_AGGREGATE_601INVENTORY1.getValueOrDefault(se2402.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2403.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2404.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_602 += (__SQL_SUM_AGGREGATE_602INVENTORY1.getValueOrDefault(se2406.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2407.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2408.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_603 += (__SQL_SUM_AGGREGATE_603INVENTORY1.getValueOrDefault(se2410.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2411.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2412.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_604 += (__SQL_SUM_AGGREGATE_604INVENTORY1.getValueOrDefault(se2414.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2415.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2416.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_605 += (__SQL_SUM_AGGREGATE_605INVENTORY1.getValueOrDefault(se2418.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2419.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2420.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_606 += (__SQL_SUM_AGGREGATE_606INVENTORY1.getValueOrDefault(se2422.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2423.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2424.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_607 += (__SQL_SUM_AGGREGATE_607INVENTORY1.getValueOrDefault(se2426.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2427.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2428.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_608 += (__SQL_SUM_AGGREGATE_608INVENTORY1.getValueOrDefault(se2430.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2431.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2432.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_609 += (__SQL_SUM_AGGREGATE_609INVENTORY1.getValueOrDefault(se2434.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2435.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2436.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_610 += (__SQL_SUM_AGGREGATE_610INVENTORY1.getValueOrDefault(se2438.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2439.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2440.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_611 += (__SQL_SUM_AGGREGATE_611INVENTORY1.getValueOrDefault(se2442.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2443.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2444.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_612 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2446.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2447.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2448.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_613 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2450.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2451.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2452.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_614 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2454.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2455.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2456.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_615 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2458.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2459.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2460.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_616 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2462.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2463.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2464.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_617 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2466.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2467.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2468.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_618 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2470.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2471.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2472.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_619 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2474.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2475.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2476.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_620 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2478.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2479.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2480.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_621 += (__SQL_SUM_AGGREGATE_18INVENTORY1.getValueOrDefault(se2482.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2483.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2484.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_622 += (__SQL_SUM_AGGREGATE_622INVENTORY1.getValueOrDefault(se2486.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2487.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2488.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_623 += (__SQL_SUM_AGGREGATE_623INVENTORY1.getValueOrDefault(se2490.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2491.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2492.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_624 += (__SQL_SUM_AGGREGATE_624INVENTORY1.getValueOrDefault(se2494.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2495.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2496.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_625 += (__SQL_SUM_AGGREGATE_625INVENTORY1.getValueOrDefault(se2498.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2499.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2500.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_626 += (__SQL_SUM_AGGREGATE_626INVENTORY1.getValueOrDefault(se2502.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2503.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2504.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_627 += (__SQL_SUM_AGGREGATE_627INVENTORY1.getValueOrDefault(se2506.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2507.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2508.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_628 += (__SQL_SUM_AGGREGATE_628INVENTORY1.getValueOrDefault(se2510.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2511.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2512.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_629 += (__SQL_SUM_AGGREGATE_629INVENTORY1.getValueOrDefault(se2514.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2515.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2516.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_630 += (__SQL_SUM_AGGREGATE_630INVENTORY1.getValueOrDefault(se2518.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2519.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2520.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_631 += (__SQL_SUM_AGGREGATE_631INVENTORY1.getValueOrDefault(se2522.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2523.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2524.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_632 += (__SQL_SUM_AGGREGATE_632INVENTORY1.getValueOrDefault(se2526.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2527.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2528.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_633 += (__SQL_SUM_AGGREGATE_633INVENTORY1.getValueOrDefault(se2530.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2531.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2532.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_634 += (__SQL_SUM_AGGREGATE_634INVENTORY1.getValueOrDefault(se2534.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2535.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2536.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_635 += (__SQL_SUM_AGGREGATE_635INVENTORY1.getValueOrDefault(se2538.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2539.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2540.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_636 += (__SQL_SUM_AGGREGATE_636INVENTORY1.getValueOrDefault(se2542.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2543.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2544.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_637 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2546.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2547.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2548.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_638 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2550.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2551.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2552.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_639 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2554.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2555.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2556.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_640 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2558.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2559.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2560.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_641 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2562.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2563.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2564.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_642 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2566.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2567.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2568.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_643 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2570.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2571.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2572.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_644 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2574.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2575.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2576.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_645 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2578.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2579.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2580.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_646 += (__SQL_SUM_AGGREGATE_19INVENTORY1.getValueOrDefault(se2582.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2583.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2584.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_647 += (__SQL_SUM_AGGREGATE_647INVENTORY1.getValueOrDefault(se2586.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2587.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2588.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_648 += (__SQL_SUM_AGGREGATE_648INVENTORY1.getValueOrDefault(se2590.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2591.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2592.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_649 += (__SQL_SUM_AGGREGATE_649INVENTORY1.getValueOrDefault(se2594.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2595.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2596.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_650 += (__SQL_SUM_AGGREGATE_650INVENTORY1.getValueOrDefault(se2598.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2599.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2600.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_651 += (__SQL_SUM_AGGREGATE_651INVENTORY1.getValueOrDefault(se2602.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2603.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2604.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_652 += (__SQL_SUM_AGGREGATE_652INVENTORY1.getValueOrDefault(se2606.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2607.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2608.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_653 += (__SQL_SUM_AGGREGATE_653INVENTORY1.getValueOrDefault(se2610.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2611.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2612.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_654 += (__SQL_SUM_AGGREGATE_654INVENTORY1.getValueOrDefault(se2614.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2615.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2616.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_655 += (__SQL_SUM_AGGREGATE_655INVENTORY1.getValueOrDefault(se2618.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2619.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2620.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_656 += (__SQL_SUM_AGGREGATE_656INVENTORY1.getValueOrDefault(se2622.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2623.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2624.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_657 += (__SQL_SUM_AGGREGATE_657INVENTORY1.getValueOrDefault(se2626.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2627.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2628.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_658 += (__SQL_SUM_AGGREGATE_658INVENTORY1.getValueOrDefault(se2630.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2631.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2632.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_659 += (__SQL_SUM_AGGREGATE_659INVENTORY1.getValueOrDefault(se2634.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2635.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2636.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_660 += (__SQL_SUM_AGGREGATE_660INVENTORY1.getValueOrDefault(se2638.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2639.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2640.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_661 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2642.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2643.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2644.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_662 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2646.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2647.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2648.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_663 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2650.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2651.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2652.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_664 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2654.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2655.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2656.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_665 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2658.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2659.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2660.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_666 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2662.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2663.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2664.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_667 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2666.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2667.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2668.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_668 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2670.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2671.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2672.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_669 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2674.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2675.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2676.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_670 += (__SQL_SUM_AGGREGATE_20INVENTORY1.getValueOrDefault(se2678.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2679.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2680.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_671 += (__SQL_SUM_AGGREGATE_671INVENTORY1.getValueOrDefault(se2682.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2683.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2684.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_672 += (__SQL_SUM_AGGREGATE_672INVENTORY1.getValueOrDefault(se2686.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2687.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2688.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_673 += (__SQL_SUM_AGGREGATE_673INVENTORY1.getValueOrDefault(se2690.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2691.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2692.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_674 += (__SQL_SUM_AGGREGATE_674INVENTORY1.getValueOrDefault(se2694.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2695.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2696.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_675 += (__SQL_SUM_AGGREGATE_675INVENTORY1.getValueOrDefault(se2698.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2699.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2700.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_676 += (__SQL_SUM_AGGREGATE_676INVENTORY1.getValueOrDefault(se2702.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2703.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2704.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_677 += (__SQL_SUM_AGGREGATE_677INVENTORY1.getValueOrDefault(se2706.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2707.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2708.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_678 += (__SQL_SUM_AGGREGATE_678INVENTORY1.getValueOrDefault(se2710.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2711.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2712.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_679 += (__SQL_SUM_AGGREGATE_679INVENTORY1.getValueOrDefault(se2714.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2715.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2716.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_680 += (__SQL_SUM_AGGREGATE_680INVENTORY1.getValueOrDefault(se2718.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2719.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2720.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_681 += (__SQL_SUM_AGGREGATE_681INVENTORY1.getValueOrDefault(se2722.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2723.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2724.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_682 += (__SQL_SUM_AGGREGATE_682INVENTORY1.getValueOrDefault(se2726.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2727.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2728.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_683 += (__SQL_SUM_AGGREGATE_683INVENTORY1.getValueOrDefault(se2730.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2731.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2732.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_684 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2734.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2735.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2736.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_685 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2738.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2739.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2740.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_686 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2742.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2743.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2744.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_687 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2746.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2747.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2748.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_688 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2750.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2751.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2752.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_689 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2754.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2755.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2756.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_690 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2758.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2759.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2760.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_691 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2762.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2763.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2764.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_692 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2766.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2767.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2768.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_693 += (__SQL_SUM_AGGREGATE_21INVENTORY1.getValueOrDefault(se2770.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2771.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2772.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_694 += (__SQL_SUM_AGGREGATE_694INVENTORY1.getValueOrDefault(se2774.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2775.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2776.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_695 += (__SQL_SUM_AGGREGATE_695INVENTORY1.getValueOrDefault(se2778.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2779.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2780.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_696 += (__SQL_SUM_AGGREGATE_696INVENTORY1.getValueOrDefault(se2782.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2783.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2784.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_697 += (__SQL_SUM_AGGREGATE_697INVENTORY1.getValueOrDefault(se2786.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2787.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2788.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_698 += (__SQL_SUM_AGGREGATE_698INVENTORY1.getValueOrDefault(se2790.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2791.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2792.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_699 += (__SQL_SUM_AGGREGATE_699INVENTORY1.getValueOrDefault(se2794.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2795.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2796.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_700 += (__SQL_SUM_AGGREGATE_700INVENTORY1.getValueOrDefault(se2798.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2799.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2800.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_701 += (__SQL_SUM_AGGREGATE_701INVENTORY1.getValueOrDefault(se2802.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2803.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2804.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_702 += (__SQL_SUM_AGGREGATE_702INVENTORY1.getValueOrDefault(se2806.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2807.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2808.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_703 += (__SQL_SUM_AGGREGATE_703INVENTORY1.getValueOrDefault(se2810.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2811.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2812.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_704 += (__SQL_SUM_AGGREGATE_704INVENTORY1.getValueOrDefault(se2814.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2815.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2816.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_705 += (__SQL_SUM_AGGREGATE_705INVENTORY1.getValueOrDefault(se2818.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2819.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2820.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_706 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2822.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2823.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2824.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_707 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2826.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2827.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2828.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_708 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2830.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2831.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2832.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_709 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2834.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2835.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2836.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_710 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2838.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2839.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2840.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_711 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2842.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2843.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2844.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_712 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2846.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2847.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2848.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_713 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2850.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2851.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2852.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_714 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2854.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2855.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2856.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_715 += (__SQL_SUM_AGGREGATE_22INVENTORY1.getValueOrDefault(se2858.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2859.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2860.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_716 += (__SQL_SUM_AGGREGATE_716INVENTORY1.getValueOrDefault(se2862.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2863.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2864.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_717 += (__SQL_SUM_AGGREGATE_717INVENTORY1.getValueOrDefault(se2866.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2867.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2868.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_718 += (__SQL_SUM_AGGREGATE_718INVENTORY1.getValueOrDefault(se2870.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2871.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2872.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_719 += (__SQL_SUM_AGGREGATE_719INVENTORY1.getValueOrDefault(se2874.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2875.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2876.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_720 += (__SQL_SUM_AGGREGATE_720INVENTORY1.getValueOrDefault(se2878.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2879.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2880.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_721 += (__SQL_SUM_AGGREGATE_721INVENTORY1.getValueOrDefault(se2882.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2883.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2884.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_722 += (__SQL_SUM_AGGREGATE_722INVENTORY1.getValueOrDefault(se2886.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2887.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2888.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_723 += (__SQL_SUM_AGGREGATE_723INVENTORY1.getValueOrDefault(se2890.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2891.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2892.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_724 += (__SQL_SUM_AGGREGATE_724INVENTORY1.getValueOrDefault(se2894.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2895.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2896.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_725 += (__SQL_SUM_AGGREGATE_725INVENTORY1.getValueOrDefault(se2898.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2899.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2900.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_726 += (__SQL_SUM_AGGREGATE_726INVENTORY1.getValueOrDefault(se2902.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2903.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2904.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_727 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2906.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2907.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2908.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_728 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2910.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2911.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2912.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_729 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2914.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2915.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2916.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_730 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2918.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2919.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2920.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_731 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2922.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2923.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se2924.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_732 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2926.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2927.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se2928.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_733 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2930.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2931.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se2932.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_734 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2934.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2935.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se2936.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_735 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2938.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2939.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se2940.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_736 += (__SQL_SUM_AGGREGATE_23INVENTORY1.getValueOrDefault(se2942.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2943.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se2944.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_737 += (__SQL_SUM_AGGREGATE_737INVENTORY1.getValueOrDefault(se2946.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2947.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2948.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_738 += (__SQL_SUM_AGGREGATE_738INVENTORY1.getValueOrDefault(se2950.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2951.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2952.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_739 += (__SQL_SUM_AGGREGATE_739INVENTORY1.getValueOrDefault(se2954.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2955.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2956.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_740 += (__SQL_SUM_AGGREGATE_740INVENTORY1.getValueOrDefault(se2958.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2959.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2960.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_741 += (__SQL_SUM_AGGREGATE_741INVENTORY1.getValueOrDefault(se2962.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2963.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2964.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_742 += (__SQL_SUM_AGGREGATE_742INVENTORY1.getValueOrDefault(se2966.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2967.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2968.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_743 += (__SQL_SUM_AGGREGATE_743INVENTORY1.getValueOrDefault(se2970.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2971.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2972.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_744 += (__SQL_SUM_AGGREGATE_744INVENTORY1.getValueOrDefault(se2974.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2975.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2976.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_745 += (__SQL_SUM_AGGREGATE_745INVENTORY1.getValueOrDefault(se2978.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2979.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2980.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_746 += (__SQL_SUM_AGGREGATE_746INVENTORY1.getValueOrDefault(se2982.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se2983.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2984.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_747 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se2986.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se2987.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2988.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_748 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se2990.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se2991.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2992.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_749 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se2994.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se2995.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se2996.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_750 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se2998.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se2999.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3000.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_751 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3002.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3003.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3004.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_752 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3006.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3007.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3008.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_753 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3010.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3011.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3012.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_754 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3014.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3015.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3016.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_755 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3018.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3019.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3020.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_756 += (__SQL_SUM_AGGREGATE_24INVENTORY1.getValueOrDefault(se3022.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3023.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3024.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_757 += (__SQL_SUM_AGGREGATE_757INVENTORY1.getValueOrDefault(se3026.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3027.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3028.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_758 += (__SQL_SUM_AGGREGATE_758INVENTORY1.getValueOrDefault(se3030.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3031.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3032.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_759 += (__SQL_SUM_AGGREGATE_759INVENTORY1.getValueOrDefault(se3034.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3035.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3036.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_760 += (__SQL_SUM_AGGREGATE_760INVENTORY1.getValueOrDefault(se3038.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3039.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3040.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_761 += (__SQL_SUM_AGGREGATE_761INVENTORY1.getValueOrDefault(se3042.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3043.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3044.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_762 += (__SQL_SUM_AGGREGATE_762INVENTORY1.getValueOrDefault(se3046.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3047.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3048.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_763 += (__SQL_SUM_AGGREGATE_763INVENTORY1.getValueOrDefault(se3050.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3051.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3052.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_764 += (__SQL_SUM_AGGREGATE_764INVENTORY1.getValueOrDefault(se3054.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3055.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3056.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_765 += (__SQL_SUM_AGGREGATE_765INVENTORY1.getValueOrDefault(se3058.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3059.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3060.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_766 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3062.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3063.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3064.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_767 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3066.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3067.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3068.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_768 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3070.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3071.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3072.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_769 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3074.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3075.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3076.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_770 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3078.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3079.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3080.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_771 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3082.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3083.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3084.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_772 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3086.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3087.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3088.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_773 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3090.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3091.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3092.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_774 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3094.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3095.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3096.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_775 += (__SQL_SUM_AGGREGATE_25INVENTORY1.getValueOrDefault(se3098.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3099.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3100.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_776 += (__SQL_SUM_AGGREGATE_776INVENTORY1.getValueOrDefault(se3102.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3103.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3104.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_777 += (__SQL_SUM_AGGREGATE_777INVENTORY1.getValueOrDefault(se3106.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3107.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3108.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_778 += (__SQL_SUM_AGGREGATE_778INVENTORY1.getValueOrDefault(se3110.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3111.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3112.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_779 += (__SQL_SUM_AGGREGATE_779INVENTORY1.getValueOrDefault(se3114.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3115.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3116.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_780 += (__SQL_SUM_AGGREGATE_780INVENTORY1.getValueOrDefault(se3118.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3119.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3120.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_781 += (__SQL_SUM_AGGREGATE_781INVENTORY1.getValueOrDefault(se3122.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3123.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3124.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_782 += (__SQL_SUM_AGGREGATE_782INVENTORY1.getValueOrDefault(se3126.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3127.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3128.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_783 += (__SQL_SUM_AGGREGATE_783INVENTORY1.getValueOrDefault(se3130.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3131.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3132.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_784 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3134.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3135.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3136.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_785 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3138.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3139.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3140.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_786 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3142.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3143.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3144.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_787 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3146.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3147.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3148.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_788 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3150.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3151.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3152.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_789 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3154.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3155.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3156.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_790 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3158.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3159.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3160.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_791 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3162.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3163.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3164.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_792 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3166.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3167.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3168.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_793 += (__SQL_SUM_AGGREGATE_26INVENTORY1.getValueOrDefault(se3170.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3171.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3172.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_794 += (__SQL_SUM_AGGREGATE_794INVENTORY1.getValueOrDefault(se3174.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3175.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3176.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_795 += (__SQL_SUM_AGGREGATE_795INVENTORY1.getValueOrDefault(se3178.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3179.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3180.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_796 += (__SQL_SUM_AGGREGATE_796INVENTORY1.getValueOrDefault(se3182.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3183.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3184.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_797 += (__SQL_SUM_AGGREGATE_797INVENTORY1.getValueOrDefault(se3186.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3187.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3188.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_798 += (__SQL_SUM_AGGREGATE_798INVENTORY1.getValueOrDefault(se3190.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3191.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3192.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_799 += (__SQL_SUM_AGGREGATE_799INVENTORY1.getValueOrDefault(se3194.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3195.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3196.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_800 += (__SQL_SUM_AGGREGATE_800INVENTORY1.getValueOrDefault(se3198.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3199.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3200.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_801 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3202.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3203.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3204.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_802 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3206.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3207.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3208.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_803 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3210.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3211.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3212.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_804 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3214.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3215.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3216.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_805 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3218.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3219.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3220.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_806 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3222.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3223.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3224.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_807 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3226.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3227.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3228.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_808 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3230.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3231.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3232.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_809 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3234.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3235.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3236.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_810 += (__SQL_SUM_AGGREGATE_27INVENTORY1.getValueOrDefault(se3238.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3239.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3240.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_811 += (__SQL_SUM_AGGREGATE_811INVENTORY1.getValueOrDefault(se3242.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3243.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3244.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_812 += (__SQL_SUM_AGGREGATE_812INVENTORY1.getValueOrDefault(se3246.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3247.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3248.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_813 += (__SQL_SUM_AGGREGATE_813INVENTORY1.getValueOrDefault(se3250.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3251.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3252.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_814 += (__SQL_SUM_AGGREGATE_814INVENTORY1.getValueOrDefault(se3254.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3255.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3256.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_815 += (__SQL_SUM_AGGREGATE_815INVENTORY1.getValueOrDefault(se3258.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3259.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3260.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_816 += (__SQL_SUM_AGGREGATE_816INVENTORY1.getValueOrDefault(se3262.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3263.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3264.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_817 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3266.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3267.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3268.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_818 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3270.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3271.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3272.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_819 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3274.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3275.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3276.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_820 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3278.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3279.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3280.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_821 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3282.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3283.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3284.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_822 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3286.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3287.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3288.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_823 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3290.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3291.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3292.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_824 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3294.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3295.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3296.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_825 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3298.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3299.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3300.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_826 += (__SQL_SUM_AGGREGATE_28INVENTORY1.getValueOrDefault(se3302.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3303.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3304.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_827 += (__SQL_SUM_AGGREGATE_827INVENTORY1.getValueOrDefault(se3306.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3307.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3308.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_828 += (__SQL_SUM_AGGREGATE_828INVENTORY1.getValueOrDefault(se3310.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3311.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3312.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_829 += (__SQL_SUM_AGGREGATE_829INVENTORY1.getValueOrDefault(se3314.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3315.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3316.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_830 += (__SQL_SUM_AGGREGATE_830INVENTORY1.getValueOrDefault(se3318.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3319.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3320.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_831 += (__SQL_SUM_AGGREGATE_831INVENTORY1.getValueOrDefault(se3322.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3323.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3324.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_832 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3326.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3327.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3328.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_833 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3330.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3331.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3332.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_834 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3334.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3335.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3336.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_835 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3338.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3339.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3340.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_836 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3342.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3343.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3344.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_837 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3346.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3347.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3348.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_838 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3350.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3351.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3352.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_839 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3354.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3355.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3356.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_840 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3358.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3359.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3360.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_841 += (__SQL_SUM_AGGREGATE_29INVENTORY1.getValueOrDefault(se3362.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3363.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3364.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_842 += (__SQL_SUM_AGGREGATE_842INVENTORY1.getValueOrDefault(se3366.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3367.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3368.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_843 += (__SQL_SUM_AGGREGATE_843INVENTORY1.getValueOrDefault(se3370.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3371.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3372.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_844 += (__SQL_SUM_AGGREGATE_844INVENTORY1.getValueOrDefault(se3374.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3375.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3376.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_845 += (__SQL_SUM_AGGREGATE_845INVENTORY1.getValueOrDefault(se3378.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3379.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3380.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_846 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3382.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3383.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3384.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_847 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3386.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3387.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3388.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_848 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3390.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3391.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3392.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_849 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3394.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3395.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3396.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_850 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3398.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3399.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3400.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_851 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3402.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3403.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3404.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_852 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3406.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3407.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3408.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_853 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3410.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3411.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3412.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_854 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3414.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3415.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3416.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_855 += (__SQL_SUM_AGGREGATE_30INVENTORY1.getValueOrDefault(se3418.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3419.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3420.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_856 += (__SQL_SUM_AGGREGATE_856INVENTORY1.getValueOrDefault(se3422.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3423.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3424.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_857 += (__SQL_SUM_AGGREGATE_857INVENTORY1.getValueOrDefault(se3426.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3427.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3428.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_858 += (__SQL_SUM_AGGREGATE_858INVENTORY1.getValueOrDefault(se3430.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3431.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3432.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_859 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3434.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3435.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3436.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_860 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3438.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3439.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3440.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_861 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3442.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3443.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3444.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_862 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3446.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3447.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3448.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_863 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3450.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3451.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3452.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_864 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3454.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3455.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3456.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_865 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3458.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3459.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3460.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_866 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3462.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3463.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3464.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_867 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3466.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3467.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3468.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_868 += (__SQL_SUM_AGGREGATE_31INVENTORY1.getValueOrDefault(se3470.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3471.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3472.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_869 += (__SQL_SUM_AGGREGATE_869INVENTORY1.getValueOrDefault(se3474.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3475.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3476.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_870 += (__SQL_SUM_AGGREGATE_870INVENTORY1.getValueOrDefault(se3478.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3479.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3480.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_871 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3482.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3483.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3484.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_872 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3486.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3487.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3488.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_873 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3490.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3491.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3492.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_874 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3494.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3495.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3496.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_875 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3498.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3499.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3500.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_876 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3502.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3503.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3504.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_877 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3506.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3507.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3508.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_878 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3510.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3511.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3512.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_879 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3514.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3515.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3516.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_880 += (__SQL_SUM_AGGREGATE_32INVENTORY1.getValueOrDefault(se3518.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3519.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3520.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_881 += (__SQL_SUM_AGGREGATE_881INVENTORY1.getValueOrDefault(se3522.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3523.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3524.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_882 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3526.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3527.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3528.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_883 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3530.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3531.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3532.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_884 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3534.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3535.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3536.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_885 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3538.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3539.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3540.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_886 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3542.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3543.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3544.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_887 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3546.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3547.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3548.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_888 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3550.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3551.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3552.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_889 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3554.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3555.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3556.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_890 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3558.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3559.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3560.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_891 += (__SQL_SUM_AGGREGATE_33INVENTORY1.getValueOrDefault(se3562.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3563.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3564.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_892 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3566.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_892INVENTORY2.getValueOrDefault(se3567.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3568.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_893 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3570.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_893INVENTORY2.getValueOrDefault(se3571.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3572.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_894 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3574.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_894INVENTORY2.getValueOrDefault(se3575.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3576.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_895 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3578.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_895INVENTORY2.getValueOrDefault(se3579.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3580.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_896 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3582.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3583.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3584.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_897 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3586.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3587.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3588.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_898 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3590.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3591.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3592.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_899 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3594.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3595.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3596.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_900 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3598.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3599.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3600.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_901 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3602.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_34INVENTORY2.getValueOrDefault(se3603.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3604.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_902 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3606.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_902INVENTORY2.getValueOrDefault(se3607.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3608.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_903 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3610.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_903INVENTORY2.getValueOrDefault(se3611.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3612.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_904 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3614.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_904INVENTORY2.getValueOrDefault(se3615.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3616.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_905 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3618.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3619.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3620.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_906 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3622.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3623.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3624.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_907 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3626.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3627.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3628.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_908 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3630.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3631.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3632.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_909 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3634.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3635.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3636.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_910 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3638.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_35INVENTORY2.getValueOrDefault(se3639.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3640.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_911 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3642.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_911INVENTORY2.getValueOrDefault(se3643.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3644.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_912 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3646.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_912INVENTORY2.getValueOrDefault(se3647.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3648.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_913 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3650.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3651.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3652.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_914 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3654.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3655.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3656.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_915 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3658.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3659.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3660.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_916 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3662.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3663.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3664.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_917 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3666.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3667.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3668.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_918 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3670.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_36INVENTORY2.getValueOrDefault(se3671.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3672.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_919 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3674.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_919INVENTORY2.getValueOrDefault(se3675.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_1INVENTORY3.getValueOrDefault(se3676.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_920 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3678.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3679.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_38INVENTORY3.getValueOrDefault(se3680.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_921 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3682.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3683.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_39INVENTORY3.getValueOrDefault(se3684.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_922 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3686.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3687.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_40INVENTORY3.getValueOrDefault(se3688.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_923 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3690.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3691.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_41INVENTORY3.getValueOrDefault(se3692.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_924 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3694.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3695.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_42INVENTORY3.getValueOrDefault(se3696.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_925 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3698.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_37INVENTORY2.getValueOrDefault(se3699.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_43INVENTORY3.getValueOrDefault(se3700.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_926 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3702.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3703.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_926INVENTORY3.getValueOrDefault(se3704.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_927 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3706.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3707.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_927INVENTORY3.getValueOrDefault(se3708.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_928 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3710.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3711.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_928INVENTORY3.getValueOrDefault(se3712.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_929 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3714.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3715.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_929INVENTORY3.getValueOrDefault(se3716.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_930 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3718.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3719.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_930INVENTORY3.getValueOrDefault(se3720.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_931 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3722.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3723.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_931INVENTORY3.getValueOrDefault(se3724.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_932 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3726.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3727.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_932INVENTORY3.getValueOrDefault(se3728.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_933 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3730.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3731.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_933INVENTORY3.getValueOrDefault(se3732.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_934 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3734.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3735.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_934INVENTORY3.getValueOrDefault(se3736.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_935 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3738.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3739.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_935INVENTORY3.getValueOrDefault(se3740.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_936 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3742.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3743.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_936INVENTORY3.getValueOrDefault(se3744.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_937 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3746.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3747.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_937INVENTORY3.getValueOrDefault(se3748.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_938 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3750.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3751.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_938INVENTORY3.getValueOrDefault(se3752.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_939 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3754.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3755.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_939INVENTORY3.getValueOrDefault(se3756.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_940 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3758.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3759.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_940INVENTORY3.getValueOrDefault(se3760.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_941 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3762.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3763.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_941INVENTORY3.getValueOrDefault(se3764.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_942 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3766.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3767.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_942INVENTORY3.getValueOrDefault(se3768.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_943 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3770.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3771.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_943INVENTORY3.getValueOrDefault(se3772.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_944 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3774.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3775.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_944INVENTORY3.getValueOrDefault(se3776.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_945 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3778.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3779.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_945INVENTORY3.getValueOrDefault(se3780.modify(inventory_locn,inventory_dateid))));
      __SQL_SUM_AGGREGATE_946 += (__SQL_SUM_AGGREGATE_1INVENTORY1.getValueOrDefault(se3782.modify(inventory_locn)) * (__SQL_SUM_AGGREGATE_1INVENTORY2.getValueOrDefault(se3783.modify(inventory_ksn)) * __SQL_SUM_AGGREGATE_946INVENTORY3.getValueOrDefault(se3784.modify(inventory_locn,inventory_dateid))));
    }
    
    void on_system_ready_event() {
      
      __SQL_SUM_AGGREGATE_1 = 0.0;
      __SQL_SUM_AGGREGATE_1INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e1 = LOCATION.head;
        while (e1) {
          long __sql_sum_aggregate_1inventoryinventory_locn = e1->LOCATION_LOCN;
          long location_zip = e1->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e1->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e1->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e1->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e1->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e1->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e1->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e1->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e1->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e1->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e1->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e1->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e1->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e1->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v1 = e1->__av;
          { //slice
            const HASH_RES_t h1 = CENSUS_mapkey0_idxfn::hash(se3787.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i2 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n2 = &(i2->buckets_[h1 % i2->size_]);
            CENSUS_entry* e2;
            do if ((e2 = n2->obj) && h1 == n2->hash && CENSUS_mapkey0_idxfn::equals(se3787, *e2)) {
              long census_population = e2->CENSUS_POPULATION;
              long census_white = e2->CENSUS_WHITE;
              long census_asian = e2->CENSUS_ASIAN;
              long census_pacific = e2->CENSUS_PACIFIC;
              long census_blackafrican = e2->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e2->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e2->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e2->CENSUS_HOUSEUNITS;
              long census_families = e2->CENSUS_FAMILIES;
              long census_households = e2->CENSUS_HOUSEHOLDS;
              long census_husbwife = e2->CENSUS_HUSBWIFE;
              long census_males = e2->CENSUS_MALES;
              long census_females = e2->CENSUS_FEMALES;
              long census_householdschildren = e2->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e2->CENSUS_HISPANIC;
              long v2 = e2->__av;
              __SQL_SUM_AGGREGATE_1INVENTORY1.addOrDelOnZero(se3786.modify(__sql_sum_aggregate_1inventoryinventory_locn), (v1 * v2));
            } while ((n2 = n2->nxt));
          }
          e1 = e1->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_1INVENTORY2.clear();
      { //foreach
        ITEM_entry* e3 = ITEM.head;
        while (e3) {
          DOUBLE_TYPE __sql_sum_aggregate_1inventoryinventory_ksn = e3->ITEM_KSN;
          long item_subcategory = e3->ITEM_SUBCATEGORY;
          long item_category = e3->ITEM_CATEGORY;
          long item_categorycluster = e3->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e3->ITEM_PRIZE;
          long v3 = e3->__av;
          __SQL_SUM_AGGREGATE_1INVENTORY2.addOrDelOnZero(se3788.modify(__sql_sum_aggregate_1inventoryinventory_ksn), v3);
          e3 = e3->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_1INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e4 = WEATHER.head;
        while (e4) {
          long __sql_sum_aggregate_1inventoryinventory_locn = e4->WEATHER_LOCN;
          long __sql_sum_aggregate_1inventoryinventory_dateid = e4->WEATHER_DATEID;
          long weather_rain = e4->WEATHER_RAIN;
          long weather_snow = e4->WEATHER_SNOW;
          long weather_maxtemp = e4->WEATHER_MAXTEMP;
          long weather_mintemp = e4->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e4->WEATHER_MEANWIND;
          long weather_thunder = e4->WEATHER_THUNDER;
          long v4 = e4->__av;
          __SQL_SUM_AGGREGATE_1INVENTORY3.addOrDelOnZero(se3789.modify(__sql_sum_aggregate_1inventoryinventory_locn, __sql_sum_aggregate_1inventoryinventory_dateid), v4);
          e4 = e4->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_2 = 0.0;
      __SQL_SUM_AGGREGATE_3 = 0.0;
      __SQL_SUM_AGGREGATE_4 = 0.0;
      __SQL_SUM_AGGREGATE_5 = 0.0;
      __SQL_SUM_AGGREGATE_5INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e5 = LOCATION.head;
        while (e5) {
          long __sql_sum_aggregate_5inventoryinventory_locn = e5->LOCATION_LOCN;
          long location_zip = e5->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e5->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e5->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e5->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e5->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e5->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e5->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e5->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e5->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e5->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e5->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e5->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e5->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e5->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v5 = e5->__av;
          { //slice
            const HASH_RES_t h2 = CENSUS_mapkey0_idxfn::hash(se3795.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i6 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n6 = &(i6->buckets_[h2 % i6->size_]);
            CENSUS_entry* e6;
            do if ((e6 = n6->obj) && h2 == n6->hash && CENSUS_mapkey0_idxfn::equals(se3795, *e6)) {
              long census_population = e6->CENSUS_POPULATION;
              long census_white = e6->CENSUS_WHITE;
              long census_asian = e6->CENSUS_ASIAN;
              long census_pacific = e6->CENSUS_PACIFIC;
              long census_blackafrican = e6->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e6->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e6->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e6->CENSUS_HOUSEUNITS;
              long census_families = e6->CENSUS_FAMILIES;
              long census_households = e6->CENSUS_HOUSEHOLDS;
              long census_husbwife = e6->CENSUS_HUSBWIFE;
              long census_males = e6->CENSUS_MALES;
              long census_females = e6->CENSUS_FEMALES;
              long census_householdschildren = e6->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e6->CENSUS_HISPANIC;
              long v6 = e6->__av;
              __SQL_SUM_AGGREGATE_5INVENTORY1.addOrDelOnZero(se3794.modify(__sql_sum_aggregate_5inventoryinventory_locn), (v5 * (v6 * location_zip)));
            } while ((n6 = n6->nxt));
          }
          e5 = e5->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_6 = 0.0;
      __SQL_SUM_AGGREGATE_6INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e7 = LOCATION.head;
        while (e7) {
          long __sql_sum_aggregate_6inventoryinventory_locn = e7->LOCATION_LOCN;
          long location_zip = e7->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e7->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e7->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e7->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e7->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e7->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e7->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e7->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e7->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e7->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e7->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e7->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e7->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e7->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v7 = e7->__av;
          { //slice
            const HASH_RES_t h3 = CENSUS_mapkey0_idxfn::hash(se3798.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i8 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n8 = &(i8->buckets_[h3 % i8->size_]);
            CENSUS_entry* e8;
            do if ((e8 = n8->obj) && h3 == n8->hash && CENSUS_mapkey0_idxfn::equals(se3798, *e8)) {
              long census_population = e8->CENSUS_POPULATION;
              long census_white = e8->CENSUS_WHITE;
              long census_asian = e8->CENSUS_ASIAN;
              long census_pacific = e8->CENSUS_PACIFIC;
              long census_blackafrican = e8->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e8->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e8->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e8->CENSUS_HOUSEUNITS;
              long census_families = e8->CENSUS_FAMILIES;
              long census_households = e8->CENSUS_HOUSEHOLDS;
              long census_husbwife = e8->CENSUS_HUSBWIFE;
              long census_males = e8->CENSUS_MALES;
              long census_females = e8->CENSUS_FEMALES;
              long census_householdschildren = e8->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e8->CENSUS_HISPANIC;
              long v8 = e8->__av;
              __SQL_SUM_AGGREGATE_6INVENTORY1.addOrDelOnZero(se3797.modify(__sql_sum_aggregate_6inventoryinventory_locn), (v7 * (v8 * location_rgn_cd)));
            } while ((n8 = n8->nxt));
          }
          e7 = e7->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_7 = 0.0;
      __SQL_SUM_AGGREGATE_7INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e9 = LOCATION.head;
        while (e9) {
          long __sql_sum_aggregate_7inventoryinventory_locn = e9->LOCATION_LOCN;
          long location_zip = e9->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e9->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e9->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e9->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e9->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e9->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e9->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e9->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e9->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e9->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e9->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e9->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e9->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e9->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v9 = e9->__av;
          { //slice
            const HASH_RES_t h4 = CENSUS_mapkey0_idxfn::hash(se3801.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i10 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n10 = &(i10->buckets_[h4 % i10->size_]);
            CENSUS_entry* e10;
            do if ((e10 = n10->obj) && h4 == n10->hash && CENSUS_mapkey0_idxfn::equals(se3801, *e10)) {
              long census_population = e10->CENSUS_POPULATION;
              long census_white = e10->CENSUS_WHITE;
              long census_asian = e10->CENSUS_ASIAN;
              long census_pacific = e10->CENSUS_PACIFIC;
              long census_blackafrican = e10->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e10->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e10->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e10->CENSUS_HOUSEUNITS;
              long census_families = e10->CENSUS_FAMILIES;
              long census_households = e10->CENSUS_HOUSEHOLDS;
              long census_husbwife = e10->CENSUS_HUSBWIFE;
              long census_males = e10->CENSUS_MALES;
              long census_females = e10->CENSUS_FEMALES;
              long census_householdschildren = e10->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e10->CENSUS_HISPANIC;
              long v10 = e10->__av;
              __SQL_SUM_AGGREGATE_7INVENTORY1.addOrDelOnZero(se3800.modify(__sql_sum_aggregate_7inventoryinventory_locn), (v9 * (v10 * location_clim_zn_nbr)));
            } while ((n10 = n10->nxt));
          }
          e9 = e9->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_8 = 0.0;
      __SQL_SUM_AGGREGATE_8INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e11 = LOCATION.head;
        while (e11) {
          long __sql_sum_aggregate_8inventoryinventory_locn = e11->LOCATION_LOCN;
          long location_zip = e11->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e11->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e11->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e11->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e11->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e11->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e11->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e11->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e11->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e11->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e11->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e11->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e11->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e11->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v11 = e11->__av;
          { //slice
            const HASH_RES_t h5 = CENSUS_mapkey0_idxfn::hash(se3804.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i12 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n12 = &(i12->buckets_[h5 % i12->size_]);
            CENSUS_entry* e12;
            do if ((e12 = n12->obj) && h5 == n12->hash && CENSUS_mapkey0_idxfn::equals(se3804, *e12)) {
              long census_population = e12->CENSUS_POPULATION;
              long census_white = e12->CENSUS_WHITE;
              long census_asian = e12->CENSUS_ASIAN;
              long census_pacific = e12->CENSUS_PACIFIC;
              long census_blackafrican = e12->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e12->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e12->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e12->CENSUS_HOUSEUNITS;
              long census_families = e12->CENSUS_FAMILIES;
              long census_households = e12->CENSUS_HOUSEHOLDS;
              long census_husbwife = e12->CENSUS_HUSBWIFE;
              long census_males = e12->CENSUS_MALES;
              long census_females = e12->CENSUS_FEMALES;
              long census_householdschildren = e12->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e12->CENSUS_HISPANIC;
              long v12 = e12->__av;
              __SQL_SUM_AGGREGATE_8INVENTORY1.addOrDelOnZero(se3803.modify(__sql_sum_aggregate_8inventoryinventory_locn), (v11 * (v12 * location_tot_area_sq_ft)));
            } while ((n12 = n12->nxt));
          }
          e11 = e11->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_9 = 0.0;
      __SQL_SUM_AGGREGATE_9INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e13 = LOCATION.head;
        while (e13) {
          long __sql_sum_aggregate_9inventoryinventory_locn = e13->LOCATION_LOCN;
          long location_zip = e13->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e13->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e13->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e13->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e13->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e13->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e13->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e13->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e13->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e13->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e13->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e13->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e13->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e13->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v13 = e13->__av;
          { //slice
            const HASH_RES_t h6 = CENSUS_mapkey0_idxfn::hash(se3807.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i14 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n14 = &(i14->buckets_[h6 % i14->size_]);
            CENSUS_entry* e14;
            do if ((e14 = n14->obj) && h6 == n14->hash && CENSUS_mapkey0_idxfn::equals(se3807, *e14)) {
              long census_population = e14->CENSUS_POPULATION;
              long census_white = e14->CENSUS_WHITE;
              long census_asian = e14->CENSUS_ASIAN;
              long census_pacific = e14->CENSUS_PACIFIC;
              long census_blackafrican = e14->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e14->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e14->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e14->CENSUS_HOUSEUNITS;
              long census_families = e14->CENSUS_FAMILIES;
              long census_households = e14->CENSUS_HOUSEHOLDS;
              long census_husbwife = e14->CENSUS_HUSBWIFE;
              long census_males = e14->CENSUS_MALES;
              long census_females = e14->CENSUS_FEMALES;
              long census_householdschildren = e14->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e14->CENSUS_HISPANIC;
              long v14 = e14->__av;
              __SQL_SUM_AGGREGATE_9INVENTORY1.addOrDelOnZero(se3806.modify(__sql_sum_aggregate_9inventoryinventory_locn), (v13 * (v14 * location_sell_area_sq_ft)));
            } while ((n14 = n14->nxt));
          }
          e13 = e13->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_10 = 0.0;
      __SQL_SUM_AGGREGATE_10INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e15 = LOCATION.head;
        while (e15) {
          long __sql_sum_aggregate_10inventoryinventory_locn = e15->LOCATION_LOCN;
          long location_zip = e15->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e15->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e15->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e15->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e15->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e15->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e15->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e15->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e15->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e15->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e15->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e15->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e15->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e15->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v15 = e15->__av;
          { //slice
            const HASH_RES_t h7 = CENSUS_mapkey0_idxfn::hash(se3810.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i16 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n16 = &(i16->buckets_[h7 % i16->size_]);
            CENSUS_entry* e16;
            do if ((e16 = n16->obj) && h7 == n16->hash && CENSUS_mapkey0_idxfn::equals(se3810, *e16)) {
              long census_population = e16->CENSUS_POPULATION;
              long census_white = e16->CENSUS_WHITE;
              long census_asian = e16->CENSUS_ASIAN;
              long census_pacific = e16->CENSUS_PACIFIC;
              long census_blackafrican = e16->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e16->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e16->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e16->CENSUS_HOUSEUNITS;
              long census_families = e16->CENSUS_FAMILIES;
              long census_households = e16->CENSUS_HOUSEHOLDS;
              long census_husbwife = e16->CENSUS_HUSBWIFE;
              long census_males = e16->CENSUS_MALES;
              long census_females = e16->CENSUS_FEMALES;
              long census_householdschildren = e16->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e16->CENSUS_HISPANIC;
              long v16 = e16->__av;
              __SQL_SUM_AGGREGATE_10INVENTORY1.addOrDelOnZero(se3809.modify(__sql_sum_aggregate_10inventoryinventory_locn), (v15 * (v16 * location_avghhi)));
            } while ((n16 = n16->nxt));
          }
          e15 = e15->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_11 = 0.0;
      __SQL_SUM_AGGREGATE_11INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e17 = LOCATION.head;
        while (e17) {
          long __sql_sum_aggregate_11inventoryinventory_locn = e17->LOCATION_LOCN;
          long location_zip = e17->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e17->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e17->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e17->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e17->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e17->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e17->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e17->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e17->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e17->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e17->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e17->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e17->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e17->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v17 = e17->__av;
          { //slice
            const HASH_RES_t h8 = CENSUS_mapkey0_idxfn::hash(se3813.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i18 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n18 = &(i18->buckets_[h8 % i18->size_]);
            CENSUS_entry* e18;
            do if ((e18 = n18->obj) && h8 == n18->hash && CENSUS_mapkey0_idxfn::equals(se3813, *e18)) {
              long census_population = e18->CENSUS_POPULATION;
              long census_white = e18->CENSUS_WHITE;
              long census_asian = e18->CENSUS_ASIAN;
              long census_pacific = e18->CENSUS_PACIFIC;
              long census_blackafrican = e18->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e18->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e18->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e18->CENSUS_HOUSEUNITS;
              long census_families = e18->CENSUS_FAMILIES;
              long census_households = e18->CENSUS_HOUSEHOLDS;
              long census_husbwife = e18->CENSUS_HUSBWIFE;
              long census_males = e18->CENSUS_MALES;
              long census_females = e18->CENSUS_FEMALES;
              long census_householdschildren = e18->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e18->CENSUS_HISPANIC;
              long v18 = e18->__av;
              __SQL_SUM_AGGREGATE_11INVENTORY1.addOrDelOnZero(se3812.modify(__sql_sum_aggregate_11inventoryinventory_locn), (v17 * (v18 * location_supertargetdistance)));
            } while ((n18 = n18->nxt));
          }
          e17 = e17->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_12 = 0.0;
      __SQL_SUM_AGGREGATE_12INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e19 = LOCATION.head;
        while (e19) {
          long __sql_sum_aggregate_12inventoryinventory_locn = e19->LOCATION_LOCN;
          long location_zip = e19->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e19->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e19->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e19->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e19->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e19->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e19->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e19->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e19->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e19->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e19->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e19->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e19->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e19->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v19 = e19->__av;
          { //slice
            const HASH_RES_t h9 = CENSUS_mapkey0_idxfn::hash(se3816.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i20 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n20 = &(i20->buckets_[h9 % i20->size_]);
            CENSUS_entry* e20;
            do if ((e20 = n20->obj) && h9 == n20->hash && CENSUS_mapkey0_idxfn::equals(se3816, *e20)) {
              long census_population = e20->CENSUS_POPULATION;
              long census_white = e20->CENSUS_WHITE;
              long census_asian = e20->CENSUS_ASIAN;
              long census_pacific = e20->CENSUS_PACIFIC;
              long census_blackafrican = e20->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e20->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e20->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e20->CENSUS_HOUSEUNITS;
              long census_families = e20->CENSUS_FAMILIES;
              long census_households = e20->CENSUS_HOUSEHOLDS;
              long census_husbwife = e20->CENSUS_HUSBWIFE;
              long census_males = e20->CENSUS_MALES;
              long census_females = e20->CENSUS_FEMALES;
              long census_householdschildren = e20->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e20->CENSUS_HISPANIC;
              long v20 = e20->__av;
              __SQL_SUM_AGGREGATE_12INVENTORY1.addOrDelOnZero(se3815.modify(__sql_sum_aggregate_12inventoryinventory_locn), (v19 * (v20 * location_supertargetdrivetime)));
            } while ((n20 = n20->nxt));
          }
          e19 = e19->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_13 = 0.0;
      __SQL_SUM_AGGREGATE_13INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e21 = LOCATION.head;
        while (e21) {
          long __sql_sum_aggregate_13inventoryinventory_locn = e21->LOCATION_LOCN;
          long location_zip = e21->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e21->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e21->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e21->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e21->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e21->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e21->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e21->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e21->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e21->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e21->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e21->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e21->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e21->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v21 = e21->__av;
          { //slice
            const HASH_RES_t h10 = CENSUS_mapkey0_idxfn::hash(se3819.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i22 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n22 = &(i22->buckets_[h10 % i22->size_]);
            CENSUS_entry* e22;
            do if ((e22 = n22->obj) && h10 == n22->hash && CENSUS_mapkey0_idxfn::equals(se3819, *e22)) {
              long census_population = e22->CENSUS_POPULATION;
              long census_white = e22->CENSUS_WHITE;
              long census_asian = e22->CENSUS_ASIAN;
              long census_pacific = e22->CENSUS_PACIFIC;
              long census_blackafrican = e22->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e22->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e22->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e22->CENSUS_HOUSEUNITS;
              long census_families = e22->CENSUS_FAMILIES;
              long census_households = e22->CENSUS_HOUSEHOLDS;
              long census_husbwife = e22->CENSUS_HUSBWIFE;
              long census_males = e22->CENSUS_MALES;
              long census_females = e22->CENSUS_FEMALES;
              long census_householdschildren = e22->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e22->CENSUS_HISPANIC;
              long v22 = e22->__av;
              __SQL_SUM_AGGREGATE_13INVENTORY1.addOrDelOnZero(se3818.modify(__sql_sum_aggregate_13inventoryinventory_locn), (v21 * (v22 * location_targetdistance)));
            } while ((n22 = n22->nxt));
          }
          e21 = e21->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_14 = 0.0;
      __SQL_SUM_AGGREGATE_14INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e23 = LOCATION.head;
        while (e23) {
          long __sql_sum_aggregate_14inventoryinventory_locn = e23->LOCATION_LOCN;
          long location_zip = e23->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e23->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e23->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e23->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e23->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e23->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e23->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e23->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e23->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e23->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e23->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e23->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e23->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e23->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v23 = e23->__av;
          { //slice
            const HASH_RES_t h11 = CENSUS_mapkey0_idxfn::hash(se3822.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i24 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n24 = &(i24->buckets_[h11 % i24->size_]);
            CENSUS_entry* e24;
            do if ((e24 = n24->obj) && h11 == n24->hash && CENSUS_mapkey0_idxfn::equals(se3822, *e24)) {
              long census_population = e24->CENSUS_POPULATION;
              long census_white = e24->CENSUS_WHITE;
              long census_asian = e24->CENSUS_ASIAN;
              long census_pacific = e24->CENSUS_PACIFIC;
              long census_blackafrican = e24->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e24->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e24->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e24->CENSUS_HOUSEUNITS;
              long census_families = e24->CENSUS_FAMILIES;
              long census_households = e24->CENSUS_HOUSEHOLDS;
              long census_husbwife = e24->CENSUS_HUSBWIFE;
              long census_males = e24->CENSUS_MALES;
              long census_females = e24->CENSUS_FEMALES;
              long census_householdschildren = e24->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e24->CENSUS_HISPANIC;
              long v24 = e24->__av;
              __SQL_SUM_AGGREGATE_14INVENTORY1.addOrDelOnZero(se3821.modify(__sql_sum_aggregate_14inventoryinventory_locn), (v23 * (v24 * location_targetdrivetime)));
            } while ((n24 = n24->nxt));
          }
          e23 = e23->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_15 = 0.0;
      __SQL_SUM_AGGREGATE_15INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e25 = LOCATION.head;
        while (e25) {
          long __sql_sum_aggregate_15inventoryinventory_locn = e25->LOCATION_LOCN;
          long location_zip = e25->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e25->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e25->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e25->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e25->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e25->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e25->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e25->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e25->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e25->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e25->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e25->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e25->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e25->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v25 = e25->__av;
          { //slice
            const HASH_RES_t h12 = CENSUS_mapkey0_idxfn::hash(se3825.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i26 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n26 = &(i26->buckets_[h12 % i26->size_]);
            CENSUS_entry* e26;
            do if ((e26 = n26->obj) && h12 == n26->hash && CENSUS_mapkey0_idxfn::equals(se3825, *e26)) {
              long census_population = e26->CENSUS_POPULATION;
              long census_white = e26->CENSUS_WHITE;
              long census_asian = e26->CENSUS_ASIAN;
              long census_pacific = e26->CENSUS_PACIFIC;
              long census_blackafrican = e26->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e26->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e26->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e26->CENSUS_HOUSEUNITS;
              long census_families = e26->CENSUS_FAMILIES;
              long census_households = e26->CENSUS_HOUSEHOLDS;
              long census_husbwife = e26->CENSUS_HUSBWIFE;
              long census_males = e26->CENSUS_MALES;
              long census_females = e26->CENSUS_FEMALES;
              long census_householdschildren = e26->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e26->CENSUS_HISPANIC;
              long v26 = e26->__av;
              __SQL_SUM_AGGREGATE_15INVENTORY1.addOrDelOnZero(se3824.modify(__sql_sum_aggregate_15inventoryinventory_locn), (v25 * (v26 * location_walmartdistance)));
            } while ((n26 = n26->nxt));
          }
          e25 = e25->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_16 = 0.0;
      __SQL_SUM_AGGREGATE_16INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e27 = LOCATION.head;
        while (e27) {
          long __sql_sum_aggregate_16inventoryinventory_locn = e27->LOCATION_LOCN;
          long location_zip = e27->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e27->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e27->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e27->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e27->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e27->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e27->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e27->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e27->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e27->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e27->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e27->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e27->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e27->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v27 = e27->__av;
          { //slice
            const HASH_RES_t h13 = CENSUS_mapkey0_idxfn::hash(se3828.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i28 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n28 = &(i28->buckets_[h13 % i28->size_]);
            CENSUS_entry* e28;
            do if ((e28 = n28->obj) && h13 == n28->hash && CENSUS_mapkey0_idxfn::equals(se3828, *e28)) {
              long census_population = e28->CENSUS_POPULATION;
              long census_white = e28->CENSUS_WHITE;
              long census_asian = e28->CENSUS_ASIAN;
              long census_pacific = e28->CENSUS_PACIFIC;
              long census_blackafrican = e28->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e28->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e28->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e28->CENSUS_HOUSEUNITS;
              long census_families = e28->CENSUS_FAMILIES;
              long census_households = e28->CENSUS_HOUSEHOLDS;
              long census_husbwife = e28->CENSUS_HUSBWIFE;
              long census_males = e28->CENSUS_MALES;
              long census_females = e28->CENSUS_FEMALES;
              long census_householdschildren = e28->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e28->CENSUS_HISPANIC;
              long v28 = e28->__av;
              __SQL_SUM_AGGREGATE_16INVENTORY1.addOrDelOnZero(se3827.modify(__sql_sum_aggregate_16inventoryinventory_locn), (v27 * (v28 * location_walmartdrivetime)));
            } while ((n28 = n28->nxt));
          }
          e27 = e27->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_17 = 0.0;
      __SQL_SUM_AGGREGATE_17INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e29 = LOCATION.head;
        while (e29) {
          long __sql_sum_aggregate_17inventoryinventory_locn = e29->LOCATION_LOCN;
          long location_zip = e29->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e29->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e29->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e29->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e29->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e29->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e29->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e29->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e29->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e29->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e29->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e29->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e29->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e29->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v29 = e29->__av;
          { //slice
            const HASH_RES_t h14 = CENSUS_mapkey0_idxfn::hash(se3831.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i30 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n30 = &(i30->buckets_[h14 % i30->size_]);
            CENSUS_entry* e30;
            do if ((e30 = n30->obj) && h14 == n30->hash && CENSUS_mapkey0_idxfn::equals(se3831, *e30)) {
              long census_population = e30->CENSUS_POPULATION;
              long census_white = e30->CENSUS_WHITE;
              long census_asian = e30->CENSUS_ASIAN;
              long census_pacific = e30->CENSUS_PACIFIC;
              long census_blackafrican = e30->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e30->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e30->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e30->CENSUS_HOUSEUNITS;
              long census_families = e30->CENSUS_FAMILIES;
              long census_households = e30->CENSUS_HOUSEHOLDS;
              long census_husbwife = e30->CENSUS_HUSBWIFE;
              long census_males = e30->CENSUS_MALES;
              long census_females = e30->CENSUS_FEMALES;
              long census_householdschildren = e30->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e30->CENSUS_HISPANIC;
              long v30 = e30->__av;
              __SQL_SUM_AGGREGATE_17INVENTORY1.addOrDelOnZero(se3830.modify(__sql_sum_aggregate_17inventoryinventory_locn), (v29 * (v30 * location_walmartsupercenterdistance)));
            } while ((n30 = n30->nxt));
          }
          e29 = e29->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_18 = 0.0;
      __SQL_SUM_AGGREGATE_18INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e31 = LOCATION.head;
        while (e31) {
          long __sql_sum_aggregate_18inventoryinventory_locn = e31->LOCATION_LOCN;
          long location_zip = e31->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e31->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e31->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e31->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e31->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e31->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e31->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e31->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e31->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e31->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e31->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e31->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e31->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e31->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v31 = e31->__av;
          { //slice
            const HASH_RES_t h15 = CENSUS_mapkey0_idxfn::hash(se3834.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i32 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n32 = &(i32->buckets_[h15 % i32->size_]);
            CENSUS_entry* e32;
            do if ((e32 = n32->obj) && h15 == n32->hash && CENSUS_mapkey0_idxfn::equals(se3834, *e32)) {
              long census_population = e32->CENSUS_POPULATION;
              long census_white = e32->CENSUS_WHITE;
              long census_asian = e32->CENSUS_ASIAN;
              long census_pacific = e32->CENSUS_PACIFIC;
              long census_blackafrican = e32->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e32->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e32->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e32->CENSUS_HOUSEUNITS;
              long census_families = e32->CENSUS_FAMILIES;
              long census_households = e32->CENSUS_HOUSEHOLDS;
              long census_husbwife = e32->CENSUS_HUSBWIFE;
              long census_males = e32->CENSUS_MALES;
              long census_females = e32->CENSUS_FEMALES;
              long census_householdschildren = e32->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e32->CENSUS_HISPANIC;
              long v32 = e32->__av;
              __SQL_SUM_AGGREGATE_18INVENTORY1.addOrDelOnZero(se3833.modify(__sql_sum_aggregate_18inventoryinventory_locn), (v31 * (v32 * location_walmartsupercenterdrivetime)));
            } while ((n32 = n32->nxt));
          }
          e31 = e31->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_19 = 0.0;
      __SQL_SUM_AGGREGATE_19INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e33 = LOCATION.head;
        while (e33) {
          long __sql_sum_aggregate_19inventoryinventory_locn = e33->LOCATION_LOCN;
          long location_zip = e33->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e33->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e33->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e33->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e33->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e33->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e33->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e33->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e33->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e33->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e33->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e33->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e33->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e33->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v33 = e33->__av;
          { //slice
            const HASH_RES_t h16 = CENSUS_mapkey0_idxfn::hash(se3837.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i34 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n34 = &(i34->buckets_[h16 % i34->size_]);
            CENSUS_entry* e34;
            do if ((e34 = n34->obj) && h16 == n34->hash && CENSUS_mapkey0_idxfn::equals(se3837, *e34)) {
              long census_population = e34->CENSUS_POPULATION;
              long census_white = e34->CENSUS_WHITE;
              long census_asian = e34->CENSUS_ASIAN;
              long census_pacific = e34->CENSUS_PACIFIC;
              long census_blackafrican = e34->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e34->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e34->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e34->CENSUS_HOUSEUNITS;
              long census_families = e34->CENSUS_FAMILIES;
              long census_households = e34->CENSUS_HOUSEHOLDS;
              long census_husbwife = e34->CENSUS_HUSBWIFE;
              long census_males = e34->CENSUS_MALES;
              long census_females = e34->CENSUS_FEMALES;
              long census_householdschildren = e34->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e34->CENSUS_HISPANIC;
              long v34 = e34->__av;
              __SQL_SUM_AGGREGATE_19INVENTORY1.addOrDelOnZero(se3836.modify(__sql_sum_aggregate_19inventoryinventory_locn), (v33 * (v34 * census_population)));
            } while ((n34 = n34->nxt));
          }
          e33 = e33->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_20 = 0.0;
      __SQL_SUM_AGGREGATE_20INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e35 = LOCATION.head;
        while (e35) {
          long __sql_sum_aggregate_20inventoryinventory_locn = e35->LOCATION_LOCN;
          long location_zip = e35->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e35->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e35->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e35->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e35->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e35->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e35->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e35->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e35->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e35->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e35->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e35->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e35->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e35->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v35 = e35->__av;
          { //slice
            const HASH_RES_t h17 = CENSUS_mapkey0_idxfn::hash(se3840.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i36 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n36 = &(i36->buckets_[h17 % i36->size_]);
            CENSUS_entry* e36;
            do if ((e36 = n36->obj) && h17 == n36->hash && CENSUS_mapkey0_idxfn::equals(se3840, *e36)) {
              long census_population = e36->CENSUS_POPULATION;
              long census_white = e36->CENSUS_WHITE;
              long census_asian = e36->CENSUS_ASIAN;
              long census_pacific = e36->CENSUS_PACIFIC;
              long census_blackafrican = e36->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e36->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e36->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e36->CENSUS_HOUSEUNITS;
              long census_families = e36->CENSUS_FAMILIES;
              long census_households = e36->CENSUS_HOUSEHOLDS;
              long census_husbwife = e36->CENSUS_HUSBWIFE;
              long census_males = e36->CENSUS_MALES;
              long census_females = e36->CENSUS_FEMALES;
              long census_householdschildren = e36->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e36->CENSUS_HISPANIC;
              long v36 = e36->__av;
              __SQL_SUM_AGGREGATE_20INVENTORY1.addOrDelOnZero(se3839.modify(__sql_sum_aggregate_20inventoryinventory_locn), (v35 * (v36 * census_white)));
            } while ((n36 = n36->nxt));
          }
          e35 = e35->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_21 = 0.0;
      __SQL_SUM_AGGREGATE_21INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e37 = LOCATION.head;
        while (e37) {
          long __sql_sum_aggregate_21inventoryinventory_locn = e37->LOCATION_LOCN;
          long location_zip = e37->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e37->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e37->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e37->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e37->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e37->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e37->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e37->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e37->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e37->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e37->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e37->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e37->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e37->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v37 = e37->__av;
          { //slice
            const HASH_RES_t h18 = CENSUS_mapkey0_idxfn::hash(se3843.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i38 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n38 = &(i38->buckets_[h18 % i38->size_]);
            CENSUS_entry* e38;
            do if ((e38 = n38->obj) && h18 == n38->hash && CENSUS_mapkey0_idxfn::equals(se3843, *e38)) {
              long census_population = e38->CENSUS_POPULATION;
              long census_white = e38->CENSUS_WHITE;
              long census_asian = e38->CENSUS_ASIAN;
              long census_pacific = e38->CENSUS_PACIFIC;
              long census_blackafrican = e38->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e38->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e38->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e38->CENSUS_HOUSEUNITS;
              long census_families = e38->CENSUS_FAMILIES;
              long census_households = e38->CENSUS_HOUSEHOLDS;
              long census_husbwife = e38->CENSUS_HUSBWIFE;
              long census_males = e38->CENSUS_MALES;
              long census_females = e38->CENSUS_FEMALES;
              long census_householdschildren = e38->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e38->CENSUS_HISPANIC;
              long v38 = e38->__av;
              __SQL_SUM_AGGREGATE_21INVENTORY1.addOrDelOnZero(se3842.modify(__sql_sum_aggregate_21inventoryinventory_locn), (v37 * (v38 * census_asian)));
            } while ((n38 = n38->nxt));
          }
          e37 = e37->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_22 = 0.0;
      __SQL_SUM_AGGREGATE_22INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e39 = LOCATION.head;
        while (e39) {
          long __sql_sum_aggregate_22inventoryinventory_locn = e39->LOCATION_LOCN;
          long location_zip = e39->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e39->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e39->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e39->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e39->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e39->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e39->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e39->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e39->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e39->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e39->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e39->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e39->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e39->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v39 = e39->__av;
          { //slice
            const HASH_RES_t h19 = CENSUS_mapkey0_idxfn::hash(se3846.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i40 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n40 = &(i40->buckets_[h19 % i40->size_]);
            CENSUS_entry* e40;
            do if ((e40 = n40->obj) && h19 == n40->hash && CENSUS_mapkey0_idxfn::equals(se3846, *e40)) {
              long census_population = e40->CENSUS_POPULATION;
              long census_white = e40->CENSUS_WHITE;
              long census_asian = e40->CENSUS_ASIAN;
              long census_pacific = e40->CENSUS_PACIFIC;
              long census_blackafrican = e40->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e40->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e40->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e40->CENSUS_HOUSEUNITS;
              long census_families = e40->CENSUS_FAMILIES;
              long census_households = e40->CENSUS_HOUSEHOLDS;
              long census_husbwife = e40->CENSUS_HUSBWIFE;
              long census_males = e40->CENSUS_MALES;
              long census_females = e40->CENSUS_FEMALES;
              long census_householdschildren = e40->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e40->CENSUS_HISPANIC;
              long v40 = e40->__av;
              __SQL_SUM_AGGREGATE_22INVENTORY1.addOrDelOnZero(se3845.modify(__sql_sum_aggregate_22inventoryinventory_locn), (v39 * (v40 * census_pacific)));
            } while ((n40 = n40->nxt));
          }
          e39 = e39->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_23 = 0.0;
      __SQL_SUM_AGGREGATE_23INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e41 = LOCATION.head;
        while (e41) {
          long __sql_sum_aggregate_23inventoryinventory_locn = e41->LOCATION_LOCN;
          long location_zip = e41->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e41->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e41->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e41->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e41->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e41->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e41->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e41->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e41->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e41->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e41->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e41->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e41->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e41->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v41 = e41->__av;
          { //slice
            const HASH_RES_t h20 = CENSUS_mapkey0_idxfn::hash(se3849.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i42 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n42 = &(i42->buckets_[h20 % i42->size_]);
            CENSUS_entry* e42;
            do if ((e42 = n42->obj) && h20 == n42->hash && CENSUS_mapkey0_idxfn::equals(se3849, *e42)) {
              long census_population = e42->CENSUS_POPULATION;
              long census_white = e42->CENSUS_WHITE;
              long census_asian = e42->CENSUS_ASIAN;
              long census_pacific = e42->CENSUS_PACIFIC;
              long census_blackafrican = e42->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e42->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e42->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e42->CENSUS_HOUSEUNITS;
              long census_families = e42->CENSUS_FAMILIES;
              long census_households = e42->CENSUS_HOUSEHOLDS;
              long census_husbwife = e42->CENSUS_HUSBWIFE;
              long census_males = e42->CENSUS_MALES;
              long census_females = e42->CENSUS_FEMALES;
              long census_householdschildren = e42->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e42->CENSUS_HISPANIC;
              long v42 = e42->__av;
              __SQL_SUM_AGGREGATE_23INVENTORY1.addOrDelOnZero(se3848.modify(__sql_sum_aggregate_23inventoryinventory_locn), (v41 * (v42 * census_blackafrican)));
            } while ((n42 = n42->nxt));
          }
          e41 = e41->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_24 = 0.0;
      __SQL_SUM_AGGREGATE_24INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e43 = LOCATION.head;
        while (e43) {
          long __sql_sum_aggregate_24inventoryinventory_locn = e43->LOCATION_LOCN;
          long location_zip = e43->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e43->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e43->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e43->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e43->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e43->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e43->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e43->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e43->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e43->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e43->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e43->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e43->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e43->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v43 = e43->__av;
          { //slice
            const HASH_RES_t h21 = CENSUS_mapkey0_idxfn::hash(se3852.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i44 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n44 = &(i44->buckets_[h21 % i44->size_]);
            CENSUS_entry* e44;
            do if ((e44 = n44->obj) && h21 == n44->hash && CENSUS_mapkey0_idxfn::equals(se3852, *e44)) {
              long census_population = e44->CENSUS_POPULATION;
              long census_white = e44->CENSUS_WHITE;
              long census_asian = e44->CENSUS_ASIAN;
              long census_pacific = e44->CENSUS_PACIFIC;
              long census_blackafrican = e44->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e44->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e44->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e44->CENSUS_HOUSEUNITS;
              long census_families = e44->CENSUS_FAMILIES;
              long census_households = e44->CENSUS_HOUSEHOLDS;
              long census_husbwife = e44->CENSUS_HUSBWIFE;
              long census_males = e44->CENSUS_MALES;
              long census_females = e44->CENSUS_FEMALES;
              long census_householdschildren = e44->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e44->CENSUS_HISPANIC;
              long v44 = e44->__av;
              __SQL_SUM_AGGREGATE_24INVENTORY1.addOrDelOnZero(se3851.modify(__sql_sum_aggregate_24inventoryinventory_locn), (v43 * (v44 * census_medianage)));
            } while ((n44 = n44->nxt));
          }
          e43 = e43->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_25 = 0.0;
      __SQL_SUM_AGGREGATE_25INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e45 = LOCATION.head;
        while (e45) {
          long __sql_sum_aggregate_25inventoryinventory_locn = e45->LOCATION_LOCN;
          long location_zip = e45->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e45->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e45->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e45->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e45->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e45->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e45->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e45->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e45->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e45->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e45->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e45->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e45->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e45->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v45 = e45->__av;
          { //slice
            const HASH_RES_t h22 = CENSUS_mapkey0_idxfn::hash(se3855.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i46 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n46 = &(i46->buckets_[h22 % i46->size_]);
            CENSUS_entry* e46;
            do if ((e46 = n46->obj) && h22 == n46->hash && CENSUS_mapkey0_idxfn::equals(se3855, *e46)) {
              long census_population = e46->CENSUS_POPULATION;
              long census_white = e46->CENSUS_WHITE;
              long census_asian = e46->CENSUS_ASIAN;
              long census_pacific = e46->CENSUS_PACIFIC;
              long census_blackafrican = e46->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e46->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e46->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e46->CENSUS_HOUSEUNITS;
              long census_families = e46->CENSUS_FAMILIES;
              long census_households = e46->CENSUS_HOUSEHOLDS;
              long census_husbwife = e46->CENSUS_HUSBWIFE;
              long census_males = e46->CENSUS_MALES;
              long census_females = e46->CENSUS_FEMALES;
              long census_householdschildren = e46->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e46->CENSUS_HISPANIC;
              long v46 = e46->__av;
              __SQL_SUM_AGGREGATE_25INVENTORY1.addOrDelOnZero(se3854.modify(__sql_sum_aggregate_25inventoryinventory_locn), (v45 * (v46 * census_occupiedhouseunits)));
            } while ((n46 = n46->nxt));
          }
          e45 = e45->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_26 = 0.0;
      __SQL_SUM_AGGREGATE_26INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e47 = LOCATION.head;
        while (e47) {
          long __sql_sum_aggregate_26inventoryinventory_locn = e47->LOCATION_LOCN;
          long location_zip = e47->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e47->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e47->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e47->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e47->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e47->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e47->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e47->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e47->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e47->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e47->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e47->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e47->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e47->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v47 = e47->__av;
          { //slice
            const HASH_RES_t h23 = CENSUS_mapkey0_idxfn::hash(se3858.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i48 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n48 = &(i48->buckets_[h23 % i48->size_]);
            CENSUS_entry* e48;
            do if ((e48 = n48->obj) && h23 == n48->hash && CENSUS_mapkey0_idxfn::equals(se3858, *e48)) {
              long census_population = e48->CENSUS_POPULATION;
              long census_white = e48->CENSUS_WHITE;
              long census_asian = e48->CENSUS_ASIAN;
              long census_pacific = e48->CENSUS_PACIFIC;
              long census_blackafrican = e48->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e48->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e48->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e48->CENSUS_HOUSEUNITS;
              long census_families = e48->CENSUS_FAMILIES;
              long census_households = e48->CENSUS_HOUSEHOLDS;
              long census_husbwife = e48->CENSUS_HUSBWIFE;
              long census_males = e48->CENSUS_MALES;
              long census_females = e48->CENSUS_FEMALES;
              long census_householdschildren = e48->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e48->CENSUS_HISPANIC;
              long v48 = e48->__av;
              __SQL_SUM_AGGREGATE_26INVENTORY1.addOrDelOnZero(se3857.modify(__sql_sum_aggregate_26inventoryinventory_locn), (v47 * (v48 * census_houseunits)));
            } while ((n48 = n48->nxt));
          }
          e47 = e47->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_27 = 0.0;
      __SQL_SUM_AGGREGATE_27INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e49 = LOCATION.head;
        while (e49) {
          long __sql_sum_aggregate_27inventoryinventory_locn = e49->LOCATION_LOCN;
          long location_zip = e49->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e49->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e49->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e49->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e49->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e49->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e49->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e49->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e49->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e49->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e49->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e49->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e49->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e49->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v49 = e49->__av;
          { //slice
            const HASH_RES_t h24 = CENSUS_mapkey0_idxfn::hash(se3861.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i50 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n50 = &(i50->buckets_[h24 % i50->size_]);
            CENSUS_entry* e50;
            do if ((e50 = n50->obj) && h24 == n50->hash && CENSUS_mapkey0_idxfn::equals(se3861, *e50)) {
              long census_population = e50->CENSUS_POPULATION;
              long census_white = e50->CENSUS_WHITE;
              long census_asian = e50->CENSUS_ASIAN;
              long census_pacific = e50->CENSUS_PACIFIC;
              long census_blackafrican = e50->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e50->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e50->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e50->CENSUS_HOUSEUNITS;
              long census_families = e50->CENSUS_FAMILIES;
              long census_households = e50->CENSUS_HOUSEHOLDS;
              long census_husbwife = e50->CENSUS_HUSBWIFE;
              long census_males = e50->CENSUS_MALES;
              long census_females = e50->CENSUS_FEMALES;
              long census_householdschildren = e50->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e50->CENSUS_HISPANIC;
              long v50 = e50->__av;
              __SQL_SUM_AGGREGATE_27INVENTORY1.addOrDelOnZero(se3860.modify(__sql_sum_aggregate_27inventoryinventory_locn), (v49 * (v50 * census_families)));
            } while ((n50 = n50->nxt));
          }
          e49 = e49->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_28 = 0.0;
      __SQL_SUM_AGGREGATE_28INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e51 = LOCATION.head;
        while (e51) {
          long __sql_sum_aggregate_28inventoryinventory_locn = e51->LOCATION_LOCN;
          long location_zip = e51->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e51->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e51->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e51->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e51->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e51->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e51->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e51->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e51->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e51->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e51->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e51->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e51->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e51->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v51 = e51->__av;
          { //slice
            const HASH_RES_t h25 = CENSUS_mapkey0_idxfn::hash(se3864.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i52 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n52 = &(i52->buckets_[h25 % i52->size_]);
            CENSUS_entry* e52;
            do if ((e52 = n52->obj) && h25 == n52->hash && CENSUS_mapkey0_idxfn::equals(se3864, *e52)) {
              long census_population = e52->CENSUS_POPULATION;
              long census_white = e52->CENSUS_WHITE;
              long census_asian = e52->CENSUS_ASIAN;
              long census_pacific = e52->CENSUS_PACIFIC;
              long census_blackafrican = e52->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e52->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e52->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e52->CENSUS_HOUSEUNITS;
              long census_families = e52->CENSUS_FAMILIES;
              long census_households = e52->CENSUS_HOUSEHOLDS;
              long census_husbwife = e52->CENSUS_HUSBWIFE;
              long census_males = e52->CENSUS_MALES;
              long census_females = e52->CENSUS_FEMALES;
              long census_householdschildren = e52->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e52->CENSUS_HISPANIC;
              long v52 = e52->__av;
              __SQL_SUM_AGGREGATE_28INVENTORY1.addOrDelOnZero(se3863.modify(__sql_sum_aggregate_28inventoryinventory_locn), (v51 * (v52 * census_households)));
            } while ((n52 = n52->nxt));
          }
          e51 = e51->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_29 = 0.0;
      __SQL_SUM_AGGREGATE_29INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e53 = LOCATION.head;
        while (e53) {
          long __sql_sum_aggregate_29inventoryinventory_locn = e53->LOCATION_LOCN;
          long location_zip = e53->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e53->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e53->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e53->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e53->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e53->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e53->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e53->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e53->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e53->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e53->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e53->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e53->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e53->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v53 = e53->__av;
          { //slice
            const HASH_RES_t h26 = CENSUS_mapkey0_idxfn::hash(se3867.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i54 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n54 = &(i54->buckets_[h26 % i54->size_]);
            CENSUS_entry* e54;
            do if ((e54 = n54->obj) && h26 == n54->hash && CENSUS_mapkey0_idxfn::equals(se3867, *e54)) {
              long census_population = e54->CENSUS_POPULATION;
              long census_white = e54->CENSUS_WHITE;
              long census_asian = e54->CENSUS_ASIAN;
              long census_pacific = e54->CENSUS_PACIFIC;
              long census_blackafrican = e54->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e54->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e54->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e54->CENSUS_HOUSEUNITS;
              long census_families = e54->CENSUS_FAMILIES;
              long census_households = e54->CENSUS_HOUSEHOLDS;
              long census_husbwife = e54->CENSUS_HUSBWIFE;
              long census_males = e54->CENSUS_MALES;
              long census_females = e54->CENSUS_FEMALES;
              long census_householdschildren = e54->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e54->CENSUS_HISPANIC;
              long v54 = e54->__av;
              __SQL_SUM_AGGREGATE_29INVENTORY1.addOrDelOnZero(se3866.modify(__sql_sum_aggregate_29inventoryinventory_locn), (v53 * (v54 * census_husbwife)));
            } while ((n54 = n54->nxt));
          }
          e53 = e53->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_30 = 0.0;
      __SQL_SUM_AGGREGATE_30INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e55 = LOCATION.head;
        while (e55) {
          long __sql_sum_aggregate_30inventoryinventory_locn = e55->LOCATION_LOCN;
          long location_zip = e55->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e55->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e55->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e55->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e55->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e55->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e55->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e55->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e55->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e55->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e55->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e55->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e55->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e55->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v55 = e55->__av;
          { //slice
            const HASH_RES_t h27 = CENSUS_mapkey0_idxfn::hash(se3870.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i56 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n56 = &(i56->buckets_[h27 % i56->size_]);
            CENSUS_entry* e56;
            do if ((e56 = n56->obj) && h27 == n56->hash && CENSUS_mapkey0_idxfn::equals(se3870, *e56)) {
              long census_population = e56->CENSUS_POPULATION;
              long census_white = e56->CENSUS_WHITE;
              long census_asian = e56->CENSUS_ASIAN;
              long census_pacific = e56->CENSUS_PACIFIC;
              long census_blackafrican = e56->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e56->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e56->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e56->CENSUS_HOUSEUNITS;
              long census_families = e56->CENSUS_FAMILIES;
              long census_households = e56->CENSUS_HOUSEHOLDS;
              long census_husbwife = e56->CENSUS_HUSBWIFE;
              long census_males = e56->CENSUS_MALES;
              long census_females = e56->CENSUS_FEMALES;
              long census_householdschildren = e56->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e56->CENSUS_HISPANIC;
              long v56 = e56->__av;
              __SQL_SUM_AGGREGATE_30INVENTORY1.addOrDelOnZero(se3869.modify(__sql_sum_aggregate_30inventoryinventory_locn), (v55 * (v56 * census_males)));
            } while ((n56 = n56->nxt));
          }
          e55 = e55->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_31 = 0.0;
      __SQL_SUM_AGGREGATE_31INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e57 = LOCATION.head;
        while (e57) {
          long __sql_sum_aggregate_31inventoryinventory_locn = e57->LOCATION_LOCN;
          long location_zip = e57->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e57->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e57->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e57->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e57->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e57->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e57->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e57->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e57->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e57->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e57->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e57->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e57->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e57->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v57 = e57->__av;
          { //slice
            const HASH_RES_t h28 = CENSUS_mapkey0_idxfn::hash(se3873.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i58 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n58 = &(i58->buckets_[h28 % i58->size_]);
            CENSUS_entry* e58;
            do if ((e58 = n58->obj) && h28 == n58->hash && CENSUS_mapkey0_idxfn::equals(se3873, *e58)) {
              long census_population = e58->CENSUS_POPULATION;
              long census_white = e58->CENSUS_WHITE;
              long census_asian = e58->CENSUS_ASIAN;
              long census_pacific = e58->CENSUS_PACIFIC;
              long census_blackafrican = e58->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e58->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e58->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e58->CENSUS_HOUSEUNITS;
              long census_families = e58->CENSUS_FAMILIES;
              long census_households = e58->CENSUS_HOUSEHOLDS;
              long census_husbwife = e58->CENSUS_HUSBWIFE;
              long census_males = e58->CENSUS_MALES;
              long census_females = e58->CENSUS_FEMALES;
              long census_householdschildren = e58->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e58->CENSUS_HISPANIC;
              long v58 = e58->__av;
              __SQL_SUM_AGGREGATE_31INVENTORY1.addOrDelOnZero(se3872.modify(__sql_sum_aggregate_31inventoryinventory_locn), (v57 * (v58 * census_females)));
            } while ((n58 = n58->nxt));
          }
          e57 = e57->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_32 = 0.0;
      __SQL_SUM_AGGREGATE_32INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e59 = LOCATION.head;
        while (e59) {
          long __sql_sum_aggregate_32inventoryinventory_locn = e59->LOCATION_LOCN;
          long location_zip = e59->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e59->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e59->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e59->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e59->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e59->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e59->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e59->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e59->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e59->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e59->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e59->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e59->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e59->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v59 = e59->__av;
          { //slice
            const HASH_RES_t h29 = CENSUS_mapkey0_idxfn::hash(se3876.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i60 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n60 = &(i60->buckets_[h29 % i60->size_]);
            CENSUS_entry* e60;
            do if ((e60 = n60->obj) && h29 == n60->hash && CENSUS_mapkey0_idxfn::equals(se3876, *e60)) {
              long census_population = e60->CENSUS_POPULATION;
              long census_white = e60->CENSUS_WHITE;
              long census_asian = e60->CENSUS_ASIAN;
              long census_pacific = e60->CENSUS_PACIFIC;
              long census_blackafrican = e60->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e60->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e60->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e60->CENSUS_HOUSEUNITS;
              long census_families = e60->CENSUS_FAMILIES;
              long census_households = e60->CENSUS_HOUSEHOLDS;
              long census_husbwife = e60->CENSUS_HUSBWIFE;
              long census_males = e60->CENSUS_MALES;
              long census_females = e60->CENSUS_FEMALES;
              long census_householdschildren = e60->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e60->CENSUS_HISPANIC;
              long v60 = e60->__av;
              __SQL_SUM_AGGREGATE_32INVENTORY1.addOrDelOnZero(se3875.modify(__sql_sum_aggregate_32inventoryinventory_locn), (v59 * (v60 * census_householdschildren)));
            } while ((n60 = n60->nxt));
          }
          e59 = e59->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_33 = 0.0;
      __SQL_SUM_AGGREGATE_33INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e61 = LOCATION.head;
        while (e61) {
          long __sql_sum_aggregate_33inventoryinventory_locn = e61->LOCATION_LOCN;
          long location_zip = e61->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e61->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e61->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e61->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e61->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e61->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e61->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e61->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e61->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e61->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e61->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e61->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e61->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e61->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v61 = e61->__av;
          { //slice
            const HASH_RES_t h30 = CENSUS_mapkey0_idxfn::hash(se3879.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i62 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n62 = &(i62->buckets_[h30 % i62->size_]);
            CENSUS_entry* e62;
            do if ((e62 = n62->obj) && h30 == n62->hash && CENSUS_mapkey0_idxfn::equals(se3879, *e62)) {
              long census_population = e62->CENSUS_POPULATION;
              long census_white = e62->CENSUS_WHITE;
              long census_asian = e62->CENSUS_ASIAN;
              long census_pacific = e62->CENSUS_PACIFIC;
              long census_blackafrican = e62->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e62->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e62->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e62->CENSUS_HOUSEUNITS;
              long census_families = e62->CENSUS_FAMILIES;
              long census_households = e62->CENSUS_HOUSEHOLDS;
              long census_husbwife = e62->CENSUS_HUSBWIFE;
              long census_males = e62->CENSUS_MALES;
              long census_females = e62->CENSUS_FEMALES;
              long census_householdschildren = e62->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e62->CENSUS_HISPANIC;
              long v62 = e62->__av;
              __SQL_SUM_AGGREGATE_33INVENTORY1.addOrDelOnZero(se3878.modify(__sql_sum_aggregate_33inventoryinventory_locn), (v61 * (v62 * census_hispanic)));
            } while ((n62 = n62->nxt));
          }
          e61 = e61->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_34 = 0.0;
      __SQL_SUM_AGGREGATE_34INVENTORY2.clear();
      { //foreach
        ITEM_entry* e63 = ITEM.head;
        while (e63) {
          DOUBLE_TYPE __sql_sum_aggregate_34inventoryinventory_ksn = e63->ITEM_KSN;
          long item_subcategory = e63->ITEM_SUBCATEGORY;
          long item_category = e63->ITEM_CATEGORY;
          long item_categorycluster = e63->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e63->ITEM_PRIZE;
          long v63 = e63->__av;
          __SQL_SUM_AGGREGATE_34INVENTORY2.addOrDelOnZero(se3881.modify(__sql_sum_aggregate_34inventoryinventory_ksn), (v63 * item_subcategory));
          e63 = e63->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_35 = 0.0;
      __SQL_SUM_AGGREGATE_35INVENTORY2.clear();
      { //foreach
        ITEM_entry* e64 = ITEM.head;
        while (e64) {
          DOUBLE_TYPE __sql_sum_aggregate_35inventoryinventory_ksn = e64->ITEM_KSN;
          long item_subcategory = e64->ITEM_SUBCATEGORY;
          long item_category = e64->ITEM_CATEGORY;
          long item_categorycluster = e64->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e64->ITEM_PRIZE;
          long v64 = e64->__av;
          __SQL_SUM_AGGREGATE_35INVENTORY2.addOrDelOnZero(se3883.modify(__sql_sum_aggregate_35inventoryinventory_ksn), (v64 * item_category));
          e64 = e64->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_36 = 0.0;
      __SQL_SUM_AGGREGATE_36INVENTORY2.clear();
      { //foreach
        ITEM_entry* e65 = ITEM.head;
        while (e65) {
          DOUBLE_TYPE __sql_sum_aggregate_36inventoryinventory_ksn = e65->ITEM_KSN;
          long item_subcategory = e65->ITEM_SUBCATEGORY;
          long item_category = e65->ITEM_CATEGORY;
          long item_categorycluster = e65->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e65->ITEM_PRIZE;
          long v65 = e65->__av;
          __SQL_SUM_AGGREGATE_36INVENTORY2.addOrDelOnZero(se3885.modify(__sql_sum_aggregate_36inventoryinventory_ksn), (v65 * item_categorycluster));
          e65 = e65->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_37 = 0.0;
      __SQL_SUM_AGGREGATE_37INVENTORY2.clear();
      { //foreach
        ITEM_entry* e66 = ITEM.head;
        while (e66) {
          DOUBLE_TYPE __sql_sum_aggregate_37inventoryinventory_ksn = e66->ITEM_KSN;
          long item_subcategory = e66->ITEM_SUBCATEGORY;
          long item_category = e66->ITEM_CATEGORY;
          long item_categorycluster = e66->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e66->ITEM_PRIZE;
          long v66 = e66->__av;
          __SQL_SUM_AGGREGATE_37INVENTORY2.addOrDelOnZero(se3887.modify(__sql_sum_aggregate_37inventoryinventory_ksn), (v66 * item_prize));
          e66 = e66->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_38 = 0.0;
      __SQL_SUM_AGGREGATE_38INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e67 = WEATHER.head;
        while (e67) {
          long __sql_sum_aggregate_38inventoryinventory_locn = e67->WEATHER_LOCN;
          long __sql_sum_aggregate_38inventoryinventory_dateid = e67->WEATHER_DATEID;
          long weather_rain = e67->WEATHER_RAIN;
          long weather_snow = e67->WEATHER_SNOW;
          long weather_maxtemp = e67->WEATHER_MAXTEMP;
          long weather_mintemp = e67->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e67->WEATHER_MEANWIND;
          long weather_thunder = e67->WEATHER_THUNDER;
          long v67 = e67->__av;
          __SQL_SUM_AGGREGATE_38INVENTORY3.addOrDelOnZero(se3889.modify(__sql_sum_aggregate_38inventoryinventory_locn, __sql_sum_aggregate_38inventoryinventory_dateid), (v67 * weather_rain));
          e67 = e67->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_39 = 0.0;
      __SQL_SUM_AGGREGATE_39INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e68 = WEATHER.head;
        while (e68) {
          long __sql_sum_aggregate_39inventoryinventory_locn = e68->WEATHER_LOCN;
          long __sql_sum_aggregate_39inventoryinventory_dateid = e68->WEATHER_DATEID;
          long weather_rain = e68->WEATHER_RAIN;
          long weather_snow = e68->WEATHER_SNOW;
          long weather_maxtemp = e68->WEATHER_MAXTEMP;
          long weather_mintemp = e68->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e68->WEATHER_MEANWIND;
          long weather_thunder = e68->WEATHER_THUNDER;
          long v68 = e68->__av;
          __SQL_SUM_AGGREGATE_39INVENTORY3.addOrDelOnZero(se3891.modify(__sql_sum_aggregate_39inventoryinventory_locn, __sql_sum_aggregate_39inventoryinventory_dateid), (v68 * weather_snow));
          e68 = e68->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_40 = 0.0;
      __SQL_SUM_AGGREGATE_40INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e69 = WEATHER.head;
        while (e69) {
          long __sql_sum_aggregate_40inventoryinventory_locn = e69->WEATHER_LOCN;
          long __sql_sum_aggregate_40inventoryinventory_dateid = e69->WEATHER_DATEID;
          long weather_rain = e69->WEATHER_RAIN;
          long weather_snow = e69->WEATHER_SNOW;
          long weather_maxtemp = e69->WEATHER_MAXTEMP;
          long weather_mintemp = e69->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e69->WEATHER_MEANWIND;
          long weather_thunder = e69->WEATHER_THUNDER;
          long v69 = e69->__av;
          __SQL_SUM_AGGREGATE_40INVENTORY3.addOrDelOnZero(se3893.modify(__sql_sum_aggregate_40inventoryinventory_locn, __sql_sum_aggregate_40inventoryinventory_dateid), (v69 * weather_maxtemp));
          e69 = e69->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_41 = 0.0;
      __SQL_SUM_AGGREGATE_41INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e70 = WEATHER.head;
        while (e70) {
          long __sql_sum_aggregate_41inventoryinventory_locn = e70->WEATHER_LOCN;
          long __sql_sum_aggregate_41inventoryinventory_dateid = e70->WEATHER_DATEID;
          long weather_rain = e70->WEATHER_RAIN;
          long weather_snow = e70->WEATHER_SNOW;
          long weather_maxtemp = e70->WEATHER_MAXTEMP;
          long weather_mintemp = e70->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e70->WEATHER_MEANWIND;
          long weather_thunder = e70->WEATHER_THUNDER;
          long v70 = e70->__av;
          __SQL_SUM_AGGREGATE_41INVENTORY3.addOrDelOnZero(se3895.modify(__sql_sum_aggregate_41inventoryinventory_locn, __sql_sum_aggregate_41inventoryinventory_dateid), (v70 * weather_mintemp));
          e70 = e70->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_42 = 0.0;
      __SQL_SUM_AGGREGATE_42INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e71 = WEATHER.head;
        while (e71) {
          long __sql_sum_aggregate_42inventoryinventory_locn = e71->WEATHER_LOCN;
          long __sql_sum_aggregate_42inventoryinventory_dateid = e71->WEATHER_DATEID;
          long weather_rain = e71->WEATHER_RAIN;
          long weather_snow = e71->WEATHER_SNOW;
          long weather_maxtemp = e71->WEATHER_MAXTEMP;
          long weather_mintemp = e71->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e71->WEATHER_MEANWIND;
          long weather_thunder = e71->WEATHER_THUNDER;
          long v71 = e71->__av;
          __SQL_SUM_AGGREGATE_42INVENTORY3.addOrDelOnZero(se3897.modify(__sql_sum_aggregate_42inventoryinventory_locn, __sql_sum_aggregate_42inventoryinventory_dateid), (v71 * weather_meanwind));
          e71 = e71->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_43 = 0.0;
      __SQL_SUM_AGGREGATE_43INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e72 = WEATHER.head;
        while (e72) {
          long __sql_sum_aggregate_43inventoryinventory_locn = e72->WEATHER_LOCN;
          long __sql_sum_aggregate_43inventoryinventory_dateid = e72->WEATHER_DATEID;
          long weather_rain = e72->WEATHER_RAIN;
          long weather_snow = e72->WEATHER_SNOW;
          long weather_maxtemp = e72->WEATHER_MAXTEMP;
          long weather_mintemp = e72->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e72->WEATHER_MEANWIND;
          long weather_thunder = e72->WEATHER_THUNDER;
          long v72 = e72->__av;
          __SQL_SUM_AGGREGATE_43INVENTORY3.addOrDelOnZero(se3899.modify(__sql_sum_aggregate_43inventoryinventory_locn, __sql_sum_aggregate_43inventoryinventory_dateid), (v72 * weather_thunder));
          e72 = e72->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_46 = 0.0;
      __SQL_SUM_AGGREGATE_48 = 0.0;
      __SQL_SUM_AGGREGATE_49 = 0.0;
      __SQL_SUM_AGGREGATE_50 = 0.0;
      __SQL_SUM_AGGREGATE_51 = 0.0;
      __SQL_SUM_AGGREGATE_52 = 0.0;
      __SQL_SUM_AGGREGATE_53 = 0.0;
      __SQL_SUM_AGGREGATE_54 = 0.0;
      __SQL_SUM_AGGREGATE_55 = 0.0;
      __SQL_SUM_AGGREGATE_56 = 0.0;
      __SQL_SUM_AGGREGATE_57 = 0.0;
      __SQL_SUM_AGGREGATE_58 = 0.0;
      __SQL_SUM_AGGREGATE_59 = 0.0;
      __SQL_SUM_AGGREGATE_60 = 0.0;
      __SQL_SUM_AGGREGATE_66 = 0.0;
      __SQL_SUM_AGGREGATE_79 = 0.0;
      __SQL_SUM_AGGREGATE_84 = 0.0;
      __SQL_SUM_AGGREGATE_87 = 0.0;
      __SQL_SUM_AGGREGATE_89 = 0.0;
      __SQL_SUM_AGGREGATE_90 = 0.0;
      __SQL_SUM_AGGREGATE_91 = 0.0;
      __SQL_SUM_AGGREGATE_92 = 0.0;
      __SQL_SUM_AGGREGATE_93 = 0.0;
      __SQL_SUM_AGGREGATE_94 = 0.0;
      __SQL_SUM_AGGREGATE_95 = 0.0;
      __SQL_SUM_AGGREGATE_96 = 0.0;
      __SQL_SUM_AGGREGATE_97 = 0.0;
      __SQL_SUM_AGGREGATE_98 = 0.0;
      __SQL_SUM_AGGREGATE_99 = 0.0;
      __SQL_SUM_AGGREGATE_100 = 0.0;
      __SQL_SUM_AGGREGATE_101 = 0.0;
      __SQL_SUM_AGGREGATE_107 = 0.0;
      __SQL_SUM_AGGREGATE_120 = 0.0;
      __SQL_SUM_AGGREGATE_121INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e73 = WEATHER.head;
        while (e73) {
          long __sql_sum_aggregate_121inventoryinventory_locn = e73->WEATHER_LOCN;
          long __sql_sum_aggregate_121inventoryinventory_dateid = e73->WEATHER_DATEID;
          long weather_rain = e73->WEATHER_RAIN;
          long weather_snow = e73->WEATHER_SNOW;
          long weather_maxtemp = e73->WEATHER_MAXTEMP;
          long weather_mintemp = e73->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e73->WEATHER_MEANWIND;
          long weather_thunder = e73->WEATHER_THUNDER;
          long v73 = e73->__av;
          __SQL_SUM_AGGREGATE_121INVENTORY3.addOrDelOnZero(se3933.modify(__sql_sum_aggregate_121inventoryinventory_locn, __sql_sum_aggregate_121inventoryinventory_dateid), (v73 * (__sql_sum_aggregate_121inventoryinventory_dateid * weather_rain)));
          e73 = e73->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_122INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e74 = WEATHER.head;
        while (e74) {
          long __sql_sum_aggregate_122inventoryinventory_locn = e74->WEATHER_LOCN;
          long __sql_sum_aggregate_122inventoryinventory_dateid = e74->WEATHER_DATEID;
          long weather_rain = e74->WEATHER_RAIN;
          long weather_snow = e74->WEATHER_SNOW;
          long weather_maxtemp = e74->WEATHER_MAXTEMP;
          long weather_mintemp = e74->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e74->WEATHER_MEANWIND;
          long weather_thunder = e74->WEATHER_THUNDER;
          long v74 = e74->__av;
          __SQL_SUM_AGGREGATE_122INVENTORY3.addOrDelOnZero(se3934.modify(__sql_sum_aggregate_122inventoryinventory_locn, __sql_sum_aggregate_122inventoryinventory_dateid), (v74 * (__sql_sum_aggregate_122inventoryinventory_dateid * weather_snow)));
          e74 = e74->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_123INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e75 = WEATHER.head;
        while (e75) {
          long __sql_sum_aggregate_123inventoryinventory_locn = e75->WEATHER_LOCN;
          long __sql_sum_aggregate_123inventoryinventory_dateid = e75->WEATHER_DATEID;
          long weather_rain = e75->WEATHER_RAIN;
          long weather_snow = e75->WEATHER_SNOW;
          long weather_maxtemp = e75->WEATHER_MAXTEMP;
          long weather_mintemp = e75->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e75->WEATHER_MEANWIND;
          long weather_thunder = e75->WEATHER_THUNDER;
          long v75 = e75->__av;
          __SQL_SUM_AGGREGATE_123INVENTORY3.addOrDelOnZero(se3935.modify(__sql_sum_aggregate_123inventoryinventory_locn, __sql_sum_aggregate_123inventoryinventory_dateid), (v75 * (__sql_sum_aggregate_123inventoryinventory_dateid * weather_maxtemp)));
          e75 = e75->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_124INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e76 = WEATHER.head;
        while (e76) {
          long __sql_sum_aggregate_124inventoryinventory_locn = e76->WEATHER_LOCN;
          long __sql_sum_aggregate_124inventoryinventory_dateid = e76->WEATHER_DATEID;
          long weather_rain = e76->WEATHER_RAIN;
          long weather_snow = e76->WEATHER_SNOW;
          long weather_maxtemp = e76->WEATHER_MAXTEMP;
          long weather_mintemp = e76->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e76->WEATHER_MEANWIND;
          long weather_thunder = e76->WEATHER_THUNDER;
          long v76 = e76->__av;
          __SQL_SUM_AGGREGATE_124INVENTORY3.addOrDelOnZero(se3936.modify(__sql_sum_aggregate_124inventoryinventory_locn, __sql_sum_aggregate_124inventoryinventory_dateid), (v76 * (__sql_sum_aggregate_124inventoryinventory_dateid * weather_mintemp)));
          e76 = e76->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_125 = 0.0;
      __SQL_SUM_AGGREGATE_125INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e77 = WEATHER.head;
        while (e77) {
          long __sql_sum_aggregate_125inventoryinventory_locn = e77->WEATHER_LOCN;
          long __sql_sum_aggregate_125inventoryinventory_dateid = e77->WEATHER_DATEID;
          long weather_rain = e77->WEATHER_RAIN;
          long weather_snow = e77->WEATHER_SNOW;
          long weather_maxtemp = e77->WEATHER_MAXTEMP;
          long weather_mintemp = e77->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e77->WEATHER_MEANWIND;
          long weather_thunder = e77->WEATHER_THUNDER;
          long v77 = e77->__av;
          __SQL_SUM_AGGREGATE_125INVENTORY3.addOrDelOnZero(se3938.modify(__sql_sum_aggregate_125inventoryinventory_locn, __sql_sum_aggregate_125inventoryinventory_dateid), (v77 * (__sql_sum_aggregate_125inventoryinventory_dateid * weather_meanwind)));
          e77 = e77->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_126INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e78 = WEATHER.head;
        while (e78) {
          long __sql_sum_aggregate_126inventoryinventory_locn = e78->WEATHER_LOCN;
          long __sql_sum_aggregate_126inventoryinventory_dateid = e78->WEATHER_DATEID;
          long weather_rain = e78->WEATHER_RAIN;
          long weather_snow = e78->WEATHER_SNOW;
          long weather_maxtemp = e78->WEATHER_MAXTEMP;
          long weather_mintemp = e78->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e78->WEATHER_MEANWIND;
          long weather_thunder = e78->WEATHER_THUNDER;
          long v78 = e78->__av;
          __SQL_SUM_AGGREGATE_126INVENTORY3.addOrDelOnZero(se3939.modify(__sql_sum_aggregate_126inventoryinventory_locn, __sql_sum_aggregate_126inventoryinventory_dateid), (v78 * (__sql_sum_aggregate_126inventoryinventory_dateid * weather_thunder)));
          e78 = e78->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_127 = 0.0;
      __SQL_SUM_AGGREGATE_128 = 0.0;
      __SQL_SUM_AGGREGATE_129 = 0.0;
      __SQL_SUM_AGGREGATE_130 = 0.0;
      __SQL_SUM_AGGREGATE_131 = 0.0;
      __SQL_SUM_AGGREGATE_132 = 0.0;
      __SQL_SUM_AGGREGATE_133 = 0.0;
      __SQL_SUM_AGGREGATE_134 = 0.0;
      __SQL_SUM_AGGREGATE_135 = 0.0;
      __SQL_SUM_AGGREGATE_136 = 0.0;
      __SQL_SUM_AGGREGATE_137 = 0.0;
      __SQL_SUM_AGGREGATE_138 = 0.0;
      __SQL_SUM_AGGREGATE_139 = 0.0;
      __SQL_SUM_AGGREGATE_140 = 0.0;
      __SQL_SUM_AGGREGATE_141 = 0.0;
      __SQL_SUM_AGGREGATE_142 = 0.0;
      __SQL_SUM_AGGREGATE_143 = 0.0;
      __SQL_SUM_AGGREGATE_144 = 0.0;
      __SQL_SUM_AGGREGATE_145 = 0.0;
      __SQL_SUM_AGGREGATE_146 = 0.0;
      __SQL_SUM_AGGREGATE_147 = 0.0;
      __SQL_SUM_AGGREGATE_148 = 0.0;
      __SQL_SUM_AGGREGATE_149 = 0.0;
      __SQL_SUM_AGGREGATE_150 = 0.0;
      __SQL_SUM_AGGREGATE_151 = 0.0;
      __SQL_SUM_AGGREGATE_152 = 0.0;
      __SQL_SUM_AGGREGATE_153 = 0.0;
      __SQL_SUM_AGGREGATE_154 = 0.0;
      __SQL_SUM_AGGREGATE_155 = 0.0;
      __SQL_SUM_AGGREGATE_156 = 0.0;
      __SQL_SUM_AGGREGATE_157 = 0.0;
      __SQL_SUM_AGGREGATE_157INVENTORY2.clear();
      { //foreach
        ITEM_entry* e79 = ITEM.head;
        while (e79) {
          DOUBLE_TYPE __sql_sum_aggregate_157inventoryinventory_ksn = e79->ITEM_KSN;
          long item_subcategory = e79->ITEM_SUBCATEGORY;
          long item_category = e79->ITEM_CATEGORY;
          long item_categorycluster = e79->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e79->ITEM_PRIZE;
          long v79 = e79->__av;
          __SQL_SUM_AGGREGATE_157INVENTORY2.addOrDelOnZero(se3971.modify(__sql_sum_aggregate_157inventoryinventory_ksn), (v79 * (__sql_sum_aggregate_157inventoryinventory_ksn * item_subcategory)));
          e79 = e79->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_158 = 0.0;
      __SQL_SUM_AGGREGATE_158INVENTORY2.clear();
      { //foreach
        ITEM_entry* e80 = ITEM.head;
        while (e80) {
          DOUBLE_TYPE __sql_sum_aggregate_158inventoryinventory_ksn = e80->ITEM_KSN;
          long item_subcategory = e80->ITEM_SUBCATEGORY;
          long item_category = e80->ITEM_CATEGORY;
          long item_categorycluster = e80->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e80->ITEM_PRIZE;
          long v80 = e80->__av;
          __SQL_SUM_AGGREGATE_158INVENTORY2.addOrDelOnZero(se3973.modify(__sql_sum_aggregate_158inventoryinventory_ksn), (v80 * (__sql_sum_aggregate_158inventoryinventory_ksn * item_category)));
          e80 = e80->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_159 = 0.0;
      __SQL_SUM_AGGREGATE_159INVENTORY2.clear();
      { //foreach
        ITEM_entry* e81 = ITEM.head;
        while (e81) {
          DOUBLE_TYPE __sql_sum_aggregate_159inventoryinventory_ksn = e81->ITEM_KSN;
          long item_subcategory = e81->ITEM_SUBCATEGORY;
          long item_category = e81->ITEM_CATEGORY;
          long item_categorycluster = e81->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e81->ITEM_PRIZE;
          long v81 = e81->__av;
          __SQL_SUM_AGGREGATE_159INVENTORY2.addOrDelOnZero(se3975.modify(__sql_sum_aggregate_159inventoryinventory_ksn), (v81 * (__sql_sum_aggregate_159inventoryinventory_ksn * item_categorycluster)));
          e81 = e81->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_160 = 0.0;
      __SQL_SUM_AGGREGATE_160INVENTORY2.clear();
      { //foreach
        ITEM_entry* e82 = ITEM.head;
        while (e82) {
          DOUBLE_TYPE __sql_sum_aggregate_160inventoryinventory_ksn = e82->ITEM_KSN;
          long item_subcategory = e82->ITEM_SUBCATEGORY;
          long item_category = e82->ITEM_CATEGORY;
          long item_categorycluster = e82->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e82->ITEM_PRIZE;
          long v82 = e82->__av;
          __SQL_SUM_AGGREGATE_160INVENTORY2.addOrDelOnZero(se3977.modify(__sql_sum_aggregate_160inventoryinventory_ksn), (v82 * (__sql_sum_aggregate_160inventoryinventory_ksn * item_prize)));
          e82 = e82->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_161 = 0.0;
      __SQL_SUM_AGGREGATE_162 = 0.0;
      __SQL_SUM_AGGREGATE_163 = 0.0;
      __SQL_SUM_AGGREGATE_164 = 0.0;
      __SQL_SUM_AGGREGATE_165 = 0.0;
      __SQL_SUM_AGGREGATE_166 = 0.0;
      __SQL_SUM_AGGREGATE_167INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e83 = LOCATION.head;
        while (e83) {
          long __sql_sum_aggregate_167inventoryinventory_locn = e83->LOCATION_LOCN;
          long location_zip = e83->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e83->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e83->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e83->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e83->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e83->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e83->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e83->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e83->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e83->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e83->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e83->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e83->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e83->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v83 = e83->__av;
          { //slice
            const HASH_RES_t h31 = CENSUS_mapkey0_idxfn::hash(se3985.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i84 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n84 = &(i84->buckets_[h31 % i84->size_]);
            CENSUS_entry* e84;
            do if ((e84 = n84->obj) && h31 == n84->hash && CENSUS_mapkey0_idxfn::equals(se3985, *e84)) {
              long census_population = e84->CENSUS_POPULATION;
              long census_white = e84->CENSUS_WHITE;
              long census_asian = e84->CENSUS_ASIAN;
              long census_pacific = e84->CENSUS_PACIFIC;
              long census_blackafrican = e84->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e84->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e84->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e84->CENSUS_HOUSEUNITS;
              long census_families = e84->CENSUS_FAMILIES;
              long census_households = e84->CENSUS_HOUSEHOLDS;
              long census_husbwife = e84->CENSUS_HUSBWIFE;
              long census_males = e84->CENSUS_MALES;
              long census_females = e84->CENSUS_FEMALES;
              long census_householdschildren = e84->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e84->CENSUS_HISPANIC;
              long v84 = e84->__av;
              __SQL_SUM_AGGREGATE_167INVENTORY1.addOrDelOnZero(se3984.modify(__sql_sum_aggregate_167inventoryinventory_locn), (v83 * (v84 * (location_zip * location_zip))));
            } while ((n84 = n84->nxt));
          }
          e83 = e83->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_168 = 0.0;
      __SQL_SUM_AGGREGATE_168INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e85 = LOCATION.head;
        while (e85) {
          long __sql_sum_aggregate_168inventoryinventory_locn = e85->LOCATION_LOCN;
          long location_zip = e85->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e85->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e85->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e85->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e85->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e85->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e85->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e85->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e85->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e85->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e85->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e85->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e85->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e85->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v85 = e85->__av;
          { //slice
            const HASH_RES_t h32 = CENSUS_mapkey0_idxfn::hash(se3988.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i86 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n86 = &(i86->buckets_[h32 % i86->size_]);
            CENSUS_entry* e86;
            do if ((e86 = n86->obj) && h32 == n86->hash && CENSUS_mapkey0_idxfn::equals(se3988, *e86)) {
              long census_population = e86->CENSUS_POPULATION;
              long census_white = e86->CENSUS_WHITE;
              long census_asian = e86->CENSUS_ASIAN;
              long census_pacific = e86->CENSUS_PACIFIC;
              long census_blackafrican = e86->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e86->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e86->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e86->CENSUS_HOUSEUNITS;
              long census_families = e86->CENSUS_FAMILIES;
              long census_households = e86->CENSUS_HOUSEHOLDS;
              long census_husbwife = e86->CENSUS_HUSBWIFE;
              long census_males = e86->CENSUS_MALES;
              long census_females = e86->CENSUS_FEMALES;
              long census_householdschildren = e86->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e86->CENSUS_HISPANIC;
              long v86 = e86->__av;
              __SQL_SUM_AGGREGATE_168INVENTORY1.addOrDelOnZero(se3987.modify(__sql_sum_aggregate_168inventoryinventory_locn), (v85 * (v86 * (location_zip * location_rgn_cd))));
            } while ((n86 = n86->nxt));
          }
          e85 = e85->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_169 = 0.0;
      __SQL_SUM_AGGREGATE_169INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e87 = LOCATION.head;
        while (e87) {
          long __sql_sum_aggregate_169inventoryinventory_locn = e87->LOCATION_LOCN;
          long location_zip = e87->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e87->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e87->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e87->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e87->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e87->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e87->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e87->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e87->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e87->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e87->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e87->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e87->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e87->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v87 = e87->__av;
          { //slice
            const HASH_RES_t h33 = CENSUS_mapkey0_idxfn::hash(se3991.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i88 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n88 = &(i88->buckets_[h33 % i88->size_]);
            CENSUS_entry* e88;
            do if ((e88 = n88->obj) && h33 == n88->hash && CENSUS_mapkey0_idxfn::equals(se3991, *e88)) {
              long census_population = e88->CENSUS_POPULATION;
              long census_white = e88->CENSUS_WHITE;
              long census_asian = e88->CENSUS_ASIAN;
              long census_pacific = e88->CENSUS_PACIFIC;
              long census_blackafrican = e88->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e88->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e88->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e88->CENSUS_HOUSEUNITS;
              long census_families = e88->CENSUS_FAMILIES;
              long census_households = e88->CENSUS_HOUSEHOLDS;
              long census_husbwife = e88->CENSUS_HUSBWIFE;
              long census_males = e88->CENSUS_MALES;
              long census_females = e88->CENSUS_FEMALES;
              long census_householdschildren = e88->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e88->CENSUS_HISPANIC;
              long v88 = e88->__av;
              __SQL_SUM_AGGREGATE_169INVENTORY1.addOrDelOnZero(se3990.modify(__sql_sum_aggregate_169inventoryinventory_locn), (v87 * (v88 * (location_zip * location_clim_zn_nbr))));
            } while ((n88 = n88->nxt));
          }
          e87 = e87->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_170 = 0.0;
      __SQL_SUM_AGGREGATE_170INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e89 = LOCATION.head;
        while (e89) {
          long __sql_sum_aggregate_170inventoryinventory_locn = e89->LOCATION_LOCN;
          long location_zip = e89->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e89->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e89->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e89->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e89->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e89->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e89->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e89->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e89->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e89->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e89->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e89->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e89->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e89->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v89 = e89->__av;
          { //slice
            const HASH_RES_t h34 = CENSUS_mapkey0_idxfn::hash(se3994.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i90 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n90 = &(i90->buckets_[h34 % i90->size_]);
            CENSUS_entry* e90;
            do if ((e90 = n90->obj) && h34 == n90->hash && CENSUS_mapkey0_idxfn::equals(se3994, *e90)) {
              long census_population = e90->CENSUS_POPULATION;
              long census_white = e90->CENSUS_WHITE;
              long census_asian = e90->CENSUS_ASIAN;
              long census_pacific = e90->CENSUS_PACIFIC;
              long census_blackafrican = e90->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e90->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e90->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e90->CENSUS_HOUSEUNITS;
              long census_families = e90->CENSUS_FAMILIES;
              long census_households = e90->CENSUS_HOUSEHOLDS;
              long census_husbwife = e90->CENSUS_HUSBWIFE;
              long census_males = e90->CENSUS_MALES;
              long census_females = e90->CENSUS_FEMALES;
              long census_householdschildren = e90->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e90->CENSUS_HISPANIC;
              long v90 = e90->__av;
              __SQL_SUM_AGGREGATE_170INVENTORY1.addOrDelOnZero(se3993.modify(__sql_sum_aggregate_170inventoryinventory_locn), (v89 * (v90 * (location_zip * location_tot_area_sq_ft))));
            } while ((n90 = n90->nxt));
          }
          e89 = e89->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_171 = 0.0;
      __SQL_SUM_AGGREGATE_171INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e91 = LOCATION.head;
        while (e91) {
          long __sql_sum_aggregate_171inventoryinventory_locn = e91->LOCATION_LOCN;
          long location_zip = e91->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e91->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e91->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e91->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e91->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e91->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e91->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e91->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e91->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e91->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e91->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e91->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e91->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e91->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v91 = e91->__av;
          { //slice
            const HASH_RES_t h35 = CENSUS_mapkey0_idxfn::hash(se3997.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i92 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n92 = &(i92->buckets_[h35 % i92->size_]);
            CENSUS_entry* e92;
            do if ((e92 = n92->obj) && h35 == n92->hash && CENSUS_mapkey0_idxfn::equals(se3997, *e92)) {
              long census_population = e92->CENSUS_POPULATION;
              long census_white = e92->CENSUS_WHITE;
              long census_asian = e92->CENSUS_ASIAN;
              long census_pacific = e92->CENSUS_PACIFIC;
              long census_blackafrican = e92->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e92->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e92->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e92->CENSUS_HOUSEUNITS;
              long census_families = e92->CENSUS_FAMILIES;
              long census_households = e92->CENSUS_HOUSEHOLDS;
              long census_husbwife = e92->CENSUS_HUSBWIFE;
              long census_males = e92->CENSUS_MALES;
              long census_females = e92->CENSUS_FEMALES;
              long census_householdschildren = e92->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e92->CENSUS_HISPANIC;
              long v92 = e92->__av;
              __SQL_SUM_AGGREGATE_171INVENTORY1.addOrDelOnZero(se3996.modify(__sql_sum_aggregate_171inventoryinventory_locn), (v91 * (v92 * (location_zip * location_sell_area_sq_ft))));
            } while ((n92 = n92->nxt));
          }
          e91 = e91->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_172 = 0.0;
      __SQL_SUM_AGGREGATE_172INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e93 = LOCATION.head;
        while (e93) {
          long __sql_sum_aggregate_172inventoryinventory_locn = e93->LOCATION_LOCN;
          long location_zip = e93->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e93->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e93->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e93->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e93->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e93->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e93->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e93->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e93->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e93->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e93->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e93->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e93->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e93->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v93 = e93->__av;
          { //slice
            const HASH_RES_t h36 = CENSUS_mapkey0_idxfn::hash(se4000.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i94 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n94 = &(i94->buckets_[h36 % i94->size_]);
            CENSUS_entry* e94;
            do if ((e94 = n94->obj) && h36 == n94->hash && CENSUS_mapkey0_idxfn::equals(se4000, *e94)) {
              long census_population = e94->CENSUS_POPULATION;
              long census_white = e94->CENSUS_WHITE;
              long census_asian = e94->CENSUS_ASIAN;
              long census_pacific = e94->CENSUS_PACIFIC;
              long census_blackafrican = e94->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e94->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e94->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e94->CENSUS_HOUSEUNITS;
              long census_families = e94->CENSUS_FAMILIES;
              long census_households = e94->CENSUS_HOUSEHOLDS;
              long census_husbwife = e94->CENSUS_HUSBWIFE;
              long census_males = e94->CENSUS_MALES;
              long census_females = e94->CENSUS_FEMALES;
              long census_householdschildren = e94->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e94->CENSUS_HISPANIC;
              long v94 = e94->__av;
              __SQL_SUM_AGGREGATE_172INVENTORY1.addOrDelOnZero(se3999.modify(__sql_sum_aggregate_172inventoryinventory_locn), (v93 * (v94 * (location_zip * location_avghhi))));
            } while ((n94 = n94->nxt));
          }
          e93 = e93->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_173 = 0.0;
      __SQL_SUM_AGGREGATE_173INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e95 = LOCATION.head;
        while (e95) {
          long __sql_sum_aggregate_173inventoryinventory_locn = e95->LOCATION_LOCN;
          long location_zip = e95->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e95->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e95->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e95->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e95->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e95->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e95->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e95->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e95->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e95->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e95->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e95->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e95->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e95->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v95 = e95->__av;
          { //slice
            const HASH_RES_t h37 = CENSUS_mapkey0_idxfn::hash(se4003.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i96 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n96 = &(i96->buckets_[h37 % i96->size_]);
            CENSUS_entry* e96;
            do if ((e96 = n96->obj) && h37 == n96->hash && CENSUS_mapkey0_idxfn::equals(se4003, *e96)) {
              long census_population = e96->CENSUS_POPULATION;
              long census_white = e96->CENSUS_WHITE;
              long census_asian = e96->CENSUS_ASIAN;
              long census_pacific = e96->CENSUS_PACIFIC;
              long census_blackafrican = e96->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e96->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e96->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e96->CENSUS_HOUSEUNITS;
              long census_families = e96->CENSUS_FAMILIES;
              long census_households = e96->CENSUS_HOUSEHOLDS;
              long census_husbwife = e96->CENSUS_HUSBWIFE;
              long census_males = e96->CENSUS_MALES;
              long census_females = e96->CENSUS_FEMALES;
              long census_householdschildren = e96->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e96->CENSUS_HISPANIC;
              long v96 = e96->__av;
              __SQL_SUM_AGGREGATE_173INVENTORY1.addOrDelOnZero(se4002.modify(__sql_sum_aggregate_173inventoryinventory_locn), (v95 * (v96 * (location_zip * location_supertargetdistance))));
            } while ((n96 = n96->nxt));
          }
          e95 = e95->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_174 = 0.0;
      __SQL_SUM_AGGREGATE_174INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e97 = LOCATION.head;
        while (e97) {
          long __sql_sum_aggregate_174inventoryinventory_locn = e97->LOCATION_LOCN;
          long location_zip = e97->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e97->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e97->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e97->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e97->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e97->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e97->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e97->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e97->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e97->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e97->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e97->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e97->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e97->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v97 = e97->__av;
          { //slice
            const HASH_RES_t h38 = CENSUS_mapkey0_idxfn::hash(se4006.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i98 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n98 = &(i98->buckets_[h38 % i98->size_]);
            CENSUS_entry* e98;
            do if ((e98 = n98->obj) && h38 == n98->hash && CENSUS_mapkey0_idxfn::equals(se4006, *e98)) {
              long census_population = e98->CENSUS_POPULATION;
              long census_white = e98->CENSUS_WHITE;
              long census_asian = e98->CENSUS_ASIAN;
              long census_pacific = e98->CENSUS_PACIFIC;
              long census_blackafrican = e98->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e98->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e98->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e98->CENSUS_HOUSEUNITS;
              long census_families = e98->CENSUS_FAMILIES;
              long census_households = e98->CENSUS_HOUSEHOLDS;
              long census_husbwife = e98->CENSUS_HUSBWIFE;
              long census_males = e98->CENSUS_MALES;
              long census_females = e98->CENSUS_FEMALES;
              long census_householdschildren = e98->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e98->CENSUS_HISPANIC;
              long v98 = e98->__av;
              __SQL_SUM_AGGREGATE_174INVENTORY1.addOrDelOnZero(se4005.modify(__sql_sum_aggregate_174inventoryinventory_locn), (v97 * (v98 * (location_zip * location_supertargetdrivetime))));
            } while ((n98 = n98->nxt));
          }
          e97 = e97->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_175 = 0.0;
      __SQL_SUM_AGGREGATE_175INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e99 = LOCATION.head;
        while (e99) {
          long __sql_sum_aggregate_175inventoryinventory_locn = e99->LOCATION_LOCN;
          long location_zip = e99->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e99->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e99->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e99->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e99->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e99->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e99->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e99->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e99->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e99->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e99->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e99->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e99->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e99->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v99 = e99->__av;
          { //slice
            const HASH_RES_t h39 = CENSUS_mapkey0_idxfn::hash(se4009.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i100 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n100 = &(i100->buckets_[h39 % i100->size_]);
            CENSUS_entry* e100;
            do if ((e100 = n100->obj) && h39 == n100->hash && CENSUS_mapkey0_idxfn::equals(se4009, *e100)) {
              long census_population = e100->CENSUS_POPULATION;
              long census_white = e100->CENSUS_WHITE;
              long census_asian = e100->CENSUS_ASIAN;
              long census_pacific = e100->CENSUS_PACIFIC;
              long census_blackafrican = e100->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e100->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e100->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e100->CENSUS_HOUSEUNITS;
              long census_families = e100->CENSUS_FAMILIES;
              long census_households = e100->CENSUS_HOUSEHOLDS;
              long census_husbwife = e100->CENSUS_HUSBWIFE;
              long census_males = e100->CENSUS_MALES;
              long census_females = e100->CENSUS_FEMALES;
              long census_householdschildren = e100->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e100->CENSUS_HISPANIC;
              long v100 = e100->__av;
              __SQL_SUM_AGGREGATE_175INVENTORY1.addOrDelOnZero(se4008.modify(__sql_sum_aggregate_175inventoryinventory_locn), (v99 * (v100 * (location_zip * location_targetdistance))));
            } while ((n100 = n100->nxt));
          }
          e99 = e99->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_176 = 0.0;
      __SQL_SUM_AGGREGATE_176INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e101 = LOCATION.head;
        while (e101) {
          long __sql_sum_aggregate_176inventoryinventory_locn = e101->LOCATION_LOCN;
          long location_zip = e101->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e101->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e101->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e101->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e101->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e101->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e101->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e101->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e101->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e101->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e101->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e101->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e101->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e101->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v101 = e101->__av;
          { //slice
            const HASH_RES_t h40 = CENSUS_mapkey0_idxfn::hash(se4012.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i102 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n102 = &(i102->buckets_[h40 % i102->size_]);
            CENSUS_entry* e102;
            do if ((e102 = n102->obj) && h40 == n102->hash && CENSUS_mapkey0_idxfn::equals(se4012, *e102)) {
              long census_population = e102->CENSUS_POPULATION;
              long census_white = e102->CENSUS_WHITE;
              long census_asian = e102->CENSUS_ASIAN;
              long census_pacific = e102->CENSUS_PACIFIC;
              long census_blackafrican = e102->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e102->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e102->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e102->CENSUS_HOUSEUNITS;
              long census_families = e102->CENSUS_FAMILIES;
              long census_households = e102->CENSUS_HOUSEHOLDS;
              long census_husbwife = e102->CENSUS_HUSBWIFE;
              long census_males = e102->CENSUS_MALES;
              long census_females = e102->CENSUS_FEMALES;
              long census_householdschildren = e102->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e102->CENSUS_HISPANIC;
              long v102 = e102->__av;
              __SQL_SUM_AGGREGATE_176INVENTORY1.addOrDelOnZero(se4011.modify(__sql_sum_aggregate_176inventoryinventory_locn), (v101 * (v102 * (location_zip * location_targetdrivetime))));
            } while ((n102 = n102->nxt));
          }
          e101 = e101->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_177 = 0.0;
      __SQL_SUM_AGGREGATE_177INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e103 = LOCATION.head;
        while (e103) {
          long __sql_sum_aggregate_177inventoryinventory_locn = e103->LOCATION_LOCN;
          long location_zip = e103->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e103->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e103->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e103->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e103->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e103->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e103->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e103->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e103->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e103->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e103->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e103->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e103->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e103->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v103 = e103->__av;
          { //slice
            const HASH_RES_t h41 = CENSUS_mapkey0_idxfn::hash(se4015.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i104 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n104 = &(i104->buckets_[h41 % i104->size_]);
            CENSUS_entry* e104;
            do if ((e104 = n104->obj) && h41 == n104->hash && CENSUS_mapkey0_idxfn::equals(se4015, *e104)) {
              long census_population = e104->CENSUS_POPULATION;
              long census_white = e104->CENSUS_WHITE;
              long census_asian = e104->CENSUS_ASIAN;
              long census_pacific = e104->CENSUS_PACIFIC;
              long census_blackafrican = e104->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e104->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e104->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e104->CENSUS_HOUSEUNITS;
              long census_families = e104->CENSUS_FAMILIES;
              long census_households = e104->CENSUS_HOUSEHOLDS;
              long census_husbwife = e104->CENSUS_HUSBWIFE;
              long census_males = e104->CENSUS_MALES;
              long census_females = e104->CENSUS_FEMALES;
              long census_householdschildren = e104->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e104->CENSUS_HISPANIC;
              long v104 = e104->__av;
              __SQL_SUM_AGGREGATE_177INVENTORY1.addOrDelOnZero(se4014.modify(__sql_sum_aggregate_177inventoryinventory_locn), (v103 * (v104 * (location_zip * location_walmartdistance))));
            } while ((n104 = n104->nxt));
          }
          e103 = e103->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_178 = 0.0;
      __SQL_SUM_AGGREGATE_178INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e105 = LOCATION.head;
        while (e105) {
          long __sql_sum_aggregate_178inventoryinventory_locn = e105->LOCATION_LOCN;
          long location_zip = e105->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e105->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e105->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e105->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e105->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e105->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e105->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e105->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e105->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e105->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e105->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e105->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e105->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e105->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v105 = e105->__av;
          { //slice
            const HASH_RES_t h42 = CENSUS_mapkey0_idxfn::hash(se4018.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i106 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n106 = &(i106->buckets_[h42 % i106->size_]);
            CENSUS_entry* e106;
            do if ((e106 = n106->obj) && h42 == n106->hash && CENSUS_mapkey0_idxfn::equals(se4018, *e106)) {
              long census_population = e106->CENSUS_POPULATION;
              long census_white = e106->CENSUS_WHITE;
              long census_asian = e106->CENSUS_ASIAN;
              long census_pacific = e106->CENSUS_PACIFIC;
              long census_blackafrican = e106->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e106->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e106->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e106->CENSUS_HOUSEUNITS;
              long census_families = e106->CENSUS_FAMILIES;
              long census_households = e106->CENSUS_HOUSEHOLDS;
              long census_husbwife = e106->CENSUS_HUSBWIFE;
              long census_males = e106->CENSUS_MALES;
              long census_females = e106->CENSUS_FEMALES;
              long census_householdschildren = e106->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e106->CENSUS_HISPANIC;
              long v106 = e106->__av;
              __SQL_SUM_AGGREGATE_178INVENTORY1.addOrDelOnZero(se4017.modify(__sql_sum_aggregate_178inventoryinventory_locn), (v105 * (v106 * (location_zip * location_walmartdrivetime))));
            } while ((n106 = n106->nxt));
          }
          e105 = e105->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_179 = 0.0;
      __SQL_SUM_AGGREGATE_179INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e107 = LOCATION.head;
        while (e107) {
          long __sql_sum_aggregate_179inventoryinventory_locn = e107->LOCATION_LOCN;
          long location_zip = e107->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e107->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e107->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e107->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e107->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e107->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e107->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e107->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e107->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e107->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e107->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e107->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e107->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e107->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v107 = e107->__av;
          { //slice
            const HASH_RES_t h43 = CENSUS_mapkey0_idxfn::hash(se4021.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i108 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n108 = &(i108->buckets_[h43 % i108->size_]);
            CENSUS_entry* e108;
            do if ((e108 = n108->obj) && h43 == n108->hash && CENSUS_mapkey0_idxfn::equals(se4021, *e108)) {
              long census_population = e108->CENSUS_POPULATION;
              long census_white = e108->CENSUS_WHITE;
              long census_asian = e108->CENSUS_ASIAN;
              long census_pacific = e108->CENSUS_PACIFIC;
              long census_blackafrican = e108->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e108->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e108->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e108->CENSUS_HOUSEUNITS;
              long census_families = e108->CENSUS_FAMILIES;
              long census_households = e108->CENSUS_HOUSEHOLDS;
              long census_husbwife = e108->CENSUS_HUSBWIFE;
              long census_males = e108->CENSUS_MALES;
              long census_females = e108->CENSUS_FEMALES;
              long census_householdschildren = e108->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e108->CENSUS_HISPANIC;
              long v108 = e108->__av;
              __SQL_SUM_AGGREGATE_179INVENTORY1.addOrDelOnZero(se4020.modify(__sql_sum_aggregate_179inventoryinventory_locn), (v107 * (v108 * (location_zip * location_walmartsupercenterdistance))));
            } while ((n108 = n108->nxt));
          }
          e107 = e107->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_180 = 0.0;
      __SQL_SUM_AGGREGATE_180INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e109 = LOCATION.head;
        while (e109) {
          long __sql_sum_aggregate_180inventoryinventory_locn = e109->LOCATION_LOCN;
          long location_zip = e109->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e109->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e109->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e109->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e109->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e109->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e109->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e109->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e109->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e109->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e109->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e109->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e109->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e109->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v109 = e109->__av;
          { //slice
            const HASH_RES_t h44 = CENSUS_mapkey0_idxfn::hash(se4024.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i110 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n110 = &(i110->buckets_[h44 % i110->size_]);
            CENSUS_entry* e110;
            do if ((e110 = n110->obj) && h44 == n110->hash && CENSUS_mapkey0_idxfn::equals(se4024, *e110)) {
              long census_population = e110->CENSUS_POPULATION;
              long census_white = e110->CENSUS_WHITE;
              long census_asian = e110->CENSUS_ASIAN;
              long census_pacific = e110->CENSUS_PACIFIC;
              long census_blackafrican = e110->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e110->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e110->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e110->CENSUS_HOUSEUNITS;
              long census_families = e110->CENSUS_FAMILIES;
              long census_households = e110->CENSUS_HOUSEHOLDS;
              long census_husbwife = e110->CENSUS_HUSBWIFE;
              long census_males = e110->CENSUS_MALES;
              long census_females = e110->CENSUS_FEMALES;
              long census_householdschildren = e110->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e110->CENSUS_HISPANIC;
              long v110 = e110->__av;
              __SQL_SUM_AGGREGATE_180INVENTORY1.addOrDelOnZero(se4023.modify(__sql_sum_aggregate_180inventoryinventory_locn), (v109 * (v110 * (location_zip * location_walmartsupercenterdrivetime))));
            } while ((n110 = n110->nxt));
          }
          e109 = e109->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_181INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e111 = LOCATION.head;
        while (e111) {
          long __sql_sum_aggregate_181inventoryinventory_locn = e111->LOCATION_LOCN;
          long location_zip = e111->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e111->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e111->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e111->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e111->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e111->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e111->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e111->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e111->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e111->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e111->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e111->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e111->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e111->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v111 = e111->__av;
          { //slice
            const HASH_RES_t h45 = CENSUS_mapkey0_idxfn::hash(se4026.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i112 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n112 = &(i112->buckets_[h45 % i112->size_]);
            CENSUS_entry* e112;
            do if ((e112 = n112->obj) && h45 == n112->hash && CENSUS_mapkey0_idxfn::equals(se4026, *e112)) {
              long census_population = e112->CENSUS_POPULATION;
              long census_white = e112->CENSUS_WHITE;
              long census_asian = e112->CENSUS_ASIAN;
              long census_pacific = e112->CENSUS_PACIFIC;
              long census_blackafrican = e112->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e112->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e112->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e112->CENSUS_HOUSEUNITS;
              long census_families = e112->CENSUS_FAMILIES;
              long census_households = e112->CENSUS_HOUSEHOLDS;
              long census_husbwife = e112->CENSUS_HUSBWIFE;
              long census_males = e112->CENSUS_MALES;
              long census_females = e112->CENSUS_FEMALES;
              long census_householdschildren = e112->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e112->CENSUS_HISPANIC;
              long v112 = e112->__av;
              __SQL_SUM_AGGREGATE_181INVENTORY1.addOrDelOnZero(se4025.modify(__sql_sum_aggregate_181inventoryinventory_locn), (v111 * (v112 * (location_zip * census_population))));
            } while ((n112 = n112->nxt));
          }
          e111 = e111->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_182INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e113 = LOCATION.head;
        while (e113) {
          long __sql_sum_aggregate_182inventoryinventory_locn = e113->LOCATION_LOCN;
          long location_zip = e113->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e113->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e113->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e113->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e113->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e113->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e113->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e113->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e113->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e113->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e113->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e113->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e113->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e113->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v113 = e113->__av;
          { //slice
            const HASH_RES_t h46 = CENSUS_mapkey0_idxfn::hash(se4028.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i114 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n114 = &(i114->buckets_[h46 % i114->size_]);
            CENSUS_entry* e114;
            do if ((e114 = n114->obj) && h46 == n114->hash && CENSUS_mapkey0_idxfn::equals(se4028, *e114)) {
              long census_population = e114->CENSUS_POPULATION;
              long census_white = e114->CENSUS_WHITE;
              long census_asian = e114->CENSUS_ASIAN;
              long census_pacific = e114->CENSUS_PACIFIC;
              long census_blackafrican = e114->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e114->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e114->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e114->CENSUS_HOUSEUNITS;
              long census_families = e114->CENSUS_FAMILIES;
              long census_households = e114->CENSUS_HOUSEHOLDS;
              long census_husbwife = e114->CENSUS_HUSBWIFE;
              long census_males = e114->CENSUS_MALES;
              long census_females = e114->CENSUS_FEMALES;
              long census_householdschildren = e114->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e114->CENSUS_HISPANIC;
              long v114 = e114->__av;
              __SQL_SUM_AGGREGATE_182INVENTORY1.addOrDelOnZero(se4027.modify(__sql_sum_aggregate_182inventoryinventory_locn), (v113 * (v114 * (location_zip * census_white))));
            } while ((n114 = n114->nxt));
          }
          e113 = e113->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_183INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e115 = LOCATION.head;
        while (e115) {
          long __sql_sum_aggregate_183inventoryinventory_locn = e115->LOCATION_LOCN;
          long location_zip = e115->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e115->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e115->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e115->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e115->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e115->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e115->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e115->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e115->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e115->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e115->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e115->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e115->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e115->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v115 = e115->__av;
          { //slice
            const HASH_RES_t h47 = CENSUS_mapkey0_idxfn::hash(se4030.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i116 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n116 = &(i116->buckets_[h47 % i116->size_]);
            CENSUS_entry* e116;
            do if ((e116 = n116->obj) && h47 == n116->hash && CENSUS_mapkey0_idxfn::equals(se4030, *e116)) {
              long census_population = e116->CENSUS_POPULATION;
              long census_white = e116->CENSUS_WHITE;
              long census_asian = e116->CENSUS_ASIAN;
              long census_pacific = e116->CENSUS_PACIFIC;
              long census_blackafrican = e116->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e116->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e116->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e116->CENSUS_HOUSEUNITS;
              long census_families = e116->CENSUS_FAMILIES;
              long census_households = e116->CENSUS_HOUSEHOLDS;
              long census_husbwife = e116->CENSUS_HUSBWIFE;
              long census_males = e116->CENSUS_MALES;
              long census_females = e116->CENSUS_FEMALES;
              long census_householdschildren = e116->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e116->CENSUS_HISPANIC;
              long v116 = e116->__av;
              __SQL_SUM_AGGREGATE_183INVENTORY1.addOrDelOnZero(se4029.modify(__sql_sum_aggregate_183inventoryinventory_locn), (v115 * (v116 * (location_zip * census_asian))));
            } while ((n116 = n116->nxt));
          }
          e115 = e115->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_184INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e117 = LOCATION.head;
        while (e117) {
          long __sql_sum_aggregate_184inventoryinventory_locn = e117->LOCATION_LOCN;
          long location_zip = e117->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e117->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e117->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e117->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e117->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e117->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e117->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e117->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e117->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e117->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e117->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e117->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e117->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e117->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v117 = e117->__av;
          { //slice
            const HASH_RES_t h48 = CENSUS_mapkey0_idxfn::hash(se4032.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i118 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n118 = &(i118->buckets_[h48 % i118->size_]);
            CENSUS_entry* e118;
            do if ((e118 = n118->obj) && h48 == n118->hash && CENSUS_mapkey0_idxfn::equals(se4032, *e118)) {
              long census_population = e118->CENSUS_POPULATION;
              long census_white = e118->CENSUS_WHITE;
              long census_asian = e118->CENSUS_ASIAN;
              long census_pacific = e118->CENSUS_PACIFIC;
              long census_blackafrican = e118->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e118->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e118->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e118->CENSUS_HOUSEUNITS;
              long census_families = e118->CENSUS_FAMILIES;
              long census_households = e118->CENSUS_HOUSEHOLDS;
              long census_husbwife = e118->CENSUS_HUSBWIFE;
              long census_males = e118->CENSUS_MALES;
              long census_females = e118->CENSUS_FEMALES;
              long census_householdschildren = e118->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e118->CENSUS_HISPANIC;
              long v118 = e118->__av;
              __SQL_SUM_AGGREGATE_184INVENTORY1.addOrDelOnZero(se4031.modify(__sql_sum_aggregate_184inventoryinventory_locn), (v117 * (v118 * (location_zip * census_pacific))));
            } while ((n118 = n118->nxt));
          }
          e117 = e117->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_185INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e119 = LOCATION.head;
        while (e119) {
          long __sql_sum_aggregate_185inventoryinventory_locn = e119->LOCATION_LOCN;
          long location_zip = e119->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e119->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e119->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e119->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e119->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e119->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e119->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e119->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e119->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e119->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e119->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e119->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e119->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e119->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v119 = e119->__av;
          { //slice
            const HASH_RES_t h49 = CENSUS_mapkey0_idxfn::hash(se4034.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i120 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n120 = &(i120->buckets_[h49 % i120->size_]);
            CENSUS_entry* e120;
            do if ((e120 = n120->obj) && h49 == n120->hash && CENSUS_mapkey0_idxfn::equals(se4034, *e120)) {
              long census_population = e120->CENSUS_POPULATION;
              long census_white = e120->CENSUS_WHITE;
              long census_asian = e120->CENSUS_ASIAN;
              long census_pacific = e120->CENSUS_PACIFIC;
              long census_blackafrican = e120->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e120->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e120->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e120->CENSUS_HOUSEUNITS;
              long census_families = e120->CENSUS_FAMILIES;
              long census_households = e120->CENSUS_HOUSEHOLDS;
              long census_husbwife = e120->CENSUS_HUSBWIFE;
              long census_males = e120->CENSUS_MALES;
              long census_females = e120->CENSUS_FEMALES;
              long census_householdschildren = e120->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e120->CENSUS_HISPANIC;
              long v120 = e120->__av;
              __SQL_SUM_AGGREGATE_185INVENTORY1.addOrDelOnZero(se4033.modify(__sql_sum_aggregate_185inventoryinventory_locn), (v119 * (v120 * (location_zip * census_blackafrican))));
            } while ((n120 = n120->nxt));
          }
          e119 = e119->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_186 = 0.0;
      __SQL_SUM_AGGREGATE_186INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e121 = LOCATION.head;
        while (e121) {
          long __sql_sum_aggregate_186inventoryinventory_locn = e121->LOCATION_LOCN;
          long location_zip = e121->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e121->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e121->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e121->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e121->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e121->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e121->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e121->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e121->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e121->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e121->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e121->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e121->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e121->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v121 = e121->__av;
          { //slice
            const HASH_RES_t h50 = CENSUS_mapkey0_idxfn::hash(se4037.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i122 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n122 = &(i122->buckets_[h50 % i122->size_]);
            CENSUS_entry* e122;
            do if ((e122 = n122->obj) && h50 == n122->hash && CENSUS_mapkey0_idxfn::equals(se4037, *e122)) {
              long census_population = e122->CENSUS_POPULATION;
              long census_white = e122->CENSUS_WHITE;
              long census_asian = e122->CENSUS_ASIAN;
              long census_pacific = e122->CENSUS_PACIFIC;
              long census_blackafrican = e122->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e122->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e122->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e122->CENSUS_HOUSEUNITS;
              long census_families = e122->CENSUS_FAMILIES;
              long census_households = e122->CENSUS_HOUSEHOLDS;
              long census_husbwife = e122->CENSUS_HUSBWIFE;
              long census_males = e122->CENSUS_MALES;
              long census_females = e122->CENSUS_FEMALES;
              long census_householdschildren = e122->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e122->CENSUS_HISPANIC;
              long v122 = e122->__av;
              __SQL_SUM_AGGREGATE_186INVENTORY1.addOrDelOnZero(se4036.modify(__sql_sum_aggregate_186inventoryinventory_locn), (v121 * (v122 * (location_zip * census_medianage))));
            } while ((n122 = n122->nxt));
          }
          e121 = e121->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_187INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e123 = LOCATION.head;
        while (e123) {
          long __sql_sum_aggregate_187inventoryinventory_locn = e123->LOCATION_LOCN;
          long location_zip = e123->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e123->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e123->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e123->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e123->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e123->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e123->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e123->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e123->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e123->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e123->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e123->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e123->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e123->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v123 = e123->__av;
          { //slice
            const HASH_RES_t h51 = CENSUS_mapkey0_idxfn::hash(se4039.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i124 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n124 = &(i124->buckets_[h51 % i124->size_]);
            CENSUS_entry* e124;
            do if ((e124 = n124->obj) && h51 == n124->hash && CENSUS_mapkey0_idxfn::equals(se4039, *e124)) {
              long census_population = e124->CENSUS_POPULATION;
              long census_white = e124->CENSUS_WHITE;
              long census_asian = e124->CENSUS_ASIAN;
              long census_pacific = e124->CENSUS_PACIFIC;
              long census_blackafrican = e124->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e124->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e124->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e124->CENSUS_HOUSEUNITS;
              long census_families = e124->CENSUS_FAMILIES;
              long census_households = e124->CENSUS_HOUSEHOLDS;
              long census_husbwife = e124->CENSUS_HUSBWIFE;
              long census_males = e124->CENSUS_MALES;
              long census_females = e124->CENSUS_FEMALES;
              long census_householdschildren = e124->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e124->CENSUS_HISPANIC;
              long v124 = e124->__av;
              __SQL_SUM_AGGREGATE_187INVENTORY1.addOrDelOnZero(se4038.modify(__sql_sum_aggregate_187inventoryinventory_locn), (v123 * (v124 * (location_zip * census_occupiedhouseunits))));
            } while ((n124 = n124->nxt));
          }
          e123 = e123->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_188INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e125 = LOCATION.head;
        while (e125) {
          long __sql_sum_aggregate_188inventoryinventory_locn = e125->LOCATION_LOCN;
          long location_zip = e125->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e125->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e125->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e125->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e125->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e125->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e125->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e125->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e125->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e125->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e125->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e125->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e125->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e125->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v125 = e125->__av;
          { //slice
            const HASH_RES_t h52 = CENSUS_mapkey0_idxfn::hash(se4041.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i126 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n126 = &(i126->buckets_[h52 % i126->size_]);
            CENSUS_entry* e126;
            do if ((e126 = n126->obj) && h52 == n126->hash && CENSUS_mapkey0_idxfn::equals(se4041, *e126)) {
              long census_population = e126->CENSUS_POPULATION;
              long census_white = e126->CENSUS_WHITE;
              long census_asian = e126->CENSUS_ASIAN;
              long census_pacific = e126->CENSUS_PACIFIC;
              long census_blackafrican = e126->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e126->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e126->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e126->CENSUS_HOUSEUNITS;
              long census_families = e126->CENSUS_FAMILIES;
              long census_households = e126->CENSUS_HOUSEHOLDS;
              long census_husbwife = e126->CENSUS_HUSBWIFE;
              long census_males = e126->CENSUS_MALES;
              long census_females = e126->CENSUS_FEMALES;
              long census_householdschildren = e126->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e126->CENSUS_HISPANIC;
              long v126 = e126->__av;
              __SQL_SUM_AGGREGATE_188INVENTORY1.addOrDelOnZero(se4040.modify(__sql_sum_aggregate_188inventoryinventory_locn), (v125 * (v126 * (location_zip * census_houseunits))));
            } while ((n126 = n126->nxt));
          }
          e125 = e125->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_189INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e127 = LOCATION.head;
        while (e127) {
          long __sql_sum_aggregate_189inventoryinventory_locn = e127->LOCATION_LOCN;
          long location_zip = e127->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e127->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e127->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e127->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e127->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e127->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e127->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e127->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e127->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e127->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e127->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e127->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e127->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e127->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v127 = e127->__av;
          { //slice
            const HASH_RES_t h53 = CENSUS_mapkey0_idxfn::hash(se4043.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i128 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n128 = &(i128->buckets_[h53 % i128->size_]);
            CENSUS_entry* e128;
            do if ((e128 = n128->obj) && h53 == n128->hash && CENSUS_mapkey0_idxfn::equals(se4043, *e128)) {
              long census_population = e128->CENSUS_POPULATION;
              long census_white = e128->CENSUS_WHITE;
              long census_asian = e128->CENSUS_ASIAN;
              long census_pacific = e128->CENSUS_PACIFIC;
              long census_blackafrican = e128->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e128->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e128->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e128->CENSUS_HOUSEUNITS;
              long census_families = e128->CENSUS_FAMILIES;
              long census_households = e128->CENSUS_HOUSEHOLDS;
              long census_husbwife = e128->CENSUS_HUSBWIFE;
              long census_males = e128->CENSUS_MALES;
              long census_females = e128->CENSUS_FEMALES;
              long census_householdschildren = e128->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e128->CENSUS_HISPANIC;
              long v128 = e128->__av;
              __SQL_SUM_AGGREGATE_189INVENTORY1.addOrDelOnZero(se4042.modify(__sql_sum_aggregate_189inventoryinventory_locn), (v127 * (v128 * (location_zip * census_families))));
            } while ((n128 = n128->nxt));
          }
          e127 = e127->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_190INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e129 = LOCATION.head;
        while (e129) {
          long __sql_sum_aggregate_190inventoryinventory_locn = e129->LOCATION_LOCN;
          long location_zip = e129->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e129->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e129->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e129->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e129->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e129->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e129->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e129->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e129->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e129->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e129->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e129->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e129->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e129->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v129 = e129->__av;
          { //slice
            const HASH_RES_t h54 = CENSUS_mapkey0_idxfn::hash(se4045.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i130 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n130 = &(i130->buckets_[h54 % i130->size_]);
            CENSUS_entry* e130;
            do if ((e130 = n130->obj) && h54 == n130->hash && CENSUS_mapkey0_idxfn::equals(se4045, *e130)) {
              long census_population = e130->CENSUS_POPULATION;
              long census_white = e130->CENSUS_WHITE;
              long census_asian = e130->CENSUS_ASIAN;
              long census_pacific = e130->CENSUS_PACIFIC;
              long census_blackafrican = e130->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e130->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e130->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e130->CENSUS_HOUSEUNITS;
              long census_families = e130->CENSUS_FAMILIES;
              long census_households = e130->CENSUS_HOUSEHOLDS;
              long census_husbwife = e130->CENSUS_HUSBWIFE;
              long census_males = e130->CENSUS_MALES;
              long census_females = e130->CENSUS_FEMALES;
              long census_householdschildren = e130->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e130->CENSUS_HISPANIC;
              long v130 = e130->__av;
              __SQL_SUM_AGGREGATE_190INVENTORY1.addOrDelOnZero(se4044.modify(__sql_sum_aggregate_190inventoryinventory_locn), (v129 * (v130 * (location_zip * census_households))));
            } while ((n130 = n130->nxt));
          }
          e129 = e129->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_191INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e131 = LOCATION.head;
        while (e131) {
          long __sql_sum_aggregate_191inventoryinventory_locn = e131->LOCATION_LOCN;
          long location_zip = e131->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e131->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e131->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e131->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e131->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e131->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e131->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e131->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e131->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e131->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e131->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e131->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e131->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e131->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v131 = e131->__av;
          { //slice
            const HASH_RES_t h55 = CENSUS_mapkey0_idxfn::hash(se4047.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i132 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n132 = &(i132->buckets_[h55 % i132->size_]);
            CENSUS_entry* e132;
            do if ((e132 = n132->obj) && h55 == n132->hash && CENSUS_mapkey0_idxfn::equals(se4047, *e132)) {
              long census_population = e132->CENSUS_POPULATION;
              long census_white = e132->CENSUS_WHITE;
              long census_asian = e132->CENSUS_ASIAN;
              long census_pacific = e132->CENSUS_PACIFIC;
              long census_blackafrican = e132->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e132->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e132->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e132->CENSUS_HOUSEUNITS;
              long census_families = e132->CENSUS_FAMILIES;
              long census_households = e132->CENSUS_HOUSEHOLDS;
              long census_husbwife = e132->CENSUS_HUSBWIFE;
              long census_males = e132->CENSUS_MALES;
              long census_females = e132->CENSUS_FEMALES;
              long census_householdschildren = e132->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e132->CENSUS_HISPANIC;
              long v132 = e132->__av;
              __SQL_SUM_AGGREGATE_191INVENTORY1.addOrDelOnZero(se4046.modify(__sql_sum_aggregate_191inventoryinventory_locn), (v131 * (v132 * (location_zip * census_husbwife))));
            } while ((n132 = n132->nxt));
          }
          e131 = e131->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_192INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e133 = LOCATION.head;
        while (e133) {
          long __sql_sum_aggregate_192inventoryinventory_locn = e133->LOCATION_LOCN;
          long location_zip = e133->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e133->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e133->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e133->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e133->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e133->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e133->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e133->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e133->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e133->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e133->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e133->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e133->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e133->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v133 = e133->__av;
          { //slice
            const HASH_RES_t h56 = CENSUS_mapkey0_idxfn::hash(se4049.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i134 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n134 = &(i134->buckets_[h56 % i134->size_]);
            CENSUS_entry* e134;
            do if ((e134 = n134->obj) && h56 == n134->hash && CENSUS_mapkey0_idxfn::equals(se4049, *e134)) {
              long census_population = e134->CENSUS_POPULATION;
              long census_white = e134->CENSUS_WHITE;
              long census_asian = e134->CENSUS_ASIAN;
              long census_pacific = e134->CENSUS_PACIFIC;
              long census_blackafrican = e134->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e134->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e134->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e134->CENSUS_HOUSEUNITS;
              long census_families = e134->CENSUS_FAMILIES;
              long census_households = e134->CENSUS_HOUSEHOLDS;
              long census_husbwife = e134->CENSUS_HUSBWIFE;
              long census_males = e134->CENSUS_MALES;
              long census_females = e134->CENSUS_FEMALES;
              long census_householdschildren = e134->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e134->CENSUS_HISPANIC;
              long v134 = e134->__av;
              __SQL_SUM_AGGREGATE_192INVENTORY1.addOrDelOnZero(se4048.modify(__sql_sum_aggregate_192inventoryinventory_locn), (v133 * (v134 * (location_zip * census_males))));
            } while ((n134 = n134->nxt));
          }
          e133 = e133->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_193INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e135 = LOCATION.head;
        while (e135) {
          long __sql_sum_aggregate_193inventoryinventory_locn = e135->LOCATION_LOCN;
          long location_zip = e135->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e135->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e135->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e135->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e135->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e135->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e135->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e135->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e135->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e135->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e135->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e135->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e135->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e135->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v135 = e135->__av;
          { //slice
            const HASH_RES_t h57 = CENSUS_mapkey0_idxfn::hash(se4051.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i136 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n136 = &(i136->buckets_[h57 % i136->size_]);
            CENSUS_entry* e136;
            do if ((e136 = n136->obj) && h57 == n136->hash && CENSUS_mapkey0_idxfn::equals(se4051, *e136)) {
              long census_population = e136->CENSUS_POPULATION;
              long census_white = e136->CENSUS_WHITE;
              long census_asian = e136->CENSUS_ASIAN;
              long census_pacific = e136->CENSUS_PACIFIC;
              long census_blackafrican = e136->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e136->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e136->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e136->CENSUS_HOUSEUNITS;
              long census_families = e136->CENSUS_FAMILIES;
              long census_households = e136->CENSUS_HOUSEHOLDS;
              long census_husbwife = e136->CENSUS_HUSBWIFE;
              long census_males = e136->CENSUS_MALES;
              long census_females = e136->CENSUS_FEMALES;
              long census_householdschildren = e136->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e136->CENSUS_HISPANIC;
              long v136 = e136->__av;
              __SQL_SUM_AGGREGATE_193INVENTORY1.addOrDelOnZero(se4050.modify(__sql_sum_aggregate_193inventoryinventory_locn), (v135 * (v136 * (location_zip * census_females))));
            } while ((n136 = n136->nxt));
          }
          e135 = e135->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_194INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e137 = LOCATION.head;
        while (e137) {
          long __sql_sum_aggregate_194inventoryinventory_locn = e137->LOCATION_LOCN;
          long location_zip = e137->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e137->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e137->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e137->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e137->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e137->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e137->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e137->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e137->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e137->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e137->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e137->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e137->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e137->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v137 = e137->__av;
          { //slice
            const HASH_RES_t h58 = CENSUS_mapkey0_idxfn::hash(se4053.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i138 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n138 = &(i138->buckets_[h58 % i138->size_]);
            CENSUS_entry* e138;
            do if ((e138 = n138->obj) && h58 == n138->hash && CENSUS_mapkey0_idxfn::equals(se4053, *e138)) {
              long census_population = e138->CENSUS_POPULATION;
              long census_white = e138->CENSUS_WHITE;
              long census_asian = e138->CENSUS_ASIAN;
              long census_pacific = e138->CENSUS_PACIFIC;
              long census_blackafrican = e138->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e138->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e138->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e138->CENSUS_HOUSEUNITS;
              long census_families = e138->CENSUS_FAMILIES;
              long census_households = e138->CENSUS_HOUSEHOLDS;
              long census_husbwife = e138->CENSUS_HUSBWIFE;
              long census_males = e138->CENSUS_MALES;
              long census_females = e138->CENSUS_FEMALES;
              long census_householdschildren = e138->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e138->CENSUS_HISPANIC;
              long v138 = e138->__av;
              __SQL_SUM_AGGREGATE_194INVENTORY1.addOrDelOnZero(se4052.modify(__sql_sum_aggregate_194inventoryinventory_locn), (v137 * (v138 * (location_zip * census_householdschildren))));
            } while ((n138 = n138->nxt));
          }
          e137 = e137->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_195INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e139 = LOCATION.head;
        while (e139) {
          long __sql_sum_aggregate_195inventoryinventory_locn = e139->LOCATION_LOCN;
          long location_zip = e139->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e139->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e139->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e139->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e139->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e139->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e139->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e139->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e139->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e139->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e139->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e139->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e139->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e139->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v139 = e139->__av;
          { //slice
            const HASH_RES_t h59 = CENSUS_mapkey0_idxfn::hash(se4055.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i140 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n140 = &(i140->buckets_[h59 % i140->size_]);
            CENSUS_entry* e140;
            do if ((e140 = n140->obj) && h59 == n140->hash && CENSUS_mapkey0_idxfn::equals(se4055, *e140)) {
              long census_population = e140->CENSUS_POPULATION;
              long census_white = e140->CENSUS_WHITE;
              long census_asian = e140->CENSUS_ASIAN;
              long census_pacific = e140->CENSUS_PACIFIC;
              long census_blackafrican = e140->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e140->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e140->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e140->CENSUS_HOUSEUNITS;
              long census_families = e140->CENSUS_FAMILIES;
              long census_households = e140->CENSUS_HOUSEHOLDS;
              long census_husbwife = e140->CENSUS_HUSBWIFE;
              long census_males = e140->CENSUS_MALES;
              long census_females = e140->CENSUS_FEMALES;
              long census_householdschildren = e140->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e140->CENSUS_HISPANIC;
              long v140 = e140->__av;
              __SQL_SUM_AGGREGATE_195INVENTORY1.addOrDelOnZero(se4054.modify(__sql_sum_aggregate_195inventoryinventory_locn), (v139 * (v140 * (location_zip * census_hispanic))));
            } while ((n140 = n140->nxt));
          }
          e139 = e139->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_199 = 0.0;
      __SQL_SUM_AGGREGATE_204 = 0.0;
      __SQL_SUM_AGGREGATE_206 = 0.0;
      __SQL_SUM_AGGREGATE_206INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e141 = LOCATION.head;
        while (e141) {
          long __sql_sum_aggregate_206inventoryinventory_locn = e141->LOCATION_LOCN;
          long location_zip = e141->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e141->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e141->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e141->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e141->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e141->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e141->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e141->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e141->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e141->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e141->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e141->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e141->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e141->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v141 = e141->__av;
          { //slice
            const HASH_RES_t h60 = CENSUS_mapkey0_idxfn::hash(se4060.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i142 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n142 = &(i142->buckets_[h60 % i142->size_]);
            CENSUS_entry* e142;
            do if ((e142 = n142->obj) && h60 == n142->hash && CENSUS_mapkey0_idxfn::equals(se4060, *e142)) {
              long census_population = e142->CENSUS_POPULATION;
              long census_white = e142->CENSUS_WHITE;
              long census_asian = e142->CENSUS_ASIAN;
              long census_pacific = e142->CENSUS_PACIFIC;
              long census_blackafrican = e142->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e142->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e142->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e142->CENSUS_HOUSEUNITS;
              long census_families = e142->CENSUS_FAMILIES;
              long census_households = e142->CENSUS_HOUSEHOLDS;
              long census_husbwife = e142->CENSUS_HUSBWIFE;
              long census_males = e142->CENSUS_MALES;
              long census_females = e142->CENSUS_FEMALES;
              long census_householdschildren = e142->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e142->CENSUS_HISPANIC;
              long v142 = e142->__av;
              __SQL_SUM_AGGREGATE_206INVENTORY1.addOrDelOnZero(se4059.modify(__sql_sum_aggregate_206inventoryinventory_locn), (v141 * (v142 * (location_rgn_cd * location_rgn_cd))));
            } while ((n142 = n142->nxt));
          }
          e141 = e141->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_207 = 0.0;
      __SQL_SUM_AGGREGATE_207INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e143 = LOCATION.head;
        while (e143) {
          long __sql_sum_aggregate_207inventoryinventory_locn = e143->LOCATION_LOCN;
          long location_zip = e143->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e143->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e143->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e143->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e143->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e143->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e143->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e143->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e143->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e143->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e143->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e143->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e143->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e143->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v143 = e143->__av;
          { //slice
            const HASH_RES_t h61 = CENSUS_mapkey0_idxfn::hash(se4063.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i144 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n144 = &(i144->buckets_[h61 % i144->size_]);
            CENSUS_entry* e144;
            do if ((e144 = n144->obj) && h61 == n144->hash && CENSUS_mapkey0_idxfn::equals(se4063, *e144)) {
              long census_population = e144->CENSUS_POPULATION;
              long census_white = e144->CENSUS_WHITE;
              long census_asian = e144->CENSUS_ASIAN;
              long census_pacific = e144->CENSUS_PACIFIC;
              long census_blackafrican = e144->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e144->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e144->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e144->CENSUS_HOUSEUNITS;
              long census_families = e144->CENSUS_FAMILIES;
              long census_households = e144->CENSUS_HOUSEHOLDS;
              long census_husbwife = e144->CENSUS_HUSBWIFE;
              long census_males = e144->CENSUS_MALES;
              long census_females = e144->CENSUS_FEMALES;
              long census_householdschildren = e144->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e144->CENSUS_HISPANIC;
              long v144 = e144->__av;
              __SQL_SUM_AGGREGATE_207INVENTORY1.addOrDelOnZero(se4062.modify(__sql_sum_aggregate_207inventoryinventory_locn), (v143 * (v144 * (location_rgn_cd * location_clim_zn_nbr))));
            } while ((n144 = n144->nxt));
          }
          e143 = e143->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_208 = 0.0;
      __SQL_SUM_AGGREGATE_208INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e145 = LOCATION.head;
        while (e145) {
          long __sql_sum_aggregate_208inventoryinventory_locn = e145->LOCATION_LOCN;
          long location_zip = e145->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e145->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e145->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e145->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e145->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e145->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e145->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e145->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e145->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e145->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e145->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e145->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e145->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e145->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v145 = e145->__av;
          { //slice
            const HASH_RES_t h62 = CENSUS_mapkey0_idxfn::hash(se4066.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i146 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n146 = &(i146->buckets_[h62 % i146->size_]);
            CENSUS_entry* e146;
            do if ((e146 = n146->obj) && h62 == n146->hash && CENSUS_mapkey0_idxfn::equals(se4066, *e146)) {
              long census_population = e146->CENSUS_POPULATION;
              long census_white = e146->CENSUS_WHITE;
              long census_asian = e146->CENSUS_ASIAN;
              long census_pacific = e146->CENSUS_PACIFIC;
              long census_blackafrican = e146->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e146->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e146->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e146->CENSUS_HOUSEUNITS;
              long census_families = e146->CENSUS_FAMILIES;
              long census_households = e146->CENSUS_HOUSEHOLDS;
              long census_husbwife = e146->CENSUS_HUSBWIFE;
              long census_males = e146->CENSUS_MALES;
              long census_females = e146->CENSUS_FEMALES;
              long census_householdschildren = e146->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e146->CENSUS_HISPANIC;
              long v146 = e146->__av;
              __SQL_SUM_AGGREGATE_208INVENTORY1.addOrDelOnZero(se4065.modify(__sql_sum_aggregate_208inventoryinventory_locn), (v145 * (v146 * (location_rgn_cd * location_tot_area_sq_ft))));
            } while ((n146 = n146->nxt));
          }
          e145 = e145->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_209 = 0.0;
      __SQL_SUM_AGGREGATE_209INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e147 = LOCATION.head;
        while (e147) {
          long __sql_sum_aggregate_209inventoryinventory_locn = e147->LOCATION_LOCN;
          long location_zip = e147->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e147->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e147->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e147->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e147->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e147->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e147->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e147->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e147->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e147->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e147->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e147->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e147->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e147->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v147 = e147->__av;
          { //slice
            const HASH_RES_t h63 = CENSUS_mapkey0_idxfn::hash(se4069.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i148 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n148 = &(i148->buckets_[h63 % i148->size_]);
            CENSUS_entry* e148;
            do if ((e148 = n148->obj) && h63 == n148->hash && CENSUS_mapkey0_idxfn::equals(se4069, *e148)) {
              long census_population = e148->CENSUS_POPULATION;
              long census_white = e148->CENSUS_WHITE;
              long census_asian = e148->CENSUS_ASIAN;
              long census_pacific = e148->CENSUS_PACIFIC;
              long census_blackafrican = e148->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e148->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e148->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e148->CENSUS_HOUSEUNITS;
              long census_families = e148->CENSUS_FAMILIES;
              long census_households = e148->CENSUS_HOUSEHOLDS;
              long census_husbwife = e148->CENSUS_HUSBWIFE;
              long census_males = e148->CENSUS_MALES;
              long census_females = e148->CENSUS_FEMALES;
              long census_householdschildren = e148->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e148->CENSUS_HISPANIC;
              long v148 = e148->__av;
              __SQL_SUM_AGGREGATE_209INVENTORY1.addOrDelOnZero(se4068.modify(__sql_sum_aggregate_209inventoryinventory_locn), (v147 * (v148 * (location_rgn_cd * location_sell_area_sq_ft))));
            } while ((n148 = n148->nxt));
          }
          e147 = e147->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_210 = 0.0;
      __SQL_SUM_AGGREGATE_210INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e149 = LOCATION.head;
        while (e149) {
          long __sql_sum_aggregate_210inventoryinventory_locn = e149->LOCATION_LOCN;
          long location_zip = e149->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e149->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e149->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e149->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e149->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e149->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e149->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e149->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e149->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e149->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e149->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e149->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e149->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e149->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v149 = e149->__av;
          { //slice
            const HASH_RES_t h64 = CENSUS_mapkey0_idxfn::hash(se4072.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i150 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n150 = &(i150->buckets_[h64 % i150->size_]);
            CENSUS_entry* e150;
            do if ((e150 = n150->obj) && h64 == n150->hash && CENSUS_mapkey0_idxfn::equals(se4072, *e150)) {
              long census_population = e150->CENSUS_POPULATION;
              long census_white = e150->CENSUS_WHITE;
              long census_asian = e150->CENSUS_ASIAN;
              long census_pacific = e150->CENSUS_PACIFIC;
              long census_blackafrican = e150->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e150->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e150->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e150->CENSUS_HOUSEUNITS;
              long census_families = e150->CENSUS_FAMILIES;
              long census_households = e150->CENSUS_HOUSEHOLDS;
              long census_husbwife = e150->CENSUS_HUSBWIFE;
              long census_males = e150->CENSUS_MALES;
              long census_females = e150->CENSUS_FEMALES;
              long census_householdschildren = e150->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e150->CENSUS_HISPANIC;
              long v150 = e150->__av;
              __SQL_SUM_AGGREGATE_210INVENTORY1.addOrDelOnZero(se4071.modify(__sql_sum_aggregate_210inventoryinventory_locn), (v149 * (v150 * (location_rgn_cd * location_avghhi))));
            } while ((n150 = n150->nxt));
          }
          e149 = e149->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_211 = 0.0;
      __SQL_SUM_AGGREGATE_211INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e151 = LOCATION.head;
        while (e151) {
          long __sql_sum_aggregate_211inventoryinventory_locn = e151->LOCATION_LOCN;
          long location_zip = e151->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e151->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e151->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e151->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e151->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e151->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e151->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e151->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e151->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e151->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e151->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e151->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e151->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e151->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v151 = e151->__av;
          { //slice
            const HASH_RES_t h65 = CENSUS_mapkey0_idxfn::hash(se4075.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i152 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n152 = &(i152->buckets_[h65 % i152->size_]);
            CENSUS_entry* e152;
            do if ((e152 = n152->obj) && h65 == n152->hash && CENSUS_mapkey0_idxfn::equals(se4075, *e152)) {
              long census_population = e152->CENSUS_POPULATION;
              long census_white = e152->CENSUS_WHITE;
              long census_asian = e152->CENSUS_ASIAN;
              long census_pacific = e152->CENSUS_PACIFIC;
              long census_blackafrican = e152->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e152->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e152->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e152->CENSUS_HOUSEUNITS;
              long census_families = e152->CENSUS_FAMILIES;
              long census_households = e152->CENSUS_HOUSEHOLDS;
              long census_husbwife = e152->CENSUS_HUSBWIFE;
              long census_males = e152->CENSUS_MALES;
              long census_females = e152->CENSUS_FEMALES;
              long census_householdschildren = e152->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e152->CENSUS_HISPANIC;
              long v152 = e152->__av;
              __SQL_SUM_AGGREGATE_211INVENTORY1.addOrDelOnZero(se4074.modify(__sql_sum_aggregate_211inventoryinventory_locn), (v151 * (v152 * (location_rgn_cd * location_supertargetdistance))));
            } while ((n152 = n152->nxt));
          }
          e151 = e151->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_212 = 0.0;
      __SQL_SUM_AGGREGATE_212INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e153 = LOCATION.head;
        while (e153) {
          long __sql_sum_aggregate_212inventoryinventory_locn = e153->LOCATION_LOCN;
          long location_zip = e153->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e153->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e153->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e153->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e153->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e153->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e153->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e153->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e153->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e153->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e153->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e153->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e153->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e153->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v153 = e153->__av;
          { //slice
            const HASH_RES_t h66 = CENSUS_mapkey0_idxfn::hash(se4078.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i154 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n154 = &(i154->buckets_[h66 % i154->size_]);
            CENSUS_entry* e154;
            do if ((e154 = n154->obj) && h66 == n154->hash && CENSUS_mapkey0_idxfn::equals(se4078, *e154)) {
              long census_population = e154->CENSUS_POPULATION;
              long census_white = e154->CENSUS_WHITE;
              long census_asian = e154->CENSUS_ASIAN;
              long census_pacific = e154->CENSUS_PACIFIC;
              long census_blackafrican = e154->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e154->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e154->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e154->CENSUS_HOUSEUNITS;
              long census_families = e154->CENSUS_FAMILIES;
              long census_households = e154->CENSUS_HOUSEHOLDS;
              long census_husbwife = e154->CENSUS_HUSBWIFE;
              long census_males = e154->CENSUS_MALES;
              long census_females = e154->CENSUS_FEMALES;
              long census_householdschildren = e154->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e154->CENSUS_HISPANIC;
              long v154 = e154->__av;
              __SQL_SUM_AGGREGATE_212INVENTORY1.addOrDelOnZero(se4077.modify(__sql_sum_aggregate_212inventoryinventory_locn), (v153 * (v154 * (location_rgn_cd * location_supertargetdrivetime))));
            } while ((n154 = n154->nxt));
          }
          e153 = e153->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_213 = 0.0;
      __SQL_SUM_AGGREGATE_213INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e155 = LOCATION.head;
        while (e155) {
          long __sql_sum_aggregate_213inventoryinventory_locn = e155->LOCATION_LOCN;
          long location_zip = e155->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e155->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e155->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e155->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e155->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e155->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e155->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e155->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e155->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e155->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e155->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e155->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e155->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e155->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v155 = e155->__av;
          { //slice
            const HASH_RES_t h67 = CENSUS_mapkey0_idxfn::hash(se4081.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i156 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n156 = &(i156->buckets_[h67 % i156->size_]);
            CENSUS_entry* e156;
            do if ((e156 = n156->obj) && h67 == n156->hash && CENSUS_mapkey0_idxfn::equals(se4081, *e156)) {
              long census_population = e156->CENSUS_POPULATION;
              long census_white = e156->CENSUS_WHITE;
              long census_asian = e156->CENSUS_ASIAN;
              long census_pacific = e156->CENSUS_PACIFIC;
              long census_blackafrican = e156->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e156->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e156->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e156->CENSUS_HOUSEUNITS;
              long census_families = e156->CENSUS_FAMILIES;
              long census_households = e156->CENSUS_HOUSEHOLDS;
              long census_husbwife = e156->CENSUS_HUSBWIFE;
              long census_males = e156->CENSUS_MALES;
              long census_females = e156->CENSUS_FEMALES;
              long census_householdschildren = e156->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e156->CENSUS_HISPANIC;
              long v156 = e156->__av;
              __SQL_SUM_AGGREGATE_213INVENTORY1.addOrDelOnZero(se4080.modify(__sql_sum_aggregate_213inventoryinventory_locn), (v155 * (v156 * (location_rgn_cd * location_targetdistance))));
            } while ((n156 = n156->nxt));
          }
          e155 = e155->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_214 = 0.0;
      __SQL_SUM_AGGREGATE_214INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e157 = LOCATION.head;
        while (e157) {
          long __sql_sum_aggregate_214inventoryinventory_locn = e157->LOCATION_LOCN;
          long location_zip = e157->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e157->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e157->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e157->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e157->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e157->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e157->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e157->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e157->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e157->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e157->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e157->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e157->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e157->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v157 = e157->__av;
          { //slice
            const HASH_RES_t h68 = CENSUS_mapkey0_idxfn::hash(se4084.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i158 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n158 = &(i158->buckets_[h68 % i158->size_]);
            CENSUS_entry* e158;
            do if ((e158 = n158->obj) && h68 == n158->hash && CENSUS_mapkey0_idxfn::equals(se4084, *e158)) {
              long census_population = e158->CENSUS_POPULATION;
              long census_white = e158->CENSUS_WHITE;
              long census_asian = e158->CENSUS_ASIAN;
              long census_pacific = e158->CENSUS_PACIFIC;
              long census_blackafrican = e158->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e158->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e158->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e158->CENSUS_HOUSEUNITS;
              long census_families = e158->CENSUS_FAMILIES;
              long census_households = e158->CENSUS_HOUSEHOLDS;
              long census_husbwife = e158->CENSUS_HUSBWIFE;
              long census_males = e158->CENSUS_MALES;
              long census_females = e158->CENSUS_FEMALES;
              long census_householdschildren = e158->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e158->CENSUS_HISPANIC;
              long v158 = e158->__av;
              __SQL_SUM_AGGREGATE_214INVENTORY1.addOrDelOnZero(se4083.modify(__sql_sum_aggregate_214inventoryinventory_locn), (v157 * (v158 * (location_rgn_cd * location_targetdrivetime))));
            } while ((n158 = n158->nxt));
          }
          e157 = e157->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_215 = 0.0;
      __SQL_SUM_AGGREGATE_215INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e159 = LOCATION.head;
        while (e159) {
          long __sql_sum_aggregate_215inventoryinventory_locn = e159->LOCATION_LOCN;
          long location_zip = e159->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e159->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e159->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e159->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e159->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e159->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e159->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e159->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e159->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e159->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e159->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e159->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e159->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e159->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v159 = e159->__av;
          { //slice
            const HASH_RES_t h69 = CENSUS_mapkey0_idxfn::hash(se4087.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i160 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n160 = &(i160->buckets_[h69 % i160->size_]);
            CENSUS_entry* e160;
            do if ((e160 = n160->obj) && h69 == n160->hash && CENSUS_mapkey0_idxfn::equals(se4087, *e160)) {
              long census_population = e160->CENSUS_POPULATION;
              long census_white = e160->CENSUS_WHITE;
              long census_asian = e160->CENSUS_ASIAN;
              long census_pacific = e160->CENSUS_PACIFIC;
              long census_blackafrican = e160->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e160->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e160->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e160->CENSUS_HOUSEUNITS;
              long census_families = e160->CENSUS_FAMILIES;
              long census_households = e160->CENSUS_HOUSEHOLDS;
              long census_husbwife = e160->CENSUS_HUSBWIFE;
              long census_males = e160->CENSUS_MALES;
              long census_females = e160->CENSUS_FEMALES;
              long census_householdschildren = e160->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e160->CENSUS_HISPANIC;
              long v160 = e160->__av;
              __SQL_SUM_AGGREGATE_215INVENTORY1.addOrDelOnZero(se4086.modify(__sql_sum_aggregate_215inventoryinventory_locn), (v159 * (v160 * (location_rgn_cd * location_walmartdistance))));
            } while ((n160 = n160->nxt));
          }
          e159 = e159->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_216 = 0.0;
      __SQL_SUM_AGGREGATE_216INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e161 = LOCATION.head;
        while (e161) {
          long __sql_sum_aggregate_216inventoryinventory_locn = e161->LOCATION_LOCN;
          long location_zip = e161->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e161->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e161->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e161->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e161->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e161->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e161->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e161->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e161->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e161->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e161->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e161->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e161->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e161->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v161 = e161->__av;
          { //slice
            const HASH_RES_t h70 = CENSUS_mapkey0_idxfn::hash(se4090.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i162 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n162 = &(i162->buckets_[h70 % i162->size_]);
            CENSUS_entry* e162;
            do if ((e162 = n162->obj) && h70 == n162->hash && CENSUS_mapkey0_idxfn::equals(se4090, *e162)) {
              long census_population = e162->CENSUS_POPULATION;
              long census_white = e162->CENSUS_WHITE;
              long census_asian = e162->CENSUS_ASIAN;
              long census_pacific = e162->CENSUS_PACIFIC;
              long census_blackafrican = e162->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e162->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e162->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e162->CENSUS_HOUSEUNITS;
              long census_families = e162->CENSUS_FAMILIES;
              long census_households = e162->CENSUS_HOUSEHOLDS;
              long census_husbwife = e162->CENSUS_HUSBWIFE;
              long census_males = e162->CENSUS_MALES;
              long census_females = e162->CENSUS_FEMALES;
              long census_householdschildren = e162->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e162->CENSUS_HISPANIC;
              long v162 = e162->__av;
              __SQL_SUM_AGGREGATE_216INVENTORY1.addOrDelOnZero(se4089.modify(__sql_sum_aggregate_216inventoryinventory_locn), (v161 * (v162 * (location_rgn_cd * location_walmartdrivetime))));
            } while ((n162 = n162->nxt));
          }
          e161 = e161->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_217 = 0.0;
      __SQL_SUM_AGGREGATE_217INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e163 = LOCATION.head;
        while (e163) {
          long __sql_sum_aggregate_217inventoryinventory_locn = e163->LOCATION_LOCN;
          long location_zip = e163->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e163->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e163->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e163->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e163->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e163->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e163->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e163->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e163->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e163->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e163->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e163->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e163->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e163->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v163 = e163->__av;
          { //slice
            const HASH_RES_t h71 = CENSUS_mapkey0_idxfn::hash(se4093.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i164 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n164 = &(i164->buckets_[h71 % i164->size_]);
            CENSUS_entry* e164;
            do if ((e164 = n164->obj) && h71 == n164->hash && CENSUS_mapkey0_idxfn::equals(se4093, *e164)) {
              long census_population = e164->CENSUS_POPULATION;
              long census_white = e164->CENSUS_WHITE;
              long census_asian = e164->CENSUS_ASIAN;
              long census_pacific = e164->CENSUS_PACIFIC;
              long census_blackafrican = e164->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e164->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e164->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e164->CENSUS_HOUSEUNITS;
              long census_families = e164->CENSUS_FAMILIES;
              long census_households = e164->CENSUS_HOUSEHOLDS;
              long census_husbwife = e164->CENSUS_HUSBWIFE;
              long census_males = e164->CENSUS_MALES;
              long census_females = e164->CENSUS_FEMALES;
              long census_householdschildren = e164->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e164->CENSUS_HISPANIC;
              long v164 = e164->__av;
              __SQL_SUM_AGGREGATE_217INVENTORY1.addOrDelOnZero(se4092.modify(__sql_sum_aggregate_217inventoryinventory_locn), (v163 * (v164 * (location_rgn_cd * location_walmartsupercenterdistance))));
            } while ((n164 = n164->nxt));
          }
          e163 = e163->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_218 = 0.0;
      __SQL_SUM_AGGREGATE_218INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e165 = LOCATION.head;
        while (e165) {
          long __sql_sum_aggregate_218inventoryinventory_locn = e165->LOCATION_LOCN;
          long location_zip = e165->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e165->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e165->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e165->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e165->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e165->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e165->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e165->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e165->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e165->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e165->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e165->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e165->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e165->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v165 = e165->__av;
          { //slice
            const HASH_RES_t h72 = CENSUS_mapkey0_idxfn::hash(se4096.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i166 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n166 = &(i166->buckets_[h72 % i166->size_]);
            CENSUS_entry* e166;
            do if ((e166 = n166->obj) && h72 == n166->hash && CENSUS_mapkey0_idxfn::equals(se4096, *e166)) {
              long census_population = e166->CENSUS_POPULATION;
              long census_white = e166->CENSUS_WHITE;
              long census_asian = e166->CENSUS_ASIAN;
              long census_pacific = e166->CENSUS_PACIFIC;
              long census_blackafrican = e166->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e166->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e166->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e166->CENSUS_HOUSEUNITS;
              long census_families = e166->CENSUS_FAMILIES;
              long census_households = e166->CENSUS_HOUSEHOLDS;
              long census_husbwife = e166->CENSUS_HUSBWIFE;
              long census_males = e166->CENSUS_MALES;
              long census_females = e166->CENSUS_FEMALES;
              long census_householdschildren = e166->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e166->CENSUS_HISPANIC;
              long v166 = e166->__av;
              __SQL_SUM_AGGREGATE_218INVENTORY1.addOrDelOnZero(se4095.modify(__sql_sum_aggregate_218inventoryinventory_locn), (v165 * (v166 * (location_rgn_cd * location_walmartsupercenterdrivetime))));
            } while ((n166 = n166->nxt));
          }
          e165 = e165->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_219 = 0.0;
      __SQL_SUM_AGGREGATE_219INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e167 = LOCATION.head;
        while (e167) {
          long __sql_sum_aggregate_219inventoryinventory_locn = e167->LOCATION_LOCN;
          long location_zip = e167->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e167->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e167->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e167->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e167->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e167->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e167->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e167->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e167->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e167->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e167->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e167->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e167->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e167->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v167 = e167->__av;
          { //slice
            const HASH_RES_t h73 = CENSUS_mapkey0_idxfn::hash(se4099.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i168 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n168 = &(i168->buckets_[h73 % i168->size_]);
            CENSUS_entry* e168;
            do if ((e168 = n168->obj) && h73 == n168->hash && CENSUS_mapkey0_idxfn::equals(se4099, *e168)) {
              long census_population = e168->CENSUS_POPULATION;
              long census_white = e168->CENSUS_WHITE;
              long census_asian = e168->CENSUS_ASIAN;
              long census_pacific = e168->CENSUS_PACIFIC;
              long census_blackafrican = e168->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e168->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e168->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e168->CENSUS_HOUSEUNITS;
              long census_families = e168->CENSUS_FAMILIES;
              long census_households = e168->CENSUS_HOUSEHOLDS;
              long census_husbwife = e168->CENSUS_HUSBWIFE;
              long census_males = e168->CENSUS_MALES;
              long census_females = e168->CENSUS_FEMALES;
              long census_householdschildren = e168->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e168->CENSUS_HISPANIC;
              long v168 = e168->__av;
              __SQL_SUM_AGGREGATE_219INVENTORY1.addOrDelOnZero(se4098.modify(__sql_sum_aggregate_219inventoryinventory_locn), (v167 * (v168 * (location_rgn_cd * census_population))));
            } while ((n168 = n168->nxt));
          }
          e167 = e167->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_220 = 0.0;
      __SQL_SUM_AGGREGATE_220INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e169 = LOCATION.head;
        while (e169) {
          long __sql_sum_aggregate_220inventoryinventory_locn = e169->LOCATION_LOCN;
          long location_zip = e169->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e169->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e169->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e169->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e169->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e169->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e169->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e169->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e169->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e169->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e169->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e169->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e169->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e169->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v169 = e169->__av;
          { //slice
            const HASH_RES_t h74 = CENSUS_mapkey0_idxfn::hash(se4102.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i170 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n170 = &(i170->buckets_[h74 % i170->size_]);
            CENSUS_entry* e170;
            do if ((e170 = n170->obj) && h74 == n170->hash && CENSUS_mapkey0_idxfn::equals(se4102, *e170)) {
              long census_population = e170->CENSUS_POPULATION;
              long census_white = e170->CENSUS_WHITE;
              long census_asian = e170->CENSUS_ASIAN;
              long census_pacific = e170->CENSUS_PACIFIC;
              long census_blackafrican = e170->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e170->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e170->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e170->CENSUS_HOUSEUNITS;
              long census_families = e170->CENSUS_FAMILIES;
              long census_households = e170->CENSUS_HOUSEHOLDS;
              long census_husbwife = e170->CENSUS_HUSBWIFE;
              long census_males = e170->CENSUS_MALES;
              long census_females = e170->CENSUS_FEMALES;
              long census_householdschildren = e170->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e170->CENSUS_HISPANIC;
              long v170 = e170->__av;
              __SQL_SUM_AGGREGATE_220INVENTORY1.addOrDelOnZero(se4101.modify(__sql_sum_aggregate_220inventoryinventory_locn), (v169 * (v170 * (location_rgn_cd * census_white))));
            } while ((n170 = n170->nxt));
          }
          e169 = e169->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_221 = 0.0;
      __SQL_SUM_AGGREGATE_221INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e171 = LOCATION.head;
        while (e171) {
          long __sql_sum_aggregate_221inventoryinventory_locn = e171->LOCATION_LOCN;
          long location_zip = e171->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e171->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e171->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e171->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e171->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e171->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e171->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e171->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e171->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e171->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e171->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e171->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e171->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e171->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v171 = e171->__av;
          { //slice
            const HASH_RES_t h75 = CENSUS_mapkey0_idxfn::hash(se4105.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i172 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n172 = &(i172->buckets_[h75 % i172->size_]);
            CENSUS_entry* e172;
            do if ((e172 = n172->obj) && h75 == n172->hash && CENSUS_mapkey0_idxfn::equals(se4105, *e172)) {
              long census_population = e172->CENSUS_POPULATION;
              long census_white = e172->CENSUS_WHITE;
              long census_asian = e172->CENSUS_ASIAN;
              long census_pacific = e172->CENSUS_PACIFIC;
              long census_blackafrican = e172->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e172->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e172->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e172->CENSUS_HOUSEUNITS;
              long census_families = e172->CENSUS_FAMILIES;
              long census_households = e172->CENSUS_HOUSEHOLDS;
              long census_husbwife = e172->CENSUS_HUSBWIFE;
              long census_males = e172->CENSUS_MALES;
              long census_females = e172->CENSUS_FEMALES;
              long census_householdschildren = e172->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e172->CENSUS_HISPANIC;
              long v172 = e172->__av;
              __SQL_SUM_AGGREGATE_221INVENTORY1.addOrDelOnZero(se4104.modify(__sql_sum_aggregate_221inventoryinventory_locn), (v171 * (v172 * (location_rgn_cd * census_asian))));
            } while ((n172 = n172->nxt));
          }
          e171 = e171->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_222 = 0.0;
      __SQL_SUM_AGGREGATE_222INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e173 = LOCATION.head;
        while (e173) {
          long __sql_sum_aggregate_222inventoryinventory_locn = e173->LOCATION_LOCN;
          long location_zip = e173->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e173->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e173->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e173->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e173->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e173->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e173->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e173->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e173->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e173->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e173->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e173->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e173->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e173->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v173 = e173->__av;
          { //slice
            const HASH_RES_t h76 = CENSUS_mapkey0_idxfn::hash(se4108.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i174 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n174 = &(i174->buckets_[h76 % i174->size_]);
            CENSUS_entry* e174;
            do if ((e174 = n174->obj) && h76 == n174->hash && CENSUS_mapkey0_idxfn::equals(se4108, *e174)) {
              long census_population = e174->CENSUS_POPULATION;
              long census_white = e174->CENSUS_WHITE;
              long census_asian = e174->CENSUS_ASIAN;
              long census_pacific = e174->CENSUS_PACIFIC;
              long census_blackafrican = e174->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e174->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e174->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e174->CENSUS_HOUSEUNITS;
              long census_families = e174->CENSUS_FAMILIES;
              long census_households = e174->CENSUS_HOUSEHOLDS;
              long census_husbwife = e174->CENSUS_HUSBWIFE;
              long census_males = e174->CENSUS_MALES;
              long census_females = e174->CENSUS_FEMALES;
              long census_householdschildren = e174->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e174->CENSUS_HISPANIC;
              long v174 = e174->__av;
              __SQL_SUM_AGGREGATE_222INVENTORY1.addOrDelOnZero(se4107.modify(__sql_sum_aggregate_222inventoryinventory_locn), (v173 * (v174 * (location_rgn_cd * census_pacific))));
            } while ((n174 = n174->nxt));
          }
          e173 = e173->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_223 = 0.0;
      __SQL_SUM_AGGREGATE_223INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e175 = LOCATION.head;
        while (e175) {
          long __sql_sum_aggregate_223inventoryinventory_locn = e175->LOCATION_LOCN;
          long location_zip = e175->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e175->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e175->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e175->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e175->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e175->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e175->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e175->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e175->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e175->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e175->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e175->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e175->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e175->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v175 = e175->__av;
          { //slice
            const HASH_RES_t h77 = CENSUS_mapkey0_idxfn::hash(se4111.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i176 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n176 = &(i176->buckets_[h77 % i176->size_]);
            CENSUS_entry* e176;
            do if ((e176 = n176->obj) && h77 == n176->hash && CENSUS_mapkey0_idxfn::equals(se4111, *e176)) {
              long census_population = e176->CENSUS_POPULATION;
              long census_white = e176->CENSUS_WHITE;
              long census_asian = e176->CENSUS_ASIAN;
              long census_pacific = e176->CENSUS_PACIFIC;
              long census_blackafrican = e176->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e176->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e176->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e176->CENSUS_HOUSEUNITS;
              long census_families = e176->CENSUS_FAMILIES;
              long census_households = e176->CENSUS_HOUSEHOLDS;
              long census_husbwife = e176->CENSUS_HUSBWIFE;
              long census_males = e176->CENSUS_MALES;
              long census_females = e176->CENSUS_FEMALES;
              long census_householdschildren = e176->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e176->CENSUS_HISPANIC;
              long v176 = e176->__av;
              __SQL_SUM_AGGREGATE_223INVENTORY1.addOrDelOnZero(se4110.modify(__sql_sum_aggregate_223inventoryinventory_locn), (v175 * (v176 * (location_rgn_cd * census_blackafrican))));
            } while ((n176 = n176->nxt));
          }
          e175 = e175->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_224 = 0.0;
      __SQL_SUM_AGGREGATE_224INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e177 = LOCATION.head;
        while (e177) {
          long __sql_sum_aggregate_224inventoryinventory_locn = e177->LOCATION_LOCN;
          long location_zip = e177->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e177->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e177->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e177->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e177->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e177->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e177->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e177->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e177->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e177->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e177->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e177->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e177->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e177->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v177 = e177->__av;
          { //slice
            const HASH_RES_t h78 = CENSUS_mapkey0_idxfn::hash(se4114.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i178 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n178 = &(i178->buckets_[h78 % i178->size_]);
            CENSUS_entry* e178;
            do if ((e178 = n178->obj) && h78 == n178->hash && CENSUS_mapkey0_idxfn::equals(se4114, *e178)) {
              long census_population = e178->CENSUS_POPULATION;
              long census_white = e178->CENSUS_WHITE;
              long census_asian = e178->CENSUS_ASIAN;
              long census_pacific = e178->CENSUS_PACIFIC;
              long census_blackafrican = e178->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e178->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e178->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e178->CENSUS_HOUSEUNITS;
              long census_families = e178->CENSUS_FAMILIES;
              long census_households = e178->CENSUS_HOUSEHOLDS;
              long census_husbwife = e178->CENSUS_HUSBWIFE;
              long census_males = e178->CENSUS_MALES;
              long census_females = e178->CENSUS_FEMALES;
              long census_householdschildren = e178->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e178->CENSUS_HISPANIC;
              long v178 = e178->__av;
              __SQL_SUM_AGGREGATE_224INVENTORY1.addOrDelOnZero(se4113.modify(__sql_sum_aggregate_224inventoryinventory_locn), (v177 * (v178 * (location_rgn_cd * census_medianage))));
            } while ((n178 = n178->nxt));
          }
          e177 = e177->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_225 = 0.0;
      __SQL_SUM_AGGREGATE_225INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e179 = LOCATION.head;
        while (e179) {
          long __sql_sum_aggregate_225inventoryinventory_locn = e179->LOCATION_LOCN;
          long location_zip = e179->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e179->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e179->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e179->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e179->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e179->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e179->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e179->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e179->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e179->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e179->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e179->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e179->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e179->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v179 = e179->__av;
          { //slice
            const HASH_RES_t h79 = CENSUS_mapkey0_idxfn::hash(se4117.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i180 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n180 = &(i180->buckets_[h79 % i180->size_]);
            CENSUS_entry* e180;
            do if ((e180 = n180->obj) && h79 == n180->hash && CENSUS_mapkey0_idxfn::equals(se4117, *e180)) {
              long census_population = e180->CENSUS_POPULATION;
              long census_white = e180->CENSUS_WHITE;
              long census_asian = e180->CENSUS_ASIAN;
              long census_pacific = e180->CENSUS_PACIFIC;
              long census_blackafrican = e180->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e180->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e180->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e180->CENSUS_HOUSEUNITS;
              long census_families = e180->CENSUS_FAMILIES;
              long census_households = e180->CENSUS_HOUSEHOLDS;
              long census_husbwife = e180->CENSUS_HUSBWIFE;
              long census_males = e180->CENSUS_MALES;
              long census_females = e180->CENSUS_FEMALES;
              long census_householdschildren = e180->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e180->CENSUS_HISPANIC;
              long v180 = e180->__av;
              __SQL_SUM_AGGREGATE_225INVENTORY1.addOrDelOnZero(se4116.modify(__sql_sum_aggregate_225inventoryinventory_locn), (v179 * (v180 * (location_rgn_cd * census_occupiedhouseunits))));
            } while ((n180 = n180->nxt));
          }
          e179 = e179->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_226 = 0.0;
      __SQL_SUM_AGGREGATE_226INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e181 = LOCATION.head;
        while (e181) {
          long __sql_sum_aggregate_226inventoryinventory_locn = e181->LOCATION_LOCN;
          long location_zip = e181->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e181->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e181->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e181->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e181->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e181->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e181->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e181->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e181->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e181->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e181->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e181->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e181->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e181->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v181 = e181->__av;
          { //slice
            const HASH_RES_t h80 = CENSUS_mapkey0_idxfn::hash(se4120.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i182 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n182 = &(i182->buckets_[h80 % i182->size_]);
            CENSUS_entry* e182;
            do if ((e182 = n182->obj) && h80 == n182->hash && CENSUS_mapkey0_idxfn::equals(se4120, *e182)) {
              long census_population = e182->CENSUS_POPULATION;
              long census_white = e182->CENSUS_WHITE;
              long census_asian = e182->CENSUS_ASIAN;
              long census_pacific = e182->CENSUS_PACIFIC;
              long census_blackafrican = e182->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e182->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e182->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e182->CENSUS_HOUSEUNITS;
              long census_families = e182->CENSUS_FAMILIES;
              long census_households = e182->CENSUS_HOUSEHOLDS;
              long census_husbwife = e182->CENSUS_HUSBWIFE;
              long census_males = e182->CENSUS_MALES;
              long census_females = e182->CENSUS_FEMALES;
              long census_householdschildren = e182->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e182->CENSUS_HISPANIC;
              long v182 = e182->__av;
              __SQL_SUM_AGGREGATE_226INVENTORY1.addOrDelOnZero(se4119.modify(__sql_sum_aggregate_226inventoryinventory_locn), (v181 * (v182 * (location_rgn_cd * census_houseunits))));
            } while ((n182 = n182->nxt));
          }
          e181 = e181->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_227 = 0.0;
      __SQL_SUM_AGGREGATE_227INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e183 = LOCATION.head;
        while (e183) {
          long __sql_sum_aggregate_227inventoryinventory_locn = e183->LOCATION_LOCN;
          long location_zip = e183->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e183->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e183->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e183->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e183->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e183->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e183->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e183->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e183->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e183->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e183->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e183->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e183->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e183->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v183 = e183->__av;
          { //slice
            const HASH_RES_t h81 = CENSUS_mapkey0_idxfn::hash(se4123.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i184 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n184 = &(i184->buckets_[h81 % i184->size_]);
            CENSUS_entry* e184;
            do if ((e184 = n184->obj) && h81 == n184->hash && CENSUS_mapkey0_idxfn::equals(se4123, *e184)) {
              long census_population = e184->CENSUS_POPULATION;
              long census_white = e184->CENSUS_WHITE;
              long census_asian = e184->CENSUS_ASIAN;
              long census_pacific = e184->CENSUS_PACIFIC;
              long census_blackafrican = e184->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e184->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e184->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e184->CENSUS_HOUSEUNITS;
              long census_families = e184->CENSUS_FAMILIES;
              long census_households = e184->CENSUS_HOUSEHOLDS;
              long census_husbwife = e184->CENSUS_HUSBWIFE;
              long census_males = e184->CENSUS_MALES;
              long census_females = e184->CENSUS_FEMALES;
              long census_householdschildren = e184->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e184->CENSUS_HISPANIC;
              long v184 = e184->__av;
              __SQL_SUM_AGGREGATE_227INVENTORY1.addOrDelOnZero(se4122.modify(__sql_sum_aggregate_227inventoryinventory_locn), (v183 * (v184 * (location_rgn_cd * census_families))));
            } while ((n184 = n184->nxt));
          }
          e183 = e183->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_228 = 0.0;
      __SQL_SUM_AGGREGATE_228INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e185 = LOCATION.head;
        while (e185) {
          long __sql_sum_aggregate_228inventoryinventory_locn = e185->LOCATION_LOCN;
          long location_zip = e185->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e185->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e185->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e185->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e185->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e185->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e185->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e185->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e185->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e185->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e185->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e185->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e185->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e185->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v185 = e185->__av;
          { //slice
            const HASH_RES_t h82 = CENSUS_mapkey0_idxfn::hash(se4126.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i186 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n186 = &(i186->buckets_[h82 % i186->size_]);
            CENSUS_entry* e186;
            do if ((e186 = n186->obj) && h82 == n186->hash && CENSUS_mapkey0_idxfn::equals(se4126, *e186)) {
              long census_population = e186->CENSUS_POPULATION;
              long census_white = e186->CENSUS_WHITE;
              long census_asian = e186->CENSUS_ASIAN;
              long census_pacific = e186->CENSUS_PACIFIC;
              long census_blackafrican = e186->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e186->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e186->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e186->CENSUS_HOUSEUNITS;
              long census_families = e186->CENSUS_FAMILIES;
              long census_households = e186->CENSUS_HOUSEHOLDS;
              long census_husbwife = e186->CENSUS_HUSBWIFE;
              long census_males = e186->CENSUS_MALES;
              long census_females = e186->CENSUS_FEMALES;
              long census_householdschildren = e186->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e186->CENSUS_HISPANIC;
              long v186 = e186->__av;
              __SQL_SUM_AGGREGATE_228INVENTORY1.addOrDelOnZero(se4125.modify(__sql_sum_aggregate_228inventoryinventory_locn), (v185 * (v186 * (location_rgn_cd * census_households))));
            } while ((n186 = n186->nxt));
          }
          e185 = e185->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_229 = 0.0;
      __SQL_SUM_AGGREGATE_229INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e187 = LOCATION.head;
        while (e187) {
          long __sql_sum_aggregate_229inventoryinventory_locn = e187->LOCATION_LOCN;
          long location_zip = e187->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e187->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e187->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e187->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e187->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e187->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e187->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e187->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e187->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e187->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e187->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e187->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e187->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e187->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v187 = e187->__av;
          { //slice
            const HASH_RES_t h83 = CENSUS_mapkey0_idxfn::hash(se4129.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i188 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n188 = &(i188->buckets_[h83 % i188->size_]);
            CENSUS_entry* e188;
            do if ((e188 = n188->obj) && h83 == n188->hash && CENSUS_mapkey0_idxfn::equals(se4129, *e188)) {
              long census_population = e188->CENSUS_POPULATION;
              long census_white = e188->CENSUS_WHITE;
              long census_asian = e188->CENSUS_ASIAN;
              long census_pacific = e188->CENSUS_PACIFIC;
              long census_blackafrican = e188->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e188->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e188->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e188->CENSUS_HOUSEUNITS;
              long census_families = e188->CENSUS_FAMILIES;
              long census_households = e188->CENSUS_HOUSEHOLDS;
              long census_husbwife = e188->CENSUS_HUSBWIFE;
              long census_males = e188->CENSUS_MALES;
              long census_females = e188->CENSUS_FEMALES;
              long census_householdschildren = e188->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e188->CENSUS_HISPANIC;
              long v188 = e188->__av;
              __SQL_SUM_AGGREGATE_229INVENTORY1.addOrDelOnZero(se4128.modify(__sql_sum_aggregate_229inventoryinventory_locn), (v187 * (v188 * (location_rgn_cd * census_husbwife))));
            } while ((n188 = n188->nxt));
          }
          e187 = e187->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_230 = 0.0;
      __SQL_SUM_AGGREGATE_230INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e189 = LOCATION.head;
        while (e189) {
          long __sql_sum_aggregate_230inventoryinventory_locn = e189->LOCATION_LOCN;
          long location_zip = e189->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e189->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e189->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e189->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e189->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e189->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e189->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e189->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e189->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e189->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e189->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e189->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e189->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e189->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v189 = e189->__av;
          { //slice
            const HASH_RES_t h84 = CENSUS_mapkey0_idxfn::hash(se4132.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i190 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n190 = &(i190->buckets_[h84 % i190->size_]);
            CENSUS_entry* e190;
            do if ((e190 = n190->obj) && h84 == n190->hash && CENSUS_mapkey0_idxfn::equals(se4132, *e190)) {
              long census_population = e190->CENSUS_POPULATION;
              long census_white = e190->CENSUS_WHITE;
              long census_asian = e190->CENSUS_ASIAN;
              long census_pacific = e190->CENSUS_PACIFIC;
              long census_blackafrican = e190->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e190->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e190->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e190->CENSUS_HOUSEUNITS;
              long census_families = e190->CENSUS_FAMILIES;
              long census_households = e190->CENSUS_HOUSEHOLDS;
              long census_husbwife = e190->CENSUS_HUSBWIFE;
              long census_males = e190->CENSUS_MALES;
              long census_females = e190->CENSUS_FEMALES;
              long census_householdschildren = e190->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e190->CENSUS_HISPANIC;
              long v190 = e190->__av;
              __SQL_SUM_AGGREGATE_230INVENTORY1.addOrDelOnZero(se4131.modify(__sql_sum_aggregate_230inventoryinventory_locn), (v189 * (v190 * (location_rgn_cd * census_males))));
            } while ((n190 = n190->nxt));
          }
          e189 = e189->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_231 = 0.0;
      __SQL_SUM_AGGREGATE_231INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e191 = LOCATION.head;
        while (e191) {
          long __sql_sum_aggregate_231inventoryinventory_locn = e191->LOCATION_LOCN;
          long location_zip = e191->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e191->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e191->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e191->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e191->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e191->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e191->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e191->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e191->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e191->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e191->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e191->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e191->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e191->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v191 = e191->__av;
          { //slice
            const HASH_RES_t h85 = CENSUS_mapkey0_idxfn::hash(se4135.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i192 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n192 = &(i192->buckets_[h85 % i192->size_]);
            CENSUS_entry* e192;
            do if ((e192 = n192->obj) && h85 == n192->hash && CENSUS_mapkey0_idxfn::equals(se4135, *e192)) {
              long census_population = e192->CENSUS_POPULATION;
              long census_white = e192->CENSUS_WHITE;
              long census_asian = e192->CENSUS_ASIAN;
              long census_pacific = e192->CENSUS_PACIFIC;
              long census_blackafrican = e192->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e192->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e192->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e192->CENSUS_HOUSEUNITS;
              long census_families = e192->CENSUS_FAMILIES;
              long census_households = e192->CENSUS_HOUSEHOLDS;
              long census_husbwife = e192->CENSUS_HUSBWIFE;
              long census_males = e192->CENSUS_MALES;
              long census_females = e192->CENSUS_FEMALES;
              long census_householdschildren = e192->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e192->CENSUS_HISPANIC;
              long v192 = e192->__av;
              __SQL_SUM_AGGREGATE_231INVENTORY1.addOrDelOnZero(se4134.modify(__sql_sum_aggregate_231inventoryinventory_locn), (v191 * (v192 * (location_rgn_cd * census_females))));
            } while ((n192 = n192->nxt));
          }
          e191 = e191->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_232 = 0.0;
      __SQL_SUM_AGGREGATE_232INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e193 = LOCATION.head;
        while (e193) {
          long __sql_sum_aggregate_232inventoryinventory_locn = e193->LOCATION_LOCN;
          long location_zip = e193->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e193->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e193->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e193->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e193->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e193->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e193->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e193->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e193->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e193->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e193->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e193->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e193->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e193->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v193 = e193->__av;
          { //slice
            const HASH_RES_t h86 = CENSUS_mapkey0_idxfn::hash(se4138.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i194 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n194 = &(i194->buckets_[h86 % i194->size_]);
            CENSUS_entry* e194;
            do if ((e194 = n194->obj) && h86 == n194->hash && CENSUS_mapkey0_idxfn::equals(se4138, *e194)) {
              long census_population = e194->CENSUS_POPULATION;
              long census_white = e194->CENSUS_WHITE;
              long census_asian = e194->CENSUS_ASIAN;
              long census_pacific = e194->CENSUS_PACIFIC;
              long census_blackafrican = e194->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e194->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e194->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e194->CENSUS_HOUSEUNITS;
              long census_families = e194->CENSUS_FAMILIES;
              long census_households = e194->CENSUS_HOUSEHOLDS;
              long census_husbwife = e194->CENSUS_HUSBWIFE;
              long census_males = e194->CENSUS_MALES;
              long census_females = e194->CENSUS_FEMALES;
              long census_householdschildren = e194->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e194->CENSUS_HISPANIC;
              long v194 = e194->__av;
              __SQL_SUM_AGGREGATE_232INVENTORY1.addOrDelOnZero(se4137.modify(__sql_sum_aggregate_232inventoryinventory_locn), (v193 * (v194 * (location_rgn_cd * census_householdschildren))));
            } while ((n194 = n194->nxt));
          }
          e193 = e193->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_233 = 0.0;
      __SQL_SUM_AGGREGATE_233INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e195 = LOCATION.head;
        while (e195) {
          long __sql_sum_aggregate_233inventoryinventory_locn = e195->LOCATION_LOCN;
          long location_zip = e195->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e195->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e195->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e195->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e195->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e195->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e195->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e195->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e195->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e195->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e195->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e195->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e195->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e195->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v195 = e195->__av;
          { //slice
            const HASH_RES_t h87 = CENSUS_mapkey0_idxfn::hash(se4141.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i196 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n196 = &(i196->buckets_[h87 % i196->size_]);
            CENSUS_entry* e196;
            do if ((e196 = n196->obj) && h87 == n196->hash && CENSUS_mapkey0_idxfn::equals(se4141, *e196)) {
              long census_population = e196->CENSUS_POPULATION;
              long census_white = e196->CENSUS_WHITE;
              long census_asian = e196->CENSUS_ASIAN;
              long census_pacific = e196->CENSUS_PACIFIC;
              long census_blackafrican = e196->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e196->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e196->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e196->CENSUS_HOUSEUNITS;
              long census_families = e196->CENSUS_FAMILIES;
              long census_households = e196->CENSUS_HOUSEHOLDS;
              long census_husbwife = e196->CENSUS_HUSBWIFE;
              long census_males = e196->CENSUS_MALES;
              long census_females = e196->CENSUS_FEMALES;
              long census_householdschildren = e196->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e196->CENSUS_HISPANIC;
              long v196 = e196->__av;
              __SQL_SUM_AGGREGATE_233INVENTORY1.addOrDelOnZero(se4140.modify(__sql_sum_aggregate_233inventoryinventory_locn), (v195 * (v196 * (location_rgn_cd * census_hispanic))));
            } while ((n196 = n196->nxt));
          }
          e195 = e195->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_234 = 0.0;
      __SQL_SUM_AGGREGATE_235 = 0.0;
      __SQL_SUM_AGGREGATE_236 = 0.0;
      __SQL_SUM_AGGREGATE_237 = 0.0;
      __SQL_SUM_AGGREGATE_238 = 0.0;
      __SQL_SUM_AGGREGATE_239 = 0.0;
      __SQL_SUM_AGGREGATE_240 = 0.0;
      __SQL_SUM_AGGREGATE_241 = 0.0;
      __SQL_SUM_AGGREGATE_242 = 0.0;
      __SQL_SUM_AGGREGATE_243 = 0.0;
      __SQL_SUM_AGGREGATE_244 = 0.0;
      __SQL_SUM_AGGREGATE_244INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e197 = LOCATION.head;
        while (e197) {
          long __sql_sum_aggregate_244inventoryinventory_locn = e197->LOCATION_LOCN;
          long location_zip = e197->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e197->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e197->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e197->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e197->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e197->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e197->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e197->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e197->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e197->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e197->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e197->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e197->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e197->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v197 = e197->__av;
          { //slice
            const HASH_RES_t h88 = CENSUS_mapkey0_idxfn::hash(se4154.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i198 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n198 = &(i198->buckets_[h88 % i198->size_]);
            CENSUS_entry* e198;
            do if ((e198 = n198->obj) && h88 == n198->hash && CENSUS_mapkey0_idxfn::equals(se4154, *e198)) {
              long census_population = e198->CENSUS_POPULATION;
              long census_white = e198->CENSUS_WHITE;
              long census_asian = e198->CENSUS_ASIAN;
              long census_pacific = e198->CENSUS_PACIFIC;
              long census_blackafrican = e198->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e198->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e198->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e198->CENSUS_HOUSEUNITS;
              long census_families = e198->CENSUS_FAMILIES;
              long census_households = e198->CENSUS_HOUSEHOLDS;
              long census_husbwife = e198->CENSUS_HUSBWIFE;
              long census_males = e198->CENSUS_MALES;
              long census_females = e198->CENSUS_FEMALES;
              long census_householdschildren = e198->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e198->CENSUS_HISPANIC;
              long v198 = e198->__av;
              __SQL_SUM_AGGREGATE_244INVENTORY1.addOrDelOnZero(se4153.modify(__sql_sum_aggregate_244inventoryinventory_locn), (v197 * (v198 * (location_clim_zn_nbr * location_clim_zn_nbr))));
            } while ((n198 = n198->nxt));
          }
          e197 = e197->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_245 = 0.0;
      __SQL_SUM_AGGREGATE_245INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e199 = LOCATION.head;
        while (e199) {
          long __sql_sum_aggregate_245inventoryinventory_locn = e199->LOCATION_LOCN;
          long location_zip = e199->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e199->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e199->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e199->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e199->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e199->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e199->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e199->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e199->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e199->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e199->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e199->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e199->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e199->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v199 = e199->__av;
          { //slice
            const HASH_RES_t h89 = CENSUS_mapkey0_idxfn::hash(se4157.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i200 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n200 = &(i200->buckets_[h89 % i200->size_]);
            CENSUS_entry* e200;
            do if ((e200 = n200->obj) && h89 == n200->hash && CENSUS_mapkey0_idxfn::equals(se4157, *e200)) {
              long census_population = e200->CENSUS_POPULATION;
              long census_white = e200->CENSUS_WHITE;
              long census_asian = e200->CENSUS_ASIAN;
              long census_pacific = e200->CENSUS_PACIFIC;
              long census_blackafrican = e200->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e200->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e200->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e200->CENSUS_HOUSEUNITS;
              long census_families = e200->CENSUS_FAMILIES;
              long census_households = e200->CENSUS_HOUSEHOLDS;
              long census_husbwife = e200->CENSUS_HUSBWIFE;
              long census_males = e200->CENSUS_MALES;
              long census_females = e200->CENSUS_FEMALES;
              long census_householdschildren = e200->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e200->CENSUS_HISPANIC;
              long v200 = e200->__av;
              __SQL_SUM_AGGREGATE_245INVENTORY1.addOrDelOnZero(se4156.modify(__sql_sum_aggregate_245inventoryinventory_locn), (v199 * (v200 * (location_clim_zn_nbr * location_tot_area_sq_ft))));
            } while ((n200 = n200->nxt));
          }
          e199 = e199->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_246 = 0.0;
      __SQL_SUM_AGGREGATE_246INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e201 = LOCATION.head;
        while (e201) {
          long __sql_sum_aggregate_246inventoryinventory_locn = e201->LOCATION_LOCN;
          long location_zip = e201->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e201->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e201->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e201->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e201->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e201->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e201->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e201->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e201->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e201->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e201->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e201->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e201->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e201->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v201 = e201->__av;
          { //slice
            const HASH_RES_t h90 = CENSUS_mapkey0_idxfn::hash(se4160.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i202 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n202 = &(i202->buckets_[h90 % i202->size_]);
            CENSUS_entry* e202;
            do if ((e202 = n202->obj) && h90 == n202->hash && CENSUS_mapkey0_idxfn::equals(se4160, *e202)) {
              long census_population = e202->CENSUS_POPULATION;
              long census_white = e202->CENSUS_WHITE;
              long census_asian = e202->CENSUS_ASIAN;
              long census_pacific = e202->CENSUS_PACIFIC;
              long census_blackafrican = e202->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e202->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e202->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e202->CENSUS_HOUSEUNITS;
              long census_families = e202->CENSUS_FAMILIES;
              long census_households = e202->CENSUS_HOUSEHOLDS;
              long census_husbwife = e202->CENSUS_HUSBWIFE;
              long census_males = e202->CENSUS_MALES;
              long census_females = e202->CENSUS_FEMALES;
              long census_householdschildren = e202->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e202->CENSUS_HISPANIC;
              long v202 = e202->__av;
              __SQL_SUM_AGGREGATE_246INVENTORY1.addOrDelOnZero(se4159.modify(__sql_sum_aggregate_246inventoryinventory_locn), (v201 * (v202 * (location_clim_zn_nbr * location_sell_area_sq_ft))));
            } while ((n202 = n202->nxt));
          }
          e201 = e201->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_247 = 0.0;
      __SQL_SUM_AGGREGATE_247INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e203 = LOCATION.head;
        while (e203) {
          long __sql_sum_aggregate_247inventoryinventory_locn = e203->LOCATION_LOCN;
          long location_zip = e203->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e203->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e203->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e203->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e203->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e203->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e203->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e203->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e203->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e203->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e203->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e203->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e203->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e203->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v203 = e203->__av;
          { //slice
            const HASH_RES_t h91 = CENSUS_mapkey0_idxfn::hash(se4163.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i204 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n204 = &(i204->buckets_[h91 % i204->size_]);
            CENSUS_entry* e204;
            do if ((e204 = n204->obj) && h91 == n204->hash && CENSUS_mapkey0_idxfn::equals(se4163, *e204)) {
              long census_population = e204->CENSUS_POPULATION;
              long census_white = e204->CENSUS_WHITE;
              long census_asian = e204->CENSUS_ASIAN;
              long census_pacific = e204->CENSUS_PACIFIC;
              long census_blackafrican = e204->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e204->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e204->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e204->CENSUS_HOUSEUNITS;
              long census_families = e204->CENSUS_FAMILIES;
              long census_households = e204->CENSUS_HOUSEHOLDS;
              long census_husbwife = e204->CENSUS_HUSBWIFE;
              long census_males = e204->CENSUS_MALES;
              long census_females = e204->CENSUS_FEMALES;
              long census_householdschildren = e204->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e204->CENSUS_HISPANIC;
              long v204 = e204->__av;
              __SQL_SUM_AGGREGATE_247INVENTORY1.addOrDelOnZero(se4162.modify(__sql_sum_aggregate_247inventoryinventory_locn), (v203 * (v204 * (location_clim_zn_nbr * location_avghhi))));
            } while ((n204 = n204->nxt));
          }
          e203 = e203->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_248 = 0.0;
      __SQL_SUM_AGGREGATE_248INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e205 = LOCATION.head;
        while (e205) {
          long __sql_sum_aggregate_248inventoryinventory_locn = e205->LOCATION_LOCN;
          long location_zip = e205->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e205->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e205->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e205->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e205->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e205->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e205->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e205->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e205->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e205->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e205->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e205->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e205->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e205->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v205 = e205->__av;
          { //slice
            const HASH_RES_t h92 = CENSUS_mapkey0_idxfn::hash(se4166.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i206 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n206 = &(i206->buckets_[h92 % i206->size_]);
            CENSUS_entry* e206;
            do if ((e206 = n206->obj) && h92 == n206->hash && CENSUS_mapkey0_idxfn::equals(se4166, *e206)) {
              long census_population = e206->CENSUS_POPULATION;
              long census_white = e206->CENSUS_WHITE;
              long census_asian = e206->CENSUS_ASIAN;
              long census_pacific = e206->CENSUS_PACIFIC;
              long census_blackafrican = e206->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e206->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e206->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e206->CENSUS_HOUSEUNITS;
              long census_families = e206->CENSUS_FAMILIES;
              long census_households = e206->CENSUS_HOUSEHOLDS;
              long census_husbwife = e206->CENSUS_HUSBWIFE;
              long census_males = e206->CENSUS_MALES;
              long census_females = e206->CENSUS_FEMALES;
              long census_householdschildren = e206->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e206->CENSUS_HISPANIC;
              long v206 = e206->__av;
              __SQL_SUM_AGGREGATE_248INVENTORY1.addOrDelOnZero(se4165.modify(__sql_sum_aggregate_248inventoryinventory_locn), (v205 * (v206 * (location_clim_zn_nbr * location_supertargetdistance))));
            } while ((n206 = n206->nxt));
          }
          e205 = e205->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_249 = 0.0;
      __SQL_SUM_AGGREGATE_249INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e207 = LOCATION.head;
        while (e207) {
          long __sql_sum_aggregate_249inventoryinventory_locn = e207->LOCATION_LOCN;
          long location_zip = e207->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e207->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e207->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e207->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e207->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e207->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e207->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e207->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e207->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e207->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e207->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e207->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e207->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e207->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v207 = e207->__av;
          { //slice
            const HASH_RES_t h93 = CENSUS_mapkey0_idxfn::hash(se4169.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i208 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n208 = &(i208->buckets_[h93 % i208->size_]);
            CENSUS_entry* e208;
            do if ((e208 = n208->obj) && h93 == n208->hash && CENSUS_mapkey0_idxfn::equals(se4169, *e208)) {
              long census_population = e208->CENSUS_POPULATION;
              long census_white = e208->CENSUS_WHITE;
              long census_asian = e208->CENSUS_ASIAN;
              long census_pacific = e208->CENSUS_PACIFIC;
              long census_blackafrican = e208->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e208->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e208->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e208->CENSUS_HOUSEUNITS;
              long census_families = e208->CENSUS_FAMILIES;
              long census_households = e208->CENSUS_HOUSEHOLDS;
              long census_husbwife = e208->CENSUS_HUSBWIFE;
              long census_males = e208->CENSUS_MALES;
              long census_females = e208->CENSUS_FEMALES;
              long census_householdschildren = e208->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e208->CENSUS_HISPANIC;
              long v208 = e208->__av;
              __SQL_SUM_AGGREGATE_249INVENTORY1.addOrDelOnZero(se4168.modify(__sql_sum_aggregate_249inventoryinventory_locn), (v207 * (v208 * (location_clim_zn_nbr * location_supertargetdrivetime))));
            } while ((n208 = n208->nxt));
          }
          e207 = e207->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_250 = 0.0;
      __SQL_SUM_AGGREGATE_250INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e209 = LOCATION.head;
        while (e209) {
          long __sql_sum_aggregate_250inventoryinventory_locn = e209->LOCATION_LOCN;
          long location_zip = e209->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e209->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e209->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e209->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e209->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e209->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e209->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e209->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e209->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e209->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e209->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e209->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e209->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e209->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v209 = e209->__av;
          { //slice
            const HASH_RES_t h94 = CENSUS_mapkey0_idxfn::hash(se4172.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i210 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n210 = &(i210->buckets_[h94 % i210->size_]);
            CENSUS_entry* e210;
            do if ((e210 = n210->obj) && h94 == n210->hash && CENSUS_mapkey0_idxfn::equals(se4172, *e210)) {
              long census_population = e210->CENSUS_POPULATION;
              long census_white = e210->CENSUS_WHITE;
              long census_asian = e210->CENSUS_ASIAN;
              long census_pacific = e210->CENSUS_PACIFIC;
              long census_blackafrican = e210->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e210->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e210->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e210->CENSUS_HOUSEUNITS;
              long census_families = e210->CENSUS_FAMILIES;
              long census_households = e210->CENSUS_HOUSEHOLDS;
              long census_husbwife = e210->CENSUS_HUSBWIFE;
              long census_males = e210->CENSUS_MALES;
              long census_females = e210->CENSUS_FEMALES;
              long census_householdschildren = e210->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e210->CENSUS_HISPANIC;
              long v210 = e210->__av;
              __SQL_SUM_AGGREGATE_250INVENTORY1.addOrDelOnZero(se4171.modify(__sql_sum_aggregate_250inventoryinventory_locn), (v209 * (v210 * (location_clim_zn_nbr * location_targetdistance))));
            } while ((n210 = n210->nxt));
          }
          e209 = e209->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_251 = 0.0;
      __SQL_SUM_AGGREGATE_251INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e211 = LOCATION.head;
        while (e211) {
          long __sql_sum_aggregate_251inventoryinventory_locn = e211->LOCATION_LOCN;
          long location_zip = e211->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e211->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e211->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e211->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e211->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e211->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e211->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e211->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e211->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e211->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e211->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e211->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e211->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e211->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v211 = e211->__av;
          { //slice
            const HASH_RES_t h95 = CENSUS_mapkey0_idxfn::hash(se4175.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i212 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n212 = &(i212->buckets_[h95 % i212->size_]);
            CENSUS_entry* e212;
            do if ((e212 = n212->obj) && h95 == n212->hash && CENSUS_mapkey0_idxfn::equals(se4175, *e212)) {
              long census_population = e212->CENSUS_POPULATION;
              long census_white = e212->CENSUS_WHITE;
              long census_asian = e212->CENSUS_ASIAN;
              long census_pacific = e212->CENSUS_PACIFIC;
              long census_blackafrican = e212->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e212->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e212->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e212->CENSUS_HOUSEUNITS;
              long census_families = e212->CENSUS_FAMILIES;
              long census_households = e212->CENSUS_HOUSEHOLDS;
              long census_husbwife = e212->CENSUS_HUSBWIFE;
              long census_males = e212->CENSUS_MALES;
              long census_females = e212->CENSUS_FEMALES;
              long census_householdschildren = e212->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e212->CENSUS_HISPANIC;
              long v212 = e212->__av;
              __SQL_SUM_AGGREGATE_251INVENTORY1.addOrDelOnZero(se4174.modify(__sql_sum_aggregate_251inventoryinventory_locn), (v211 * (v212 * (location_clim_zn_nbr * location_targetdrivetime))));
            } while ((n212 = n212->nxt));
          }
          e211 = e211->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_252 = 0.0;
      __SQL_SUM_AGGREGATE_252INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e213 = LOCATION.head;
        while (e213) {
          long __sql_sum_aggregate_252inventoryinventory_locn = e213->LOCATION_LOCN;
          long location_zip = e213->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e213->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e213->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e213->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e213->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e213->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e213->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e213->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e213->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e213->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e213->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e213->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e213->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e213->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v213 = e213->__av;
          { //slice
            const HASH_RES_t h96 = CENSUS_mapkey0_idxfn::hash(se4178.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i214 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n214 = &(i214->buckets_[h96 % i214->size_]);
            CENSUS_entry* e214;
            do if ((e214 = n214->obj) && h96 == n214->hash && CENSUS_mapkey0_idxfn::equals(se4178, *e214)) {
              long census_population = e214->CENSUS_POPULATION;
              long census_white = e214->CENSUS_WHITE;
              long census_asian = e214->CENSUS_ASIAN;
              long census_pacific = e214->CENSUS_PACIFIC;
              long census_blackafrican = e214->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e214->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e214->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e214->CENSUS_HOUSEUNITS;
              long census_families = e214->CENSUS_FAMILIES;
              long census_households = e214->CENSUS_HOUSEHOLDS;
              long census_husbwife = e214->CENSUS_HUSBWIFE;
              long census_males = e214->CENSUS_MALES;
              long census_females = e214->CENSUS_FEMALES;
              long census_householdschildren = e214->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e214->CENSUS_HISPANIC;
              long v214 = e214->__av;
              __SQL_SUM_AGGREGATE_252INVENTORY1.addOrDelOnZero(se4177.modify(__sql_sum_aggregate_252inventoryinventory_locn), (v213 * (v214 * (location_clim_zn_nbr * location_walmartdistance))));
            } while ((n214 = n214->nxt));
          }
          e213 = e213->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_253 = 0.0;
      __SQL_SUM_AGGREGATE_253INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e215 = LOCATION.head;
        while (e215) {
          long __sql_sum_aggregate_253inventoryinventory_locn = e215->LOCATION_LOCN;
          long location_zip = e215->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e215->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e215->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e215->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e215->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e215->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e215->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e215->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e215->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e215->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e215->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e215->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e215->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e215->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v215 = e215->__av;
          { //slice
            const HASH_RES_t h97 = CENSUS_mapkey0_idxfn::hash(se4181.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i216 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n216 = &(i216->buckets_[h97 % i216->size_]);
            CENSUS_entry* e216;
            do if ((e216 = n216->obj) && h97 == n216->hash && CENSUS_mapkey0_idxfn::equals(se4181, *e216)) {
              long census_population = e216->CENSUS_POPULATION;
              long census_white = e216->CENSUS_WHITE;
              long census_asian = e216->CENSUS_ASIAN;
              long census_pacific = e216->CENSUS_PACIFIC;
              long census_blackafrican = e216->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e216->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e216->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e216->CENSUS_HOUSEUNITS;
              long census_families = e216->CENSUS_FAMILIES;
              long census_households = e216->CENSUS_HOUSEHOLDS;
              long census_husbwife = e216->CENSUS_HUSBWIFE;
              long census_males = e216->CENSUS_MALES;
              long census_females = e216->CENSUS_FEMALES;
              long census_householdschildren = e216->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e216->CENSUS_HISPANIC;
              long v216 = e216->__av;
              __SQL_SUM_AGGREGATE_253INVENTORY1.addOrDelOnZero(se4180.modify(__sql_sum_aggregate_253inventoryinventory_locn), (v215 * (v216 * (location_clim_zn_nbr * location_walmartdrivetime))));
            } while ((n216 = n216->nxt));
          }
          e215 = e215->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_254 = 0.0;
      __SQL_SUM_AGGREGATE_254INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e217 = LOCATION.head;
        while (e217) {
          long __sql_sum_aggregate_254inventoryinventory_locn = e217->LOCATION_LOCN;
          long location_zip = e217->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e217->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e217->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e217->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e217->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e217->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e217->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e217->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e217->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e217->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e217->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e217->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e217->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e217->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v217 = e217->__av;
          { //slice
            const HASH_RES_t h98 = CENSUS_mapkey0_idxfn::hash(se4184.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i218 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n218 = &(i218->buckets_[h98 % i218->size_]);
            CENSUS_entry* e218;
            do if ((e218 = n218->obj) && h98 == n218->hash && CENSUS_mapkey0_idxfn::equals(se4184, *e218)) {
              long census_population = e218->CENSUS_POPULATION;
              long census_white = e218->CENSUS_WHITE;
              long census_asian = e218->CENSUS_ASIAN;
              long census_pacific = e218->CENSUS_PACIFIC;
              long census_blackafrican = e218->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e218->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e218->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e218->CENSUS_HOUSEUNITS;
              long census_families = e218->CENSUS_FAMILIES;
              long census_households = e218->CENSUS_HOUSEHOLDS;
              long census_husbwife = e218->CENSUS_HUSBWIFE;
              long census_males = e218->CENSUS_MALES;
              long census_females = e218->CENSUS_FEMALES;
              long census_householdschildren = e218->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e218->CENSUS_HISPANIC;
              long v218 = e218->__av;
              __SQL_SUM_AGGREGATE_254INVENTORY1.addOrDelOnZero(se4183.modify(__sql_sum_aggregate_254inventoryinventory_locn), (v217 * (v218 * (location_clim_zn_nbr * location_walmartsupercenterdistance))));
            } while ((n218 = n218->nxt));
          }
          e217 = e217->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_255 = 0.0;
      __SQL_SUM_AGGREGATE_255INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e219 = LOCATION.head;
        while (e219) {
          long __sql_sum_aggregate_255inventoryinventory_locn = e219->LOCATION_LOCN;
          long location_zip = e219->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e219->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e219->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e219->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e219->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e219->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e219->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e219->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e219->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e219->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e219->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e219->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e219->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e219->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v219 = e219->__av;
          { //slice
            const HASH_RES_t h99 = CENSUS_mapkey0_idxfn::hash(se4187.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i220 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n220 = &(i220->buckets_[h99 % i220->size_]);
            CENSUS_entry* e220;
            do if ((e220 = n220->obj) && h99 == n220->hash && CENSUS_mapkey0_idxfn::equals(se4187, *e220)) {
              long census_population = e220->CENSUS_POPULATION;
              long census_white = e220->CENSUS_WHITE;
              long census_asian = e220->CENSUS_ASIAN;
              long census_pacific = e220->CENSUS_PACIFIC;
              long census_blackafrican = e220->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e220->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e220->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e220->CENSUS_HOUSEUNITS;
              long census_families = e220->CENSUS_FAMILIES;
              long census_households = e220->CENSUS_HOUSEHOLDS;
              long census_husbwife = e220->CENSUS_HUSBWIFE;
              long census_males = e220->CENSUS_MALES;
              long census_females = e220->CENSUS_FEMALES;
              long census_householdschildren = e220->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e220->CENSUS_HISPANIC;
              long v220 = e220->__av;
              __SQL_SUM_AGGREGATE_255INVENTORY1.addOrDelOnZero(se4186.modify(__sql_sum_aggregate_255inventoryinventory_locn), (v219 * (v220 * (location_clim_zn_nbr * location_walmartsupercenterdrivetime))));
            } while ((n220 = n220->nxt));
          }
          e219 = e219->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_256 = 0.0;
      __SQL_SUM_AGGREGATE_256INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e221 = LOCATION.head;
        while (e221) {
          long __sql_sum_aggregate_256inventoryinventory_locn = e221->LOCATION_LOCN;
          long location_zip = e221->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e221->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e221->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e221->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e221->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e221->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e221->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e221->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e221->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e221->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e221->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e221->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e221->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e221->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v221 = e221->__av;
          { //slice
            const HASH_RES_t h100 = CENSUS_mapkey0_idxfn::hash(se4190.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i222 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n222 = &(i222->buckets_[h100 % i222->size_]);
            CENSUS_entry* e222;
            do if ((e222 = n222->obj) && h100 == n222->hash && CENSUS_mapkey0_idxfn::equals(se4190, *e222)) {
              long census_population = e222->CENSUS_POPULATION;
              long census_white = e222->CENSUS_WHITE;
              long census_asian = e222->CENSUS_ASIAN;
              long census_pacific = e222->CENSUS_PACIFIC;
              long census_blackafrican = e222->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e222->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e222->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e222->CENSUS_HOUSEUNITS;
              long census_families = e222->CENSUS_FAMILIES;
              long census_households = e222->CENSUS_HOUSEHOLDS;
              long census_husbwife = e222->CENSUS_HUSBWIFE;
              long census_males = e222->CENSUS_MALES;
              long census_females = e222->CENSUS_FEMALES;
              long census_householdschildren = e222->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e222->CENSUS_HISPANIC;
              long v222 = e222->__av;
              __SQL_SUM_AGGREGATE_256INVENTORY1.addOrDelOnZero(se4189.modify(__sql_sum_aggregate_256inventoryinventory_locn), (v221 * (v222 * (location_clim_zn_nbr * census_population))));
            } while ((n222 = n222->nxt));
          }
          e221 = e221->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_257 = 0.0;
      __SQL_SUM_AGGREGATE_257INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e223 = LOCATION.head;
        while (e223) {
          long __sql_sum_aggregate_257inventoryinventory_locn = e223->LOCATION_LOCN;
          long location_zip = e223->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e223->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e223->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e223->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e223->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e223->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e223->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e223->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e223->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e223->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e223->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e223->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e223->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e223->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v223 = e223->__av;
          { //slice
            const HASH_RES_t h101 = CENSUS_mapkey0_idxfn::hash(se4193.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i224 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n224 = &(i224->buckets_[h101 % i224->size_]);
            CENSUS_entry* e224;
            do if ((e224 = n224->obj) && h101 == n224->hash && CENSUS_mapkey0_idxfn::equals(se4193, *e224)) {
              long census_population = e224->CENSUS_POPULATION;
              long census_white = e224->CENSUS_WHITE;
              long census_asian = e224->CENSUS_ASIAN;
              long census_pacific = e224->CENSUS_PACIFIC;
              long census_blackafrican = e224->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e224->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e224->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e224->CENSUS_HOUSEUNITS;
              long census_families = e224->CENSUS_FAMILIES;
              long census_households = e224->CENSUS_HOUSEHOLDS;
              long census_husbwife = e224->CENSUS_HUSBWIFE;
              long census_males = e224->CENSUS_MALES;
              long census_females = e224->CENSUS_FEMALES;
              long census_householdschildren = e224->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e224->CENSUS_HISPANIC;
              long v224 = e224->__av;
              __SQL_SUM_AGGREGATE_257INVENTORY1.addOrDelOnZero(se4192.modify(__sql_sum_aggregate_257inventoryinventory_locn), (v223 * (v224 * (location_clim_zn_nbr * census_white))));
            } while ((n224 = n224->nxt));
          }
          e223 = e223->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_258 = 0.0;
      __SQL_SUM_AGGREGATE_258INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e225 = LOCATION.head;
        while (e225) {
          long __sql_sum_aggregate_258inventoryinventory_locn = e225->LOCATION_LOCN;
          long location_zip = e225->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e225->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e225->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e225->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e225->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e225->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e225->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e225->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e225->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e225->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e225->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e225->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e225->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e225->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v225 = e225->__av;
          { //slice
            const HASH_RES_t h102 = CENSUS_mapkey0_idxfn::hash(se4196.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i226 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n226 = &(i226->buckets_[h102 % i226->size_]);
            CENSUS_entry* e226;
            do if ((e226 = n226->obj) && h102 == n226->hash && CENSUS_mapkey0_idxfn::equals(se4196, *e226)) {
              long census_population = e226->CENSUS_POPULATION;
              long census_white = e226->CENSUS_WHITE;
              long census_asian = e226->CENSUS_ASIAN;
              long census_pacific = e226->CENSUS_PACIFIC;
              long census_blackafrican = e226->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e226->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e226->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e226->CENSUS_HOUSEUNITS;
              long census_families = e226->CENSUS_FAMILIES;
              long census_households = e226->CENSUS_HOUSEHOLDS;
              long census_husbwife = e226->CENSUS_HUSBWIFE;
              long census_males = e226->CENSUS_MALES;
              long census_females = e226->CENSUS_FEMALES;
              long census_householdschildren = e226->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e226->CENSUS_HISPANIC;
              long v226 = e226->__av;
              __SQL_SUM_AGGREGATE_258INVENTORY1.addOrDelOnZero(se4195.modify(__sql_sum_aggregate_258inventoryinventory_locn), (v225 * (v226 * (location_clim_zn_nbr * census_asian))));
            } while ((n226 = n226->nxt));
          }
          e225 = e225->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_259 = 0.0;
      __SQL_SUM_AGGREGATE_259INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e227 = LOCATION.head;
        while (e227) {
          long __sql_sum_aggregate_259inventoryinventory_locn = e227->LOCATION_LOCN;
          long location_zip = e227->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e227->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e227->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e227->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e227->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e227->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e227->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e227->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e227->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e227->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e227->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e227->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e227->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e227->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v227 = e227->__av;
          { //slice
            const HASH_RES_t h103 = CENSUS_mapkey0_idxfn::hash(se4199.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i228 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n228 = &(i228->buckets_[h103 % i228->size_]);
            CENSUS_entry* e228;
            do if ((e228 = n228->obj) && h103 == n228->hash && CENSUS_mapkey0_idxfn::equals(se4199, *e228)) {
              long census_population = e228->CENSUS_POPULATION;
              long census_white = e228->CENSUS_WHITE;
              long census_asian = e228->CENSUS_ASIAN;
              long census_pacific = e228->CENSUS_PACIFIC;
              long census_blackafrican = e228->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e228->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e228->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e228->CENSUS_HOUSEUNITS;
              long census_families = e228->CENSUS_FAMILIES;
              long census_households = e228->CENSUS_HOUSEHOLDS;
              long census_husbwife = e228->CENSUS_HUSBWIFE;
              long census_males = e228->CENSUS_MALES;
              long census_females = e228->CENSUS_FEMALES;
              long census_householdschildren = e228->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e228->CENSUS_HISPANIC;
              long v228 = e228->__av;
              __SQL_SUM_AGGREGATE_259INVENTORY1.addOrDelOnZero(se4198.modify(__sql_sum_aggregate_259inventoryinventory_locn), (v227 * (v228 * (location_clim_zn_nbr * census_pacific))));
            } while ((n228 = n228->nxt));
          }
          e227 = e227->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_260 = 0.0;
      __SQL_SUM_AGGREGATE_260INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e229 = LOCATION.head;
        while (e229) {
          long __sql_sum_aggregate_260inventoryinventory_locn = e229->LOCATION_LOCN;
          long location_zip = e229->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e229->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e229->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e229->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e229->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e229->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e229->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e229->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e229->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e229->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e229->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e229->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e229->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e229->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v229 = e229->__av;
          { //slice
            const HASH_RES_t h104 = CENSUS_mapkey0_idxfn::hash(se4202.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i230 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n230 = &(i230->buckets_[h104 % i230->size_]);
            CENSUS_entry* e230;
            do if ((e230 = n230->obj) && h104 == n230->hash && CENSUS_mapkey0_idxfn::equals(se4202, *e230)) {
              long census_population = e230->CENSUS_POPULATION;
              long census_white = e230->CENSUS_WHITE;
              long census_asian = e230->CENSUS_ASIAN;
              long census_pacific = e230->CENSUS_PACIFIC;
              long census_blackafrican = e230->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e230->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e230->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e230->CENSUS_HOUSEUNITS;
              long census_families = e230->CENSUS_FAMILIES;
              long census_households = e230->CENSUS_HOUSEHOLDS;
              long census_husbwife = e230->CENSUS_HUSBWIFE;
              long census_males = e230->CENSUS_MALES;
              long census_females = e230->CENSUS_FEMALES;
              long census_householdschildren = e230->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e230->CENSUS_HISPANIC;
              long v230 = e230->__av;
              __SQL_SUM_AGGREGATE_260INVENTORY1.addOrDelOnZero(se4201.modify(__sql_sum_aggregate_260inventoryinventory_locn), (v229 * (v230 * (location_clim_zn_nbr * census_blackafrican))));
            } while ((n230 = n230->nxt));
          }
          e229 = e229->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_261 = 0.0;
      __SQL_SUM_AGGREGATE_261INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e231 = LOCATION.head;
        while (e231) {
          long __sql_sum_aggregate_261inventoryinventory_locn = e231->LOCATION_LOCN;
          long location_zip = e231->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e231->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e231->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e231->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e231->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e231->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e231->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e231->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e231->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e231->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e231->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e231->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e231->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e231->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v231 = e231->__av;
          { //slice
            const HASH_RES_t h105 = CENSUS_mapkey0_idxfn::hash(se4205.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i232 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n232 = &(i232->buckets_[h105 % i232->size_]);
            CENSUS_entry* e232;
            do if ((e232 = n232->obj) && h105 == n232->hash && CENSUS_mapkey0_idxfn::equals(se4205, *e232)) {
              long census_population = e232->CENSUS_POPULATION;
              long census_white = e232->CENSUS_WHITE;
              long census_asian = e232->CENSUS_ASIAN;
              long census_pacific = e232->CENSUS_PACIFIC;
              long census_blackafrican = e232->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e232->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e232->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e232->CENSUS_HOUSEUNITS;
              long census_families = e232->CENSUS_FAMILIES;
              long census_households = e232->CENSUS_HOUSEHOLDS;
              long census_husbwife = e232->CENSUS_HUSBWIFE;
              long census_males = e232->CENSUS_MALES;
              long census_females = e232->CENSUS_FEMALES;
              long census_householdschildren = e232->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e232->CENSUS_HISPANIC;
              long v232 = e232->__av;
              __SQL_SUM_AGGREGATE_261INVENTORY1.addOrDelOnZero(se4204.modify(__sql_sum_aggregate_261inventoryinventory_locn), (v231 * (v232 * (location_clim_zn_nbr * census_medianage))));
            } while ((n232 = n232->nxt));
          }
          e231 = e231->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_262 = 0.0;
      __SQL_SUM_AGGREGATE_262INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e233 = LOCATION.head;
        while (e233) {
          long __sql_sum_aggregate_262inventoryinventory_locn = e233->LOCATION_LOCN;
          long location_zip = e233->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e233->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e233->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e233->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e233->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e233->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e233->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e233->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e233->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e233->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e233->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e233->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e233->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e233->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v233 = e233->__av;
          { //slice
            const HASH_RES_t h106 = CENSUS_mapkey0_idxfn::hash(se4208.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i234 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n234 = &(i234->buckets_[h106 % i234->size_]);
            CENSUS_entry* e234;
            do if ((e234 = n234->obj) && h106 == n234->hash && CENSUS_mapkey0_idxfn::equals(se4208, *e234)) {
              long census_population = e234->CENSUS_POPULATION;
              long census_white = e234->CENSUS_WHITE;
              long census_asian = e234->CENSUS_ASIAN;
              long census_pacific = e234->CENSUS_PACIFIC;
              long census_blackafrican = e234->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e234->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e234->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e234->CENSUS_HOUSEUNITS;
              long census_families = e234->CENSUS_FAMILIES;
              long census_households = e234->CENSUS_HOUSEHOLDS;
              long census_husbwife = e234->CENSUS_HUSBWIFE;
              long census_males = e234->CENSUS_MALES;
              long census_females = e234->CENSUS_FEMALES;
              long census_householdschildren = e234->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e234->CENSUS_HISPANIC;
              long v234 = e234->__av;
              __SQL_SUM_AGGREGATE_262INVENTORY1.addOrDelOnZero(se4207.modify(__sql_sum_aggregate_262inventoryinventory_locn), (v233 * (v234 * (location_clim_zn_nbr * census_occupiedhouseunits))));
            } while ((n234 = n234->nxt));
          }
          e233 = e233->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_263 = 0.0;
      __SQL_SUM_AGGREGATE_263INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e235 = LOCATION.head;
        while (e235) {
          long __sql_sum_aggregate_263inventoryinventory_locn = e235->LOCATION_LOCN;
          long location_zip = e235->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e235->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e235->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e235->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e235->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e235->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e235->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e235->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e235->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e235->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e235->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e235->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e235->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e235->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v235 = e235->__av;
          { //slice
            const HASH_RES_t h107 = CENSUS_mapkey0_idxfn::hash(se4211.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i236 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n236 = &(i236->buckets_[h107 % i236->size_]);
            CENSUS_entry* e236;
            do if ((e236 = n236->obj) && h107 == n236->hash && CENSUS_mapkey0_idxfn::equals(se4211, *e236)) {
              long census_population = e236->CENSUS_POPULATION;
              long census_white = e236->CENSUS_WHITE;
              long census_asian = e236->CENSUS_ASIAN;
              long census_pacific = e236->CENSUS_PACIFIC;
              long census_blackafrican = e236->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e236->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e236->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e236->CENSUS_HOUSEUNITS;
              long census_families = e236->CENSUS_FAMILIES;
              long census_households = e236->CENSUS_HOUSEHOLDS;
              long census_husbwife = e236->CENSUS_HUSBWIFE;
              long census_males = e236->CENSUS_MALES;
              long census_females = e236->CENSUS_FEMALES;
              long census_householdschildren = e236->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e236->CENSUS_HISPANIC;
              long v236 = e236->__av;
              __SQL_SUM_AGGREGATE_263INVENTORY1.addOrDelOnZero(se4210.modify(__sql_sum_aggregate_263inventoryinventory_locn), (v235 * (v236 * (location_clim_zn_nbr * census_houseunits))));
            } while ((n236 = n236->nxt));
          }
          e235 = e235->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_264 = 0.0;
      __SQL_SUM_AGGREGATE_264INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e237 = LOCATION.head;
        while (e237) {
          long __sql_sum_aggregate_264inventoryinventory_locn = e237->LOCATION_LOCN;
          long location_zip = e237->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e237->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e237->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e237->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e237->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e237->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e237->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e237->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e237->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e237->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e237->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e237->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e237->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e237->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v237 = e237->__av;
          { //slice
            const HASH_RES_t h108 = CENSUS_mapkey0_idxfn::hash(se4214.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i238 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n238 = &(i238->buckets_[h108 % i238->size_]);
            CENSUS_entry* e238;
            do if ((e238 = n238->obj) && h108 == n238->hash && CENSUS_mapkey0_idxfn::equals(se4214, *e238)) {
              long census_population = e238->CENSUS_POPULATION;
              long census_white = e238->CENSUS_WHITE;
              long census_asian = e238->CENSUS_ASIAN;
              long census_pacific = e238->CENSUS_PACIFIC;
              long census_blackafrican = e238->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e238->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e238->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e238->CENSUS_HOUSEUNITS;
              long census_families = e238->CENSUS_FAMILIES;
              long census_households = e238->CENSUS_HOUSEHOLDS;
              long census_husbwife = e238->CENSUS_HUSBWIFE;
              long census_males = e238->CENSUS_MALES;
              long census_females = e238->CENSUS_FEMALES;
              long census_householdschildren = e238->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e238->CENSUS_HISPANIC;
              long v238 = e238->__av;
              __SQL_SUM_AGGREGATE_264INVENTORY1.addOrDelOnZero(se4213.modify(__sql_sum_aggregate_264inventoryinventory_locn), (v237 * (v238 * (location_clim_zn_nbr * census_families))));
            } while ((n238 = n238->nxt));
          }
          e237 = e237->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_265 = 0.0;
      __SQL_SUM_AGGREGATE_265INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e239 = LOCATION.head;
        while (e239) {
          long __sql_sum_aggregate_265inventoryinventory_locn = e239->LOCATION_LOCN;
          long location_zip = e239->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e239->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e239->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e239->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e239->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e239->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e239->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e239->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e239->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e239->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e239->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e239->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e239->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e239->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v239 = e239->__av;
          { //slice
            const HASH_RES_t h109 = CENSUS_mapkey0_idxfn::hash(se4217.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i240 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n240 = &(i240->buckets_[h109 % i240->size_]);
            CENSUS_entry* e240;
            do if ((e240 = n240->obj) && h109 == n240->hash && CENSUS_mapkey0_idxfn::equals(se4217, *e240)) {
              long census_population = e240->CENSUS_POPULATION;
              long census_white = e240->CENSUS_WHITE;
              long census_asian = e240->CENSUS_ASIAN;
              long census_pacific = e240->CENSUS_PACIFIC;
              long census_blackafrican = e240->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e240->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e240->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e240->CENSUS_HOUSEUNITS;
              long census_families = e240->CENSUS_FAMILIES;
              long census_households = e240->CENSUS_HOUSEHOLDS;
              long census_husbwife = e240->CENSUS_HUSBWIFE;
              long census_males = e240->CENSUS_MALES;
              long census_females = e240->CENSUS_FEMALES;
              long census_householdschildren = e240->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e240->CENSUS_HISPANIC;
              long v240 = e240->__av;
              __SQL_SUM_AGGREGATE_265INVENTORY1.addOrDelOnZero(se4216.modify(__sql_sum_aggregate_265inventoryinventory_locn), (v239 * (v240 * (location_clim_zn_nbr * census_households))));
            } while ((n240 = n240->nxt));
          }
          e239 = e239->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_266 = 0.0;
      __SQL_SUM_AGGREGATE_266INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e241 = LOCATION.head;
        while (e241) {
          long __sql_sum_aggregate_266inventoryinventory_locn = e241->LOCATION_LOCN;
          long location_zip = e241->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e241->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e241->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e241->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e241->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e241->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e241->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e241->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e241->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e241->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e241->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e241->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e241->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e241->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v241 = e241->__av;
          { //slice
            const HASH_RES_t h110 = CENSUS_mapkey0_idxfn::hash(se4220.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i242 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n242 = &(i242->buckets_[h110 % i242->size_]);
            CENSUS_entry* e242;
            do if ((e242 = n242->obj) && h110 == n242->hash && CENSUS_mapkey0_idxfn::equals(se4220, *e242)) {
              long census_population = e242->CENSUS_POPULATION;
              long census_white = e242->CENSUS_WHITE;
              long census_asian = e242->CENSUS_ASIAN;
              long census_pacific = e242->CENSUS_PACIFIC;
              long census_blackafrican = e242->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e242->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e242->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e242->CENSUS_HOUSEUNITS;
              long census_families = e242->CENSUS_FAMILIES;
              long census_households = e242->CENSUS_HOUSEHOLDS;
              long census_husbwife = e242->CENSUS_HUSBWIFE;
              long census_males = e242->CENSUS_MALES;
              long census_females = e242->CENSUS_FEMALES;
              long census_householdschildren = e242->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e242->CENSUS_HISPANIC;
              long v242 = e242->__av;
              __SQL_SUM_AGGREGATE_266INVENTORY1.addOrDelOnZero(se4219.modify(__sql_sum_aggregate_266inventoryinventory_locn), (v241 * (v242 * (location_clim_zn_nbr * census_husbwife))));
            } while ((n242 = n242->nxt));
          }
          e241 = e241->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_267 = 0.0;
      __SQL_SUM_AGGREGATE_267INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e243 = LOCATION.head;
        while (e243) {
          long __sql_sum_aggregate_267inventoryinventory_locn = e243->LOCATION_LOCN;
          long location_zip = e243->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e243->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e243->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e243->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e243->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e243->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e243->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e243->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e243->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e243->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e243->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e243->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e243->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e243->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v243 = e243->__av;
          { //slice
            const HASH_RES_t h111 = CENSUS_mapkey0_idxfn::hash(se4223.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i244 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n244 = &(i244->buckets_[h111 % i244->size_]);
            CENSUS_entry* e244;
            do if ((e244 = n244->obj) && h111 == n244->hash && CENSUS_mapkey0_idxfn::equals(se4223, *e244)) {
              long census_population = e244->CENSUS_POPULATION;
              long census_white = e244->CENSUS_WHITE;
              long census_asian = e244->CENSUS_ASIAN;
              long census_pacific = e244->CENSUS_PACIFIC;
              long census_blackafrican = e244->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e244->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e244->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e244->CENSUS_HOUSEUNITS;
              long census_families = e244->CENSUS_FAMILIES;
              long census_households = e244->CENSUS_HOUSEHOLDS;
              long census_husbwife = e244->CENSUS_HUSBWIFE;
              long census_males = e244->CENSUS_MALES;
              long census_females = e244->CENSUS_FEMALES;
              long census_householdschildren = e244->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e244->CENSUS_HISPANIC;
              long v244 = e244->__av;
              __SQL_SUM_AGGREGATE_267INVENTORY1.addOrDelOnZero(se4222.modify(__sql_sum_aggregate_267inventoryinventory_locn), (v243 * (v244 * (location_clim_zn_nbr * census_males))));
            } while ((n244 = n244->nxt));
          }
          e243 = e243->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_268 = 0.0;
      __SQL_SUM_AGGREGATE_268INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e245 = LOCATION.head;
        while (e245) {
          long __sql_sum_aggregate_268inventoryinventory_locn = e245->LOCATION_LOCN;
          long location_zip = e245->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e245->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e245->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e245->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e245->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e245->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e245->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e245->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e245->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e245->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e245->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e245->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e245->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e245->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v245 = e245->__av;
          { //slice
            const HASH_RES_t h112 = CENSUS_mapkey0_idxfn::hash(se4226.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i246 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n246 = &(i246->buckets_[h112 % i246->size_]);
            CENSUS_entry* e246;
            do if ((e246 = n246->obj) && h112 == n246->hash && CENSUS_mapkey0_idxfn::equals(se4226, *e246)) {
              long census_population = e246->CENSUS_POPULATION;
              long census_white = e246->CENSUS_WHITE;
              long census_asian = e246->CENSUS_ASIAN;
              long census_pacific = e246->CENSUS_PACIFIC;
              long census_blackafrican = e246->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e246->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e246->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e246->CENSUS_HOUSEUNITS;
              long census_families = e246->CENSUS_FAMILIES;
              long census_households = e246->CENSUS_HOUSEHOLDS;
              long census_husbwife = e246->CENSUS_HUSBWIFE;
              long census_males = e246->CENSUS_MALES;
              long census_females = e246->CENSUS_FEMALES;
              long census_householdschildren = e246->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e246->CENSUS_HISPANIC;
              long v246 = e246->__av;
              __SQL_SUM_AGGREGATE_268INVENTORY1.addOrDelOnZero(se4225.modify(__sql_sum_aggregate_268inventoryinventory_locn), (v245 * (v246 * (location_clim_zn_nbr * census_females))));
            } while ((n246 = n246->nxt));
          }
          e245 = e245->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_269 = 0.0;
      __SQL_SUM_AGGREGATE_269INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e247 = LOCATION.head;
        while (e247) {
          long __sql_sum_aggregate_269inventoryinventory_locn = e247->LOCATION_LOCN;
          long location_zip = e247->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e247->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e247->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e247->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e247->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e247->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e247->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e247->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e247->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e247->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e247->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e247->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e247->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e247->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v247 = e247->__av;
          { //slice
            const HASH_RES_t h113 = CENSUS_mapkey0_idxfn::hash(se4229.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i248 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n248 = &(i248->buckets_[h113 % i248->size_]);
            CENSUS_entry* e248;
            do if ((e248 = n248->obj) && h113 == n248->hash && CENSUS_mapkey0_idxfn::equals(se4229, *e248)) {
              long census_population = e248->CENSUS_POPULATION;
              long census_white = e248->CENSUS_WHITE;
              long census_asian = e248->CENSUS_ASIAN;
              long census_pacific = e248->CENSUS_PACIFIC;
              long census_blackafrican = e248->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e248->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e248->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e248->CENSUS_HOUSEUNITS;
              long census_families = e248->CENSUS_FAMILIES;
              long census_households = e248->CENSUS_HOUSEHOLDS;
              long census_husbwife = e248->CENSUS_HUSBWIFE;
              long census_males = e248->CENSUS_MALES;
              long census_females = e248->CENSUS_FEMALES;
              long census_householdschildren = e248->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e248->CENSUS_HISPANIC;
              long v248 = e248->__av;
              __SQL_SUM_AGGREGATE_269INVENTORY1.addOrDelOnZero(se4228.modify(__sql_sum_aggregate_269inventoryinventory_locn), (v247 * (v248 * (location_clim_zn_nbr * census_householdschildren))));
            } while ((n248 = n248->nxt));
          }
          e247 = e247->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_270 = 0.0;
      __SQL_SUM_AGGREGATE_270INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e249 = LOCATION.head;
        while (e249) {
          long __sql_sum_aggregate_270inventoryinventory_locn = e249->LOCATION_LOCN;
          long location_zip = e249->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e249->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e249->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e249->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e249->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e249->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e249->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e249->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e249->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e249->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e249->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e249->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e249->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e249->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v249 = e249->__av;
          { //slice
            const HASH_RES_t h114 = CENSUS_mapkey0_idxfn::hash(se4232.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i250 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n250 = &(i250->buckets_[h114 % i250->size_]);
            CENSUS_entry* e250;
            do if ((e250 = n250->obj) && h114 == n250->hash && CENSUS_mapkey0_idxfn::equals(se4232, *e250)) {
              long census_population = e250->CENSUS_POPULATION;
              long census_white = e250->CENSUS_WHITE;
              long census_asian = e250->CENSUS_ASIAN;
              long census_pacific = e250->CENSUS_PACIFIC;
              long census_blackafrican = e250->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e250->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e250->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e250->CENSUS_HOUSEUNITS;
              long census_families = e250->CENSUS_FAMILIES;
              long census_households = e250->CENSUS_HOUSEHOLDS;
              long census_husbwife = e250->CENSUS_HUSBWIFE;
              long census_males = e250->CENSUS_MALES;
              long census_females = e250->CENSUS_FEMALES;
              long census_householdschildren = e250->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e250->CENSUS_HISPANIC;
              long v250 = e250->__av;
              __SQL_SUM_AGGREGATE_270INVENTORY1.addOrDelOnZero(se4231.modify(__sql_sum_aggregate_270inventoryinventory_locn), (v249 * (v250 * (location_clim_zn_nbr * census_hispanic))));
            } while ((n250 = n250->nxt));
          }
          e249 = e249->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_271 = 0.0;
      __SQL_SUM_AGGREGATE_272 = 0.0;
      __SQL_SUM_AGGREGATE_273 = 0.0;
      __SQL_SUM_AGGREGATE_274 = 0.0;
      __SQL_SUM_AGGREGATE_275 = 0.0;
      __SQL_SUM_AGGREGATE_276 = 0.0;
      __SQL_SUM_AGGREGATE_277 = 0.0;
      __SQL_SUM_AGGREGATE_278 = 0.0;
      __SQL_SUM_AGGREGATE_279 = 0.0;
      __SQL_SUM_AGGREGATE_280 = 0.0;
      __SQL_SUM_AGGREGATE_281 = 0.0;
      __SQL_SUM_AGGREGATE_281INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e251 = LOCATION.head;
        while (e251) {
          long __sql_sum_aggregate_281inventoryinventory_locn = e251->LOCATION_LOCN;
          long location_zip = e251->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e251->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e251->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e251->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e251->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e251->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e251->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e251->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e251->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e251->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e251->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e251->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e251->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e251->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v251 = e251->__av;
          { //slice
            const HASH_RES_t h115 = CENSUS_mapkey0_idxfn::hash(se4245.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i252 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n252 = &(i252->buckets_[h115 % i252->size_]);
            CENSUS_entry* e252;
            do if ((e252 = n252->obj) && h115 == n252->hash && CENSUS_mapkey0_idxfn::equals(se4245, *e252)) {
              long census_population = e252->CENSUS_POPULATION;
              long census_white = e252->CENSUS_WHITE;
              long census_asian = e252->CENSUS_ASIAN;
              long census_pacific = e252->CENSUS_PACIFIC;
              long census_blackafrican = e252->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e252->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e252->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e252->CENSUS_HOUSEUNITS;
              long census_families = e252->CENSUS_FAMILIES;
              long census_households = e252->CENSUS_HOUSEHOLDS;
              long census_husbwife = e252->CENSUS_HUSBWIFE;
              long census_males = e252->CENSUS_MALES;
              long census_females = e252->CENSUS_FEMALES;
              long census_householdschildren = e252->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e252->CENSUS_HISPANIC;
              long v252 = e252->__av;
              __SQL_SUM_AGGREGATE_281INVENTORY1.addOrDelOnZero(se4244.modify(__sql_sum_aggregate_281inventoryinventory_locn), (v251 * (v252 * (location_tot_area_sq_ft * location_tot_area_sq_ft))));
            } while ((n252 = n252->nxt));
          }
          e251 = e251->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_282 = 0.0;
      __SQL_SUM_AGGREGATE_282INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e253 = LOCATION.head;
        while (e253) {
          long __sql_sum_aggregate_282inventoryinventory_locn = e253->LOCATION_LOCN;
          long location_zip = e253->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e253->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e253->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e253->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e253->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e253->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e253->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e253->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e253->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e253->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e253->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e253->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e253->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e253->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v253 = e253->__av;
          { //slice
            const HASH_RES_t h116 = CENSUS_mapkey0_idxfn::hash(se4248.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i254 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n254 = &(i254->buckets_[h116 % i254->size_]);
            CENSUS_entry* e254;
            do if ((e254 = n254->obj) && h116 == n254->hash && CENSUS_mapkey0_idxfn::equals(se4248, *e254)) {
              long census_population = e254->CENSUS_POPULATION;
              long census_white = e254->CENSUS_WHITE;
              long census_asian = e254->CENSUS_ASIAN;
              long census_pacific = e254->CENSUS_PACIFIC;
              long census_blackafrican = e254->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e254->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e254->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e254->CENSUS_HOUSEUNITS;
              long census_families = e254->CENSUS_FAMILIES;
              long census_households = e254->CENSUS_HOUSEHOLDS;
              long census_husbwife = e254->CENSUS_HUSBWIFE;
              long census_males = e254->CENSUS_MALES;
              long census_females = e254->CENSUS_FEMALES;
              long census_householdschildren = e254->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e254->CENSUS_HISPANIC;
              long v254 = e254->__av;
              __SQL_SUM_AGGREGATE_282INVENTORY1.addOrDelOnZero(se4247.modify(__sql_sum_aggregate_282inventoryinventory_locn), (v253 * (v254 * (location_tot_area_sq_ft * location_sell_area_sq_ft))));
            } while ((n254 = n254->nxt));
          }
          e253 = e253->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_283 = 0.0;
      __SQL_SUM_AGGREGATE_283INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e255 = LOCATION.head;
        while (e255) {
          long __sql_sum_aggregate_283inventoryinventory_locn = e255->LOCATION_LOCN;
          long location_zip = e255->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e255->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e255->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e255->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e255->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e255->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e255->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e255->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e255->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e255->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e255->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e255->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e255->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e255->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v255 = e255->__av;
          { //slice
            const HASH_RES_t h117 = CENSUS_mapkey0_idxfn::hash(se4251.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i256 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n256 = &(i256->buckets_[h117 % i256->size_]);
            CENSUS_entry* e256;
            do if ((e256 = n256->obj) && h117 == n256->hash && CENSUS_mapkey0_idxfn::equals(se4251, *e256)) {
              long census_population = e256->CENSUS_POPULATION;
              long census_white = e256->CENSUS_WHITE;
              long census_asian = e256->CENSUS_ASIAN;
              long census_pacific = e256->CENSUS_PACIFIC;
              long census_blackafrican = e256->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e256->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e256->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e256->CENSUS_HOUSEUNITS;
              long census_families = e256->CENSUS_FAMILIES;
              long census_households = e256->CENSUS_HOUSEHOLDS;
              long census_husbwife = e256->CENSUS_HUSBWIFE;
              long census_males = e256->CENSUS_MALES;
              long census_females = e256->CENSUS_FEMALES;
              long census_householdschildren = e256->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e256->CENSUS_HISPANIC;
              long v256 = e256->__av;
              __SQL_SUM_AGGREGATE_283INVENTORY1.addOrDelOnZero(se4250.modify(__sql_sum_aggregate_283inventoryinventory_locn), (v255 * (v256 * (location_tot_area_sq_ft * location_avghhi))));
            } while ((n256 = n256->nxt));
          }
          e255 = e255->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_284 = 0.0;
      __SQL_SUM_AGGREGATE_284INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e257 = LOCATION.head;
        while (e257) {
          long __sql_sum_aggregate_284inventoryinventory_locn = e257->LOCATION_LOCN;
          long location_zip = e257->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e257->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e257->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e257->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e257->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e257->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e257->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e257->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e257->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e257->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e257->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e257->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e257->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e257->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v257 = e257->__av;
          { //slice
            const HASH_RES_t h118 = CENSUS_mapkey0_idxfn::hash(se4254.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i258 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n258 = &(i258->buckets_[h118 % i258->size_]);
            CENSUS_entry* e258;
            do if ((e258 = n258->obj) && h118 == n258->hash && CENSUS_mapkey0_idxfn::equals(se4254, *e258)) {
              long census_population = e258->CENSUS_POPULATION;
              long census_white = e258->CENSUS_WHITE;
              long census_asian = e258->CENSUS_ASIAN;
              long census_pacific = e258->CENSUS_PACIFIC;
              long census_blackafrican = e258->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e258->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e258->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e258->CENSUS_HOUSEUNITS;
              long census_families = e258->CENSUS_FAMILIES;
              long census_households = e258->CENSUS_HOUSEHOLDS;
              long census_husbwife = e258->CENSUS_HUSBWIFE;
              long census_males = e258->CENSUS_MALES;
              long census_females = e258->CENSUS_FEMALES;
              long census_householdschildren = e258->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e258->CENSUS_HISPANIC;
              long v258 = e258->__av;
              __SQL_SUM_AGGREGATE_284INVENTORY1.addOrDelOnZero(se4253.modify(__sql_sum_aggregate_284inventoryinventory_locn), (v257 * (v258 * (location_tot_area_sq_ft * location_supertargetdistance))));
            } while ((n258 = n258->nxt));
          }
          e257 = e257->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_285 = 0.0;
      __SQL_SUM_AGGREGATE_285INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e259 = LOCATION.head;
        while (e259) {
          long __sql_sum_aggregate_285inventoryinventory_locn = e259->LOCATION_LOCN;
          long location_zip = e259->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e259->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e259->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e259->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e259->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e259->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e259->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e259->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e259->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e259->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e259->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e259->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e259->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e259->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v259 = e259->__av;
          { //slice
            const HASH_RES_t h119 = CENSUS_mapkey0_idxfn::hash(se4257.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i260 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n260 = &(i260->buckets_[h119 % i260->size_]);
            CENSUS_entry* e260;
            do if ((e260 = n260->obj) && h119 == n260->hash && CENSUS_mapkey0_idxfn::equals(se4257, *e260)) {
              long census_population = e260->CENSUS_POPULATION;
              long census_white = e260->CENSUS_WHITE;
              long census_asian = e260->CENSUS_ASIAN;
              long census_pacific = e260->CENSUS_PACIFIC;
              long census_blackafrican = e260->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e260->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e260->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e260->CENSUS_HOUSEUNITS;
              long census_families = e260->CENSUS_FAMILIES;
              long census_households = e260->CENSUS_HOUSEHOLDS;
              long census_husbwife = e260->CENSUS_HUSBWIFE;
              long census_males = e260->CENSUS_MALES;
              long census_females = e260->CENSUS_FEMALES;
              long census_householdschildren = e260->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e260->CENSUS_HISPANIC;
              long v260 = e260->__av;
              __SQL_SUM_AGGREGATE_285INVENTORY1.addOrDelOnZero(se4256.modify(__sql_sum_aggregate_285inventoryinventory_locn), (v259 * (v260 * (location_tot_area_sq_ft * location_supertargetdrivetime))));
            } while ((n260 = n260->nxt));
          }
          e259 = e259->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_286 = 0.0;
      __SQL_SUM_AGGREGATE_286INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e261 = LOCATION.head;
        while (e261) {
          long __sql_sum_aggregate_286inventoryinventory_locn = e261->LOCATION_LOCN;
          long location_zip = e261->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e261->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e261->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e261->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e261->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e261->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e261->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e261->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e261->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e261->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e261->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e261->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e261->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e261->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v261 = e261->__av;
          { //slice
            const HASH_RES_t h120 = CENSUS_mapkey0_idxfn::hash(se4260.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i262 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n262 = &(i262->buckets_[h120 % i262->size_]);
            CENSUS_entry* e262;
            do if ((e262 = n262->obj) && h120 == n262->hash && CENSUS_mapkey0_idxfn::equals(se4260, *e262)) {
              long census_population = e262->CENSUS_POPULATION;
              long census_white = e262->CENSUS_WHITE;
              long census_asian = e262->CENSUS_ASIAN;
              long census_pacific = e262->CENSUS_PACIFIC;
              long census_blackafrican = e262->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e262->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e262->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e262->CENSUS_HOUSEUNITS;
              long census_families = e262->CENSUS_FAMILIES;
              long census_households = e262->CENSUS_HOUSEHOLDS;
              long census_husbwife = e262->CENSUS_HUSBWIFE;
              long census_males = e262->CENSUS_MALES;
              long census_females = e262->CENSUS_FEMALES;
              long census_householdschildren = e262->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e262->CENSUS_HISPANIC;
              long v262 = e262->__av;
              __SQL_SUM_AGGREGATE_286INVENTORY1.addOrDelOnZero(se4259.modify(__sql_sum_aggregate_286inventoryinventory_locn), (v261 * (v262 * (location_tot_area_sq_ft * location_targetdistance))));
            } while ((n262 = n262->nxt));
          }
          e261 = e261->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_287 = 0.0;
      __SQL_SUM_AGGREGATE_287INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e263 = LOCATION.head;
        while (e263) {
          long __sql_sum_aggregate_287inventoryinventory_locn = e263->LOCATION_LOCN;
          long location_zip = e263->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e263->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e263->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e263->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e263->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e263->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e263->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e263->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e263->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e263->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e263->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e263->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e263->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e263->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v263 = e263->__av;
          { //slice
            const HASH_RES_t h121 = CENSUS_mapkey0_idxfn::hash(se4263.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i264 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n264 = &(i264->buckets_[h121 % i264->size_]);
            CENSUS_entry* e264;
            do if ((e264 = n264->obj) && h121 == n264->hash && CENSUS_mapkey0_idxfn::equals(se4263, *e264)) {
              long census_population = e264->CENSUS_POPULATION;
              long census_white = e264->CENSUS_WHITE;
              long census_asian = e264->CENSUS_ASIAN;
              long census_pacific = e264->CENSUS_PACIFIC;
              long census_blackafrican = e264->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e264->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e264->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e264->CENSUS_HOUSEUNITS;
              long census_families = e264->CENSUS_FAMILIES;
              long census_households = e264->CENSUS_HOUSEHOLDS;
              long census_husbwife = e264->CENSUS_HUSBWIFE;
              long census_males = e264->CENSUS_MALES;
              long census_females = e264->CENSUS_FEMALES;
              long census_householdschildren = e264->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e264->CENSUS_HISPANIC;
              long v264 = e264->__av;
              __SQL_SUM_AGGREGATE_287INVENTORY1.addOrDelOnZero(se4262.modify(__sql_sum_aggregate_287inventoryinventory_locn), (v263 * (v264 * (location_tot_area_sq_ft * location_targetdrivetime))));
            } while ((n264 = n264->nxt));
          }
          e263 = e263->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_288 = 0.0;
      __SQL_SUM_AGGREGATE_288INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e265 = LOCATION.head;
        while (e265) {
          long __sql_sum_aggregate_288inventoryinventory_locn = e265->LOCATION_LOCN;
          long location_zip = e265->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e265->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e265->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e265->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e265->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e265->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e265->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e265->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e265->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e265->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e265->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e265->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e265->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e265->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v265 = e265->__av;
          { //slice
            const HASH_RES_t h122 = CENSUS_mapkey0_idxfn::hash(se4266.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i266 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n266 = &(i266->buckets_[h122 % i266->size_]);
            CENSUS_entry* e266;
            do if ((e266 = n266->obj) && h122 == n266->hash && CENSUS_mapkey0_idxfn::equals(se4266, *e266)) {
              long census_population = e266->CENSUS_POPULATION;
              long census_white = e266->CENSUS_WHITE;
              long census_asian = e266->CENSUS_ASIAN;
              long census_pacific = e266->CENSUS_PACIFIC;
              long census_blackafrican = e266->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e266->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e266->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e266->CENSUS_HOUSEUNITS;
              long census_families = e266->CENSUS_FAMILIES;
              long census_households = e266->CENSUS_HOUSEHOLDS;
              long census_husbwife = e266->CENSUS_HUSBWIFE;
              long census_males = e266->CENSUS_MALES;
              long census_females = e266->CENSUS_FEMALES;
              long census_householdschildren = e266->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e266->CENSUS_HISPANIC;
              long v266 = e266->__av;
              __SQL_SUM_AGGREGATE_288INVENTORY1.addOrDelOnZero(se4265.modify(__sql_sum_aggregate_288inventoryinventory_locn), (v265 * (v266 * (location_tot_area_sq_ft * location_walmartdistance))));
            } while ((n266 = n266->nxt));
          }
          e265 = e265->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_289 = 0.0;
      __SQL_SUM_AGGREGATE_289INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e267 = LOCATION.head;
        while (e267) {
          long __sql_sum_aggregate_289inventoryinventory_locn = e267->LOCATION_LOCN;
          long location_zip = e267->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e267->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e267->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e267->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e267->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e267->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e267->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e267->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e267->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e267->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e267->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e267->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e267->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e267->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v267 = e267->__av;
          { //slice
            const HASH_RES_t h123 = CENSUS_mapkey0_idxfn::hash(se4269.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i268 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n268 = &(i268->buckets_[h123 % i268->size_]);
            CENSUS_entry* e268;
            do if ((e268 = n268->obj) && h123 == n268->hash && CENSUS_mapkey0_idxfn::equals(se4269, *e268)) {
              long census_population = e268->CENSUS_POPULATION;
              long census_white = e268->CENSUS_WHITE;
              long census_asian = e268->CENSUS_ASIAN;
              long census_pacific = e268->CENSUS_PACIFIC;
              long census_blackafrican = e268->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e268->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e268->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e268->CENSUS_HOUSEUNITS;
              long census_families = e268->CENSUS_FAMILIES;
              long census_households = e268->CENSUS_HOUSEHOLDS;
              long census_husbwife = e268->CENSUS_HUSBWIFE;
              long census_males = e268->CENSUS_MALES;
              long census_females = e268->CENSUS_FEMALES;
              long census_householdschildren = e268->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e268->CENSUS_HISPANIC;
              long v268 = e268->__av;
              __SQL_SUM_AGGREGATE_289INVENTORY1.addOrDelOnZero(se4268.modify(__sql_sum_aggregate_289inventoryinventory_locn), (v267 * (v268 * (location_tot_area_sq_ft * location_walmartdrivetime))));
            } while ((n268 = n268->nxt));
          }
          e267 = e267->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_290 = 0.0;
      __SQL_SUM_AGGREGATE_290INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e269 = LOCATION.head;
        while (e269) {
          long __sql_sum_aggregate_290inventoryinventory_locn = e269->LOCATION_LOCN;
          long location_zip = e269->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e269->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e269->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e269->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e269->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e269->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e269->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e269->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e269->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e269->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e269->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e269->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e269->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e269->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v269 = e269->__av;
          { //slice
            const HASH_RES_t h124 = CENSUS_mapkey0_idxfn::hash(se4272.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i270 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n270 = &(i270->buckets_[h124 % i270->size_]);
            CENSUS_entry* e270;
            do if ((e270 = n270->obj) && h124 == n270->hash && CENSUS_mapkey0_idxfn::equals(se4272, *e270)) {
              long census_population = e270->CENSUS_POPULATION;
              long census_white = e270->CENSUS_WHITE;
              long census_asian = e270->CENSUS_ASIAN;
              long census_pacific = e270->CENSUS_PACIFIC;
              long census_blackafrican = e270->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e270->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e270->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e270->CENSUS_HOUSEUNITS;
              long census_families = e270->CENSUS_FAMILIES;
              long census_households = e270->CENSUS_HOUSEHOLDS;
              long census_husbwife = e270->CENSUS_HUSBWIFE;
              long census_males = e270->CENSUS_MALES;
              long census_females = e270->CENSUS_FEMALES;
              long census_householdschildren = e270->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e270->CENSUS_HISPANIC;
              long v270 = e270->__av;
              __SQL_SUM_AGGREGATE_290INVENTORY1.addOrDelOnZero(se4271.modify(__sql_sum_aggregate_290inventoryinventory_locn), (v269 * (v270 * (location_tot_area_sq_ft * location_walmartsupercenterdistance))));
            } while ((n270 = n270->nxt));
          }
          e269 = e269->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_291 = 0.0;
      __SQL_SUM_AGGREGATE_291INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e271 = LOCATION.head;
        while (e271) {
          long __sql_sum_aggregate_291inventoryinventory_locn = e271->LOCATION_LOCN;
          long location_zip = e271->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e271->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e271->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e271->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e271->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e271->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e271->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e271->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e271->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e271->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e271->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e271->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e271->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e271->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v271 = e271->__av;
          { //slice
            const HASH_RES_t h125 = CENSUS_mapkey0_idxfn::hash(se4275.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i272 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n272 = &(i272->buckets_[h125 % i272->size_]);
            CENSUS_entry* e272;
            do if ((e272 = n272->obj) && h125 == n272->hash && CENSUS_mapkey0_idxfn::equals(se4275, *e272)) {
              long census_population = e272->CENSUS_POPULATION;
              long census_white = e272->CENSUS_WHITE;
              long census_asian = e272->CENSUS_ASIAN;
              long census_pacific = e272->CENSUS_PACIFIC;
              long census_blackafrican = e272->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e272->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e272->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e272->CENSUS_HOUSEUNITS;
              long census_families = e272->CENSUS_FAMILIES;
              long census_households = e272->CENSUS_HOUSEHOLDS;
              long census_husbwife = e272->CENSUS_HUSBWIFE;
              long census_males = e272->CENSUS_MALES;
              long census_females = e272->CENSUS_FEMALES;
              long census_householdschildren = e272->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e272->CENSUS_HISPANIC;
              long v272 = e272->__av;
              __SQL_SUM_AGGREGATE_291INVENTORY1.addOrDelOnZero(se4274.modify(__sql_sum_aggregate_291inventoryinventory_locn), (v271 * (v272 * (location_tot_area_sq_ft * location_walmartsupercenterdrivetime))));
            } while ((n272 = n272->nxt));
          }
          e271 = e271->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_292 = 0.0;
      __SQL_SUM_AGGREGATE_292INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e273 = LOCATION.head;
        while (e273) {
          long __sql_sum_aggregate_292inventoryinventory_locn = e273->LOCATION_LOCN;
          long location_zip = e273->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e273->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e273->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e273->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e273->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e273->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e273->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e273->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e273->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e273->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e273->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e273->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e273->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e273->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v273 = e273->__av;
          { //slice
            const HASH_RES_t h126 = CENSUS_mapkey0_idxfn::hash(se4278.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i274 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n274 = &(i274->buckets_[h126 % i274->size_]);
            CENSUS_entry* e274;
            do if ((e274 = n274->obj) && h126 == n274->hash && CENSUS_mapkey0_idxfn::equals(se4278, *e274)) {
              long census_population = e274->CENSUS_POPULATION;
              long census_white = e274->CENSUS_WHITE;
              long census_asian = e274->CENSUS_ASIAN;
              long census_pacific = e274->CENSUS_PACIFIC;
              long census_blackafrican = e274->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e274->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e274->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e274->CENSUS_HOUSEUNITS;
              long census_families = e274->CENSUS_FAMILIES;
              long census_households = e274->CENSUS_HOUSEHOLDS;
              long census_husbwife = e274->CENSUS_HUSBWIFE;
              long census_males = e274->CENSUS_MALES;
              long census_females = e274->CENSUS_FEMALES;
              long census_householdschildren = e274->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e274->CENSUS_HISPANIC;
              long v274 = e274->__av;
              __SQL_SUM_AGGREGATE_292INVENTORY1.addOrDelOnZero(se4277.modify(__sql_sum_aggregate_292inventoryinventory_locn), (v273 * (v274 * (location_tot_area_sq_ft * census_population))));
            } while ((n274 = n274->nxt));
          }
          e273 = e273->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_293 = 0.0;
      __SQL_SUM_AGGREGATE_293INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e275 = LOCATION.head;
        while (e275) {
          long __sql_sum_aggregate_293inventoryinventory_locn = e275->LOCATION_LOCN;
          long location_zip = e275->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e275->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e275->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e275->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e275->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e275->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e275->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e275->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e275->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e275->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e275->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e275->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e275->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e275->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v275 = e275->__av;
          { //slice
            const HASH_RES_t h127 = CENSUS_mapkey0_idxfn::hash(se4281.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i276 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n276 = &(i276->buckets_[h127 % i276->size_]);
            CENSUS_entry* e276;
            do if ((e276 = n276->obj) && h127 == n276->hash && CENSUS_mapkey0_idxfn::equals(se4281, *e276)) {
              long census_population = e276->CENSUS_POPULATION;
              long census_white = e276->CENSUS_WHITE;
              long census_asian = e276->CENSUS_ASIAN;
              long census_pacific = e276->CENSUS_PACIFIC;
              long census_blackafrican = e276->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e276->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e276->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e276->CENSUS_HOUSEUNITS;
              long census_families = e276->CENSUS_FAMILIES;
              long census_households = e276->CENSUS_HOUSEHOLDS;
              long census_husbwife = e276->CENSUS_HUSBWIFE;
              long census_males = e276->CENSUS_MALES;
              long census_females = e276->CENSUS_FEMALES;
              long census_householdschildren = e276->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e276->CENSUS_HISPANIC;
              long v276 = e276->__av;
              __SQL_SUM_AGGREGATE_293INVENTORY1.addOrDelOnZero(se4280.modify(__sql_sum_aggregate_293inventoryinventory_locn), (v275 * (v276 * (location_tot_area_sq_ft * census_white))));
            } while ((n276 = n276->nxt));
          }
          e275 = e275->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_294 = 0.0;
      __SQL_SUM_AGGREGATE_294INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e277 = LOCATION.head;
        while (e277) {
          long __sql_sum_aggregate_294inventoryinventory_locn = e277->LOCATION_LOCN;
          long location_zip = e277->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e277->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e277->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e277->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e277->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e277->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e277->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e277->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e277->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e277->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e277->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e277->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e277->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e277->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v277 = e277->__av;
          { //slice
            const HASH_RES_t h128 = CENSUS_mapkey0_idxfn::hash(se4284.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i278 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n278 = &(i278->buckets_[h128 % i278->size_]);
            CENSUS_entry* e278;
            do if ((e278 = n278->obj) && h128 == n278->hash && CENSUS_mapkey0_idxfn::equals(se4284, *e278)) {
              long census_population = e278->CENSUS_POPULATION;
              long census_white = e278->CENSUS_WHITE;
              long census_asian = e278->CENSUS_ASIAN;
              long census_pacific = e278->CENSUS_PACIFIC;
              long census_blackafrican = e278->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e278->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e278->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e278->CENSUS_HOUSEUNITS;
              long census_families = e278->CENSUS_FAMILIES;
              long census_households = e278->CENSUS_HOUSEHOLDS;
              long census_husbwife = e278->CENSUS_HUSBWIFE;
              long census_males = e278->CENSUS_MALES;
              long census_females = e278->CENSUS_FEMALES;
              long census_householdschildren = e278->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e278->CENSUS_HISPANIC;
              long v278 = e278->__av;
              __SQL_SUM_AGGREGATE_294INVENTORY1.addOrDelOnZero(se4283.modify(__sql_sum_aggregate_294inventoryinventory_locn), (v277 * (v278 * (location_tot_area_sq_ft * census_asian))));
            } while ((n278 = n278->nxt));
          }
          e277 = e277->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_295 = 0.0;
      __SQL_SUM_AGGREGATE_295INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e279 = LOCATION.head;
        while (e279) {
          long __sql_sum_aggregate_295inventoryinventory_locn = e279->LOCATION_LOCN;
          long location_zip = e279->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e279->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e279->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e279->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e279->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e279->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e279->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e279->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e279->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e279->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e279->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e279->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e279->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e279->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v279 = e279->__av;
          { //slice
            const HASH_RES_t h129 = CENSUS_mapkey0_idxfn::hash(se4287.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i280 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n280 = &(i280->buckets_[h129 % i280->size_]);
            CENSUS_entry* e280;
            do if ((e280 = n280->obj) && h129 == n280->hash && CENSUS_mapkey0_idxfn::equals(se4287, *e280)) {
              long census_population = e280->CENSUS_POPULATION;
              long census_white = e280->CENSUS_WHITE;
              long census_asian = e280->CENSUS_ASIAN;
              long census_pacific = e280->CENSUS_PACIFIC;
              long census_blackafrican = e280->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e280->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e280->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e280->CENSUS_HOUSEUNITS;
              long census_families = e280->CENSUS_FAMILIES;
              long census_households = e280->CENSUS_HOUSEHOLDS;
              long census_husbwife = e280->CENSUS_HUSBWIFE;
              long census_males = e280->CENSUS_MALES;
              long census_females = e280->CENSUS_FEMALES;
              long census_householdschildren = e280->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e280->CENSUS_HISPANIC;
              long v280 = e280->__av;
              __SQL_SUM_AGGREGATE_295INVENTORY1.addOrDelOnZero(se4286.modify(__sql_sum_aggregate_295inventoryinventory_locn), (v279 * (v280 * (location_tot_area_sq_ft * census_pacific))));
            } while ((n280 = n280->nxt));
          }
          e279 = e279->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_296 = 0.0;
      __SQL_SUM_AGGREGATE_296INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e281 = LOCATION.head;
        while (e281) {
          long __sql_sum_aggregate_296inventoryinventory_locn = e281->LOCATION_LOCN;
          long location_zip = e281->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e281->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e281->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e281->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e281->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e281->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e281->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e281->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e281->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e281->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e281->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e281->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e281->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e281->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v281 = e281->__av;
          { //slice
            const HASH_RES_t h130 = CENSUS_mapkey0_idxfn::hash(se4290.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i282 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n282 = &(i282->buckets_[h130 % i282->size_]);
            CENSUS_entry* e282;
            do if ((e282 = n282->obj) && h130 == n282->hash && CENSUS_mapkey0_idxfn::equals(se4290, *e282)) {
              long census_population = e282->CENSUS_POPULATION;
              long census_white = e282->CENSUS_WHITE;
              long census_asian = e282->CENSUS_ASIAN;
              long census_pacific = e282->CENSUS_PACIFIC;
              long census_blackafrican = e282->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e282->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e282->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e282->CENSUS_HOUSEUNITS;
              long census_families = e282->CENSUS_FAMILIES;
              long census_households = e282->CENSUS_HOUSEHOLDS;
              long census_husbwife = e282->CENSUS_HUSBWIFE;
              long census_males = e282->CENSUS_MALES;
              long census_females = e282->CENSUS_FEMALES;
              long census_householdschildren = e282->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e282->CENSUS_HISPANIC;
              long v282 = e282->__av;
              __SQL_SUM_AGGREGATE_296INVENTORY1.addOrDelOnZero(se4289.modify(__sql_sum_aggregate_296inventoryinventory_locn), (v281 * (v282 * (location_tot_area_sq_ft * census_blackafrican))));
            } while ((n282 = n282->nxt));
          }
          e281 = e281->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_297 = 0.0;
      __SQL_SUM_AGGREGATE_297INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e283 = LOCATION.head;
        while (e283) {
          long __sql_sum_aggregate_297inventoryinventory_locn = e283->LOCATION_LOCN;
          long location_zip = e283->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e283->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e283->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e283->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e283->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e283->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e283->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e283->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e283->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e283->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e283->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e283->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e283->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e283->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v283 = e283->__av;
          { //slice
            const HASH_RES_t h131 = CENSUS_mapkey0_idxfn::hash(se4293.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i284 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n284 = &(i284->buckets_[h131 % i284->size_]);
            CENSUS_entry* e284;
            do if ((e284 = n284->obj) && h131 == n284->hash && CENSUS_mapkey0_idxfn::equals(se4293, *e284)) {
              long census_population = e284->CENSUS_POPULATION;
              long census_white = e284->CENSUS_WHITE;
              long census_asian = e284->CENSUS_ASIAN;
              long census_pacific = e284->CENSUS_PACIFIC;
              long census_blackafrican = e284->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e284->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e284->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e284->CENSUS_HOUSEUNITS;
              long census_families = e284->CENSUS_FAMILIES;
              long census_households = e284->CENSUS_HOUSEHOLDS;
              long census_husbwife = e284->CENSUS_HUSBWIFE;
              long census_males = e284->CENSUS_MALES;
              long census_females = e284->CENSUS_FEMALES;
              long census_householdschildren = e284->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e284->CENSUS_HISPANIC;
              long v284 = e284->__av;
              __SQL_SUM_AGGREGATE_297INVENTORY1.addOrDelOnZero(se4292.modify(__sql_sum_aggregate_297inventoryinventory_locn), (v283 * (v284 * (location_tot_area_sq_ft * census_medianage))));
            } while ((n284 = n284->nxt));
          }
          e283 = e283->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_298 = 0.0;
      __SQL_SUM_AGGREGATE_298INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e285 = LOCATION.head;
        while (e285) {
          long __sql_sum_aggregate_298inventoryinventory_locn = e285->LOCATION_LOCN;
          long location_zip = e285->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e285->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e285->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e285->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e285->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e285->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e285->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e285->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e285->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e285->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e285->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e285->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e285->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e285->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v285 = e285->__av;
          { //slice
            const HASH_RES_t h132 = CENSUS_mapkey0_idxfn::hash(se4296.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i286 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n286 = &(i286->buckets_[h132 % i286->size_]);
            CENSUS_entry* e286;
            do if ((e286 = n286->obj) && h132 == n286->hash && CENSUS_mapkey0_idxfn::equals(se4296, *e286)) {
              long census_population = e286->CENSUS_POPULATION;
              long census_white = e286->CENSUS_WHITE;
              long census_asian = e286->CENSUS_ASIAN;
              long census_pacific = e286->CENSUS_PACIFIC;
              long census_blackafrican = e286->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e286->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e286->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e286->CENSUS_HOUSEUNITS;
              long census_families = e286->CENSUS_FAMILIES;
              long census_households = e286->CENSUS_HOUSEHOLDS;
              long census_husbwife = e286->CENSUS_HUSBWIFE;
              long census_males = e286->CENSUS_MALES;
              long census_females = e286->CENSUS_FEMALES;
              long census_householdschildren = e286->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e286->CENSUS_HISPANIC;
              long v286 = e286->__av;
              __SQL_SUM_AGGREGATE_298INVENTORY1.addOrDelOnZero(se4295.modify(__sql_sum_aggregate_298inventoryinventory_locn), (v285 * (v286 * (location_tot_area_sq_ft * census_occupiedhouseunits))));
            } while ((n286 = n286->nxt));
          }
          e285 = e285->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_299 = 0.0;
      __SQL_SUM_AGGREGATE_299INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e287 = LOCATION.head;
        while (e287) {
          long __sql_sum_aggregate_299inventoryinventory_locn = e287->LOCATION_LOCN;
          long location_zip = e287->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e287->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e287->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e287->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e287->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e287->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e287->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e287->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e287->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e287->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e287->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e287->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e287->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e287->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v287 = e287->__av;
          { //slice
            const HASH_RES_t h133 = CENSUS_mapkey0_idxfn::hash(se4299.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i288 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n288 = &(i288->buckets_[h133 % i288->size_]);
            CENSUS_entry* e288;
            do if ((e288 = n288->obj) && h133 == n288->hash && CENSUS_mapkey0_idxfn::equals(se4299, *e288)) {
              long census_population = e288->CENSUS_POPULATION;
              long census_white = e288->CENSUS_WHITE;
              long census_asian = e288->CENSUS_ASIAN;
              long census_pacific = e288->CENSUS_PACIFIC;
              long census_blackafrican = e288->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e288->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e288->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e288->CENSUS_HOUSEUNITS;
              long census_families = e288->CENSUS_FAMILIES;
              long census_households = e288->CENSUS_HOUSEHOLDS;
              long census_husbwife = e288->CENSUS_HUSBWIFE;
              long census_males = e288->CENSUS_MALES;
              long census_females = e288->CENSUS_FEMALES;
              long census_householdschildren = e288->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e288->CENSUS_HISPANIC;
              long v288 = e288->__av;
              __SQL_SUM_AGGREGATE_299INVENTORY1.addOrDelOnZero(se4298.modify(__sql_sum_aggregate_299inventoryinventory_locn), (v287 * (v288 * (location_tot_area_sq_ft * census_houseunits))));
            } while ((n288 = n288->nxt));
          }
          e287 = e287->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_300 = 0.0;
      __SQL_SUM_AGGREGATE_300INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e289 = LOCATION.head;
        while (e289) {
          long __sql_sum_aggregate_300inventoryinventory_locn = e289->LOCATION_LOCN;
          long location_zip = e289->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e289->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e289->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e289->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e289->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e289->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e289->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e289->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e289->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e289->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e289->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e289->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e289->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e289->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v289 = e289->__av;
          { //slice
            const HASH_RES_t h134 = CENSUS_mapkey0_idxfn::hash(se4302.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i290 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n290 = &(i290->buckets_[h134 % i290->size_]);
            CENSUS_entry* e290;
            do if ((e290 = n290->obj) && h134 == n290->hash && CENSUS_mapkey0_idxfn::equals(se4302, *e290)) {
              long census_population = e290->CENSUS_POPULATION;
              long census_white = e290->CENSUS_WHITE;
              long census_asian = e290->CENSUS_ASIAN;
              long census_pacific = e290->CENSUS_PACIFIC;
              long census_blackafrican = e290->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e290->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e290->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e290->CENSUS_HOUSEUNITS;
              long census_families = e290->CENSUS_FAMILIES;
              long census_households = e290->CENSUS_HOUSEHOLDS;
              long census_husbwife = e290->CENSUS_HUSBWIFE;
              long census_males = e290->CENSUS_MALES;
              long census_females = e290->CENSUS_FEMALES;
              long census_householdschildren = e290->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e290->CENSUS_HISPANIC;
              long v290 = e290->__av;
              __SQL_SUM_AGGREGATE_300INVENTORY1.addOrDelOnZero(se4301.modify(__sql_sum_aggregate_300inventoryinventory_locn), (v289 * (v290 * (location_tot_area_sq_ft * census_families))));
            } while ((n290 = n290->nxt));
          }
          e289 = e289->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_301 = 0.0;
      __SQL_SUM_AGGREGATE_301INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e291 = LOCATION.head;
        while (e291) {
          long __sql_sum_aggregate_301inventoryinventory_locn = e291->LOCATION_LOCN;
          long location_zip = e291->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e291->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e291->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e291->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e291->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e291->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e291->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e291->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e291->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e291->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e291->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e291->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e291->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e291->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v291 = e291->__av;
          { //slice
            const HASH_RES_t h135 = CENSUS_mapkey0_idxfn::hash(se4305.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i292 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n292 = &(i292->buckets_[h135 % i292->size_]);
            CENSUS_entry* e292;
            do if ((e292 = n292->obj) && h135 == n292->hash && CENSUS_mapkey0_idxfn::equals(se4305, *e292)) {
              long census_population = e292->CENSUS_POPULATION;
              long census_white = e292->CENSUS_WHITE;
              long census_asian = e292->CENSUS_ASIAN;
              long census_pacific = e292->CENSUS_PACIFIC;
              long census_blackafrican = e292->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e292->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e292->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e292->CENSUS_HOUSEUNITS;
              long census_families = e292->CENSUS_FAMILIES;
              long census_households = e292->CENSUS_HOUSEHOLDS;
              long census_husbwife = e292->CENSUS_HUSBWIFE;
              long census_males = e292->CENSUS_MALES;
              long census_females = e292->CENSUS_FEMALES;
              long census_householdschildren = e292->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e292->CENSUS_HISPANIC;
              long v292 = e292->__av;
              __SQL_SUM_AGGREGATE_301INVENTORY1.addOrDelOnZero(se4304.modify(__sql_sum_aggregate_301inventoryinventory_locn), (v291 * (v292 * (location_tot_area_sq_ft * census_households))));
            } while ((n292 = n292->nxt));
          }
          e291 = e291->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_302 = 0.0;
      __SQL_SUM_AGGREGATE_302INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e293 = LOCATION.head;
        while (e293) {
          long __sql_sum_aggregate_302inventoryinventory_locn = e293->LOCATION_LOCN;
          long location_zip = e293->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e293->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e293->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e293->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e293->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e293->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e293->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e293->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e293->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e293->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e293->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e293->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e293->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e293->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v293 = e293->__av;
          { //slice
            const HASH_RES_t h136 = CENSUS_mapkey0_idxfn::hash(se4308.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i294 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n294 = &(i294->buckets_[h136 % i294->size_]);
            CENSUS_entry* e294;
            do if ((e294 = n294->obj) && h136 == n294->hash && CENSUS_mapkey0_idxfn::equals(se4308, *e294)) {
              long census_population = e294->CENSUS_POPULATION;
              long census_white = e294->CENSUS_WHITE;
              long census_asian = e294->CENSUS_ASIAN;
              long census_pacific = e294->CENSUS_PACIFIC;
              long census_blackafrican = e294->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e294->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e294->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e294->CENSUS_HOUSEUNITS;
              long census_families = e294->CENSUS_FAMILIES;
              long census_households = e294->CENSUS_HOUSEHOLDS;
              long census_husbwife = e294->CENSUS_HUSBWIFE;
              long census_males = e294->CENSUS_MALES;
              long census_females = e294->CENSUS_FEMALES;
              long census_householdschildren = e294->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e294->CENSUS_HISPANIC;
              long v294 = e294->__av;
              __SQL_SUM_AGGREGATE_302INVENTORY1.addOrDelOnZero(se4307.modify(__sql_sum_aggregate_302inventoryinventory_locn), (v293 * (v294 * (location_tot_area_sq_ft * census_husbwife))));
            } while ((n294 = n294->nxt));
          }
          e293 = e293->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_303 = 0.0;
      __SQL_SUM_AGGREGATE_303INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e295 = LOCATION.head;
        while (e295) {
          long __sql_sum_aggregate_303inventoryinventory_locn = e295->LOCATION_LOCN;
          long location_zip = e295->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e295->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e295->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e295->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e295->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e295->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e295->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e295->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e295->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e295->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e295->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e295->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e295->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e295->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v295 = e295->__av;
          { //slice
            const HASH_RES_t h137 = CENSUS_mapkey0_idxfn::hash(se4311.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i296 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n296 = &(i296->buckets_[h137 % i296->size_]);
            CENSUS_entry* e296;
            do if ((e296 = n296->obj) && h137 == n296->hash && CENSUS_mapkey0_idxfn::equals(se4311, *e296)) {
              long census_population = e296->CENSUS_POPULATION;
              long census_white = e296->CENSUS_WHITE;
              long census_asian = e296->CENSUS_ASIAN;
              long census_pacific = e296->CENSUS_PACIFIC;
              long census_blackafrican = e296->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e296->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e296->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e296->CENSUS_HOUSEUNITS;
              long census_families = e296->CENSUS_FAMILIES;
              long census_households = e296->CENSUS_HOUSEHOLDS;
              long census_husbwife = e296->CENSUS_HUSBWIFE;
              long census_males = e296->CENSUS_MALES;
              long census_females = e296->CENSUS_FEMALES;
              long census_householdschildren = e296->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e296->CENSUS_HISPANIC;
              long v296 = e296->__av;
              __SQL_SUM_AGGREGATE_303INVENTORY1.addOrDelOnZero(se4310.modify(__sql_sum_aggregate_303inventoryinventory_locn), (v295 * (v296 * (location_tot_area_sq_ft * census_males))));
            } while ((n296 = n296->nxt));
          }
          e295 = e295->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_304 = 0.0;
      __SQL_SUM_AGGREGATE_304INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e297 = LOCATION.head;
        while (e297) {
          long __sql_sum_aggregate_304inventoryinventory_locn = e297->LOCATION_LOCN;
          long location_zip = e297->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e297->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e297->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e297->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e297->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e297->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e297->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e297->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e297->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e297->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e297->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e297->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e297->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e297->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v297 = e297->__av;
          { //slice
            const HASH_RES_t h138 = CENSUS_mapkey0_idxfn::hash(se4314.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i298 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n298 = &(i298->buckets_[h138 % i298->size_]);
            CENSUS_entry* e298;
            do if ((e298 = n298->obj) && h138 == n298->hash && CENSUS_mapkey0_idxfn::equals(se4314, *e298)) {
              long census_population = e298->CENSUS_POPULATION;
              long census_white = e298->CENSUS_WHITE;
              long census_asian = e298->CENSUS_ASIAN;
              long census_pacific = e298->CENSUS_PACIFIC;
              long census_blackafrican = e298->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e298->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e298->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e298->CENSUS_HOUSEUNITS;
              long census_families = e298->CENSUS_FAMILIES;
              long census_households = e298->CENSUS_HOUSEHOLDS;
              long census_husbwife = e298->CENSUS_HUSBWIFE;
              long census_males = e298->CENSUS_MALES;
              long census_females = e298->CENSUS_FEMALES;
              long census_householdschildren = e298->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e298->CENSUS_HISPANIC;
              long v298 = e298->__av;
              __SQL_SUM_AGGREGATE_304INVENTORY1.addOrDelOnZero(se4313.modify(__sql_sum_aggregate_304inventoryinventory_locn), (v297 * (v298 * (location_tot_area_sq_ft * census_females))));
            } while ((n298 = n298->nxt));
          }
          e297 = e297->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_305 = 0.0;
      __SQL_SUM_AGGREGATE_305INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e299 = LOCATION.head;
        while (e299) {
          long __sql_sum_aggregate_305inventoryinventory_locn = e299->LOCATION_LOCN;
          long location_zip = e299->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e299->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e299->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e299->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e299->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e299->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e299->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e299->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e299->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e299->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e299->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e299->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e299->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e299->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v299 = e299->__av;
          { //slice
            const HASH_RES_t h139 = CENSUS_mapkey0_idxfn::hash(se4317.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i300 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n300 = &(i300->buckets_[h139 % i300->size_]);
            CENSUS_entry* e300;
            do if ((e300 = n300->obj) && h139 == n300->hash && CENSUS_mapkey0_idxfn::equals(se4317, *e300)) {
              long census_population = e300->CENSUS_POPULATION;
              long census_white = e300->CENSUS_WHITE;
              long census_asian = e300->CENSUS_ASIAN;
              long census_pacific = e300->CENSUS_PACIFIC;
              long census_blackafrican = e300->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e300->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e300->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e300->CENSUS_HOUSEUNITS;
              long census_families = e300->CENSUS_FAMILIES;
              long census_households = e300->CENSUS_HOUSEHOLDS;
              long census_husbwife = e300->CENSUS_HUSBWIFE;
              long census_males = e300->CENSUS_MALES;
              long census_females = e300->CENSUS_FEMALES;
              long census_householdschildren = e300->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e300->CENSUS_HISPANIC;
              long v300 = e300->__av;
              __SQL_SUM_AGGREGATE_305INVENTORY1.addOrDelOnZero(se4316.modify(__sql_sum_aggregate_305inventoryinventory_locn), (v299 * (v300 * (location_tot_area_sq_ft * census_householdschildren))));
            } while ((n300 = n300->nxt));
          }
          e299 = e299->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_306 = 0.0;
      __SQL_SUM_AGGREGATE_306INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e301 = LOCATION.head;
        while (e301) {
          long __sql_sum_aggregate_306inventoryinventory_locn = e301->LOCATION_LOCN;
          long location_zip = e301->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e301->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e301->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e301->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e301->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e301->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e301->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e301->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e301->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e301->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e301->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e301->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e301->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e301->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v301 = e301->__av;
          { //slice
            const HASH_RES_t h140 = CENSUS_mapkey0_idxfn::hash(se4320.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i302 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n302 = &(i302->buckets_[h140 % i302->size_]);
            CENSUS_entry* e302;
            do if ((e302 = n302->obj) && h140 == n302->hash && CENSUS_mapkey0_idxfn::equals(se4320, *e302)) {
              long census_population = e302->CENSUS_POPULATION;
              long census_white = e302->CENSUS_WHITE;
              long census_asian = e302->CENSUS_ASIAN;
              long census_pacific = e302->CENSUS_PACIFIC;
              long census_blackafrican = e302->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e302->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e302->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e302->CENSUS_HOUSEUNITS;
              long census_families = e302->CENSUS_FAMILIES;
              long census_households = e302->CENSUS_HOUSEHOLDS;
              long census_husbwife = e302->CENSUS_HUSBWIFE;
              long census_males = e302->CENSUS_MALES;
              long census_females = e302->CENSUS_FEMALES;
              long census_householdschildren = e302->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e302->CENSUS_HISPANIC;
              long v302 = e302->__av;
              __SQL_SUM_AGGREGATE_306INVENTORY1.addOrDelOnZero(se4319.modify(__sql_sum_aggregate_306inventoryinventory_locn), (v301 * (v302 * (location_tot_area_sq_ft * census_hispanic))));
            } while ((n302 = n302->nxt));
          }
          e301 = e301->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_307 = 0.0;
      __SQL_SUM_AGGREGATE_308 = 0.0;
      __SQL_SUM_AGGREGATE_309 = 0.0;
      __SQL_SUM_AGGREGATE_310 = 0.0;
      __SQL_SUM_AGGREGATE_311 = 0.0;
      __SQL_SUM_AGGREGATE_312 = 0.0;
      __SQL_SUM_AGGREGATE_313 = 0.0;
      __SQL_SUM_AGGREGATE_314 = 0.0;
      __SQL_SUM_AGGREGATE_315 = 0.0;
      __SQL_SUM_AGGREGATE_316 = 0.0;
      __SQL_SUM_AGGREGATE_317 = 0.0;
      __SQL_SUM_AGGREGATE_317INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e303 = LOCATION.head;
        while (e303) {
          long __sql_sum_aggregate_317inventoryinventory_locn = e303->LOCATION_LOCN;
          long location_zip = e303->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e303->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e303->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e303->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e303->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e303->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e303->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e303->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e303->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e303->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e303->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e303->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e303->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e303->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v303 = e303->__av;
          { //slice
            const HASH_RES_t h141 = CENSUS_mapkey0_idxfn::hash(se4333.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i304 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n304 = &(i304->buckets_[h141 % i304->size_]);
            CENSUS_entry* e304;
            do if ((e304 = n304->obj) && h141 == n304->hash && CENSUS_mapkey0_idxfn::equals(se4333, *e304)) {
              long census_population = e304->CENSUS_POPULATION;
              long census_white = e304->CENSUS_WHITE;
              long census_asian = e304->CENSUS_ASIAN;
              long census_pacific = e304->CENSUS_PACIFIC;
              long census_blackafrican = e304->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e304->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e304->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e304->CENSUS_HOUSEUNITS;
              long census_families = e304->CENSUS_FAMILIES;
              long census_households = e304->CENSUS_HOUSEHOLDS;
              long census_husbwife = e304->CENSUS_HUSBWIFE;
              long census_males = e304->CENSUS_MALES;
              long census_females = e304->CENSUS_FEMALES;
              long census_householdschildren = e304->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e304->CENSUS_HISPANIC;
              long v304 = e304->__av;
              __SQL_SUM_AGGREGATE_317INVENTORY1.addOrDelOnZero(se4332.modify(__sql_sum_aggregate_317inventoryinventory_locn), (v303 * (v304 * (location_sell_area_sq_ft * location_sell_area_sq_ft))));
            } while ((n304 = n304->nxt));
          }
          e303 = e303->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_318 = 0.0;
      __SQL_SUM_AGGREGATE_318INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e305 = LOCATION.head;
        while (e305) {
          long __sql_sum_aggregate_318inventoryinventory_locn = e305->LOCATION_LOCN;
          long location_zip = e305->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e305->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e305->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e305->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e305->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e305->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e305->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e305->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e305->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e305->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e305->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e305->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e305->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e305->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v305 = e305->__av;
          { //slice
            const HASH_RES_t h142 = CENSUS_mapkey0_idxfn::hash(se4336.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i306 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n306 = &(i306->buckets_[h142 % i306->size_]);
            CENSUS_entry* e306;
            do if ((e306 = n306->obj) && h142 == n306->hash && CENSUS_mapkey0_idxfn::equals(se4336, *e306)) {
              long census_population = e306->CENSUS_POPULATION;
              long census_white = e306->CENSUS_WHITE;
              long census_asian = e306->CENSUS_ASIAN;
              long census_pacific = e306->CENSUS_PACIFIC;
              long census_blackafrican = e306->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e306->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e306->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e306->CENSUS_HOUSEUNITS;
              long census_families = e306->CENSUS_FAMILIES;
              long census_households = e306->CENSUS_HOUSEHOLDS;
              long census_husbwife = e306->CENSUS_HUSBWIFE;
              long census_males = e306->CENSUS_MALES;
              long census_females = e306->CENSUS_FEMALES;
              long census_householdschildren = e306->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e306->CENSUS_HISPANIC;
              long v306 = e306->__av;
              __SQL_SUM_AGGREGATE_318INVENTORY1.addOrDelOnZero(se4335.modify(__sql_sum_aggregate_318inventoryinventory_locn), (v305 * (v306 * (location_sell_area_sq_ft * location_avghhi))));
            } while ((n306 = n306->nxt));
          }
          e305 = e305->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_319 = 0.0;
      __SQL_SUM_AGGREGATE_319INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e307 = LOCATION.head;
        while (e307) {
          long __sql_sum_aggregate_319inventoryinventory_locn = e307->LOCATION_LOCN;
          long location_zip = e307->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e307->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e307->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e307->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e307->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e307->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e307->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e307->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e307->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e307->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e307->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e307->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e307->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e307->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v307 = e307->__av;
          { //slice
            const HASH_RES_t h143 = CENSUS_mapkey0_idxfn::hash(se4339.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i308 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n308 = &(i308->buckets_[h143 % i308->size_]);
            CENSUS_entry* e308;
            do if ((e308 = n308->obj) && h143 == n308->hash && CENSUS_mapkey0_idxfn::equals(se4339, *e308)) {
              long census_population = e308->CENSUS_POPULATION;
              long census_white = e308->CENSUS_WHITE;
              long census_asian = e308->CENSUS_ASIAN;
              long census_pacific = e308->CENSUS_PACIFIC;
              long census_blackafrican = e308->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e308->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e308->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e308->CENSUS_HOUSEUNITS;
              long census_families = e308->CENSUS_FAMILIES;
              long census_households = e308->CENSUS_HOUSEHOLDS;
              long census_husbwife = e308->CENSUS_HUSBWIFE;
              long census_males = e308->CENSUS_MALES;
              long census_females = e308->CENSUS_FEMALES;
              long census_householdschildren = e308->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e308->CENSUS_HISPANIC;
              long v308 = e308->__av;
              __SQL_SUM_AGGREGATE_319INVENTORY1.addOrDelOnZero(se4338.modify(__sql_sum_aggregate_319inventoryinventory_locn), (v307 * (v308 * (location_sell_area_sq_ft * location_supertargetdistance))));
            } while ((n308 = n308->nxt));
          }
          e307 = e307->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_320 = 0.0;
      __SQL_SUM_AGGREGATE_320INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e309 = LOCATION.head;
        while (e309) {
          long __sql_sum_aggregate_320inventoryinventory_locn = e309->LOCATION_LOCN;
          long location_zip = e309->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e309->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e309->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e309->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e309->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e309->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e309->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e309->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e309->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e309->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e309->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e309->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e309->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e309->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v309 = e309->__av;
          { //slice
            const HASH_RES_t h144 = CENSUS_mapkey0_idxfn::hash(se4342.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i310 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n310 = &(i310->buckets_[h144 % i310->size_]);
            CENSUS_entry* e310;
            do if ((e310 = n310->obj) && h144 == n310->hash && CENSUS_mapkey0_idxfn::equals(se4342, *e310)) {
              long census_population = e310->CENSUS_POPULATION;
              long census_white = e310->CENSUS_WHITE;
              long census_asian = e310->CENSUS_ASIAN;
              long census_pacific = e310->CENSUS_PACIFIC;
              long census_blackafrican = e310->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e310->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e310->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e310->CENSUS_HOUSEUNITS;
              long census_families = e310->CENSUS_FAMILIES;
              long census_households = e310->CENSUS_HOUSEHOLDS;
              long census_husbwife = e310->CENSUS_HUSBWIFE;
              long census_males = e310->CENSUS_MALES;
              long census_females = e310->CENSUS_FEMALES;
              long census_householdschildren = e310->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e310->CENSUS_HISPANIC;
              long v310 = e310->__av;
              __SQL_SUM_AGGREGATE_320INVENTORY1.addOrDelOnZero(se4341.modify(__sql_sum_aggregate_320inventoryinventory_locn), (v309 * (v310 * (location_sell_area_sq_ft * location_supertargetdrivetime))));
            } while ((n310 = n310->nxt));
          }
          e309 = e309->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_321 = 0.0;
      __SQL_SUM_AGGREGATE_321INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e311 = LOCATION.head;
        while (e311) {
          long __sql_sum_aggregate_321inventoryinventory_locn = e311->LOCATION_LOCN;
          long location_zip = e311->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e311->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e311->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e311->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e311->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e311->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e311->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e311->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e311->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e311->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e311->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e311->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e311->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e311->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v311 = e311->__av;
          { //slice
            const HASH_RES_t h145 = CENSUS_mapkey0_idxfn::hash(se4345.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i312 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n312 = &(i312->buckets_[h145 % i312->size_]);
            CENSUS_entry* e312;
            do if ((e312 = n312->obj) && h145 == n312->hash && CENSUS_mapkey0_idxfn::equals(se4345, *e312)) {
              long census_population = e312->CENSUS_POPULATION;
              long census_white = e312->CENSUS_WHITE;
              long census_asian = e312->CENSUS_ASIAN;
              long census_pacific = e312->CENSUS_PACIFIC;
              long census_blackafrican = e312->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e312->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e312->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e312->CENSUS_HOUSEUNITS;
              long census_families = e312->CENSUS_FAMILIES;
              long census_households = e312->CENSUS_HOUSEHOLDS;
              long census_husbwife = e312->CENSUS_HUSBWIFE;
              long census_males = e312->CENSUS_MALES;
              long census_females = e312->CENSUS_FEMALES;
              long census_householdschildren = e312->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e312->CENSUS_HISPANIC;
              long v312 = e312->__av;
              __SQL_SUM_AGGREGATE_321INVENTORY1.addOrDelOnZero(se4344.modify(__sql_sum_aggregate_321inventoryinventory_locn), (v311 * (v312 * (location_sell_area_sq_ft * location_targetdistance))));
            } while ((n312 = n312->nxt));
          }
          e311 = e311->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_322 = 0.0;
      __SQL_SUM_AGGREGATE_322INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e313 = LOCATION.head;
        while (e313) {
          long __sql_sum_aggregate_322inventoryinventory_locn = e313->LOCATION_LOCN;
          long location_zip = e313->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e313->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e313->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e313->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e313->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e313->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e313->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e313->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e313->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e313->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e313->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e313->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e313->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e313->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v313 = e313->__av;
          { //slice
            const HASH_RES_t h146 = CENSUS_mapkey0_idxfn::hash(se4348.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i314 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n314 = &(i314->buckets_[h146 % i314->size_]);
            CENSUS_entry* e314;
            do if ((e314 = n314->obj) && h146 == n314->hash && CENSUS_mapkey0_idxfn::equals(se4348, *e314)) {
              long census_population = e314->CENSUS_POPULATION;
              long census_white = e314->CENSUS_WHITE;
              long census_asian = e314->CENSUS_ASIAN;
              long census_pacific = e314->CENSUS_PACIFIC;
              long census_blackafrican = e314->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e314->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e314->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e314->CENSUS_HOUSEUNITS;
              long census_families = e314->CENSUS_FAMILIES;
              long census_households = e314->CENSUS_HOUSEHOLDS;
              long census_husbwife = e314->CENSUS_HUSBWIFE;
              long census_males = e314->CENSUS_MALES;
              long census_females = e314->CENSUS_FEMALES;
              long census_householdschildren = e314->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e314->CENSUS_HISPANIC;
              long v314 = e314->__av;
              __SQL_SUM_AGGREGATE_322INVENTORY1.addOrDelOnZero(se4347.modify(__sql_sum_aggregate_322inventoryinventory_locn), (v313 * (v314 * (location_sell_area_sq_ft * location_targetdrivetime))));
            } while ((n314 = n314->nxt));
          }
          e313 = e313->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_323 = 0.0;
      __SQL_SUM_AGGREGATE_323INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e315 = LOCATION.head;
        while (e315) {
          long __sql_sum_aggregate_323inventoryinventory_locn = e315->LOCATION_LOCN;
          long location_zip = e315->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e315->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e315->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e315->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e315->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e315->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e315->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e315->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e315->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e315->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e315->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e315->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e315->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e315->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v315 = e315->__av;
          { //slice
            const HASH_RES_t h147 = CENSUS_mapkey0_idxfn::hash(se4351.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i316 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n316 = &(i316->buckets_[h147 % i316->size_]);
            CENSUS_entry* e316;
            do if ((e316 = n316->obj) && h147 == n316->hash && CENSUS_mapkey0_idxfn::equals(se4351, *e316)) {
              long census_population = e316->CENSUS_POPULATION;
              long census_white = e316->CENSUS_WHITE;
              long census_asian = e316->CENSUS_ASIAN;
              long census_pacific = e316->CENSUS_PACIFIC;
              long census_blackafrican = e316->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e316->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e316->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e316->CENSUS_HOUSEUNITS;
              long census_families = e316->CENSUS_FAMILIES;
              long census_households = e316->CENSUS_HOUSEHOLDS;
              long census_husbwife = e316->CENSUS_HUSBWIFE;
              long census_males = e316->CENSUS_MALES;
              long census_females = e316->CENSUS_FEMALES;
              long census_householdschildren = e316->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e316->CENSUS_HISPANIC;
              long v316 = e316->__av;
              __SQL_SUM_AGGREGATE_323INVENTORY1.addOrDelOnZero(se4350.modify(__sql_sum_aggregate_323inventoryinventory_locn), (v315 * (v316 * (location_sell_area_sq_ft * location_walmartdistance))));
            } while ((n316 = n316->nxt));
          }
          e315 = e315->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_324 = 0.0;
      __SQL_SUM_AGGREGATE_324INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e317 = LOCATION.head;
        while (e317) {
          long __sql_sum_aggregate_324inventoryinventory_locn = e317->LOCATION_LOCN;
          long location_zip = e317->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e317->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e317->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e317->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e317->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e317->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e317->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e317->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e317->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e317->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e317->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e317->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e317->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e317->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v317 = e317->__av;
          { //slice
            const HASH_RES_t h148 = CENSUS_mapkey0_idxfn::hash(se4354.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i318 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n318 = &(i318->buckets_[h148 % i318->size_]);
            CENSUS_entry* e318;
            do if ((e318 = n318->obj) && h148 == n318->hash && CENSUS_mapkey0_idxfn::equals(se4354, *e318)) {
              long census_population = e318->CENSUS_POPULATION;
              long census_white = e318->CENSUS_WHITE;
              long census_asian = e318->CENSUS_ASIAN;
              long census_pacific = e318->CENSUS_PACIFIC;
              long census_blackafrican = e318->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e318->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e318->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e318->CENSUS_HOUSEUNITS;
              long census_families = e318->CENSUS_FAMILIES;
              long census_households = e318->CENSUS_HOUSEHOLDS;
              long census_husbwife = e318->CENSUS_HUSBWIFE;
              long census_males = e318->CENSUS_MALES;
              long census_females = e318->CENSUS_FEMALES;
              long census_householdschildren = e318->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e318->CENSUS_HISPANIC;
              long v318 = e318->__av;
              __SQL_SUM_AGGREGATE_324INVENTORY1.addOrDelOnZero(se4353.modify(__sql_sum_aggregate_324inventoryinventory_locn), (v317 * (v318 * (location_sell_area_sq_ft * location_walmartdrivetime))));
            } while ((n318 = n318->nxt));
          }
          e317 = e317->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_325 = 0.0;
      __SQL_SUM_AGGREGATE_325INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e319 = LOCATION.head;
        while (e319) {
          long __sql_sum_aggregate_325inventoryinventory_locn = e319->LOCATION_LOCN;
          long location_zip = e319->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e319->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e319->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e319->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e319->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e319->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e319->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e319->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e319->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e319->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e319->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e319->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e319->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e319->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v319 = e319->__av;
          { //slice
            const HASH_RES_t h149 = CENSUS_mapkey0_idxfn::hash(se4357.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i320 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n320 = &(i320->buckets_[h149 % i320->size_]);
            CENSUS_entry* e320;
            do if ((e320 = n320->obj) && h149 == n320->hash && CENSUS_mapkey0_idxfn::equals(se4357, *e320)) {
              long census_population = e320->CENSUS_POPULATION;
              long census_white = e320->CENSUS_WHITE;
              long census_asian = e320->CENSUS_ASIAN;
              long census_pacific = e320->CENSUS_PACIFIC;
              long census_blackafrican = e320->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e320->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e320->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e320->CENSUS_HOUSEUNITS;
              long census_families = e320->CENSUS_FAMILIES;
              long census_households = e320->CENSUS_HOUSEHOLDS;
              long census_husbwife = e320->CENSUS_HUSBWIFE;
              long census_males = e320->CENSUS_MALES;
              long census_females = e320->CENSUS_FEMALES;
              long census_householdschildren = e320->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e320->CENSUS_HISPANIC;
              long v320 = e320->__av;
              __SQL_SUM_AGGREGATE_325INVENTORY1.addOrDelOnZero(se4356.modify(__sql_sum_aggregate_325inventoryinventory_locn), (v319 * (v320 * (location_sell_area_sq_ft * location_walmartsupercenterdistance))));
            } while ((n320 = n320->nxt));
          }
          e319 = e319->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_326 = 0.0;
      __SQL_SUM_AGGREGATE_326INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e321 = LOCATION.head;
        while (e321) {
          long __sql_sum_aggregate_326inventoryinventory_locn = e321->LOCATION_LOCN;
          long location_zip = e321->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e321->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e321->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e321->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e321->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e321->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e321->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e321->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e321->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e321->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e321->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e321->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e321->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e321->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v321 = e321->__av;
          { //slice
            const HASH_RES_t h150 = CENSUS_mapkey0_idxfn::hash(se4360.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i322 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n322 = &(i322->buckets_[h150 % i322->size_]);
            CENSUS_entry* e322;
            do if ((e322 = n322->obj) && h150 == n322->hash && CENSUS_mapkey0_idxfn::equals(se4360, *e322)) {
              long census_population = e322->CENSUS_POPULATION;
              long census_white = e322->CENSUS_WHITE;
              long census_asian = e322->CENSUS_ASIAN;
              long census_pacific = e322->CENSUS_PACIFIC;
              long census_blackafrican = e322->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e322->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e322->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e322->CENSUS_HOUSEUNITS;
              long census_families = e322->CENSUS_FAMILIES;
              long census_households = e322->CENSUS_HOUSEHOLDS;
              long census_husbwife = e322->CENSUS_HUSBWIFE;
              long census_males = e322->CENSUS_MALES;
              long census_females = e322->CENSUS_FEMALES;
              long census_householdschildren = e322->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e322->CENSUS_HISPANIC;
              long v322 = e322->__av;
              __SQL_SUM_AGGREGATE_326INVENTORY1.addOrDelOnZero(se4359.modify(__sql_sum_aggregate_326inventoryinventory_locn), (v321 * (v322 * (location_sell_area_sq_ft * location_walmartsupercenterdrivetime))));
            } while ((n322 = n322->nxt));
          }
          e321 = e321->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_327 = 0.0;
      __SQL_SUM_AGGREGATE_327INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e323 = LOCATION.head;
        while (e323) {
          long __sql_sum_aggregate_327inventoryinventory_locn = e323->LOCATION_LOCN;
          long location_zip = e323->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e323->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e323->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e323->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e323->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e323->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e323->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e323->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e323->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e323->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e323->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e323->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e323->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e323->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v323 = e323->__av;
          { //slice
            const HASH_RES_t h151 = CENSUS_mapkey0_idxfn::hash(se4363.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i324 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n324 = &(i324->buckets_[h151 % i324->size_]);
            CENSUS_entry* e324;
            do if ((e324 = n324->obj) && h151 == n324->hash && CENSUS_mapkey0_idxfn::equals(se4363, *e324)) {
              long census_population = e324->CENSUS_POPULATION;
              long census_white = e324->CENSUS_WHITE;
              long census_asian = e324->CENSUS_ASIAN;
              long census_pacific = e324->CENSUS_PACIFIC;
              long census_blackafrican = e324->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e324->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e324->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e324->CENSUS_HOUSEUNITS;
              long census_families = e324->CENSUS_FAMILIES;
              long census_households = e324->CENSUS_HOUSEHOLDS;
              long census_husbwife = e324->CENSUS_HUSBWIFE;
              long census_males = e324->CENSUS_MALES;
              long census_females = e324->CENSUS_FEMALES;
              long census_householdschildren = e324->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e324->CENSUS_HISPANIC;
              long v324 = e324->__av;
              __SQL_SUM_AGGREGATE_327INVENTORY1.addOrDelOnZero(se4362.modify(__sql_sum_aggregate_327inventoryinventory_locn), (v323 * (v324 * (location_sell_area_sq_ft * census_population))));
            } while ((n324 = n324->nxt));
          }
          e323 = e323->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_328 = 0.0;
      __SQL_SUM_AGGREGATE_328INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e325 = LOCATION.head;
        while (e325) {
          long __sql_sum_aggregate_328inventoryinventory_locn = e325->LOCATION_LOCN;
          long location_zip = e325->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e325->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e325->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e325->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e325->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e325->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e325->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e325->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e325->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e325->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e325->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e325->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e325->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e325->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v325 = e325->__av;
          { //slice
            const HASH_RES_t h152 = CENSUS_mapkey0_idxfn::hash(se4366.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i326 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n326 = &(i326->buckets_[h152 % i326->size_]);
            CENSUS_entry* e326;
            do if ((e326 = n326->obj) && h152 == n326->hash && CENSUS_mapkey0_idxfn::equals(se4366, *e326)) {
              long census_population = e326->CENSUS_POPULATION;
              long census_white = e326->CENSUS_WHITE;
              long census_asian = e326->CENSUS_ASIAN;
              long census_pacific = e326->CENSUS_PACIFIC;
              long census_blackafrican = e326->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e326->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e326->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e326->CENSUS_HOUSEUNITS;
              long census_families = e326->CENSUS_FAMILIES;
              long census_households = e326->CENSUS_HOUSEHOLDS;
              long census_husbwife = e326->CENSUS_HUSBWIFE;
              long census_males = e326->CENSUS_MALES;
              long census_females = e326->CENSUS_FEMALES;
              long census_householdschildren = e326->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e326->CENSUS_HISPANIC;
              long v326 = e326->__av;
              __SQL_SUM_AGGREGATE_328INVENTORY1.addOrDelOnZero(se4365.modify(__sql_sum_aggregate_328inventoryinventory_locn), (v325 * (v326 * (location_sell_area_sq_ft * census_white))));
            } while ((n326 = n326->nxt));
          }
          e325 = e325->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_329 = 0.0;
      __SQL_SUM_AGGREGATE_329INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e327 = LOCATION.head;
        while (e327) {
          long __sql_sum_aggregate_329inventoryinventory_locn = e327->LOCATION_LOCN;
          long location_zip = e327->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e327->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e327->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e327->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e327->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e327->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e327->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e327->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e327->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e327->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e327->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e327->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e327->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e327->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v327 = e327->__av;
          { //slice
            const HASH_RES_t h153 = CENSUS_mapkey0_idxfn::hash(se4369.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i328 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n328 = &(i328->buckets_[h153 % i328->size_]);
            CENSUS_entry* e328;
            do if ((e328 = n328->obj) && h153 == n328->hash && CENSUS_mapkey0_idxfn::equals(se4369, *e328)) {
              long census_population = e328->CENSUS_POPULATION;
              long census_white = e328->CENSUS_WHITE;
              long census_asian = e328->CENSUS_ASIAN;
              long census_pacific = e328->CENSUS_PACIFIC;
              long census_blackafrican = e328->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e328->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e328->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e328->CENSUS_HOUSEUNITS;
              long census_families = e328->CENSUS_FAMILIES;
              long census_households = e328->CENSUS_HOUSEHOLDS;
              long census_husbwife = e328->CENSUS_HUSBWIFE;
              long census_males = e328->CENSUS_MALES;
              long census_females = e328->CENSUS_FEMALES;
              long census_householdschildren = e328->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e328->CENSUS_HISPANIC;
              long v328 = e328->__av;
              __SQL_SUM_AGGREGATE_329INVENTORY1.addOrDelOnZero(se4368.modify(__sql_sum_aggregate_329inventoryinventory_locn), (v327 * (v328 * (location_sell_area_sq_ft * census_asian))));
            } while ((n328 = n328->nxt));
          }
          e327 = e327->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_330 = 0.0;
      __SQL_SUM_AGGREGATE_330INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e329 = LOCATION.head;
        while (e329) {
          long __sql_sum_aggregate_330inventoryinventory_locn = e329->LOCATION_LOCN;
          long location_zip = e329->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e329->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e329->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e329->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e329->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e329->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e329->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e329->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e329->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e329->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e329->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e329->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e329->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e329->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v329 = e329->__av;
          { //slice
            const HASH_RES_t h154 = CENSUS_mapkey0_idxfn::hash(se4372.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i330 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n330 = &(i330->buckets_[h154 % i330->size_]);
            CENSUS_entry* e330;
            do if ((e330 = n330->obj) && h154 == n330->hash && CENSUS_mapkey0_idxfn::equals(se4372, *e330)) {
              long census_population = e330->CENSUS_POPULATION;
              long census_white = e330->CENSUS_WHITE;
              long census_asian = e330->CENSUS_ASIAN;
              long census_pacific = e330->CENSUS_PACIFIC;
              long census_blackafrican = e330->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e330->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e330->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e330->CENSUS_HOUSEUNITS;
              long census_families = e330->CENSUS_FAMILIES;
              long census_households = e330->CENSUS_HOUSEHOLDS;
              long census_husbwife = e330->CENSUS_HUSBWIFE;
              long census_males = e330->CENSUS_MALES;
              long census_females = e330->CENSUS_FEMALES;
              long census_householdschildren = e330->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e330->CENSUS_HISPANIC;
              long v330 = e330->__av;
              __SQL_SUM_AGGREGATE_330INVENTORY1.addOrDelOnZero(se4371.modify(__sql_sum_aggregate_330inventoryinventory_locn), (v329 * (v330 * (location_sell_area_sq_ft * census_pacific))));
            } while ((n330 = n330->nxt));
          }
          e329 = e329->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_331 = 0.0;
      __SQL_SUM_AGGREGATE_331INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e331 = LOCATION.head;
        while (e331) {
          long __sql_sum_aggregate_331inventoryinventory_locn = e331->LOCATION_LOCN;
          long location_zip = e331->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e331->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e331->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e331->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e331->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e331->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e331->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e331->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e331->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e331->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e331->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e331->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e331->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e331->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v331 = e331->__av;
          { //slice
            const HASH_RES_t h155 = CENSUS_mapkey0_idxfn::hash(se4375.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i332 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n332 = &(i332->buckets_[h155 % i332->size_]);
            CENSUS_entry* e332;
            do if ((e332 = n332->obj) && h155 == n332->hash && CENSUS_mapkey0_idxfn::equals(se4375, *e332)) {
              long census_population = e332->CENSUS_POPULATION;
              long census_white = e332->CENSUS_WHITE;
              long census_asian = e332->CENSUS_ASIAN;
              long census_pacific = e332->CENSUS_PACIFIC;
              long census_blackafrican = e332->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e332->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e332->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e332->CENSUS_HOUSEUNITS;
              long census_families = e332->CENSUS_FAMILIES;
              long census_households = e332->CENSUS_HOUSEHOLDS;
              long census_husbwife = e332->CENSUS_HUSBWIFE;
              long census_males = e332->CENSUS_MALES;
              long census_females = e332->CENSUS_FEMALES;
              long census_householdschildren = e332->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e332->CENSUS_HISPANIC;
              long v332 = e332->__av;
              __SQL_SUM_AGGREGATE_331INVENTORY1.addOrDelOnZero(se4374.modify(__sql_sum_aggregate_331inventoryinventory_locn), (v331 * (v332 * (location_sell_area_sq_ft * census_blackafrican))));
            } while ((n332 = n332->nxt));
          }
          e331 = e331->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_332 = 0.0;
      __SQL_SUM_AGGREGATE_332INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e333 = LOCATION.head;
        while (e333) {
          long __sql_sum_aggregate_332inventoryinventory_locn = e333->LOCATION_LOCN;
          long location_zip = e333->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e333->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e333->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e333->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e333->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e333->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e333->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e333->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e333->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e333->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e333->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e333->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e333->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e333->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v333 = e333->__av;
          { //slice
            const HASH_RES_t h156 = CENSUS_mapkey0_idxfn::hash(se4378.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i334 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n334 = &(i334->buckets_[h156 % i334->size_]);
            CENSUS_entry* e334;
            do if ((e334 = n334->obj) && h156 == n334->hash && CENSUS_mapkey0_idxfn::equals(se4378, *e334)) {
              long census_population = e334->CENSUS_POPULATION;
              long census_white = e334->CENSUS_WHITE;
              long census_asian = e334->CENSUS_ASIAN;
              long census_pacific = e334->CENSUS_PACIFIC;
              long census_blackafrican = e334->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e334->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e334->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e334->CENSUS_HOUSEUNITS;
              long census_families = e334->CENSUS_FAMILIES;
              long census_households = e334->CENSUS_HOUSEHOLDS;
              long census_husbwife = e334->CENSUS_HUSBWIFE;
              long census_males = e334->CENSUS_MALES;
              long census_females = e334->CENSUS_FEMALES;
              long census_householdschildren = e334->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e334->CENSUS_HISPANIC;
              long v334 = e334->__av;
              __SQL_SUM_AGGREGATE_332INVENTORY1.addOrDelOnZero(se4377.modify(__sql_sum_aggregate_332inventoryinventory_locn), (v333 * (v334 * (location_sell_area_sq_ft * census_medianage))));
            } while ((n334 = n334->nxt));
          }
          e333 = e333->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_333 = 0.0;
      __SQL_SUM_AGGREGATE_333INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e335 = LOCATION.head;
        while (e335) {
          long __sql_sum_aggregate_333inventoryinventory_locn = e335->LOCATION_LOCN;
          long location_zip = e335->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e335->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e335->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e335->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e335->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e335->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e335->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e335->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e335->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e335->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e335->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e335->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e335->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e335->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v335 = e335->__av;
          { //slice
            const HASH_RES_t h157 = CENSUS_mapkey0_idxfn::hash(se4381.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i336 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n336 = &(i336->buckets_[h157 % i336->size_]);
            CENSUS_entry* e336;
            do if ((e336 = n336->obj) && h157 == n336->hash && CENSUS_mapkey0_idxfn::equals(se4381, *e336)) {
              long census_population = e336->CENSUS_POPULATION;
              long census_white = e336->CENSUS_WHITE;
              long census_asian = e336->CENSUS_ASIAN;
              long census_pacific = e336->CENSUS_PACIFIC;
              long census_blackafrican = e336->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e336->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e336->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e336->CENSUS_HOUSEUNITS;
              long census_families = e336->CENSUS_FAMILIES;
              long census_households = e336->CENSUS_HOUSEHOLDS;
              long census_husbwife = e336->CENSUS_HUSBWIFE;
              long census_males = e336->CENSUS_MALES;
              long census_females = e336->CENSUS_FEMALES;
              long census_householdschildren = e336->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e336->CENSUS_HISPANIC;
              long v336 = e336->__av;
              __SQL_SUM_AGGREGATE_333INVENTORY1.addOrDelOnZero(se4380.modify(__sql_sum_aggregate_333inventoryinventory_locn), (v335 * (v336 * (location_sell_area_sq_ft * census_occupiedhouseunits))));
            } while ((n336 = n336->nxt));
          }
          e335 = e335->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_334 = 0.0;
      __SQL_SUM_AGGREGATE_334INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e337 = LOCATION.head;
        while (e337) {
          long __sql_sum_aggregate_334inventoryinventory_locn = e337->LOCATION_LOCN;
          long location_zip = e337->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e337->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e337->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e337->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e337->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e337->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e337->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e337->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e337->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e337->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e337->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e337->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e337->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e337->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v337 = e337->__av;
          { //slice
            const HASH_RES_t h158 = CENSUS_mapkey0_idxfn::hash(se4384.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i338 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n338 = &(i338->buckets_[h158 % i338->size_]);
            CENSUS_entry* e338;
            do if ((e338 = n338->obj) && h158 == n338->hash && CENSUS_mapkey0_idxfn::equals(se4384, *e338)) {
              long census_population = e338->CENSUS_POPULATION;
              long census_white = e338->CENSUS_WHITE;
              long census_asian = e338->CENSUS_ASIAN;
              long census_pacific = e338->CENSUS_PACIFIC;
              long census_blackafrican = e338->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e338->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e338->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e338->CENSUS_HOUSEUNITS;
              long census_families = e338->CENSUS_FAMILIES;
              long census_households = e338->CENSUS_HOUSEHOLDS;
              long census_husbwife = e338->CENSUS_HUSBWIFE;
              long census_males = e338->CENSUS_MALES;
              long census_females = e338->CENSUS_FEMALES;
              long census_householdschildren = e338->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e338->CENSUS_HISPANIC;
              long v338 = e338->__av;
              __SQL_SUM_AGGREGATE_334INVENTORY1.addOrDelOnZero(se4383.modify(__sql_sum_aggregate_334inventoryinventory_locn), (v337 * (v338 * (location_sell_area_sq_ft * census_houseunits))));
            } while ((n338 = n338->nxt));
          }
          e337 = e337->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_335 = 0.0;
      __SQL_SUM_AGGREGATE_335INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e339 = LOCATION.head;
        while (e339) {
          long __sql_sum_aggregate_335inventoryinventory_locn = e339->LOCATION_LOCN;
          long location_zip = e339->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e339->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e339->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e339->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e339->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e339->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e339->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e339->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e339->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e339->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e339->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e339->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e339->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e339->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v339 = e339->__av;
          { //slice
            const HASH_RES_t h159 = CENSUS_mapkey0_idxfn::hash(se4387.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i340 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n340 = &(i340->buckets_[h159 % i340->size_]);
            CENSUS_entry* e340;
            do if ((e340 = n340->obj) && h159 == n340->hash && CENSUS_mapkey0_idxfn::equals(se4387, *e340)) {
              long census_population = e340->CENSUS_POPULATION;
              long census_white = e340->CENSUS_WHITE;
              long census_asian = e340->CENSUS_ASIAN;
              long census_pacific = e340->CENSUS_PACIFIC;
              long census_blackafrican = e340->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e340->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e340->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e340->CENSUS_HOUSEUNITS;
              long census_families = e340->CENSUS_FAMILIES;
              long census_households = e340->CENSUS_HOUSEHOLDS;
              long census_husbwife = e340->CENSUS_HUSBWIFE;
              long census_males = e340->CENSUS_MALES;
              long census_females = e340->CENSUS_FEMALES;
              long census_householdschildren = e340->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e340->CENSUS_HISPANIC;
              long v340 = e340->__av;
              __SQL_SUM_AGGREGATE_335INVENTORY1.addOrDelOnZero(se4386.modify(__sql_sum_aggregate_335inventoryinventory_locn), (v339 * (v340 * (location_sell_area_sq_ft * census_families))));
            } while ((n340 = n340->nxt));
          }
          e339 = e339->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_336 = 0.0;
      __SQL_SUM_AGGREGATE_336INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e341 = LOCATION.head;
        while (e341) {
          long __sql_sum_aggregate_336inventoryinventory_locn = e341->LOCATION_LOCN;
          long location_zip = e341->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e341->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e341->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e341->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e341->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e341->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e341->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e341->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e341->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e341->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e341->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e341->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e341->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e341->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v341 = e341->__av;
          { //slice
            const HASH_RES_t h160 = CENSUS_mapkey0_idxfn::hash(se4390.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i342 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n342 = &(i342->buckets_[h160 % i342->size_]);
            CENSUS_entry* e342;
            do if ((e342 = n342->obj) && h160 == n342->hash && CENSUS_mapkey0_idxfn::equals(se4390, *e342)) {
              long census_population = e342->CENSUS_POPULATION;
              long census_white = e342->CENSUS_WHITE;
              long census_asian = e342->CENSUS_ASIAN;
              long census_pacific = e342->CENSUS_PACIFIC;
              long census_blackafrican = e342->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e342->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e342->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e342->CENSUS_HOUSEUNITS;
              long census_families = e342->CENSUS_FAMILIES;
              long census_households = e342->CENSUS_HOUSEHOLDS;
              long census_husbwife = e342->CENSUS_HUSBWIFE;
              long census_males = e342->CENSUS_MALES;
              long census_females = e342->CENSUS_FEMALES;
              long census_householdschildren = e342->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e342->CENSUS_HISPANIC;
              long v342 = e342->__av;
              __SQL_SUM_AGGREGATE_336INVENTORY1.addOrDelOnZero(se4389.modify(__sql_sum_aggregate_336inventoryinventory_locn), (v341 * (v342 * (location_sell_area_sq_ft * census_households))));
            } while ((n342 = n342->nxt));
          }
          e341 = e341->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_337 = 0.0;
      __SQL_SUM_AGGREGATE_337INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e343 = LOCATION.head;
        while (e343) {
          long __sql_sum_aggregate_337inventoryinventory_locn = e343->LOCATION_LOCN;
          long location_zip = e343->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e343->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e343->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e343->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e343->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e343->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e343->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e343->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e343->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e343->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e343->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e343->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e343->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e343->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v343 = e343->__av;
          { //slice
            const HASH_RES_t h161 = CENSUS_mapkey0_idxfn::hash(se4393.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i344 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n344 = &(i344->buckets_[h161 % i344->size_]);
            CENSUS_entry* e344;
            do if ((e344 = n344->obj) && h161 == n344->hash && CENSUS_mapkey0_idxfn::equals(se4393, *e344)) {
              long census_population = e344->CENSUS_POPULATION;
              long census_white = e344->CENSUS_WHITE;
              long census_asian = e344->CENSUS_ASIAN;
              long census_pacific = e344->CENSUS_PACIFIC;
              long census_blackafrican = e344->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e344->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e344->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e344->CENSUS_HOUSEUNITS;
              long census_families = e344->CENSUS_FAMILIES;
              long census_households = e344->CENSUS_HOUSEHOLDS;
              long census_husbwife = e344->CENSUS_HUSBWIFE;
              long census_males = e344->CENSUS_MALES;
              long census_females = e344->CENSUS_FEMALES;
              long census_householdschildren = e344->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e344->CENSUS_HISPANIC;
              long v344 = e344->__av;
              __SQL_SUM_AGGREGATE_337INVENTORY1.addOrDelOnZero(se4392.modify(__sql_sum_aggregate_337inventoryinventory_locn), (v343 * (v344 * (location_sell_area_sq_ft * census_husbwife))));
            } while ((n344 = n344->nxt));
          }
          e343 = e343->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_338 = 0.0;
      __SQL_SUM_AGGREGATE_338INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e345 = LOCATION.head;
        while (e345) {
          long __sql_sum_aggregate_338inventoryinventory_locn = e345->LOCATION_LOCN;
          long location_zip = e345->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e345->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e345->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e345->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e345->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e345->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e345->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e345->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e345->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e345->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e345->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e345->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e345->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e345->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v345 = e345->__av;
          { //slice
            const HASH_RES_t h162 = CENSUS_mapkey0_idxfn::hash(se4396.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i346 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n346 = &(i346->buckets_[h162 % i346->size_]);
            CENSUS_entry* e346;
            do if ((e346 = n346->obj) && h162 == n346->hash && CENSUS_mapkey0_idxfn::equals(se4396, *e346)) {
              long census_population = e346->CENSUS_POPULATION;
              long census_white = e346->CENSUS_WHITE;
              long census_asian = e346->CENSUS_ASIAN;
              long census_pacific = e346->CENSUS_PACIFIC;
              long census_blackafrican = e346->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e346->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e346->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e346->CENSUS_HOUSEUNITS;
              long census_families = e346->CENSUS_FAMILIES;
              long census_households = e346->CENSUS_HOUSEHOLDS;
              long census_husbwife = e346->CENSUS_HUSBWIFE;
              long census_males = e346->CENSUS_MALES;
              long census_females = e346->CENSUS_FEMALES;
              long census_householdschildren = e346->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e346->CENSUS_HISPANIC;
              long v346 = e346->__av;
              __SQL_SUM_AGGREGATE_338INVENTORY1.addOrDelOnZero(se4395.modify(__sql_sum_aggregate_338inventoryinventory_locn), (v345 * (v346 * (location_sell_area_sq_ft * census_males))));
            } while ((n346 = n346->nxt));
          }
          e345 = e345->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_339 = 0.0;
      __SQL_SUM_AGGREGATE_339INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e347 = LOCATION.head;
        while (e347) {
          long __sql_sum_aggregate_339inventoryinventory_locn = e347->LOCATION_LOCN;
          long location_zip = e347->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e347->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e347->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e347->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e347->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e347->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e347->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e347->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e347->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e347->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e347->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e347->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e347->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e347->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v347 = e347->__av;
          { //slice
            const HASH_RES_t h163 = CENSUS_mapkey0_idxfn::hash(se4399.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i348 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n348 = &(i348->buckets_[h163 % i348->size_]);
            CENSUS_entry* e348;
            do if ((e348 = n348->obj) && h163 == n348->hash && CENSUS_mapkey0_idxfn::equals(se4399, *e348)) {
              long census_population = e348->CENSUS_POPULATION;
              long census_white = e348->CENSUS_WHITE;
              long census_asian = e348->CENSUS_ASIAN;
              long census_pacific = e348->CENSUS_PACIFIC;
              long census_blackafrican = e348->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e348->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e348->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e348->CENSUS_HOUSEUNITS;
              long census_families = e348->CENSUS_FAMILIES;
              long census_households = e348->CENSUS_HOUSEHOLDS;
              long census_husbwife = e348->CENSUS_HUSBWIFE;
              long census_males = e348->CENSUS_MALES;
              long census_females = e348->CENSUS_FEMALES;
              long census_householdschildren = e348->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e348->CENSUS_HISPANIC;
              long v348 = e348->__av;
              __SQL_SUM_AGGREGATE_339INVENTORY1.addOrDelOnZero(se4398.modify(__sql_sum_aggregate_339inventoryinventory_locn), (v347 * (v348 * (location_sell_area_sq_ft * census_females))));
            } while ((n348 = n348->nxt));
          }
          e347 = e347->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_340 = 0.0;
      __SQL_SUM_AGGREGATE_340INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e349 = LOCATION.head;
        while (e349) {
          long __sql_sum_aggregate_340inventoryinventory_locn = e349->LOCATION_LOCN;
          long location_zip = e349->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e349->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e349->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e349->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e349->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e349->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e349->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e349->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e349->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e349->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e349->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e349->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e349->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e349->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v349 = e349->__av;
          { //slice
            const HASH_RES_t h164 = CENSUS_mapkey0_idxfn::hash(se4402.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i350 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n350 = &(i350->buckets_[h164 % i350->size_]);
            CENSUS_entry* e350;
            do if ((e350 = n350->obj) && h164 == n350->hash && CENSUS_mapkey0_idxfn::equals(se4402, *e350)) {
              long census_population = e350->CENSUS_POPULATION;
              long census_white = e350->CENSUS_WHITE;
              long census_asian = e350->CENSUS_ASIAN;
              long census_pacific = e350->CENSUS_PACIFIC;
              long census_blackafrican = e350->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e350->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e350->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e350->CENSUS_HOUSEUNITS;
              long census_families = e350->CENSUS_FAMILIES;
              long census_households = e350->CENSUS_HOUSEHOLDS;
              long census_husbwife = e350->CENSUS_HUSBWIFE;
              long census_males = e350->CENSUS_MALES;
              long census_females = e350->CENSUS_FEMALES;
              long census_householdschildren = e350->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e350->CENSUS_HISPANIC;
              long v350 = e350->__av;
              __SQL_SUM_AGGREGATE_340INVENTORY1.addOrDelOnZero(se4401.modify(__sql_sum_aggregate_340inventoryinventory_locn), (v349 * (v350 * (location_sell_area_sq_ft * census_householdschildren))));
            } while ((n350 = n350->nxt));
          }
          e349 = e349->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_341 = 0.0;
      __SQL_SUM_AGGREGATE_341INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e351 = LOCATION.head;
        while (e351) {
          long __sql_sum_aggregate_341inventoryinventory_locn = e351->LOCATION_LOCN;
          long location_zip = e351->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e351->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e351->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e351->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e351->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e351->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e351->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e351->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e351->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e351->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e351->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e351->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e351->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e351->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v351 = e351->__av;
          { //slice
            const HASH_RES_t h165 = CENSUS_mapkey0_idxfn::hash(se4405.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i352 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n352 = &(i352->buckets_[h165 % i352->size_]);
            CENSUS_entry* e352;
            do if ((e352 = n352->obj) && h165 == n352->hash && CENSUS_mapkey0_idxfn::equals(se4405, *e352)) {
              long census_population = e352->CENSUS_POPULATION;
              long census_white = e352->CENSUS_WHITE;
              long census_asian = e352->CENSUS_ASIAN;
              long census_pacific = e352->CENSUS_PACIFIC;
              long census_blackafrican = e352->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e352->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e352->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e352->CENSUS_HOUSEUNITS;
              long census_families = e352->CENSUS_FAMILIES;
              long census_households = e352->CENSUS_HOUSEHOLDS;
              long census_husbwife = e352->CENSUS_HUSBWIFE;
              long census_males = e352->CENSUS_MALES;
              long census_females = e352->CENSUS_FEMALES;
              long census_householdschildren = e352->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e352->CENSUS_HISPANIC;
              long v352 = e352->__av;
              __SQL_SUM_AGGREGATE_341INVENTORY1.addOrDelOnZero(se4404.modify(__sql_sum_aggregate_341inventoryinventory_locn), (v351 * (v352 * (location_sell_area_sq_ft * census_hispanic))));
            } while ((n352 = n352->nxt));
          }
          e351 = e351->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_342 = 0.0;
      __SQL_SUM_AGGREGATE_343 = 0.0;
      __SQL_SUM_AGGREGATE_344 = 0.0;
      __SQL_SUM_AGGREGATE_345 = 0.0;
      __SQL_SUM_AGGREGATE_346 = 0.0;
      __SQL_SUM_AGGREGATE_347 = 0.0;
      __SQL_SUM_AGGREGATE_348 = 0.0;
      __SQL_SUM_AGGREGATE_349 = 0.0;
      __SQL_SUM_AGGREGATE_350 = 0.0;
      __SQL_SUM_AGGREGATE_351 = 0.0;
      __SQL_SUM_AGGREGATE_352 = 0.0;
      __SQL_SUM_AGGREGATE_352INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e353 = LOCATION.head;
        while (e353) {
          long __sql_sum_aggregate_352inventoryinventory_locn = e353->LOCATION_LOCN;
          long location_zip = e353->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e353->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e353->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e353->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e353->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e353->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e353->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e353->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e353->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e353->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e353->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e353->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e353->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e353->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v353 = e353->__av;
          { //slice
            const HASH_RES_t h166 = CENSUS_mapkey0_idxfn::hash(se4418.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i354 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n354 = &(i354->buckets_[h166 % i354->size_]);
            CENSUS_entry* e354;
            do if ((e354 = n354->obj) && h166 == n354->hash && CENSUS_mapkey0_idxfn::equals(se4418, *e354)) {
              long census_population = e354->CENSUS_POPULATION;
              long census_white = e354->CENSUS_WHITE;
              long census_asian = e354->CENSUS_ASIAN;
              long census_pacific = e354->CENSUS_PACIFIC;
              long census_blackafrican = e354->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e354->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e354->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e354->CENSUS_HOUSEUNITS;
              long census_families = e354->CENSUS_FAMILIES;
              long census_households = e354->CENSUS_HOUSEHOLDS;
              long census_husbwife = e354->CENSUS_HUSBWIFE;
              long census_males = e354->CENSUS_MALES;
              long census_females = e354->CENSUS_FEMALES;
              long census_householdschildren = e354->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e354->CENSUS_HISPANIC;
              long v354 = e354->__av;
              __SQL_SUM_AGGREGATE_352INVENTORY1.addOrDelOnZero(se4417.modify(__sql_sum_aggregate_352inventoryinventory_locn), (v353 * (v354 * (location_avghhi * location_avghhi))));
            } while ((n354 = n354->nxt));
          }
          e353 = e353->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_353 = 0.0;
      __SQL_SUM_AGGREGATE_353INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e355 = LOCATION.head;
        while (e355) {
          long __sql_sum_aggregate_353inventoryinventory_locn = e355->LOCATION_LOCN;
          long location_zip = e355->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e355->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e355->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e355->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e355->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e355->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e355->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e355->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e355->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e355->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e355->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e355->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e355->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e355->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v355 = e355->__av;
          { //slice
            const HASH_RES_t h167 = CENSUS_mapkey0_idxfn::hash(se4421.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i356 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n356 = &(i356->buckets_[h167 % i356->size_]);
            CENSUS_entry* e356;
            do if ((e356 = n356->obj) && h167 == n356->hash && CENSUS_mapkey0_idxfn::equals(se4421, *e356)) {
              long census_population = e356->CENSUS_POPULATION;
              long census_white = e356->CENSUS_WHITE;
              long census_asian = e356->CENSUS_ASIAN;
              long census_pacific = e356->CENSUS_PACIFIC;
              long census_blackafrican = e356->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e356->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e356->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e356->CENSUS_HOUSEUNITS;
              long census_families = e356->CENSUS_FAMILIES;
              long census_households = e356->CENSUS_HOUSEHOLDS;
              long census_husbwife = e356->CENSUS_HUSBWIFE;
              long census_males = e356->CENSUS_MALES;
              long census_females = e356->CENSUS_FEMALES;
              long census_householdschildren = e356->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e356->CENSUS_HISPANIC;
              long v356 = e356->__av;
              __SQL_SUM_AGGREGATE_353INVENTORY1.addOrDelOnZero(se4420.modify(__sql_sum_aggregate_353inventoryinventory_locn), (v355 * (v356 * (location_avghhi * location_supertargetdistance))));
            } while ((n356 = n356->nxt));
          }
          e355 = e355->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_354 = 0.0;
      __SQL_SUM_AGGREGATE_354INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e357 = LOCATION.head;
        while (e357) {
          long __sql_sum_aggregate_354inventoryinventory_locn = e357->LOCATION_LOCN;
          long location_zip = e357->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e357->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e357->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e357->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e357->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e357->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e357->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e357->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e357->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e357->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e357->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e357->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e357->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e357->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v357 = e357->__av;
          { //slice
            const HASH_RES_t h168 = CENSUS_mapkey0_idxfn::hash(se4424.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i358 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n358 = &(i358->buckets_[h168 % i358->size_]);
            CENSUS_entry* e358;
            do if ((e358 = n358->obj) && h168 == n358->hash && CENSUS_mapkey0_idxfn::equals(se4424, *e358)) {
              long census_population = e358->CENSUS_POPULATION;
              long census_white = e358->CENSUS_WHITE;
              long census_asian = e358->CENSUS_ASIAN;
              long census_pacific = e358->CENSUS_PACIFIC;
              long census_blackafrican = e358->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e358->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e358->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e358->CENSUS_HOUSEUNITS;
              long census_families = e358->CENSUS_FAMILIES;
              long census_households = e358->CENSUS_HOUSEHOLDS;
              long census_husbwife = e358->CENSUS_HUSBWIFE;
              long census_males = e358->CENSUS_MALES;
              long census_females = e358->CENSUS_FEMALES;
              long census_householdschildren = e358->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e358->CENSUS_HISPANIC;
              long v358 = e358->__av;
              __SQL_SUM_AGGREGATE_354INVENTORY1.addOrDelOnZero(se4423.modify(__sql_sum_aggregate_354inventoryinventory_locn), (v357 * (v358 * (location_avghhi * location_supertargetdrivetime))));
            } while ((n358 = n358->nxt));
          }
          e357 = e357->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_355 = 0.0;
      __SQL_SUM_AGGREGATE_355INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e359 = LOCATION.head;
        while (e359) {
          long __sql_sum_aggregate_355inventoryinventory_locn = e359->LOCATION_LOCN;
          long location_zip = e359->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e359->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e359->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e359->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e359->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e359->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e359->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e359->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e359->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e359->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e359->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e359->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e359->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e359->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v359 = e359->__av;
          { //slice
            const HASH_RES_t h169 = CENSUS_mapkey0_idxfn::hash(se4427.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i360 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n360 = &(i360->buckets_[h169 % i360->size_]);
            CENSUS_entry* e360;
            do if ((e360 = n360->obj) && h169 == n360->hash && CENSUS_mapkey0_idxfn::equals(se4427, *e360)) {
              long census_population = e360->CENSUS_POPULATION;
              long census_white = e360->CENSUS_WHITE;
              long census_asian = e360->CENSUS_ASIAN;
              long census_pacific = e360->CENSUS_PACIFIC;
              long census_blackafrican = e360->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e360->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e360->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e360->CENSUS_HOUSEUNITS;
              long census_families = e360->CENSUS_FAMILIES;
              long census_households = e360->CENSUS_HOUSEHOLDS;
              long census_husbwife = e360->CENSUS_HUSBWIFE;
              long census_males = e360->CENSUS_MALES;
              long census_females = e360->CENSUS_FEMALES;
              long census_householdschildren = e360->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e360->CENSUS_HISPANIC;
              long v360 = e360->__av;
              __SQL_SUM_AGGREGATE_355INVENTORY1.addOrDelOnZero(se4426.modify(__sql_sum_aggregate_355inventoryinventory_locn), (v359 * (v360 * (location_avghhi * location_targetdistance))));
            } while ((n360 = n360->nxt));
          }
          e359 = e359->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_356 = 0.0;
      __SQL_SUM_AGGREGATE_356INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e361 = LOCATION.head;
        while (e361) {
          long __sql_sum_aggregate_356inventoryinventory_locn = e361->LOCATION_LOCN;
          long location_zip = e361->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e361->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e361->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e361->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e361->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e361->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e361->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e361->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e361->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e361->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e361->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e361->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e361->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e361->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v361 = e361->__av;
          { //slice
            const HASH_RES_t h170 = CENSUS_mapkey0_idxfn::hash(se4430.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i362 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n362 = &(i362->buckets_[h170 % i362->size_]);
            CENSUS_entry* e362;
            do if ((e362 = n362->obj) && h170 == n362->hash && CENSUS_mapkey0_idxfn::equals(se4430, *e362)) {
              long census_population = e362->CENSUS_POPULATION;
              long census_white = e362->CENSUS_WHITE;
              long census_asian = e362->CENSUS_ASIAN;
              long census_pacific = e362->CENSUS_PACIFIC;
              long census_blackafrican = e362->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e362->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e362->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e362->CENSUS_HOUSEUNITS;
              long census_families = e362->CENSUS_FAMILIES;
              long census_households = e362->CENSUS_HOUSEHOLDS;
              long census_husbwife = e362->CENSUS_HUSBWIFE;
              long census_males = e362->CENSUS_MALES;
              long census_females = e362->CENSUS_FEMALES;
              long census_householdschildren = e362->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e362->CENSUS_HISPANIC;
              long v362 = e362->__av;
              __SQL_SUM_AGGREGATE_356INVENTORY1.addOrDelOnZero(se4429.modify(__sql_sum_aggregate_356inventoryinventory_locn), (v361 * (v362 * (location_avghhi * location_targetdrivetime))));
            } while ((n362 = n362->nxt));
          }
          e361 = e361->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_357 = 0.0;
      __SQL_SUM_AGGREGATE_357INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e363 = LOCATION.head;
        while (e363) {
          long __sql_sum_aggregate_357inventoryinventory_locn = e363->LOCATION_LOCN;
          long location_zip = e363->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e363->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e363->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e363->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e363->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e363->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e363->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e363->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e363->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e363->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e363->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e363->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e363->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e363->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v363 = e363->__av;
          { //slice
            const HASH_RES_t h171 = CENSUS_mapkey0_idxfn::hash(se4433.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i364 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n364 = &(i364->buckets_[h171 % i364->size_]);
            CENSUS_entry* e364;
            do if ((e364 = n364->obj) && h171 == n364->hash && CENSUS_mapkey0_idxfn::equals(se4433, *e364)) {
              long census_population = e364->CENSUS_POPULATION;
              long census_white = e364->CENSUS_WHITE;
              long census_asian = e364->CENSUS_ASIAN;
              long census_pacific = e364->CENSUS_PACIFIC;
              long census_blackafrican = e364->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e364->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e364->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e364->CENSUS_HOUSEUNITS;
              long census_families = e364->CENSUS_FAMILIES;
              long census_households = e364->CENSUS_HOUSEHOLDS;
              long census_husbwife = e364->CENSUS_HUSBWIFE;
              long census_males = e364->CENSUS_MALES;
              long census_females = e364->CENSUS_FEMALES;
              long census_householdschildren = e364->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e364->CENSUS_HISPANIC;
              long v364 = e364->__av;
              __SQL_SUM_AGGREGATE_357INVENTORY1.addOrDelOnZero(se4432.modify(__sql_sum_aggregate_357inventoryinventory_locn), (v363 * (v364 * (location_avghhi * location_walmartdistance))));
            } while ((n364 = n364->nxt));
          }
          e363 = e363->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_358 = 0.0;
      __SQL_SUM_AGGREGATE_358INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e365 = LOCATION.head;
        while (e365) {
          long __sql_sum_aggregate_358inventoryinventory_locn = e365->LOCATION_LOCN;
          long location_zip = e365->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e365->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e365->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e365->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e365->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e365->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e365->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e365->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e365->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e365->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e365->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e365->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e365->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e365->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v365 = e365->__av;
          { //slice
            const HASH_RES_t h172 = CENSUS_mapkey0_idxfn::hash(se4436.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i366 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n366 = &(i366->buckets_[h172 % i366->size_]);
            CENSUS_entry* e366;
            do if ((e366 = n366->obj) && h172 == n366->hash && CENSUS_mapkey0_idxfn::equals(se4436, *e366)) {
              long census_population = e366->CENSUS_POPULATION;
              long census_white = e366->CENSUS_WHITE;
              long census_asian = e366->CENSUS_ASIAN;
              long census_pacific = e366->CENSUS_PACIFIC;
              long census_blackafrican = e366->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e366->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e366->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e366->CENSUS_HOUSEUNITS;
              long census_families = e366->CENSUS_FAMILIES;
              long census_households = e366->CENSUS_HOUSEHOLDS;
              long census_husbwife = e366->CENSUS_HUSBWIFE;
              long census_males = e366->CENSUS_MALES;
              long census_females = e366->CENSUS_FEMALES;
              long census_householdschildren = e366->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e366->CENSUS_HISPANIC;
              long v366 = e366->__av;
              __SQL_SUM_AGGREGATE_358INVENTORY1.addOrDelOnZero(se4435.modify(__sql_sum_aggregate_358inventoryinventory_locn), (v365 * (v366 * (location_avghhi * location_walmartdrivetime))));
            } while ((n366 = n366->nxt));
          }
          e365 = e365->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_359 = 0.0;
      __SQL_SUM_AGGREGATE_359INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e367 = LOCATION.head;
        while (e367) {
          long __sql_sum_aggregate_359inventoryinventory_locn = e367->LOCATION_LOCN;
          long location_zip = e367->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e367->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e367->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e367->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e367->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e367->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e367->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e367->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e367->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e367->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e367->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e367->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e367->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e367->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v367 = e367->__av;
          { //slice
            const HASH_RES_t h173 = CENSUS_mapkey0_idxfn::hash(se4439.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i368 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n368 = &(i368->buckets_[h173 % i368->size_]);
            CENSUS_entry* e368;
            do if ((e368 = n368->obj) && h173 == n368->hash && CENSUS_mapkey0_idxfn::equals(se4439, *e368)) {
              long census_population = e368->CENSUS_POPULATION;
              long census_white = e368->CENSUS_WHITE;
              long census_asian = e368->CENSUS_ASIAN;
              long census_pacific = e368->CENSUS_PACIFIC;
              long census_blackafrican = e368->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e368->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e368->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e368->CENSUS_HOUSEUNITS;
              long census_families = e368->CENSUS_FAMILIES;
              long census_households = e368->CENSUS_HOUSEHOLDS;
              long census_husbwife = e368->CENSUS_HUSBWIFE;
              long census_males = e368->CENSUS_MALES;
              long census_females = e368->CENSUS_FEMALES;
              long census_householdschildren = e368->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e368->CENSUS_HISPANIC;
              long v368 = e368->__av;
              __SQL_SUM_AGGREGATE_359INVENTORY1.addOrDelOnZero(se4438.modify(__sql_sum_aggregate_359inventoryinventory_locn), (v367 * (v368 * (location_avghhi * location_walmartsupercenterdistance))));
            } while ((n368 = n368->nxt));
          }
          e367 = e367->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_360 = 0.0;
      __SQL_SUM_AGGREGATE_360INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e369 = LOCATION.head;
        while (e369) {
          long __sql_sum_aggregate_360inventoryinventory_locn = e369->LOCATION_LOCN;
          long location_zip = e369->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e369->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e369->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e369->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e369->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e369->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e369->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e369->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e369->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e369->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e369->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e369->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e369->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e369->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v369 = e369->__av;
          { //slice
            const HASH_RES_t h174 = CENSUS_mapkey0_idxfn::hash(se4442.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i370 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n370 = &(i370->buckets_[h174 % i370->size_]);
            CENSUS_entry* e370;
            do if ((e370 = n370->obj) && h174 == n370->hash && CENSUS_mapkey0_idxfn::equals(se4442, *e370)) {
              long census_population = e370->CENSUS_POPULATION;
              long census_white = e370->CENSUS_WHITE;
              long census_asian = e370->CENSUS_ASIAN;
              long census_pacific = e370->CENSUS_PACIFIC;
              long census_blackafrican = e370->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e370->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e370->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e370->CENSUS_HOUSEUNITS;
              long census_families = e370->CENSUS_FAMILIES;
              long census_households = e370->CENSUS_HOUSEHOLDS;
              long census_husbwife = e370->CENSUS_HUSBWIFE;
              long census_males = e370->CENSUS_MALES;
              long census_females = e370->CENSUS_FEMALES;
              long census_householdschildren = e370->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e370->CENSUS_HISPANIC;
              long v370 = e370->__av;
              __SQL_SUM_AGGREGATE_360INVENTORY1.addOrDelOnZero(se4441.modify(__sql_sum_aggregate_360inventoryinventory_locn), (v369 * (v370 * (location_avghhi * location_walmartsupercenterdrivetime))));
            } while ((n370 = n370->nxt));
          }
          e369 = e369->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_361 = 0.0;
      __SQL_SUM_AGGREGATE_361INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e371 = LOCATION.head;
        while (e371) {
          long __sql_sum_aggregate_361inventoryinventory_locn = e371->LOCATION_LOCN;
          long location_zip = e371->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e371->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e371->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e371->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e371->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e371->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e371->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e371->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e371->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e371->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e371->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e371->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e371->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e371->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v371 = e371->__av;
          { //slice
            const HASH_RES_t h175 = CENSUS_mapkey0_idxfn::hash(se4445.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i372 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n372 = &(i372->buckets_[h175 % i372->size_]);
            CENSUS_entry* e372;
            do if ((e372 = n372->obj) && h175 == n372->hash && CENSUS_mapkey0_idxfn::equals(se4445, *e372)) {
              long census_population = e372->CENSUS_POPULATION;
              long census_white = e372->CENSUS_WHITE;
              long census_asian = e372->CENSUS_ASIAN;
              long census_pacific = e372->CENSUS_PACIFIC;
              long census_blackafrican = e372->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e372->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e372->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e372->CENSUS_HOUSEUNITS;
              long census_families = e372->CENSUS_FAMILIES;
              long census_households = e372->CENSUS_HOUSEHOLDS;
              long census_husbwife = e372->CENSUS_HUSBWIFE;
              long census_males = e372->CENSUS_MALES;
              long census_females = e372->CENSUS_FEMALES;
              long census_householdschildren = e372->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e372->CENSUS_HISPANIC;
              long v372 = e372->__av;
              __SQL_SUM_AGGREGATE_361INVENTORY1.addOrDelOnZero(se4444.modify(__sql_sum_aggregate_361inventoryinventory_locn), (v371 * (v372 * (location_avghhi * census_population))));
            } while ((n372 = n372->nxt));
          }
          e371 = e371->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_362 = 0.0;
      __SQL_SUM_AGGREGATE_362INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e373 = LOCATION.head;
        while (e373) {
          long __sql_sum_aggregate_362inventoryinventory_locn = e373->LOCATION_LOCN;
          long location_zip = e373->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e373->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e373->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e373->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e373->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e373->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e373->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e373->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e373->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e373->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e373->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e373->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e373->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e373->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v373 = e373->__av;
          { //slice
            const HASH_RES_t h176 = CENSUS_mapkey0_idxfn::hash(se4448.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i374 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n374 = &(i374->buckets_[h176 % i374->size_]);
            CENSUS_entry* e374;
            do if ((e374 = n374->obj) && h176 == n374->hash && CENSUS_mapkey0_idxfn::equals(se4448, *e374)) {
              long census_population = e374->CENSUS_POPULATION;
              long census_white = e374->CENSUS_WHITE;
              long census_asian = e374->CENSUS_ASIAN;
              long census_pacific = e374->CENSUS_PACIFIC;
              long census_blackafrican = e374->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e374->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e374->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e374->CENSUS_HOUSEUNITS;
              long census_families = e374->CENSUS_FAMILIES;
              long census_households = e374->CENSUS_HOUSEHOLDS;
              long census_husbwife = e374->CENSUS_HUSBWIFE;
              long census_males = e374->CENSUS_MALES;
              long census_females = e374->CENSUS_FEMALES;
              long census_householdschildren = e374->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e374->CENSUS_HISPANIC;
              long v374 = e374->__av;
              __SQL_SUM_AGGREGATE_362INVENTORY1.addOrDelOnZero(se4447.modify(__sql_sum_aggregate_362inventoryinventory_locn), (v373 * (v374 * (location_avghhi * census_white))));
            } while ((n374 = n374->nxt));
          }
          e373 = e373->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_363 = 0.0;
      __SQL_SUM_AGGREGATE_363INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e375 = LOCATION.head;
        while (e375) {
          long __sql_sum_aggregate_363inventoryinventory_locn = e375->LOCATION_LOCN;
          long location_zip = e375->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e375->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e375->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e375->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e375->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e375->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e375->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e375->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e375->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e375->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e375->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e375->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e375->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e375->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v375 = e375->__av;
          { //slice
            const HASH_RES_t h177 = CENSUS_mapkey0_idxfn::hash(se4451.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i376 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n376 = &(i376->buckets_[h177 % i376->size_]);
            CENSUS_entry* e376;
            do if ((e376 = n376->obj) && h177 == n376->hash && CENSUS_mapkey0_idxfn::equals(se4451, *e376)) {
              long census_population = e376->CENSUS_POPULATION;
              long census_white = e376->CENSUS_WHITE;
              long census_asian = e376->CENSUS_ASIAN;
              long census_pacific = e376->CENSUS_PACIFIC;
              long census_blackafrican = e376->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e376->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e376->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e376->CENSUS_HOUSEUNITS;
              long census_families = e376->CENSUS_FAMILIES;
              long census_households = e376->CENSUS_HOUSEHOLDS;
              long census_husbwife = e376->CENSUS_HUSBWIFE;
              long census_males = e376->CENSUS_MALES;
              long census_females = e376->CENSUS_FEMALES;
              long census_householdschildren = e376->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e376->CENSUS_HISPANIC;
              long v376 = e376->__av;
              __SQL_SUM_AGGREGATE_363INVENTORY1.addOrDelOnZero(se4450.modify(__sql_sum_aggregate_363inventoryinventory_locn), (v375 * (v376 * (location_avghhi * census_asian))));
            } while ((n376 = n376->nxt));
          }
          e375 = e375->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_364 = 0.0;
      __SQL_SUM_AGGREGATE_364INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e377 = LOCATION.head;
        while (e377) {
          long __sql_sum_aggregate_364inventoryinventory_locn = e377->LOCATION_LOCN;
          long location_zip = e377->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e377->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e377->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e377->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e377->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e377->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e377->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e377->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e377->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e377->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e377->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e377->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e377->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e377->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v377 = e377->__av;
          { //slice
            const HASH_RES_t h178 = CENSUS_mapkey0_idxfn::hash(se4454.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i378 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n378 = &(i378->buckets_[h178 % i378->size_]);
            CENSUS_entry* e378;
            do if ((e378 = n378->obj) && h178 == n378->hash && CENSUS_mapkey0_idxfn::equals(se4454, *e378)) {
              long census_population = e378->CENSUS_POPULATION;
              long census_white = e378->CENSUS_WHITE;
              long census_asian = e378->CENSUS_ASIAN;
              long census_pacific = e378->CENSUS_PACIFIC;
              long census_blackafrican = e378->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e378->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e378->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e378->CENSUS_HOUSEUNITS;
              long census_families = e378->CENSUS_FAMILIES;
              long census_households = e378->CENSUS_HOUSEHOLDS;
              long census_husbwife = e378->CENSUS_HUSBWIFE;
              long census_males = e378->CENSUS_MALES;
              long census_females = e378->CENSUS_FEMALES;
              long census_householdschildren = e378->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e378->CENSUS_HISPANIC;
              long v378 = e378->__av;
              __SQL_SUM_AGGREGATE_364INVENTORY1.addOrDelOnZero(se4453.modify(__sql_sum_aggregate_364inventoryinventory_locn), (v377 * (v378 * (location_avghhi * census_pacific))));
            } while ((n378 = n378->nxt));
          }
          e377 = e377->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_365 = 0.0;
      __SQL_SUM_AGGREGATE_365INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e379 = LOCATION.head;
        while (e379) {
          long __sql_sum_aggregate_365inventoryinventory_locn = e379->LOCATION_LOCN;
          long location_zip = e379->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e379->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e379->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e379->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e379->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e379->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e379->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e379->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e379->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e379->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e379->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e379->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e379->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e379->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v379 = e379->__av;
          { //slice
            const HASH_RES_t h179 = CENSUS_mapkey0_idxfn::hash(se4457.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i380 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n380 = &(i380->buckets_[h179 % i380->size_]);
            CENSUS_entry* e380;
            do if ((e380 = n380->obj) && h179 == n380->hash && CENSUS_mapkey0_idxfn::equals(se4457, *e380)) {
              long census_population = e380->CENSUS_POPULATION;
              long census_white = e380->CENSUS_WHITE;
              long census_asian = e380->CENSUS_ASIAN;
              long census_pacific = e380->CENSUS_PACIFIC;
              long census_blackafrican = e380->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e380->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e380->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e380->CENSUS_HOUSEUNITS;
              long census_families = e380->CENSUS_FAMILIES;
              long census_households = e380->CENSUS_HOUSEHOLDS;
              long census_husbwife = e380->CENSUS_HUSBWIFE;
              long census_males = e380->CENSUS_MALES;
              long census_females = e380->CENSUS_FEMALES;
              long census_householdschildren = e380->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e380->CENSUS_HISPANIC;
              long v380 = e380->__av;
              __SQL_SUM_AGGREGATE_365INVENTORY1.addOrDelOnZero(se4456.modify(__sql_sum_aggregate_365inventoryinventory_locn), (v379 * (v380 * (location_avghhi * census_blackafrican))));
            } while ((n380 = n380->nxt));
          }
          e379 = e379->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_366 = 0.0;
      __SQL_SUM_AGGREGATE_366INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e381 = LOCATION.head;
        while (e381) {
          long __sql_sum_aggregate_366inventoryinventory_locn = e381->LOCATION_LOCN;
          long location_zip = e381->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e381->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e381->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e381->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e381->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e381->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e381->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e381->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e381->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e381->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e381->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e381->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e381->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e381->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v381 = e381->__av;
          { //slice
            const HASH_RES_t h180 = CENSUS_mapkey0_idxfn::hash(se4460.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i382 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n382 = &(i382->buckets_[h180 % i382->size_]);
            CENSUS_entry* e382;
            do if ((e382 = n382->obj) && h180 == n382->hash && CENSUS_mapkey0_idxfn::equals(se4460, *e382)) {
              long census_population = e382->CENSUS_POPULATION;
              long census_white = e382->CENSUS_WHITE;
              long census_asian = e382->CENSUS_ASIAN;
              long census_pacific = e382->CENSUS_PACIFIC;
              long census_blackafrican = e382->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e382->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e382->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e382->CENSUS_HOUSEUNITS;
              long census_families = e382->CENSUS_FAMILIES;
              long census_households = e382->CENSUS_HOUSEHOLDS;
              long census_husbwife = e382->CENSUS_HUSBWIFE;
              long census_males = e382->CENSUS_MALES;
              long census_females = e382->CENSUS_FEMALES;
              long census_householdschildren = e382->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e382->CENSUS_HISPANIC;
              long v382 = e382->__av;
              __SQL_SUM_AGGREGATE_366INVENTORY1.addOrDelOnZero(se4459.modify(__sql_sum_aggregate_366inventoryinventory_locn), (v381 * (v382 * (location_avghhi * census_medianage))));
            } while ((n382 = n382->nxt));
          }
          e381 = e381->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_367 = 0.0;
      __SQL_SUM_AGGREGATE_367INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e383 = LOCATION.head;
        while (e383) {
          long __sql_sum_aggregate_367inventoryinventory_locn = e383->LOCATION_LOCN;
          long location_zip = e383->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e383->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e383->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e383->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e383->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e383->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e383->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e383->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e383->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e383->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e383->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e383->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e383->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e383->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v383 = e383->__av;
          { //slice
            const HASH_RES_t h181 = CENSUS_mapkey0_idxfn::hash(se4463.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i384 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n384 = &(i384->buckets_[h181 % i384->size_]);
            CENSUS_entry* e384;
            do if ((e384 = n384->obj) && h181 == n384->hash && CENSUS_mapkey0_idxfn::equals(se4463, *e384)) {
              long census_population = e384->CENSUS_POPULATION;
              long census_white = e384->CENSUS_WHITE;
              long census_asian = e384->CENSUS_ASIAN;
              long census_pacific = e384->CENSUS_PACIFIC;
              long census_blackafrican = e384->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e384->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e384->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e384->CENSUS_HOUSEUNITS;
              long census_families = e384->CENSUS_FAMILIES;
              long census_households = e384->CENSUS_HOUSEHOLDS;
              long census_husbwife = e384->CENSUS_HUSBWIFE;
              long census_males = e384->CENSUS_MALES;
              long census_females = e384->CENSUS_FEMALES;
              long census_householdschildren = e384->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e384->CENSUS_HISPANIC;
              long v384 = e384->__av;
              __SQL_SUM_AGGREGATE_367INVENTORY1.addOrDelOnZero(se4462.modify(__sql_sum_aggregate_367inventoryinventory_locn), (v383 * (v384 * (location_avghhi * census_occupiedhouseunits))));
            } while ((n384 = n384->nxt));
          }
          e383 = e383->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_368 = 0.0;
      __SQL_SUM_AGGREGATE_368INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e385 = LOCATION.head;
        while (e385) {
          long __sql_sum_aggregate_368inventoryinventory_locn = e385->LOCATION_LOCN;
          long location_zip = e385->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e385->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e385->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e385->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e385->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e385->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e385->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e385->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e385->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e385->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e385->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e385->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e385->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e385->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v385 = e385->__av;
          { //slice
            const HASH_RES_t h182 = CENSUS_mapkey0_idxfn::hash(se4466.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i386 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n386 = &(i386->buckets_[h182 % i386->size_]);
            CENSUS_entry* e386;
            do if ((e386 = n386->obj) && h182 == n386->hash && CENSUS_mapkey0_idxfn::equals(se4466, *e386)) {
              long census_population = e386->CENSUS_POPULATION;
              long census_white = e386->CENSUS_WHITE;
              long census_asian = e386->CENSUS_ASIAN;
              long census_pacific = e386->CENSUS_PACIFIC;
              long census_blackafrican = e386->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e386->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e386->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e386->CENSUS_HOUSEUNITS;
              long census_families = e386->CENSUS_FAMILIES;
              long census_households = e386->CENSUS_HOUSEHOLDS;
              long census_husbwife = e386->CENSUS_HUSBWIFE;
              long census_males = e386->CENSUS_MALES;
              long census_females = e386->CENSUS_FEMALES;
              long census_householdschildren = e386->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e386->CENSUS_HISPANIC;
              long v386 = e386->__av;
              __SQL_SUM_AGGREGATE_368INVENTORY1.addOrDelOnZero(se4465.modify(__sql_sum_aggregate_368inventoryinventory_locn), (v385 * (v386 * (location_avghhi * census_houseunits))));
            } while ((n386 = n386->nxt));
          }
          e385 = e385->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_369 = 0.0;
      __SQL_SUM_AGGREGATE_369INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e387 = LOCATION.head;
        while (e387) {
          long __sql_sum_aggregate_369inventoryinventory_locn = e387->LOCATION_LOCN;
          long location_zip = e387->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e387->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e387->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e387->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e387->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e387->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e387->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e387->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e387->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e387->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e387->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e387->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e387->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e387->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v387 = e387->__av;
          { //slice
            const HASH_RES_t h183 = CENSUS_mapkey0_idxfn::hash(se4469.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i388 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n388 = &(i388->buckets_[h183 % i388->size_]);
            CENSUS_entry* e388;
            do if ((e388 = n388->obj) && h183 == n388->hash && CENSUS_mapkey0_idxfn::equals(se4469, *e388)) {
              long census_population = e388->CENSUS_POPULATION;
              long census_white = e388->CENSUS_WHITE;
              long census_asian = e388->CENSUS_ASIAN;
              long census_pacific = e388->CENSUS_PACIFIC;
              long census_blackafrican = e388->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e388->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e388->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e388->CENSUS_HOUSEUNITS;
              long census_families = e388->CENSUS_FAMILIES;
              long census_households = e388->CENSUS_HOUSEHOLDS;
              long census_husbwife = e388->CENSUS_HUSBWIFE;
              long census_males = e388->CENSUS_MALES;
              long census_females = e388->CENSUS_FEMALES;
              long census_householdschildren = e388->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e388->CENSUS_HISPANIC;
              long v388 = e388->__av;
              __SQL_SUM_AGGREGATE_369INVENTORY1.addOrDelOnZero(se4468.modify(__sql_sum_aggregate_369inventoryinventory_locn), (v387 * (v388 * (location_avghhi * census_families))));
            } while ((n388 = n388->nxt));
          }
          e387 = e387->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_370 = 0.0;
      __SQL_SUM_AGGREGATE_370INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e389 = LOCATION.head;
        while (e389) {
          long __sql_sum_aggregate_370inventoryinventory_locn = e389->LOCATION_LOCN;
          long location_zip = e389->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e389->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e389->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e389->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e389->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e389->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e389->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e389->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e389->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e389->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e389->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e389->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e389->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e389->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v389 = e389->__av;
          { //slice
            const HASH_RES_t h184 = CENSUS_mapkey0_idxfn::hash(se4472.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i390 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n390 = &(i390->buckets_[h184 % i390->size_]);
            CENSUS_entry* e390;
            do if ((e390 = n390->obj) && h184 == n390->hash && CENSUS_mapkey0_idxfn::equals(se4472, *e390)) {
              long census_population = e390->CENSUS_POPULATION;
              long census_white = e390->CENSUS_WHITE;
              long census_asian = e390->CENSUS_ASIAN;
              long census_pacific = e390->CENSUS_PACIFIC;
              long census_blackafrican = e390->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e390->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e390->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e390->CENSUS_HOUSEUNITS;
              long census_families = e390->CENSUS_FAMILIES;
              long census_households = e390->CENSUS_HOUSEHOLDS;
              long census_husbwife = e390->CENSUS_HUSBWIFE;
              long census_males = e390->CENSUS_MALES;
              long census_females = e390->CENSUS_FEMALES;
              long census_householdschildren = e390->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e390->CENSUS_HISPANIC;
              long v390 = e390->__av;
              __SQL_SUM_AGGREGATE_370INVENTORY1.addOrDelOnZero(se4471.modify(__sql_sum_aggregate_370inventoryinventory_locn), (v389 * (v390 * (location_avghhi * census_households))));
            } while ((n390 = n390->nxt));
          }
          e389 = e389->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_371 = 0.0;
      __SQL_SUM_AGGREGATE_371INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e391 = LOCATION.head;
        while (e391) {
          long __sql_sum_aggregate_371inventoryinventory_locn = e391->LOCATION_LOCN;
          long location_zip = e391->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e391->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e391->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e391->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e391->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e391->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e391->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e391->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e391->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e391->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e391->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e391->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e391->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e391->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v391 = e391->__av;
          { //slice
            const HASH_RES_t h185 = CENSUS_mapkey0_idxfn::hash(se4475.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i392 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n392 = &(i392->buckets_[h185 % i392->size_]);
            CENSUS_entry* e392;
            do if ((e392 = n392->obj) && h185 == n392->hash && CENSUS_mapkey0_idxfn::equals(se4475, *e392)) {
              long census_population = e392->CENSUS_POPULATION;
              long census_white = e392->CENSUS_WHITE;
              long census_asian = e392->CENSUS_ASIAN;
              long census_pacific = e392->CENSUS_PACIFIC;
              long census_blackafrican = e392->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e392->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e392->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e392->CENSUS_HOUSEUNITS;
              long census_families = e392->CENSUS_FAMILIES;
              long census_households = e392->CENSUS_HOUSEHOLDS;
              long census_husbwife = e392->CENSUS_HUSBWIFE;
              long census_males = e392->CENSUS_MALES;
              long census_females = e392->CENSUS_FEMALES;
              long census_householdschildren = e392->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e392->CENSUS_HISPANIC;
              long v392 = e392->__av;
              __SQL_SUM_AGGREGATE_371INVENTORY1.addOrDelOnZero(se4474.modify(__sql_sum_aggregate_371inventoryinventory_locn), (v391 * (v392 * (location_avghhi * census_husbwife))));
            } while ((n392 = n392->nxt));
          }
          e391 = e391->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_372 = 0.0;
      __SQL_SUM_AGGREGATE_372INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e393 = LOCATION.head;
        while (e393) {
          long __sql_sum_aggregate_372inventoryinventory_locn = e393->LOCATION_LOCN;
          long location_zip = e393->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e393->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e393->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e393->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e393->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e393->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e393->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e393->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e393->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e393->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e393->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e393->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e393->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e393->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v393 = e393->__av;
          { //slice
            const HASH_RES_t h186 = CENSUS_mapkey0_idxfn::hash(se4478.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i394 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n394 = &(i394->buckets_[h186 % i394->size_]);
            CENSUS_entry* e394;
            do if ((e394 = n394->obj) && h186 == n394->hash && CENSUS_mapkey0_idxfn::equals(se4478, *e394)) {
              long census_population = e394->CENSUS_POPULATION;
              long census_white = e394->CENSUS_WHITE;
              long census_asian = e394->CENSUS_ASIAN;
              long census_pacific = e394->CENSUS_PACIFIC;
              long census_blackafrican = e394->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e394->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e394->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e394->CENSUS_HOUSEUNITS;
              long census_families = e394->CENSUS_FAMILIES;
              long census_households = e394->CENSUS_HOUSEHOLDS;
              long census_husbwife = e394->CENSUS_HUSBWIFE;
              long census_males = e394->CENSUS_MALES;
              long census_females = e394->CENSUS_FEMALES;
              long census_householdschildren = e394->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e394->CENSUS_HISPANIC;
              long v394 = e394->__av;
              __SQL_SUM_AGGREGATE_372INVENTORY1.addOrDelOnZero(se4477.modify(__sql_sum_aggregate_372inventoryinventory_locn), (v393 * (v394 * (location_avghhi * census_males))));
            } while ((n394 = n394->nxt));
          }
          e393 = e393->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_373 = 0.0;
      __SQL_SUM_AGGREGATE_373INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e395 = LOCATION.head;
        while (e395) {
          long __sql_sum_aggregate_373inventoryinventory_locn = e395->LOCATION_LOCN;
          long location_zip = e395->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e395->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e395->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e395->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e395->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e395->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e395->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e395->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e395->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e395->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e395->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e395->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e395->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e395->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v395 = e395->__av;
          { //slice
            const HASH_RES_t h187 = CENSUS_mapkey0_idxfn::hash(se4481.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i396 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n396 = &(i396->buckets_[h187 % i396->size_]);
            CENSUS_entry* e396;
            do if ((e396 = n396->obj) && h187 == n396->hash && CENSUS_mapkey0_idxfn::equals(se4481, *e396)) {
              long census_population = e396->CENSUS_POPULATION;
              long census_white = e396->CENSUS_WHITE;
              long census_asian = e396->CENSUS_ASIAN;
              long census_pacific = e396->CENSUS_PACIFIC;
              long census_blackafrican = e396->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e396->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e396->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e396->CENSUS_HOUSEUNITS;
              long census_families = e396->CENSUS_FAMILIES;
              long census_households = e396->CENSUS_HOUSEHOLDS;
              long census_husbwife = e396->CENSUS_HUSBWIFE;
              long census_males = e396->CENSUS_MALES;
              long census_females = e396->CENSUS_FEMALES;
              long census_householdschildren = e396->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e396->CENSUS_HISPANIC;
              long v396 = e396->__av;
              __SQL_SUM_AGGREGATE_373INVENTORY1.addOrDelOnZero(se4480.modify(__sql_sum_aggregate_373inventoryinventory_locn), (v395 * (v396 * (location_avghhi * census_females))));
            } while ((n396 = n396->nxt));
          }
          e395 = e395->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_374 = 0.0;
      __SQL_SUM_AGGREGATE_374INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e397 = LOCATION.head;
        while (e397) {
          long __sql_sum_aggregate_374inventoryinventory_locn = e397->LOCATION_LOCN;
          long location_zip = e397->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e397->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e397->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e397->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e397->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e397->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e397->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e397->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e397->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e397->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e397->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e397->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e397->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e397->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v397 = e397->__av;
          { //slice
            const HASH_RES_t h188 = CENSUS_mapkey0_idxfn::hash(se4484.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i398 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n398 = &(i398->buckets_[h188 % i398->size_]);
            CENSUS_entry* e398;
            do if ((e398 = n398->obj) && h188 == n398->hash && CENSUS_mapkey0_idxfn::equals(se4484, *e398)) {
              long census_population = e398->CENSUS_POPULATION;
              long census_white = e398->CENSUS_WHITE;
              long census_asian = e398->CENSUS_ASIAN;
              long census_pacific = e398->CENSUS_PACIFIC;
              long census_blackafrican = e398->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e398->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e398->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e398->CENSUS_HOUSEUNITS;
              long census_families = e398->CENSUS_FAMILIES;
              long census_households = e398->CENSUS_HOUSEHOLDS;
              long census_husbwife = e398->CENSUS_HUSBWIFE;
              long census_males = e398->CENSUS_MALES;
              long census_females = e398->CENSUS_FEMALES;
              long census_householdschildren = e398->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e398->CENSUS_HISPANIC;
              long v398 = e398->__av;
              __SQL_SUM_AGGREGATE_374INVENTORY1.addOrDelOnZero(se4483.modify(__sql_sum_aggregate_374inventoryinventory_locn), (v397 * (v398 * (location_avghhi * census_householdschildren))));
            } while ((n398 = n398->nxt));
          }
          e397 = e397->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_375 = 0.0;
      __SQL_SUM_AGGREGATE_375INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e399 = LOCATION.head;
        while (e399) {
          long __sql_sum_aggregate_375inventoryinventory_locn = e399->LOCATION_LOCN;
          long location_zip = e399->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e399->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e399->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e399->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e399->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e399->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e399->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e399->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e399->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e399->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e399->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e399->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e399->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e399->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v399 = e399->__av;
          { //slice
            const HASH_RES_t h189 = CENSUS_mapkey0_idxfn::hash(se4487.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i400 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n400 = &(i400->buckets_[h189 % i400->size_]);
            CENSUS_entry* e400;
            do if ((e400 = n400->obj) && h189 == n400->hash && CENSUS_mapkey0_idxfn::equals(se4487, *e400)) {
              long census_population = e400->CENSUS_POPULATION;
              long census_white = e400->CENSUS_WHITE;
              long census_asian = e400->CENSUS_ASIAN;
              long census_pacific = e400->CENSUS_PACIFIC;
              long census_blackafrican = e400->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e400->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e400->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e400->CENSUS_HOUSEUNITS;
              long census_families = e400->CENSUS_FAMILIES;
              long census_households = e400->CENSUS_HOUSEHOLDS;
              long census_husbwife = e400->CENSUS_HUSBWIFE;
              long census_males = e400->CENSUS_MALES;
              long census_females = e400->CENSUS_FEMALES;
              long census_householdschildren = e400->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e400->CENSUS_HISPANIC;
              long v400 = e400->__av;
              __SQL_SUM_AGGREGATE_375INVENTORY1.addOrDelOnZero(se4486.modify(__sql_sum_aggregate_375inventoryinventory_locn), (v399 * (v400 * (location_avghhi * census_hispanic))));
            } while ((n400 = n400->nxt));
          }
          e399 = e399->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_376 = 0.0;
      __SQL_SUM_AGGREGATE_377 = 0.0;
      __SQL_SUM_AGGREGATE_378 = 0.0;
      __SQL_SUM_AGGREGATE_379 = 0.0;
      __SQL_SUM_AGGREGATE_380 = 0.0;
      __SQL_SUM_AGGREGATE_381 = 0.0;
      __SQL_SUM_AGGREGATE_382 = 0.0;
      __SQL_SUM_AGGREGATE_383 = 0.0;
      __SQL_SUM_AGGREGATE_384 = 0.0;
      __SQL_SUM_AGGREGATE_385 = 0.0;
      __SQL_SUM_AGGREGATE_386 = 0.0;
      __SQL_SUM_AGGREGATE_386INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e401 = LOCATION.head;
        while (e401) {
          long __sql_sum_aggregate_386inventoryinventory_locn = e401->LOCATION_LOCN;
          long location_zip = e401->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e401->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e401->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e401->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e401->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e401->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e401->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e401->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e401->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e401->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e401->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e401->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e401->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e401->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v401 = e401->__av;
          { //slice
            const HASH_RES_t h190 = CENSUS_mapkey0_idxfn::hash(se4500.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i402 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n402 = &(i402->buckets_[h190 % i402->size_]);
            CENSUS_entry* e402;
            do if ((e402 = n402->obj) && h190 == n402->hash && CENSUS_mapkey0_idxfn::equals(se4500, *e402)) {
              long census_population = e402->CENSUS_POPULATION;
              long census_white = e402->CENSUS_WHITE;
              long census_asian = e402->CENSUS_ASIAN;
              long census_pacific = e402->CENSUS_PACIFIC;
              long census_blackafrican = e402->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e402->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e402->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e402->CENSUS_HOUSEUNITS;
              long census_families = e402->CENSUS_FAMILIES;
              long census_households = e402->CENSUS_HOUSEHOLDS;
              long census_husbwife = e402->CENSUS_HUSBWIFE;
              long census_males = e402->CENSUS_MALES;
              long census_females = e402->CENSUS_FEMALES;
              long census_householdschildren = e402->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e402->CENSUS_HISPANIC;
              long v402 = e402->__av;
              __SQL_SUM_AGGREGATE_386INVENTORY1.addOrDelOnZero(se4499.modify(__sql_sum_aggregate_386inventoryinventory_locn), (v401 * (v402 * (location_supertargetdistance * location_supertargetdistance))));
            } while ((n402 = n402->nxt));
          }
          e401 = e401->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_387 = 0.0;
      __SQL_SUM_AGGREGATE_387INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e403 = LOCATION.head;
        while (e403) {
          long __sql_sum_aggregate_387inventoryinventory_locn = e403->LOCATION_LOCN;
          long location_zip = e403->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e403->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e403->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e403->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e403->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e403->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e403->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e403->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e403->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e403->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e403->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e403->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e403->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e403->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v403 = e403->__av;
          { //slice
            const HASH_RES_t h191 = CENSUS_mapkey0_idxfn::hash(se4503.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i404 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n404 = &(i404->buckets_[h191 % i404->size_]);
            CENSUS_entry* e404;
            do if ((e404 = n404->obj) && h191 == n404->hash && CENSUS_mapkey0_idxfn::equals(se4503, *e404)) {
              long census_population = e404->CENSUS_POPULATION;
              long census_white = e404->CENSUS_WHITE;
              long census_asian = e404->CENSUS_ASIAN;
              long census_pacific = e404->CENSUS_PACIFIC;
              long census_blackafrican = e404->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e404->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e404->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e404->CENSUS_HOUSEUNITS;
              long census_families = e404->CENSUS_FAMILIES;
              long census_households = e404->CENSUS_HOUSEHOLDS;
              long census_husbwife = e404->CENSUS_HUSBWIFE;
              long census_males = e404->CENSUS_MALES;
              long census_females = e404->CENSUS_FEMALES;
              long census_householdschildren = e404->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e404->CENSUS_HISPANIC;
              long v404 = e404->__av;
              __SQL_SUM_AGGREGATE_387INVENTORY1.addOrDelOnZero(se4502.modify(__sql_sum_aggregate_387inventoryinventory_locn), (v403 * (v404 * (location_supertargetdistance * location_supertargetdrivetime))));
            } while ((n404 = n404->nxt));
          }
          e403 = e403->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_388 = 0.0;
      __SQL_SUM_AGGREGATE_388INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e405 = LOCATION.head;
        while (e405) {
          long __sql_sum_aggregate_388inventoryinventory_locn = e405->LOCATION_LOCN;
          long location_zip = e405->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e405->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e405->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e405->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e405->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e405->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e405->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e405->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e405->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e405->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e405->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e405->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e405->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e405->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v405 = e405->__av;
          { //slice
            const HASH_RES_t h192 = CENSUS_mapkey0_idxfn::hash(se4506.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i406 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n406 = &(i406->buckets_[h192 % i406->size_]);
            CENSUS_entry* e406;
            do if ((e406 = n406->obj) && h192 == n406->hash && CENSUS_mapkey0_idxfn::equals(se4506, *e406)) {
              long census_population = e406->CENSUS_POPULATION;
              long census_white = e406->CENSUS_WHITE;
              long census_asian = e406->CENSUS_ASIAN;
              long census_pacific = e406->CENSUS_PACIFIC;
              long census_blackafrican = e406->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e406->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e406->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e406->CENSUS_HOUSEUNITS;
              long census_families = e406->CENSUS_FAMILIES;
              long census_households = e406->CENSUS_HOUSEHOLDS;
              long census_husbwife = e406->CENSUS_HUSBWIFE;
              long census_males = e406->CENSUS_MALES;
              long census_females = e406->CENSUS_FEMALES;
              long census_householdschildren = e406->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e406->CENSUS_HISPANIC;
              long v406 = e406->__av;
              __SQL_SUM_AGGREGATE_388INVENTORY1.addOrDelOnZero(se4505.modify(__sql_sum_aggregate_388inventoryinventory_locn), (v405 * (v406 * (location_supertargetdistance * location_targetdistance))));
            } while ((n406 = n406->nxt));
          }
          e405 = e405->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_389 = 0.0;
      __SQL_SUM_AGGREGATE_389INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e407 = LOCATION.head;
        while (e407) {
          long __sql_sum_aggregate_389inventoryinventory_locn = e407->LOCATION_LOCN;
          long location_zip = e407->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e407->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e407->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e407->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e407->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e407->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e407->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e407->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e407->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e407->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e407->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e407->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e407->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e407->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v407 = e407->__av;
          { //slice
            const HASH_RES_t h193 = CENSUS_mapkey0_idxfn::hash(se4509.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i408 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n408 = &(i408->buckets_[h193 % i408->size_]);
            CENSUS_entry* e408;
            do if ((e408 = n408->obj) && h193 == n408->hash && CENSUS_mapkey0_idxfn::equals(se4509, *e408)) {
              long census_population = e408->CENSUS_POPULATION;
              long census_white = e408->CENSUS_WHITE;
              long census_asian = e408->CENSUS_ASIAN;
              long census_pacific = e408->CENSUS_PACIFIC;
              long census_blackafrican = e408->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e408->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e408->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e408->CENSUS_HOUSEUNITS;
              long census_families = e408->CENSUS_FAMILIES;
              long census_households = e408->CENSUS_HOUSEHOLDS;
              long census_husbwife = e408->CENSUS_HUSBWIFE;
              long census_males = e408->CENSUS_MALES;
              long census_females = e408->CENSUS_FEMALES;
              long census_householdschildren = e408->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e408->CENSUS_HISPANIC;
              long v408 = e408->__av;
              __SQL_SUM_AGGREGATE_389INVENTORY1.addOrDelOnZero(se4508.modify(__sql_sum_aggregate_389inventoryinventory_locn), (v407 * (v408 * (location_supertargetdistance * location_targetdrivetime))));
            } while ((n408 = n408->nxt));
          }
          e407 = e407->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_390 = 0.0;
      __SQL_SUM_AGGREGATE_390INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e409 = LOCATION.head;
        while (e409) {
          long __sql_sum_aggregate_390inventoryinventory_locn = e409->LOCATION_LOCN;
          long location_zip = e409->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e409->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e409->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e409->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e409->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e409->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e409->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e409->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e409->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e409->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e409->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e409->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e409->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e409->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v409 = e409->__av;
          { //slice
            const HASH_RES_t h194 = CENSUS_mapkey0_idxfn::hash(se4512.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i410 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n410 = &(i410->buckets_[h194 % i410->size_]);
            CENSUS_entry* e410;
            do if ((e410 = n410->obj) && h194 == n410->hash && CENSUS_mapkey0_idxfn::equals(se4512, *e410)) {
              long census_population = e410->CENSUS_POPULATION;
              long census_white = e410->CENSUS_WHITE;
              long census_asian = e410->CENSUS_ASIAN;
              long census_pacific = e410->CENSUS_PACIFIC;
              long census_blackafrican = e410->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e410->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e410->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e410->CENSUS_HOUSEUNITS;
              long census_families = e410->CENSUS_FAMILIES;
              long census_households = e410->CENSUS_HOUSEHOLDS;
              long census_husbwife = e410->CENSUS_HUSBWIFE;
              long census_males = e410->CENSUS_MALES;
              long census_females = e410->CENSUS_FEMALES;
              long census_householdschildren = e410->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e410->CENSUS_HISPANIC;
              long v410 = e410->__av;
              __SQL_SUM_AGGREGATE_390INVENTORY1.addOrDelOnZero(se4511.modify(__sql_sum_aggregate_390inventoryinventory_locn), (v409 * (v410 * (location_supertargetdistance * location_walmartdistance))));
            } while ((n410 = n410->nxt));
          }
          e409 = e409->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_391 = 0.0;
      __SQL_SUM_AGGREGATE_391INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e411 = LOCATION.head;
        while (e411) {
          long __sql_sum_aggregate_391inventoryinventory_locn = e411->LOCATION_LOCN;
          long location_zip = e411->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e411->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e411->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e411->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e411->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e411->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e411->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e411->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e411->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e411->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e411->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e411->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e411->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e411->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v411 = e411->__av;
          { //slice
            const HASH_RES_t h195 = CENSUS_mapkey0_idxfn::hash(se4515.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i412 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n412 = &(i412->buckets_[h195 % i412->size_]);
            CENSUS_entry* e412;
            do if ((e412 = n412->obj) && h195 == n412->hash && CENSUS_mapkey0_idxfn::equals(se4515, *e412)) {
              long census_population = e412->CENSUS_POPULATION;
              long census_white = e412->CENSUS_WHITE;
              long census_asian = e412->CENSUS_ASIAN;
              long census_pacific = e412->CENSUS_PACIFIC;
              long census_blackafrican = e412->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e412->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e412->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e412->CENSUS_HOUSEUNITS;
              long census_families = e412->CENSUS_FAMILIES;
              long census_households = e412->CENSUS_HOUSEHOLDS;
              long census_husbwife = e412->CENSUS_HUSBWIFE;
              long census_males = e412->CENSUS_MALES;
              long census_females = e412->CENSUS_FEMALES;
              long census_householdschildren = e412->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e412->CENSUS_HISPANIC;
              long v412 = e412->__av;
              __SQL_SUM_AGGREGATE_391INVENTORY1.addOrDelOnZero(se4514.modify(__sql_sum_aggregate_391inventoryinventory_locn), (v411 * (v412 * (location_supertargetdistance * location_walmartdrivetime))));
            } while ((n412 = n412->nxt));
          }
          e411 = e411->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_392 = 0.0;
      __SQL_SUM_AGGREGATE_392INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e413 = LOCATION.head;
        while (e413) {
          long __sql_sum_aggregate_392inventoryinventory_locn = e413->LOCATION_LOCN;
          long location_zip = e413->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e413->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e413->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e413->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e413->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e413->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e413->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e413->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e413->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e413->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e413->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e413->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e413->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e413->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v413 = e413->__av;
          { //slice
            const HASH_RES_t h196 = CENSUS_mapkey0_idxfn::hash(se4518.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i414 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n414 = &(i414->buckets_[h196 % i414->size_]);
            CENSUS_entry* e414;
            do if ((e414 = n414->obj) && h196 == n414->hash && CENSUS_mapkey0_idxfn::equals(se4518, *e414)) {
              long census_population = e414->CENSUS_POPULATION;
              long census_white = e414->CENSUS_WHITE;
              long census_asian = e414->CENSUS_ASIAN;
              long census_pacific = e414->CENSUS_PACIFIC;
              long census_blackafrican = e414->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e414->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e414->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e414->CENSUS_HOUSEUNITS;
              long census_families = e414->CENSUS_FAMILIES;
              long census_households = e414->CENSUS_HOUSEHOLDS;
              long census_husbwife = e414->CENSUS_HUSBWIFE;
              long census_males = e414->CENSUS_MALES;
              long census_females = e414->CENSUS_FEMALES;
              long census_householdschildren = e414->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e414->CENSUS_HISPANIC;
              long v414 = e414->__av;
              __SQL_SUM_AGGREGATE_392INVENTORY1.addOrDelOnZero(se4517.modify(__sql_sum_aggregate_392inventoryinventory_locn), (v413 * (v414 * (location_supertargetdistance * location_walmartsupercenterdistance))));
            } while ((n414 = n414->nxt));
          }
          e413 = e413->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_393 = 0.0;
      __SQL_SUM_AGGREGATE_393INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e415 = LOCATION.head;
        while (e415) {
          long __sql_sum_aggregate_393inventoryinventory_locn = e415->LOCATION_LOCN;
          long location_zip = e415->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e415->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e415->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e415->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e415->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e415->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e415->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e415->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e415->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e415->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e415->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e415->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e415->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e415->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v415 = e415->__av;
          { //slice
            const HASH_RES_t h197 = CENSUS_mapkey0_idxfn::hash(se4521.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i416 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n416 = &(i416->buckets_[h197 % i416->size_]);
            CENSUS_entry* e416;
            do if ((e416 = n416->obj) && h197 == n416->hash && CENSUS_mapkey0_idxfn::equals(se4521, *e416)) {
              long census_population = e416->CENSUS_POPULATION;
              long census_white = e416->CENSUS_WHITE;
              long census_asian = e416->CENSUS_ASIAN;
              long census_pacific = e416->CENSUS_PACIFIC;
              long census_blackafrican = e416->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e416->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e416->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e416->CENSUS_HOUSEUNITS;
              long census_families = e416->CENSUS_FAMILIES;
              long census_households = e416->CENSUS_HOUSEHOLDS;
              long census_husbwife = e416->CENSUS_HUSBWIFE;
              long census_males = e416->CENSUS_MALES;
              long census_females = e416->CENSUS_FEMALES;
              long census_householdschildren = e416->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e416->CENSUS_HISPANIC;
              long v416 = e416->__av;
              __SQL_SUM_AGGREGATE_393INVENTORY1.addOrDelOnZero(se4520.modify(__sql_sum_aggregate_393inventoryinventory_locn), (v415 * (v416 * (location_supertargetdistance * location_walmartsupercenterdrivetime))));
            } while ((n416 = n416->nxt));
          }
          e415 = e415->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_394 = 0.0;
      __SQL_SUM_AGGREGATE_394INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e417 = LOCATION.head;
        while (e417) {
          long __sql_sum_aggregate_394inventoryinventory_locn = e417->LOCATION_LOCN;
          long location_zip = e417->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e417->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e417->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e417->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e417->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e417->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e417->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e417->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e417->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e417->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e417->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e417->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e417->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e417->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v417 = e417->__av;
          { //slice
            const HASH_RES_t h198 = CENSUS_mapkey0_idxfn::hash(se4524.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i418 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n418 = &(i418->buckets_[h198 % i418->size_]);
            CENSUS_entry* e418;
            do if ((e418 = n418->obj) && h198 == n418->hash && CENSUS_mapkey0_idxfn::equals(se4524, *e418)) {
              long census_population = e418->CENSUS_POPULATION;
              long census_white = e418->CENSUS_WHITE;
              long census_asian = e418->CENSUS_ASIAN;
              long census_pacific = e418->CENSUS_PACIFIC;
              long census_blackafrican = e418->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e418->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e418->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e418->CENSUS_HOUSEUNITS;
              long census_families = e418->CENSUS_FAMILIES;
              long census_households = e418->CENSUS_HOUSEHOLDS;
              long census_husbwife = e418->CENSUS_HUSBWIFE;
              long census_males = e418->CENSUS_MALES;
              long census_females = e418->CENSUS_FEMALES;
              long census_householdschildren = e418->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e418->CENSUS_HISPANIC;
              long v418 = e418->__av;
              __SQL_SUM_AGGREGATE_394INVENTORY1.addOrDelOnZero(se4523.modify(__sql_sum_aggregate_394inventoryinventory_locn), (v417 * (v418 * (location_supertargetdistance * census_population))));
            } while ((n418 = n418->nxt));
          }
          e417 = e417->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_395 = 0.0;
      __SQL_SUM_AGGREGATE_395INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e419 = LOCATION.head;
        while (e419) {
          long __sql_sum_aggregate_395inventoryinventory_locn = e419->LOCATION_LOCN;
          long location_zip = e419->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e419->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e419->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e419->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e419->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e419->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e419->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e419->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e419->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e419->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e419->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e419->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e419->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e419->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v419 = e419->__av;
          { //slice
            const HASH_RES_t h199 = CENSUS_mapkey0_idxfn::hash(se4527.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i420 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n420 = &(i420->buckets_[h199 % i420->size_]);
            CENSUS_entry* e420;
            do if ((e420 = n420->obj) && h199 == n420->hash && CENSUS_mapkey0_idxfn::equals(se4527, *e420)) {
              long census_population = e420->CENSUS_POPULATION;
              long census_white = e420->CENSUS_WHITE;
              long census_asian = e420->CENSUS_ASIAN;
              long census_pacific = e420->CENSUS_PACIFIC;
              long census_blackafrican = e420->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e420->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e420->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e420->CENSUS_HOUSEUNITS;
              long census_families = e420->CENSUS_FAMILIES;
              long census_households = e420->CENSUS_HOUSEHOLDS;
              long census_husbwife = e420->CENSUS_HUSBWIFE;
              long census_males = e420->CENSUS_MALES;
              long census_females = e420->CENSUS_FEMALES;
              long census_householdschildren = e420->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e420->CENSUS_HISPANIC;
              long v420 = e420->__av;
              __SQL_SUM_AGGREGATE_395INVENTORY1.addOrDelOnZero(se4526.modify(__sql_sum_aggregate_395inventoryinventory_locn), (v419 * (v420 * (location_supertargetdistance * census_white))));
            } while ((n420 = n420->nxt));
          }
          e419 = e419->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_396 = 0.0;
      __SQL_SUM_AGGREGATE_396INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e421 = LOCATION.head;
        while (e421) {
          long __sql_sum_aggregate_396inventoryinventory_locn = e421->LOCATION_LOCN;
          long location_zip = e421->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e421->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e421->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e421->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e421->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e421->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e421->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e421->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e421->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e421->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e421->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e421->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e421->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e421->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v421 = e421->__av;
          { //slice
            const HASH_RES_t h200 = CENSUS_mapkey0_idxfn::hash(se4530.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i422 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n422 = &(i422->buckets_[h200 % i422->size_]);
            CENSUS_entry* e422;
            do if ((e422 = n422->obj) && h200 == n422->hash && CENSUS_mapkey0_idxfn::equals(se4530, *e422)) {
              long census_population = e422->CENSUS_POPULATION;
              long census_white = e422->CENSUS_WHITE;
              long census_asian = e422->CENSUS_ASIAN;
              long census_pacific = e422->CENSUS_PACIFIC;
              long census_blackafrican = e422->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e422->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e422->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e422->CENSUS_HOUSEUNITS;
              long census_families = e422->CENSUS_FAMILIES;
              long census_households = e422->CENSUS_HOUSEHOLDS;
              long census_husbwife = e422->CENSUS_HUSBWIFE;
              long census_males = e422->CENSUS_MALES;
              long census_females = e422->CENSUS_FEMALES;
              long census_householdschildren = e422->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e422->CENSUS_HISPANIC;
              long v422 = e422->__av;
              __SQL_SUM_AGGREGATE_396INVENTORY1.addOrDelOnZero(se4529.modify(__sql_sum_aggregate_396inventoryinventory_locn), (v421 * (v422 * (location_supertargetdistance * census_asian))));
            } while ((n422 = n422->nxt));
          }
          e421 = e421->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_397 = 0.0;
      __SQL_SUM_AGGREGATE_397INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e423 = LOCATION.head;
        while (e423) {
          long __sql_sum_aggregate_397inventoryinventory_locn = e423->LOCATION_LOCN;
          long location_zip = e423->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e423->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e423->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e423->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e423->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e423->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e423->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e423->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e423->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e423->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e423->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e423->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e423->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e423->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v423 = e423->__av;
          { //slice
            const HASH_RES_t h201 = CENSUS_mapkey0_idxfn::hash(se4533.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i424 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n424 = &(i424->buckets_[h201 % i424->size_]);
            CENSUS_entry* e424;
            do if ((e424 = n424->obj) && h201 == n424->hash && CENSUS_mapkey0_idxfn::equals(se4533, *e424)) {
              long census_population = e424->CENSUS_POPULATION;
              long census_white = e424->CENSUS_WHITE;
              long census_asian = e424->CENSUS_ASIAN;
              long census_pacific = e424->CENSUS_PACIFIC;
              long census_blackafrican = e424->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e424->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e424->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e424->CENSUS_HOUSEUNITS;
              long census_families = e424->CENSUS_FAMILIES;
              long census_households = e424->CENSUS_HOUSEHOLDS;
              long census_husbwife = e424->CENSUS_HUSBWIFE;
              long census_males = e424->CENSUS_MALES;
              long census_females = e424->CENSUS_FEMALES;
              long census_householdschildren = e424->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e424->CENSUS_HISPANIC;
              long v424 = e424->__av;
              __SQL_SUM_AGGREGATE_397INVENTORY1.addOrDelOnZero(se4532.modify(__sql_sum_aggregate_397inventoryinventory_locn), (v423 * (v424 * (location_supertargetdistance * census_pacific))));
            } while ((n424 = n424->nxt));
          }
          e423 = e423->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_398 = 0.0;
      __SQL_SUM_AGGREGATE_398INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e425 = LOCATION.head;
        while (e425) {
          long __sql_sum_aggregate_398inventoryinventory_locn = e425->LOCATION_LOCN;
          long location_zip = e425->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e425->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e425->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e425->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e425->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e425->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e425->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e425->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e425->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e425->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e425->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e425->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e425->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e425->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v425 = e425->__av;
          { //slice
            const HASH_RES_t h202 = CENSUS_mapkey0_idxfn::hash(se4536.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i426 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n426 = &(i426->buckets_[h202 % i426->size_]);
            CENSUS_entry* e426;
            do if ((e426 = n426->obj) && h202 == n426->hash && CENSUS_mapkey0_idxfn::equals(se4536, *e426)) {
              long census_population = e426->CENSUS_POPULATION;
              long census_white = e426->CENSUS_WHITE;
              long census_asian = e426->CENSUS_ASIAN;
              long census_pacific = e426->CENSUS_PACIFIC;
              long census_blackafrican = e426->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e426->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e426->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e426->CENSUS_HOUSEUNITS;
              long census_families = e426->CENSUS_FAMILIES;
              long census_households = e426->CENSUS_HOUSEHOLDS;
              long census_husbwife = e426->CENSUS_HUSBWIFE;
              long census_males = e426->CENSUS_MALES;
              long census_females = e426->CENSUS_FEMALES;
              long census_householdschildren = e426->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e426->CENSUS_HISPANIC;
              long v426 = e426->__av;
              __SQL_SUM_AGGREGATE_398INVENTORY1.addOrDelOnZero(se4535.modify(__sql_sum_aggregate_398inventoryinventory_locn), (v425 * (v426 * (location_supertargetdistance * census_blackafrican))));
            } while ((n426 = n426->nxt));
          }
          e425 = e425->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_399 = 0.0;
      __SQL_SUM_AGGREGATE_399INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e427 = LOCATION.head;
        while (e427) {
          long __sql_sum_aggregate_399inventoryinventory_locn = e427->LOCATION_LOCN;
          long location_zip = e427->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e427->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e427->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e427->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e427->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e427->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e427->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e427->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e427->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e427->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e427->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e427->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e427->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e427->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v427 = e427->__av;
          { //slice
            const HASH_RES_t h203 = CENSUS_mapkey0_idxfn::hash(se4539.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i428 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n428 = &(i428->buckets_[h203 % i428->size_]);
            CENSUS_entry* e428;
            do if ((e428 = n428->obj) && h203 == n428->hash && CENSUS_mapkey0_idxfn::equals(se4539, *e428)) {
              long census_population = e428->CENSUS_POPULATION;
              long census_white = e428->CENSUS_WHITE;
              long census_asian = e428->CENSUS_ASIAN;
              long census_pacific = e428->CENSUS_PACIFIC;
              long census_blackafrican = e428->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e428->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e428->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e428->CENSUS_HOUSEUNITS;
              long census_families = e428->CENSUS_FAMILIES;
              long census_households = e428->CENSUS_HOUSEHOLDS;
              long census_husbwife = e428->CENSUS_HUSBWIFE;
              long census_males = e428->CENSUS_MALES;
              long census_females = e428->CENSUS_FEMALES;
              long census_householdschildren = e428->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e428->CENSUS_HISPANIC;
              long v428 = e428->__av;
              __SQL_SUM_AGGREGATE_399INVENTORY1.addOrDelOnZero(se4538.modify(__sql_sum_aggregate_399inventoryinventory_locn), (v427 * (v428 * (location_supertargetdistance * census_medianage))));
            } while ((n428 = n428->nxt));
          }
          e427 = e427->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_400 = 0.0;
      __SQL_SUM_AGGREGATE_400INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e429 = LOCATION.head;
        while (e429) {
          long __sql_sum_aggregate_400inventoryinventory_locn = e429->LOCATION_LOCN;
          long location_zip = e429->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e429->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e429->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e429->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e429->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e429->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e429->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e429->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e429->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e429->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e429->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e429->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e429->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e429->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v429 = e429->__av;
          { //slice
            const HASH_RES_t h204 = CENSUS_mapkey0_idxfn::hash(se4542.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i430 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n430 = &(i430->buckets_[h204 % i430->size_]);
            CENSUS_entry* e430;
            do if ((e430 = n430->obj) && h204 == n430->hash && CENSUS_mapkey0_idxfn::equals(se4542, *e430)) {
              long census_population = e430->CENSUS_POPULATION;
              long census_white = e430->CENSUS_WHITE;
              long census_asian = e430->CENSUS_ASIAN;
              long census_pacific = e430->CENSUS_PACIFIC;
              long census_blackafrican = e430->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e430->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e430->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e430->CENSUS_HOUSEUNITS;
              long census_families = e430->CENSUS_FAMILIES;
              long census_households = e430->CENSUS_HOUSEHOLDS;
              long census_husbwife = e430->CENSUS_HUSBWIFE;
              long census_males = e430->CENSUS_MALES;
              long census_females = e430->CENSUS_FEMALES;
              long census_householdschildren = e430->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e430->CENSUS_HISPANIC;
              long v430 = e430->__av;
              __SQL_SUM_AGGREGATE_400INVENTORY1.addOrDelOnZero(se4541.modify(__sql_sum_aggregate_400inventoryinventory_locn), (v429 * (v430 * (location_supertargetdistance * census_occupiedhouseunits))));
            } while ((n430 = n430->nxt));
          }
          e429 = e429->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_401 = 0.0;
      __SQL_SUM_AGGREGATE_401INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e431 = LOCATION.head;
        while (e431) {
          long __sql_sum_aggregate_401inventoryinventory_locn = e431->LOCATION_LOCN;
          long location_zip = e431->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e431->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e431->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e431->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e431->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e431->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e431->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e431->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e431->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e431->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e431->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e431->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e431->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e431->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v431 = e431->__av;
          { //slice
            const HASH_RES_t h205 = CENSUS_mapkey0_idxfn::hash(se4545.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i432 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n432 = &(i432->buckets_[h205 % i432->size_]);
            CENSUS_entry* e432;
            do if ((e432 = n432->obj) && h205 == n432->hash && CENSUS_mapkey0_idxfn::equals(se4545, *e432)) {
              long census_population = e432->CENSUS_POPULATION;
              long census_white = e432->CENSUS_WHITE;
              long census_asian = e432->CENSUS_ASIAN;
              long census_pacific = e432->CENSUS_PACIFIC;
              long census_blackafrican = e432->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e432->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e432->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e432->CENSUS_HOUSEUNITS;
              long census_families = e432->CENSUS_FAMILIES;
              long census_households = e432->CENSUS_HOUSEHOLDS;
              long census_husbwife = e432->CENSUS_HUSBWIFE;
              long census_males = e432->CENSUS_MALES;
              long census_females = e432->CENSUS_FEMALES;
              long census_householdschildren = e432->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e432->CENSUS_HISPANIC;
              long v432 = e432->__av;
              __SQL_SUM_AGGREGATE_401INVENTORY1.addOrDelOnZero(se4544.modify(__sql_sum_aggregate_401inventoryinventory_locn), (v431 * (v432 * (location_supertargetdistance * census_houseunits))));
            } while ((n432 = n432->nxt));
          }
          e431 = e431->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_402 = 0.0;
      __SQL_SUM_AGGREGATE_402INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e433 = LOCATION.head;
        while (e433) {
          long __sql_sum_aggregate_402inventoryinventory_locn = e433->LOCATION_LOCN;
          long location_zip = e433->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e433->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e433->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e433->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e433->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e433->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e433->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e433->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e433->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e433->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e433->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e433->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e433->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e433->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v433 = e433->__av;
          { //slice
            const HASH_RES_t h206 = CENSUS_mapkey0_idxfn::hash(se4548.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i434 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n434 = &(i434->buckets_[h206 % i434->size_]);
            CENSUS_entry* e434;
            do if ((e434 = n434->obj) && h206 == n434->hash && CENSUS_mapkey0_idxfn::equals(se4548, *e434)) {
              long census_population = e434->CENSUS_POPULATION;
              long census_white = e434->CENSUS_WHITE;
              long census_asian = e434->CENSUS_ASIAN;
              long census_pacific = e434->CENSUS_PACIFIC;
              long census_blackafrican = e434->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e434->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e434->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e434->CENSUS_HOUSEUNITS;
              long census_families = e434->CENSUS_FAMILIES;
              long census_households = e434->CENSUS_HOUSEHOLDS;
              long census_husbwife = e434->CENSUS_HUSBWIFE;
              long census_males = e434->CENSUS_MALES;
              long census_females = e434->CENSUS_FEMALES;
              long census_householdschildren = e434->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e434->CENSUS_HISPANIC;
              long v434 = e434->__av;
              __SQL_SUM_AGGREGATE_402INVENTORY1.addOrDelOnZero(se4547.modify(__sql_sum_aggregate_402inventoryinventory_locn), (v433 * (v434 * (location_supertargetdistance * census_families))));
            } while ((n434 = n434->nxt));
          }
          e433 = e433->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_403 = 0.0;
      __SQL_SUM_AGGREGATE_403INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e435 = LOCATION.head;
        while (e435) {
          long __sql_sum_aggregate_403inventoryinventory_locn = e435->LOCATION_LOCN;
          long location_zip = e435->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e435->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e435->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e435->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e435->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e435->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e435->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e435->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e435->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e435->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e435->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e435->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e435->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e435->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v435 = e435->__av;
          { //slice
            const HASH_RES_t h207 = CENSUS_mapkey0_idxfn::hash(se4551.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i436 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n436 = &(i436->buckets_[h207 % i436->size_]);
            CENSUS_entry* e436;
            do if ((e436 = n436->obj) && h207 == n436->hash && CENSUS_mapkey0_idxfn::equals(se4551, *e436)) {
              long census_population = e436->CENSUS_POPULATION;
              long census_white = e436->CENSUS_WHITE;
              long census_asian = e436->CENSUS_ASIAN;
              long census_pacific = e436->CENSUS_PACIFIC;
              long census_blackafrican = e436->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e436->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e436->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e436->CENSUS_HOUSEUNITS;
              long census_families = e436->CENSUS_FAMILIES;
              long census_households = e436->CENSUS_HOUSEHOLDS;
              long census_husbwife = e436->CENSUS_HUSBWIFE;
              long census_males = e436->CENSUS_MALES;
              long census_females = e436->CENSUS_FEMALES;
              long census_householdschildren = e436->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e436->CENSUS_HISPANIC;
              long v436 = e436->__av;
              __SQL_SUM_AGGREGATE_403INVENTORY1.addOrDelOnZero(se4550.modify(__sql_sum_aggregate_403inventoryinventory_locn), (v435 * (v436 * (location_supertargetdistance * census_households))));
            } while ((n436 = n436->nxt));
          }
          e435 = e435->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_404 = 0.0;
      __SQL_SUM_AGGREGATE_404INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e437 = LOCATION.head;
        while (e437) {
          long __sql_sum_aggregate_404inventoryinventory_locn = e437->LOCATION_LOCN;
          long location_zip = e437->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e437->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e437->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e437->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e437->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e437->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e437->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e437->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e437->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e437->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e437->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e437->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e437->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e437->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v437 = e437->__av;
          { //slice
            const HASH_RES_t h208 = CENSUS_mapkey0_idxfn::hash(se4554.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i438 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n438 = &(i438->buckets_[h208 % i438->size_]);
            CENSUS_entry* e438;
            do if ((e438 = n438->obj) && h208 == n438->hash && CENSUS_mapkey0_idxfn::equals(se4554, *e438)) {
              long census_population = e438->CENSUS_POPULATION;
              long census_white = e438->CENSUS_WHITE;
              long census_asian = e438->CENSUS_ASIAN;
              long census_pacific = e438->CENSUS_PACIFIC;
              long census_blackafrican = e438->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e438->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e438->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e438->CENSUS_HOUSEUNITS;
              long census_families = e438->CENSUS_FAMILIES;
              long census_households = e438->CENSUS_HOUSEHOLDS;
              long census_husbwife = e438->CENSUS_HUSBWIFE;
              long census_males = e438->CENSUS_MALES;
              long census_females = e438->CENSUS_FEMALES;
              long census_householdschildren = e438->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e438->CENSUS_HISPANIC;
              long v438 = e438->__av;
              __SQL_SUM_AGGREGATE_404INVENTORY1.addOrDelOnZero(se4553.modify(__sql_sum_aggregate_404inventoryinventory_locn), (v437 * (v438 * (location_supertargetdistance * census_husbwife))));
            } while ((n438 = n438->nxt));
          }
          e437 = e437->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_405 = 0.0;
      __SQL_SUM_AGGREGATE_405INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e439 = LOCATION.head;
        while (e439) {
          long __sql_sum_aggregate_405inventoryinventory_locn = e439->LOCATION_LOCN;
          long location_zip = e439->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e439->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e439->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e439->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e439->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e439->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e439->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e439->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e439->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e439->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e439->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e439->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e439->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e439->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v439 = e439->__av;
          { //slice
            const HASH_RES_t h209 = CENSUS_mapkey0_idxfn::hash(se4557.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i440 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n440 = &(i440->buckets_[h209 % i440->size_]);
            CENSUS_entry* e440;
            do if ((e440 = n440->obj) && h209 == n440->hash && CENSUS_mapkey0_idxfn::equals(se4557, *e440)) {
              long census_population = e440->CENSUS_POPULATION;
              long census_white = e440->CENSUS_WHITE;
              long census_asian = e440->CENSUS_ASIAN;
              long census_pacific = e440->CENSUS_PACIFIC;
              long census_blackafrican = e440->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e440->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e440->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e440->CENSUS_HOUSEUNITS;
              long census_families = e440->CENSUS_FAMILIES;
              long census_households = e440->CENSUS_HOUSEHOLDS;
              long census_husbwife = e440->CENSUS_HUSBWIFE;
              long census_males = e440->CENSUS_MALES;
              long census_females = e440->CENSUS_FEMALES;
              long census_householdschildren = e440->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e440->CENSUS_HISPANIC;
              long v440 = e440->__av;
              __SQL_SUM_AGGREGATE_405INVENTORY1.addOrDelOnZero(se4556.modify(__sql_sum_aggregate_405inventoryinventory_locn), (v439 * (v440 * (location_supertargetdistance * census_males))));
            } while ((n440 = n440->nxt));
          }
          e439 = e439->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_406 = 0.0;
      __SQL_SUM_AGGREGATE_406INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e441 = LOCATION.head;
        while (e441) {
          long __sql_sum_aggregate_406inventoryinventory_locn = e441->LOCATION_LOCN;
          long location_zip = e441->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e441->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e441->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e441->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e441->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e441->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e441->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e441->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e441->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e441->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e441->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e441->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e441->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e441->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v441 = e441->__av;
          { //slice
            const HASH_RES_t h210 = CENSUS_mapkey0_idxfn::hash(se4560.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i442 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n442 = &(i442->buckets_[h210 % i442->size_]);
            CENSUS_entry* e442;
            do if ((e442 = n442->obj) && h210 == n442->hash && CENSUS_mapkey0_idxfn::equals(se4560, *e442)) {
              long census_population = e442->CENSUS_POPULATION;
              long census_white = e442->CENSUS_WHITE;
              long census_asian = e442->CENSUS_ASIAN;
              long census_pacific = e442->CENSUS_PACIFIC;
              long census_blackafrican = e442->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e442->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e442->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e442->CENSUS_HOUSEUNITS;
              long census_families = e442->CENSUS_FAMILIES;
              long census_households = e442->CENSUS_HOUSEHOLDS;
              long census_husbwife = e442->CENSUS_HUSBWIFE;
              long census_males = e442->CENSUS_MALES;
              long census_females = e442->CENSUS_FEMALES;
              long census_householdschildren = e442->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e442->CENSUS_HISPANIC;
              long v442 = e442->__av;
              __SQL_SUM_AGGREGATE_406INVENTORY1.addOrDelOnZero(se4559.modify(__sql_sum_aggregate_406inventoryinventory_locn), (v441 * (v442 * (location_supertargetdistance * census_females))));
            } while ((n442 = n442->nxt));
          }
          e441 = e441->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_407 = 0.0;
      __SQL_SUM_AGGREGATE_407INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e443 = LOCATION.head;
        while (e443) {
          long __sql_sum_aggregate_407inventoryinventory_locn = e443->LOCATION_LOCN;
          long location_zip = e443->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e443->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e443->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e443->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e443->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e443->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e443->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e443->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e443->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e443->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e443->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e443->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e443->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e443->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v443 = e443->__av;
          { //slice
            const HASH_RES_t h211 = CENSUS_mapkey0_idxfn::hash(se4563.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i444 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n444 = &(i444->buckets_[h211 % i444->size_]);
            CENSUS_entry* e444;
            do if ((e444 = n444->obj) && h211 == n444->hash && CENSUS_mapkey0_idxfn::equals(se4563, *e444)) {
              long census_population = e444->CENSUS_POPULATION;
              long census_white = e444->CENSUS_WHITE;
              long census_asian = e444->CENSUS_ASIAN;
              long census_pacific = e444->CENSUS_PACIFIC;
              long census_blackafrican = e444->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e444->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e444->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e444->CENSUS_HOUSEUNITS;
              long census_families = e444->CENSUS_FAMILIES;
              long census_households = e444->CENSUS_HOUSEHOLDS;
              long census_husbwife = e444->CENSUS_HUSBWIFE;
              long census_males = e444->CENSUS_MALES;
              long census_females = e444->CENSUS_FEMALES;
              long census_householdschildren = e444->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e444->CENSUS_HISPANIC;
              long v444 = e444->__av;
              __SQL_SUM_AGGREGATE_407INVENTORY1.addOrDelOnZero(se4562.modify(__sql_sum_aggregate_407inventoryinventory_locn), (v443 * (v444 * (location_supertargetdistance * census_householdschildren))));
            } while ((n444 = n444->nxt));
          }
          e443 = e443->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_408 = 0.0;
      __SQL_SUM_AGGREGATE_408INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e445 = LOCATION.head;
        while (e445) {
          long __sql_sum_aggregate_408inventoryinventory_locn = e445->LOCATION_LOCN;
          long location_zip = e445->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e445->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e445->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e445->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e445->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e445->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e445->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e445->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e445->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e445->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e445->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e445->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e445->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e445->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v445 = e445->__av;
          { //slice
            const HASH_RES_t h212 = CENSUS_mapkey0_idxfn::hash(se4566.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i446 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n446 = &(i446->buckets_[h212 % i446->size_]);
            CENSUS_entry* e446;
            do if ((e446 = n446->obj) && h212 == n446->hash && CENSUS_mapkey0_idxfn::equals(se4566, *e446)) {
              long census_population = e446->CENSUS_POPULATION;
              long census_white = e446->CENSUS_WHITE;
              long census_asian = e446->CENSUS_ASIAN;
              long census_pacific = e446->CENSUS_PACIFIC;
              long census_blackafrican = e446->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e446->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e446->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e446->CENSUS_HOUSEUNITS;
              long census_families = e446->CENSUS_FAMILIES;
              long census_households = e446->CENSUS_HOUSEHOLDS;
              long census_husbwife = e446->CENSUS_HUSBWIFE;
              long census_males = e446->CENSUS_MALES;
              long census_females = e446->CENSUS_FEMALES;
              long census_householdschildren = e446->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e446->CENSUS_HISPANIC;
              long v446 = e446->__av;
              __SQL_SUM_AGGREGATE_408INVENTORY1.addOrDelOnZero(se4565.modify(__sql_sum_aggregate_408inventoryinventory_locn), (v445 * (v446 * (location_supertargetdistance * census_hispanic))));
            } while ((n446 = n446->nxt));
          }
          e445 = e445->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_409 = 0.0;
      __SQL_SUM_AGGREGATE_410 = 0.0;
      __SQL_SUM_AGGREGATE_411 = 0.0;
      __SQL_SUM_AGGREGATE_412 = 0.0;
      __SQL_SUM_AGGREGATE_413 = 0.0;
      __SQL_SUM_AGGREGATE_414 = 0.0;
      __SQL_SUM_AGGREGATE_415 = 0.0;
      __SQL_SUM_AGGREGATE_416 = 0.0;
      __SQL_SUM_AGGREGATE_417 = 0.0;
      __SQL_SUM_AGGREGATE_418 = 0.0;
      __SQL_SUM_AGGREGATE_419 = 0.0;
      __SQL_SUM_AGGREGATE_419INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e447 = LOCATION.head;
        while (e447) {
          long __sql_sum_aggregate_419inventoryinventory_locn = e447->LOCATION_LOCN;
          long location_zip = e447->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e447->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e447->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e447->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e447->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e447->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e447->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e447->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e447->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e447->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e447->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e447->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e447->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e447->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v447 = e447->__av;
          { //slice
            const HASH_RES_t h213 = CENSUS_mapkey0_idxfn::hash(se4579.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i448 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n448 = &(i448->buckets_[h213 % i448->size_]);
            CENSUS_entry* e448;
            do if ((e448 = n448->obj) && h213 == n448->hash && CENSUS_mapkey0_idxfn::equals(se4579, *e448)) {
              long census_population = e448->CENSUS_POPULATION;
              long census_white = e448->CENSUS_WHITE;
              long census_asian = e448->CENSUS_ASIAN;
              long census_pacific = e448->CENSUS_PACIFIC;
              long census_blackafrican = e448->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e448->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e448->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e448->CENSUS_HOUSEUNITS;
              long census_families = e448->CENSUS_FAMILIES;
              long census_households = e448->CENSUS_HOUSEHOLDS;
              long census_husbwife = e448->CENSUS_HUSBWIFE;
              long census_males = e448->CENSUS_MALES;
              long census_females = e448->CENSUS_FEMALES;
              long census_householdschildren = e448->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e448->CENSUS_HISPANIC;
              long v448 = e448->__av;
              __SQL_SUM_AGGREGATE_419INVENTORY1.addOrDelOnZero(se4578.modify(__sql_sum_aggregate_419inventoryinventory_locn), (v447 * (v448 * (location_supertargetdrivetime * location_supertargetdrivetime))));
            } while ((n448 = n448->nxt));
          }
          e447 = e447->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_420 = 0.0;
      __SQL_SUM_AGGREGATE_420INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e449 = LOCATION.head;
        while (e449) {
          long __sql_sum_aggregate_420inventoryinventory_locn = e449->LOCATION_LOCN;
          long location_zip = e449->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e449->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e449->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e449->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e449->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e449->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e449->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e449->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e449->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e449->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e449->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e449->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e449->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e449->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v449 = e449->__av;
          { //slice
            const HASH_RES_t h214 = CENSUS_mapkey0_idxfn::hash(se4582.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i450 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n450 = &(i450->buckets_[h214 % i450->size_]);
            CENSUS_entry* e450;
            do if ((e450 = n450->obj) && h214 == n450->hash && CENSUS_mapkey0_idxfn::equals(se4582, *e450)) {
              long census_population = e450->CENSUS_POPULATION;
              long census_white = e450->CENSUS_WHITE;
              long census_asian = e450->CENSUS_ASIAN;
              long census_pacific = e450->CENSUS_PACIFIC;
              long census_blackafrican = e450->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e450->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e450->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e450->CENSUS_HOUSEUNITS;
              long census_families = e450->CENSUS_FAMILIES;
              long census_households = e450->CENSUS_HOUSEHOLDS;
              long census_husbwife = e450->CENSUS_HUSBWIFE;
              long census_males = e450->CENSUS_MALES;
              long census_females = e450->CENSUS_FEMALES;
              long census_householdschildren = e450->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e450->CENSUS_HISPANIC;
              long v450 = e450->__av;
              __SQL_SUM_AGGREGATE_420INVENTORY1.addOrDelOnZero(se4581.modify(__sql_sum_aggregate_420inventoryinventory_locn), (v449 * (v450 * (location_supertargetdrivetime * location_targetdistance))));
            } while ((n450 = n450->nxt));
          }
          e449 = e449->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_421 = 0.0;
      __SQL_SUM_AGGREGATE_421INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e451 = LOCATION.head;
        while (e451) {
          long __sql_sum_aggregate_421inventoryinventory_locn = e451->LOCATION_LOCN;
          long location_zip = e451->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e451->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e451->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e451->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e451->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e451->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e451->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e451->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e451->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e451->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e451->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e451->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e451->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e451->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v451 = e451->__av;
          { //slice
            const HASH_RES_t h215 = CENSUS_mapkey0_idxfn::hash(se4585.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i452 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n452 = &(i452->buckets_[h215 % i452->size_]);
            CENSUS_entry* e452;
            do if ((e452 = n452->obj) && h215 == n452->hash && CENSUS_mapkey0_idxfn::equals(se4585, *e452)) {
              long census_population = e452->CENSUS_POPULATION;
              long census_white = e452->CENSUS_WHITE;
              long census_asian = e452->CENSUS_ASIAN;
              long census_pacific = e452->CENSUS_PACIFIC;
              long census_blackafrican = e452->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e452->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e452->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e452->CENSUS_HOUSEUNITS;
              long census_families = e452->CENSUS_FAMILIES;
              long census_households = e452->CENSUS_HOUSEHOLDS;
              long census_husbwife = e452->CENSUS_HUSBWIFE;
              long census_males = e452->CENSUS_MALES;
              long census_females = e452->CENSUS_FEMALES;
              long census_householdschildren = e452->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e452->CENSUS_HISPANIC;
              long v452 = e452->__av;
              __SQL_SUM_AGGREGATE_421INVENTORY1.addOrDelOnZero(se4584.modify(__sql_sum_aggregate_421inventoryinventory_locn), (v451 * (v452 * (location_supertargetdrivetime * location_targetdrivetime))));
            } while ((n452 = n452->nxt));
          }
          e451 = e451->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_422 = 0.0;
      __SQL_SUM_AGGREGATE_422INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e453 = LOCATION.head;
        while (e453) {
          long __sql_sum_aggregate_422inventoryinventory_locn = e453->LOCATION_LOCN;
          long location_zip = e453->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e453->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e453->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e453->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e453->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e453->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e453->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e453->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e453->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e453->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e453->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e453->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e453->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e453->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v453 = e453->__av;
          { //slice
            const HASH_RES_t h216 = CENSUS_mapkey0_idxfn::hash(se4588.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i454 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n454 = &(i454->buckets_[h216 % i454->size_]);
            CENSUS_entry* e454;
            do if ((e454 = n454->obj) && h216 == n454->hash && CENSUS_mapkey0_idxfn::equals(se4588, *e454)) {
              long census_population = e454->CENSUS_POPULATION;
              long census_white = e454->CENSUS_WHITE;
              long census_asian = e454->CENSUS_ASIAN;
              long census_pacific = e454->CENSUS_PACIFIC;
              long census_blackafrican = e454->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e454->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e454->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e454->CENSUS_HOUSEUNITS;
              long census_families = e454->CENSUS_FAMILIES;
              long census_households = e454->CENSUS_HOUSEHOLDS;
              long census_husbwife = e454->CENSUS_HUSBWIFE;
              long census_males = e454->CENSUS_MALES;
              long census_females = e454->CENSUS_FEMALES;
              long census_householdschildren = e454->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e454->CENSUS_HISPANIC;
              long v454 = e454->__av;
              __SQL_SUM_AGGREGATE_422INVENTORY1.addOrDelOnZero(se4587.modify(__sql_sum_aggregate_422inventoryinventory_locn), (v453 * (v454 * (location_supertargetdrivetime * location_walmartdistance))));
            } while ((n454 = n454->nxt));
          }
          e453 = e453->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_423 = 0.0;
      __SQL_SUM_AGGREGATE_423INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e455 = LOCATION.head;
        while (e455) {
          long __sql_sum_aggregate_423inventoryinventory_locn = e455->LOCATION_LOCN;
          long location_zip = e455->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e455->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e455->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e455->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e455->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e455->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e455->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e455->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e455->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e455->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e455->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e455->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e455->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e455->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v455 = e455->__av;
          { //slice
            const HASH_RES_t h217 = CENSUS_mapkey0_idxfn::hash(se4591.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i456 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n456 = &(i456->buckets_[h217 % i456->size_]);
            CENSUS_entry* e456;
            do if ((e456 = n456->obj) && h217 == n456->hash && CENSUS_mapkey0_idxfn::equals(se4591, *e456)) {
              long census_population = e456->CENSUS_POPULATION;
              long census_white = e456->CENSUS_WHITE;
              long census_asian = e456->CENSUS_ASIAN;
              long census_pacific = e456->CENSUS_PACIFIC;
              long census_blackafrican = e456->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e456->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e456->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e456->CENSUS_HOUSEUNITS;
              long census_families = e456->CENSUS_FAMILIES;
              long census_households = e456->CENSUS_HOUSEHOLDS;
              long census_husbwife = e456->CENSUS_HUSBWIFE;
              long census_males = e456->CENSUS_MALES;
              long census_females = e456->CENSUS_FEMALES;
              long census_householdschildren = e456->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e456->CENSUS_HISPANIC;
              long v456 = e456->__av;
              __SQL_SUM_AGGREGATE_423INVENTORY1.addOrDelOnZero(se4590.modify(__sql_sum_aggregate_423inventoryinventory_locn), (v455 * (v456 * (location_supertargetdrivetime * location_walmartdrivetime))));
            } while ((n456 = n456->nxt));
          }
          e455 = e455->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_424 = 0.0;
      __SQL_SUM_AGGREGATE_424INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e457 = LOCATION.head;
        while (e457) {
          long __sql_sum_aggregate_424inventoryinventory_locn = e457->LOCATION_LOCN;
          long location_zip = e457->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e457->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e457->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e457->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e457->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e457->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e457->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e457->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e457->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e457->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e457->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e457->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e457->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e457->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v457 = e457->__av;
          { //slice
            const HASH_RES_t h218 = CENSUS_mapkey0_idxfn::hash(se4594.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i458 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n458 = &(i458->buckets_[h218 % i458->size_]);
            CENSUS_entry* e458;
            do if ((e458 = n458->obj) && h218 == n458->hash && CENSUS_mapkey0_idxfn::equals(se4594, *e458)) {
              long census_population = e458->CENSUS_POPULATION;
              long census_white = e458->CENSUS_WHITE;
              long census_asian = e458->CENSUS_ASIAN;
              long census_pacific = e458->CENSUS_PACIFIC;
              long census_blackafrican = e458->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e458->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e458->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e458->CENSUS_HOUSEUNITS;
              long census_families = e458->CENSUS_FAMILIES;
              long census_households = e458->CENSUS_HOUSEHOLDS;
              long census_husbwife = e458->CENSUS_HUSBWIFE;
              long census_males = e458->CENSUS_MALES;
              long census_females = e458->CENSUS_FEMALES;
              long census_householdschildren = e458->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e458->CENSUS_HISPANIC;
              long v458 = e458->__av;
              __SQL_SUM_AGGREGATE_424INVENTORY1.addOrDelOnZero(se4593.modify(__sql_sum_aggregate_424inventoryinventory_locn), (v457 * (v458 * (location_supertargetdrivetime * location_walmartsupercenterdistance))));
            } while ((n458 = n458->nxt));
          }
          e457 = e457->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_425 = 0.0;
      __SQL_SUM_AGGREGATE_425INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e459 = LOCATION.head;
        while (e459) {
          long __sql_sum_aggregate_425inventoryinventory_locn = e459->LOCATION_LOCN;
          long location_zip = e459->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e459->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e459->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e459->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e459->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e459->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e459->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e459->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e459->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e459->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e459->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e459->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e459->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e459->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v459 = e459->__av;
          { //slice
            const HASH_RES_t h219 = CENSUS_mapkey0_idxfn::hash(se4597.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i460 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n460 = &(i460->buckets_[h219 % i460->size_]);
            CENSUS_entry* e460;
            do if ((e460 = n460->obj) && h219 == n460->hash && CENSUS_mapkey0_idxfn::equals(se4597, *e460)) {
              long census_population = e460->CENSUS_POPULATION;
              long census_white = e460->CENSUS_WHITE;
              long census_asian = e460->CENSUS_ASIAN;
              long census_pacific = e460->CENSUS_PACIFIC;
              long census_blackafrican = e460->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e460->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e460->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e460->CENSUS_HOUSEUNITS;
              long census_families = e460->CENSUS_FAMILIES;
              long census_households = e460->CENSUS_HOUSEHOLDS;
              long census_husbwife = e460->CENSUS_HUSBWIFE;
              long census_males = e460->CENSUS_MALES;
              long census_females = e460->CENSUS_FEMALES;
              long census_householdschildren = e460->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e460->CENSUS_HISPANIC;
              long v460 = e460->__av;
              __SQL_SUM_AGGREGATE_425INVENTORY1.addOrDelOnZero(se4596.modify(__sql_sum_aggregate_425inventoryinventory_locn), (v459 * (v460 * (location_supertargetdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n460 = n460->nxt));
          }
          e459 = e459->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_426 = 0.0;
      __SQL_SUM_AGGREGATE_426INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e461 = LOCATION.head;
        while (e461) {
          long __sql_sum_aggregate_426inventoryinventory_locn = e461->LOCATION_LOCN;
          long location_zip = e461->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e461->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e461->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e461->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e461->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e461->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e461->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e461->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e461->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e461->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e461->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e461->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e461->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e461->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v461 = e461->__av;
          { //slice
            const HASH_RES_t h220 = CENSUS_mapkey0_idxfn::hash(se4600.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i462 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n462 = &(i462->buckets_[h220 % i462->size_]);
            CENSUS_entry* e462;
            do if ((e462 = n462->obj) && h220 == n462->hash && CENSUS_mapkey0_idxfn::equals(se4600, *e462)) {
              long census_population = e462->CENSUS_POPULATION;
              long census_white = e462->CENSUS_WHITE;
              long census_asian = e462->CENSUS_ASIAN;
              long census_pacific = e462->CENSUS_PACIFIC;
              long census_blackafrican = e462->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e462->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e462->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e462->CENSUS_HOUSEUNITS;
              long census_families = e462->CENSUS_FAMILIES;
              long census_households = e462->CENSUS_HOUSEHOLDS;
              long census_husbwife = e462->CENSUS_HUSBWIFE;
              long census_males = e462->CENSUS_MALES;
              long census_females = e462->CENSUS_FEMALES;
              long census_householdschildren = e462->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e462->CENSUS_HISPANIC;
              long v462 = e462->__av;
              __SQL_SUM_AGGREGATE_426INVENTORY1.addOrDelOnZero(se4599.modify(__sql_sum_aggregate_426inventoryinventory_locn), (v461 * (v462 * (location_supertargetdrivetime * census_population))));
            } while ((n462 = n462->nxt));
          }
          e461 = e461->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_427 = 0.0;
      __SQL_SUM_AGGREGATE_427INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e463 = LOCATION.head;
        while (e463) {
          long __sql_sum_aggregate_427inventoryinventory_locn = e463->LOCATION_LOCN;
          long location_zip = e463->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e463->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e463->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e463->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e463->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e463->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e463->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e463->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e463->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e463->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e463->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e463->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e463->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e463->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v463 = e463->__av;
          { //slice
            const HASH_RES_t h221 = CENSUS_mapkey0_idxfn::hash(se4603.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i464 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n464 = &(i464->buckets_[h221 % i464->size_]);
            CENSUS_entry* e464;
            do if ((e464 = n464->obj) && h221 == n464->hash && CENSUS_mapkey0_idxfn::equals(se4603, *e464)) {
              long census_population = e464->CENSUS_POPULATION;
              long census_white = e464->CENSUS_WHITE;
              long census_asian = e464->CENSUS_ASIAN;
              long census_pacific = e464->CENSUS_PACIFIC;
              long census_blackafrican = e464->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e464->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e464->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e464->CENSUS_HOUSEUNITS;
              long census_families = e464->CENSUS_FAMILIES;
              long census_households = e464->CENSUS_HOUSEHOLDS;
              long census_husbwife = e464->CENSUS_HUSBWIFE;
              long census_males = e464->CENSUS_MALES;
              long census_females = e464->CENSUS_FEMALES;
              long census_householdschildren = e464->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e464->CENSUS_HISPANIC;
              long v464 = e464->__av;
              __SQL_SUM_AGGREGATE_427INVENTORY1.addOrDelOnZero(se4602.modify(__sql_sum_aggregate_427inventoryinventory_locn), (v463 * (v464 * (location_supertargetdrivetime * census_white))));
            } while ((n464 = n464->nxt));
          }
          e463 = e463->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_428 = 0.0;
      __SQL_SUM_AGGREGATE_428INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e465 = LOCATION.head;
        while (e465) {
          long __sql_sum_aggregate_428inventoryinventory_locn = e465->LOCATION_LOCN;
          long location_zip = e465->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e465->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e465->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e465->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e465->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e465->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e465->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e465->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e465->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e465->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e465->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e465->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e465->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e465->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v465 = e465->__av;
          { //slice
            const HASH_RES_t h222 = CENSUS_mapkey0_idxfn::hash(se4606.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i466 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n466 = &(i466->buckets_[h222 % i466->size_]);
            CENSUS_entry* e466;
            do if ((e466 = n466->obj) && h222 == n466->hash && CENSUS_mapkey0_idxfn::equals(se4606, *e466)) {
              long census_population = e466->CENSUS_POPULATION;
              long census_white = e466->CENSUS_WHITE;
              long census_asian = e466->CENSUS_ASIAN;
              long census_pacific = e466->CENSUS_PACIFIC;
              long census_blackafrican = e466->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e466->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e466->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e466->CENSUS_HOUSEUNITS;
              long census_families = e466->CENSUS_FAMILIES;
              long census_households = e466->CENSUS_HOUSEHOLDS;
              long census_husbwife = e466->CENSUS_HUSBWIFE;
              long census_males = e466->CENSUS_MALES;
              long census_females = e466->CENSUS_FEMALES;
              long census_householdschildren = e466->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e466->CENSUS_HISPANIC;
              long v466 = e466->__av;
              __SQL_SUM_AGGREGATE_428INVENTORY1.addOrDelOnZero(se4605.modify(__sql_sum_aggregate_428inventoryinventory_locn), (v465 * (v466 * (location_supertargetdrivetime * census_asian))));
            } while ((n466 = n466->nxt));
          }
          e465 = e465->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_429 = 0.0;
      __SQL_SUM_AGGREGATE_429INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e467 = LOCATION.head;
        while (e467) {
          long __sql_sum_aggregate_429inventoryinventory_locn = e467->LOCATION_LOCN;
          long location_zip = e467->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e467->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e467->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e467->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e467->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e467->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e467->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e467->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e467->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e467->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e467->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e467->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e467->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e467->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v467 = e467->__av;
          { //slice
            const HASH_RES_t h223 = CENSUS_mapkey0_idxfn::hash(se4609.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i468 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n468 = &(i468->buckets_[h223 % i468->size_]);
            CENSUS_entry* e468;
            do if ((e468 = n468->obj) && h223 == n468->hash && CENSUS_mapkey0_idxfn::equals(se4609, *e468)) {
              long census_population = e468->CENSUS_POPULATION;
              long census_white = e468->CENSUS_WHITE;
              long census_asian = e468->CENSUS_ASIAN;
              long census_pacific = e468->CENSUS_PACIFIC;
              long census_blackafrican = e468->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e468->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e468->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e468->CENSUS_HOUSEUNITS;
              long census_families = e468->CENSUS_FAMILIES;
              long census_households = e468->CENSUS_HOUSEHOLDS;
              long census_husbwife = e468->CENSUS_HUSBWIFE;
              long census_males = e468->CENSUS_MALES;
              long census_females = e468->CENSUS_FEMALES;
              long census_householdschildren = e468->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e468->CENSUS_HISPANIC;
              long v468 = e468->__av;
              __SQL_SUM_AGGREGATE_429INVENTORY1.addOrDelOnZero(se4608.modify(__sql_sum_aggregate_429inventoryinventory_locn), (v467 * (v468 * (location_supertargetdrivetime * census_pacific))));
            } while ((n468 = n468->nxt));
          }
          e467 = e467->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_430 = 0.0;
      __SQL_SUM_AGGREGATE_430INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e469 = LOCATION.head;
        while (e469) {
          long __sql_sum_aggregate_430inventoryinventory_locn = e469->LOCATION_LOCN;
          long location_zip = e469->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e469->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e469->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e469->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e469->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e469->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e469->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e469->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e469->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e469->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e469->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e469->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e469->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e469->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v469 = e469->__av;
          { //slice
            const HASH_RES_t h224 = CENSUS_mapkey0_idxfn::hash(se4612.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i470 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n470 = &(i470->buckets_[h224 % i470->size_]);
            CENSUS_entry* e470;
            do if ((e470 = n470->obj) && h224 == n470->hash && CENSUS_mapkey0_idxfn::equals(se4612, *e470)) {
              long census_population = e470->CENSUS_POPULATION;
              long census_white = e470->CENSUS_WHITE;
              long census_asian = e470->CENSUS_ASIAN;
              long census_pacific = e470->CENSUS_PACIFIC;
              long census_blackafrican = e470->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e470->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e470->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e470->CENSUS_HOUSEUNITS;
              long census_families = e470->CENSUS_FAMILIES;
              long census_households = e470->CENSUS_HOUSEHOLDS;
              long census_husbwife = e470->CENSUS_HUSBWIFE;
              long census_males = e470->CENSUS_MALES;
              long census_females = e470->CENSUS_FEMALES;
              long census_householdschildren = e470->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e470->CENSUS_HISPANIC;
              long v470 = e470->__av;
              __SQL_SUM_AGGREGATE_430INVENTORY1.addOrDelOnZero(se4611.modify(__sql_sum_aggregate_430inventoryinventory_locn), (v469 * (v470 * (location_supertargetdrivetime * census_blackafrican))));
            } while ((n470 = n470->nxt));
          }
          e469 = e469->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_431 = 0.0;
      __SQL_SUM_AGGREGATE_431INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e471 = LOCATION.head;
        while (e471) {
          long __sql_sum_aggregate_431inventoryinventory_locn = e471->LOCATION_LOCN;
          long location_zip = e471->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e471->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e471->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e471->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e471->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e471->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e471->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e471->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e471->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e471->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e471->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e471->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e471->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e471->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v471 = e471->__av;
          { //slice
            const HASH_RES_t h225 = CENSUS_mapkey0_idxfn::hash(se4615.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i472 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n472 = &(i472->buckets_[h225 % i472->size_]);
            CENSUS_entry* e472;
            do if ((e472 = n472->obj) && h225 == n472->hash && CENSUS_mapkey0_idxfn::equals(se4615, *e472)) {
              long census_population = e472->CENSUS_POPULATION;
              long census_white = e472->CENSUS_WHITE;
              long census_asian = e472->CENSUS_ASIAN;
              long census_pacific = e472->CENSUS_PACIFIC;
              long census_blackafrican = e472->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e472->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e472->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e472->CENSUS_HOUSEUNITS;
              long census_families = e472->CENSUS_FAMILIES;
              long census_households = e472->CENSUS_HOUSEHOLDS;
              long census_husbwife = e472->CENSUS_HUSBWIFE;
              long census_males = e472->CENSUS_MALES;
              long census_females = e472->CENSUS_FEMALES;
              long census_householdschildren = e472->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e472->CENSUS_HISPANIC;
              long v472 = e472->__av;
              __SQL_SUM_AGGREGATE_431INVENTORY1.addOrDelOnZero(se4614.modify(__sql_sum_aggregate_431inventoryinventory_locn), (v471 * (v472 * (location_supertargetdrivetime * census_medianage))));
            } while ((n472 = n472->nxt));
          }
          e471 = e471->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_432 = 0.0;
      __SQL_SUM_AGGREGATE_432INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e473 = LOCATION.head;
        while (e473) {
          long __sql_sum_aggregate_432inventoryinventory_locn = e473->LOCATION_LOCN;
          long location_zip = e473->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e473->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e473->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e473->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e473->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e473->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e473->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e473->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e473->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e473->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e473->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e473->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e473->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e473->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v473 = e473->__av;
          { //slice
            const HASH_RES_t h226 = CENSUS_mapkey0_idxfn::hash(se4618.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i474 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n474 = &(i474->buckets_[h226 % i474->size_]);
            CENSUS_entry* e474;
            do if ((e474 = n474->obj) && h226 == n474->hash && CENSUS_mapkey0_idxfn::equals(se4618, *e474)) {
              long census_population = e474->CENSUS_POPULATION;
              long census_white = e474->CENSUS_WHITE;
              long census_asian = e474->CENSUS_ASIAN;
              long census_pacific = e474->CENSUS_PACIFIC;
              long census_blackafrican = e474->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e474->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e474->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e474->CENSUS_HOUSEUNITS;
              long census_families = e474->CENSUS_FAMILIES;
              long census_households = e474->CENSUS_HOUSEHOLDS;
              long census_husbwife = e474->CENSUS_HUSBWIFE;
              long census_males = e474->CENSUS_MALES;
              long census_females = e474->CENSUS_FEMALES;
              long census_householdschildren = e474->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e474->CENSUS_HISPANIC;
              long v474 = e474->__av;
              __SQL_SUM_AGGREGATE_432INVENTORY1.addOrDelOnZero(se4617.modify(__sql_sum_aggregate_432inventoryinventory_locn), (v473 * (v474 * (location_supertargetdrivetime * census_occupiedhouseunits))));
            } while ((n474 = n474->nxt));
          }
          e473 = e473->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_433 = 0.0;
      __SQL_SUM_AGGREGATE_433INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e475 = LOCATION.head;
        while (e475) {
          long __sql_sum_aggregate_433inventoryinventory_locn = e475->LOCATION_LOCN;
          long location_zip = e475->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e475->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e475->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e475->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e475->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e475->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e475->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e475->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e475->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e475->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e475->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e475->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e475->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e475->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v475 = e475->__av;
          { //slice
            const HASH_RES_t h227 = CENSUS_mapkey0_idxfn::hash(se4621.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i476 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n476 = &(i476->buckets_[h227 % i476->size_]);
            CENSUS_entry* e476;
            do if ((e476 = n476->obj) && h227 == n476->hash && CENSUS_mapkey0_idxfn::equals(se4621, *e476)) {
              long census_population = e476->CENSUS_POPULATION;
              long census_white = e476->CENSUS_WHITE;
              long census_asian = e476->CENSUS_ASIAN;
              long census_pacific = e476->CENSUS_PACIFIC;
              long census_blackafrican = e476->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e476->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e476->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e476->CENSUS_HOUSEUNITS;
              long census_families = e476->CENSUS_FAMILIES;
              long census_households = e476->CENSUS_HOUSEHOLDS;
              long census_husbwife = e476->CENSUS_HUSBWIFE;
              long census_males = e476->CENSUS_MALES;
              long census_females = e476->CENSUS_FEMALES;
              long census_householdschildren = e476->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e476->CENSUS_HISPANIC;
              long v476 = e476->__av;
              __SQL_SUM_AGGREGATE_433INVENTORY1.addOrDelOnZero(se4620.modify(__sql_sum_aggregate_433inventoryinventory_locn), (v475 * (v476 * (location_supertargetdrivetime * census_houseunits))));
            } while ((n476 = n476->nxt));
          }
          e475 = e475->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_434 = 0.0;
      __SQL_SUM_AGGREGATE_434INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e477 = LOCATION.head;
        while (e477) {
          long __sql_sum_aggregate_434inventoryinventory_locn = e477->LOCATION_LOCN;
          long location_zip = e477->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e477->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e477->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e477->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e477->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e477->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e477->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e477->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e477->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e477->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e477->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e477->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e477->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e477->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v477 = e477->__av;
          { //slice
            const HASH_RES_t h228 = CENSUS_mapkey0_idxfn::hash(se4624.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i478 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n478 = &(i478->buckets_[h228 % i478->size_]);
            CENSUS_entry* e478;
            do if ((e478 = n478->obj) && h228 == n478->hash && CENSUS_mapkey0_idxfn::equals(se4624, *e478)) {
              long census_population = e478->CENSUS_POPULATION;
              long census_white = e478->CENSUS_WHITE;
              long census_asian = e478->CENSUS_ASIAN;
              long census_pacific = e478->CENSUS_PACIFIC;
              long census_blackafrican = e478->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e478->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e478->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e478->CENSUS_HOUSEUNITS;
              long census_families = e478->CENSUS_FAMILIES;
              long census_households = e478->CENSUS_HOUSEHOLDS;
              long census_husbwife = e478->CENSUS_HUSBWIFE;
              long census_males = e478->CENSUS_MALES;
              long census_females = e478->CENSUS_FEMALES;
              long census_householdschildren = e478->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e478->CENSUS_HISPANIC;
              long v478 = e478->__av;
              __SQL_SUM_AGGREGATE_434INVENTORY1.addOrDelOnZero(se4623.modify(__sql_sum_aggregate_434inventoryinventory_locn), (v477 * (v478 * (location_supertargetdrivetime * census_families))));
            } while ((n478 = n478->nxt));
          }
          e477 = e477->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_435 = 0.0;
      __SQL_SUM_AGGREGATE_435INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e479 = LOCATION.head;
        while (e479) {
          long __sql_sum_aggregate_435inventoryinventory_locn = e479->LOCATION_LOCN;
          long location_zip = e479->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e479->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e479->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e479->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e479->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e479->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e479->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e479->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e479->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e479->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e479->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e479->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e479->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e479->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v479 = e479->__av;
          { //slice
            const HASH_RES_t h229 = CENSUS_mapkey0_idxfn::hash(se4627.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i480 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n480 = &(i480->buckets_[h229 % i480->size_]);
            CENSUS_entry* e480;
            do if ((e480 = n480->obj) && h229 == n480->hash && CENSUS_mapkey0_idxfn::equals(se4627, *e480)) {
              long census_population = e480->CENSUS_POPULATION;
              long census_white = e480->CENSUS_WHITE;
              long census_asian = e480->CENSUS_ASIAN;
              long census_pacific = e480->CENSUS_PACIFIC;
              long census_blackafrican = e480->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e480->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e480->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e480->CENSUS_HOUSEUNITS;
              long census_families = e480->CENSUS_FAMILIES;
              long census_households = e480->CENSUS_HOUSEHOLDS;
              long census_husbwife = e480->CENSUS_HUSBWIFE;
              long census_males = e480->CENSUS_MALES;
              long census_females = e480->CENSUS_FEMALES;
              long census_householdschildren = e480->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e480->CENSUS_HISPANIC;
              long v480 = e480->__av;
              __SQL_SUM_AGGREGATE_435INVENTORY1.addOrDelOnZero(se4626.modify(__sql_sum_aggregate_435inventoryinventory_locn), (v479 * (v480 * (location_supertargetdrivetime * census_households))));
            } while ((n480 = n480->nxt));
          }
          e479 = e479->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_436 = 0.0;
      __SQL_SUM_AGGREGATE_436INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e481 = LOCATION.head;
        while (e481) {
          long __sql_sum_aggregate_436inventoryinventory_locn = e481->LOCATION_LOCN;
          long location_zip = e481->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e481->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e481->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e481->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e481->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e481->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e481->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e481->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e481->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e481->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e481->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e481->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e481->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e481->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v481 = e481->__av;
          { //slice
            const HASH_RES_t h230 = CENSUS_mapkey0_idxfn::hash(se4630.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i482 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n482 = &(i482->buckets_[h230 % i482->size_]);
            CENSUS_entry* e482;
            do if ((e482 = n482->obj) && h230 == n482->hash && CENSUS_mapkey0_idxfn::equals(se4630, *e482)) {
              long census_population = e482->CENSUS_POPULATION;
              long census_white = e482->CENSUS_WHITE;
              long census_asian = e482->CENSUS_ASIAN;
              long census_pacific = e482->CENSUS_PACIFIC;
              long census_blackafrican = e482->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e482->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e482->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e482->CENSUS_HOUSEUNITS;
              long census_families = e482->CENSUS_FAMILIES;
              long census_households = e482->CENSUS_HOUSEHOLDS;
              long census_husbwife = e482->CENSUS_HUSBWIFE;
              long census_males = e482->CENSUS_MALES;
              long census_females = e482->CENSUS_FEMALES;
              long census_householdschildren = e482->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e482->CENSUS_HISPANIC;
              long v482 = e482->__av;
              __SQL_SUM_AGGREGATE_436INVENTORY1.addOrDelOnZero(se4629.modify(__sql_sum_aggregate_436inventoryinventory_locn), (v481 * (v482 * (location_supertargetdrivetime * census_husbwife))));
            } while ((n482 = n482->nxt));
          }
          e481 = e481->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_437 = 0.0;
      __SQL_SUM_AGGREGATE_437INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e483 = LOCATION.head;
        while (e483) {
          long __sql_sum_aggregate_437inventoryinventory_locn = e483->LOCATION_LOCN;
          long location_zip = e483->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e483->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e483->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e483->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e483->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e483->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e483->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e483->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e483->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e483->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e483->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e483->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e483->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e483->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v483 = e483->__av;
          { //slice
            const HASH_RES_t h231 = CENSUS_mapkey0_idxfn::hash(se4633.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i484 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n484 = &(i484->buckets_[h231 % i484->size_]);
            CENSUS_entry* e484;
            do if ((e484 = n484->obj) && h231 == n484->hash && CENSUS_mapkey0_idxfn::equals(se4633, *e484)) {
              long census_population = e484->CENSUS_POPULATION;
              long census_white = e484->CENSUS_WHITE;
              long census_asian = e484->CENSUS_ASIAN;
              long census_pacific = e484->CENSUS_PACIFIC;
              long census_blackafrican = e484->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e484->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e484->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e484->CENSUS_HOUSEUNITS;
              long census_families = e484->CENSUS_FAMILIES;
              long census_households = e484->CENSUS_HOUSEHOLDS;
              long census_husbwife = e484->CENSUS_HUSBWIFE;
              long census_males = e484->CENSUS_MALES;
              long census_females = e484->CENSUS_FEMALES;
              long census_householdschildren = e484->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e484->CENSUS_HISPANIC;
              long v484 = e484->__av;
              __SQL_SUM_AGGREGATE_437INVENTORY1.addOrDelOnZero(se4632.modify(__sql_sum_aggregate_437inventoryinventory_locn), (v483 * (v484 * (location_supertargetdrivetime * census_males))));
            } while ((n484 = n484->nxt));
          }
          e483 = e483->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_438 = 0.0;
      __SQL_SUM_AGGREGATE_438INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e485 = LOCATION.head;
        while (e485) {
          long __sql_sum_aggregate_438inventoryinventory_locn = e485->LOCATION_LOCN;
          long location_zip = e485->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e485->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e485->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e485->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e485->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e485->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e485->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e485->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e485->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e485->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e485->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e485->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e485->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e485->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v485 = e485->__av;
          { //slice
            const HASH_RES_t h232 = CENSUS_mapkey0_idxfn::hash(se4636.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i486 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n486 = &(i486->buckets_[h232 % i486->size_]);
            CENSUS_entry* e486;
            do if ((e486 = n486->obj) && h232 == n486->hash && CENSUS_mapkey0_idxfn::equals(se4636, *e486)) {
              long census_population = e486->CENSUS_POPULATION;
              long census_white = e486->CENSUS_WHITE;
              long census_asian = e486->CENSUS_ASIAN;
              long census_pacific = e486->CENSUS_PACIFIC;
              long census_blackafrican = e486->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e486->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e486->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e486->CENSUS_HOUSEUNITS;
              long census_families = e486->CENSUS_FAMILIES;
              long census_households = e486->CENSUS_HOUSEHOLDS;
              long census_husbwife = e486->CENSUS_HUSBWIFE;
              long census_males = e486->CENSUS_MALES;
              long census_females = e486->CENSUS_FEMALES;
              long census_householdschildren = e486->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e486->CENSUS_HISPANIC;
              long v486 = e486->__av;
              __SQL_SUM_AGGREGATE_438INVENTORY1.addOrDelOnZero(se4635.modify(__sql_sum_aggregate_438inventoryinventory_locn), (v485 * (v486 * (location_supertargetdrivetime * census_females))));
            } while ((n486 = n486->nxt));
          }
          e485 = e485->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_439 = 0.0;
      __SQL_SUM_AGGREGATE_439INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e487 = LOCATION.head;
        while (e487) {
          long __sql_sum_aggregate_439inventoryinventory_locn = e487->LOCATION_LOCN;
          long location_zip = e487->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e487->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e487->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e487->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e487->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e487->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e487->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e487->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e487->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e487->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e487->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e487->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e487->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e487->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v487 = e487->__av;
          { //slice
            const HASH_RES_t h233 = CENSUS_mapkey0_idxfn::hash(se4639.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i488 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n488 = &(i488->buckets_[h233 % i488->size_]);
            CENSUS_entry* e488;
            do if ((e488 = n488->obj) && h233 == n488->hash && CENSUS_mapkey0_idxfn::equals(se4639, *e488)) {
              long census_population = e488->CENSUS_POPULATION;
              long census_white = e488->CENSUS_WHITE;
              long census_asian = e488->CENSUS_ASIAN;
              long census_pacific = e488->CENSUS_PACIFIC;
              long census_blackafrican = e488->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e488->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e488->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e488->CENSUS_HOUSEUNITS;
              long census_families = e488->CENSUS_FAMILIES;
              long census_households = e488->CENSUS_HOUSEHOLDS;
              long census_husbwife = e488->CENSUS_HUSBWIFE;
              long census_males = e488->CENSUS_MALES;
              long census_females = e488->CENSUS_FEMALES;
              long census_householdschildren = e488->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e488->CENSUS_HISPANIC;
              long v488 = e488->__av;
              __SQL_SUM_AGGREGATE_439INVENTORY1.addOrDelOnZero(se4638.modify(__sql_sum_aggregate_439inventoryinventory_locn), (v487 * (v488 * (location_supertargetdrivetime * census_householdschildren))));
            } while ((n488 = n488->nxt));
          }
          e487 = e487->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_440 = 0.0;
      __SQL_SUM_AGGREGATE_440INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e489 = LOCATION.head;
        while (e489) {
          long __sql_sum_aggregate_440inventoryinventory_locn = e489->LOCATION_LOCN;
          long location_zip = e489->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e489->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e489->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e489->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e489->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e489->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e489->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e489->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e489->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e489->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e489->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e489->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e489->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e489->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v489 = e489->__av;
          { //slice
            const HASH_RES_t h234 = CENSUS_mapkey0_idxfn::hash(se4642.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i490 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n490 = &(i490->buckets_[h234 % i490->size_]);
            CENSUS_entry* e490;
            do if ((e490 = n490->obj) && h234 == n490->hash && CENSUS_mapkey0_idxfn::equals(se4642, *e490)) {
              long census_population = e490->CENSUS_POPULATION;
              long census_white = e490->CENSUS_WHITE;
              long census_asian = e490->CENSUS_ASIAN;
              long census_pacific = e490->CENSUS_PACIFIC;
              long census_blackafrican = e490->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e490->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e490->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e490->CENSUS_HOUSEUNITS;
              long census_families = e490->CENSUS_FAMILIES;
              long census_households = e490->CENSUS_HOUSEHOLDS;
              long census_husbwife = e490->CENSUS_HUSBWIFE;
              long census_males = e490->CENSUS_MALES;
              long census_females = e490->CENSUS_FEMALES;
              long census_householdschildren = e490->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e490->CENSUS_HISPANIC;
              long v490 = e490->__av;
              __SQL_SUM_AGGREGATE_440INVENTORY1.addOrDelOnZero(se4641.modify(__sql_sum_aggregate_440inventoryinventory_locn), (v489 * (v490 * (location_supertargetdrivetime * census_hispanic))));
            } while ((n490 = n490->nxt));
          }
          e489 = e489->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_441 = 0.0;
      __SQL_SUM_AGGREGATE_442 = 0.0;
      __SQL_SUM_AGGREGATE_443 = 0.0;
      __SQL_SUM_AGGREGATE_444 = 0.0;
      __SQL_SUM_AGGREGATE_445 = 0.0;
      __SQL_SUM_AGGREGATE_446 = 0.0;
      __SQL_SUM_AGGREGATE_447 = 0.0;
      __SQL_SUM_AGGREGATE_448 = 0.0;
      __SQL_SUM_AGGREGATE_449 = 0.0;
      __SQL_SUM_AGGREGATE_450 = 0.0;
      __SQL_SUM_AGGREGATE_451 = 0.0;
      __SQL_SUM_AGGREGATE_451INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e491 = LOCATION.head;
        while (e491) {
          long __sql_sum_aggregate_451inventoryinventory_locn = e491->LOCATION_LOCN;
          long location_zip = e491->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e491->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e491->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e491->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e491->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e491->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e491->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e491->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e491->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e491->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e491->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e491->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e491->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e491->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v491 = e491->__av;
          { //slice
            const HASH_RES_t h235 = CENSUS_mapkey0_idxfn::hash(se4655.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i492 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n492 = &(i492->buckets_[h235 % i492->size_]);
            CENSUS_entry* e492;
            do if ((e492 = n492->obj) && h235 == n492->hash && CENSUS_mapkey0_idxfn::equals(se4655, *e492)) {
              long census_population = e492->CENSUS_POPULATION;
              long census_white = e492->CENSUS_WHITE;
              long census_asian = e492->CENSUS_ASIAN;
              long census_pacific = e492->CENSUS_PACIFIC;
              long census_blackafrican = e492->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e492->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e492->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e492->CENSUS_HOUSEUNITS;
              long census_families = e492->CENSUS_FAMILIES;
              long census_households = e492->CENSUS_HOUSEHOLDS;
              long census_husbwife = e492->CENSUS_HUSBWIFE;
              long census_males = e492->CENSUS_MALES;
              long census_females = e492->CENSUS_FEMALES;
              long census_householdschildren = e492->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e492->CENSUS_HISPANIC;
              long v492 = e492->__av;
              __SQL_SUM_AGGREGATE_451INVENTORY1.addOrDelOnZero(se4654.modify(__sql_sum_aggregate_451inventoryinventory_locn), (v491 * (v492 * (location_targetdistance * location_targetdistance))));
            } while ((n492 = n492->nxt));
          }
          e491 = e491->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_452 = 0.0;
      __SQL_SUM_AGGREGATE_452INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e493 = LOCATION.head;
        while (e493) {
          long __sql_sum_aggregate_452inventoryinventory_locn = e493->LOCATION_LOCN;
          long location_zip = e493->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e493->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e493->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e493->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e493->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e493->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e493->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e493->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e493->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e493->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e493->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e493->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e493->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e493->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v493 = e493->__av;
          { //slice
            const HASH_RES_t h236 = CENSUS_mapkey0_idxfn::hash(se4658.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i494 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n494 = &(i494->buckets_[h236 % i494->size_]);
            CENSUS_entry* e494;
            do if ((e494 = n494->obj) && h236 == n494->hash && CENSUS_mapkey0_idxfn::equals(se4658, *e494)) {
              long census_population = e494->CENSUS_POPULATION;
              long census_white = e494->CENSUS_WHITE;
              long census_asian = e494->CENSUS_ASIAN;
              long census_pacific = e494->CENSUS_PACIFIC;
              long census_blackafrican = e494->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e494->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e494->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e494->CENSUS_HOUSEUNITS;
              long census_families = e494->CENSUS_FAMILIES;
              long census_households = e494->CENSUS_HOUSEHOLDS;
              long census_husbwife = e494->CENSUS_HUSBWIFE;
              long census_males = e494->CENSUS_MALES;
              long census_females = e494->CENSUS_FEMALES;
              long census_householdschildren = e494->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e494->CENSUS_HISPANIC;
              long v494 = e494->__av;
              __SQL_SUM_AGGREGATE_452INVENTORY1.addOrDelOnZero(se4657.modify(__sql_sum_aggregate_452inventoryinventory_locn), (v493 * (v494 * (location_targetdistance * location_targetdrivetime))));
            } while ((n494 = n494->nxt));
          }
          e493 = e493->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_453 = 0.0;
      __SQL_SUM_AGGREGATE_453INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e495 = LOCATION.head;
        while (e495) {
          long __sql_sum_aggregate_453inventoryinventory_locn = e495->LOCATION_LOCN;
          long location_zip = e495->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e495->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e495->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e495->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e495->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e495->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e495->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e495->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e495->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e495->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e495->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e495->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e495->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e495->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v495 = e495->__av;
          { //slice
            const HASH_RES_t h237 = CENSUS_mapkey0_idxfn::hash(se4661.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i496 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n496 = &(i496->buckets_[h237 % i496->size_]);
            CENSUS_entry* e496;
            do if ((e496 = n496->obj) && h237 == n496->hash && CENSUS_mapkey0_idxfn::equals(se4661, *e496)) {
              long census_population = e496->CENSUS_POPULATION;
              long census_white = e496->CENSUS_WHITE;
              long census_asian = e496->CENSUS_ASIAN;
              long census_pacific = e496->CENSUS_PACIFIC;
              long census_blackafrican = e496->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e496->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e496->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e496->CENSUS_HOUSEUNITS;
              long census_families = e496->CENSUS_FAMILIES;
              long census_households = e496->CENSUS_HOUSEHOLDS;
              long census_husbwife = e496->CENSUS_HUSBWIFE;
              long census_males = e496->CENSUS_MALES;
              long census_females = e496->CENSUS_FEMALES;
              long census_householdschildren = e496->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e496->CENSUS_HISPANIC;
              long v496 = e496->__av;
              __SQL_SUM_AGGREGATE_453INVENTORY1.addOrDelOnZero(se4660.modify(__sql_sum_aggregate_453inventoryinventory_locn), (v495 * (v496 * (location_targetdistance * location_walmartdistance))));
            } while ((n496 = n496->nxt));
          }
          e495 = e495->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_454 = 0.0;
      __SQL_SUM_AGGREGATE_454INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e497 = LOCATION.head;
        while (e497) {
          long __sql_sum_aggregate_454inventoryinventory_locn = e497->LOCATION_LOCN;
          long location_zip = e497->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e497->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e497->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e497->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e497->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e497->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e497->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e497->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e497->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e497->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e497->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e497->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e497->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e497->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v497 = e497->__av;
          { //slice
            const HASH_RES_t h238 = CENSUS_mapkey0_idxfn::hash(se4664.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i498 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n498 = &(i498->buckets_[h238 % i498->size_]);
            CENSUS_entry* e498;
            do if ((e498 = n498->obj) && h238 == n498->hash && CENSUS_mapkey0_idxfn::equals(se4664, *e498)) {
              long census_population = e498->CENSUS_POPULATION;
              long census_white = e498->CENSUS_WHITE;
              long census_asian = e498->CENSUS_ASIAN;
              long census_pacific = e498->CENSUS_PACIFIC;
              long census_blackafrican = e498->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e498->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e498->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e498->CENSUS_HOUSEUNITS;
              long census_families = e498->CENSUS_FAMILIES;
              long census_households = e498->CENSUS_HOUSEHOLDS;
              long census_husbwife = e498->CENSUS_HUSBWIFE;
              long census_males = e498->CENSUS_MALES;
              long census_females = e498->CENSUS_FEMALES;
              long census_householdschildren = e498->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e498->CENSUS_HISPANIC;
              long v498 = e498->__av;
              __SQL_SUM_AGGREGATE_454INVENTORY1.addOrDelOnZero(se4663.modify(__sql_sum_aggregate_454inventoryinventory_locn), (v497 * (v498 * (location_targetdistance * location_walmartdrivetime))));
            } while ((n498 = n498->nxt));
          }
          e497 = e497->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_455 = 0.0;
      __SQL_SUM_AGGREGATE_455INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e499 = LOCATION.head;
        while (e499) {
          long __sql_sum_aggregate_455inventoryinventory_locn = e499->LOCATION_LOCN;
          long location_zip = e499->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e499->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e499->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e499->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e499->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e499->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e499->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e499->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e499->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e499->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e499->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e499->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e499->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e499->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v499 = e499->__av;
          { //slice
            const HASH_RES_t h239 = CENSUS_mapkey0_idxfn::hash(se4667.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i500 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n500 = &(i500->buckets_[h239 % i500->size_]);
            CENSUS_entry* e500;
            do if ((e500 = n500->obj) && h239 == n500->hash && CENSUS_mapkey0_idxfn::equals(se4667, *e500)) {
              long census_population = e500->CENSUS_POPULATION;
              long census_white = e500->CENSUS_WHITE;
              long census_asian = e500->CENSUS_ASIAN;
              long census_pacific = e500->CENSUS_PACIFIC;
              long census_blackafrican = e500->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e500->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e500->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e500->CENSUS_HOUSEUNITS;
              long census_families = e500->CENSUS_FAMILIES;
              long census_households = e500->CENSUS_HOUSEHOLDS;
              long census_husbwife = e500->CENSUS_HUSBWIFE;
              long census_males = e500->CENSUS_MALES;
              long census_females = e500->CENSUS_FEMALES;
              long census_householdschildren = e500->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e500->CENSUS_HISPANIC;
              long v500 = e500->__av;
              __SQL_SUM_AGGREGATE_455INVENTORY1.addOrDelOnZero(se4666.modify(__sql_sum_aggregate_455inventoryinventory_locn), (v499 * (v500 * (location_targetdistance * location_walmartsupercenterdistance))));
            } while ((n500 = n500->nxt));
          }
          e499 = e499->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_456 = 0.0;
      __SQL_SUM_AGGREGATE_456INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e501 = LOCATION.head;
        while (e501) {
          long __sql_sum_aggregate_456inventoryinventory_locn = e501->LOCATION_LOCN;
          long location_zip = e501->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e501->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e501->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e501->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e501->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e501->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e501->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e501->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e501->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e501->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e501->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e501->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e501->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e501->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v501 = e501->__av;
          { //slice
            const HASH_RES_t h240 = CENSUS_mapkey0_idxfn::hash(se4670.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i502 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n502 = &(i502->buckets_[h240 % i502->size_]);
            CENSUS_entry* e502;
            do if ((e502 = n502->obj) && h240 == n502->hash && CENSUS_mapkey0_idxfn::equals(se4670, *e502)) {
              long census_population = e502->CENSUS_POPULATION;
              long census_white = e502->CENSUS_WHITE;
              long census_asian = e502->CENSUS_ASIAN;
              long census_pacific = e502->CENSUS_PACIFIC;
              long census_blackafrican = e502->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e502->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e502->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e502->CENSUS_HOUSEUNITS;
              long census_families = e502->CENSUS_FAMILIES;
              long census_households = e502->CENSUS_HOUSEHOLDS;
              long census_husbwife = e502->CENSUS_HUSBWIFE;
              long census_males = e502->CENSUS_MALES;
              long census_females = e502->CENSUS_FEMALES;
              long census_householdschildren = e502->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e502->CENSUS_HISPANIC;
              long v502 = e502->__av;
              __SQL_SUM_AGGREGATE_456INVENTORY1.addOrDelOnZero(se4669.modify(__sql_sum_aggregate_456inventoryinventory_locn), (v501 * (v502 * (location_targetdistance * location_walmartsupercenterdrivetime))));
            } while ((n502 = n502->nxt));
          }
          e501 = e501->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_457 = 0.0;
      __SQL_SUM_AGGREGATE_457INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e503 = LOCATION.head;
        while (e503) {
          long __sql_sum_aggregate_457inventoryinventory_locn = e503->LOCATION_LOCN;
          long location_zip = e503->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e503->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e503->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e503->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e503->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e503->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e503->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e503->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e503->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e503->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e503->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e503->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e503->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e503->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v503 = e503->__av;
          { //slice
            const HASH_RES_t h241 = CENSUS_mapkey0_idxfn::hash(se4673.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i504 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n504 = &(i504->buckets_[h241 % i504->size_]);
            CENSUS_entry* e504;
            do if ((e504 = n504->obj) && h241 == n504->hash && CENSUS_mapkey0_idxfn::equals(se4673, *e504)) {
              long census_population = e504->CENSUS_POPULATION;
              long census_white = e504->CENSUS_WHITE;
              long census_asian = e504->CENSUS_ASIAN;
              long census_pacific = e504->CENSUS_PACIFIC;
              long census_blackafrican = e504->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e504->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e504->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e504->CENSUS_HOUSEUNITS;
              long census_families = e504->CENSUS_FAMILIES;
              long census_households = e504->CENSUS_HOUSEHOLDS;
              long census_husbwife = e504->CENSUS_HUSBWIFE;
              long census_males = e504->CENSUS_MALES;
              long census_females = e504->CENSUS_FEMALES;
              long census_householdschildren = e504->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e504->CENSUS_HISPANIC;
              long v504 = e504->__av;
              __SQL_SUM_AGGREGATE_457INVENTORY1.addOrDelOnZero(se4672.modify(__sql_sum_aggregate_457inventoryinventory_locn), (v503 * (v504 * (location_targetdistance * census_population))));
            } while ((n504 = n504->nxt));
          }
          e503 = e503->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_458 = 0.0;
      __SQL_SUM_AGGREGATE_458INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e505 = LOCATION.head;
        while (e505) {
          long __sql_sum_aggregate_458inventoryinventory_locn = e505->LOCATION_LOCN;
          long location_zip = e505->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e505->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e505->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e505->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e505->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e505->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e505->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e505->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e505->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e505->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e505->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e505->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e505->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e505->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v505 = e505->__av;
          { //slice
            const HASH_RES_t h242 = CENSUS_mapkey0_idxfn::hash(se4676.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i506 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n506 = &(i506->buckets_[h242 % i506->size_]);
            CENSUS_entry* e506;
            do if ((e506 = n506->obj) && h242 == n506->hash && CENSUS_mapkey0_idxfn::equals(se4676, *e506)) {
              long census_population = e506->CENSUS_POPULATION;
              long census_white = e506->CENSUS_WHITE;
              long census_asian = e506->CENSUS_ASIAN;
              long census_pacific = e506->CENSUS_PACIFIC;
              long census_blackafrican = e506->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e506->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e506->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e506->CENSUS_HOUSEUNITS;
              long census_families = e506->CENSUS_FAMILIES;
              long census_households = e506->CENSUS_HOUSEHOLDS;
              long census_husbwife = e506->CENSUS_HUSBWIFE;
              long census_males = e506->CENSUS_MALES;
              long census_females = e506->CENSUS_FEMALES;
              long census_householdschildren = e506->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e506->CENSUS_HISPANIC;
              long v506 = e506->__av;
              __SQL_SUM_AGGREGATE_458INVENTORY1.addOrDelOnZero(se4675.modify(__sql_sum_aggregate_458inventoryinventory_locn), (v505 * (v506 * (location_targetdistance * census_white))));
            } while ((n506 = n506->nxt));
          }
          e505 = e505->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_459 = 0.0;
      __SQL_SUM_AGGREGATE_459INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e507 = LOCATION.head;
        while (e507) {
          long __sql_sum_aggregate_459inventoryinventory_locn = e507->LOCATION_LOCN;
          long location_zip = e507->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e507->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e507->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e507->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e507->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e507->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e507->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e507->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e507->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e507->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e507->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e507->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e507->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e507->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v507 = e507->__av;
          { //slice
            const HASH_RES_t h243 = CENSUS_mapkey0_idxfn::hash(se4679.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i508 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n508 = &(i508->buckets_[h243 % i508->size_]);
            CENSUS_entry* e508;
            do if ((e508 = n508->obj) && h243 == n508->hash && CENSUS_mapkey0_idxfn::equals(se4679, *e508)) {
              long census_population = e508->CENSUS_POPULATION;
              long census_white = e508->CENSUS_WHITE;
              long census_asian = e508->CENSUS_ASIAN;
              long census_pacific = e508->CENSUS_PACIFIC;
              long census_blackafrican = e508->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e508->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e508->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e508->CENSUS_HOUSEUNITS;
              long census_families = e508->CENSUS_FAMILIES;
              long census_households = e508->CENSUS_HOUSEHOLDS;
              long census_husbwife = e508->CENSUS_HUSBWIFE;
              long census_males = e508->CENSUS_MALES;
              long census_females = e508->CENSUS_FEMALES;
              long census_householdschildren = e508->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e508->CENSUS_HISPANIC;
              long v508 = e508->__av;
              __SQL_SUM_AGGREGATE_459INVENTORY1.addOrDelOnZero(se4678.modify(__sql_sum_aggregate_459inventoryinventory_locn), (v507 * (v508 * (location_targetdistance * census_asian))));
            } while ((n508 = n508->nxt));
          }
          e507 = e507->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_460 = 0.0;
      __SQL_SUM_AGGREGATE_460INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e509 = LOCATION.head;
        while (e509) {
          long __sql_sum_aggregate_460inventoryinventory_locn = e509->LOCATION_LOCN;
          long location_zip = e509->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e509->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e509->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e509->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e509->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e509->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e509->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e509->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e509->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e509->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e509->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e509->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e509->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e509->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v509 = e509->__av;
          { //slice
            const HASH_RES_t h244 = CENSUS_mapkey0_idxfn::hash(se4682.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i510 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n510 = &(i510->buckets_[h244 % i510->size_]);
            CENSUS_entry* e510;
            do if ((e510 = n510->obj) && h244 == n510->hash && CENSUS_mapkey0_idxfn::equals(se4682, *e510)) {
              long census_population = e510->CENSUS_POPULATION;
              long census_white = e510->CENSUS_WHITE;
              long census_asian = e510->CENSUS_ASIAN;
              long census_pacific = e510->CENSUS_PACIFIC;
              long census_blackafrican = e510->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e510->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e510->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e510->CENSUS_HOUSEUNITS;
              long census_families = e510->CENSUS_FAMILIES;
              long census_households = e510->CENSUS_HOUSEHOLDS;
              long census_husbwife = e510->CENSUS_HUSBWIFE;
              long census_males = e510->CENSUS_MALES;
              long census_females = e510->CENSUS_FEMALES;
              long census_householdschildren = e510->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e510->CENSUS_HISPANIC;
              long v510 = e510->__av;
              __SQL_SUM_AGGREGATE_460INVENTORY1.addOrDelOnZero(se4681.modify(__sql_sum_aggregate_460inventoryinventory_locn), (v509 * (v510 * (location_targetdistance * census_pacific))));
            } while ((n510 = n510->nxt));
          }
          e509 = e509->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_461 = 0.0;
      __SQL_SUM_AGGREGATE_461INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e511 = LOCATION.head;
        while (e511) {
          long __sql_sum_aggregate_461inventoryinventory_locn = e511->LOCATION_LOCN;
          long location_zip = e511->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e511->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e511->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e511->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e511->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e511->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e511->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e511->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e511->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e511->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e511->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e511->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e511->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e511->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v511 = e511->__av;
          { //slice
            const HASH_RES_t h245 = CENSUS_mapkey0_idxfn::hash(se4685.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i512 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n512 = &(i512->buckets_[h245 % i512->size_]);
            CENSUS_entry* e512;
            do if ((e512 = n512->obj) && h245 == n512->hash && CENSUS_mapkey0_idxfn::equals(se4685, *e512)) {
              long census_population = e512->CENSUS_POPULATION;
              long census_white = e512->CENSUS_WHITE;
              long census_asian = e512->CENSUS_ASIAN;
              long census_pacific = e512->CENSUS_PACIFIC;
              long census_blackafrican = e512->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e512->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e512->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e512->CENSUS_HOUSEUNITS;
              long census_families = e512->CENSUS_FAMILIES;
              long census_households = e512->CENSUS_HOUSEHOLDS;
              long census_husbwife = e512->CENSUS_HUSBWIFE;
              long census_males = e512->CENSUS_MALES;
              long census_females = e512->CENSUS_FEMALES;
              long census_householdschildren = e512->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e512->CENSUS_HISPANIC;
              long v512 = e512->__av;
              __SQL_SUM_AGGREGATE_461INVENTORY1.addOrDelOnZero(se4684.modify(__sql_sum_aggregate_461inventoryinventory_locn), (v511 * (v512 * (location_targetdistance * census_blackafrican))));
            } while ((n512 = n512->nxt));
          }
          e511 = e511->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_462 = 0.0;
      __SQL_SUM_AGGREGATE_462INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e513 = LOCATION.head;
        while (e513) {
          long __sql_sum_aggregate_462inventoryinventory_locn = e513->LOCATION_LOCN;
          long location_zip = e513->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e513->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e513->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e513->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e513->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e513->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e513->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e513->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e513->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e513->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e513->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e513->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e513->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e513->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v513 = e513->__av;
          { //slice
            const HASH_RES_t h246 = CENSUS_mapkey0_idxfn::hash(se4688.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i514 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n514 = &(i514->buckets_[h246 % i514->size_]);
            CENSUS_entry* e514;
            do if ((e514 = n514->obj) && h246 == n514->hash && CENSUS_mapkey0_idxfn::equals(se4688, *e514)) {
              long census_population = e514->CENSUS_POPULATION;
              long census_white = e514->CENSUS_WHITE;
              long census_asian = e514->CENSUS_ASIAN;
              long census_pacific = e514->CENSUS_PACIFIC;
              long census_blackafrican = e514->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e514->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e514->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e514->CENSUS_HOUSEUNITS;
              long census_families = e514->CENSUS_FAMILIES;
              long census_households = e514->CENSUS_HOUSEHOLDS;
              long census_husbwife = e514->CENSUS_HUSBWIFE;
              long census_males = e514->CENSUS_MALES;
              long census_females = e514->CENSUS_FEMALES;
              long census_householdschildren = e514->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e514->CENSUS_HISPANIC;
              long v514 = e514->__av;
              __SQL_SUM_AGGREGATE_462INVENTORY1.addOrDelOnZero(se4687.modify(__sql_sum_aggregate_462inventoryinventory_locn), (v513 * (v514 * (location_targetdistance * census_medianage))));
            } while ((n514 = n514->nxt));
          }
          e513 = e513->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_463 = 0.0;
      __SQL_SUM_AGGREGATE_463INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e515 = LOCATION.head;
        while (e515) {
          long __sql_sum_aggregate_463inventoryinventory_locn = e515->LOCATION_LOCN;
          long location_zip = e515->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e515->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e515->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e515->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e515->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e515->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e515->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e515->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e515->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e515->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e515->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e515->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e515->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e515->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v515 = e515->__av;
          { //slice
            const HASH_RES_t h247 = CENSUS_mapkey0_idxfn::hash(se4691.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i516 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n516 = &(i516->buckets_[h247 % i516->size_]);
            CENSUS_entry* e516;
            do if ((e516 = n516->obj) && h247 == n516->hash && CENSUS_mapkey0_idxfn::equals(se4691, *e516)) {
              long census_population = e516->CENSUS_POPULATION;
              long census_white = e516->CENSUS_WHITE;
              long census_asian = e516->CENSUS_ASIAN;
              long census_pacific = e516->CENSUS_PACIFIC;
              long census_blackafrican = e516->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e516->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e516->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e516->CENSUS_HOUSEUNITS;
              long census_families = e516->CENSUS_FAMILIES;
              long census_households = e516->CENSUS_HOUSEHOLDS;
              long census_husbwife = e516->CENSUS_HUSBWIFE;
              long census_males = e516->CENSUS_MALES;
              long census_females = e516->CENSUS_FEMALES;
              long census_householdschildren = e516->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e516->CENSUS_HISPANIC;
              long v516 = e516->__av;
              __SQL_SUM_AGGREGATE_463INVENTORY1.addOrDelOnZero(se4690.modify(__sql_sum_aggregate_463inventoryinventory_locn), (v515 * (v516 * (location_targetdistance * census_occupiedhouseunits))));
            } while ((n516 = n516->nxt));
          }
          e515 = e515->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_464 = 0.0;
      __SQL_SUM_AGGREGATE_464INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e517 = LOCATION.head;
        while (e517) {
          long __sql_sum_aggregate_464inventoryinventory_locn = e517->LOCATION_LOCN;
          long location_zip = e517->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e517->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e517->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e517->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e517->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e517->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e517->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e517->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e517->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e517->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e517->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e517->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e517->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e517->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v517 = e517->__av;
          { //slice
            const HASH_RES_t h248 = CENSUS_mapkey0_idxfn::hash(se4694.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i518 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n518 = &(i518->buckets_[h248 % i518->size_]);
            CENSUS_entry* e518;
            do if ((e518 = n518->obj) && h248 == n518->hash && CENSUS_mapkey0_idxfn::equals(se4694, *e518)) {
              long census_population = e518->CENSUS_POPULATION;
              long census_white = e518->CENSUS_WHITE;
              long census_asian = e518->CENSUS_ASIAN;
              long census_pacific = e518->CENSUS_PACIFIC;
              long census_blackafrican = e518->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e518->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e518->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e518->CENSUS_HOUSEUNITS;
              long census_families = e518->CENSUS_FAMILIES;
              long census_households = e518->CENSUS_HOUSEHOLDS;
              long census_husbwife = e518->CENSUS_HUSBWIFE;
              long census_males = e518->CENSUS_MALES;
              long census_females = e518->CENSUS_FEMALES;
              long census_householdschildren = e518->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e518->CENSUS_HISPANIC;
              long v518 = e518->__av;
              __SQL_SUM_AGGREGATE_464INVENTORY1.addOrDelOnZero(se4693.modify(__sql_sum_aggregate_464inventoryinventory_locn), (v517 * (v518 * (location_targetdistance * census_houseunits))));
            } while ((n518 = n518->nxt));
          }
          e517 = e517->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_465 = 0.0;
      __SQL_SUM_AGGREGATE_465INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e519 = LOCATION.head;
        while (e519) {
          long __sql_sum_aggregate_465inventoryinventory_locn = e519->LOCATION_LOCN;
          long location_zip = e519->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e519->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e519->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e519->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e519->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e519->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e519->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e519->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e519->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e519->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e519->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e519->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e519->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e519->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v519 = e519->__av;
          { //slice
            const HASH_RES_t h249 = CENSUS_mapkey0_idxfn::hash(se4697.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i520 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n520 = &(i520->buckets_[h249 % i520->size_]);
            CENSUS_entry* e520;
            do if ((e520 = n520->obj) && h249 == n520->hash && CENSUS_mapkey0_idxfn::equals(se4697, *e520)) {
              long census_population = e520->CENSUS_POPULATION;
              long census_white = e520->CENSUS_WHITE;
              long census_asian = e520->CENSUS_ASIAN;
              long census_pacific = e520->CENSUS_PACIFIC;
              long census_blackafrican = e520->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e520->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e520->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e520->CENSUS_HOUSEUNITS;
              long census_families = e520->CENSUS_FAMILIES;
              long census_households = e520->CENSUS_HOUSEHOLDS;
              long census_husbwife = e520->CENSUS_HUSBWIFE;
              long census_males = e520->CENSUS_MALES;
              long census_females = e520->CENSUS_FEMALES;
              long census_householdschildren = e520->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e520->CENSUS_HISPANIC;
              long v520 = e520->__av;
              __SQL_SUM_AGGREGATE_465INVENTORY1.addOrDelOnZero(se4696.modify(__sql_sum_aggregate_465inventoryinventory_locn), (v519 * (v520 * (location_targetdistance * census_families))));
            } while ((n520 = n520->nxt));
          }
          e519 = e519->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_466 = 0.0;
      __SQL_SUM_AGGREGATE_466INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e521 = LOCATION.head;
        while (e521) {
          long __sql_sum_aggregate_466inventoryinventory_locn = e521->LOCATION_LOCN;
          long location_zip = e521->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e521->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e521->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e521->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e521->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e521->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e521->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e521->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e521->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e521->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e521->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e521->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e521->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e521->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v521 = e521->__av;
          { //slice
            const HASH_RES_t h250 = CENSUS_mapkey0_idxfn::hash(se4700.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i522 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n522 = &(i522->buckets_[h250 % i522->size_]);
            CENSUS_entry* e522;
            do if ((e522 = n522->obj) && h250 == n522->hash && CENSUS_mapkey0_idxfn::equals(se4700, *e522)) {
              long census_population = e522->CENSUS_POPULATION;
              long census_white = e522->CENSUS_WHITE;
              long census_asian = e522->CENSUS_ASIAN;
              long census_pacific = e522->CENSUS_PACIFIC;
              long census_blackafrican = e522->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e522->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e522->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e522->CENSUS_HOUSEUNITS;
              long census_families = e522->CENSUS_FAMILIES;
              long census_households = e522->CENSUS_HOUSEHOLDS;
              long census_husbwife = e522->CENSUS_HUSBWIFE;
              long census_males = e522->CENSUS_MALES;
              long census_females = e522->CENSUS_FEMALES;
              long census_householdschildren = e522->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e522->CENSUS_HISPANIC;
              long v522 = e522->__av;
              __SQL_SUM_AGGREGATE_466INVENTORY1.addOrDelOnZero(se4699.modify(__sql_sum_aggregate_466inventoryinventory_locn), (v521 * (v522 * (location_targetdistance * census_households))));
            } while ((n522 = n522->nxt));
          }
          e521 = e521->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_467 = 0.0;
      __SQL_SUM_AGGREGATE_467INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e523 = LOCATION.head;
        while (e523) {
          long __sql_sum_aggregate_467inventoryinventory_locn = e523->LOCATION_LOCN;
          long location_zip = e523->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e523->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e523->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e523->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e523->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e523->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e523->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e523->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e523->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e523->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e523->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e523->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e523->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e523->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v523 = e523->__av;
          { //slice
            const HASH_RES_t h251 = CENSUS_mapkey0_idxfn::hash(se4703.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i524 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n524 = &(i524->buckets_[h251 % i524->size_]);
            CENSUS_entry* e524;
            do if ((e524 = n524->obj) && h251 == n524->hash && CENSUS_mapkey0_idxfn::equals(se4703, *e524)) {
              long census_population = e524->CENSUS_POPULATION;
              long census_white = e524->CENSUS_WHITE;
              long census_asian = e524->CENSUS_ASIAN;
              long census_pacific = e524->CENSUS_PACIFIC;
              long census_blackafrican = e524->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e524->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e524->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e524->CENSUS_HOUSEUNITS;
              long census_families = e524->CENSUS_FAMILIES;
              long census_households = e524->CENSUS_HOUSEHOLDS;
              long census_husbwife = e524->CENSUS_HUSBWIFE;
              long census_males = e524->CENSUS_MALES;
              long census_females = e524->CENSUS_FEMALES;
              long census_householdschildren = e524->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e524->CENSUS_HISPANIC;
              long v524 = e524->__av;
              __SQL_SUM_AGGREGATE_467INVENTORY1.addOrDelOnZero(se4702.modify(__sql_sum_aggregate_467inventoryinventory_locn), (v523 * (v524 * (location_targetdistance * census_husbwife))));
            } while ((n524 = n524->nxt));
          }
          e523 = e523->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_468 = 0.0;
      __SQL_SUM_AGGREGATE_468INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e525 = LOCATION.head;
        while (e525) {
          long __sql_sum_aggregate_468inventoryinventory_locn = e525->LOCATION_LOCN;
          long location_zip = e525->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e525->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e525->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e525->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e525->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e525->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e525->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e525->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e525->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e525->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e525->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e525->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e525->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e525->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v525 = e525->__av;
          { //slice
            const HASH_RES_t h252 = CENSUS_mapkey0_idxfn::hash(se4706.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i526 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n526 = &(i526->buckets_[h252 % i526->size_]);
            CENSUS_entry* e526;
            do if ((e526 = n526->obj) && h252 == n526->hash && CENSUS_mapkey0_idxfn::equals(se4706, *e526)) {
              long census_population = e526->CENSUS_POPULATION;
              long census_white = e526->CENSUS_WHITE;
              long census_asian = e526->CENSUS_ASIAN;
              long census_pacific = e526->CENSUS_PACIFIC;
              long census_blackafrican = e526->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e526->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e526->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e526->CENSUS_HOUSEUNITS;
              long census_families = e526->CENSUS_FAMILIES;
              long census_households = e526->CENSUS_HOUSEHOLDS;
              long census_husbwife = e526->CENSUS_HUSBWIFE;
              long census_males = e526->CENSUS_MALES;
              long census_females = e526->CENSUS_FEMALES;
              long census_householdschildren = e526->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e526->CENSUS_HISPANIC;
              long v526 = e526->__av;
              __SQL_SUM_AGGREGATE_468INVENTORY1.addOrDelOnZero(se4705.modify(__sql_sum_aggregate_468inventoryinventory_locn), (v525 * (v526 * (location_targetdistance * census_males))));
            } while ((n526 = n526->nxt));
          }
          e525 = e525->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_469 = 0.0;
      __SQL_SUM_AGGREGATE_469INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e527 = LOCATION.head;
        while (e527) {
          long __sql_sum_aggregate_469inventoryinventory_locn = e527->LOCATION_LOCN;
          long location_zip = e527->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e527->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e527->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e527->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e527->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e527->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e527->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e527->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e527->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e527->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e527->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e527->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e527->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e527->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v527 = e527->__av;
          { //slice
            const HASH_RES_t h253 = CENSUS_mapkey0_idxfn::hash(se4709.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i528 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n528 = &(i528->buckets_[h253 % i528->size_]);
            CENSUS_entry* e528;
            do if ((e528 = n528->obj) && h253 == n528->hash && CENSUS_mapkey0_idxfn::equals(se4709, *e528)) {
              long census_population = e528->CENSUS_POPULATION;
              long census_white = e528->CENSUS_WHITE;
              long census_asian = e528->CENSUS_ASIAN;
              long census_pacific = e528->CENSUS_PACIFIC;
              long census_blackafrican = e528->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e528->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e528->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e528->CENSUS_HOUSEUNITS;
              long census_families = e528->CENSUS_FAMILIES;
              long census_households = e528->CENSUS_HOUSEHOLDS;
              long census_husbwife = e528->CENSUS_HUSBWIFE;
              long census_males = e528->CENSUS_MALES;
              long census_females = e528->CENSUS_FEMALES;
              long census_householdschildren = e528->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e528->CENSUS_HISPANIC;
              long v528 = e528->__av;
              __SQL_SUM_AGGREGATE_469INVENTORY1.addOrDelOnZero(se4708.modify(__sql_sum_aggregate_469inventoryinventory_locn), (v527 * (v528 * (location_targetdistance * census_females))));
            } while ((n528 = n528->nxt));
          }
          e527 = e527->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_470 = 0.0;
      __SQL_SUM_AGGREGATE_470INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e529 = LOCATION.head;
        while (e529) {
          long __sql_sum_aggregate_470inventoryinventory_locn = e529->LOCATION_LOCN;
          long location_zip = e529->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e529->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e529->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e529->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e529->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e529->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e529->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e529->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e529->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e529->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e529->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e529->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e529->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e529->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v529 = e529->__av;
          { //slice
            const HASH_RES_t h254 = CENSUS_mapkey0_idxfn::hash(se4712.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i530 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n530 = &(i530->buckets_[h254 % i530->size_]);
            CENSUS_entry* e530;
            do if ((e530 = n530->obj) && h254 == n530->hash && CENSUS_mapkey0_idxfn::equals(se4712, *e530)) {
              long census_population = e530->CENSUS_POPULATION;
              long census_white = e530->CENSUS_WHITE;
              long census_asian = e530->CENSUS_ASIAN;
              long census_pacific = e530->CENSUS_PACIFIC;
              long census_blackafrican = e530->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e530->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e530->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e530->CENSUS_HOUSEUNITS;
              long census_families = e530->CENSUS_FAMILIES;
              long census_households = e530->CENSUS_HOUSEHOLDS;
              long census_husbwife = e530->CENSUS_HUSBWIFE;
              long census_males = e530->CENSUS_MALES;
              long census_females = e530->CENSUS_FEMALES;
              long census_householdschildren = e530->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e530->CENSUS_HISPANIC;
              long v530 = e530->__av;
              __SQL_SUM_AGGREGATE_470INVENTORY1.addOrDelOnZero(se4711.modify(__sql_sum_aggregate_470inventoryinventory_locn), (v529 * (v530 * (location_targetdistance * census_householdschildren))));
            } while ((n530 = n530->nxt));
          }
          e529 = e529->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_471 = 0.0;
      __SQL_SUM_AGGREGATE_471INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e531 = LOCATION.head;
        while (e531) {
          long __sql_sum_aggregate_471inventoryinventory_locn = e531->LOCATION_LOCN;
          long location_zip = e531->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e531->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e531->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e531->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e531->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e531->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e531->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e531->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e531->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e531->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e531->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e531->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e531->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e531->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v531 = e531->__av;
          { //slice
            const HASH_RES_t h255 = CENSUS_mapkey0_idxfn::hash(se4715.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i532 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n532 = &(i532->buckets_[h255 % i532->size_]);
            CENSUS_entry* e532;
            do if ((e532 = n532->obj) && h255 == n532->hash && CENSUS_mapkey0_idxfn::equals(se4715, *e532)) {
              long census_population = e532->CENSUS_POPULATION;
              long census_white = e532->CENSUS_WHITE;
              long census_asian = e532->CENSUS_ASIAN;
              long census_pacific = e532->CENSUS_PACIFIC;
              long census_blackafrican = e532->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e532->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e532->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e532->CENSUS_HOUSEUNITS;
              long census_families = e532->CENSUS_FAMILIES;
              long census_households = e532->CENSUS_HOUSEHOLDS;
              long census_husbwife = e532->CENSUS_HUSBWIFE;
              long census_males = e532->CENSUS_MALES;
              long census_females = e532->CENSUS_FEMALES;
              long census_householdschildren = e532->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e532->CENSUS_HISPANIC;
              long v532 = e532->__av;
              __SQL_SUM_AGGREGATE_471INVENTORY1.addOrDelOnZero(se4714.modify(__sql_sum_aggregate_471inventoryinventory_locn), (v531 * (v532 * (location_targetdistance * census_hispanic))));
            } while ((n532 = n532->nxt));
          }
          e531 = e531->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_472 = 0.0;
      __SQL_SUM_AGGREGATE_473 = 0.0;
      __SQL_SUM_AGGREGATE_474 = 0.0;
      __SQL_SUM_AGGREGATE_475 = 0.0;
      __SQL_SUM_AGGREGATE_476 = 0.0;
      __SQL_SUM_AGGREGATE_477 = 0.0;
      __SQL_SUM_AGGREGATE_478 = 0.0;
      __SQL_SUM_AGGREGATE_479 = 0.0;
      __SQL_SUM_AGGREGATE_480 = 0.0;
      __SQL_SUM_AGGREGATE_481 = 0.0;
      __SQL_SUM_AGGREGATE_482 = 0.0;
      __SQL_SUM_AGGREGATE_482INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e533 = LOCATION.head;
        while (e533) {
          long __sql_sum_aggregate_482inventoryinventory_locn = e533->LOCATION_LOCN;
          long location_zip = e533->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e533->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e533->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e533->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e533->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e533->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e533->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e533->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e533->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e533->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e533->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e533->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e533->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e533->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v533 = e533->__av;
          { //slice
            const HASH_RES_t h256 = CENSUS_mapkey0_idxfn::hash(se4728.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i534 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n534 = &(i534->buckets_[h256 % i534->size_]);
            CENSUS_entry* e534;
            do if ((e534 = n534->obj) && h256 == n534->hash && CENSUS_mapkey0_idxfn::equals(se4728, *e534)) {
              long census_population = e534->CENSUS_POPULATION;
              long census_white = e534->CENSUS_WHITE;
              long census_asian = e534->CENSUS_ASIAN;
              long census_pacific = e534->CENSUS_PACIFIC;
              long census_blackafrican = e534->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e534->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e534->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e534->CENSUS_HOUSEUNITS;
              long census_families = e534->CENSUS_FAMILIES;
              long census_households = e534->CENSUS_HOUSEHOLDS;
              long census_husbwife = e534->CENSUS_HUSBWIFE;
              long census_males = e534->CENSUS_MALES;
              long census_females = e534->CENSUS_FEMALES;
              long census_householdschildren = e534->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e534->CENSUS_HISPANIC;
              long v534 = e534->__av;
              __SQL_SUM_AGGREGATE_482INVENTORY1.addOrDelOnZero(se4727.modify(__sql_sum_aggregate_482inventoryinventory_locn), (v533 * (v534 * (location_targetdrivetime * location_targetdrivetime))));
            } while ((n534 = n534->nxt));
          }
          e533 = e533->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_483 = 0.0;
      __SQL_SUM_AGGREGATE_483INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e535 = LOCATION.head;
        while (e535) {
          long __sql_sum_aggregate_483inventoryinventory_locn = e535->LOCATION_LOCN;
          long location_zip = e535->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e535->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e535->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e535->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e535->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e535->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e535->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e535->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e535->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e535->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e535->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e535->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e535->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e535->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v535 = e535->__av;
          { //slice
            const HASH_RES_t h257 = CENSUS_mapkey0_idxfn::hash(se4731.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i536 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n536 = &(i536->buckets_[h257 % i536->size_]);
            CENSUS_entry* e536;
            do if ((e536 = n536->obj) && h257 == n536->hash && CENSUS_mapkey0_idxfn::equals(se4731, *e536)) {
              long census_population = e536->CENSUS_POPULATION;
              long census_white = e536->CENSUS_WHITE;
              long census_asian = e536->CENSUS_ASIAN;
              long census_pacific = e536->CENSUS_PACIFIC;
              long census_blackafrican = e536->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e536->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e536->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e536->CENSUS_HOUSEUNITS;
              long census_families = e536->CENSUS_FAMILIES;
              long census_households = e536->CENSUS_HOUSEHOLDS;
              long census_husbwife = e536->CENSUS_HUSBWIFE;
              long census_males = e536->CENSUS_MALES;
              long census_females = e536->CENSUS_FEMALES;
              long census_householdschildren = e536->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e536->CENSUS_HISPANIC;
              long v536 = e536->__av;
              __SQL_SUM_AGGREGATE_483INVENTORY1.addOrDelOnZero(se4730.modify(__sql_sum_aggregate_483inventoryinventory_locn), (v535 * (v536 * (location_targetdrivetime * location_walmartdistance))));
            } while ((n536 = n536->nxt));
          }
          e535 = e535->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_484 = 0.0;
      __SQL_SUM_AGGREGATE_484INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e537 = LOCATION.head;
        while (e537) {
          long __sql_sum_aggregate_484inventoryinventory_locn = e537->LOCATION_LOCN;
          long location_zip = e537->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e537->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e537->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e537->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e537->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e537->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e537->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e537->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e537->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e537->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e537->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e537->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e537->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e537->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v537 = e537->__av;
          { //slice
            const HASH_RES_t h258 = CENSUS_mapkey0_idxfn::hash(se4734.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i538 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n538 = &(i538->buckets_[h258 % i538->size_]);
            CENSUS_entry* e538;
            do if ((e538 = n538->obj) && h258 == n538->hash && CENSUS_mapkey0_idxfn::equals(se4734, *e538)) {
              long census_population = e538->CENSUS_POPULATION;
              long census_white = e538->CENSUS_WHITE;
              long census_asian = e538->CENSUS_ASIAN;
              long census_pacific = e538->CENSUS_PACIFIC;
              long census_blackafrican = e538->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e538->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e538->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e538->CENSUS_HOUSEUNITS;
              long census_families = e538->CENSUS_FAMILIES;
              long census_households = e538->CENSUS_HOUSEHOLDS;
              long census_husbwife = e538->CENSUS_HUSBWIFE;
              long census_males = e538->CENSUS_MALES;
              long census_females = e538->CENSUS_FEMALES;
              long census_householdschildren = e538->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e538->CENSUS_HISPANIC;
              long v538 = e538->__av;
              __SQL_SUM_AGGREGATE_484INVENTORY1.addOrDelOnZero(se4733.modify(__sql_sum_aggregate_484inventoryinventory_locn), (v537 * (v538 * (location_targetdrivetime * location_walmartdrivetime))));
            } while ((n538 = n538->nxt));
          }
          e537 = e537->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_485 = 0.0;
      __SQL_SUM_AGGREGATE_485INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e539 = LOCATION.head;
        while (e539) {
          long __sql_sum_aggregate_485inventoryinventory_locn = e539->LOCATION_LOCN;
          long location_zip = e539->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e539->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e539->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e539->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e539->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e539->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e539->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e539->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e539->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e539->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e539->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e539->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e539->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e539->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v539 = e539->__av;
          { //slice
            const HASH_RES_t h259 = CENSUS_mapkey0_idxfn::hash(se4737.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i540 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n540 = &(i540->buckets_[h259 % i540->size_]);
            CENSUS_entry* e540;
            do if ((e540 = n540->obj) && h259 == n540->hash && CENSUS_mapkey0_idxfn::equals(se4737, *e540)) {
              long census_population = e540->CENSUS_POPULATION;
              long census_white = e540->CENSUS_WHITE;
              long census_asian = e540->CENSUS_ASIAN;
              long census_pacific = e540->CENSUS_PACIFIC;
              long census_blackafrican = e540->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e540->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e540->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e540->CENSUS_HOUSEUNITS;
              long census_families = e540->CENSUS_FAMILIES;
              long census_households = e540->CENSUS_HOUSEHOLDS;
              long census_husbwife = e540->CENSUS_HUSBWIFE;
              long census_males = e540->CENSUS_MALES;
              long census_females = e540->CENSUS_FEMALES;
              long census_householdschildren = e540->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e540->CENSUS_HISPANIC;
              long v540 = e540->__av;
              __SQL_SUM_AGGREGATE_485INVENTORY1.addOrDelOnZero(se4736.modify(__sql_sum_aggregate_485inventoryinventory_locn), (v539 * (v540 * (location_targetdrivetime * location_walmartsupercenterdistance))));
            } while ((n540 = n540->nxt));
          }
          e539 = e539->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_486 = 0.0;
      __SQL_SUM_AGGREGATE_486INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e541 = LOCATION.head;
        while (e541) {
          long __sql_sum_aggregate_486inventoryinventory_locn = e541->LOCATION_LOCN;
          long location_zip = e541->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e541->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e541->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e541->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e541->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e541->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e541->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e541->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e541->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e541->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e541->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e541->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e541->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e541->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v541 = e541->__av;
          { //slice
            const HASH_RES_t h260 = CENSUS_mapkey0_idxfn::hash(se4740.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i542 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n542 = &(i542->buckets_[h260 % i542->size_]);
            CENSUS_entry* e542;
            do if ((e542 = n542->obj) && h260 == n542->hash && CENSUS_mapkey0_idxfn::equals(se4740, *e542)) {
              long census_population = e542->CENSUS_POPULATION;
              long census_white = e542->CENSUS_WHITE;
              long census_asian = e542->CENSUS_ASIAN;
              long census_pacific = e542->CENSUS_PACIFIC;
              long census_blackafrican = e542->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e542->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e542->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e542->CENSUS_HOUSEUNITS;
              long census_families = e542->CENSUS_FAMILIES;
              long census_households = e542->CENSUS_HOUSEHOLDS;
              long census_husbwife = e542->CENSUS_HUSBWIFE;
              long census_males = e542->CENSUS_MALES;
              long census_females = e542->CENSUS_FEMALES;
              long census_householdschildren = e542->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e542->CENSUS_HISPANIC;
              long v542 = e542->__av;
              __SQL_SUM_AGGREGATE_486INVENTORY1.addOrDelOnZero(se4739.modify(__sql_sum_aggregate_486inventoryinventory_locn), (v541 * (v542 * (location_targetdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n542 = n542->nxt));
          }
          e541 = e541->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_487 = 0.0;
      __SQL_SUM_AGGREGATE_487INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e543 = LOCATION.head;
        while (e543) {
          long __sql_sum_aggregate_487inventoryinventory_locn = e543->LOCATION_LOCN;
          long location_zip = e543->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e543->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e543->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e543->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e543->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e543->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e543->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e543->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e543->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e543->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e543->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e543->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e543->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e543->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v543 = e543->__av;
          { //slice
            const HASH_RES_t h261 = CENSUS_mapkey0_idxfn::hash(se4743.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i544 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n544 = &(i544->buckets_[h261 % i544->size_]);
            CENSUS_entry* e544;
            do if ((e544 = n544->obj) && h261 == n544->hash && CENSUS_mapkey0_idxfn::equals(se4743, *e544)) {
              long census_population = e544->CENSUS_POPULATION;
              long census_white = e544->CENSUS_WHITE;
              long census_asian = e544->CENSUS_ASIAN;
              long census_pacific = e544->CENSUS_PACIFIC;
              long census_blackafrican = e544->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e544->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e544->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e544->CENSUS_HOUSEUNITS;
              long census_families = e544->CENSUS_FAMILIES;
              long census_households = e544->CENSUS_HOUSEHOLDS;
              long census_husbwife = e544->CENSUS_HUSBWIFE;
              long census_males = e544->CENSUS_MALES;
              long census_females = e544->CENSUS_FEMALES;
              long census_householdschildren = e544->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e544->CENSUS_HISPANIC;
              long v544 = e544->__av;
              __SQL_SUM_AGGREGATE_487INVENTORY1.addOrDelOnZero(se4742.modify(__sql_sum_aggregate_487inventoryinventory_locn), (v543 * (v544 * (location_targetdrivetime * census_population))));
            } while ((n544 = n544->nxt));
          }
          e543 = e543->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_488 = 0.0;
      __SQL_SUM_AGGREGATE_488INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e545 = LOCATION.head;
        while (e545) {
          long __sql_sum_aggregate_488inventoryinventory_locn = e545->LOCATION_LOCN;
          long location_zip = e545->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e545->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e545->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e545->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e545->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e545->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e545->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e545->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e545->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e545->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e545->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e545->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e545->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e545->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v545 = e545->__av;
          { //slice
            const HASH_RES_t h262 = CENSUS_mapkey0_idxfn::hash(se4746.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i546 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n546 = &(i546->buckets_[h262 % i546->size_]);
            CENSUS_entry* e546;
            do if ((e546 = n546->obj) && h262 == n546->hash && CENSUS_mapkey0_idxfn::equals(se4746, *e546)) {
              long census_population = e546->CENSUS_POPULATION;
              long census_white = e546->CENSUS_WHITE;
              long census_asian = e546->CENSUS_ASIAN;
              long census_pacific = e546->CENSUS_PACIFIC;
              long census_blackafrican = e546->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e546->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e546->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e546->CENSUS_HOUSEUNITS;
              long census_families = e546->CENSUS_FAMILIES;
              long census_households = e546->CENSUS_HOUSEHOLDS;
              long census_husbwife = e546->CENSUS_HUSBWIFE;
              long census_males = e546->CENSUS_MALES;
              long census_females = e546->CENSUS_FEMALES;
              long census_householdschildren = e546->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e546->CENSUS_HISPANIC;
              long v546 = e546->__av;
              __SQL_SUM_AGGREGATE_488INVENTORY1.addOrDelOnZero(se4745.modify(__sql_sum_aggregate_488inventoryinventory_locn), (v545 * (v546 * (location_targetdrivetime * census_white))));
            } while ((n546 = n546->nxt));
          }
          e545 = e545->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_489 = 0.0;
      __SQL_SUM_AGGREGATE_489INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e547 = LOCATION.head;
        while (e547) {
          long __sql_sum_aggregate_489inventoryinventory_locn = e547->LOCATION_LOCN;
          long location_zip = e547->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e547->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e547->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e547->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e547->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e547->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e547->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e547->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e547->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e547->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e547->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e547->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e547->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e547->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v547 = e547->__av;
          { //slice
            const HASH_RES_t h263 = CENSUS_mapkey0_idxfn::hash(se4749.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i548 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n548 = &(i548->buckets_[h263 % i548->size_]);
            CENSUS_entry* e548;
            do if ((e548 = n548->obj) && h263 == n548->hash && CENSUS_mapkey0_idxfn::equals(se4749, *e548)) {
              long census_population = e548->CENSUS_POPULATION;
              long census_white = e548->CENSUS_WHITE;
              long census_asian = e548->CENSUS_ASIAN;
              long census_pacific = e548->CENSUS_PACIFIC;
              long census_blackafrican = e548->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e548->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e548->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e548->CENSUS_HOUSEUNITS;
              long census_families = e548->CENSUS_FAMILIES;
              long census_households = e548->CENSUS_HOUSEHOLDS;
              long census_husbwife = e548->CENSUS_HUSBWIFE;
              long census_males = e548->CENSUS_MALES;
              long census_females = e548->CENSUS_FEMALES;
              long census_householdschildren = e548->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e548->CENSUS_HISPANIC;
              long v548 = e548->__av;
              __SQL_SUM_AGGREGATE_489INVENTORY1.addOrDelOnZero(se4748.modify(__sql_sum_aggregate_489inventoryinventory_locn), (v547 * (v548 * (location_targetdrivetime * census_asian))));
            } while ((n548 = n548->nxt));
          }
          e547 = e547->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_490 = 0.0;
      __SQL_SUM_AGGREGATE_490INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e549 = LOCATION.head;
        while (e549) {
          long __sql_sum_aggregate_490inventoryinventory_locn = e549->LOCATION_LOCN;
          long location_zip = e549->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e549->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e549->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e549->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e549->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e549->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e549->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e549->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e549->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e549->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e549->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e549->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e549->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e549->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v549 = e549->__av;
          { //slice
            const HASH_RES_t h264 = CENSUS_mapkey0_idxfn::hash(se4752.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i550 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n550 = &(i550->buckets_[h264 % i550->size_]);
            CENSUS_entry* e550;
            do if ((e550 = n550->obj) && h264 == n550->hash && CENSUS_mapkey0_idxfn::equals(se4752, *e550)) {
              long census_population = e550->CENSUS_POPULATION;
              long census_white = e550->CENSUS_WHITE;
              long census_asian = e550->CENSUS_ASIAN;
              long census_pacific = e550->CENSUS_PACIFIC;
              long census_blackafrican = e550->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e550->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e550->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e550->CENSUS_HOUSEUNITS;
              long census_families = e550->CENSUS_FAMILIES;
              long census_households = e550->CENSUS_HOUSEHOLDS;
              long census_husbwife = e550->CENSUS_HUSBWIFE;
              long census_males = e550->CENSUS_MALES;
              long census_females = e550->CENSUS_FEMALES;
              long census_householdschildren = e550->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e550->CENSUS_HISPANIC;
              long v550 = e550->__av;
              __SQL_SUM_AGGREGATE_490INVENTORY1.addOrDelOnZero(se4751.modify(__sql_sum_aggregate_490inventoryinventory_locn), (v549 * (v550 * (location_targetdrivetime * census_pacific))));
            } while ((n550 = n550->nxt));
          }
          e549 = e549->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_491 = 0.0;
      __SQL_SUM_AGGREGATE_491INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e551 = LOCATION.head;
        while (e551) {
          long __sql_sum_aggregate_491inventoryinventory_locn = e551->LOCATION_LOCN;
          long location_zip = e551->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e551->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e551->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e551->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e551->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e551->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e551->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e551->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e551->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e551->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e551->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e551->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e551->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e551->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v551 = e551->__av;
          { //slice
            const HASH_RES_t h265 = CENSUS_mapkey0_idxfn::hash(se4755.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i552 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n552 = &(i552->buckets_[h265 % i552->size_]);
            CENSUS_entry* e552;
            do if ((e552 = n552->obj) && h265 == n552->hash && CENSUS_mapkey0_idxfn::equals(se4755, *e552)) {
              long census_population = e552->CENSUS_POPULATION;
              long census_white = e552->CENSUS_WHITE;
              long census_asian = e552->CENSUS_ASIAN;
              long census_pacific = e552->CENSUS_PACIFIC;
              long census_blackafrican = e552->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e552->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e552->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e552->CENSUS_HOUSEUNITS;
              long census_families = e552->CENSUS_FAMILIES;
              long census_households = e552->CENSUS_HOUSEHOLDS;
              long census_husbwife = e552->CENSUS_HUSBWIFE;
              long census_males = e552->CENSUS_MALES;
              long census_females = e552->CENSUS_FEMALES;
              long census_householdschildren = e552->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e552->CENSUS_HISPANIC;
              long v552 = e552->__av;
              __SQL_SUM_AGGREGATE_491INVENTORY1.addOrDelOnZero(se4754.modify(__sql_sum_aggregate_491inventoryinventory_locn), (v551 * (v552 * (location_targetdrivetime * census_blackafrican))));
            } while ((n552 = n552->nxt));
          }
          e551 = e551->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_492 = 0.0;
      __SQL_SUM_AGGREGATE_492INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e553 = LOCATION.head;
        while (e553) {
          long __sql_sum_aggregate_492inventoryinventory_locn = e553->LOCATION_LOCN;
          long location_zip = e553->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e553->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e553->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e553->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e553->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e553->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e553->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e553->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e553->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e553->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e553->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e553->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e553->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e553->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v553 = e553->__av;
          { //slice
            const HASH_RES_t h266 = CENSUS_mapkey0_idxfn::hash(se4758.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i554 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n554 = &(i554->buckets_[h266 % i554->size_]);
            CENSUS_entry* e554;
            do if ((e554 = n554->obj) && h266 == n554->hash && CENSUS_mapkey0_idxfn::equals(se4758, *e554)) {
              long census_population = e554->CENSUS_POPULATION;
              long census_white = e554->CENSUS_WHITE;
              long census_asian = e554->CENSUS_ASIAN;
              long census_pacific = e554->CENSUS_PACIFIC;
              long census_blackafrican = e554->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e554->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e554->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e554->CENSUS_HOUSEUNITS;
              long census_families = e554->CENSUS_FAMILIES;
              long census_households = e554->CENSUS_HOUSEHOLDS;
              long census_husbwife = e554->CENSUS_HUSBWIFE;
              long census_males = e554->CENSUS_MALES;
              long census_females = e554->CENSUS_FEMALES;
              long census_householdschildren = e554->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e554->CENSUS_HISPANIC;
              long v554 = e554->__av;
              __SQL_SUM_AGGREGATE_492INVENTORY1.addOrDelOnZero(se4757.modify(__sql_sum_aggregate_492inventoryinventory_locn), (v553 * (v554 * (location_targetdrivetime * census_medianage))));
            } while ((n554 = n554->nxt));
          }
          e553 = e553->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_493 = 0.0;
      __SQL_SUM_AGGREGATE_493INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e555 = LOCATION.head;
        while (e555) {
          long __sql_sum_aggregate_493inventoryinventory_locn = e555->LOCATION_LOCN;
          long location_zip = e555->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e555->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e555->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e555->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e555->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e555->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e555->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e555->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e555->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e555->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e555->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e555->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e555->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e555->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v555 = e555->__av;
          { //slice
            const HASH_RES_t h267 = CENSUS_mapkey0_idxfn::hash(se4761.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i556 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n556 = &(i556->buckets_[h267 % i556->size_]);
            CENSUS_entry* e556;
            do if ((e556 = n556->obj) && h267 == n556->hash && CENSUS_mapkey0_idxfn::equals(se4761, *e556)) {
              long census_population = e556->CENSUS_POPULATION;
              long census_white = e556->CENSUS_WHITE;
              long census_asian = e556->CENSUS_ASIAN;
              long census_pacific = e556->CENSUS_PACIFIC;
              long census_blackafrican = e556->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e556->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e556->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e556->CENSUS_HOUSEUNITS;
              long census_families = e556->CENSUS_FAMILIES;
              long census_households = e556->CENSUS_HOUSEHOLDS;
              long census_husbwife = e556->CENSUS_HUSBWIFE;
              long census_males = e556->CENSUS_MALES;
              long census_females = e556->CENSUS_FEMALES;
              long census_householdschildren = e556->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e556->CENSUS_HISPANIC;
              long v556 = e556->__av;
              __SQL_SUM_AGGREGATE_493INVENTORY1.addOrDelOnZero(se4760.modify(__sql_sum_aggregate_493inventoryinventory_locn), (v555 * (v556 * (location_targetdrivetime * census_occupiedhouseunits))));
            } while ((n556 = n556->nxt));
          }
          e555 = e555->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_494 = 0.0;
      __SQL_SUM_AGGREGATE_494INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e557 = LOCATION.head;
        while (e557) {
          long __sql_sum_aggregate_494inventoryinventory_locn = e557->LOCATION_LOCN;
          long location_zip = e557->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e557->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e557->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e557->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e557->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e557->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e557->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e557->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e557->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e557->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e557->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e557->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e557->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e557->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v557 = e557->__av;
          { //slice
            const HASH_RES_t h268 = CENSUS_mapkey0_idxfn::hash(se4764.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i558 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n558 = &(i558->buckets_[h268 % i558->size_]);
            CENSUS_entry* e558;
            do if ((e558 = n558->obj) && h268 == n558->hash && CENSUS_mapkey0_idxfn::equals(se4764, *e558)) {
              long census_population = e558->CENSUS_POPULATION;
              long census_white = e558->CENSUS_WHITE;
              long census_asian = e558->CENSUS_ASIAN;
              long census_pacific = e558->CENSUS_PACIFIC;
              long census_blackafrican = e558->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e558->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e558->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e558->CENSUS_HOUSEUNITS;
              long census_families = e558->CENSUS_FAMILIES;
              long census_households = e558->CENSUS_HOUSEHOLDS;
              long census_husbwife = e558->CENSUS_HUSBWIFE;
              long census_males = e558->CENSUS_MALES;
              long census_females = e558->CENSUS_FEMALES;
              long census_householdschildren = e558->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e558->CENSUS_HISPANIC;
              long v558 = e558->__av;
              __SQL_SUM_AGGREGATE_494INVENTORY1.addOrDelOnZero(se4763.modify(__sql_sum_aggregate_494inventoryinventory_locn), (v557 * (v558 * (location_targetdrivetime * census_houseunits))));
            } while ((n558 = n558->nxt));
          }
          e557 = e557->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_495 = 0.0;
      __SQL_SUM_AGGREGATE_495INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e559 = LOCATION.head;
        while (e559) {
          long __sql_sum_aggregate_495inventoryinventory_locn = e559->LOCATION_LOCN;
          long location_zip = e559->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e559->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e559->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e559->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e559->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e559->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e559->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e559->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e559->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e559->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e559->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e559->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e559->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e559->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v559 = e559->__av;
          { //slice
            const HASH_RES_t h269 = CENSUS_mapkey0_idxfn::hash(se4767.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i560 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n560 = &(i560->buckets_[h269 % i560->size_]);
            CENSUS_entry* e560;
            do if ((e560 = n560->obj) && h269 == n560->hash && CENSUS_mapkey0_idxfn::equals(se4767, *e560)) {
              long census_population = e560->CENSUS_POPULATION;
              long census_white = e560->CENSUS_WHITE;
              long census_asian = e560->CENSUS_ASIAN;
              long census_pacific = e560->CENSUS_PACIFIC;
              long census_blackafrican = e560->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e560->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e560->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e560->CENSUS_HOUSEUNITS;
              long census_families = e560->CENSUS_FAMILIES;
              long census_households = e560->CENSUS_HOUSEHOLDS;
              long census_husbwife = e560->CENSUS_HUSBWIFE;
              long census_males = e560->CENSUS_MALES;
              long census_females = e560->CENSUS_FEMALES;
              long census_householdschildren = e560->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e560->CENSUS_HISPANIC;
              long v560 = e560->__av;
              __SQL_SUM_AGGREGATE_495INVENTORY1.addOrDelOnZero(se4766.modify(__sql_sum_aggregate_495inventoryinventory_locn), (v559 * (v560 * (location_targetdrivetime * census_families))));
            } while ((n560 = n560->nxt));
          }
          e559 = e559->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_496 = 0.0;
      __SQL_SUM_AGGREGATE_496INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e561 = LOCATION.head;
        while (e561) {
          long __sql_sum_aggregate_496inventoryinventory_locn = e561->LOCATION_LOCN;
          long location_zip = e561->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e561->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e561->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e561->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e561->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e561->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e561->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e561->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e561->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e561->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e561->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e561->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e561->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e561->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v561 = e561->__av;
          { //slice
            const HASH_RES_t h270 = CENSUS_mapkey0_idxfn::hash(se4770.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i562 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n562 = &(i562->buckets_[h270 % i562->size_]);
            CENSUS_entry* e562;
            do if ((e562 = n562->obj) && h270 == n562->hash && CENSUS_mapkey0_idxfn::equals(se4770, *e562)) {
              long census_population = e562->CENSUS_POPULATION;
              long census_white = e562->CENSUS_WHITE;
              long census_asian = e562->CENSUS_ASIAN;
              long census_pacific = e562->CENSUS_PACIFIC;
              long census_blackafrican = e562->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e562->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e562->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e562->CENSUS_HOUSEUNITS;
              long census_families = e562->CENSUS_FAMILIES;
              long census_households = e562->CENSUS_HOUSEHOLDS;
              long census_husbwife = e562->CENSUS_HUSBWIFE;
              long census_males = e562->CENSUS_MALES;
              long census_females = e562->CENSUS_FEMALES;
              long census_householdschildren = e562->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e562->CENSUS_HISPANIC;
              long v562 = e562->__av;
              __SQL_SUM_AGGREGATE_496INVENTORY1.addOrDelOnZero(se4769.modify(__sql_sum_aggregate_496inventoryinventory_locn), (v561 * (v562 * (location_targetdrivetime * census_households))));
            } while ((n562 = n562->nxt));
          }
          e561 = e561->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_497 = 0.0;
      __SQL_SUM_AGGREGATE_497INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e563 = LOCATION.head;
        while (e563) {
          long __sql_sum_aggregate_497inventoryinventory_locn = e563->LOCATION_LOCN;
          long location_zip = e563->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e563->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e563->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e563->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e563->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e563->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e563->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e563->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e563->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e563->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e563->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e563->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e563->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e563->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v563 = e563->__av;
          { //slice
            const HASH_RES_t h271 = CENSUS_mapkey0_idxfn::hash(se4773.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i564 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n564 = &(i564->buckets_[h271 % i564->size_]);
            CENSUS_entry* e564;
            do if ((e564 = n564->obj) && h271 == n564->hash && CENSUS_mapkey0_idxfn::equals(se4773, *e564)) {
              long census_population = e564->CENSUS_POPULATION;
              long census_white = e564->CENSUS_WHITE;
              long census_asian = e564->CENSUS_ASIAN;
              long census_pacific = e564->CENSUS_PACIFIC;
              long census_blackafrican = e564->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e564->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e564->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e564->CENSUS_HOUSEUNITS;
              long census_families = e564->CENSUS_FAMILIES;
              long census_households = e564->CENSUS_HOUSEHOLDS;
              long census_husbwife = e564->CENSUS_HUSBWIFE;
              long census_males = e564->CENSUS_MALES;
              long census_females = e564->CENSUS_FEMALES;
              long census_householdschildren = e564->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e564->CENSUS_HISPANIC;
              long v564 = e564->__av;
              __SQL_SUM_AGGREGATE_497INVENTORY1.addOrDelOnZero(se4772.modify(__sql_sum_aggregate_497inventoryinventory_locn), (v563 * (v564 * (location_targetdrivetime * census_husbwife))));
            } while ((n564 = n564->nxt));
          }
          e563 = e563->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_498 = 0.0;
      __SQL_SUM_AGGREGATE_498INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e565 = LOCATION.head;
        while (e565) {
          long __sql_sum_aggregate_498inventoryinventory_locn = e565->LOCATION_LOCN;
          long location_zip = e565->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e565->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e565->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e565->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e565->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e565->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e565->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e565->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e565->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e565->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e565->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e565->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e565->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e565->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v565 = e565->__av;
          { //slice
            const HASH_RES_t h272 = CENSUS_mapkey0_idxfn::hash(se4776.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i566 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n566 = &(i566->buckets_[h272 % i566->size_]);
            CENSUS_entry* e566;
            do if ((e566 = n566->obj) && h272 == n566->hash && CENSUS_mapkey0_idxfn::equals(se4776, *e566)) {
              long census_population = e566->CENSUS_POPULATION;
              long census_white = e566->CENSUS_WHITE;
              long census_asian = e566->CENSUS_ASIAN;
              long census_pacific = e566->CENSUS_PACIFIC;
              long census_blackafrican = e566->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e566->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e566->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e566->CENSUS_HOUSEUNITS;
              long census_families = e566->CENSUS_FAMILIES;
              long census_households = e566->CENSUS_HOUSEHOLDS;
              long census_husbwife = e566->CENSUS_HUSBWIFE;
              long census_males = e566->CENSUS_MALES;
              long census_females = e566->CENSUS_FEMALES;
              long census_householdschildren = e566->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e566->CENSUS_HISPANIC;
              long v566 = e566->__av;
              __SQL_SUM_AGGREGATE_498INVENTORY1.addOrDelOnZero(se4775.modify(__sql_sum_aggregate_498inventoryinventory_locn), (v565 * (v566 * (location_targetdrivetime * census_males))));
            } while ((n566 = n566->nxt));
          }
          e565 = e565->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_499 = 0.0;
      __SQL_SUM_AGGREGATE_499INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e567 = LOCATION.head;
        while (e567) {
          long __sql_sum_aggregate_499inventoryinventory_locn = e567->LOCATION_LOCN;
          long location_zip = e567->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e567->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e567->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e567->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e567->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e567->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e567->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e567->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e567->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e567->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e567->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e567->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e567->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e567->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v567 = e567->__av;
          { //slice
            const HASH_RES_t h273 = CENSUS_mapkey0_idxfn::hash(se4779.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i568 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n568 = &(i568->buckets_[h273 % i568->size_]);
            CENSUS_entry* e568;
            do if ((e568 = n568->obj) && h273 == n568->hash && CENSUS_mapkey0_idxfn::equals(se4779, *e568)) {
              long census_population = e568->CENSUS_POPULATION;
              long census_white = e568->CENSUS_WHITE;
              long census_asian = e568->CENSUS_ASIAN;
              long census_pacific = e568->CENSUS_PACIFIC;
              long census_blackafrican = e568->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e568->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e568->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e568->CENSUS_HOUSEUNITS;
              long census_families = e568->CENSUS_FAMILIES;
              long census_households = e568->CENSUS_HOUSEHOLDS;
              long census_husbwife = e568->CENSUS_HUSBWIFE;
              long census_males = e568->CENSUS_MALES;
              long census_females = e568->CENSUS_FEMALES;
              long census_householdschildren = e568->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e568->CENSUS_HISPANIC;
              long v568 = e568->__av;
              __SQL_SUM_AGGREGATE_499INVENTORY1.addOrDelOnZero(se4778.modify(__sql_sum_aggregate_499inventoryinventory_locn), (v567 * (v568 * (location_targetdrivetime * census_females))));
            } while ((n568 = n568->nxt));
          }
          e567 = e567->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_500 = 0.0;
      __SQL_SUM_AGGREGATE_500INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e569 = LOCATION.head;
        while (e569) {
          long __sql_sum_aggregate_500inventoryinventory_locn = e569->LOCATION_LOCN;
          long location_zip = e569->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e569->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e569->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e569->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e569->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e569->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e569->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e569->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e569->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e569->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e569->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e569->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e569->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e569->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v569 = e569->__av;
          { //slice
            const HASH_RES_t h274 = CENSUS_mapkey0_idxfn::hash(se4782.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i570 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n570 = &(i570->buckets_[h274 % i570->size_]);
            CENSUS_entry* e570;
            do if ((e570 = n570->obj) && h274 == n570->hash && CENSUS_mapkey0_idxfn::equals(se4782, *e570)) {
              long census_population = e570->CENSUS_POPULATION;
              long census_white = e570->CENSUS_WHITE;
              long census_asian = e570->CENSUS_ASIAN;
              long census_pacific = e570->CENSUS_PACIFIC;
              long census_blackafrican = e570->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e570->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e570->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e570->CENSUS_HOUSEUNITS;
              long census_families = e570->CENSUS_FAMILIES;
              long census_households = e570->CENSUS_HOUSEHOLDS;
              long census_husbwife = e570->CENSUS_HUSBWIFE;
              long census_males = e570->CENSUS_MALES;
              long census_females = e570->CENSUS_FEMALES;
              long census_householdschildren = e570->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e570->CENSUS_HISPANIC;
              long v570 = e570->__av;
              __SQL_SUM_AGGREGATE_500INVENTORY1.addOrDelOnZero(se4781.modify(__sql_sum_aggregate_500inventoryinventory_locn), (v569 * (v570 * (location_targetdrivetime * census_householdschildren))));
            } while ((n570 = n570->nxt));
          }
          e569 = e569->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_501 = 0.0;
      __SQL_SUM_AGGREGATE_501INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e571 = LOCATION.head;
        while (e571) {
          long __sql_sum_aggregate_501inventoryinventory_locn = e571->LOCATION_LOCN;
          long location_zip = e571->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e571->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e571->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e571->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e571->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e571->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e571->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e571->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e571->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e571->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e571->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e571->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e571->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e571->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v571 = e571->__av;
          { //slice
            const HASH_RES_t h275 = CENSUS_mapkey0_idxfn::hash(se4785.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i572 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n572 = &(i572->buckets_[h275 % i572->size_]);
            CENSUS_entry* e572;
            do if ((e572 = n572->obj) && h275 == n572->hash && CENSUS_mapkey0_idxfn::equals(se4785, *e572)) {
              long census_population = e572->CENSUS_POPULATION;
              long census_white = e572->CENSUS_WHITE;
              long census_asian = e572->CENSUS_ASIAN;
              long census_pacific = e572->CENSUS_PACIFIC;
              long census_blackafrican = e572->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e572->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e572->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e572->CENSUS_HOUSEUNITS;
              long census_families = e572->CENSUS_FAMILIES;
              long census_households = e572->CENSUS_HOUSEHOLDS;
              long census_husbwife = e572->CENSUS_HUSBWIFE;
              long census_males = e572->CENSUS_MALES;
              long census_females = e572->CENSUS_FEMALES;
              long census_householdschildren = e572->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e572->CENSUS_HISPANIC;
              long v572 = e572->__av;
              __SQL_SUM_AGGREGATE_501INVENTORY1.addOrDelOnZero(se4784.modify(__sql_sum_aggregate_501inventoryinventory_locn), (v571 * (v572 * (location_targetdrivetime * census_hispanic))));
            } while ((n572 = n572->nxt));
          }
          e571 = e571->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_502 = 0.0;
      __SQL_SUM_AGGREGATE_503 = 0.0;
      __SQL_SUM_AGGREGATE_504 = 0.0;
      __SQL_SUM_AGGREGATE_505 = 0.0;
      __SQL_SUM_AGGREGATE_506 = 0.0;
      __SQL_SUM_AGGREGATE_507 = 0.0;
      __SQL_SUM_AGGREGATE_508 = 0.0;
      __SQL_SUM_AGGREGATE_509 = 0.0;
      __SQL_SUM_AGGREGATE_510 = 0.0;
      __SQL_SUM_AGGREGATE_511 = 0.0;
      __SQL_SUM_AGGREGATE_512 = 0.0;
      __SQL_SUM_AGGREGATE_512INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e573 = LOCATION.head;
        while (e573) {
          long __sql_sum_aggregate_512inventoryinventory_locn = e573->LOCATION_LOCN;
          long location_zip = e573->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e573->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e573->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e573->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e573->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e573->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e573->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e573->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e573->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e573->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e573->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e573->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e573->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e573->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v573 = e573->__av;
          { //slice
            const HASH_RES_t h276 = CENSUS_mapkey0_idxfn::hash(se4798.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i574 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n574 = &(i574->buckets_[h276 % i574->size_]);
            CENSUS_entry* e574;
            do if ((e574 = n574->obj) && h276 == n574->hash && CENSUS_mapkey0_idxfn::equals(se4798, *e574)) {
              long census_population = e574->CENSUS_POPULATION;
              long census_white = e574->CENSUS_WHITE;
              long census_asian = e574->CENSUS_ASIAN;
              long census_pacific = e574->CENSUS_PACIFIC;
              long census_blackafrican = e574->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e574->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e574->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e574->CENSUS_HOUSEUNITS;
              long census_families = e574->CENSUS_FAMILIES;
              long census_households = e574->CENSUS_HOUSEHOLDS;
              long census_husbwife = e574->CENSUS_HUSBWIFE;
              long census_males = e574->CENSUS_MALES;
              long census_females = e574->CENSUS_FEMALES;
              long census_householdschildren = e574->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e574->CENSUS_HISPANIC;
              long v574 = e574->__av;
              __SQL_SUM_AGGREGATE_512INVENTORY1.addOrDelOnZero(se4797.modify(__sql_sum_aggregate_512inventoryinventory_locn), (v573 * (v574 * (location_walmartdistance * location_walmartdistance))));
            } while ((n574 = n574->nxt));
          }
          e573 = e573->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_513 = 0.0;
      __SQL_SUM_AGGREGATE_513INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e575 = LOCATION.head;
        while (e575) {
          long __sql_sum_aggregate_513inventoryinventory_locn = e575->LOCATION_LOCN;
          long location_zip = e575->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e575->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e575->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e575->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e575->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e575->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e575->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e575->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e575->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e575->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e575->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e575->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e575->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e575->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v575 = e575->__av;
          { //slice
            const HASH_RES_t h277 = CENSUS_mapkey0_idxfn::hash(se4801.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i576 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n576 = &(i576->buckets_[h277 % i576->size_]);
            CENSUS_entry* e576;
            do if ((e576 = n576->obj) && h277 == n576->hash && CENSUS_mapkey0_idxfn::equals(se4801, *e576)) {
              long census_population = e576->CENSUS_POPULATION;
              long census_white = e576->CENSUS_WHITE;
              long census_asian = e576->CENSUS_ASIAN;
              long census_pacific = e576->CENSUS_PACIFIC;
              long census_blackafrican = e576->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e576->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e576->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e576->CENSUS_HOUSEUNITS;
              long census_families = e576->CENSUS_FAMILIES;
              long census_households = e576->CENSUS_HOUSEHOLDS;
              long census_husbwife = e576->CENSUS_HUSBWIFE;
              long census_males = e576->CENSUS_MALES;
              long census_females = e576->CENSUS_FEMALES;
              long census_householdschildren = e576->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e576->CENSUS_HISPANIC;
              long v576 = e576->__av;
              __SQL_SUM_AGGREGATE_513INVENTORY1.addOrDelOnZero(se4800.modify(__sql_sum_aggregate_513inventoryinventory_locn), (v575 * (v576 * (location_walmartdistance * location_walmartdrivetime))));
            } while ((n576 = n576->nxt));
          }
          e575 = e575->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_514 = 0.0;
      __SQL_SUM_AGGREGATE_514INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e577 = LOCATION.head;
        while (e577) {
          long __sql_sum_aggregate_514inventoryinventory_locn = e577->LOCATION_LOCN;
          long location_zip = e577->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e577->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e577->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e577->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e577->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e577->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e577->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e577->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e577->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e577->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e577->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e577->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e577->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e577->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v577 = e577->__av;
          { //slice
            const HASH_RES_t h278 = CENSUS_mapkey0_idxfn::hash(se4804.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i578 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n578 = &(i578->buckets_[h278 % i578->size_]);
            CENSUS_entry* e578;
            do if ((e578 = n578->obj) && h278 == n578->hash && CENSUS_mapkey0_idxfn::equals(se4804, *e578)) {
              long census_population = e578->CENSUS_POPULATION;
              long census_white = e578->CENSUS_WHITE;
              long census_asian = e578->CENSUS_ASIAN;
              long census_pacific = e578->CENSUS_PACIFIC;
              long census_blackafrican = e578->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e578->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e578->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e578->CENSUS_HOUSEUNITS;
              long census_families = e578->CENSUS_FAMILIES;
              long census_households = e578->CENSUS_HOUSEHOLDS;
              long census_husbwife = e578->CENSUS_HUSBWIFE;
              long census_males = e578->CENSUS_MALES;
              long census_females = e578->CENSUS_FEMALES;
              long census_householdschildren = e578->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e578->CENSUS_HISPANIC;
              long v578 = e578->__av;
              __SQL_SUM_AGGREGATE_514INVENTORY1.addOrDelOnZero(se4803.modify(__sql_sum_aggregate_514inventoryinventory_locn), (v577 * (v578 * (location_walmartdistance * location_walmartsupercenterdistance))));
            } while ((n578 = n578->nxt));
          }
          e577 = e577->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_515 = 0.0;
      __SQL_SUM_AGGREGATE_515INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e579 = LOCATION.head;
        while (e579) {
          long __sql_sum_aggregate_515inventoryinventory_locn = e579->LOCATION_LOCN;
          long location_zip = e579->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e579->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e579->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e579->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e579->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e579->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e579->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e579->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e579->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e579->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e579->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e579->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e579->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e579->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v579 = e579->__av;
          { //slice
            const HASH_RES_t h279 = CENSUS_mapkey0_idxfn::hash(se4807.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i580 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n580 = &(i580->buckets_[h279 % i580->size_]);
            CENSUS_entry* e580;
            do if ((e580 = n580->obj) && h279 == n580->hash && CENSUS_mapkey0_idxfn::equals(se4807, *e580)) {
              long census_population = e580->CENSUS_POPULATION;
              long census_white = e580->CENSUS_WHITE;
              long census_asian = e580->CENSUS_ASIAN;
              long census_pacific = e580->CENSUS_PACIFIC;
              long census_blackafrican = e580->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e580->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e580->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e580->CENSUS_HOUSEUNITS;
              long census_families = e580->CENSUS_FAMILIES;
              long census_households = e580->CENSUS_HOUSEHOLDS;
              long census_husbwife = e580->CENSUS_HUSBWIFE;
              long census_males = e580->CENSUS_MALES;
              long census_females = e580->CENSUS_FEMALES;
              long census_householdschildren = e580->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e580->CENSUS_HISPANIC;
              long v580 = e580->__av;
              __SQL_SUM_AGGREGATE_515INVENTORY1.addOrDelOnZero(se4806.modify(__sql_sum_aggregate_515inventoryinventory_locn), (v579 * (v580 * (location_walmartdistance * location_walmartsupercenterdrivetime))));
            } while ((n580 = n580->nxt));
          }
          e579 = e579->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_516 = 0.0;
      __SQL_SUM_AGGREGATE_516INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e581 = LOCATION.head;
        while (e581) {
          long __sql_sum_aggregate_516inventoryinventory_locn = e581->LOCATION_LOCN;
          long location_zip = e581->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e581->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e581->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e581->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e581->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e581->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e581->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e581->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e581->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e581->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e581->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e581->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e581->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e581->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v581 = e581->__av;
          { //slice
            const HASH_RES_t h280 = CENSUS_mapkey0_idxfn::hash(se4810.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i582 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n582 = &(i582->buckets_[h280 % i582->size_]);
            CENSUS_entry* e582;
            do if ((e582 = n582->obj) && h280 == n582->hash && CENSUS_mapkey0_idxfn::equals(se4810, *e582)) {
              long census_population = e582->CENSUS_POPULATION;
              long census_white = e582->CENSUS_WHITE;
              long census_asian = e582->CENSUS_ASIAN;
              long census_pacific = e582->CENSUS_PACIFIC;
              long census_blackafrican = e582->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e582->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e582->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e582->CENSUS_HOUSEUNITS;
              long census_families = e582->CENSUS_FAMILIES;
              long census_households = e582->CENSUS_HOUSEHOLDS;
              long census_husbwife = e582->CENSUS_HUSBWIFE;
              long census_males = e582->CENSUS_MALES;
              long census_females = e582->CENSUS_FEMALES;
              long census_householdschildren = e582->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e582->CENSUS_HISPANIC;
              long v582 = e582->__av;
              __SQL_SUM_AGGREGATE_516INVENTORY1.addOrDelOnZero(se4809.modify(__sql_sum_aggregate_516inventoryinventory_locn), (v581 * (v582 * (location_walmartdistance * census_population))));
            } while ((n582 = n582->nxt));
          }
          e581 = e581->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_517 = 0.0;
      __SQL_SUM_AGGREGATE_517INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e583 = LOCATION.head;
        while (e583) {
          long __sql_sum_aggregate_517inventoryinventory_locn = e583->LOCATION_LOCN;
          long location_zip = e583->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e583->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e583->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e583->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e583->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e583->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e583->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e583->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e583->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e583->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e583->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e583->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e583->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e583->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v583 = e583->__av;
          { //slice
            const HASH_RES_t h281 = CENSUS_mapkey0_idxfn::hash(se4813.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i584 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n584 = &(i584->buckets_[h281 % i584->size_]);
            CENSUS_entry* e584;
            do if ((e584 = n584->obj) && h281 == n584->hash && CENSUS_mapkey0_idxfn::equals(se4813, *e584)) {
              long census_population = e584->CENSUS_POPULATION;
              long census_white = e584->CENSUS_WHITE;
              long census_asian = e584->CENSUS_ASIAN;
              long census_pacific = e584->CENSUS_PACIFIC;
              long census_blackafrican = e584->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e584->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e584->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e584->CENSUS_HOUSEUNITS;
              long census_families = e584->CENSUS_FAMILIES;
              long census_households = e584->CENSUS_HOUSEHOLDS;
              long census_husbwife = e584->CENSUS_HUSBWIFE;
              long census_males = e584->CENSUS_MALES;
              long census_females = e584->CENSUS_FEMALES;
              long census_householdschildren = e584->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e584->CENSUS_HISPANIC;
              long v584 = e584->__av;
              __SQL_SUM_AGGREGATE_517INVENTORY1.addOrDelOnZero(se4812.modify(__sql_sum_aggregate_517inventoryinventory_locn), (v583 * (v584 * (location_walmartdistance * census_white))));
            } while ((n584 = n584->nxt));
          }
          e583 = e583->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_518 = 0.0;
      __SQL_SUM_AGGREGATE_518INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e585 = LOCATION.head;
        while (e585) {
          long __sql_sum_aggregate_518inventoryinventory_locn = e585->LOCATION_LOCN;
          long location_zip = e585->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e585->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e585->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e585->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e585->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e585->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e585->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e585->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e585->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e585->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e585->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e585->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e585->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e585->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v585 = e585->__av;
          { //slice
            const HASH_RES_t h282 = CENSUS_mapkey0_idxfn::hash(se4816.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i586 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n586 = &(i586->buckets_[h282 % i586->size_]);
            CENSUS_entry* e586;
            do if ((e586 = n586->obj) && h282 == n586->hash && CENSUS_mapkey0_idxfn::equals(se4816, *e586)) {
              long census_population = e586->CENSUS_POPULATION;
              long census_white = e586->CENSUS_WHITE;
              long census_asian = e586->CENSUS_ASIAN;
              long census_pacific = e586->CENSUS_PACIFIC;
              long census_blackafrican = e586->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e586->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e586->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e586->CENSUS_HOUSEUNITS;
              long census_families = e586->CENSUS_FAMILIES;
              long census_households = e586->CENSUS_HOUSEHOLDS;
              long census_husbwife = e586->CENSUS_HUSBWIFE;
              long census_males = e586->CENSUS_MALES;
              long census_females = e586->CENSUS_FEMALES;
              long census_householdschildren = e586->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e586->CENSUS_HISPANIC;
              long v586 = e586->__av;
              __SQL_SUM_AGGREGATE_518INVENTORY1.addOrDelOnZero(se4815.modify(__sql_sum_aggregate_518inventoryinventory_locn), (v585 * (v586 * (location_walmartdistance * census_asian))));
            } while ((n586 = n586->nxt));
          }
          e585 = e585->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_519 = 0.0;
      __SQL_SUM_AGGREGATE_519INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e587 = LOCATION.head;
        while (e587) {
          long __sql_sum_aggregate_519inventoryinventory_locn = e587->LOCATION_LOCN;
          long location_zip = e587->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e587->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e587->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e587->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e587->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e587->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e587->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e587->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e587->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e587->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e587->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e587->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e587->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e587->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v587 = e587->__av;
          { //slice
            const HASH_RES_t h283 = CENSUS_mapkey0_idxfn::hash(se4819.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i588 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n588 = &(i588->buckets_[h283 % i588->size_]);
            CENSUS_entry* e588;
            do if ((e588 = n588->obj) && h283 == n588->hash && CENSUS_mapkey0_idxfn::equals(se4819, *e588)) {
              long census_population = e588->CENSUS_POPULATION;
              long census_white = e588->CENSUS_WHITE;
              long census_asian = e588->CENSUS_ASIAN;
              long census_pacific = e588->CENSUS_PACIFIC;
              long census_blackafrican = e588->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e588->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e588->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e588->CENSUS_HOUSEUNITS;
              long census_families = e588->CENSUS_FAMILIES;
              long census_households = e588->CENSUS_HOUSEHOLDS;
              long census_husbwife = e588->CENSUS_HUSBWIFE;
              long census_males = e588->CENSUS_MALES;
              long census_females = e588->CENSUS_FEMALES;
              long census_householdschildren = e588->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e588->CENSUS_HISPANIC;
              long v588 = e588->__av;
              __SQL_SUM_AGGREGATE_519INVENTORY1.addOrDelOnZero(se4818.modify(__sql_sum_aggregate_519inventoryinventory_locn), (v587 * (v588 * (location_walmartdistance * census_pacific))));
            } while ((n588 = n588->nxt));
          }
          e587 = e587->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_520 = 0.0;
      __SQL_SUM_AGGREGATE_520INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e589 = LOCATION.head;
        while (e589) {
          long __sql_sum_aggregate_520inventoryinventory_locn = e589->LOCATION_LOCN;
          long location_zip = e589->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e589->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e589->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e589->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e589->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e589->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e589->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e589->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e589->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e589->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e589->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e589->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e589->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e589->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v589 = e589->__av;
          { //slice
            const HASH_RES_t h284 = CENSUS_mapkey0_idxfn::hash(se4822.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i590 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n590 = &(i590->buckets_[h284 % i590->size_]);
            CENSUS_entry* e590;
            do if ((e590 = n590->obj) && h284 == n590->hash && CENSUS_mapkey0_idxfn::equals(se4822, *e590)) {
              long census_population = e590->CENSUS_POPULATION;
              long census_white = e590->CENSUS_WHITE;
              long census_asian = e590->CENSUS_ASIAN;
              long census_pacific = e590->CENSUS_PACIFIC;
              long census_blackafrican = e590->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e590->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e590->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e590->CENSUS_HOUSEUNITS;
              long census_families = e590->CENSUS_FAMILIES;
              long census_households = e590->CENSUS_HOUSEHOLDS;
              long census_husbwife = e590->CENSUS_HUSBWIFE;
              long census_males = e590->CENSUS_MALES;
              long census_females = e590->CENSUS_FEMALES;
              long census_householdschildren = e590->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e590->CENSUS_HISPANIC;
              long v590 = e590->__av;
              __SQL_SUM_AGGREGATE_520INVENTORY1.addOrDelOnZero(se4821.modify(__sql_sum_aggregate_520inventoryinventory_locn), (v589 * (v590 * (location_walmartdistance * census_blackafrican))));
            } while ((n590 = n590->nxt));
          }
          e589 = e589->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_521 = 0.0;
      __SQL_SUM_AGGREGATE_521INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e591 = LOCATION.head;
        while (e591) {
          long __sql_sum_aggregate_521inventoryinventory_locn = e591->LOCATION_LOCN;
          long location_zip = e591->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e591->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e591->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e591->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e591->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e591->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e591->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e591->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e591->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e591->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e591->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e591->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e591->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e591->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v591 = e591->__av;
          { //slice
            const HASH_RES_t h285 = CENSUS_mapkey0_idxfn::hash(se4825.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i592 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n592 = &(i592->buckets_[h285 % i592->size_]);
            CENSUS_entry* e592;
            do if ((e592 = n592->obj) && h285 == n592->hash && CENSUS_mapkey0_idxfn::equals(se4825, *e592)) {
              long census_population = e592->CENSUS_POPULATION;
              long census_white = e592->CENSUS_WHITE;
              long census_asian = e592->CENSUS_ASIAN;
              long census_pacific = e592->CENSUS_PACIFIC;
              long census_blackafrican = e592->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e592->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e592->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e592->CENSUS_HOUSEUNITS;
              long census_families = e592->CENSUS_FAMILIES;
              long census_households = e592->CENSUS_HOUSEHOLDS;
              long census_husbwife = e592->CENSUS_HUSBWIFE;
              long census_males = e592->CENSUS_MALES;
              long census_females = e592->CENSUS_FEMALES;
              long census_householdschildren = e592->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e592->CENSUS_HISPANIC;
              long v592 = e592->__av;
              __SQL_SUM_AGGREGATE_521INVENTORY1.addOrDelOnZero(se4824.modify(__sql_sum_aggregate_521inventoryinventory_locn), (v591 * (v592 * (location_walmartdistance * census_medianage))));
            } while ((n592 = n592->nxt));
          }
          e591 = e591->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_522 = 0.0;
      __SQL_SUM_AGGREGATE_522INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e593 = LOCATION.head;
        while (e593) {
          long __sql_sum_aggregate_522inventoryinventory_locn = e593->LOCATION_LOCN;
          long location_zip = e593->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e593->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e593->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e593->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e593->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e593->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e593->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e593->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e593->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e593->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e593->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e593->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e593->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e593->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v593 = e593->__av;
          { //slice
            const HASH_RES_t h286 = CENSUS_mapkey0_idxfn::hash(se4828.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i594 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n594 = &(i594->buckets_[h286 % i594->size_]);
            CENSUS_entry* e594;
            do if ((e594 = n594->obj) && h286 == n594->hash && CENSUS_mapkey0_idxfn::equals(se4828, *e594)) {
              long census_population = e594->CENSUS_POPULATION;
              long census_white = e594->CENSUS_WHITE;
              long census_asian = e594->CENSUS_ASIAN;
              long census_pacific = e594->CENSUS_PACIFIC;
              long census_blackafrican = e594->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e594->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e594->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e594->CENSUS_HOUSEUNITS;
              long census_families = e594->CENSUS_FAMILIES;
              long census_households = e594->CENSUS_HOUSEHOLDS;
              long census_husbwife = e594->CENSUS_HUSBWIFE;
              long census_males = e594->CENSUS_MALES;
              long census_females = e594->CENSUS_FEMALES;
              long census_householdschildren = e594->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e594->CENSUS_HISPANIC;
              long v594 = e594->__av;
              __SQL_SUM_AGGREGATE_522INVENTORY1.addOrDelOnZero(se4827.modify(__sql_sum_aggregate_522inventoryinventory_locn), (v593 * (v594 * (location_walmartdistance * census_occupiedhouseunits))));
            } while ((n594 = n594->nxt));
          }
          e593 = e593->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_523 = 0.0;
      __SQL_SUM_AGGREGATE_523INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e595 = LOCATION.head;
        while (e595) {
          long __sql_sum_aggregate_523inventoryinventory_locn = e595->LOCATION_LOCN;
          long location_zip = e595->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e595->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e595->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e595->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e595->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e595->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e595->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e595->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e595->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e595->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e595->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e595->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e595->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e595->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v595 = e595->__av;
          { //slice
            const HASH_RES_t h287 = CENSUS_mapkey0_idxfn::hash(se4831.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i596 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n596 = &(i596->buckets_[h287 % i596->size_]);
            CENSUS_entry* e596;
            do if ((e596 = n596->obj) && h287 == n596->hash && CENSUS_mapkey0_idxfn::equals(se4831, *e596)) {
              long census_population = e596->CENSUS_POPULATION;
              long census_white = e596->CENSUS_WHITE;
              long census_asian = e596->CENSUS_ASIAN;
              long census_pacific = e596->CENSUS_PACIFIC;
              long census_blackafrican = e596->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e596->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e596->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e596->CENSUS_HOUSEUNITS;
              long census_families = e596->CENSUS_FAMILIES;
              long census_households = e596->CENSUS_HOUSEHOLDS;
              long census_husbwife = e596->CENSUS_HUSBWIFE;
              long census_males = e596->CENSUS_MALES;
              long census_females = e596->CENSUS_FEMALES;
              long census_householdschildren = e596->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e596->CENSUS_HISPANIC;
              long v596 = e596->__av;
              __SQL_SUM_AGGREGATE_523INVENTORY1.addOrDelOnZero(se4830.modify(__sql_sum_aggregate_523inventoryinventory_locn), (v595 * (v596 * (location_walmartdistance * census_houseunits))));
            } while ((n596 = n596->nxt));
          }
          e595 = e595->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_524 = 0.0;
      __SQL_SUM_AGGREGATE_524INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e597 = LOCATION.head;
        while (e597) {
          long __sql_sum_aggregate_524inventoryinventory_locn = e597->LOCATION_LOCN;
          long location_zip = e597->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e597->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e597->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e597->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e597->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e597->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e597->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e597->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e597->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e597->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e597->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e597->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e597->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e597->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v597 = e597->__av;
          { //slice
            const HASH_RES_t h288 = CENSUS_mapkey0_idxfn::hash(se4834.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i598 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n598 = &(i598->buckets_[h288 % i598->size_]);
            CENSUS_entry* e598;
            do if ((e598 = n598->obj) && h288 == n598->hash && CENSUS_mapkey0_idxfn::equals(se4834, *e598)) {
              long census_population = e598->CENSUS_POPULATION;
              long census_white = e598->CENSUS_WHITE;
              long census_asian = e598->CENSUS_ASIAN;
              long census_pacific = e598->CENSUS_PACIFIC;
              long census_blackafrican = e598->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e598->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e598->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e598->CENSUS_HOUSEUNITS;
              long census_families = e598->CENSUS_FAMILIES;
              long census_households = e598->CENSUS_HOUSEHOLDS;
              long census_husbwife = e598->CENSUS_HUSBWIFE;
              long census_males = e598->CENSUS_MALES;
              long census_females = e598->CENSUS_FEMALES;
              long census_householdschildren = e598->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e598->CENSUS_HISPANIC;
              long v598 = e598->__av;
              __SQL_SUM_AGGREGATE_524INVENTORY1.addOrDelOnZero(se4833.modify(__sql_sum_aggregate_524inventoryinventory_locn), (v597 * (v598 * (location_walmartdistance * census_families))));
            } while ((n598 = n598->nxt));
          }
          e597 = e597->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_525 = 0.0;
      __SQL_SUM_AGGREGATE_525INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e599 = LOCATION.head;
        while (e599) {
          long __sql_sum_aggregate_525inventoryinventory_locn = e599->LOCATION_LOCN;
          long location_zip = e599->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e599->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e599->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e599->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e599->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e599->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e599->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e599->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e599->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e599->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e599->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e599->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e599->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e599->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v599 = e599->__av;
          { //slice
            const HASH_RES_t h289 = CENSUS_mapkey0_idxfn::hash(se4837.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i600 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n600 = &(i600->buckets_[h289 % i600->size_]);
            CENSUS_entry* e600;
            do if ((e600 = n600->obj) && h289 == n600->hash && CENSUS_mapkey0_idxfn::equals(se4837, *e600)) {
              long census_population = e600->CENSUS_POPULATION;
              long census_white = e600->CENSUS_WHITE;
              long census_asian = e600->CENSUS_ASIAN;
              long census_pacific = e600->CENSUS_PACIFIC;
              long census_blackafrican = e600->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e600->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e600->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e600->CENSUS_HOUSEUNITS;
              long census_families = e600->CENSUS_FAMILIES;
              long census_households = e600->CENSUS_HOUSEHOLDS;
              long census_husbwife = e600->CENSUS_HUSBWIFE;
              long census_males = e600->CENSUS_MALES;
              long census_females = e600->CENSUS_FEMALES;
              long census_householdschildren = e600->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e600->CENSUS_HISPANIC;
              long v600 = e600->__av;
              __SQL_SUM_AGGREGATE_525INVENTORY1.addOrDelOnZero(se4836.modify(__sql_sum_aggregate_525inventoryinventory_locn), (v599 * (v600 * (location_walmartdistance * census_households))));
            } while ((n600 = n600->nxt));
          }
          e599 = e599->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_526 = 0.0;
      __SQL_SUM_AGGREGATE_526INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e601 = LOCATION.head;
        while (e601) {
          long __sql_sum_aggregate_526inventoryinventory_locn = e601->LOCATION_LOCN;
          long location_zip = e601->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e601->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e601->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e601->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e601->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e601->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e601->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e601->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e601->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e601->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e601->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e601->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e601->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e601->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v601 = e601->__av;
          { //slice
            const HASH_RES_t h290 = CENSUS_mapkey0_idxfn::hash(se4840.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i602 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n602 = &(i602->buckets_[h290 % i602->size_]);
            CENSUS_entry* e602;
            do if ((e602 = n602->obj) && h290 == n602->hash && CENSUS_mapkey0_idxfn::equals(se4840, *e602)) {
              long census_population = e602->CENSUS_POPULATION;
              long census_white = e602->CENSUS_WHITE;
              long census_asian = e602->CENSUS_ASIAN;
              long census_pacific = e602->CENSUS_PACIFIC;
              long census_blackafrican = e602->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e602->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e602->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e602->CENSUS_HOUSEUNITS;
              long census_families = e602->CENSUS_FAMILIES;
              long census_households = e602->CENSUS_HOUSEHOLDS;
              long census_husbwife = e602->CENSUS_HUSBWIFE;
              long census_males = e602->CENSUS_MALES;
              long census_females = e602->CENSUS_FEMALES;
              long census_householdschildren = e602->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e602->CENSUS_HISPANIC;
              long v602 = e602->__av;
              __SQL_SUM_AGGREGATE_526INVENTORY1.addOrDelOnZero(se4839.modify(__sql_sum_aggregate_526inventoryinventory_locn), (v601 * (v602 * (location_walmartdistance * census_husbwife))));
            } while ((n602 = n602->nxt));
          }
          e601 = e601->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_527 = 0.0;
      __SQL_SUM_AGGREGATE_527INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e603 = LOCATION.head;
        while (e603) {
          long __sql_sum_aggregate_527inventoryinventory_locn = e603->LOCATION_LOCN;
          long location_zip = e603->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e603->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e603->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e603->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e603->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e603->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e603->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e603->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e603->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e603->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e603->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e603->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e603->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e603->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v603 = e603->__av;
          { //slice
            const HASH_RES_t h291 = CENSUS_mapkey0_idxfn::hash(se4843.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i604 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n604 = &(i604->buckets_[h291 % i604->size_]);
            CENSUS_entry* e604;
            do if ((e604 = n604->obj) && h291 == n604->hash && CENSUS_mapkey0_idxfn::equals(se4843, *e604)) {
              long census_population = e604->CENSUS_POPULATION;
              long census_white = e604->CENSUS_WHITE;
              long census_asian = e604->CENSUS_ASIAN;
              long census_pacific = e604->CENSUS_PACIFIC;
              long census_blackafrican = e604->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e604->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e604->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e604->CENSUS_HOUSEUNITS;
              long census_families = e604->CENSUS_FAMILIES;
              long census_households = e604->CENSUS_HOUSEHOLDS;
              long census_husbwife = e604->CENSUS_HUSBWIFE;
              long census_males = e604->CENSUS_MALES;
              long census_females = e604->CENSUS_FEMALES;
              long census_householdschildren = e604->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e604->CENSUS_HISPANIC;
              long v604 = e604->__av;
              __SQL_SUM_AGGREGATE_527INVENTORY1.addOrDelOnZero(se4842.modify(__sql_sum_aggregate_527inventoryinventory_locn), (v603 * (v604 * (location_walmartdistance * census_males))));
            } while ((n604 = n604->nxt));
          }
          e603 = e603->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_528 = 0.0;
      __SQL_SUM_AGGREGATE_528INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e605 = LOCATION.head;
        while (e605) {
          long __sql_sum_aggregate_528inventoryinventory_locn = e605->LOCATION_LOCN;
          long location_zip = e605->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e605->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e605->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e605->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e605->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e605->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e605->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e605->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e605->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e605->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e605->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e605->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e605->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e605->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v605 = e605->__av;
          { //slice
            const HASH_RES_t h292 = CENSUS_mapkey0_idxfn::hash(se4846.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i606 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n606 = &(i606->buckets_[h292 % i606->size_]);
            CENSUS_entry* e606;
            do if ((e606 = n606->obj) && h292 == n606->hash && CENSUS_mapkey0_idxfn::equals(se4846, *e606)) {
              long census_population = e606->CENSUS_POPULATION;
              long census_white = e606->CENSUS_WHITE;
              long census_asian = e606->CENSUS_ASIAN;
              long census_pacific = e606->CENSUS_PACIFIC;
              long census_blackafrican = e606->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e606->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e606->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e606->CENSUS_HOUSEUNITS;
              long census_families = e606->CENSUS_FAMILIES;
              long census_households = e606->CENSUS_HOUSEHOLDS;
              long census_husbwife = e606->CENSUS_HUSBWIFE;
              long census_males = e606->CENSUS_MALES;
              long census_females = e606->CENSUS_FEMALES;
              long census_householdschildren = e606->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e606->CENSUS_HISPANIC;
              long v606 = e606->__av;
              __SQL_SUM_AGGREGATE_528INVENTORY1.addOrDelOnZero(se4845.modify(__sql_sum_aggregate_528inventoryinventory_locn), (v605 * (v606 * (location_walmartdistance * census_females))));
            } while ((n606 = n606->nxt));
          }
          e605 = e605->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_529 = 0.0;
      __SQL_SUM_AGGREGATE_529INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e607 = LOCATION.head;
        while (e607) {
          long __sql_sum_aggregate_529inventoryinventory_locn = e607->LOCATION_LOCN;
          long location_zip = e607->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e607->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e607->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e607->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e607->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e607->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e607->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e607->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e607->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e607->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e607->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e607->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e607->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e607->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v607 = e607->__av;
          { //slice
            const HASH_RES_t h293 = CENSUS_mapkey0_idxfn::hash(se4849.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i608 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n608 = &(i608->buckets_[h293 % i608->size_]);
            CENSUS_entry* e608;
            do if ((e608 = n608->obj) && h293 == n608->hash && CENSUS_mapkey0_idxfn::equals(se4849, *e608)) {
              long census_population = e608->CENSUS_POPULATION;
              long census_white = e608->CENSUS_WHITE;
              long census_asian = e608->CENSUS_ASIAN;
              long census_pacific = e608->CENSUS_PACIFIC;
              long census_blackafrican = e608->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e608->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e608->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e608->CENSUS_HOUSEUNITS;
              long census_families = e608->CENSUS_FAMILIES;
              long census_households = e608->CENSUS_HOUSEHOLDS;
              long census_husbwife = e608->CENSUS_HUSBWIFE;
              long census_males = e608->CENSUS_MALES;
              long census_females = e608->CENSUS_FEMALES;
              long census_householdschildren = e608->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e608->CENSUS_HISPANIC;
              long v608 = e608->__av;
              __SQL_SUM_AGGREGATE_529INVENTORY1.addOrDelOnZero(se4848.modify(__sql_sum_aggregate_529inventoryinventory_locn), (v607 * (v608 * (location_walmartdistance * census_householdschildren))));
            } while ((n608 = n608->nxt));
          }
          e607 = e607->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_530 = 0.0;
      __SQL_SUM_AGGREGATE_530INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e609 = LOCATION.head;
        while (e609) {
          long __sql_sum_aggregate_530inventoryinventory_locn = e609->LOCATION_LOCN;
          long location_zip = e609->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e609->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e609->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e609->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e609->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e609->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e609->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e609->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e609->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e609->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e609->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e609->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e609->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e609->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v609 = e609->__av;
          { //slice
            const HASH_RES_t h294 = CENSUS_mapkey0_idxfn::hash(se4852.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i610 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n610 = &(i610->buckets_[h294 % i610->size_]);
            CENSUS_entry* e610;
            do if ((e610 = n610->obj) && h294 == n610->hash && CENSUS_mapkey0_idxfn::equals(se4852, *e610)) {
              long census_population = e610->CENSUS_POPULATION;
              long census_white = e610->CENSUS_WHITE;
              long census_asian = e610->CENSUS_ASIAN;
              long census_pacific = e610->CENSUS_PACIFIC;
              long census_blackafrican = e610->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e610->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e610->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e610->CENSUS_HOUSEUNITS;
              long census_families = e610->CENSUS_FAMILIES;
              long census_households = e610->CENSUS_HOUSEHOLDS;
              long census_husbwife = e610->CENSUS_HUSBWIFE;
              long census_males = e610->CENSUS_MALES;
              long census_females = e610->CENSUS_FEMALES;
              long census_householdschildren = e610->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e610->CENSUS_HISPANIC;
              long v610 = e610->__av;
              __SQL_SUM_AGGREGATE_530INVENTORY1.addOrDelOnZero(se4851.modify(__sql_sum_aggregate_530inventoryinventory_locn), (v609 * (v610 * (location_walmartdistance * census_hispanic))));
            } while ((n610 = n610->nxt));
          }
          e609 = e609->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_531 = 0.0;
      __SQL_SUM_AGGREGATE_532 = 0.0;
      __SQL_SUM_AGGREGATE_533 = 0.0;
      __SQL_SUM_AGGREGATE_534 = 0.0;
      __SQL_SUM_AGGREGATE_535 = 0.0;
      __SQL_SUM_AGGREGATE_536 = 0.0;
      __SQL_SUM_AGGREGATE_537 = 0.0;
      __SQL_SUM_AGGREGATE_538 = 0.0;
      __SQL_SUM_AGGREGATE_539 = 0.0;
      __SQL_SUM_AGGREGATE_540 = 0.0;
      __SQL_SUM_AGGREGATE_541 = 0.0;
      __SQL_SUM_AGGREGATE_541INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e611 = LOCATION.head;
        while (e611) {
          long __sql_sum_aggregate_541inventoryinventory_locn = e611->LOCATION_LOCN;
          long location_zip = e611->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e611->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e611->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e611->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e611->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e611->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e611->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e611->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e611->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e611->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e611->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e611->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e611->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e611->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v611 = e611->__av;
          { //slice
            const HASH_RES_t h295 = CENSUS_mapkey0_idxfn::hash(se4865.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i612 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n612 = &(i612->buckets_[h295 % i612->size_]);
            CENSUS_entry* e612;
            do if ((e612 = n612->obj) && h295 == n612->hash && CENSUS_mapkey0_idxfn::equals(se4865, *e612)) {
              long census_population = e612->CENSUS_POPULATION;
              long census_white = e612->CENSUS_WHITE;
              long census_asian = e612->CENSUS_ASIAN;
              long census_pacific = e612->CENSUS_PACIFIC;
              long census_blackafrican = e612->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e612->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e612->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e612->CENSUS_HOUSEUNITS;
              long census_families = e612->CENSUS_FAMILIES;
              long census_households = e612->CENSUS_HOUSEHOLDS;
              long census_husbwife = e612->CENSUS_HUSBWIFE;
              long census_males = e612->CENSUS_MALES;
              long census_females = e612->CENSUS_FEMALES;
              long census_householdschildren = e612->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e612->CENSUS_HISPANIC;
              long v612 = e612->__av;
              __SQL_SUM_AGGREGATE_541INVENTORY1.addOrDelOnZero(se4864.modify(__sql_sum_aggregate_541inventoryinventory_locn), (v611 * (v612 * (location_walmartdrivetime * location_walmartdrivetime))));
            } while ((n612 = n612->nxt));
          }
          e611 = e611->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_542 = 0.0;
      __SQL_SUM_AGGREGATE_542INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e613 = LOCATION.head;
        while (e613) {
          long __sql_sum_aggregate_542inventoryinventory_locn = e613->LOCATION_LOCN;
          long location_zip = e613->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e613->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e613->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e613->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e613->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e613->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e613->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e613->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e613->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e613->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e613->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e613->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e613->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e613->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v613 = e613->__av;
          { //slice
            const HASH_RES_t h296 = CENSUS_mapkey0_idxfn::hash(se4868.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i614 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n614 = &(i614->buckets_[h296 % i614->size_]);
            CENSUS_entry* e614;
            do if ((e614 = n614->obj) && h296 == n614->hash && CENSUS_mapkey0_idxfn::equals(se4868, *e614)) {
              long census_population = e614->CENSUS_POPULATION;
              long census_white = e614->CENSUS_WHITE;
              long census_asian = e614->CENSUS_ASIAN;
              long census_pacific = e614->CENSUS_PACIFIC;
              long census_blackafrican = e614->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e614->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e614->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e614->CENSUS_HOUSEUNITS;
              long census_families = e614->CENSUS_FAMILIES;
              long census_households = e614->CENSUS_HOUSEHOLDS;
              long census_husbwife = e614->CENSUS_HUSBWIFE;
              long census_males = e614->CENSUS_MALES;
              long census_females = e614->CENSUS_FEMALES;
              long census_householdschildren = e614->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e614->CENSUS_HISPANIC;
              long v614 = e614->__av;
              __SQL_SUM_AGGREGATE_542INVENTORY1.addOrDelOnZero(se4867.modify(__sql_sum_aggregate_542inventoryinventory_locn), (v613 * (v614 * (location_walmartdrivetime * location_walmartsupercenterdistance))));
            } while ((n614 = n614->nxt));
          }
          e613 = e613->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_543 = 0.0;
      __SQL_SUM_AGGREGATE_543INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e615 = LOCATION.head;
        while (e615) {
          long __sql_sum_aggregate_543inventoryinventory_locn = e615->LOCATION_LOCN;
          long location_zip = e615->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e615->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e615->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e615->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e615->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e615->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e615->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e615->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e615->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e615->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e615->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e615->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e615->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e615->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v615 = e615->__av;
          { //slice
            const HASH_RES_t h297 = CENSUS_mapkey0_idxfn::hash(se4871.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i616 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n616 = &(i616->buckets_[h297 % i616->size_]);
            CENSUS_entry* e616;
            do if ((e616 = n616->obj) && h297 == n616->hash && CENSUS_mapkey0_idxfn::equals(se4871, *e616)) {
              long census_population = e616->CENSUS_POPULATION;
              long census_white = e616->CENSUS_WHITE;
              long census_asian = e616->CENSUS_ASIAN;
              long census_pacific = e616->CENSUS_PACIFIC;
              long census_blackafrican = e616->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e616->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e616->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e616->CENSUS_HOUSEUNITS;
              long census_families = e616->CENSUS_FAMILIES;
              long census_households = e616->CENSUS_HOUSEHOLDS;
              long census_husbwife = e616->CENSUS_HUSBWIFE;
              long census_males = e616->CENSUS_MALES;
              long census_females = e616->CENSUS_FEMALES;
              long census_householdschildren = e616->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e616->CENSUS_HISPANIC;
              long v616 = e616->__av;
              __SQL_SUM_AGGREGATE_543INVENTORY1.addOrDelOnZero(se4870.modify(__sql_sum_aggregate_543inventoryinventory_locn), (v615 * (v616 * (location_walmartdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n616 = n616->nxt));
          }
          e615 = e615->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_544 = 0.0;
      __SQL_SUM_AGGREGATE_544INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e617 = LOCATION.head;
        while (e617) {
          long __sql_sum_aggregate_544inventoryinventory_locn = e617->LOCATION_LOCN;
          long location_zip = e617->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e617->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e617->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e617->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e617->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e617->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e617->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e617->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e617->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e617->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e617->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e617->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e617->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e617->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v617 = e617->__av;
          { //slice
            const HASH_RES_t h298 = CENSUS_mapkey0_idxfn::hash(se4874.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i618 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n618 = &(i618->buckets_[h298 % i618->size_]);
            CENSUS_entry* e618;
            do if ((e618 = n618->obj) && h298 == n618->hash && CENSUS_mapkey0_idxfn::equals(se4874, *e618)) {
              long census_population = e618->CENSUS_POPULATION;
              long census_white = e618->CENSUS_WHITE;
              long census_asian = e618->CENSUS_ASIAN;
              long census_pacific = e618->CENSUS_PACIFIC;
              long census_blackafrican = e618->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e618->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e618->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e618->CENSUS_HOUSEUNITS;
              long census_families = e618->CENSUS_FAMILIES;
              long census_households = e618->CENSUS_HOUSEHOLDS;
              long census_husbwife = e618->CENSUS_HUSBWIFE;
              long census_males = e618->CENSUS_MALES;
              long census_females = e618->CENSUS_FEMALES;
              long census_householdschildren = e618->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e618->CENSUS_HISPANIC;
              long v618 = e618->__av;
              __SQL_SUM_AGGREGATE_544INVENTORY1.addOrDelOnZero(se4873.modify(__sql_sum_aggregate_544inventoryinventory_locn), (v617 * (v618 * (location_walmartdrivetime * census_population))));
            } while ((n618 = n618->nxt));
          }
          e617 = e617->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_545 = 0.0;
      __SQL_SUM_AGGREGATE_545INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e619 = LOCATION.head;
        while (e619) {
          long __sql_sum_aggregate_545inventoryinventory_locn = e619->LOCATION_LOCN;
          long location_zip = e619->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e619->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e619->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e619->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e619->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e619->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e619->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e619->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e619->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e619->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e619->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e619->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e619->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e619->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v619 = e619->__av;
          { //slice
            const HASH_RES_t h299 = CENSUS_mapkey0_idxfn::hash(se4877.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i620 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n620 = &(i620->buckets_[h299 % i620->size_]);
            CENSUS_entry* e620;
            do if ((e620 = n620->obj) && h299 == n620->hash && CENSUS_mapkey0_idxfn::equals(se4877, *e620)) {
              long census_population = e620->CENSUS_POPULATION;
              long census_white = e620->CENSUS_WHITE;
              long census_asian = e620->CENSUS_ASIAN;
              long census_pacific = e620->CENSUS_PACIFIC;
              long census_blackafrican = e620->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e620->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e620->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e620->CENSUS_HOUSEUNITS;
              long census_families = e620->CENSUS_FAMILIES;
              long census_households = e620->CENSUS_HOUSEHOLDS;
              long census_husbwife = e620->CENSUS_HUSBWIFE;
              long census_males = e620->CENSUS_MALES;
              long census_females = e620->CENSUS_FEMALES;
              long census_householdschildren = e620->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e620->CENSUS_HISPANIC;
              long v620 = e620->__av;
              __SQL_SUM_AGGREGATE_545INVENTORY1.addOrDelOnZero(se4876.modify(__sql_sum_aggregate_545inventoryinventory_locn), (v619 * (v620 * (location_walmartdrivetime * census_white))));
            } while ((n620 = n620->nxt));
          }
          e619 = e619->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_546 = 0.0;
      __SQL_SUM_AGGREGATE_546INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e621 = LOCATION.head;
        while (e621) {
          long __sql_sum_aggregate_546inventoryinventory_locn = e621->LOCATION_LOCN;
          long location_zip = e621->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e621->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e621->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e621->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e621->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e621->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e621->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e621->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e621->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e621->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e621->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e621->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e621->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e621->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v621 = e621->__av;
          { //slice
            const HASH_RES_t h300 = CENSUS_mapkey0_idxfn::hash(se4880.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i622 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n622 = &(i622->buckets_[h300 % i622->size_]);
            CENSUS_entry* e622;
            do if ((e622 = n622->obj) && h300 == n622->hash && CENSUS_mapkey0_idxfn::equals(se4880, *e622)) {
              long census_population = e622->CENSUS_POPULATION;
              long census_white = e622->CENSUS_WHITE;
              long census_asian = e622->CENSUS_ASIAN;
              long census_pacific = e622->CENSUS_PACIFIC;
              long census_blackafrican = e622->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e622->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e622->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e622->CENSUS_HOUSEUNITS;
              long census_families = e622->CENSUS_FAMILIES;
              long census_households = e622->CENSUS_HOUSEHOLDS;
              long census_husbwife = e622->CENSUS_HUSBWIFE;
              long census_males = e622->CENSUS_MALES;
              long census_females = e622->CENSUS_FEMALES;
              long census_householdschildren = e622->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e622->CENSUS_HISPANIC;
              long v622 = e622->__av;
              __SQL_SUM_AGGREGATE_546INVENTORY1.addOrDelOnZero(se4879.modify(__sql_sum_aggregate_546inventoryinventory_locn), (v621 * (v622 * (location_walmartdrivetime * census_asian))));
            } while ((n622 = n622->nxt));
          }
          e621 = e621->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_547 = 0.0;
      __SQL_SUM_AGGREGATE_547INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e623 = LOCATION.head;
        while (e623) {
          long __sql_sum_aggregate_547inventoryinventory_locn = e623->LOCATION_LOCN;
          long location_zip = e623->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e623->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e623->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e623->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e623->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e623->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e623->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e623->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e623->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e623->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e623->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e623->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e623->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e623->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v623 = e623->__av;
          { //slice
            const HASH_RES_t h301 = CENSUS_mapkey0_idxfn::hash(se4883.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i624 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n624 = &(i624->buckets_[h301 % i624->size_]);
            CENSUS_entry* e624;
            do if ((e624 = n624->obj) && h301 == n624->hash && CENSUS_mapkey0_idxfn::equals(se4883, *e624)) {
              long census_population = e624->CENSUS_POPULATION;
              long census_white = e624->CENSUS_WHITE;
              long census_asian = e624->CENSUS_ASIAN;
              long census_pacific = e624->CENSUS_PACIFIC;
              long census_blackafrican = e624->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e624->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e624->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e624->CENSUS_HOUSEUNITS;
              long census_families = e624->CENSUS_FAMILIES;
              long census_households = e624->CENSUS_HOUSEHOLDS;
              long census_husbwife = e624->CENSUS_HUSBWIFE;
              long census_males = e624->CENSUS_MALES;
              long census_females = e624->CENSUS_FEMALES;
              long census_householdschildren = e624->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e624->CENSUS_HISPANIC;
              long v624 = e624->__av;
              __SQL_SUM_AGGREGATE_547INVENTORY1.addOrDelOnZero(se4882.modify(__sql_sum_aggregate_547inventoryinventory_locn), (v623 * (v624 * (location_walmartdrivetime * census_pacific))));
            } while ((n624 = n624->nxt));
          }
          e623 = e623->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_548 = 0.0;
      __SQL_SUM_AGGREGATE_548INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e625 = LOCATION.head;
        while (e625) {
          long __sql_sum_aggregate_548inventoryinventory_locn = e625->LOCATION_LOCN;
          long location_zip = e625->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e625->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e625->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e625->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e625->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e625->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e625->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e625->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e625->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e625->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e625->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e625->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e625->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e625->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v625 = e625->__av;
          { //slice
            const HASH_RES_t h302 = CENSUS_mapkey0_idxfn::hash(se4886.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i626 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n626 = &(i626->buckets_[h302 % i626->size_]);
            CENSUS_entry* e626;
            do if ((e626 = n626->obj) && h302 == n626->hash && CENSUS_mapkey0_idxfn::equals(se4886, *e626)) {
              long census_population = e626->CENSUS_POPULATION;
              long census_white = e626->CENSUS_WHITE;
              long census_asian = e626->CENSUS_ASIAN;
              long census_pacific = e626->CENSUS_PACIFIC;
              long census_blackafrican = e626->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e626->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e626->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e626->CENSUS_HOUSEUNITS;
              long census_families = e626->CENSUS_FAMILIES;
              long census_households = e626->CENSUS_HOUSEHOLDS;
              long census_husbwife = e626->CENSUS_HUSBWIFE;
              long census_males = e626->CENSUS_MALES;
              long census_females = e626->CENSUS_FEMALES;
              long census_householdschildren = e626->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e626->CENSUS_HISPANIC;
              long v626 = e626->__av;
              __SQL_SUM_AGGREGATE_548INVENTORY1.addOrDelOnZero(se4885.modify(__sql_sum_aggregate_548inventoryinventory_locn), (v625 * (v626 * (location_walmartdrivetime * census_blackafrican))));
            } while ((n626 = n626->nxt));
          }
          e625 = e625->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_549 = 0.0;
      __SQL_SUM_AGGREGATE_549INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e627 = LOCATION.head;
        while (e627) {
          long __sql_sum_aggregate_549inventoryinventory_locn = e627->LOCATION_LOCN;
          long location_zip = e627->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e627->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e627->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e627->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e627->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e627->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e627->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e627->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e627->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e627->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e627->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e627->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e627->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e627->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v627 = e627->__av;
          { //slice
            const HASH_RES_t h303 = CENSUS_mapkey0_idxfn::hash(se4889.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i628 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n628 = &(i628->buckets_[h303 % i628->size_]);
            CENSUS_entry* e628;
            do if ((e628 = n628->obj) && h303 == n628->hash && CENSUS_mapkey0_idxfn::equals(se4889, *e628)) {
              long census_population = e628->CENSUS_POPULATION;
              long census_white = e628->CENSUS_WHITE;
              long census_asian = e628->CENSUS_ASIAN;
              long census_pacific = e628->CENSUS_PACIFIC;
              long census_blackafrican = e628->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e628->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e628->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e628->CENSUS_HOUSEUNITS;
              long census_families = e628->CENSUS_FAMILIES;
              long census_households = e628->CENSUS_HOUSEHOLDS;
              long census_husbwife = e628->CENSUS_HUSBWIFE;
              long census_males = e628->CENSUS_MALES;
              long census_females = e628->CENSUS_FEMALES;
              long census_householdschildren = e628->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e628->CENSUS_HISPANIC;
              long v628 = e628->__av;
              __SQL_SUM_AGGREGATE_549INVENTORY1.addOrDelOnZero(se4888.modify(__sql_sum_aggregate_549inventoryinventory_locn), (v627 * (v628 * (location_walmartdrivetime * census_medianage))));
            } while ((n628 = n628->nxt));
          }
          e627 = e627->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_550 = 0.0;
      __SQL_SUM_AGGREGATE_550INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e629 = LOCATION.head;
        while (e629) {
          long __sql_sum_aggregate_550inventoryinventory_locn = e629->LOCATION_LOCN;
          long location_zip = e629->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e629->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e629->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e629->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e629->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e629->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e629->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e629->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e629->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e629->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e629->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e629->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e629->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e629->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v629 = e629->__av;
          { //slice
            const HASH_RES_t h304 = CENSUS_mapkey0_idxfn::hash(se4892.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i630 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n630 = &(i630->buckets_[h304 % i630->size_]);
            CENSUS_entry* e630;
            do if ((e630 = n630->obj) && h304 == n630->hash && CENSUS_mapkey0_idxfn::equals(se4892, *e630)) {
              long census_population = e630->CENSUS_POPULATION;
              long census_white = e630->CENSUS_WHITE;
              long census_asian = e630->CENSUS_ASIAN;
              long census_pacific = e630->CENSUS_PACIFIC;
              long census_blackafrican = e630->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e630->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e630->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e630->CENSUS_HOUSEUNITS;
              long census_families = e630->CENSUS_FAMILIES;
              long census_households = e630->CENSUS_HOUSEHOLDS;
              long census_husbwife = e630->CENSUS_HUSBWIFE;
              long census_males = e630->CENSUS_MALES;
              long census_females = e630->CENSUS_FEMALES;
              long census_householdschildren = e630->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e630->CENSUS_HISPANIC;
              long v630 = e630->__av;
              __SQL_SUM_AGGREGATE_550INVENTORY1.addOrDelOnZero(se4891.modify(__sql_sum_aggregate_550inventoryinventory_locn), (v629 * (v630 * (location_walmartdrivetime * census_occupiedhouseunits))));
            } while ((n630 = n630->nxt));
          }
          e629 = e629->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_551 = 0.0;
      __SQL_SUM_AGGREGATE_551INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e631 = LOCATION.head;
        while (e631) {
          long __sql_sum_aggregate_551inventoryinventory_locn = e631->LOCATION_LOCN;
          long location_zip = e631->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e631->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e631->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e631->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e631->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e631->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e631->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e631->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e631->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e631->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e631->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e631->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e631->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e631->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v631 = e631->__av;
          { //slice
            const HASH_RES_t h305 = CENSUS_mapkey0_idxfn::hash(se4895.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i632 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n632 = &(i632->buckets_[h305 % i632->size_]);
            CENSUS_entry* e632;
            do if ((e632 = n632->obj) && h305 == n632->hash && CENSUS_mapkey0_idxfn::equals(se4895, *e632)) {
              long census_population = e632->CENSUS_POPULATION;
              long census_white = e632->CENSUS_WHITE;
              long census_asian = e632->CENSUS_ASIAN;
              long census_pacific = e632->CENSUS_PACIFIC;
              long census_blackafrican = e632->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e632->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e632->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e632->CENSUS_HOUSEUNITS;
              long census_families = e632->CENSUS_FAMILIES;
              long census_households = e632->CENSUS_HOUSEHOLDS;
              long census_husbwife = e632->CENSUS_HUSBWIFE;
              long census_males = e632->CENSUS_MALES;
              long census_females = e632->CENSUS_FEMALES;
              long census_householdschildren = e632->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e632->CENSUS_HISPANIC;
              long v632 = e632->__av;
              __SQL_SUM_AGGREGATE_551INVENTORY1.addOrDelOnZero(se4894.modify(__sql_sum_aggregate_551inventoryinventory_locn), (v631 * (v632 * (location_walmartdrivetime * census_houseunits))));
            } while ((n632 = n632->nxt));
          }
          e631 = e631->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_552 = 0.0;
      __SQL_SUM_AGGREGATE_552INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e633 = LOCATION.head;
        while (e633) {
          long __sql_sum_aggregate_552inventoryinventory_locn = e633->LOCATION_LOCN;
          long location_zip = e633->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e633->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e633->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e633->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e633->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e633->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e633->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e633->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e633->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e633->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e633->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e633->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e633->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e633->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v633 = e633->__av;
          { //slice
            const HASH_RES_t h306 = CENSUS_mapkey0_idxfn::hash(se4898.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i634 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n634 = &(i634->buckets_[h306 % i634->size_]);
            CENSUS_entry* e634;
            do if ((e634 = n634->obj) && h306 == n634->hash && CENSUS_mapkey0_idxfn::equals(se4898, *e634)) {
              long census_population = e634->CENSUS_POPULATION;
              long census_white = e634->CENSUS_WHITE;
              long census_asian = e634->CENSUS_ASIAN;
              long census_pacific = e634->CENSUS_PACIFIC;
              long census_blackafrican = e634->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e634->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e634->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e634->CENSUS_HOUSEUNITS;
              long census_families = e634->CENSUS_FAMILIES;
              long census_households = e634->CENSUS_HOUSEHOLDS;
              long census_husbwife = e634->CENSUS_HUSBWIFE;
              long census_males = e634->CENSUS_MALES;
              long census_females = e634->CENSUS_FEMALES;
              long census_householdschildren = e634->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e634->CENSUS_HISPANIC;
              long v634 = e634->__av;
              __SQL_SUM_AGGREGATE_552INVENTORY1.addOrDelOnZero(se4897.modify(__sql_sum_aggregate_552inventoryinventory_locn), (v633 * (v634 * (location_walmartdrivetime * census_families))));
            } while ((n634 = n634->nxt));
          }
          e633 = e633->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_553 = 0.0;
      __SQL_SUM_AGGREGATE_553INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e635 = LOCATION.head;
        while (e635) {
          long __sql_sum_aggregate_553inventoryinventory_locn = e635->LOCATION_LOCN;
          long location_zip = e635->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e635->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e635->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e635->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e635->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e635->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e635->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e635->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e635->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e635->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e635->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e635->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e635->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e635->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v635 = e635->__av;
          { //slice
            const HASH_RES_t h307 = CENSUS_mapkey0_idxfn::hash(se4901.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i636 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n636 = &(i636->buckets_[h307 % i636->size_]);
            CENSUS_entry* e636;
            do if ((e636 = n636->obj) && h307 == n636->hash && CENSUS_mapkey0_idxfn::equals(se4901, *e636)) {
              long census_population = e636->CENSUS_POPULATION;
              long census_white = e636->CENSUS_WHITE;
              long census_asian = e636->CENSUS_ASIAN;
              long census_pacific = e636->CENSUS_PACIFIC;
              long census_blackafrican = e636->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e636->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e636->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e636->CENSUS_HOUSEUNITS;
              long census_families = e636->CENSUS_FAMILIES;
              long census_households = e636->CENSUS_HOUSEHOLDS;
              long census_husbwife = e636->CENSUS_HUSBWIFE;
              long census_males = e636->CENSUS_MALES;
              long census_females = e636->CENSUS_FEMALES;
              long census_householdschildren = e636->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e636->CENSUS_HISPANIC;
              long v636 = e636->__av;
              __SQL_SUM_AGGREGATE_553INVENTORY1.addOrDelOnZero(se4900.modify(__sql_sum_aggregate_553inventoryinventory_locn), (v635 * (v636 * (location_walmartdrivetime * census_households))));
            } while ((n636 = n636->nxt));
          }
          e635 = e635->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_554 = 0.0;
      __SQL_SUM_AGGREGATE_554INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e637 = LOCATION.head;
        while (e637) {
          long __sql_sum_aggregate_554inventoryinventory_locn = e637->LOCATION_LOCN;
          long location_zip = e637->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e637->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e637->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e637->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e637->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e637->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e637->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e637->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e637->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e637->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e637->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e637->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e637->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e637->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v637 = e637->__av;
          { //slice
            const HASH_RES_t h308 = CENSUS_mapkey0_idxfn::hash(se4904.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i638 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n638 = &(i638->buckets_[h308 % i638->size_]);
            CENSUS_entry* e638;
            do if ((e638 = n638->obj) && h308 == n638->hash && CENSUS_mapkey0_idxfn::equals(se4904, *e638)) {
              long census_population = e638->CENSUS_POPULATION;
              long census_white = e638->CENSUS_WHITE;
              long census_asian = e638->CENSUS_ASIAN;
              long census_pacific = e638->CENSUS_PACIFIC;
              long census_blackafrican = e638->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e638->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e638->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e638->CENSUS_HOUSEUNITS;
              long census_families = e638->CENSUS_FAMILIES;
              long census_households = e638->CENSUS_HOUSEHOLDS;
              long census_husbwife = e638->CENSUS_HUSBWIFE;
              long census_males = e638->CENSUS_MALES;
              long census_females = e638->CENSUS_FEMALES;
              long census_householdschildren = e638->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e638->CENSUS_HISPANIC;
              long v638 = e638->__av;
              __SQL_SUM_AGGREGATE_554INVENTORY1.addOrDelOnZero(se4903.modify(__sql_sum_aggregate_554inventoryinventory_locn), (v637 * (v638 * (location_walmartdrivetime * census_husbwife))));
            } while ((n638 = n638->nxt));
          }
          e637 = e637->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_555 = 0.0;
      __SQL_SUM_AGGREGATE_555INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e639 = LOCATION.head;
        while (e639) {
          long __sql_sum_aggregate_555inventoryinventory_locn = e639->LOCATION_LOCN;
          long location_zip = e639->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e639->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e639->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e639->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e639->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e639->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e639->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e639->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e639->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e639->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e639->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e639->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e639->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e639->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v639 = e639->__av;
          { //slice
            const HASH_RES_t h309 = CENSUS_mapkey0_idxfn::hash(se4907.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i640 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n640 = &(i640->buckets_[h309 % i640->size_]);
            CENSUS_entry* e640;
            do if ((e640 = n640->obj) && h309 == n640->hash && CENSUS_mapkey0_idxfn::equals(se4907, *e640)) {
              long census_population = e640->CENSUS_POPULATION;
              long census_white = e640->CENSUS_WHITE;
              long census_asian = e640->CENSUS_ASIAN;
              long census_pacific = e640->CENSUS_PACIFIC;
              long census_blackafrican = e640->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e640->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e640->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e640->CENSUS_HOUSEUNITS;
              long census_families = e640->CENSUS_FAMILIES;
              long census_households = e640->CENSUS_HOUSEHOLDS;
              long census_husbwife = e640->CENSUS_HUSBWIFE;
              long census_males = e640->CENSUS_MALES;
              long census_females = e640->CENSUS_FEMALES;
              long census_householdschildren = e640->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e640->CENSUS_HISPANIC;
              long v640 = e640->__av;
              __SQL_SUM_AGGREGATE_555INVENTORY1.addOrDelOnZero(se4906.modify(__sql_sum_aggregate_555inventoryinventory_locn), (v639 * (v640 * (location_walmartdrivetime * census_males))));
            } while ((n640 = n640->nxt));
          }
          e639 = e639->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_556 = 0.0;
      __SQL_SUM_AGGREGATE_556INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e641 = LOCATION.head;
        while (e641) {
          long __sql_sum_aggregate_556inventoryinventory_locn = e641->LOCATION_LOCN;
          long location_zip = e641->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e641->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e641->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e641->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e641->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e641->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e641->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e641->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e641->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e641->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e641->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e641->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e641->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e641->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v641 = e641->__av;
          { //slice
            const HASH_RES_t h310 = CENSUS_mapkey0_idxfn::hash(se4910.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i642 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n642 = &(i642->buckets_[h310 % i642->size_]);
            CENSUS_entry* e642;
            do if ((e642 = n642->obj) && h310 == n642->hash && CENSUS_mapkey0_idxfn::equals(se4910, *e642)) {
              long census_population = e642->CENSUS_POPULATION;
              long census_white = e642->CENSUS_WHITE;
              long census_asian = e642->CENSUS_ASIAN;
              long census_pacific = e642->CENSUS_PACIFIC;
              long census_blackafrican = e642->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e642->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e642->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e642->CENSUS_HOUSEUNITS;
              long census_families = e642->CENSUS_FAMILIES;
              long census_households = e642->CENSUS_HOUSEHOLDS;
              long census_husbwife = e642->CENSUS_HUSBWIFE;
              long census_males = e642->CENSUS_MALES;
              long census_females = e642->CENSUS_FEMALES;
              long census_householdschildren = e642->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e642->CENSUS_HISPANIC;
              long v642 = e642->__av;
              __SQL_SUM_AGGREGATE_556INVENTORY1.addOrDelOnZero(se4909.modify(__sql_sum_aggregate_556inventoryinventory_locn), (v641 * (v642 * (location_walmartdrivetime * census_females))));
            } while ((n642 = n642->nxt));
          }
          e641 = e641->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_557 = 0.0;
      __SQL_SUM_AGGREGATE_557INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e643 = LOCATION.head;
        while (e643) {
          long __sql_sum_aggregate_557inventoryinventory_locn = e643->LOCATION_LOCN;
          long location_zip = e643->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e643->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e643->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e643->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e643->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e643->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e643->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e643->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e643->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e643->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e643->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e643->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e643->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e643->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v643 = e643->__av;
          { //slice
            const HASH_RES_t h311 = CENSUS_mapkey0_idxfn::hash(se4913.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i644 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n644 = &(i644->buckets_[h311 % i644->size_]);
            CENSUS_entry* e644;
            do if ((e644 = n644->obj) && h311 == n644->hash && CENSUS_mapkey0_idxfn::equals(se4913, *e644)) {
              long census_population = e644->CENSUS_POPULATION;
              long census_white = e644->CENSUS_WHITE;
              long census_asian = e644->CENSUS_ASIAN;
              long census_pacific = e644->CENSUS_PACIFIC;
              long census_blackafrican = e644->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e644->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e644->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e644->CENSUS_HOUSEUNITS;
              long census_families = e644->CENSUS_FAMILIES;
              long census_households = e644->CENSUS_HOUSEHOLDS;
              long census_husbwife = e644->CENSUS_HUSBWIFE;
              long census_males = e644->CENSUS_MALES;
              long census_females = e644->CENSUS_FEMALES;
              long census_householdschildren = e644->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e644->CENSUS_HISPANIC;
              long v644 = e644->__av;
              __SQL_SUM_AGGREGATE_557INVENTORY1.addOrDelOnZero(se4912.modify(__sql_sum_aggregate_557inventoryinventory_locn), (v643 * (v644 * (location_walmartdrivetime * census_householdschildren))));
            } while ((n644 = n644->nxt));
          }
          e643 = e643->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_558 = 0.0;
      __SQL_SUM_AGGREGATE_558INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e645 = LOCATION.head;
        while (e645) {
          long __sql_sum_aggregate_558inventoryinventory_locn = e645->LOCATION_LOCN;
          long location_zip = e645->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e645->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e645->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e645->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e645->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e645->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e645->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e645->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e645->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e645->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e645->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e645->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e645->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e645->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v645 = e645->__av;
          { //slice
            const HASH_RES_t h312 = CENSUS_mapkey0_idxfn::hash(se4916.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i646 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n646 = &(i646->buckets_[h312 % i646->size_]);
            CENSUS_entry* e646;
            do if ((e646 = n646->obj) && h312 == n646->hash && CENSUS_mapkey0_idxfn::equals(se4916, *e646)) {
              long census_population = e646->CENSUS_POPULATION;
              long census_white = e646->CENSUS_WHITE;
              long census_asian = e646->CENSUS_ASIAN;
              long census_pacific = e646->CENSUS_PACIFIC;
              long census_blackafrican = e646->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e646->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e646->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e646->CENSUS_HOUSEUNITS;
              long census_families = e646->CENSUS_FAMILIES;
              long census_households = e646->CENSUS_HOUSEHOLDS;
              long census_husbwife = e646->CENSUS_HUSBWIFE;
              long census_males = e646->CENSUS_MALES;
              long census_females = e646->CENSUS_FEMALES;
              long census_householdschildren = e646->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e646->CENSUS_HISPANIC;
              long v646 = e646->__av;
              __SQL_SUM_AGGREGATE_558INVENTORY1.addOrDelOnZero(se4915.modify(__sql_sum_aggregate_558inventoryinventory_locn), (v645 * (v646 * (location_walmartdrivetime * census_hispanic))));
            } while ((n646 = n646->nxt));
          }
          e645 = e645->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_559 = 0.0;
      __SQL_SUM_AGGREGATE_560 = 0.0;
      __SQL_SUM_AGGREGATE_561 = 0.0;
      __SQL_SUM_AGGREGATE_562 = 0.0;
      __SQL_SUM_AGGREGATE_563 = 0.0;
      __SQL_SUM_AGGREGATE_564 = 0.0;
      __SQL_SUM_AGGREGATE_565 = 0.0;
      __SQL_SUM_AGGREGATE_566 = 0.0;
      __SQL_SUM_AGGREGATE_567 = 0.0;
      __SQL_SUM_AGGREGATE_568 = 0.0;
      __SQL_SUM_AGGREGATE_569 = 0.0;
      __SQL_SUM_AGGREGATE_569INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e647 = LOCATION.head;
        while (e647) {
          long __sql_sum_aggregate_569inventoryinventory_locn = e647->LOCATION_LOCN;
          long location_zip = e647->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e647->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e647->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e647->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e647->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e647->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e647->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e647->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e647->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e647->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e647->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e647->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e647->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e647->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v647 = e647->__av;
          { //slice
            const HASH_RES_t h313 = CENSUS_mapkey0_idxfn::hash(se4929.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i648 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n648 = &(i648->buckets_[h313 % i648->size_]);
            CENSUS_entry* e648;
            do if ((e648 = n648->obj) && h313 == n648->hash && CENSUS_mapkey0_idxfn::equals(se4929, *e648)) {
              long census_population = e648->CENSUS_POPULATION;
              long census_white = e648->CENSUS_WHITE;
              long census_asian = e648->CENSUS_ASIAN;
              long census_pacific = e648->CENSUS_PACIFIC;
              long census_blackafrican = e648->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e648->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e648->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e648->CENSUS_HOUSEUNITS;
              long census_families = e648->CENSUS_FAMILIES;
              long census_households = e648->CENSUS_HOUSEHOLDS;
              long census_husbwife = e648->CENSUS_HUSBWIFE;
              long census_males = e648->CENSUS_MALES;
              long census_females = e648->CENSUS_FEMALES;
              long census_householdschildren = e648->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e648->CENSUS_HISPANIC;
              long v648 = e648->__av;
              __SQL_SUM_AGGREGATE_569INVENTORY1.addOrDelOnZero(se4928.modify(__sql_sum_aggregate_569inventoryinventory_locn), (v647 * (v648 * (location_walmartsupercenterdistance * location_walmartsupercenterdistance))));
            } while ((n648 = n648->nxt));
          }
          e647 = e647->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_570 = 0.0;
      __SQL_SUM_AGGREGATE_570INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e649 = LOCATION.head;
        while (e649) {
          long __sql_sum_aggregate_570inventoryinventory_locn = e649->LOCATION_LOCN;
          long location_zip = e649->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e649->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e649->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e649->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e649->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e649->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e649->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e649->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e649->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e649->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e649->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e649->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e649->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e649->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v649 = e649->__av;
          { //slice
            const HASH_RES_t h314 = CENSUS_mapkey0_idxfn::hash(se4932.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i650 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n650 = &(i650->buckets_[h314 % i650->size_]);
            CENSUS_entry* e650;
            do if ((e650 = n650->obj) && h314 == n650->hash && CENSUS_mapkey0_idxfn::equals(se4932, *e650)) {
              long census_population = e650->CENSUS_POPULATION;
              long census_white = e650->CENSUS_WHITE;
              long census_asian = e650->CENSUS_ASIAN;
              long census_pacific = e650->CENSUS_PACIFIC;
              long census_blackafrican = e650->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e650->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e650->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e650->CENSUS_HOUSEUNITS;
              long census_families = e650->CENSUS_FAMILIES;
              long census_households = e650->CENSUS_HOUSEHOLDS;
              long census_husbwife = e650->CENSUS_HUSBWIFE;
              long census_males = e650->CENSUS_MALES;
              long census_females = e650->CENSUS_FEMALES;
              long census_householdschildren = e650->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e650->CENSUS_HISPANIC;
              long v650 = e650->__av;
              __SQL_SUM_AGGREGATE_570INVENTORY1.addOrDelOnZero(se4931.modify(__sql_sum_aggregate_570inventoryinventory_locn), (v649 * (v650 * (location_walmartsupercenterdistance * location_walmartsupercenterdrivetime))));
            } while ((n650 = n650->nxt));
          }
          e649 = e649->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_571 = 0.0;
      __SQL_SUM_AGGREGATE_571INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e651 = LOCATION.head;
        while (e651) {
          long __sql_sum_aggregate_571inventoryinventory_locn = e651->LOCATION_LOCN;
          long location_zip = e651->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e651->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e651->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e651->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e651->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e651->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e651->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e651->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e651->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e651->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e651->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e651->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e651->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e651->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v651 = e651->__av;
          { //slice
            const HASH_RES_t h315 = CENSUS_mapkey0_idxfn::hash(se4935.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i652 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n652 = &(i652->buckets_[h315 % i652->size_]);
            CENSUS_entry* e652;
            do if ((e652 = n652->obj) && h315 == n652->hash && CENSUS_mapkey0_idxfn::equals(se4935, *e652)) {
              long census_population = e652->CENSUS_POPULATION;
              long census_white = e652->CENSUS_WHITE;
              long census_asian = e652->CENSUS_ASIAN;
              long census_pacific = e652->CENSUS_PACIFIC;
              long census_blackafrican = e652->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e652->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e652->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e652->CENSUS_HOUSEUNITS;
              long census_families = e652->CENSUS_FAMILIES;
              long census_households = e652->CENSUS_HOUSEHOLDS;
              long census_husbwife = e652->CENSUS_HUSBWIFE;
              long census_males = e652->CENSUS_MALES;
              long census_females = e652->CENSUS_FEMALES;
              long census_householdschildren = e652->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e652->CENSUS_HISPANIC;
              long v652 = e652->__av;
              __SQL_SUM_AGGREGATE_571INVENTORY1.addOrDelOnZero(se4934.modify(__sql_sum_aggregate_571inventoryinventory_locn), (v651 * (v652 * (location_walmartsupercenterdistance * census_population))));
            } while ((n652 = n652->nxt));
          }
          e651 = e651->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_572 = 0.0;
      __SQL_SUM_AGGREGATE_572INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e653 = LOCATION.head;
        while (e653) {
          long __sql_sum_aggregate_572inventoryinventory_locn = e653->LOCATION_LOCN;
          long location_zip = e653->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e653->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e653->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e653->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e653->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e653->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e653->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e653->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e653->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e653->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e653->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e653->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e653->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e653->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v653 = e653->__av;
          { //slice
            const HASH_RES_t h316 = CENSUS_mapkey0_idxfn::hash(se4938.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i654 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n654 = &(i654->buckets_[h316 % i654->size_]);
            CENSUS_entry* e654;
            do if ((e654 = n654->obj) && h316 == n654->hash && CENSUS_mapkey0_idxfn::equals(se4938, *e654)) {
              long census_population = e654->CENSUS_POPULATION;
              long census_white = e654->CENSUS_WHITE;
              long census_asian = e654->CENSUS_ASIAN;
              long census_pacific = e654->CENSUS_PACIFIC;
              long census_blackafrican = e654->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e654->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e654->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e654->CENSUS_HOUSEUNITS;
              long census_families = e654->CENSUS_FAMILIES;
              long census_households = e654->CENSUS_HOUSEHOLDS;
              long census_husbwife = e654->CENSUS_HUSBWIFE;
              long census_males = e654->CENSUS_MALES;
              long census_females = e654->CENSUS_FEMALES;
              long census_householdschildren = e654->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e654->CENSUS_HISPANIC;
              long v654 = e654->__av;
              __SQL_SUM_AGGREGATE_572INVENTORY1.addOrDelOnZero(se4937.modify(__sql_sum_aggregate_572inventoryinventory_locn), (v653 * (v654 * (location_walmartsupercenterdistance * census_white))));
            } while ((n654 = n654->nxt));
          }
          e653 = e653->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_573 = 0.0;
      __SQL_SUM_AGGREGATE_573INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e655 = LOCATION.head;
        while (e655) {
          long __sql_sum_aggregate_573inventoryinventory_locn = e655->LOCATION_LOCN;
          long location_zip = e655->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e655->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e655->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e655->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e655->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e655->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e655->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e655->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e655->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e655->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e655->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e655->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e655->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e655->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v655 = e655->__av;
          { //slice
            const HASH_RES_t h317 = CENSUS_mapkey0_idxfn::hash(se4941.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i656 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n656 = &(i656->buckets_[h317 % i656->size_]);
            CENSUS_entry* e656;
            do if ((e656 = n656->obj) && h317 == n656->hash && CENSUS_mapkey0_idxfn::equals(se4941, *e656)) {
              long census_population = e656->CENSUS_POPULATION;
              long census_white = e656->CENSUS_WHITE;
              long census_asian = e656->CENSUS_ASIAN;
              long census_pacific = e656->CENSUS_PACIFIC;
              long census_blackafrican = e656->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e656->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e656->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e656->CENSUS_HOUSEUNITS;
              long census_families = e656->CENSUS_FAMILIES;
              long census_households = e656->CENSUS_HOUSEHOLDS;
              long census_husbwife = e656->CENSUS_HUSBWIFE;
              long census_males = e656->CENSUS_MALES;
              long census_females = e656->CENSUS_FEMALES;
              long census_householdschildren = e656->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e656->CENSUS_HISPANIC;
              long v656 = e656->__av;
              __SQL_SUM_AGGREGATE_573INVENTORY1.addOrDelOnZero(se4940.modify(__sql_sum_aggregate_573inventoryinventory_locn), (v655 * (v656 * (location_walmartsupercenterdistance * census_asian))));
            } while ((n656 = n656->nxt));
          }
          e655 = e655->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_574 = 0.0;
      __SQL_SUM_AGGREGATE_574INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e657 = LOCATION.head;
        while (e657) {
          long __sql_sum_aggregate_574inventoryinventory_locn = e657->LOCATION_LOCN;
          long location_zip = e657->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e657->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e657->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e657->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e657->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e657->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e657->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e657->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e657->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e657->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e657->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e657->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e657->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e657->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v657 = e657->__av;
          { //slice
            const HASH_RES_t h318 = CENSUS_mapkey0_idxfn::hash(se4944.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i658 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n658 = &(i658->buckets_[h318 % i658->size_]);
            CENSUS_entry* e658;
            do if ((e658 = n658->obj) && h318 == n658->hash && CENSUS_mapkey0_idxfn::equals(se4944, *e658)) {
              long census_population = e658->CENSUS_POPULATION;
              long census_white = e658->CENSUS_WHITE;
              long census_asian = e658->CENSUS_ASIAN;
              long census_pacific = e658->CENSUS_PACIFIC;
              long census_blackafrican = e658->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e658->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e658->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e658->CENSUS_HOUSEUNITS;
              long census_families = e658->CENSUS_FAMILIES;
              long census_households = e658->CENSUS_HOUSEHOLDS;
              long census_husbwife = e658->CENSUS_HUSBWIFE;
              long census_males = e658->CENSUS_MALES;
              long census_females = e658->CENSUS_FEMALES;
              long census_householdschildren = e658->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e658->CENSUS_HISPANIC;
              long v658 = e658->__av;
              __SQL_SUM_AGGREGATE_574INVENTORY1.addOrDelOnZero(se4943.modify(__sql_sum_aggregate_574inventoryinventory_locn), (v657 * (v658 * (location_walmartsupercenterdistance * census_pacific))));
            } while ((n658 = n658->nxt));
          }
          e657 = e657->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_575 = 0.0;
      __SQL_SUM_AGGREGATE_575INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e659 = LOCATION.head;
        while (e659) {
          long __sql_sum_aggregate_575inventoryinventory_locn = e659->LOCATION_LOCN;
          long location_zip = e659->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e659->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e659->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e659->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e659->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e659->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e659->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e659->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e659->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e659->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e659->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e659->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e659->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e659->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v659 = e659->__av;
          { //slice
            const HASH_RES_t h319 = CENSUS_mapkey0_idxfn::hash(se4947.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i660 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n660 = &(i660->buckets_[h319 % i660->size_]);
            CENSUS_entry* e660;
            do if ((e660 = n660->obj) && h319 == n660->hash && CENSUS_mapkey0_idxfn::equals(se4947, *e660)) {
              long census_population = e660->CENSUS_POPULATION;
              long census_white = e660->CENSUS_WHITE;
              long census_asian = e660->CENSUS_ASIAN;
              long census_pacific = e660->CENSUS_PACIFIC;
              long census_blackafrican = e660->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e660->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e660->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e660->CENSUS_HOUSEUNITS;
              long census_families = e660->CENSUS_FAMILIES;
              long census_households = e660->CENSUS_HOUSEHOLDS;
              long census_husbwife = e660->CENSUS_HUSBWIFE;
              long census_males = e660->CENSUS_MALES;
              long census_females = e660->CENSUS_FEMALES;
              long census_householdschildren = e660->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e660->CENSUS_HISPANIC;
              long v660 = e660->__av;
              __SQL_SUM_AGGREGATE_575INVENTORY1.addOrDelOnZero(se4946.modify(__sql_sum_aggregate_575inventoryinventory_locn), (v659 * (v660 * (location_walmartsupercenterdistance * census_blackafrican))));
            } while ((n660 = n660->nxt));
          }
          e659 = e659->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_576 = 0.0;
      __SQL_SUM_AGGREGATE_576INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e661 = LOCATION.head;
        while (e661) {
          long __sql_sum_aggregate_576inventoryinventory_locn = e661->LOCATION_LOCN;
          long location_zip = e661->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e661->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e661->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e661->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e661->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e661->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e661->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e661->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e661->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e661->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e661->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e661->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e661->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e661->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v661 = e661->__av;
          { //slice
            const HASH_RES_t h320 = CENSUS_mapkey0_idxfn::hash(se4950.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i662 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n662 = &(i662->buckets_[h320 % i662->size_]);
            CENSUS_entry* e662;
            do if ((e662 = n662->obj) && h320 == n662->hash && CENSUS_mapkey0_idxfn::equals(se4950, *e662)) {
              long census_population = e662->CENSUS_POPULATION;
              long census_white = e662->CENSUS_WHITE;
              long census_asian = e662->CENSUS_ASIAN;
              long census_pacific = e662->CENSUS_PACIFIC;
              long census_blackafrican = e662->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e662->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e662->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e662->CENSUS_HOUSEUNITS;
              long census_families = e662->CENSUS_FAMILIES;
              long census_households = e662->CENSUS_HOUSEHOLDS;
              long census_husbwife = e662->CENSUS_HUSBWIFE;
              long census_males = e662->CENSUS_MALES;
              long census_females = e662->CENSUS_FEMALES;
              long census_householdschildren = e662->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e662->CENSUS_HISPANIC;
              long v662 = e662->__av;
              __SQL_SUM_AGGREGATE_576INVENTORY1.addOrDelOnZero(se4949.modify(__sql_sum_aggregate_576inventoryinventory_locn), (v661 * (v662 * (location_walmartsupercenterdistance * census_medianage))));
            } while ((n662 = n662->nxt));
          }
          e661 = e661->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_577 = 0.0;
      __SQL_SUM_AGGREGATE_577INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e663 = LOCATION.head;
        while (e663) {
          long __sql_sum_aggregate_577inventoryinventory_locn = e663->LOCATION_LOCN;
          long location_zip = e663->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e663->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e663->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e663->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e663->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e663->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e663->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e663->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e663->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e663->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e663->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e663->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e663->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e663->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v663 = e663->__av;
          { //slice
            const HASH_RES_t h321 = CENSUS_mapkey0_idxfn::hash(se4953.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i664 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n664 = &(i664->buckets_[h321 % i664->size_]);
            CENSUS_entry* e664;
            do if ((e664 = n664->obj) && h321 == n664->hash && CENSUS_mapkey0_idxfn::equals(se4953, *e664)) {
              long census_population = e664->CENSUS_POPULATION;
              long census_white = e664->CENSUS_WHITE;
              long census_asian = e664->CENSUS_ASIAN;
              long census_pacific = e664->CENSUS_PACIFIC;
              long census_blackafrican = e664->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e664->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e664->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e664->CENSUS_HOUSEUNITS;
              long census_families = e664->CENSUS_FAMILIES;
              long census_households = e664->CENSUS_HOUSEHOLDS;
              long census_husbwife = e664->CENSUS_HUSBWIFE;
              long census_males = e664->CENSUS_MALES;
              long census_females = e664->CENSUS_FEMALES;
              long census_householdschildren = e664->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e664->CENSUS_HISPANIC;
              long v664 = e664->__av;
              __SQL_SUM_AGGREGATE_577INVENTORY1.addOrDelOnZero(se4952.modify(__sql_sum_aggregate_577inventoryinventory_locn), (v663 * (v664 * (location_walmartsupercenterdistance * census_occupiedhouseunits))));
            } while ((n664 = n664->nxt));
          }
          e663 = e663->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_578 = 0.0;
      __SQL_SUM_AGGREGATE_578INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e665 = LOCATION.head;
        while (e665) {
          long __sql_sum_aggregate_578inventoryinventory_locn = e665->LOCATION_LOCN;
          long location_zip = e665->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e665->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e665->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e665->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e665->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e665->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e665->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e665->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e665->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e665->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e665->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e665->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e665->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e665->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v665 = e665->__av;
          { //slice
            const HASH_RES_t h322 = CENSUS_mapkey0_idxfn::hash(se4956.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i666 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n666 = &(i666->buckets_[h322 % i666->size_]);
            CENSUS_entry* e666;
            do if ((e666 = n666->obj) && h322 == n666->hash && CENSUS_mapkey0_idxfn::equals(se4956, *e666)) {
              long census_population = e666->CENSUS_POPULATION;
              long census_white = e666->CENSUS_WHITE;
              long census_asian = e666->CENSUS_ASIAN;
              long census_pacific = e666->CENSUS_PACIFIC;
              long census_blackafrican = e666->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e666->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e666->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e666->CENSUS_HOUSEUNITS;
              long census_families = e666->CENSUS_FAMILIES;
              long census_households = e666->CENSUS_HOUSEHOLDS;
              long census_husbwife = e666->CENSUS_HUSBWIFE;
              long census_males = e666->CENSUS_MALES;
              long census_females = e666->CENSUS_FEMALES;
              long census_householdschildren = e666->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e666->CENSUS_HISPANIC;
              long v666 = e666->__av;
              __SQL_SUM_AGGREGATE_578INVENTORY1.addOrDelOnZero(se4955.modify(__sql_sum_aggregate_578inventoryinventory_locn), (v665 * (v666 * (location_walmartsupercenterdistance * census_houseunits))));
            } while ((n666 = n666->nxt));
          }
          e665 = e665->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_579 = 0.0;
      __SQL_SUM_AGGREGATE_579INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e667 = LOCATION.head;
        while (e667) {
          long __sql_sum_aggregate_579inventoryinventory_locn = e667->LOCATION_LOCN;
          long location_zip = e667->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e667->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e667->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e667->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e667->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e667->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e667->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e667->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e667->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e667->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e667->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e667->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e667->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e667->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v667 = e667->__av;
          { //slice
            const HASH_RES_t h323 = CENSUS_mapkey0_idxfn::hash(se4959.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i668 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n668 = &(i668->buckets_[h323 % i668->size_]);
            CENSUS_entry* e668;
            do if ((e668 = n668->obj) && h323 == n668->hash && CENSUS_mapkey0_idxfn::equals(se4959, *e668)) {
              long census_population = e668->CENSUS_POPULATION;
              long census_white = e668->CENSUS_WHITE;
              long census_asian = e668->CENSUS_ASIAN;
              long census_pacific = e668->CENSUS_PACIFIC;
              long census_blackafrican = e668->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e668->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e668->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e668->CENSUS_HOUSEUNITS;
              long census_families = e668->CENSUS_FAMILIES;
              long census_households = e668->CENSUS_HOUSEHOLDS;
              long census_husbwife = e668->CENSUS_HUSBWIFE;
              long census_males = e668->CENSUS_MALES;
              long census_females = e668->CENSUS_FEMALES;
              long census_householdschildren = e668->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e668->CENSUS_HISPANIC;
              long v668 = e668->__av;
              __SQL_SUM_AGGREGATE_579INVENTORY1.addOrDelOnZero(se4958.modify(__sql_sum_aggregate_579inventoryinventory_locn), (v667 * (v668 * (location_walmartsupercenterdistance * census_families))));
            } while ((n668 = n668->nxt));
          }
          e667 = e667->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_580 = 0.0;
      __SQL_SUM_AGGREGATE_580INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e669 = LOCATION.head;
        while (e669) {
          long __sql_sum_aggregate_580inventoryinventory_locn = e669->LOCATION_LOCN;
          long location_zip = e669->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e669->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e669->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e669->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e669->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e669->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e669->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e669->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e669->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e669->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e669->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e669->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e669->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e669->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v669 = e669->__av;
          { //slice
            const HASH_RES_t h324 = CENSUS_mapkey0_idxfn::hash(se4962.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i670 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n670 = &(i670->buckets_[h324 % i670->size_]);
            CENSUS_entry* e670;
            do if ((e670 = n670->obj) && h324 == n670->hash && CENSUS_mapkey0_idxfn::equals(se4962, *e670)) {
              long census_population = e670->CENSUS_POPULATION;
              long census_white = e670->CENSUS_WHITE;
              long census_asian = e670->CENSUS_ASIAN;
              long census_pacific = e670->CENSUS_PACIFIC;
              long census_blackafrican = e670->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e670->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e670->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e670->CENSUS_HOUSEUNITS;
              long census_families = e670->CENSUS_FAMILIES;
              long census_households = e670->CENSUS_HOUSEHOLDS;
              long census_husbwife = e670->CENSUS_HUSBWIFE;
              long census_males = e670->CENSUS_MALES;
              long census_females = e670->CENSUS_FEMALES;
              long census_householdschildren = e670->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e670->CENSUS_HISPANIC;
              long v670 = e670->__av;
              __SQL_SUM_AGGREGATE_580INVENTORY1.addOrDelOnZero(se4961.modify(__sql_sum_aggregate_580inventoryinventory_locn), (v669 * (v670 * (location_walmartsupercenterdistance * census_households))));
            } while ((n670 = n670->nxt));
          }
          e669 = e669->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_581 = 0.0;
      __SQL_SUM_AGGREGATE_581INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e671 = LOCATION.head;
        while (e671) {
          long __sql_sum_aggregate_581inventoryinventory_locn = e671->LOCATION_LOCN;
          long location_zip = e671->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e671->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e671->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e671->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e671->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e671->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e671->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e671->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e671->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e671->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e671->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e671->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e671->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e671->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v671 = e671->__av;
          { //slice
            const HASH_RES_t h325 = CENSUS_mapkey0_idxfn::hash(se4965.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i672 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n672 = &(i672->buckets_[h325 % i672->size_]);
            CENSUS_entry* e672;
            do if ((e672 = n672->obj) && h325 == n672->hash && CENSUS_mapkey0_idxfn::equals(se4965, *e672)) {
              long census_population = e672->CENSUS_POPULATION;
              long census_white = e672->CENSUS_WHITE;
              long census_asian = e672->CENSUS_ASIAN;
              long census_pacific = e672->CENSUS_PACIFIC;
              long census_blackafrican = e672->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e672->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e672->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e672->CENSUS_HOUSEUNITS;
              long census_families = e672->CENSUS_FAMILIES;
              long census_households = e672->CENSUS_HOUSEHOLDS;
              long census_husbwife = e672->CENSUS_HUSBWIFE;
              long census_males = e672->CENSUS_MALES;
              long census_females = e672->CENSUS_FEMALES;
              long census_householdschildren = e672->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e672->CENSUS_HISPANIC;
              long v672 = e672->__av;
              __SQL_SUM_AGGREGATE_581INVENTORY1.addOrDelOnZero(se4964.modify(__sql_sum_aggregate_581inventoryinventory_locn), (v671 * (v672 * (location_walmartsupercenterdistance * census_husbwife))));
            } while ((n672 = n672->nxt));
          }
          e671 = e671->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_582 = 0.0;
      __SQL_SUM_AGGREGATE_582INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e673 = LOCATION.head;
        while (e673) {
          long __sql_sum_aggregate_582inventoryinventory_locn = e673->LOCATION_LOCN;
          long location_zip = e673->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e673->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e673->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e673->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e673->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e673->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e673->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e673->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e673->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e673->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e673->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e673->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e673->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e673->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v673 = e673->__av;
          { //slice
            const HASH_RES_t h326 = CENSUS_mapkey0_idxfn::hash(se4968.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i674 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n674 = &(i674->buckets_[h326 % i674->size_]);
            CENSUS_entry* e674;
            do if ((e674 = n674->obj) && h326 == n674->hash && CENSUS_mapkey0_idxfn::equals(se4968, *e674)) {
              long census_population = e674->CENSUS_POPULATION;
              long census_white = e674->CENSUS_WHITE;
              long census_asian = e674->CENSUS_ASIAN;
              long census_pacific = e674->CENSUS_PACIFIC;
              long census_blackafrican = e674->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e674->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e674->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e674->CENSUS_HOUSEUNITS;
              long census_families = e674->CENSUS_FAMILIES;
              long census_households = e674->CENSUS_HOUSEHOLDS;
              long census_husbwife = e674->CENSUS_HUSBWIFE;
              long census_males = e674->CENSUS_MALES;
              long census_females = e674->CENSUS_FEMALES;
              long census_householdschildren = e674->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e674->CENSUS_HISPANIC;
              long v674 = e674->__av;
              __SQL_SUM_AGGREGATE_582INVENTORY1.addOrDelOnZero(se4967.modify(__sql_sum_aggregate_582inventoryinventory_locn), (v673 * (v674 * (location_walmartsupercenterdistance * census_males))));
            } while ((n674 = n674->nxt));
          }
          e673 = e673->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_583 = 0.0;
      __SQL_SUM_AGGREGATE_583INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e675 = LOCATION.head;
        while (e675) {
          long __sql_sum_aggregate_583inventoryinventory_locn = e675->LOCATION_LOCN;
          long location_zip = e675->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e675->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e675->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e675->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e675->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e675->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e675->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e675->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e675->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e675->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e675->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e675->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e675->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e675->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v675 = e675->__av;
          { //slice
            const HASH_RES_t h327 = CENSUS_mapkey0_idxfn::hash(se4971.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i676 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n676 = &(i676->buckets_[h327 % i676->size_]);
            CENSUS_entry* e676;
            do if ((e676 = n676->obj) && h327 == n676->hash && CENSUS_mapkey0_idxfn::equals(se4971, *e676)) {
              long census_population = e676->CENSUS_POPULATION;
              long census_white = e676->CENSUS_WHITE;
              long census_asian = e676->CENSUS_ASIAN;
              long census_pacific = e676->CENSUS_PACIFIC;
              long census_blackafrican = e676->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e676->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e676->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e676->CENSUS_HOUSEUNITS;
              long census_families = e676->CENSUS_FAMILIES;
              long census_households = e676->CENSUS_HOUSEHOLDS;
              long census_husbwife = e676->CENSUS_HUSBWIFE;
              long census_males = e676->CENSUS_MALES;
              long census_females = e676->CENSUS_FEMALES;
              long census_householdschildren = e676->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e676->CENSUS_HISPANIC;
              long v676 = e676->__av;
              __SQL_SUM_AGGREGATE_583INVENTORY1.addOrDelOnZero(se4970.modify(__sql_sum_aggregate_583inventoryinventory_locn), (v675 * (v676 * (location_walmartsupercenterdistance * census_females))));
            } while ((n676 = n676->nxt));
          }
          e675 = e675->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_584 = 0.0;
      __SQL_SUM_AGGREGATE_584INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e677 = LOCATION.head;
        while (e677) {
          long __sql_sum_aggregate_584inventoryinventory_locn = e677->LOCATION_LOCN;
          long location_zip = e677->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e677->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e677->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e677->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e677->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e677->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e677->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e677->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e677->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e677->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e677->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e677->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e677->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e677->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v677 = e677->__av;
          { //slice
            const HASH_RES_t h328 = CENSUS_mapkey0_idxfn::hash(se4974.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i678 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n678 = &(i678->buckets_[h328 % i678->size_]);
            CENSUS_entry* e678;
            do if ((e678 = n678->obj) && h328 == n678->hash && CENSUS_mapkey0_idxfn::equals(se4974, *e678)) {
              long census_population = e678->CENSUS_POPULATION;
              long census_white = e678->CENSUS_WHITE;
              long census_asian = e678->CENSUS_ASIAN;
              long census_pacific = e678->CENSUS_PACIFIC;
              long census_blackafrican = e678->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e678->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e678->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e678->CENSUS_HOUSEUNITS;
              long census_families = e678->CENSUS_FAMILIES;
              long census_households = e678->CENSUS_HOUSEHOLDS;
              long census_husbwife = e678->CENSUS_HUSBWIFE;
              long census_males = e678->CENSUS_MALES;
              long census_females = e678->CENSUS_FEMALES;
              long census_householdschildren = e678->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e678->CENSUS_HISPANIC;
              long v678 = e678->__av;
              __SQL_SUM_AGGREGATE_584INVENTORY1.addOrDelOnZero(se4973.modify(__sql_sum_aggregate_584inventoryinventory_locn), (v677 * (v678 * (location_walmartsupercenterdistance * census_householdschildren))));
            } while ((n678 = n678->nxt));
          }
          e677 = e677->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_585 = 0.0;
      __SQL_SUM_AGGREGATE_585INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e679 = LOCATION.head;
        while (e679) {
          long __sql_sum_aggregate_585inventoryinventory_locn = e679->LOCATION_LOCN;
          long location_zip = e679->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e679->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e679->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e679->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e679->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e679->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e679->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e679->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e679->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e679->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e679->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e679->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e679->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e679->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v679 = e679->__av;
          { //slice
            const HASH_RES_t h329 = CENSUS_mapkey0_idxfn::hash(se4977.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i680 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n680 = &(i680->buckets_[h329 % i680->size_]);
            CENSUS_entry* e680;
            do if ((e680 = n680->obj) && h329 == n680->hash && CENSUS_mapkey0_idxfn::equals(se4977, *e680)) {
              long census_population = e680->CENSUS_POPULATION;
              long census_white = e680->CENSUS_WHITE;
              long census_asian = e680->CENSUS_ASIAN;
              long census_pacific = e680->CENSUS_PACIFIC;
              long census_blackafrican = e680->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e680->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e680->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e680->CENSUS_HOUSEUNITS;
              long census_families = e680->CENSUS_FAMILIES;
              long census_households = e680->CENSUS_HOUSEHOLDS;
              long census_husbwife = e680->CENSUS_HUSBWIFE;
              long census_males = e680->CENSUS_MALES;
              long census_females = e680->CENSUS_FEMALES;
              long census_householdschildren = e680->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e680->CENSUS_HISPANIC;
              long v680 = e680->__av;
              __SQL_SUM_AGGREGATE_585INVENTORY1.addOrDelOnZero(se4976.modify(__sql_sum_aggregate_585inventoryinventory_locn), (v679 * (v680 * (location_walmartsupercenterdistance * census_hispanic))));
            } while ((n680 = n680->nxt));
          }
          e679 = e679->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_586 = 0.0;
      __SQL_SUM_AGGREGATE_587 = 0.0;
      __SQL_SUM_AGGREGATE_588 = 0.0;
      __SQL_SUM_AGGREGATE_589 = 0.0;
      __SQL_SUM_AGGREGATE_590 = 0.0;
      __SQL_SUM_AGGREGATE_591 = 0.0;
      __SQL_SUM_AGGREGATE_592 = 0.0;
      __SQL_SUM_AGGREGATE_593 = 0.0;
      __SQL_SUM_AGGREGATE_594 = 0.0;
      __SQL_SUM_AGGREGATE_595 = 0.0;
      __SQL_SUM_AGGREGATE_596 = 0.0;
      __SQL_SUM_AGGREGATE_596INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e681 = LOCATION.head;
        while (e681) {
          long __sql_sum_aggregate_596inventoryinventory_locn = e681->LOCATION_LOCN;
          long location_zip = e681->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e681->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e681->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e681->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e681->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e681->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e681->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e681->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e681->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e681->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e681->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e681->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e681->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e681->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v681 = e681->__av;
          { //slice
            const HASH_RES_t h330 = CENSUS_mapkey0_idxfn::hash(se4990.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i682 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n682 = &(i682->buckets_[h330 % i682->size_]);
            CENSUS_entry* e682;
            do if ((e682 = n682->obj) && h330 == n682->hash && CENSUS_mapkey0_idxfn::equals(se4990, *e682)) {
              long census_population = e682->CENSUS_POPULATION;
              long census_white = e682->CENSUS_WHITE;
              long census_asian = e682->CENSUS_ASIAN;
              long census_pacific = e682->CENSUS_PACIFIC;
              long census_blackafrican = e682->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e682->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e682->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e682->CENSUS_HOUSEUNITS;
              long census_families = e682->CENSUS_FAMILIES;
              long census_households = e682->CENSUS_HOUSEHOLDS;
              long census_husbwife = e682->CENSUS_HUSBWIFE;
              long census_males = e682->CENSUS_MALES;
              long census_females = e682->CENSUS_FEMALES;
              long census_householdschildren = e682->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e682->CENSUS_HISPANIC;
              long v682 = e682->__av;
              __SQL_SUM_AGGREGATE_596INVENTORY1.addOrDelOnZero(se4989.modify(__sql_sum_aggregate_596inventoryinventory_locn), (v681 * (v682 * (location_walmartsupercenterdrivetime * location_walmartsupercenterdrivetime))));
            } while ((n682 = n682->nxt));
          }
          e681 = e681->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_597 = 0.0;
      __SQL_SUM_AGGREGATE_597INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e683 = LOCATION.head;
        while (e683) {
          long __sql_sum_aggregate_597inventoryinventory_locn = e683->LOCATION_LOCN;
          long location_zip = e683->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e683->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e683->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e683->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e683->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e683->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e683->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e683->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e683->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e683->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e683->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e683->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e683->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e683->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v683 = e683->__av;
          { //slice
            const HASH_RES_t h331 = CENSUS_mapkey0_idxfn::hash(se4993.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i684 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n684 = &(i684->buckets_[h331 % i684->size_]);
            CENSUS_entry* e684;
            do if ((e684 = n684->obj) && h331 == n684->hash && CENSUS_mapkey0_idxfn::equals(se4993, *e684)) {
              long census_population = e684->CENSUS_POPULATION;
              long census_white = e684->CENSUS_WHITE;
              long census_asian = e684->CENSUS_ASIAN;
              long census_pacific = e684->CENSUS_PACIFIC;
              long census_blackafrican = e684->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e684->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e684->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e684->CENSUS_HOUSEUNITS;
              long census_families = e684->CENSUS_FAMILIES;
              long census_households = e684->CENSUS_HOUSEHOLDS;
              long census_husbwife = e684->CENSUS_HUSBWIFE;
              long census_males = e684->CENSUS_MALES;
              long census_females = e684->CENSUS_FEMALES;
              long census_householdschildren = e684->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e684->CENSUS_HISPANIC;
              long v684 = e684->__av;
              __SQL_SUM_AGGREGATE_597INVENTORY1.addOrDelOnZero(se4992.modify(__sql_sum_aggregate_597inventoryinventory_locn), (v683 * (v684 * (location_walmartsupercenterdrivetime * census_population))));
            } while ((n684 = n684->nxt));
          }
          e683 = e683->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_598 = 0.0;
      __SQL_SUM_AGGREGATE_598INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e685 = LOCATION.head;
        while (e685) {
          long __sql_sum_aggregate_598inventoryinventory_locn = e685->LOCATION_LOCN;
          long location_zip = e685->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e685->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e685->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e685->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e685->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e685->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e685->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e685->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e685->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e685->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e685->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e685->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e685->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e685->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v685 = e685->__av;
          { //slice
            const HASH_RES_t h332 = CENSUS_mapkey0_idxfn::hash(se4996.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i686 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n686 = &(i686->buckets_[h332 % i686->size_]);
            CENSUS_entry* e686;
            do if ((e686 = n686->obj) && h332 == n686->hash && CENSUS_mapkey0_idxfn::equals(se4996, *e686)) {
              long census_population = e686->CENSUS_POPULATION;
              long census_white = e686->CENSUS_WHITE;
              long census_asian = e686->CENSUS_ASIAN;
              long census_pacific = e686->CENSUS_PACIFIC;
              long census_blackafrican = e686->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e686->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e686->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e686->CENSUS_HOUSEUNITS;
              long census_families = e686->CENSUS_FAMILIES;
              long census_households = e686->CENSUS_HOUSEHOLDS;
              long census_husbwife = e686->CENSUS_HUSBWIFE;
              long census_males = e686->CENSUS_MALES;
              long census_females = e686->CENSUS_FEMALES;
              long census_householdschildren = e686->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e686->CENSUS_HISPANIC;
              long v686 = e686->__av;
              __SQL_SUM_AGGREGATE_598INVENTORY1.addOrDelOnZero(se4995.modify(__sql_sum_aggregate_598inventoryinventory_locn), (v685 * (v686 * (location_walmartsupercenterdrivetime * census_white))));
            } while ((n686 = n686->nxt));
          }
          e685 = e685->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_599 = 0.0;
      __SQL_SUM_AGGREGATE_599INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e687 = LOCATION.head;
        while (e687) {
          long __sql_sum_aggregate_599inventoryinventory_locn = e687->LOCATION_LOCN;
          long location_zip = e687->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e687->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e687->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e687->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e687->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e687->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e687->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e687->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e687->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e687->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e687->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e687->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e687->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e687->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v687 = e687->__av;
          { //slice
            const HASH_RES_t h333 = CENSUS_mapkey0_idxfn::hash(se4999.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i688 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n688 = &(i688->buckets_[h333 % i688->size_]);
            CENSUS_entry* e688;
            do if ((e688 = n688->obj) && h333 == n688->hash && CENSUS_mapkey0_idxfn::equals(se4999, *e688)) {
              long census_population = e688->CENSUS_POPULATION;
              long census_white = e688->CENSUS_WHITE;
              long census_asian = e688->CENSUS_ASIAN;
              long census_pacific = e688->CENSUS_PACIFIC;
              long census_blackafrican = e688->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e688->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e688->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e688->CENSUS_HOUSEUNITS;
              long census_families = e688->CENSUS_FAMILIES;
              long census_households = e688->CENSUS_HOUSEHOLDS;
              long census_husbwife = e688->CENSUS_HUSBWIFE;
              long census_males = e688->CENSUS_MALES;
              long census_females = e688->CENSUS_FEMALES;
              long census_householdschildren = e688->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e688->CENSUS_HISPANIC;
              long v688 = e688->__av;
              __SQL_SUM_AGGREGATE_599INVENTORY1.addOrDelOnZero(se4998.modify(__sql_sum_aggregate_599inventoryinventory_locn), (v687 * (v688 * (location_walmartsupercenterdrivetime * census_asian))));
            } while ((n688 = n688->nxt));
          }
          e687 = e687->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_600 = 0.0;
      __SQL_SUM_AGGREGATE_600INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e689 = LOCATION.head;
        while (e689) {
          long __sql_sum_aggregate_600inventoryinventory_locn = e689->LOCATION_LOCN;
          long location_zip = e689->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e689->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e689->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e689->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e689->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e689->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e689->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e689->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e689->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e689->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e689->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e689->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e689->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e689->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v689 = e689->__av;
          { //slice
            const HASH_RES_t h334 = CENSUS_mapkey0_idxfn::hash(se5002.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i690 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n690 = &(i690->buckets_[h334 % i690->size_]);
            CENSUS_entry* e690;
            do if ((e690 = n690->obj) && h334 == n690->hash && CENSUS_mapkey0_idxfn::equals(se5002, *e690)) {
              long census_population = e690->CENSUS_POPULATION;
              long census_white = e690->CENSUS_WHITE;
              long census_asian = e690->CENSUS_ASIAN;
              long census_pacific = e690->CENSUS_PACIFIC;
              long census_blackafrican = e690->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e690->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e690->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e690->CENSUS_HOUSEUNITS;
              long census_families = e690->CENSUS_FAMILIES;
              long census_households = e690->CENSUS_HOUSEHOLDS;
              long census_husbwife = e690->CENSUS_HUSBWIFE;
              long census_males = e690->CENSUS_MALES;
              long census_females = e690->CENSUS_FEMALES;
              long census_householdschildren = e690->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e690->CENSUS_HISPANIC;
              long v690 = e690->__av;
              __SQL_SUM_AGGREGATE_600INVENTORY1.addOrDelOnZero(se5001.modify(__sql_sum_aggregate_600inventoryinventory_locn), (v689 * (v690 * (location_walmartsupercenterdrivetime * census_pacific))));
            } while ((n690 = n690->nxt));
          }
          e689 = e689->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_601 = 0.0;
      __SQL_SUM_AGGREGATE_601INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e691 = LOCATION.head;
        while (e691) {
          long __sql_sum_aggregate_601inventoryinventory_locn = e691->LOCATION_LOCN;
          long location_zip = e691->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e691->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e691->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e691->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e691->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e691->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e691->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e691->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e691->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e691->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e691->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e691->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e691->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e691->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v691 = e691->__av;
          { //slice
            const HASH_RES_t h335 = CENSUS_mapkey0_idxfn::hash(se5005.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i692 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n692 = &(i692->buckets_[h335 % i692->size_]);
            CENSUS_entry* e692;
            do if ((e692 = n692->obj) && h335 == n692->hash && CENSUS_mapkey0_idxfn::equals(se5005, *e692)) {
              long census_population = e692->CENSUS_POPULATION;
              long census_white = e692->CENSUS_WHITE;
              long census_asian = e692->CENSUS_ASIAN;
              long census_pacific = e692->CENSUS_PACIFIC;
              long census_blackafrican = e692->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e692->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e692->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e692->CENSUS_HOUSEUNITS;
              long census_families = e692->CENSUS_FAMILIES;
              long census_households = e692->CENSUS_HOUSEHOLDS;
              long census_husbwife = e692->CENSUS_HUSBWIFE;
              long census_males = e692->CENSUS_MALES;
              long census_females = e692->CENSUS_FEMALES;
              long census_householdschildren = e692->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e692->CENSUS_HISPANIC;
              long v692 = e692->__av;
              __SQL_SUM_AGGREGATE_601INVENTORY1.addOrDelOnZero(se5004.modify(__sql_sum_aggregate_601inventoryinventory_locn), (v691 * (v692 * (location_walmartsupercenterdrivetime * census_blackafrican))));
            } while ((n692 = n692->nxt));
          }
          e691 = e691->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_602 = 0.0;
      __SQL_SUM_AGGREGATE_602INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e693 = LOCATION.head;
        while (e693) {
          long __sql_sum_aggregate_602inventoryinventory_locn = e693->LOCATION_LOCN;
          long location_zip = e693->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e693->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e693->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e693->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e693->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e693->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e693->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e693->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e693->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e693->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e693->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e693->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e693->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e693->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v693 = e693->__av;
          { //slice
            const HASH_RES_t h336 = CENSUS_mapkey0_idxfn::hash(se5008.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i694 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n694 = &(i694->buckets_[h336 % i694->size_]);
            CENSUS_entry* e694;
            do if ((e694 = n694->obj) && h336 == n694->hash && CENSUS_mapkey0_idxfn::equals(se5008, *e694)) {
              long census_population = e694->CENSUS_POPULATION;
              long census_white = e694->CENSUS_WHITE;
              long census_asian = e694->CENSUS_ASIAN;
              long census_pacific = e694->CENSUS_PACIFIC;
              long census_blackafrican = e694->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e694->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e694->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e694->CENSUS_HOUSEUNITS;
              long census_families = e694->CENSUS_FAMILIES;
              long census_households = e694->CENSUS_HOUSEHOLDS;
              long census_husbwife = e694->CENSUS_HUSBWIFE;
              long census_males = e694->CENSUS_MALES;
              long census_females = e694->CENSUS_FEMALES;
              long census_householdschildren = e694->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e694->CENSUS_HISPANIC;
              long v694 = e694->__av;
              __SQL_SUM_AGGREGATE_602INVENTORY1.addOrDelOnZero(se5007.modify(__sql_sum_aggregate_602inventoryinventory_locn), (v693 * (v694 * (location_walmartsupercenterdrivetime * census_medianage))));
            } while ((n694 = n694->nxt));
          }
          e693 = e693->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_603 = 0.0;
      __SQL_SUM_AGGREGATE_603INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e695 = LOCATION.head;
        while (e695) {
          long __sql_sum_aggregate_603inventoryinventory_locn = e695->LOCATION_LOCN;
          long location_zip = e695->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e695->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e695->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e695->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e695->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e695->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e695->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e695->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e695->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e695->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e695->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e695->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e695->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e695->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v695 = e695->__av;
          { //slice
            const HASH_RES_t h337 = CENSUS_mapkey0_idxfn::hash(se5011.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i696 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n696 = &(i696->buckets_[h337 % i696->size_]);
            CENSUS_entry* e696;
            do if ((e696 = n696->obj) && h337 == n696->hash && CENSUS_mapkey0_idxfn::equals(se5011, *e696)) {
              long census_population = e696->CENSUS_POPULATION;
              long census_white = e696->CENSUS_WHITE;
              long census_asian = e696->CENSUS_ASIAN;
              long census_pacific = e696->CENSUS_PACIFIC;
              long census_blackafrican = e696->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e696->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e696->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e696->CENSUS_HOUSEUNITS;
              long census_families = e696->CENSUS_FAMILIES;
              long census_households = e696->CENSUS_HOUSEHOLDS;
              long census_husbwife = e696->CENSUS_HUSBWIFE;
              long census_males = e696->CENSUS_MALES;
              long census_females = e696->CENSUS_FEMALES;
              long census_householdschildren = e696->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e696->CENSUS_HISPANIC;
              long v696 = e696->__av;
              __SQL_SUM_AGGREGATE_603INVENTORY1.addOrDelOnZero(se5010.modify(__sql_sum_aggregate_603inventoryinventory_locn), (v695 * (v696 * (location_walmartsupercenterdrivetime * census_occupiedhouseunits))));
            } while ((n696 = n696->nxt));
          }
          e695 = e695->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_604 = 0.0;
      __SQL_SUM_AGGREGATE_604INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e697 = LOCATION.head;
        while (e697) {
          long __sql_sum_aggregate_604inventoryinventory_locn = e697->LOCATION_LOCN;
          long location_zip = e697->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e697->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e697->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e697->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e697->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e697->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e697->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e697->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e697->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e697->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e697->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e697->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e697->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e697->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v697 = e697->__av;
          { //slice
            const HASH_RES_t h338 = CENSUS_mapkey0_idxfn::hash(se5014.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i698 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n698 = &(i698->buckets_[h338 % i698->size_]);
            CENSUS_entry* e698;
            do if ((e698 = n698->obj) && h338 == n698->hash && CENSUS_mapkey0_idxfn::equals(se5014, *e698)) {
              long census_population = e698->CENSUS_POPULATION;
              long census_white = e698->CENSUS_WHITE;
              long census_asian = e698->CENSUS_ASIAN;
              long census_pacific = e698->CENSUS_PACIFIC;
              long census_blackafrican = e698->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e698->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e698->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e698->CENSUS_HOUSEUNITS;
              long census_families = e698->CENSUS_FAMILIES;
              long census_households = e698->CENSUS_HOUSEHOLDS;
              long census_husbwife = e698->CENSUS_HUSBWIFE;
              long census_males = e698->CENSUS_MALES;
              long census_females = e698->CENSUS_FEMALES;
              long census_householdschildren = e698->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e698->CENSUS_HISPANIC;
              long v698 = e698->__av;
              __SQL_SUM_AGGREGATE_604INVENTORY1.addOrDelOnZero(se5013.modify(__sql_sum_aggregate_604inventoryinventory_locn), (v697 * (v698 * (location_walmartsupercenterdrivetime * census_houseunits))));
            } while ((n698 = n698->nxt));
          }
          e697 = e697->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_605 = 0.0;
      __SQL_SUM_AGGREGATE_605INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e699 = LOCATION.head;
        while (e699) {
          long __sql_sum_aggregate_605inventoryinventory_locn = e699->LOCATION_LOCN;
          long location_zip = e699->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e699->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e699->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e699->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e699->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e699->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e699->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e699->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e699->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e699->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e699->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e699->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e699->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e699->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v699 = e699->__av;
          { //slice
            const HASH_RES_t h339 = CENSUS_mapkey0_idxfn::hash(se5017.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i700 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n700 = &(i700->buckets_[h339 % i700->size_]);
            CENSUS_entry* e700;
            do if ((e700 = n700->obj) && h339 == n700->hash && CENSUS_mapkey0_idxfn::equals(se5017, *e700)) {
              long census_population = e700->CENSUS_POPULATION;
              long census_white = e700->CENSUS_WHITE;
              long census_asian = e700->CENSUS_ASIAN;
              long census_pacific = e700->CENSUS_PACIFIC;
              long census_blackafrican = e700->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e700->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e700->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e700->CENSUS_HOUSEUNITS;
              long census_families = e700->CENSUS_FAMILIES;
              long census_households = e700->CENSUS_HOUSEHOLDS;
              long census_husbwife = e700->CENSUS_HUSBWIFE;
              long census_males = e700->CENSUS_MALES;
              long census_females = e700->CENSUS_FEMALES;
              long census_householdschildren = e700->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e700->CENSUS_HISPANIC;
              long v700 = e700->__av;
              __SQL_SUM_AGGREGATE_605INVENTORY1.addOrDelOnZero(se5016.modify(__sql_sum_aggregate_605inventoryinventory_locn), (v699 * (v700 * (location_walmartsupercenterdrivetime * census_families))));
            } while ((n700 = n700->nxt));
          }
          e699 = e699->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_606 = 0.0;
      __SQL_SUM_AGGREGATE_606INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e701 = LOCATION.head;
        while (e701) {
          long __sql_sum_aggregate_606inventoryinventory_locn = e701->LOCATION_LOCN;
          long location_zip = e701->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e701->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e701->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e701->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e701->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e701->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e701->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e701->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e701->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e701->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e701->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e701->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e701->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e701->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v701 = e701->__av;
          { //slice
            const HASH_RES_t h340 = CENSUS_mapkey0_idxfn::hash(se5020.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i702 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n702 = &(i702->buckets_[h340 % i702->size_]);
            CENSUS_entry* e702;
            do if ((e702 = n702->obj) && h340 == n702->hash && CENSUS_mapkey0_idxfn::equals(se5020, *e702)) {
              long census_population = e702->CENSUS_POPULATION;
              long census_white = e702->CENSUS_WHITE;
              long census_asian = e702->CENSUS_ASIAN;
              long census_pacific = e702->CENSUS_PACIFIC;
              long census_blackafrican = e702->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e702->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e702->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e702->CENSUS_HOUSEUNITS;
              long census_families = e702->CENSUS_FAMILIES;
              long census_households = e702->CENSUS_HOUSEHOLDS;
              long census_husbwife = e702->CENSUS_HUSBWIFE;
              long census_males = e702->CENSUS_MALES;
              long census_females = e702->CENSUS_FEMALES;
              long census_householdschildren = e702->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e702->CENSUS_HISPANIC;
              long v702 = e702->__av;
              __SQL_SUM_AGGREGATE_606INVENTORY1.addOrDelOnZero(se5019.modify(__sql_sum_aggregate_606inventoryinventory_locn), (v701 * (v702 * (location_walmartsupercenterdrivetime * census_households))));
            } while ((n702 = n702->nxt));
          }
          e701 = e701->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_607 = 0.0;
      __SQL_SUM_AGGREGATE_607INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e703 = LOCATION.head;
        while (e703) {
          long __sql_sum_aggregate_607inventoryinventory_locn = e703->LOCATION_LOCN;
          long location_zip = e703->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e703->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e703->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e703->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e703->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e703->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e703->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e703->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e703->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e703->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e703->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e703->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e703->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e703->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v703 = e703->__av;
          { //slice
            const HASH_RES_t h341 = CENSUS_mapkey0_idxfn::hash(se5023.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i704 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n704 = &(i704->buckets_[h341 % i704->size_]);
            CENSUS_entry* e704;
            do if ((e704 = n704->obj) && h341 == n704->hash && CENSUS_mapkey0_idxfn::equals(se5023, *e704)) {
              long census_population = e704->CENSUS_POPULATION;
              long census_white = e704->CENSUS_WHITE;
              long census_asian = e704->CENSUS_ASIAN;
              long census_pacific = e704->CENSUS_PACIFIC;
              long census_blackafrican = e704->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e704->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e704->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e704->CENSUS_HOUSEUNITS;
              long census_families = e704->CENSUS_FAMILIES;
              long census_households = e704->CENSUS_HOUSEHOLDS;
              long census_husbwife = e704->CENSUS_HUSBWIFE;
              long census_males = e704->CENSUS_MALES;
              long census_females = e704->CENSUS_FEMALES;
              long census_householdschildren = e704->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e704->CENSUS_HISPANIC;
              long v704 = e704->__av;
              __SQL_SUM_AGGREGATE_607INVENTORY1.addOrDelOnZero(se5022.modify(__sql_sum_aggregate_607inventoryinventory_locn), (v703 * (v704 * (location_walmartsupercenterdrivetime * census_husbwife))));
            } while ((n704 = n704->nxt));
          }
          e703 = e703->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_608 = 0.0;
      __SQL_SUM_AGGREGATE_608INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e705 = LOCATION.head;
        while (e705) {
          long __sql_sum_aggregate_608inventoryinventory_locn = e705->LOCATION_LOCN;
          long location_zip = e705->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e705->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e705->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e705->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e705->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e705->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e705->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e705->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e705->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e705->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e705->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e705->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e705->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e705->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v705 = e705->__av;
          { //slice
            const HASH_RES_t h342 = CENSUS_mapkey0_idxfn::hash(se5026.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i706 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n706 = &(i706->buckets_[h342 % i706->size_]);
            CENSUS_entry* e706;
            do if ((e706 = n706->obj) && h342 == n706->hash && CENSUS_mapkey0_idxfn::equals(se5026, *e706)) {
              long census_population = e706->CENSUS_POPULATION;
              long census_white = e706->CENSUS_WHITE;
              long census_asian = e706->CENSUS_ASIAN;
              long census_pacific = e706->CENSUS_PACIFIC;
              long census_blackafrican = e706->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e706->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e706->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e706->CENSUS_HOUSEUNITS;
              long census_families = e706->CENSUS_FAMILIES;
              long census_households = e706->CENSUS_HOUSEHOLDS;
              long census_husbwife = e706->CENSUS_HUSBWIFE;
              long census_males = e706->CENSUS_MALES;
              long census_females = e706->CENSUS_FEMALES;
              long census_householdschildren = e706->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e706->CENSUS_HISPANIC;
              long v706 = e706->__av;
              __SQL_SUM_AGGREGATE_608INVENTORY1.addOrDelOnZero(se5025.modify(__sql_sum_aggregate_608inventoryinventory_locn), (v705 * (v706 * (location_walmartsupercenterdrivetime * census_males))));
            } while ((n706 = n706->nxt));
          }
          e705 = e705->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_609 = 0.0;
      __SQL_SUM_AGGREGATE_609INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e707 = LOCATION.head;
        while (e707) {
          long __sql_sum_aggregate_609inventoryinventory_locn = e707->LOCATION_LOCN;
          long location_zip = e707->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e707->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e707->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e707->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e707->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e707->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e707->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e707->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e707->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e707->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e707->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e707->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e707->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e707->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v707 = e707->__av;
          { //slice
            const HASH_RES_t h343 = CENSUS_mapkey0_idxfn::hash(se5029.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i708 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n708 = &(i708->buckets_[h343 % i708->size_]);
            CENSUS_entry* e708;
            do if ((e708 = n708->obj) && h343 == n708->hash && CENSUS_mapkey0_idxfn::equals(se5029, *e708)) {
              long census_population = e708->CENSUS_POPULATION;
              long census_white = e708->CENSUS_WHITE;
              long census_asian = e708->CENSUS_ASIAN;
              long census_pacific = e708->CENSUS_PACIFIC;
              long census_blackafrican = e708->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e708->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e708->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e708->CENSUS_HOUSEUNITS;
              long census_families = e708->CENSUS_FAMILIES;
              long census_households = e708->CENSUS_HOUSEHOLDS;
              long census_husbwife = e708->CENSUS_HUSBWIFE;
              long census_males = e708->CENSUS_MALES;
              long census_females = e708->CENSUS_FEMALES;
              long census_householdschildren = e708->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e708->CENSUS_HISPANIC;
              long v708 = e708->__av;
              __SQL_SUM_AGGREGATE_609INVENTORY1.addOrDelOnZero(se5028.modify(__sql_sum_aggregate_609inventoryinventory_locn), (v707 * (v708 * (location_walmartsupercenterdrivetime * census_females))));
            } while ((n708 = n708->nxt));
          }
          e707 = e707->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_610 = 0.0;
      __SQL_SUM_AGGREGATE_610INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e709 = LOCATION.head;
        while (e709) {
          long __sql_sum_aggregate_610inventoryinventory_locn = e709->LOCATION_LOCN;
          long location_zip = e709->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e709->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e709->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e709->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e709->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e709->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e709->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e709->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e709->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e709->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e709->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e709->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e709->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e709->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v709 = e709->__av;
          { //slice
            const HASH_RES_t h344 = CENSUS_mapkey0_idxfn::hash(se5032.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i710 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n710 = &(i710->buckets_[h344 % i710->size_]);
            CENSUS_entry* e710;
            do if ((e710 = n710->obj) && h344 == n710->hash && CENSUS_mapkey0_idxfn::equals(se5032, *e710)) {
              long census_population = e710->CENSUS_POPULATION;
              long census_white = e710->CENSUS_WHITE;
              long census_asian = e710->CENSUS_ASIAN;
              long census_pacific = e710->CENSUS_PACIFIC;
              long census_blackafrican = e710->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e710->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e710->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e710->CENSUS_HOUSEUNITS;
              long census_families = e710->CENSUS_FAMILIES;
              long census_households = e710->CENSUS_HOUSEHOLDS;
              long census_husbwife = e710->CENSUS_HUSBWIFE;
              long census_males = e710->CENSUS_MALES;
              long census_females = e710->CENSUS_FEMALES;
              long census_householdschildren = e710->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e710->CENSUS_HISPANIC;
              long v710 = e710->__av;
              __SQL_SUM_AGGREGATE_610INVENTORY1.addOrDelOnZero(se5031.modify(__sql_sum_aggregate_610inventoryinventory_locn), (v709 * (v710 * (location_walmartsupercenterdrivetime * census_householdschildren))));
            } while ((n710 = n710->nxt));
          }
          e709 = e709->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_611 = 0.0;
      __SQL_SUM_AGGREGATE_611INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e711 = LOCATION.head;
        while (e711) {
          long __sql_sum_aggregate_611inventoryinventory_locn = e711->LOCATION_LOCN;
          long location_zip = e711->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e711->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e711->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e711->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e711->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e711->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e711->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e711->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e711->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e711->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e711->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e711->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e711->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e711->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v711 = e711->__av;
          { //slice
            const HASH_RES_t h345 = CENSUS_mapkey0_idxfn::hash(se5035.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i712 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n712 = &(i712->buckets_[h345 % i712->size_]);
            CENSUS_entry* e712;
            do if ((e712 = n712->obj) && h345 == n712->hash && CENSUS_mapkey0_idxfn::equals(se5035, *e712)) {
              long census_population = e712->CENSUS_POPULATION;
              long census_white = e712->CENSUS_WHITE;
              long census_asian = e712->CENSUS_ASIAN;
              long census_pacific = e712->CENSUS_PACIFIC;
              long census_blackafrican = e712->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e712->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e712->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e712->CENSUS_HOUSEUNITS;
              long census_families = e712->CENSUS_FAMILIES;
              long census_households = e712->CENSUS_HOUSEHOLDS;
              long census_husbwife = e712->CENSUS_HUSBWIFE;
              long census_males = e712->CENSUS_MALES;
              long census_females = e712->CENSUS_FEMALES;
              long census_householdschildren = e712->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e712->CENSUS_HISPANIC;
              long v712 = e712->__av;
              __SQL_SUM_AGGREGATE_611INVENTORY1.addOrDelOnZero(se5034.modify(__sql_sum_aggregate_611inventoryinventory_locn), (v711 * (v712 * (location_walmartsupercenterdrivetime * census_hispanic))));
            } while ((n712 = n712->nxt));
          }
          e711 = e711->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_612 = 0.0;
      __SQL_SUM_AGGREGATE_613 = 0.0;
      __SQL_SUM_AGGREGATE_614 = 0.0;
      __SQL_SUM_AGGREGATE_615 = 0.0;
      __SQL_SUM_AGGREGATE_616 = 0.0;
      __SQL_SUM_AGGREGATE_617 = 0.0;
      __SQL_SUM_AGGREGATE_618 = 0.0;
      __SQL_SUM_AGGREGATE_619 = 0.0;
      __SQL_SUM_AGGREGATE_620 = 0.0;
      __SQL_SUM_AGGREGATE_621 = 0.0;
      __SQL_SUM_AGGREGATE_622INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e713 = LOCATION.head;
        while (e713) {
          long __sql_sum_aggregate_622inventoryinventory_locn = e713->LOCATION_LOCN;
          long location_zip = e713->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e713->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e713->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e713->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e713->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e713->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e713->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e713->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e713->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e713->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e713->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e713->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e713->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e713->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v713 = e713->__av;
          { //slice
            const HASH_RES_t h346 = CENSUS_mapkey0_idxfn::hash(se5047.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i714 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n714 = &(i714->buckets_[h346 % i714->size_]);
            CENSUS_entry* e714;
            do if ((e714 = n714->obj) && h346 == n714->hash && CENSUS_mapkey0_idxfn::equals(se5047, *e714)) {
              long census_population = e714->CENSUS_POPULATION;
              long census_white = e714->CENSUS_WHITE;
              long census_asian = e714->CENSUS_ASIAN;
              long census_pacific = e714->CENSUS_PACIFIC;
              long census_blackafrican = e714->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e714->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e714->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e714->CENSUS_HOUSEUNITS;
              long census_families = e714->CENSUS_FAMILIES;
              long census_households = e714->CENSUS_HOUSEHOLDS;
              long census_husbwife = e714->CENSUS_HUSBWIFE;
              long census_males = e714->CENSUS_MALES;
              long census_females = e714->CENSUS_FEMALES;
              long census_householdschildren = e714->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e714->CENSUS_HISPANIC;
              long v714 = e714->__av;
              __SQL_SUM_AGGREGATE_622INVENTORY1.addOrDelOnZero(se5046.modify(__sql_sum_aggregate_622inventoryinventory_locn), (v713 * (v714 * (census_population * census_population))));
            } while ((n714 = n714->nxt));
          }
          e713 = e713->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_623INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e715 = LOCATION.head;
        while (e715) {
          long __sql_sum_aggregate_623inventoryinventory_locn = e715->LOCATION_LOCN;
          long location_zip = e715->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e715->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e715->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e715->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e715->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e715->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e715->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e715->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e715->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e715->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e715->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e715->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e715->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e715->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v715 = e715->__av;
          { //slice
            const HASH_RES_t h347 = CENSUS_mapkey0_idxfn::hash(se5049.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i716 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n716 = &(i716->buckets_[h347 % i716->size_]);
            CENSUS_entry* e716;
            do if ((e716 = n716->obj) && h347 == n716->hash && CENSUS_mapkey0_idxfn::equals(se5049, *e716)) {
              long census_population = e716->CENSUS_POPULATION;
              long census_white = e716->CENSUS_WHITE;
              long census_asian = e716->CENSUS_ASIAN;
              long census_pacific = e716->CENSUS_PACIFIC;
              long census_blackafrican = e716->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e716->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e716->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e716->CENSUS_HOUSEUNITS;
              long census_families = e716->CENSUS_FAMILIES;
              long census_households = e716->CENSUS_HOUSEHOLDS;
              long census_husbwife = e716->CENSUS_HUSBWIFE;
              long census_males = e716->CENSUS_MALES;
              long census_females = e716->CENSUS_FEMALES;
              long census_householdschildren = e716->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e716->CENSUS_HISPANIC;
              long v716 = e716->__av;
              __SQL_SUM_AGGREGATE_623INVENTORY1.addOrDelOnZero(se5048.modify(__sql_sum_aggregate_623inventoryinventory_locn), (v715 * (v716 * (census_population * census_white))));
            } while ((n716 = n716->nxt));
          }
          e715 = e715->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_624INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e717 = LOCATION.head;
        while (e717) {
          long __sql_sum_aggregate_624inventoryinventory_locn = e717->LOCATION_LOCN;
          long location_zip = e717->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e717->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e717->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e717->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e717->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e717->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e717->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e717->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e717->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e717->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e717->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e717->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e717->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e717->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v717 = e717->__av;
          { //slice
            const HASH_RES_t h348 = CENSUS_mapkey0_idxfn::hash(se5051.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i718 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n718 = &(i718->buckets_[h348 % i718->size_]);
            CENSUS_entry* e718;
            do if ((e718 = n718->obj) && h348 == n718->hash && CENSUS_mapkey0_idxfn::equals(se5051, *e718)) {
              long census_population = e718->CENSUS_POPULATION;
              long census_white = e718->CENSUS_WHITE;
              long census_asian = e718->CENSUS_ASIAN;
              long census_pacific = e718->CENSUS_PACIFIC;
              long census_blackafrican = e718->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e718->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e718->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e718->CENSUS_HOUSEUNITS;
              long census_families = e718->CENSUS_FAMILIES;
              long census_households = e718->CENSUS_HOUSEHOLDS;
              long census_husbwife = e718->CENSUS_HUSBWIFE;
              long census_males = e718->CENSUS_MALES;
              long census_females = e718->CENSUS_FEMALES;
              long census_householdschildren = e718->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e718->CENSUS_HISPANIC;
              long v718 = e718->__av;
              __SQL_SUM_AGGREGATE_624INVENTORY1.addOrDelOnZero(se5050.modify(__sql_sum_aggregate_624inventoryinventory_locn), (v717 * (v718 * (census_population * census_asian))));
            } while ((n718 = n718->nxt));
          }
          e717 = e717->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_625INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e719 = LOCATION.head;
        while (e719) {
          long __sql_sum_aggregate_625inventoryinventory_locn = e719->LOCATION_LOCN;
          long location_zip = e719->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e719->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e719->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e719->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e719->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e719->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e719->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e719->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e719->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e719->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e719->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e719->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e719->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e719->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v719 = e719->__av;
          { //slice
            const HASH_RES_t h349 = CENSUS_mapkey0_idxfn::hash(se5053.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i720 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n720 = &(i720->buckets_[h349 % i720->size_]);
            CENSUS_entry* e720;
            do if ((e720 = n720->obj) && h349 == n720->hash && CENSUS_mapkey0_idxfn::equals(se5053, *e720)) {
              long census_population = e720->CENSUS_POPULATION;
              long census_white = e720->CENSUS_WHITE;
              long census_asian = e720->CENSUS_ASIAN;
              long census_pacific = e720->CENSUS_PACIFIC;
              long census_blackafrican = e720->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e720->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e720->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e720->CENSUS_HOUSEUNITS;
              long census_families = e720->CENSUS_FAMILIES;
              long census_households = e720->CENSUS_HOUSEHOLDS;
              long census_husbwife = e720->CENSUS_HUSBWIFE;
              long census_males = e720->CENSUS_MALES;
              long census_females = e720->CENSUS_FEMALES;
              long census_householdschildren = e720->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e720->CENSUS_HISPANIC;
              long v720 = e720->__av;
              __SQL_SUM_AGGREGATE_625INVENTORY1.addOrDelOnZero(se5052.modify(__sql_sum_aggregate_625inventoryinventory_locn), (v719 * (v720 * (census_population * census_pacific))));
            } while ((n720 = n720->nxt));
          }
          e719 = e719->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_626INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e721 = LOCATION.head;
        while (e721) {
          long __sql_sum_aggregate_626inventoryinventory_locn = e721->LOCATION_LOCN;
          long location_zip = e721->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e721->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e721->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e721->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e721->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e721->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e721->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e721->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e721->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e721->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e721->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e721->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e721->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e721->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v721 = e721->__av;
          { //slice
            const HASH_RES_t h350 = CENSUS_mapkey0_idxfn::hash(se5055.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i722 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n722 = &(i722->buckets_[h350 % i722->size_]);
            CENSUS_entry* e722;
            do if ((e722 = n722->obj) && h350 == n722->hash && CENSUS_mapkey0_idxfn::equals(se5055, *e722)) {
              long census_population = e722->CENSUS_POPULATION;
              long census_white = e722->CENSUS_WHITE;
              long census_asian = e722->CENSUS_ASIAN;
              long census_pacific = e722->CENSUS_PACIFIC;
              long census_blackafrican = e722->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e722->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e722->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e722->CENSUS_HOUSEUNITS;
              long census_families = e722->CENSUS_FAMILIES;
              long census_households = e722->CENSUS_HOUSEHOLDS;
              long census_husbwife = e722->CENSUS_HUSBWIFE;
              long census_males = e722->CENSUS_MALES;
              long census_females = e722->CENSUS_FEMALES;
              long census_householdschildren = e722->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e722->CENSUS_HISPANIC;
              long v722 = e722->__av;
              __SQL_SUM_AGGREGATE_626INVENTORY1.addOrDelOnZero(se5054.modify(__sql_sum_aggregate_626inventoryinventory_locn), (v721 * (v722 * (census_population * census_blackafrican))));
            } while ((n722 = n722->nxt));
          }
          e721 = e721->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_627 = 0.0;
      __SQL_SUM_AGGREGATE_627INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e723 = LOCATION.head;
        while (e723) {
          long __sql_sum_aggregate_627inventoryinventory_locn = e723->LOCATION_LOCN;
          long location_zip = e723->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e723->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e723->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e723->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e723->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e723->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e723->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e723->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e723->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e723->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e723->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e723->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e723->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e723->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v723 = e723->__av;
          { //slice
            const HASH_RES_t h351 = CENSUS_mapkey0_idxfn::hash(se5058.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i724 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n724 = &(i724->buckets_[h351 % i724->size_]);
            CENSUS_entry* e724;
            do if ((e724 = n724->obj) && h351 == n724->hash && CENSUS_mapkey0_idxfn::equals(se5058, *e724)) {
              long census_population = e724->CENSUS_POPULATION;
              long census_white = e724->CENSUS_WHITE;
              long census_asian = e724->CENSUS_ASIAN;
              long census_pacific = e724->CENSUS_PACIFIC;
              long census_blackafrican = e724->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e724->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e724->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e724->CENSUS_HOUSEUNITS;
              long census_families = e724->CENSUS_FAMILIES;
              long census_households = e724->CENSUS_HOUSEHOLDS;
              long census_husbwife = e724->CENSUS_HUSBWIFE;
              long census_males = e724->CENSUS_MALES;
              long census_females = e724->CENSUS_FEMALES;
              long census_householdschildren = e724->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e724->CENSUS_HISPANIC;
              long v724 = e724->__av;
              __SQL_SUM_AGGREGATE_627INVENTORY1.addOrDelOnZero(se5057.modify(__sql_sum_aggregate_627inventoryinventory_locn), (v723 * (v724 * (census_population * census_medianage))));
            } while ((n724 = n724->nxt));
          }
          e723 = e723->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_628INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e725 = LOCATION.head;
        while (e725) {
          long __sql_sum_aggregate_628inventoryinventory_locn = e725->LOCATION_LOCN;
          long location_zip = e725->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e725->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e725->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e725->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e725->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e725->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e725->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e725->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e725->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e725->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e725->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e725->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e725->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e725->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v725 = e725->__av;
          { //slice
            const HASH_RES_t h352 = CENSUS_mapkey0_idxfn::hash(se5060.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i726 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n726 = &(i726->buckets_[h352 % i726->size_]);
            CENSUS_entry* e726;
            do if ((e726 = n726->obj) && h352 == n726->hash && CENSUS_mapkey0_idxfn::equals(se5060, *e726)) {
              long census_population = e726->CENSUS_POPULATION;
              long census_white = e726->CENSUS_WHITE;
              long census_asian = e726->CENSUS_ASIAN;
              long census_pacific = e726->CENSUS_PACIFIC;
              long census_blackafrican = e726->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e726->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e726->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e726->CENSUS_HOUSEUNITS;
              long census_families = e726->CENSUS_FAMILIES;
              long census_households = e726->CENSUS_HOUSEHOLDS;
              long census_husbwife = e726->CENSUS_HUSBWIFE;
              long census_males = e726->CENSUS_MALES;
              long census_females = e726->CENSUS_FEMALES;
              long census_householdschildren = e726->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e726->CENSUS_HISPANIC;
              long v726 = e726->__av;
              __SQL_SUM_AGGREGATE_628INVENTORY1.addOrDelOnZero(se5059.modify(__sql_sum_aggregate_628inventoryinventory_locn), (v725 * (v726 * (census_population * census_occupiedhouseunits))));
            } while ((n726 = n726->nxt));
          }
          e725 = e725->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_629INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e727 = LOCATION.head;
        while (e727) {
          long __sql_sum_aggregate_629inventoryinventory_locn = e727->LOCATION_LOCN;
          long location_zip = e727->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e727->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e727->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e727->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e727->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e727->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e727->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e727->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e727->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e727->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e727->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e727->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e727->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e727->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v727 = e727->__av;
          { //slice
            const HASH_RES_t h353 = CENSUS_mapkey0_idxfn::hash(se5062.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i728 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n728 = &(i728->buckets_[h353 % i728->size_]);
            CENSUS_entry* e728;
            do if ((e728 = n728->obj) && h353 == n728->hash && CENSUS_mapkey0_idxfn::equals(se5062, *e728)) {
              long census_population = e728->CENSUS_POPULATION;
              long census_white = e728->CENSUS_WHITE;
              long census_asian = e728->CENSUS_ASIAN;
              long census_pacific = e728->CENSUS_PACIFIC;
              long census_blackafrican = e728->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e728->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e728->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e728->CENSUS_HOUSEUNITS;
              long census_families = e728->CENSUS_FAMILIES;
              long census_households = e728->CENSUS_HOUSEHOLDS;
              long census_husbwife = e728->CENSUS_HUSBWIFE;
              long census_males = e728->CENSUS_MALES;
              long census_females = e728->CENSUS_FEMALES;
              long census_householdschildren = e728->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e728->CENSUS_HISPANIC;
              long v728 = e728->__av;
              __SQL_SUM_AGGREGATE_629INVENTORY1.addOrDelOnZero(se5061.modify(__sql_sum_aggregate_629inventoryinventory_locn), (v727 * (v728 * (census_population * census_houseunits))));
            } while ((n728 = n728->nxt));
          }
          e727 = e727->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_630INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e729 = LOCATION.head;
        while (e729) {
          long __sql_sum_aggregate_630inventoryinventory_locn = e729->LOCATION_LOCN;
          long location_zip = e729->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e729->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e729->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e729->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e729->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e729->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e729->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e729->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e729->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e729->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e729->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e729->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e729->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e729->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v729 = e729->__av;
          { //slice
            const HASH_RES_t h354 = CENSUS_mapkey0_idxfn::hash(se5064.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i730 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n730 = &(i730->buckets_[h354 % i730->size_]);
            CENSUS_entry* e730;
            do if ((e730 = n730->obj) && h354 == n730->hash && CENSUS_mapkey0_idxfn::equals(se5064, *e730)) {
              long census_population = e730->CENSUS_POPULATION;
              long census_white = e730->CENSUS_WHITE;
              long census_asian = e730->CENSUS_ASIAN;
              long census_pacific = e730->CENSUS_PACIFIC;
              long census_blackafrican = e730->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e730->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e730->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e730->CENSUS_HOUSEUNITS;
              long census_families = e730->CENSUS_FAMILIES;
              long census_households = e730->CENSUS_HOUSEHOLDS;
              long census_husbwife = e730->CENSUS_HUSBWIFE;
              long census_males = e730->CENSUS_MALES;
              long census_females = e730->CENSUS_FEMALES;
              long census_householdschildren = e730->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e730->CENSUS_HISPANIC;
              long v730 = e730->__av;
              __SQL_SUM_AGGREGATE_630INVENTORY1.addOrDelOnZero(se5063.modify(__sql_sum_aggregate_630inventoryinventory_locn), (v729 * (v730 * (census_population * census_families))));
            } while ((n730 = n730->nxt));
          }
          e729 = e729->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_631INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e731 = LOCATION.head;
        while (e731) {
          long __sql_sum_aggregate_631inventoryinventory_locn = e731->LOCATION_LOCN;
          long location_zip = e731->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e731->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e731->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e731->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e731->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e731->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e731->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e731->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e731->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e731->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e731->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e731->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e731->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e731->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v731 = e731->__av;
          { //slice
            const HASH_RES_t h355 = CENSUS_mapkey0_idxfn::hash(se5066.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i732 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n732 = &(i732->buckets_[h355 % i732->size_]);
            CENSUS_entry* e732;
            do if ((e732 = n732->obj) && h355 == n732->hash && CENSUS_mapkey0_idxfn::equals(se5066, *e732)) {
              long census_population = e732->CENSUS_POPULATION;
              long census_white = e732->CENSUS_WHITE;
              long census_asian = e732->CENSUS_ASIAN;
              long census_pacific = e732->CENSUS_PACIFIC;
              long census_blackafrican = e732->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e732->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e732->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e732->CENSUS_HOUSEUNITS;
              long census_families = e732->CENSUS_FAMILIES;
              long census_households = e732->CENSUS_HOUSEHOLDS;
              long census_husbwife = e732->CENSUS_HUSBWIFE;
              long census_males = e732->CENSUS_MALES;
              long census_females = e732->CENSUS_FEMALES;
              long census_householdschildren = e732->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e732->CENSUS_HISPANIC;
              long v732 = e732->__av;
              __SQL_SUM_AGGREGATE_631INVENTORY1.addOrDelOnZero(se5065.modify(__sql_sum_aggregate_631inventoryinventory_locn), (v731 * (v732 * (census_population * census_households))));
            } while ((n732 = n732->nxt));
          }
          e731 = e731->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_632INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e733 = LOCATION.head;
        while (e733) {
          long __sql_sum_aggregate_632inventoryinventory_locn = e733->LOCATION_LOCN;
          long location_zip = e733->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e733->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e733->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e733->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e733->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e733->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e733->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e733->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e733->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e733->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e733->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e733->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e733->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e733->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v733 = e733->__av;
          { //slice
            const HASH_RES_t h356 = CENSUS_mapkey0_idxfn::hash(se5068.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i734 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n734 = &(i734->buckets_[h356 % i734->size_]);
            CENSUS_entry* e734;
            do if ((e734 = n734->obj) && h356 == n734->hash && CENSUS_mapkey0_idxfn::equals(se5068, *e734)) {
              long census_population = e734->CENSUS_POPULATION;
              long census_white = e734->CENSUS_WHITE;
              long census_asian = e734->CENSUS_ASIAN;
              long census_pacific = e734->CENSUS_PACIFIC;
              long census_blackafrican = e734->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e734->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e734->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e734->CENSUS_HOUSEUNITS;
              long census_families = e734->CENSUS_FAMILIES;
              long census_households = e734->CENSUS_HOUSEHOLDS;
              long census_husbwife = e734->CENSUS_HUSBWIFE;
              long census_males = e734->CENSUS_MALES;
              long census_females = e734->CENSUS_FEMALES;
              long census_householdschildren = e734->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e734->CENSUS_HISPANIC;
              long v734 = e734->__av;
              __SQL_SUM_AGGREGATE_632INVENTORY1.addOrDelOnZero(se5067.modify(__sql_sum_aggregate_632inventoryinventory_locn), (v733 * (v734 * (census_population * census_husbwife))));
            } while ((n734 = n734->nxt));
          }
          e733 = e733->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_633INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e735 = LOCATION.head;
        while (e735) {
          long __sql_sum_aggregate_633inventoryinventory_locn = e735->LOCATION_LOCN;
          long location_zip = e735->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e735->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e735->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e735->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e735->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e735->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e735->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e735->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e735->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e735->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e735->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e735->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e735->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e735->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v735 = e735->__av;
          { //slice
            const HASH_RES_t h357 = CENSUS_mapkey0_idxfn::hash(se5070.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i736 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n736 = &(i736->buckets_[h357 % i736->size_]);
            CENSUS_entry* e736;
            do if ((e736 = n736->obj) && h357 == n736->hash && CENSUS_mapkey0_idxfn::equals(se5070, *e736)) {
              long census_population = e736->CENSUS_POPULATION;
              long census_white = e736->CENSUS_WHITE;
              long census_asian = e736->CENSUS_ASIAN;
              long census_pacific = e736->CENSUS_PACIFIC;
              long census_blackafrican = e736->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e736->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e736->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e736->CENSUS_HOUSEUNITS;
              long census_families = e736->CENSUS_FAMILIES;
              long census_households = e736->CENSUS_HOUSEHOLDS;
              long census_husbwife = e736->CENSUS_HUSBWIFE;
              long census_males = e736->CENSUS_MALES;
              long census_females = e736->CENSUS_FEMALES;
              long census_householdschildren = e736->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e736->CENSUS_HISPANIC;
              long v736 = e736->__av;
              __SQL_SUM_AGGREGATE_633INVENTORY1.addOrDelOnZero(se5069.modify(__sql_sum_aggregate_633inventoryinventory_locn), (v735 * (v736 * (census_population * census_males))));
            } while ((n736 = n736->nxt));
          }
          e735 = e735->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_634INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e737 = LOCATION.head;
        while (e737) {
          long __sql_sum_aggregate_634inventoryinventory_locn = e737->LOCATION_LOCN;
          long location_zip = e737->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e737->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e737->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e737->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e737->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e737->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e737->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e737->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e737->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e737->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e737->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e737->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e737->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e737->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v737 = e737->__av;
          { //slice
            const HASH_RES_t h358 = CENSUS_mapkey0_idxfn::hash(se5072.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i738 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n738 = &(i738->buckets_[h358 % i738->size_]);
            CENSUS_entry* e738;
            do if ((e738 = n738->obj) && h358 == n738->hash && CENSUS_mapkey0_idxfn::equals(se5072, *e738)) {
              long census_population = e738->CENSUS_POPULATION;
              long census_white = e738->CENSUS_WHITE;
              long census_asian = e738->CENSUS_ASIAN;
              long census_pacific = e738->CENSUS_PACIFIC;
              long census_blackafrican = e738->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e738->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e738->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e738->CENSUS_HOUSEUNITS;
              long census_families = e738->CENSUS_FAMILIES;
              long census_households = e738->CENSUS_HOUSEHOLDS;
              long census_husbwife = e738->CENSUS_HUSBWIFE;
              long census_males = e738->CENSUS_MALES;
              long census_females = e738->CENSUS_FEMALES;
              long census_householdschildren = e738->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e738->CENSUS_HISPANIC;
              long v738 = e738->__av;
              __SQL_SUM_AGGREGATE_634INVENTORY1.addOrDelOnZero(se5071.modify(__sql_sum_aggregate_634inventoryinventory_locn), (v737 * (v738 * (census_population * census_females))));
            } while ((n738 = n738->nxt));
          }
          e737 = e737->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_635INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e739 = LOCATION.head;
        while (e739) {
          long __sql_sum_aggregate_635inventoryinventory_locn = e739->LOCATION_LOCN;
          long location_zip = e739->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e739->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e739->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e739->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e739->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e739->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e739->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e739->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e739->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e739->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e739->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e739->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e739->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e739->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v739 = e739->__av;
          { //slice
            const HASH_RES_t h359 = CENSUS_mapkey0_idxfn::hash(se5074.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i740 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n740 = &(i740->buckets_[h359 % i740->size_]);
            CENSUS_entry* e740;
            do if ((e740 = n740->obj) && h359 == n740->hash && CENSUS_mapkey0_idxfn::equals(se5074, *e740)) {
              long census_population = e740->CENSUS_POPULATION;
              long census_white = e740->CENSUS_WHITE;
              long census_asian = e740->CENSUS_ASIAN;
              long census_pacific = e740->CENSUS_PACIFIC;
              long census_blackafrican = e740->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e740->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e740->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e740->CENSUS_HOUSEUNITS;
              long census_families = e740->CENSUS_FAMILIES;
              long census_households = e740->CENSUS_HOUSEHOLDS;
              long census_husbwife = e740->CENSUS_HUSBWIFE;
              long census_males = e740->CENSUS_MALES;
              long census_females = e740->CENSUS_FEMALES;
              long census_householdschildren = e740->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e740->CENSUS_HISPANIC;
              long v740 = e740->__av;
              __SQL_SUM_AGGREGATE_635INVENTORY1.addOrDelOnZero(se5073.modify(__sql_sum_aggregate_635inventoryinventory_locn), (v739 * (v740 * (census_population * census_householdschildren))));
            } while ((n740 = n740->nxt));
          }
          e739 = e739->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_636INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e741 = LOCATION.head;
        while (e741) {
          long __sql_sum_aggregate_636inventoryinventory_locn = e741->LOCATION_LOCN;
          long location_zip = e741->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e741->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e741->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e741->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e741->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e741->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e741->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e741->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e741->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e741->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e741->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e741->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e741->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e741->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v741 = e741->__av;
          { //slice
            const HASH_RES_t h360 = CENSUS_mapkey0_idxfn::hash(se5076.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i742 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n742 = &(i742->buckets_[h360 % i742->size_]);
            CENSUS_entry* e742;
            do if ((e742 = n742->obj) && h360 == n742->hash && CENSUS_mapkey0_idxfn::equals(se5076, *e742)) {
              long census_population = e742->CENSUS_POPULATION;
              long census_white = e742->CENSUS_WHITE;
              long census_asian = e742->CENSUS_ASIAN;
              long census_pacific = e742->CENSUS_PACIFIC;
              long census_blackafrican = e742->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e742->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e742->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e742->CENSUS_HOUSEUNITS;
              long census_families = e742->CENSUS_FAMILIES;
              long census_households = e742->CENSUS_HOUSEHOLDS;
              long census_husbwife = e742->CENSUS_HUSBWIFE;
              long census_males = e742->CENSUS_MALES;
              long census_females = e742->CENSUS_FEMALES;
              long census_householdschildren = e742->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e742->CENSUS_HISPANIC;
              long v742 = e742->__av;
              __SQL_SUM_AGGREGATE_636INVENTORY1.addOrDelOnZero(se5075.modify(__sql_sum_aggregate_636inventoryinventory_locn), (v741 * (v742 * (census_population * census_hispanic))));
            } while ((n742 = n742->nxt));
          }
          e741 = e741->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_640 = 0.0;
      __SQL_SUM_AGGREGATE_645 = 0.0;
      __SQL_SUM_AGGREGATE_647INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e743 = LOCATION.head;
        while (e743) {
          long __sql_sum_aggregate_647inventoryinventory_locn = e743->LOCATION_LOCN;
          long location_zip = e743->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e743->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e743->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e743->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e743->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e743->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e743->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e743->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e743->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e743->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e743->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e743->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e743->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e743->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v743 = e743->__av;
          { //slice
            const HASH_RES_t h361 = CENSUS_mapkey0_idxfn::hash(se5080.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i744 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n744 = &(i744->buckets_[h361 % i744->size_]);
            CENSUS_entry* e744;
            do if ((e744 = n744->obj) && h361 == n744->hash && CENSUS_mapkey0_idxfn::equals(se5080, *e744)) {
              long census_population = e744->CENSUS_POPULATION;
              long census_white = e744->CENSUS_WHITE;
              long census_asian = e744->CENSUS_ASIAN;
              long census_pacific = e744->CENSUS_PACIFIC;
              long census_blackafrican = e744->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e744->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e744->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e744->CENSUS_HOUSEUNITS;
              long census_families = e744->CENSUS_FAMILIES;
              long census_households = e744->CENSUS_HOUSEHOLDS;
              long census_husbwife = e744->CENSUS_HUSBWIFE;
              long census_males = e744->CENSUS_MALES;
              long census_females = e744->CENSUS_FEMALES;
              long census_householdschildren = e744->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e744->CENSUS_HISPANIC;
              long v744 = e744->__av;
              __SQL_SUM_AGGREGATE_647INVENTORY1.addOrDelOnZero(se5079.modify(__sql_sum_aggregate_647inventoryinventory_locn), (v743 * (v744 * (census_white * census_white))));
            } while ((n744 = n744->nxt));
          }
          e743 = e743->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_648INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e745 = LOCATION.head;
        while (e745) {
          long __sql_sum_aggregate_648inventoryinventory_locn = e745->LOCATION_LOCN;
          long location_zip = e745->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e745->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e745->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e745->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e745->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e745->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e745->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e745->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e745->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e745->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e745->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e745->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e745->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e745->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v745 = e745->__av;
          { //slice
            const HASH_RES_t h362 = CENSUS_mapkey0_idxfn::hash(se5082.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i746 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n746 = &(i746->buckets_[h362 % i746->size_]);
            CENSUS_entry* e746;
            do if ((e746 = n746->obj) && h362 == n746->hash && CENSUS_mapkey0_idxfn::equals(se5082, *e746)) {
              long census_population = e746->CENSUS_POPULATION;
              long census_white = e746->CENSUS_WHITE;
              long census_asian = e746->CENSUS_ASIAN;
              long census_pacific = e746->CENSUS_PACIFIC;
              long census_blackafrican = e746->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e746->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e746->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e746->CENSUS_HOUSEUNITS;
              long census_families = e746->CENSUS_FAMILIES;
              long census_households = e746->CENSUS_HOUSEHOLDS;
              long census_husbwife = e746->CENSUS_HUSBWIFE;
              long census_males = e746->CENSUS_MALES;
              long census_females = e746->CENSUS_FEMALES;
              long census_householdschildren = e746->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e746->CENSUS_HISPANIC;
              long v746 = e746->__av;
              __SQL_SUM_AGGREGATE_648INVENTORY1.addOrDelOnZero(se5081.modify(__sql_sum_aggregate_648inventoryinventory_locn), (v745 * (v746 * (census_white * census_asian))));
            } while ((n746 = n746->nxt));
          }
          e745 = e745->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_649INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e747 = LOCATION.head;
        while (e747) {
          long __sql_sum_aggregate_649inventoryinventory_locn = e747->LOCATION_LOCN;
          long location_zip = e747->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e747->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e747->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e747->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e747->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e747->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e747->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e747->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e747->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e747->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e747->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e747->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e747->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e747->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v747 = e747->__av;
          { //slice
            const HASH_RES_t h363 = CENSUS_mapkey0_idxfn::hash(se5084.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i748 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n748 = &(i748->buckets_[h363 % i748->size_]);
            CENSUS_entry* e748;
            do if ((e748 = n748->obj) && h363 == n748->hash && CENSUS_mapkey0_idxfn::equals(se5084, *e748)) {
              long census_population = e748->CENSUS_POPULATION;
              long census_white = e748->CENSUS_WHITE;
              long census_asian = e748->CENSUS_ASIAN;
              long census_pacific = e748->CENSUS_PACIFIC;
              long census_blackafrican = e748->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e748->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e748->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e748->CENSUS_HOUSEUNITS;
              long census_families = e748->CENSUS_FAMILIES;
              long census_households = e748->CENSUS_HOUSEHOLDS;
              long census_husbwife = e748->CENSUS_HUSBWIFE;
              long census_males = e748->CENSUS_MALES;
              long census_females = e748->CENSUS_FEMALES;
              long census_householdschildren = e748->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e748->CENSUS_HISPANIC;
              long v748 = e748->__av;
              __SQL_SUM_AGGREGATE_649INVENTORY1.addOrDelOnZero(se5083.modify(__sql_sum_aggregate_649inventoryinventory_locn), (v747 * (v748 * (census_white * census_pacific))));
            } while ((n748 = n748->nxt));
          }
          e747 = e747->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_650INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e749 = LOCATION.head;
        while (e749) {
          long __sql_sum_aggregate_650inventoryinventory_locn = e749->LOCATION_LOCN;
          long location_zip = e749->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e749->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e749->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e749->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e749->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e749->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e749->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e749->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e749->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e749->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e749->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e749->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e749->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e749->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v749 = e749->__av;
          { //slice
            const HASH_RES_t h364 = CENSUS_mapkey0_idxfn::hash(se5086.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i750 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n750 = &(i750->buckets_[h364 % i750->size_]);
            CENSUS_entry* e750;
            do if ((e750 = n750->obj) && h364 == n750->hash && CENSUS_mapkey0_idxfn::equals(se5086, *e750)) {
              long census_population = e750->CENSUS_POPULATION;
              long census_white = e750->CENSUS_WHITE;
              long census_asian = e750->CENSUS_ASIAN;
              long census_pacific = e750->CENSUS_PACIFIC;
              long census_blackafrican = e750->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e750->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e750->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e750->CENSUS_HOUSEUNITS;
              long census_families = e750->CENSUS_FAMILIES;
              long census_households = e750->CENSUS_HOUSEHOLDS;
              long census_husbwife = e750->CENSUS_HUSBWIFE;
              long census_males = e750->CENSUS_MALES;
              long census_females = e750->CENSUS_FEMALES;
              long census_householdschildren = e750->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e750->CENSUS_HISPANIC;
              long v750 = e750->__av;
              __SQL_SUM_AGGREGATE_650INVENTORY1.addOrDelOnZero(se5085.modify(__sql_sum_aggregate_650inventoryinventory_locn), (v749 * (v750 * (census_white * census_blackafrican))));
            } while ((n750 = n750->nxt));
          }
          e749 = e749->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_651 = 0.0;
      __SQL_SUM_AGGREGATE_651INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e751 = LOCATION.head;
        while (e751) {
          long __sql_sum_aggregate_651inventoryinventory_locn = e751->LOCATION_LOCN;
          long location_zip = e751->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e751->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e751->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e751->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e751->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e751->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e751->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e751->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e751->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e751->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e751->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e751->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e751->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e751->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v751 = e751->__av;
          { //slice
            const HASH_RES_t h365 = CENSUS_mapkey0_idxfn::hash(se5089.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i752 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n752 = &(i752->buckets_[h365 % i752->size_]);
            CENSUS_entry* e752;
            do if ((e752 = n752->obj) && h365 == n752->hash && CENSUS_mapkey0_idxfn::equals(se5089, *e752)) {
              long census_population = e752->CENSUS_POPULATION;
              long census_white = e752->CENSUS_WHITE;
              long census_asian = e752->CENSUS_ASIAN;
              long census_pacific = e752->CENSUS_PACIFIC;
              long census_blackafrican = e752->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e752->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e752->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e752->CENSUS_HOUSEUNITS;
              long census_families = e752->CENSUS_FAMILIES;
              long census_households = e752->CENSUS_HOUSEHOLDS;
              long census_husbwife = e752->CENSUS_HUSBWIFE;
              long census_males = e752->CENSUS_MALES;
              long census_females = e752->CENSUS_FEMALES;
              long census_householdschildren = e752->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e752->CENSUS_HISPANIC;
              long v752 = e752->__av;
              __SQL_SUM_AGGREGATE_651INVENTORY1.addOrDelOnZero(se5088.modify(__sql_sum_aggregate_651inventoryinventory_locn), (v751 * (v752 * (census_white * census_medianage))));
            } while ((n752 = n752->nxt));
          }
          e751 = e751->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_652INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e753 = LOCATION.head;
        while (e753) {
          long __sql_sum_aggregate_652inventoryinventory_locn = e753->LOCATION_LOCN;
          long location_zip = e753->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e753->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e753->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e753->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e753->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e753->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e753->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e753->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e753->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e753->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e753->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e753->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e753->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e753->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v753 = e753->__av;
          { //slice
            const HASH_RES_t h366 = CENSUS_mapkey0_idxfn::hash(se5091.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i754 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n754 = &(i754->buckets_[h366 % i754->size_]);
            CENSUS_entry* e754;
            do if ((e754 = n754->obj) && h366 == n754->hash && CENSUS_mapkey0_idxfn::equals(se5091, *e754)) {
              long census_population = e754->CENSUS_POPULATION;
              long census_white = e754->CENSUS_WHITE;
              long census_asian = e754->CENSUS_ASIAN;
              long census_pacific = e754->CENSUS_PACIFIC;
              long census_blackafrican = e754->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e754->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e754->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e754->CENSUS_HOUSEUNITS;
              long census_families = e754->CENSUS_FAMILIES;
              long census_households = e754->CENSUS_HOUSEHOLDS;
              long census_husbwife = e754->CENSUS_HUSBWIFE;
              long census_males = e754->CENSUS_MALES;
              long census_females = e754->CENSUS_FEMALES;
              long census_householdschildren = e754->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e754->CENSUS_HISPANIC;
              long v754 = e754->__av;
              __SQL_SUM_AGGREGATE_652INVENTORY1.addOrDelOnZero(se5090.modify(__sql_sum_aggregate_652inventoryinventory_locn), (v753 * (v754 * (census_white * census_occupiedhouseunits))));
            } while ((n754 = n754->nxt));
          }
          e753 = e753->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_653INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e755 = LOCATION.head;
        while (e755) {
          long __sql_sum_aggregate_653inventoryinventory_locn = e755->LOCATION_LOCN;
          long location_zip = e755->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e755->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e755->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e755->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e755->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e755->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e755->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e755->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e755->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e755->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e755->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e755->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e755->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e755->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v755 = e755->__av;
          { //slice
            const HASH_RES_t h367 = CENSUS_mapkey0_idxfn::hash(se5093.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i756 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n756 = &(i756->buckets_[h367 % i756->size_]);
            CENSUS_entry* e756;
            do if ((e756 = n756->obj) && h367 == n756->hash && CENSUS_mapkey0_idxfn::equals(se5093, *e756)) {
              long census_population = e756->CENSUS_POPULATION;
              long census_white = e756->CENSUS_WHITE;
              long census_asian = e756->CENSUS_ASIAN;
              long census_pacific = e756->CENSUS_PACIFIC;
              long census_blackafrican = e756->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e756->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e756->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e756->CENSUS_HOUSEUNITS;
              long census_families = e756->CENSUS_FAMILIES;
              long census_households = e756->CENSUS_HOUSEHOLDS;
              long census_husbwife = e756->CENSUS_HUSBWIFE;
              long census_males = e756->CENSUS_MALES;
              long census_females = e756->CENSUS_FEMALES;
              long census_householdschildren = e756->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e756->CENSUS_HISPANIC;
              long v756 = e756->__av;
              __SQL_SUM_AGGREGATE_653INVENTORY1.addOrDelOnZero(se5092.modify(__sql_sum_aggregate_653inventoryinventory_locn), (v755 * (v756 * (census_white * census_houseunits))));
            } while ((n756 = n756->nxt));
          }
          e755 = e755->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_654INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e757 = LOCATION.head;
        while (e757) {
          long __sql_sum_aggregate_654inventoryinventory_locn = e757->LOCATION_LOCN;
          long location_zip = e757->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e757->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e757->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e757->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e757->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e757->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e757->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e757->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e757->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e757->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e757->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e757->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e757->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e757->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v757 = e757->__av;
          { //slice
            const HASH_RES_t h368 = CENSUS_mapkey0_idxfn::hash(se5095.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i758 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n758 = &(i758->buckets_[h368 % i758->size_]);
            CENSUS_entry* e758;
            do if ((e758 = n758->obj) && h368 == n758->hash && CENSUS_mapkey0_idxfn::equals(se5095, *e758)) {
              long census_population = e758->CENSUS_POPULATION;
              long census_white = e758->CENSUS_WHITE;
              long census_asian = e758->CENSUS_ASIAN;
              long census_pacific = e758->CENSUS_PACIFIC;
              long census_blackafrican = e758->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e758->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e758->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e758->CENSUS_HOUSEUNITS;
              long census_families = e758->CENSUS_FAMILIES;
              long census_households = e758->CENSUS_HOUSEHOLDS;
              long census_husbwife = e758->CENSUS_HUSBWIFE;
              long census_males = e758->CENSUS_MALES;
              long census_females = e758->CENSUS_FEMALES;
              long census_householdschildren = e758->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e758->CENSUS_HISPANIC;
              long v758 = e758->__av;
              __SQL_SUM_AGGREGATE_654INVENTORY1.addOrDelOnZero(se5094.modify(__sql_sum_aggregate_654inventoryinventory_locn), (v757 * (v758 * (census_white * census_families))));
            } while ((n758 = n758->nxt));
          }
          e757 = e757->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_655INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e759 = LOCATION.head;
        while (e759) {
          long __sql_sum_aggregate_655inventoryinventory_locn = e759->LOCATION_LOCN;
          long location_zip = e759->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e759->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e759->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e759->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e759->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e759->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e759->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e759->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e759->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e759->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e759->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e759->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e759->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e759->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v759 = e759->__av;
          { //slice
            const HASH_RES_t h369 = CENSUS_mapkey0_idxfn::hash(se5097.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i760 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n760 = &(i760->buckets_[h369 % i760->size_]);
            CENSUS_entry* e760;
            do if ((e760 = n760->obj) && h369 == n760->hash && CENSUS_mapkey0_idxfn::equals(se5097, *e760)) {
              long census_population = e760->CENSUS_POPULATION;
              long census_white = e760->CENSUS_WHITE;
              long census_asian = e760->CENSUS_ASIAN;
              long census_pacific = e760->CENSUS_PACIFIC;
              long census_blackafrican = e760->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e760->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e760->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e760->CENSUS_HOUSEUNITS;
              long census_families = e760->CENSUS_FAMILIES;
              long census_households = e760->CENSUS_HOUSEHOLDS;
              long census_husbwife = e760->CENSUS_HUSBWIFE;
              long census_males = e760->CENSUS_MALES;
              long census_females = e760->CENSUS_FEMALES;
              long census_householdschildren = e760->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e760->CENSUS_HISPANIC;
              long v760 = e760->__av;
              __SQL_SUM_AGGREGATE_655INVENTORY1.addOrDelOnZero(se5096.modify(__sql_sum_aggregate_655inventoryinventory_locn), (v759 * (v760 * (census_white * census_households))));
            } while ((n760 = n760->nxt));
          }
          e759 = e759->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_656INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e761 = LOCATION.head;
        while (e761) {
          long __sql_sum_aggregate_656inventoryinventory_locn = e761->LOCATION_LOCN;
          long location_zip = e761->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e761->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e761->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e761->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e761->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e761->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e761->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e761->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e761->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e761->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e761->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e761->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e761->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e761->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v761 = e761->__av;
          { //slice
            const HASH_RES_t h370 = CENSUS_mapkey0_idxfn::hash(se5099.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i762 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n762 = &(i762->buckets_[h370 % i762->size_]);
            CENSUS_entry* e762;
            do if ((e762 = n762->obj) && h370 == n762->hash && CENSUS_mapkey0_idxfn::equals(se5099, *e762)) {
              long census_population = e762->CENSUS_POPULATION;
              long census_white = e762->CENSUS_WHITE;
              long census_asian = e762->CENSUS_ASIAN;
              long census_pacific = e762->CENSUS_PACIFIC;
              long census_blackafrican = e762->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e762->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e762->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e762->CENSUS_HOUSEUNITS;
              long census_families = e762->CENSUS_FAMILIES;
              long census_households = e762->CENSUS_HOUSEHOLDS;
              long census_husbwife = e762->CENSUS_HUSBWIFE;
              long census_males = e762->CENSUS_MALES;
              long census_females = e762->CENSUS_FEMALES;
              long census_householdschildren = e762->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e762->CENSUS_HISPANIC;
              long v762 = e762->__av;
              __SQL_SUM_AGGREGATE_656INVENTORY1.addOrDelOnZero(se5098.modify(__sql_sum_aggregate_656inventoryinventory_locn), (v761 * (v762 * (census_white * census_husbwife))));
            } while ((n762 = n762->nxt));
          }
          e761 = e761->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_657INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e763 = LOCATION.head;
        while (e763) {
          long __sql_sum_aggregate_657inventoryinventory_locn = e763->LOCATION_LOCN;
          long location_zip = e763->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e763->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e763->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e763->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e763->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e763->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e763->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e763->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e763->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e763->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e763->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e763->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e763->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e763->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v763 = e763->__av;
          { //slice
            const HASH_RES_t h371 = CENSUS_mapkey0_idxfn::hash(se5101.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i764 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n764 = &(i764->buckets_[h371 % i764->size_]);
            CENSUS_entry* e764;
            do if ((e764 = n764->obj) && h371 == n764->hash && CENSUS_mapkey0_idxfn::equals(se5101, *e764)) {
              long census_population = e764->CENSUS_POPULATION;
              long census_white = e764->CENSUS_WHITE;
              long census_asian = e764->CENSUS_ASIAN;
              long census_pacific = e764->CENSUS_PACIFIC;
              long census_blackafrican = e764->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e764->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e764->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e764->CENSUS_HOUSEUNITS;
              long census_families = e764->CENSUS_FAMILIES;
              long census_households = e764->CENSUS_HOUSEHOLDS;
              long census_husbwife = e764->CENSUS_HUSBWIFE;
              long census_males = e764->CENSUS_MALES;
              long census_females = e764->CENSUS_FEMALES;
              long census_householdschildren = e764->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e764->CENSUS_HISPANIC;
              long v764 = e764->__av;
              __SQL_SUM_AGGREGATE_657INVENTORY1.addOrDelOnZero(se5100.modify(__sql_sum_aggregate_657inventoryinventory_locn), (v763 * (v764 * (census_white * census_males))));
            } while ((n764 = n764->nxt));
          }
          e763 = e763->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_658INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e765 = LOCATION.head;
        while (e765) {
          long __sql_sum_aggregate_658inventoryinventory_locn = e765->LOCATION_LOCN;
          long location_zip = e765->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e765->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e765->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e765->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e765->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e765->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e765->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e765->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e765->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e765->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e765->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e765->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e765->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e765->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v765 = e765->__av;
          { //slice
            const HASH_RES_t h372 = CENSUS_mapkey0_idxfn::hash(se5103.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i766 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n766 = &(i766->buckets_[h372 % i766->size_]);
            CENSUS_entry* e766;
            do if ((e766 = n766->obj) && h372 == n766->hash && CENSUS_mapkey0_idxfn::equals(se5103, *e766)) {
              long census_population = e766->CENSUS_POPULATION;
              long census_white = e766->CENSUS_WHITE;
              long census_asian = e766->CENSUS_ASIAN;
              long census_pacific = e766->CENSUS_PACIFIC;
              long census_blackafrican = e766->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e766->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e766->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e766->CENSUS_HOUSEUNITS;
              long census_families = e766->CENSUS_FAMILIES;
              long census_households = e766->CENSUS_HOUSEHOLDS;
              long census_husbwife = e766->CENSUS_HUSBWIFE;
              long census_males = e766->CENSUS_MALES;
              long census_females = e766->CENSUS_FEMALES;
              long census_householdschildren = e766->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e766->CENSUS_HISPANIC;
              long v766 = e766->__av;
              __SQL_SUM_AGGREGATE_658INVENTORY1.addOrDelOnZero(se5102.modify(__sql_sum_aggregate_658inventoryinventory_locn), (v765 * (v766 * (census_white * census_females))));
            } while ((n766 = n766->nxt));
          }
          e765 = e765->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_659INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e767 = LOCATION.head;
        while (e767) {
          long __sql_sum_aggregate_659inventoryinventory_locn = e767->LOCATION_LOCN;
          long location_zip = e767->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e767->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e767->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e767->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e767->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e767->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e767->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e767->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e767->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e767->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e767->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e767->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e767->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e767->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v767 = e767->__av;
          { //slice
            const HASH_RES_t h373 = CENSUS_mapkey0_idxfn::hash(se5105.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i768 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n768 = &(i768->buckets_[h373 % i768->size_]);
            CENSUS_entry* e768;
            do if ((e768 = n768->obj) && h373 == n768->hash && CENSUS_mapkey0_idxfn::equals(se5105, *e768)) {
              long census_population = e768->CENSUS_POPULATION;
              long census_white = e768->CENSUS_WHITE;
              long census_asian = e768->CENSUS_ASIAN;
              long census_pacific = e768->CENSUS_PACIFIC;
              long census_blackafrican = e768->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e768->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e768->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e768->CENSUS_HOUSEUNITS;
              long census_families = e768->CENSUS_FAMILIES;
              long census_households = e768->CENSUS_HOUSEHOLDS;
              long census_husbwife = e768->CENSUS_HUSBWIFE;
              long census_males = e768->CENSUS_MALES;
              long census_females = e768->CENSUS_FEMALES;
              long census_householdschildren = e768->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e768->CENSUS_HISPANIC;
              long v768 = e768->__av;
              __SQL_SUM_AGGREGATE_659INVENTORY1.addOrDelOnZero(se5104.modify(__sql_sum_aggregate_659inventoryinventory_locn), (v767 * (v768 * (census_white * census_householdschildren))));
            } while ((n768 = n768->nxt));
          }
          e767 = e767->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_660INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e769 = LOCATION.head;
        while (e769) {
          long __sql_sum_aggregate_660inventoryinventory_locn = e769->LOCATION_LOCN;
          long location_zip = e769->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e769->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e769->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e769->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e769->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e769->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e769->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e769->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e769->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e769->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e769->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e769->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e769->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e769->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v769 = e769->__av;
          { //slice
            const HASH_RES_t h374 = CENSUS_mapkey0_idxfn::hash(se5107.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i770 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n770 = &(i770->buckets_[h374 % i770->size_]);
            CENSUS_entry* e770;
            do if ((e770 = n770->obj) && h374 == n770->hash && CENSUS_mapkey0_idxfn::equals(se5107, *e770)) {
              long census_population = e770->CENSUS_POPULATION;
              long census_white = e770->CENSUS_WHITE;
              long census_asian = e770->CENSUS_ASIAN;
              long census_pacific = e770->CENSUS_PACIFIC;
              long census_blackafrican = e770->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e770->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e770->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e770->CENSUS_HOUSEUNITS;
              long census_families = e770->CENSUS_FAMILIES;
              long census_households = e770->CENSUS_HOUSEHOLDS;
              long census_husbwife = e770->CENSUS_HUSBWIFE;
              long census_males = e770->CENSUS_MALES;
              long census_females = e770->CENSUS_FEMALES;
              long census_householdschildren = e770->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e770->CENSUS_HISPANIC;
              long v770 = e770->__av;
              __SQL_SUM_AGGREGATE_660INVENTORY1.addOrDelOnZero(se5106.modify(__sql_sum_aggregate_660inventoryinventory_locn), (v769 * (v770 * (census_white * census_hispanic))));
            } while ((n770 = n770->nxt));
          }
          e769 = e769->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_664 = 0.0;
      __SQL_SUM_AGGREGATE_669 = 0.0;
      __SQL_SUM_AGGREGATE_671INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e771 = LOCATION.head;
        while (e771) {
          long __sql_sum_aggregate_671inventoryinventory_locn = e771->LOCATION_LOCN;
          long location_zip = e771->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e771->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e771->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e771->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e771->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e771->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e771->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e771->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e771->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e771->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e771->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e771->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e771->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e771->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v771 = e771->__av;
          { //slice
            const HASH_RES_t h375 = CENSUS_mapkey0_idxfn::hash(se5111.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i772 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n772 = &(i772->buckets_[h375 % i772->size_]);
            CENSUS_entry* e772;
            do if ((e772 = n772->obj) && h375 == n772->hash && CENSUS_mapkey0_idxfn::equals(se5111, *e772)) {
              long census_population = e772->CENSUS_POPULATION;
              long census_white = e772->CENSUS_WHITE;
              long census_asian = e772->CENSUS_ASIAN;
              long census_pacific = e772->CENSUS_PACIFIC;
              long census_blackafrican = e772->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e772->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e772->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e772->CENSUS_HOUSEUNITS;
              long census_families = e772->CENSUS_FAMILIES;
              long census_households = e772->CENSUS_HOUSEHOLDS;
              long census_husbwife = e772->CENSUS_HUSBWIFE;
              long census_males = e772->CENSUS_MALES;
              long census_females = e772->CENSUS_FEMALES;
              long census_householdschildren = e772->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e772->CENSUS_HISPANIC;
              long v772 = e772->__av;
              __SQL_SUM_AGGREGATE_671INVENTORY1.addOrDelOnZero(se5110.modify(__sql_sum_aggregate_671inventoryinventory_locn), (v771 * (v772 * (census_asian * census_asian))));
            } while ((n772 = n772->nxt));
          }
          e771 = e771->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_672INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e773 = LOCATION.head;
        while (e773) {
          long __sql_sum_aggregate_672inventoryinventory_locn = e773->LOCATION_LOCN;
          long location_zip = e773->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e773->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e773->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e773->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e773->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e773->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e773->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e773->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e773->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e773->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e773->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e773->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e773->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e773->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v773 = e773->__av;
          { //slice
            const HASH_RES_t h376 = CENSUS_mapkey0_idxfn::hash(se5113.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i774 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n774 = &(i774->buckets_[h376 % i774->size_]);
            CENSUS_entry* e774;
            do if ((e774 = n774->obj) && h376 == n774->hash && CENSUS_mapkey0_idxfn::equals(se5113, *e774)) {
              long census_population = e774->CENSUS_POPULATION;
              long census_white = e774->CENSUS_WHITE;
              long census_asian = e774->CENSUS_ASIAN;
              long census_pacific = e774->CENSUS_PACIFIC;
              long census_blackafrican = e774->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e774->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e774->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e774->CENSUS_HOUSEUNITS;
              long census_families = e774->CENSUS_FAMILIES;
              long census_households = e774->CENSUS_HOUSEHOLDS;
              long census_husbwife = e774->CENSUS_HUSBWIFE;
              long census_males = e774->CENSUS_MALES;
              long census_females = e774->CENSUS_FEMALES;
              long census_householdschildren = e774->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e774->CENSUS_HISPANIC;
              long v774 = e774->__av;
              __SQL_SUM_AGGREGATE_672INVENTORY1.addOrDelOnZero(se5112.modify(__sql_sum_aggregate_672inventoryinventory_locn), (v773 * (v774 * (census_asian * census_pacific))));
            } while ((n774 = n774->nxt));
          }
          e773 = e773->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_673INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e775 = LOCATION.head;
        while (e775) {
          long __sql_sum_aggregate_673inventoryinventory_locn = e775->LOCATION_LOCN;
          long location_zip = e775->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e775->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e775->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e775->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e775->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e775->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e775->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e775->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e775->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e775->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e775->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e775->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e775->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e775->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v775 = e775->__av;
          { //slice
            const HASH_RES_t h377 = CENSUS_mapkey0_idxfn::hash(se5115.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i776 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n776 = &(i776->buckets_[h377 % i776->size_]);
            CENSUS_entry* e776;
            do if ((e776 = n776->obj) && h377 == n776->hash && CENSUS_mapkey0_idxfn::equals(se5115, *e776)) {
              long census_population = e776->CENSUS_POPULATION;
              long census_white = e776->CENSUS_WHITE;
              long census_asian = e776->CENSUS_ASIAN;
              long census_pacific = e776->CENSUS_PACIFIC;
              long census_blackafrican = e776->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e776->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e776->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e776->CENSUS_HOUSEUNITS;
              long census_families = e776->CENSUS_FAMILIES;
              long census_households = e776->CENSUS_HOUSEHOLDS;
              long census_husbwife = e776->CENSUS_HUSBWIFE;
              long census_males = e776->CENSUS_MALES;
              long census_females = e776->CENSUS_FEMALES;
              long census_householdschildren = e776->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e776->CENSUS_HISPANIC;
              long v776 = e776->__av;
              __SQL_SUM_AGGREGATE_673INVENTORY1.addOrDelOnZero(se5114.modify(__sql_sum_aggregate_673inventoryinventory_locn), (v775 * (v776 * (census_asian * census_blackafrican))));
            } while ((n776 = n776->nxt));
          }
          e775 = e775->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_674 = 0.0;
      __SQL_SUM_AGGREGATE_674INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e777 = LOCATION.head;
        while (e777) {
          long __sql_sum_aggregate_674inventoryinventory_locn = e777->LOCATION_LOCN;
          long location_zip = e777->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e777->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e777->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e777->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e777->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e777->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e777->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e777->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e777->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e777->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e777->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e777->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e777->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e777->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v777 = e777->__av;
          { //slice
            const HASH_RES_t h378 = CENSUS_mapkey0_idxfn::hash(se5118.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i778 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n778 = &(i778->buckets_[h378 % i778->size_]);
            CENSUS_entry* e778;
            do if ((e778 = n778->obj) && h378 == n778->hash && CENSUS_mapkey0_idxfn::equals(se5118, *e778)) {
              long census_population = e778->CENSUS_POPULATION;
              long census_white = e778->CENSUS_WHITE;
              long census_asian = e778->CENSUS_ASIAN;
              long census_pacific = e778->CENSUS_PACIFIC;
              long census_blackafrican = e778->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e778->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e778->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e778->CENSUS_HOUSEUNITS;
              long census_families = e778->CENSUS_FAMILIES;
              long census_households = e778->CENSUS_HOUSEHOLDS;
              long census_husbwife = e778->CENSUS_HUSBWIFE;
              long census_males = e778->CENSUS_MALES;
              long census_females = e778->CENSUS_FEMALES;
              long census_householdschildren = e778->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e778->CENSUS_HISPANIC;
              long v778 = e778->__av;
              __SQL_SUM_AGGREGATE_674INVENTORY1.addOrDelOnZero(se5117.modify(__sql_sum_aggregate_674inventoryinventory_locn), (v777 * (v778 * (census_asian * census_medianage))));
            } while ((n778 = n778->nxt));
          }
          e777 = e777->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_675INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e779 = LOCATION.head;
        while (e779) {
          long __sql_sum_aggregate_675inventoryinventory_locn = e779->LOCATION_LOCN;
          long location_zip = e779->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e779->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e779->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e779->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e779->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e779->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e779->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e779->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e779->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e779->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e779->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e779->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e779->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e779->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v779 = e779->__av;
          { //slice
            const HASH_RES_t h379 = CENSUS_mapkey0_idxfn::hash(se5120.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i780 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n780 = &(i780->buckets_[h379 % i780->size_]);
            CENSUS_entry* e780;
            do if ((e780 = n780->obj) && h379 == n780->hash && CENSUS_mapkey0_idxfn::equals(se5120, *e780)) {
              long census_population = e780->CENSUS_POPULATION;
              long census_white = e780->CENSUS_WHITE;
              long census_asian = e780->CENSUS_ASIAN;
              long census_pacific = e780->CENSUS_PACIFIC;
              long census_blackafrican = e780->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e780->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e780->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e780->CENSUS_HOUSEUNITS;
              long census_families = e780->CENSUS_FAMILIES;
              long census_households = e780->CENSUS_HOUSEHOLDS;
              long census_husbwife = e780->CENSUS_HUSBWIFE;
              long census_males = e780->CENSUS_MALES;
              long census_females = e780->CENSUS_FEMALES;
              long census_householdschildren = e780->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e780->CENSUS_HISPANIC;
              long v780 = e780->__av;
              __SQL_SUM_AGGREGATE_675INVENTORY1.addOrDelOnZero(se5119.modify(__sql_sum_aggregate_675inventoryinventory_locn), (v779 * (v780 * (census_asian * census_occupiedhouseunits))));
            } while ((n780 = n780->nxt));
          }
          e779 = e779->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_676INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e781 = LOCATION.head;
        while (e781) {
          long __sql_sum_aggregate_676inventoryinventory_locn = e781->LOCATION_LOCN;
          long location_zip = e781->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e781->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e781->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e781->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e781->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e781->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e781->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e781->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e781->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e781->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e781->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e781->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e781->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e781->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v781 = e781->__av;
          { //slice
            const HASH_RES_t h380 = CENSUS_mapkey0_idxfn::hash(se5122.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i782 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n782 = &(i782->buckets_[h380 % i782->size_]);
            CENSUS_entry* e782;
            do if ((e782 = n782->obj) && h380 == n782->hash && CENSUS_mapkey0_idxfn::equals(se5122, *e782)) {
              long census_population = e782->CENSUS_POPULATION;
              long census_white = e782->CENSUS_WHITE;
              long census_asian = e782->CENSUS_ASIAN;
              long census_pacific = e782->CENSUS_PACIFIC;
              long census_blackafrican = e782->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e782->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e782->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e782->CENSUS_HOUSEUNITS;
              long census_families = e782->CENSUS_FAMILIES;
              long census_households = e782->CENSUS_HOUSEHOLDS;
              long census_husbwife = e782->CENSUS_HUSBWIFE;
              long census_males = e782->CENSUS_MALES;
              long census_females = e782->CENSUS_FEMALES;
              long census_householdschildren = e782->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e782->CENSUS_HISPANIC;
              long v782 = e782->__av;
              __SQL_SUM_AGGREGATE_676INVENTORY1.addOrDelOnZero(se5121.modify(__sql_sum_aggregate_676inventoryinventory_locn), (v781 * (v782 * (census_asian * census_houseunits))));
            } while ((n782 = n782->nxt));
          }
          e781 = e781->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_677INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e783 = LOCATION.head;
        while (e783) {
          long __sql_sum_aggregate_677inventoryinventory_locn = e783->LOCATION_LOCN;
          long location_zip = e783->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e783->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e783->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e783->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e783->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e783->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e783->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e783->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e783->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e783->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e783->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e783->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e783->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e783->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v783 = e783->__av;
          { //slice
            const HASH_RES_t h381 = CENSUS_mapkey0_idxfn::hash(se5124.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i784 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n784 = &(i784->buckets_[h381 % i784->size_]);
            CENSUS_entry* e784;
            do if ((e784 = n784->obj) && h381 == n784->hash && CENSUS_mapkey0_idxfn::equals(se5124, *e784)) {
              long census_population = e784->CENSUS_POPULATION;
              long census_white = e784->CENSUS_WHITE;
              long census_asian = e784->CENSUS_ASIAN;
              long census_pacific = e784->CENSUS_PACIFIC;
              long census_blackafrican = e784->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e784->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e784->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e784->CENSUS_HOUSEUNITS;
              long census_families = e784->CENSUS_FAMILIES;
              long census_households = e784->CENSUS_HOUSEHOLDS;
              long census_husbwife = e784->CENSUS_HUSBWIFE;
              long census_males = e784->CENSUS_MALES;
              long census_females = e784->CENSUS_FEMALES;
              long census_householdschildren = e784->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e784->CENSUS_HISPANIC;
              long v784 = e784->__av;
              __SQL_SUM_AGGREGATE_677INVENTORY1.addOrDelOnZero(se5123.modify(__sql_sum_aggregate_677inventoryinventory_locn), (v783 * (v784 * (census_asian * census_families))));
            } while ((n784 = n784->nxt));
          }
          e783 = e783->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_678INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e785 = LOCATION.head;
        while (e785) {
          long __sql_sum_aggregate_678inventoryinventory_locn = e785->LOCATION_LOCN;
          long location_zip = e785->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e785->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e785->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e785->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e785->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e785->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e785->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e785->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e785->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e785->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e785->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e785->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e785->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e785->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v785 = e785->__av;
          { //slice
            const HASH_RES_t h382 = CENSUS_mapkey0_idxfn::hash(se5126.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i786 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n786 = &(i786->buckets_[h382 % i786->size_]);
            CENSUS_entry* e786;
            do if ((e786 = n786->obj) && h382 == n786->hash && CENSUS_mapkey0_idxfn::equals(se5126, *e786)) {
              long census_population = e786->CENSUS_POPULATION;
              long census_white = e786->CENSUS_WHITE;
              long census_asian = e786->CENSUS_ASIAN;
              long census_pacific = e786->CENSUS_PACIFIC;
              long census_blackafrican = e786->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e786->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e786->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e786->CENSUS_HOUSEUNITS;
              long census_families = e786->CENSUS_FAMILIES;
              long census_households = e786->CENSUS_HOUSEHOLDS;
              long census_husbwife = e786->CENSUS_HUSBWIFE;
              long census_males = e786->CENSUS_MALES;
              long census_females = e786->CENSUS_FEMALES;
              long census_householdschildren = e786->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e786->CENSUS_HISPANIC;
              long v786 = e786->__av;
              __SQL_SUM_AGGREGATE_678INVENTORY1.addOrDelOnZero(se5125.modify(__sql_sum_aggregate_678inventoryinventory_locn), (v785 * (v786 * (census_asian * census_households))));
            } while ((n786 = n786->nxt));
          }
          e785 = e785->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_679INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e787 = LOCATION.head;
        while (e787) {
          long __sql_sum_aggregate_679inventoryinventory_locn = e787->LOCATION_LOCN;
          long location_zip = e787->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e787->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e787->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e787->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e787->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e787->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e787->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e787->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e787->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e787->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e787->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e787->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e787->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e787->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v787 = e787->__av;
          { //slice
            const HASH_RES_t h383 = CENSUS_mapkey0_idxfn::hash(se5128.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i788 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n788 = &(i788->buckets_[h383 % i788->size_]);
            CENSUS_entry* e788;
            do if ((e788 = n788->obj) && h383 == n788->hash && CENSUS_mapkey0_idxfn::equals(se5128, *e788)) {
              long census_population = e788->CENSUS_POPULATION;
              long census_white = e788->CENSUS_WHITE;
              long census_asian = e788->CENSUS_ASIAN;
              long census_pacific = e788->CENSUS_PACIFIC;
              long census_blackafrican = e788->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e788->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e788->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e788->CENSUS_HOUSEUNITS;
              long census_families = e788->CENSUS_FAMILIES;
              long census_households = e788->CENSUS_HOUSEHOLDS;
              long census_husbwife = e788->CENSUS_HUSBWIFE;
              long census_males = e788->CENSUS_MALES;
              long census_females = e788->CENSUS_FEMALES;
              long census_householdschildren = e788->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e788->CENSUS_HISPANIC;
              long v788 = e788->__av;
              __SQL_SUM_AGGREGATE_679INVENTORY1.addOrDelOnZero(se5127.modify(__sql_sum_aggregate_679inventoryinventory_locn), (v787 * (v788 * (census_asian * census_husbwife))));
            } while ((n788 = n788->nxt));
          }
          e787 = e787->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_680INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e789 = LOCATION.head;
        while (e789) {
          long __sql_sum_aggregate_680inventoryinventory_locn = e789->LOCATION_LOCN;
          long location_zip = e789->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e789->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e789->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e789->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e789->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e789->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e789->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e789->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e789->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e789->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e789->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e789->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e789->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e789->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v789 = e789->__av;
          { //slice
            const HASH_RES_t h384 = CENSUS_mapkey0_idxfn::hash(se5130.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i790 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n790 = &(i790->buckets_[h384 % i790->size_]);
            CENSUS_entry* e790;
            do if ((e790 = n790->obj) && h384 == n790->hash && CENSUS_mapkey0_idxfn::equals(se5130, *e790)) {
              long census_population = e790->CENSUS_POPULATION;
              long census_white = e790->CENSUS_WHITE;
              long census_asian = e790->CENSUS_ASIAN;
              long census_pacific = e790->CENSUS_PACIFIC;
              long census_blackafrican = e790->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e790->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e790->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e790->CENSUS_HOUSEUNITS;
              long census_families = e790->CENSUS_FAMILIES;
              long census_households = e790->CENSUS_HOUSEHOLDS;
              long census_husbwife = e790->CENSUS_HUSBWIFE;
              long census_males = e790->CENSUS_MALES;
              long census_females = e790->CENSUS_FEMALES;
              long census_householdschildren = e790->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e790->CENSUS_HISPANIC;
              long v790 = e790->__av;
              __SQL_SUM_AGGREGATE_680INVENTORY1.addOrDelOnZero(se5129.modify(__sql_sum_aggregate_680inventoryinventory_locn), (v789 * (v790 * (census_asian * census_males))));
            } while ((n790 = n790->nxt));
          }
          e789 = e789->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_681INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e791 = LOCATION.head;
        while (e791) {
          long __sql_sum_aggregate_681inventoryinventory_locn = e791->LOCATION_LOCN;
          long location_zip = e791->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e791->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e791->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e791->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e791->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e791->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e791->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e791->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e791->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e791->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e791->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e791->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e791->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e791->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v791 = e791->__av;
          { //slice
            const HASH_RES_t h385 = CENSUS_mapkey0_idxfn::hash(se5132.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i792 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n792 = &(i792->buckets_[h385 % i792->size_]);
            CENSUS_entry* e792;
            do if ((e792 = n792->obj) && h385 == n792->hash && CENSUS_mapkey0_idxfn::equals(se5132, *e792)) {
              long census_population = e792->CENSUS_POPULATION;
              long census_white = e792->CENSUS_WHITE;
              long census_asian = e792->CENSUS_ASIAN;
              long census_pacific = e792->CENSUS_PACIFIC;
              long census_blackafrican = e792->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e792->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e792->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e792->CENSUS_HOUSEUNITS;
              long census_families = e792->CENSUS_FAMILIES;
              long census_households = e792->CENSUS_HOUSEHOLDS;
              long census_husbwife = e792->CENSUS_HUSBWIFE;
              long census_males = e792->CENSUS_MALES;
              long census_females = e792->CENSUS_FEMALES;
              long census_householdschildren = e792->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e792->CENSUS_HISPANIC;
              long v792 = e792->__av;
              __SQL_SUM_AGGREGATE_681INVENTORY1.addOrDelOnZero(se5131.modify(__sql_sum_aggregate_681inventoryinventory_locn), (v791 * (v792 * (census_asian * census_females))));
            } while ((n792 = n792->nxt));
          }
          e791 = e791->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_682INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e793 = LOCATION.head;
        while (e793) {
          long __sql_sum_aggregate_682inventoryinventory_locn = e793->LOCATION_LOCN;
          long location_zip = e793->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e793->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e793->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e793->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e793->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e793->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e793->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e793->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e793->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e793->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e793->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e793->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e793->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e793->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v793 = e793->__av;
          { //slice
            const HASH_RES_t h386 = CENSUS_mapkey0_idxfn::hash(se5134.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i794 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n794 = &(i794->buckets_[h386 % i794->size_]);
            CENSUS_entry* e794;
            do if ((e794 = n794->obj) && h386 == n794->hash && CENSUS_mapkey0_idxfn::equals(se5134, *e794)) {
              long census_population = e794->CENSUS_POPULATION;
              long census_white = e794->CENSUS_WHITE;
              long census_asian = e794->CENSUS_ASIAN;
              long census_pacific = e794->CENSUS_PACIFIC;
              long census_blackafrican = e794->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e794->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e794->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e794->CENSUS_HOUSEUNITS;
              long census_families = e794->CENSUS_FAMILIES;
              long census_households = e794->CENSUS_HOUSEHOLDS;
              long census_husbwife = e794->CENSUS_HUSBWIFE;
              long census_males = e794->CENSUS_MALES;
              long census_females = e794->CENSUS_FEMALES;
              long census_householdschildren = e794->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e794->CENSUS_HISPANIC;
              long v794 = e794->__av;
              __SQL_SUM_AGGREGATE_682INVENTORY1.addOrDelOnZero(se5133.modify(__sql_sum_aggregate_682inventoryinventory_locn), (v793 * (v794 * (census_asian * census_householdschildren))));
            } while ((n794 = n794->nxt));
          }
          e793 = e793->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_683INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e795 = LOCATION.head;
        while (e795) {
          long __sql_sum_aggregate_683inventoryinventory_locn = e795->LOCATION_LOCN;
          long location_zip = e795->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e795->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e795->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e795->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e795->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e795->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e795->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e795->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e795->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e795->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e795->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e795->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e795->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e795->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v795 = e795->__av;
          { //slice
            const HASH_RES_t h387 = CENSUS_mapkey0_idxfn::hash(se5136.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i796 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n796 = &(i796->buckets_[h387 % i796->size_]);
            CENSUS_entry* e796;
            do if ((e796 = n796->obj) && h387 == n796->hash && CENSUS_mapkey0_idxfn::equals(se5136, *e796)) {
              long census_population = e796->CENSUS_POPULATION;
              long census_white = e796->CENSUS_WHITE;
              long census_asian = e796->CENSUS_ASIAN;
              long census_pacific = e796->CENSUS_PACIFIC;
              long census_blackafrican = e796->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e796->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e796->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e796->CENSUS_HOUSEUNITS;
              long census_families = e796->CENSUS_FAMILIES;
              long census_households = e796->CENSUS_HOUSEHOLDS;
              long census_husbwife = e796->CENSUS_HUSBWIFE;
              long census_males = e796->CENSUS_MALES;
              long census_females = e796->CENSUS_FEMALES;
              long census_householdschildren = e796->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e796->CENSUS_HISPANIC;
              long v796 = e796->__av;
              __SQL_SUM_AGGREGATE_683INVENTORY1.addOrDelOnZero(se5135.modify(__sql_sum_aggregate_683inventoryinventory_locn), (v795 * (v796 * (census_asian * census_hispanic))));
            } while ((n796 = n796->nxt));
          }
          e795 = e795->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_687 = 0.0;
      __SQL_SUM_AGGREGATE_692 = 0.0;
      __SQL_SUM_AGGREGATE_694INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e797 = LOCATION.head;
        while (e797) {
          long __sql_sum_aggregate_694inventoryinventory_locn = e797->LOCATION_LOCN;
          long location_zip = e797->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e797->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e797->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e797->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e797->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e797->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e797->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e797->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e797->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e797->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e797->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e797->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e797->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e797->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v797 = e797->__av;
          { //slice
            const HASH_RES_t h388 = CENSUS_mapkey0_idxfn::hash(se5140.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i798 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n798 = &(i798->buckets_[h388 % i798->size_]);
            CENSUS_entry* e798;
            do if ((e798 = n798->obj) && h388 == n798->hash && CENSUS_mapkey0_idxfn::equals(se5140, *e798)) {
              long census_population = e798->CENSUS_POPULATION;
              long census_white = e798->CENSUS_WHITE;
              long census_asian = e798->CENSUS_ASIAN;
              long census_pacific = e798->CENSUS_PACIFIC;
              long census_blackafrican = e798->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e798->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e798->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e798->CENSUS_HOUSEUNITS;
              long census_families = e798->CENSUS_FAMILIES;
              long census_households = e798->CENSUS_HOUSEHOLDS;
              long census_husbwife = e798->CENSUS_HUSBWIFE;
              long census_males = e798->CENSUS_MALES;
              long census_females = e798->CENSUS_FEMALES;
              long census_householdschildren = e798->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e798->CENSUS_HISPANIC;
              long v798 = e798->__av;
              __SQL_SUM_AGGREGATE_694INVENTORY1.addOrDelOnZero(se5139.modify(__sql_sum_aggregate_694inventoryinventory_locn), (v797 * (v798 * (census_pacific * census_pacific))));
            } while ((n798 = n798->nxt));
          }
          e797 = e797->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_695INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e799 = LOCATION.head;
        while (e799) {
          long __sql_sum_aggregate_695inventoryinventory_locn = e799->LOCATION_LOCN;
          long location_zip = e799->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e799->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e799->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e799->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e799->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e799->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e799->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e799->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e799->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e799->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e799->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e799->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e799->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e799->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v799 = e799->__av;
          { //slice
            const HASH_RES_t h389 = CENSUS_mapkey0_idxfn::hash(se5142.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i800 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n800 = &(i800->buckets_[h389 % i800->size_]);
            CENSUS_entry* e800;
            do if ((e800 = n800->obj) && h389 == n800->hash && CENSUS_mapkey0_idxfn::equals(se5142, *e800)) {
              long census_population = e800->CENSUS_POPULATION;
              long census_white = e800->CENSUS_WHITE;
              long census_asian = e800->CENSUS_ASIAN;
              long census_pacific = e800->CENSUS_PACIFIC;
              long census_blackafrican = e800->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e800->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e800->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e800->CENSUS_HOUSEUNITS;
              long census_families = e800->CENSUS_FAMILIES;
              long census_households = e800->CENSUS_HOUSEHOLDS;
              long census_husbwife = e800->CENSUS_HUSBWIFE;
              long census_males = e800->CENSUS_MALES;
              long census_females = e800->CENSUS_FEMALES;
              long census_householdschildren = e800->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e800->CENSUS_HISPANIC;
              long v800 = e800->__av;
              __SQL_SUM_AGGREGATE_695INVENTORY1.addOrDelOnZero(se5141.modify(__sql_sum_aggregate_695inventoryinventory_locn), (v799 * (v800 * (census_pacific * census_blackafrican))));
            } while ((n800 = n800->nxt));
          }
          e799 = e799->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_696 = 0.0;
      __SQL_SUM_AGGREGATE_696INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e801 = LOCATION.head;
        while (e801) {
          long __sql_sum_aggregate_696inventoryinventory_locn = e801->LOCATION_LOCN;
          long location_zip = e801->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e801->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e801->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e801->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e801->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e801->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e801->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e801->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e801->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e801->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e801->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e801->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e801->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e801->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v801 = e801->__av;
          { //slice
            const HASH_RES_t h390 = CENSUS_mapkey0_idxfn::hash(se5145.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i802 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n802 = &(i802->buckets_[h390 % i802->size_]);
            CENSUS_entry* e802;
            do if ((e802 = n802->obj) && h390 == n802->hash && CENSUS_mapkey0_idxfn::equals(se5145, *e802)) {
              long census_population = e802->CENSUS_POPULATION;
              long census_white = e802->CENSUS_WHITE;
              long census_asian = e802->CENSUS_ASIAN;
              long census_pacific = e802->CENSUS_PACIFIC;
              long census_blackafrican = e802->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e802->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e802->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e802->CENSUS_HOUSEUNITS;
              long census_families = e802->CENSUS_FAMILIES;
              long census_households = e802->CENSUS_HOUSEHOLDS;
              long census_husbwife = e802->CENSUS_HUSBWIFE;
              long census_males = e802->CENSUS_MALES;
              long census_females = e802->CENSUS_FEMALES;
              long census_householdschildren = e802->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e802->CENSUS_HISPANIC;
              long v802 = e802->__av;
              __SQL_SUM_AGGREGATE_696INVENTORY1.addOrDelOnZero(se5144.modify(__sql_sum_aggregate_696inventoryinventory_locn), (v801 * (v802 * (census_pacific * census_medianage))));
            } while ((n802 = n802->nxt));
          }
          e801 = e801->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_697INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e803 = LOCATION.head;
        while (e803) {
          long __sql_sum_aggregate_697inventoryinventory_locn = e803->LOCATION_LOCN;
          long location_zip = e803->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e803->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e803->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e803->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e803->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e803->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e803->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e803->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e803->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e803->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e803->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e803->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e803->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e803->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v803 = e803->__av;
          { //slice
            const HASH_RES_t h391 = CENSUS_mapkey0_idxfn::hash(se5147.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i804 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n804 = &(i804->buckets_[h391 % i804->size_]);
            CENSUS_entry* e804;
            do if ((e804 = n804->obj) && h391 == n804->hash && CENSUS_mapkey0_idxfn::equals(se5147, *e804)) {
              long census_population = e804->CENSUS_POPULATION;
              long census_white = e804->CENSUS_WHITE;
              long census_asian = e804->CENSUS_ASIAN;
              long census_pacific = e804->CENSUS_PACIFIC;
              long census_blackafrican = e804->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e804->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e804->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e804->CENSUS_HOUSEUNITS;
              long census_families = e804->CENSUS_FAMILIES;
              long census_households = e804->CENSUS_HOUSEHOLDS;
              long census_husbwife = e804->CENSUS_HUSBWIFE;
              long census_males = e804->CENSUS_MALES;
              long census_females = e804->CENSUS_FEMALES;
              long census_householdschildren = e804->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e804->CENSUS_HISPANIC;
              long v804 = e804->__av;
              __SQL_SUM_AGGREGATE_697INVENTORY1.addOrDelOnZero(se5146.modify(__sql_sum_aggregate_697inventoryinventory_locn), (v803 * (v804 * (census_pacific * census_occupiedhouseunits))));
            } while ((n804 = n804->nxt));
          }
          e803 = e803->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_698INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e805 = LOCATION.head;
        while (e805) {
          long __sql_sum_aggregate_698inventoryinventory_locn = e805->LOCATION_LOCN;
          long location_zip = e805->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e805->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e805->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e805->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e805->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e805->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e805->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e805->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e805->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e805->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e805->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e805->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e805->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e805->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v805 = e805->__av;
          { //slice
            const HASH_RES_t h392 = CENSUS_mapkey0_idxfn::hash(se5149.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i806 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n806 = &(i806->buckets_[h392 % i806->size_]);
            CENSUS_entry* e806;
            do if ((e806 = n806->obj) && h392 == n806->hash && CENSUS_mapkey0_idxfn::equals(se5149, *e806)) {
              long census_population = e806->CENSUS_POPULATION;
              long census_white = e806->CENSUS_WHITE;
              long census_asian = e806->CENSUS_ASIAN;
              long census_pacific = e806->CENSUS_PACIFIC;
              long census_blackafrican = e806->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e806->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e806->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e806->CENSUS_HOUSEUNITS;
              long census_families = e806->CENSUS_FAMILIES;
              long census_households = e806->CENSUS_HOUSEHOLDS;
              long census_husbwife = e806->CENSUS_HUSBWIFE;
              long census_males = e806->CENSUS_MALES;
              long census_females = e806->CENSUS_FEMALES;
              long census_householdschildren = e806->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e806->CENSUS_HISPANIC;
              long v806 = e806->__av;
              __SQL_SUM_AGGREGATE_698INVENTORY1.addOrDelOnZero(se5148.modify(__sql_sum_aggregate_698inventoryinventory_locn), (v805 * (v806 * (census_pacific * census_houseunits))));
            } while ((n806 = n806->nxt));
          }
          e805 = e805->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_699INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e807 = LOCATION.head;
        while (e807) {
          long __sql_sum_aggregate_699inventoryinventory_locn = e807->LOCATION_LOCN;
          long location_zip = e807->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e807->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e807->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e807->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e807->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e807->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e807->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e807->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e807->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e807->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e807->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e807->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e807->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e807->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v807 = e807->__av;
          { //slice
            const HASH_RES_t h393 = CENSUS_mapkey0_idxfn::hash(se5151.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i808 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n808 = &(i808->buckets_[h393 % i808->size_]);
            CENSUS_entry* e808;
            do if ((e808 = n808->obj) && h393 == n808->hash && CENSUS_mapkey0_idxfn::equals(se5151, *e808)) {
              long census_population = e808->CENSUS_POPULATION;
              long census_white = e808->CENSUS_WHITE;
              long census_asian = e808->CENSUS_ASIAN;
              long census_pacific = e808->CENSUS_PACIFIC;
              long census_blackafrican = e808->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e808->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e808->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e808->CENSUS_HOUSEUNITS;
              long census_families = e808->CENSUS_FAMILIES;
              long census_households = e808->CENSUS_HOUSEHOLDS;
              long census_husbwife = e808->CENSUS_HUSBWIFE;
              long census_males = e808->CENSUS_MALES;
              long census_females = e808->CENSUS_FEMALES;
              long census_householdschildren = e808->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e808->CENSUS_HISPANIC;
              long v808 = e808->__av;
              __SQL_SUM_AGGREGATE_699INVENTORY1.addOrDelOnZero(se5150.modify(__sql_sum_aggregate_699inventoryinventory_locn), (v807 * (v808 * (census_pacific * census_families))));
            } while ((n808 = n808->nxt));
          }
          e807 = e807->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_700INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e809 = LOCATION.head;
        while (e809) {
          long __sql_sum_aggregate_700inventoryinventory_locn = e809->LOCATION_LOCN;
          long location_zip = e809->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e809->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e809->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e809->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e809->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e809->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e809->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e809->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e809->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e809->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e809->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e809->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e809->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e809->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v809 = e809->__av;
          { //slice
            const HASH_RES_t h394 = CENSUS_mapkey0_idxfn::hash(se5153.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i810 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n810 = &(i810->buckets_[h394 % i810->size_]);
            CENSUS_entry* e810;
            do if ((e810 = n810->obj) && h394 == n810->hash && CENSUS_mapkey0_idxfn::equals(se5153, *e810)) {
              long census_population = e810->CENSUS_POPULATION;
              long census_white = e810->CENSUS_WHITE;
              long census_asian = e810->CENSUS_ASIAN;
              long census_pacific = e810->CENSUS_PACIFIC;
              long census_blackafrican = e810->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e810->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e810->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e810->CENSUS_HOUSEUNITS;
              long census_families = e810->CENSUS_FAMILIES;
              long census_households = e810->CENSUS_HOUSEHOLDS;
              long census_husbwife = e810->CENSUS_HUSBWIFE;
              long census_males = e810->CENSUS_MALES;
              long census_females = e810->CENSUS_FEMALES;
              long census_householdschildren = e810->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e810->CENSUS_HISPANIC;
              long v810 = e810->__av;
              __SQL_SUM_AGGREGATE_700INVENTORY1.addOrDelOnZero(se5152.modify(__sql_sum_aggregate_700inventoryinventory_locn), (v809 * (v810 * (census_pacific * census_households))));
            } while ((n810 = n810->nxt));
          }
          e809 = e809->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_701INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e811 = LOCATION.head;
        while (e811) {
          long __sql_sum_aggregate_701inventoryinventory_locn = e811->LOCATION_LOCN;
          long location_zip = e811->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e811->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e811->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e811->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e811->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e811->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e811->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e811->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e811->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e811->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e811->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e811->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e811->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e811->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v811 = e811->__av;
          { //slice
            const HASH_RES_t h395 = CENSUS_mapkey0_idxfn::hash(se5155.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i812 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n812 = &(i812->buckets_[h395 % i812->size_]);
            CENSUS_entry* e812;
            do if ((e812 = n812->obj) && h395 == n812->hash && CENSUS_mapkey0_idxfn::equals(se5155, *e812)) {
              long census_population = e812->CENSUS_POPULATION;
              long census_white = e812->CENSUS_WHITE;
              long census_asian = e812->CENSUS_ASIAN;
              long census_pacific = e812->CENSUS_PACIFIC;
              long census_blackafrican = e812->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e812->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e812->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e812->CENSUS_HOUSEUNITS;
              long census_families = e812->CENSUS_FAMILIES;
              long census_households = e812->CENSUS_HOUSEHOLDS;
              long census_husbwife = e812->CENSUS_HUSBWIFE;
              long census_males = e812->CENSUS_MALES;
              long census_females = e812->CENSUS_FEMALES;
              long census_householdschildren = e812->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e812->CENSUS_HISPANIC;
              long v812 = e812->__av;
              __SQL_SUM_AGGREGATE_701INVENTORY1.addOrDelOnZero(se5154.modify(__sql_sum_aggregate_701inventoryinventory_locn), (v811 * (v812 * (census_pacific * census_husbwife))));
            } while ((n812 = n812->nxt));
          }
          e811 = e811->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_702INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e813 = LOCATION.head;
        while (e813) {
          long __sql_sum_aggregate_702inventoryinventory_locn = e813->LOCATION_LOCN;
          long location_zip = e813->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e813->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e813->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e813->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e813->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e813->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e813->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e813->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e813->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e813->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e813->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e813->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e813->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e813->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v813 = e813->__av;
          { //slice
            const HASH_RES_t h396 = CENSUS_mapkey0_idxfn::hash(se5157.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i814 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n814 = &(i814->buckets_[h396 % i814->size_]);
            CENSUS_entry* e814;
            do if ((e814 = n814->obj) && h396 == n814->hash && CENSUS_mapkey0_idxfn::equals(se5157, *e814)) {
              long census_population = e814->CENSUS_POPULATION;
              long census_white = e814->CENSUS_WHITE;
              long census_asian = e814->CENSUS_ASIAN;
              long census_pacific = e814->CENSUS_PACIFIC;
              long census_blackafrican = e814->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e814->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e814->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e814->CENSUS_HOUSEUNITS;
              long census_families = e814->CENSUS_FAMILIES;
              long census_households = e814->CENSUS_HOUSEHOLDS;
              long census_husbwife = e814->CENSUS_HUSBWIFE;
              long census_males = e814->CENSUS_MALES;
              long census_females = e814->CENSUS_FEMALES;
              long census_householdschildren = e814->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e814->CENSUS_HISPANIC;
              long v814 = e814->__av;
              __SQL_SUM_AGGREGATE_702INVENTORY1.addOrDelOnZero(se5156.modify(__sql_sum_aggregate_702inventoryinventory_locn), (v813 * (v814 * (census_pacific * census_males))));
            } while ((n814 = n814->nxt));
          }
          e813 = e813->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_703INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e815 = LOCATION.head;
        while (e815) {
          long __sql_sum_aggregate_703inventoryinventory_locn = e815->LOCATION_LOCN;
          long location_zip = e815->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e815->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e815->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e815->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e815->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e815->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e815->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e815->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e815->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e815->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e815->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e815->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e815->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e815->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v815 = e815->__av;
          { //slice
            const HASH_RES_t h397 = CENSUS_mapkey0_idxfn::hash(se5159.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i816 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n816 = &(i816->buckets_[h397 % i816->size_]);
            CENSUS_entry* e816;
            do if ((e816 = n816->obj) && h397 == n816->hash && CENSUS_mapkey0_idxfn::equals(se5159, *e816)) {
              long census_population = e816->CENSUS_POPULATION;
              long census_white = e816->CENSUS_WHITE;
              long census_asian = e816->CENSUS_ASIAN;
              long census_pacific = e816->CENSUS_PACIFIC;
              long census_blackafrican = e816->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e816->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e816->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e816->CENSUS_HOUSEUNITS;
              long census_families = e816->CENSUS_FAMILIES;
              long census_households = e816->CENSUS_HOUSEHOLDS;
              long census_husbwife = e816->CENSUS_HUSBWIFE;
              long census_males = e816->CENSUS_MALES;
              long census_females = e816->CENSUS_FEMALES;
              long census_householdschildren = e816->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e816->CENSUS_HISPANIC;
              long v816 = e816->__av;
              __SQL_SUM_AGGREGATE_703INVENTORY1.addOrDelOnZero(se5158.modify(__sql_sum_aggregate_703inventoryinventory_locn), (v815 * (v816 * (census_pacific * census_females))));
            } while ((n816 = n816->nxt));
          }
          e815 = e815->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_704INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e817 = LOCATION.head;
        while (e817) {
          long __sql_sum_aggregate_704inventoryinventory_locn = e817->LOCATION_LOCN;
          long location_zip = e817->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e817->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e817->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e817->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e817->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e817->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e817->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e817->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e817->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e817->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e817->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e817->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e817->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e817->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v817 = e817->__av;
          { //slice
            const HASH_RES_t h398 = CENSUS_mapkey0_idxfn::hash(se5161.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i818 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n818 = &(i818->buckets_[h398 % i818->size_]);
            CENSUS_entry* e818;
            do if ((e818 = n818->obj) && h398 == n818->hash && CENSUS_mapkey0_idxfn::equals(se5161, *e818)) {
              long census_population = e818->CENSUS_POPULATION;
              long census_white = e818->CENSUS_WHITE;
              long census_asian = e818->CENSUS_ASIAN;
              long census_pacific = e818->CENSUS_PACIFIC;
              long census_blackafrican = e818->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e818->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e818->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e818->CENSUS_HOUSEUNITS;
              long census_families = e818->CENSUS_FAMILIES;
              long census_households = e818->CENSUS_HOUSEHOLDS;
              long census_husbwife = e818->CENSUS_HUSBWIFE;
              long census_males = e818->CENSUS_MALES;
              long census_females = e818->CENSUS_FEMALES;
              long census_householdschildren = e818->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e818->CENSUS_HISPANIC;
              long v818 = e818->__av;
              __SQL_SUM_AGGREGATE_704INVENTORY1.addOrDelOnZero(se5160.modify(__sql_sum_aggregate_704inventoryinventory_locn), (v817 * (v818 * (census_pacific * census_householdschildren))));
            } while ((n818 = n818->nxt));
          }
          e817 = e817->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_705INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e819 = LOCATION.head;
        while (e819) {
          long __sql_sum_aggregate_705inventoryinventory_locn = e819->LOCATION_LOCN;
          long location_zip = e819->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e819->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e819->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e819->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e819->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e819->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e819->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e819->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e819->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e819->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e819->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e819->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e819->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e819->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v819 = e819->__av;
          { //slice
            const HASH_RES_t h399 = CENSUS_mapkey0_idxfn::hash(se5163.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i820 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n820 = &(i820->buckets_[h399 % i820->size_]);
            CENSUS_entry* e820;
            do if ((e820 = n820->obj) && h399 == n820->hash && CENSUS_mapkey0_idxfn::equals(se5163, *e820)) {
              long census_population = e820->CENSUS_POPULATION;
              long census_white = e820->CENSUS_WHITE;
              long census_asian = e820->CENSUS_ASIAN;
              long census_pacific = e820->CENSUS_PACIFIC;
              long census_blackafrican = e820->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e820->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e820->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e820->CENSUS_HOUSEUNITS;
              long census_families = e820->CENSUS_FAMILIES;
              long census_households = e820->CENSUS_HOUSEHOLDS;
              long census_husbwife = e820->CENSUS_HUSBWIFE;
              long census_males = e820->CENSUS_MALES;
              long census_females = e820->CENSUS_FEMALES;
              long census_householdschildren = e820->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e820->CENSUS_HISPANIC;
              long v820 = e820->__av;
              __SQL_SUM_AGGREGATE_705INVENTORY1.addOrDelOnZero(se5162.modify(__sql_sum_aggregate_705inventoryinventory_locn), (v819 * (v820 * (census_pacific * census_hispanic))));
            } while ((n820 = n820->nxt));
          }
          e819 = e819->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_709 = 0.0;
      __SQL_SUM_AGGREGATE_714 = 0.0;
      __SQL_SUM_AGGREGATE_716INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e821 = LOCATION.head;
        while (e821) {
          long __sql_sum_aggregate_716inventoryinventory_locn = e821->LOCATION_LOCN;
          long location_zip = e821->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e821->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e821->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e821->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e821->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e821->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e821->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e821->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e821->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e821->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e821->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e821->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e821->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e821->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v821 = e821->__av;
          { //slice
            const HASH_RES_t h400 = CENSUS_mapkey0_idxfn::hash(se5167.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i822 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n822 = &(i822->buckets_[h400 % i822->size_]);
            CENSUS_entry* e822;
            do if ((e822 = n822->obj) && h400 == n822->hash && CENSUS_mapkey0_idxfn::equals(se5167, *e822)) {
              long census_population = e822->CENSUS_POPULATION;
              long census_white = e822->CENSUS_WHITE;
              long census_asian = e822->CENSUS_ASIAN;
              long census_pacific = e822->CENSUS_PACIFIC;
              long census_blackafrican = e822->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e822->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e822->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e822->CENSUS_HOUSEUNITS;
              long census_families = e822->CENSUS_FAMILIES;
              long census_households = e822->CENSUS_HOUSEHOLDS;
              long census_husbwife = e822->CENSUS_HUSBWIFE;
              long census_males = e822->CENSUS_MALES;
              long census_females = e822->CENSUS_FEMALES;
              long census_householdschildren = e822->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e822->CENSUS_HISPANIC;
              long v822 = e822->__av;
              __SQL_SUM_AGGREGATE_716INVENTORY1.addOrDelOnZero(se5166.modify(__sql_sum_aggregate_716inventoryinventory_locn), (v821 * (v822 * (census_blackafrican * census_blackafrican))));
            } while ((n822 = n822->nxt));
          }
          e821 = e821->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_717 = 0.0;
      __SQL_SUM_AGGREGATE_717INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e823 = LOCATION.head;
        while (e823) {
          long __sql_sum_aggregate_717inventoryinventory_locn = e823->LOCATION_LOCN;
          long location_zip = e823->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e823->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e823->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e823->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e823->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e823->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e823->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e823->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e823->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e823->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e823->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e823->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e823->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e823->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v823 = e823->__av;
          { //slice
            const HASH_RES_t h401 = CENSUS_mapkey0_idxfn::hash(se5170.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i824 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n824 = &(i824->buckets_[h401 % i824->size_]);
            CENSUS_entry* e824;
            do if ((e824 = n824->obj) && h401 == n824->hash && CENSUS_mapkey0_idxfn::equals(se5170, *e824)) {
              long census_population = e824->CENSUS_POPULATION;
              long census_white = e824->CENSUS_WHITE;
              long census_asian = e824->CENSUS_ASIAN;
              long census_pacific = e824->CENSUS_PACIFIC;
              long census_blackafrican = e824->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e824->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e824->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e824->CENSUS_HOUSEUNITS;
              long census_families = e824->CENSUS_FAMILIES;
              long census_households = e824->CENSUS_HOUSEHOLDS;
              long census_husbwife = e824->CENSUS_HUSBWIFE;
              long census_males = e824->CENSUS_MALES;
              long census_females = e824->CENSUS_FEMALES;
              long census_householdschildren = e824->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e824->CENSUS_HISPANIC;
              long v824 = e824->__av;
              __SQL_SUM_AGGREGATE_717INVENTORY1.addOrDelOnZero(se5169.modify(__sql_sum_aggregate_717inventoryinventory_locn), (v823 * (v824 * (census_blackafrican * census_medianage))));
            } while ((n824 = n824->nxt));
          }
          e823 = e823->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_718INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e825 = LOCATION.head;
        while (e825) {
          long __sql_sum_aggregate_718inventoryinventory_locn = e825->LOCATION_LOCN;
          long location_zip = e825->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e825->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e825->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e825->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e825->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e825->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e825->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e825->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e825->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e825->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e825->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e825->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e825->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e825->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v825 = e825->__av;
          { //slice
            const HASH_RES_t h402 = CENSUS_mapkey0_idxfn::hash(se5172.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i826 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n826 = &(i826->buckets_[h402 % i826->size_]);
            CENSUS_entry* e826;
            do if ((e826 = n826->obj) && h402 == n826->hash && CENSUS_mapkey0_idxfn::equals(se5172, *e826)) {
              long census_population = e826->CENSUS_POPULATION;
              long census_white = e826->CENSUS_WHITE;
              long census_asian = e826->CENSUS_ASIAN;
              long census_pacific = e826->CENSUS_PACIFIC;
              long census_blackafrican = e826->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e826->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e826->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e826->CENSUS_HOUSEUNITS;
              long census_families = e826->CENSUS_FAMILIES;
              long census_households = e826->CENSUS_HOUSEHOLDS;
              long census_husbwife = e826->CENSUS_HUSBWIFE;
              long census_males = e826->CENSUS_MALES;
              long census_females = e826->CENSUS_FEMALES;
              long census_householdschildren = e826->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e826->CENSUS_HISPANIC;
              long v826 = e826->__av;
              __SQL_SUM_AGGREGATE_718INVENTORY1.addOrDelOnZero(se5171.modify(__sql_sum_aggregate_718inventoryinventory_locn), (v825 * (v826 * (census_blackafrican * census_occupiedhouseunits))));
            } while ((n826 = n826->nxt));
          }
          e825 = e825->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_719INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e827 = LOCATION.head;
        while (e827) {
          long __sql_sum_aggregate_719inventoryinventory_locn = e827->LOCATION_LOCN;
          long location_zip = e827->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e827->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e827->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e827->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e827->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e827->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e827->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e827->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e827->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e827->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e827->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e827->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e827->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e827->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v827 = e827->__av;
          { //slice
            const HASH_RES_t h403 = CENSUS_mapkey0_idxfn::hash(se5174.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i828 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n828 = &(i828->buckets_[h403 % i828->size_]);
            CENSUS_entry* e828;
            do if ((e828 = n828->obj) && h403 == n828->hash && CENSUS_mapkey0_idxfn::equals(se5174, *e828)) {
              long census_population = e828->CENSUS_POPULATION;
              long census_white = e828->CENSUS_WHITE;
              long census_asian = e828->CENSUS_ASIAN;
              long census_pacific = e828->CENSUS_PACIFIC;
              long census_blackafrican = e828->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e828->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e828->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e828->CENSUS_HOUSEUNITS;
              long census_families = e828->CENSUS_FAMILIES;
              long census_households = e828->CENSUS_HOUSEHOLDS;
              long census_husbwife = e828->CENSUS_HUSBWIFE;
              long census_males = e828->CENSUS_MALES;
              long census_females = e828->CENSUS_FEMALES;
              long census_householdschildren = e828->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e828->CENSUS_HISPANIC;
              long v828 = e828->__av;
              __SQL_SUM_AGGREGATE_719INVENTORY1.addOrDelOnZero(se5173.modify(__sql_sum_aggregate_719inventoryinventory_locn), (v827 * (v828 * (census_blackafrican * census_houseunits))));
            } while ((n828 = n828->nxt));
          }
          e827 = e827->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_720INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e829 = LOCATION.head;
        while (e829) {
          long __sql_sum_aggregate_720inventoryinventory_locn = e829->LOCATION_LOCN;
          long location_zip = e829->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e829->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e829->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e829->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e829->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e829->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e829->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e829->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e829->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e829->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e829->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e829->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e829->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e829->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v829 = e829->__av;
          { //slice
            const HASH_RES_t h404 = CENSUS_mapkey0_idxfn::hash(se5176.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i830 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n830 = &(i830->buckets_[h404 % i830->size_]);
            CENSUS_entry* e830;
            do if ((e830 = n830->obj) && h404 == n830->hash && CENSUS_mapkey0_idxfn::equals(se5176, *e830)) {
              long census_population = e830->CENSUS_POPULATION;
              long census_white = e830->CENSUS_WHITE;
              long census_asian = e830->CENSUS_ASIAN;
              long census_pacific = e830->CENSUS_PACIFIC;
              long census_blackafrican = e830->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e830->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e830->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e830->CENSUS_HOUSEUNITS;
              long census_families = e830->CENSUS_FAMILIES;
              long census_households = e830->CENSUS_HOUSEHOLDS;
              long census_husbwife = e830->CENSUS_HUSBWIFE;
              long census_males = e830->CENSUS_MALES;
              long census_females = e830->CENSUS_FEMALES;
              long census_householdschildren = e830->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e830->CENSUS_HISPANIC;
              long v830 = e830->__av;
              __SQL_SUM_AGGREGATE_720INVENTORY1.addOrDelOnZero(se5175.modify(__sql_sum_aggregate_720inventoryinventory_locn), (v829 * (v830 * (census_blackafrican * census_families))));
            } while ((n830 = n830->nxt));
          }
          e829 = e829->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_721INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e831 = LOCATION.head;
        while (e831) {
          long __sql_sum_aggregate_721inventoryinventory_locn = e831->LOCATION_LOCN;
          long location_zip = e831->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e831->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e831->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e831->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e831->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e831->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e831->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e831->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e831->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e831->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e831->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e831->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e831->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e831->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v831 = e831->__av;
          { //slice
            const HASH_RES_t h405 = CENSUS_mapkey0_idxfn::hash(se5178.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i832 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n832 = &(i832->buckets_[h405 % i832->size_]);
            CENSUS_entry* e832;
            do if ((e832 = n832->obj) && h405 == n832->hash && CENSUS_mapkey0_idxfn::equals(se5178, *e832)) {
              long census_population = e832->CENSUS_POPULATION;
              long census_white = e832->CENSUS_WHITE;
              long census_asian = e832->CENSUS_ASIAN;
              long census_pacific = e832->CENSUS_PACIFIC;
              long census_blackafrican = e832->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e832->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e832->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e832->CENSUS_HOUSEUNITS;
              long census_families = e832->CENSUS_FAMILIES;
              long census_households = e832->CENSUS_HOUSEHOLDS;
              long census_husbwife = e832->CENSUS_HUSBWIFE;
              long census_males = e832->CENSUS_MALES;
              long census_females = e832->CENSUS_FEMALES;
              long census_householdschildren = e832->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e832->CENSUS_HISPANIC;
              long v832 = e832->__av;
              __SQL_SUM_AGGREGATE_721INVENTORY1.addOrDelOnZero(se5177.modify(__sql_sum_aggregate_721inventoryinventory_locn), (v831 * (v832 * (census_blackafrican * census_households))));
            } while ((n832 = n832->nxt));
          }
          e831 = e831->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_722INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e833 = LOCATION.head;
        while (e833) {
          long __sql_sum_aggregate_722inventoryinventory_locn = e833->LOCATION_LOCN;
          long location_zip = e833->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e833->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e833->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e833->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e833->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e833->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e833->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e833->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e833->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e833->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e833->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e833->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e833->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e833->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v833 = e833->__av;
          { //slice
            const HASH_RES_t h406 = CENSUS_mapkey0_idxfn::hash(se5180.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i834 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n834 = &(i834->buckets_[h406 % i834->size_]);
            CENSUS_entry* e834;
            do if ((e834 = n834->obj) && h406 == n834->hash && CENSUS_mapkey0_idxfn::equals(se5180, *e834)) {
              long census_population = e834->CENSUS_POPULATION;
              long census_white = e834->CENSUS_WHITE;
              long census_asian = e834->CENSUS_ASIAN;
              long census_pacific = e834->CENSUS_PACIFIC;
              long census_blackafrican = e834->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e834->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e834->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e834->CENSUS_HOUSEUNITS;
              long census_families = e834->CENSUS_FAMILIES;
              long census_households = e834->CENSUS_HOUSEHOLDS;
              long census_husbwife = e834->CENSUS_HUSBWIFE;
              long census_males = e834->CENSUS_MALES;
              long census_females = e834->CENSUS_FEMALES;
              long census_householdschildren = e834->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e834->CENSUS_HISPANIC;
              long v834 = e834->__av;
              __SQL_SUM_AGGREGATE_722INVENTORY1.addOrDelOnZero(se5179.modify(__sql_sum_aggregate_722inventoryinventory_locn), (v833 * (v834 * (census_blackafrican * census_husbwife))));
            } while ((n834 = n834->nxt));
          }
          e833 = e833->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_723INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e835 = LOCATION.head;
        while (e835) {
          long __sql_sum_aggregate_723inventoryinventory_locn = e835->LOCATION_LOCN;
          long location_zip = e835->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e835->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e835->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e835->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e835->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e835->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e835->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e835->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e835->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e835->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e835->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e835->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e835->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e835->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v835 = e835->__av;
          { //slice
            const HASH_RES_t h407 = CENSUS_mapkey0_idxfn::hash(se5182.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i836 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n836 = &(i836->buckets_[h407 % i836->size_]);
            CENSUS_entry* e836;
            do if ((e836 = n836->obj) && h407 == n836->hash && CENSUS_mapkey0_idxfn::equals(se5182, *e836)) {
              long census_population = e836->CENSUS_POPULATION;
              long census_white = e836->CENSUS_WHITE;
              long census_asian = e836->CENSUS_ASIAN;
              long census_pacific = e836->CENSUS_PACIFIC;
              long census_blackafrican = e836->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e836->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e836->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e836->CENSUS_HOUSEUNITS;
              long census_families = e836->CENSUS_FAMILIES;
              long census_households = e836->CENSUS_HOUSEHOLDS;
              long census_husbwife = e836->CENSUS_HUSBWIFE;
              long census_males = e836->CENSUS_MALES;
              long census_females = e836->CENSUS_FEMALES;
              long census_householdschildren = e836->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e836->CENSUS_HISPANIC;
              long v836 = e836->__av;
              __SQL_SUM_AGGREGATE_723INVENTORY1.addOrDelOnZero(se5181.modify(__sql_sum_aggregate_723inventoryinventory_locn), (v835 * (v836 * (census_blackafrican * census_males))));
            } while ((n836 = n836->nxt));
          }
          e835 = e835->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_724INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e837 = LOCATION.head;
        while (e837) {
          long __sql_sum_aggregate_724inventoryinventory_locn = e837->LOCATION_LOCN;
          long location_zip = e837->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e837->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e837->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e837->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e837->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e837->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e837->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e837->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e837->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e837->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e837->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e837->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e837->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e837->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v837 = e837->__av;
          { //slice
            const HASH_RES_t h408 = CENSUS_mapkey0_idxfn::hash(se5184.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i838 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n838 = &(i838->buckets_[h408 % i838->size_]);
            CENSUS_entry* e838;
            do if ((e838 = n838->obj) && h408 == n838->hash && CENSUS_mapkey0_idxfn::equals(se5184, *e838)) {
              long census_population = e838->CENSUS_POPULATION;
              long census_white = e838->CENSUS_WHITE;
              long census_asian = e838->CENSUS_ASIAN;
              long census_pacific = e838->CENSUS_PACIFIC;
              long census_blackafrican = e838->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e838->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e838->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e838->CENSUS_HOUSEUNITS;
              long census_families = e838->CENSUS_FAMILIES;
              long census_households = e838->CENSUS_HOUSEHOLDS;
              long census_husbwife = e838->CENSUS_HUSBWIFE;
              long census_males = e838->CENSUS_MALES;
              long census_females = e838->CENSUS_FEMALES;
              long census_householdschildren = e838->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e838->CENSUS_HISPANIC;
              long v838 = e838->__av;
              __SQL_SUM_AGGREGATE_724INVENTORY1.addOrDelOnZero(se5183.modify(__sql_sum_aggregate_724inventoryinventory_locn), (v837 * (v838 * (census_blackafrican * census_females))));
            } while ((n838 = n838->nxt));
          }
          e837 = e837->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_725INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e839 = LOCATION.head;
        while (e839) {
          long __sql_sum_aggregate_725inventoryinventory_locn = e839->LOCATION_LOCN;
          long location_zip = e839->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e839->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e839->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e839->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e839->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e839->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e839->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e839->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e839->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e839->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e839->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e839->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e839->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e839->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v839 = e839->__av;
          { //slice
            const HASH_RES_t h409 = CENSUS_mapkey0_idxfn::hash(se5186.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i840 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n840 = &(i840->buckets_[h409 % i840->size_]);
            CENSUS_entry* e840;
            do if ((e840 = n840->obj) && h409 == n840->hash && CENSUS_mapkey0_idxfn::equals(se5186, *e840)) {
              long census_population = e840->CENSUS_POPULATION;
              long census_white = e840->CENSUS_WHITE;
              long census_asian = e840->CENSUS_ASIAN;
              long census_pacific = e840->CENSUS_PACIFIC;
              long census_blackafrican = e840->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e840->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e840->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e840->CENSUS_HOUSEUNITS;
              long census_families = e840->CENSUS_FAMILIES;
              long census_households = e840->CENSUS_HOUSEHOLDS;
              long census_husbwife = e840->CENSUS_HUSBWIFE;
              long census_males = e840->CENSUS_MALES;
              long census_females = e840->CENSUS_FEMALES;
              long census_householdschildren = e840->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e840->CENSUS_HISPANIC;
              long v840 = e840->__av;
              __SQL_SUM_AGGREGATE_725INVENTORY1.addOrDelOnZero(se5185.modify(__sql_sum_aggregate_725inventoryinventory_locn), (v839 * (v840 * (census_blackafrican * census_householdschildren))));
            } while ((n840 = n840->nxt));
          }
          e839 = e839->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_726INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e841 = LOCATION.head;
        while (e841) {
          long __sql_sum_aggregate_726inventoryinventory_locn = e841->LOCATION_LOCN;
          long location_zip = e841->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e841->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e841->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e841->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e841->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e841->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e841->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e841->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e841->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e841->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e841->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e841->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e841->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e841->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v841 = e841->__av;
          { //slice
            const HASH_RES_t h410 = CENSUS_mapkey0_idxfn::hash(se5188.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i842 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n842 = &(i842->buckets_[h410 % i842->size_]);
            CENSUS_entry* e842;
            do if ((e842 = n842->obj) && h410 == n842->hash && CENSUS_mapkey0_idxfn::equals(se5188, *e842)) {
              long census_population = e842->CENSUS_POPULATION;
              long census_white = e842->CENSUS_WHITE;
              long census_asian = e842->CENSUS_ASIAN;
              long census_pacific = e842->CENSUS_PACIFIC;
              long census_blackafrican = e842->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e842->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e842->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e842->CENSUS_HOUSEUNITS;
              long census_families = e842->CENSUS_FAMILIES;
              long census_households = e842->CENSUS_HOUSEHOLDS;
              long census_husbwife = e842->CENSUS_HUSBWIFE;
              long census_males = e842->CENSUS_MALES;
              long census_females = e842->CENSUS_FEMALES;
              long census_householdschildren = e842->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e842->CENSUS_HISPANIC;
              long v842 = e842->__av;
              __SQL_SUM_AGGREGATE_726INVENTORY1.addOrDelOnZero(se5187.modify(__sql_sum_aggregate_726inventoryinventory_locn), (v841 * (v842 * (census_blackafrican * census_hispanic))));
            } while ((n842 = n842->nxt));
          }
          e841 = e841->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_730 = 0.0;
      __SQL_SUM_AGGREGATE_735 = 0.0;
      __SQL_SUM_AGGREGATE_737 = 0.0;
      __SQL_SUM_AGGREGATE_737INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e843 = LOCATION.head;
        while (e843) {
          long __sql_sum_aggregate_737inventoryinventory_locn = e843->LOCATION_LOCN;
          long location_zip = e843->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e843->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e843->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e843->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e843->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e843->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e843->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e843->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e843->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e843->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e843->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e843->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e843->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e843->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v843 = e843->__av;
          { //slice
            const HASH_RES_t h411 = CENSUS_mapkey0_idxfn::hash(se5193.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i844 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n844 = &(i844->buckets_[h411 % i844->size_]);
            CENSUS_entry* e844;
            do if ((e844 = n844->obj) && h411 == n844->hash && CENSUS_mapkey0_idxfn::equals(se5193, *e844)) {
              long census_population = e844->CENSUS_POPULATION;
              long census_white = e844->CENSUS_WHITE;
              long census_asian = e844->CENSUS_ASIAN;
              long census_pacific = e844->CENSUS_PACIFIC;
              long census_blackafrican = e844->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e844->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e844->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e844->CENSUS_HOUSEUNITS;
              long census_families = e844->CENSUS_FAMILIES;
              long census_households = e844->CENSUS_HOUSEHOLDS;
              long census_husbwife = e844->CENSUS_HUSBWIFE;
              long census_males = e844->CENSUS_MALES;
              long census_females = e844->CENSUS_FEMALES;
              long census_householdschildren = e844->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e844->CENSUS_HISPANIC;
              long v844 = e844->__av;
              __SQL_SUM_AGGREGATE_737INVENTORY1.addOrDelOnZero(se5192.modify(__sql_sum_aggregate_737inventoryinventory_locn), (v843 * (v844 * (census_medianage * census_medianage))));
            } while ((n844 = n844->nxt));
          }
          e843 = e843->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_738 = 0.0;
      __SQL_SUM_AGGREGATE_738INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e845 = LOCATION.head;
        while (e845) {
          long __sql_sum_aggregate_738inventoryinventory_locn = e845->LOCATION_LOCN;
          long location_zip = e845->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e845->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e845->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e845->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e845->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e845->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e845->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e845->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e845->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e845->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e845->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e845->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e845->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e845->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v845 = e845->__av;
          { //slice
            const HASH_RES_t h412 = CENSUS_mapkey0_idxfn::hash(se5196.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i846 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n846 = &(i846->buckets_[h412 % i846->size_]);
            CENSUS_entry* e846;
            do if ((e846 = n846->obj) && h412 == n846->hash && CENSUS_mapkey0_idxfn::equals(se5196, *e846)) {
              long census_population = e846->CENSUS_POPULATION;
              long census_white = e846->CENSUS_WHITE;
              long census_asian = e846->CENSUS_ASIAN;
              long census_pacific = e846->CENSUS_PACIFIC;
              long census_blackafrican = e846->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e846->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e846->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e846->CENSUS_HOUSEUNITS;
              long census_families = e846->CENSUS_FAMILIES;
              long census_households = e846->CENSUS_HOUSEHOLDS;
              long census_husbwife = e846->CENSUS_HUSBWIFE;
              long census_males = e846->CENSUS_MALES;
              long census_females = e846->CENSUS_FEMALES;
              long census_householdschildren = e846->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e846->CENSUS_HISPANIC;
              long v846 = e846->__av;
              __SQL_SUM_AGGREGATE_738INVENTORY1.addOrDelOnZero(se5195.modify(__sql_sum_aggregate_738inventoryinventory_locn), (v845 * (v846 * (census_medianage * census_occupiedhouseunits))));
            } while ((n846 = n846->nxt));
          }
          e845 = e845->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_739 = 0.0;
      __SQL_SUM_AGGREGATE_739INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e847 = LOCATION.head;
        while (e847) {
          long __sql_sum_aggregate_739inventoryinventory_locn = e847->LOCATION_LOCN;
          long location_zip = e847->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e847->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e847->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e847->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e847->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e847->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e847->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e847->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e847->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e847->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e847->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e847->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e847->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e847->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v847 = e847->__av;
          { //slice
            const HASH_RES_t h413 = CENSUS_mapkey0_idxfn::hash(se5199.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i848 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n848 = &(i848->buckets_[h413 % i848->size_]);
            CENSUS_entry* e848;
            do if ((e848 = n848->obj) && h413 == n848->hash && CENSUS_mapkey0_idxfn::equals(se5199, *e848)) {
              long census_population = e848->CENSUS_POPULATION;
              long census_white = e848->CENSUS_WHITE;
              long census_asian = e848->CENSUS_ASIAN;
              long census_pacific = e848->CENSUS_PACIFIC;
              long census_blackafrican = e848->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e848->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e848->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e848->CENSUS_HOUSEUNITS;
              long census_families = e848->CENSUS_FAMILIES;
              long census_households = e848->CENSUS_HOUSEHOLDS;
              long census_husbwife = e848->CENSUS_HUSBWIFE;
              long census_males = e848->CENSUS_MALES;
              long census_females = e848->CENSUS_FEMALES;
              long census_householdschildren = e848->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e848->CENSUS_HISPANIC;
              long v848 = e848->__av;
              __SQL_SUM_AGGREGATE_739INVENTORY1.addOrDelOnZero(se5198.modify(__sql_sum_aggregate_739inventoryinventory_locn), (v847 * (v848 * (census_medianage * census_houseunits))));
            } while ((n848 = n848->nxt));
          }
          e847 = e847->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_740 = 0.0;
      __SQL_SUM_AGGREGATE_740INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e849 = LOCATION.head;
        while (e849) {
          long __sql_sum_aggregate_740inventoryinventory_locn = e849->LOCATION_LOCN;
          long location_zip = e849->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e849->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e849->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e849->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e849->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e849->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e849->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e849->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e849->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e849->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e849->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e849->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e849->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e849->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v849 = e849->__av;
          { //slice
            const HASH_RES_t h414 = CENSUS_mapkey0_idxfn::hash(se5202.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i850 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n850 = &(i850->buckets_[h414 % i850->size_]);
            CENSUS_entry* e850;
            do if ((e850 = n850->obj) && h414 == n850->hash && CENSUS_mapkey0_idxfn::equals(se5202, *e850)) {
              long census_population = e850->CENSUS_POPULATION;
              long census_white = e850->CENSUS_WHITE;
              long census_asian = e850->CENSUS_ASIAN;
              long census_pacific = e850->CENSUS_PACIFIC;
              long census_blackafrican = e850->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e850->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e850->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e850->CENSUS_HOUSEUNITS;
              long census_families = e850->CENSUS_FAMILIES;
              long census_households = e850->CENSUS_HOUSEHOLDS;
              long census_husbwife = e850->CENSUS_HUSBWIFE;
              long census_males = e850->CENSUS_MALES;
              long census_females = e850->CENSUS_FEMALES;
              long census_householdschildren = e850->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e850->CENSUS_HISPANIC;
              long v850 = e850->__av;
              __SQL_SUM_AGGREGATE_740INVENTORY1.addOrDelOnZero(se5201.modify(__sql_sum_aggregate_740inventoryinventory_locn), (v849 * (v850 * (census_medianage * census_families))));
            } while ((n850 = n850->nxt));
          }
          e849 = e849->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_741 = 0.0;
      __SQL_SUM_AGGREGATE_741INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e851 = LOCATION.head;
        while (e851) {
          long __sql_sum_aggregate_741inventoryinventory_locn = e851->LOCATION_LOCN;
          long location_zip = e851->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e851->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e851->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e851->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e851->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e851->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e851->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e851->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e851->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e851->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e851->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e851->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e851->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e851->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v851 = e851->__av;
          { //slice
            const HASH_RES_t h415 = CENSUS_mapkey0_idxfn::hash(se5205.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i852 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n852 = &(i852->buckets_[h415 % i852->size_]);
            CENSUS_entry* e852;
            do if ((e852 = n852->obj) && h415 == n852->hash && CENSUS_mapkey0_idxfn::equals(se5205, *e852)) {
              long census_population = e852->CENSUS_POPULATION;
              long census_white = e852->CENSUS_WHITE;
              long census_asian = e852->CENSUS_ASIAN;
              long census_pacific = e852->CENSUS_PACIFIC;
              long census_blackafrican = e852->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e852->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e852->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e852->CENSUS_HOUSEUNITS;
              long census_families = e852->CENSUS_FAMILIES;
              long census_households = e852->CENSUS_HOUSEHOLDS;
              long census_husbwife = e852->CENSUS_HUSBWIFE;
              long census_males = e852->CENSUS_MALES;
              long census_females = e852->CENSUS_FEMALES;
              long census_householdschildren = e852->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e852->CENSUS_HISPANIC;
              long v852 = e852->__av;
              __SQL_SUM_AGGREGATE_741INVENTORY1.addOrDelOnZero(se5204.modify(__sql_sum_aggregate_741inventoryinventory_locn), (v851 * (v852 * (census_medianage * census_households))));
            } while ((n852 = n852->nxt));
          }
          e851 = e851->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_742 = 0.0;
      __SQL_SUM_AGGREGATE_742INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e853 = LOCATION.head;
        while (e853) {
          long __sql_sum_aggregate_742inventoryinventory_locn = e853->LOCATION_LOCN;
          long location_zip = e853->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e853->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e853->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e853->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e853->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e853->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e853->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e853->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e853->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e853->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e853->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e853->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e853->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e853->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v853 = e853->__av;
          { //slice
            const HASH_RES_t h416 = CENSUS_mapkey0_idxfn::hash(se5208.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i854 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n854 = &(i854->buckets_[h416 % i854->size_]);
            CENSUS_entry* e854;
            do if ((e854 = n854->obj) && h416 == n854->hash && CENSUS_mapkey0_idxfn::equals(se5208, *e854)) {
              long census_population = e854->CENSUS_POPULATION;
              long census_white = e854->CENSUS_WHITE;
              long census_asian = e854->CENSUS_ASIAN;
              long census_pacific = e854->CENSUS_PACIFIC;
              long census_blackafrican = e854->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e854->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e854->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e854->CENSUS_HOUSEUNITS;
              long census_families = e854->CENSUS_FAMILIES;
              long census_households = e854->CENSUS_HOUSEHOLDS;
              long census_husbwife = e854->CENSUS_HUSBWIFE;
              long census_males = e854->CENSUS_MALES;
              long census_females = e854->CENSUS_FEMALES;
              long census_householdschildren = e854->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e854->CENSUS_HISPANIC;
              long v854 = e854->__av;
              __SQL_SUM_AGGREGATE_742INVENTORY1.addOrDelOnZero(se5207.modify(__sql_sum_aggregate_742inventoryinventory_locn), (v853 * (v854 * (census_medianage * census_husbwife))));
            } while ((n854 = n854->nxt));
          }
          e853 = e853->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_743 = 0.0;
      __SQL_SUM_AGGREGATE_743INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e855 = LOCATION.head;
        while (e855) {
          long __sql_sum_aggregate_743inventoryinventory_locn = e855->LOCATION_LOCN;
          long location_zip = e855->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e855->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e855->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e855->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e855->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e855->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e855->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e855->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e855->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e855->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e855->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e855->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e855->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e855->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v855 = e855->__av;
          { //slice
            const HASH_RES_t h417 = CENSUS_mapkey0_idxfn::hash(se5211.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i856 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n856 = &(i856->buckets_[h417 % i856->size_]);
            CENSUS_entry* e856;
            do if ((e856 = n856->obj) && h417 == n856->hash && CENSUS_mapkey0_idxfn::equals(se5211, *e856)) {
              long census_population = e856->CENSUS_POPULATION;
              long census_white = e856->CENSUS_WHITE;
              long census_asian = e856->CENSUS_ASIAN;
              long census_pacific = e856->CENSUS_PACIFIC;
              long census_blackafrican = e856->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e856->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e856->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e856->CENSUS_HOUSEUNITS;
              long census_families = e856->CENSUS_FAMILIES;
              long census_households = e856->CENSUS_HOUSEHOLDS;
              long census_husbwife = e856->CENSUS_HUSBWIFE;
              long census_males = e856->CENSUS_MALES;
              long census_females = e856->CENSUS_FEMALES;
              long census_householdschildren = e856->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e856->CENSUS_HISPANIC;
              long v856 = e856->__av;
              __SQL_SUM_AGGREGATE_743INVENTORY1.addOrDelOnZero(se5210.modify(__sql_sum_aggregate_743inventoryinventory_locn), (v855 * (v856 * (census_medianage * census_males))));
            } while ((n856 = n856->nxt));
          }
          e855 = e855->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_744 = 0.0;
      __SQL_SUM_AGGREGATE_744INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e857 = LOCATION.head;
        while (e857) {
          long __sql_sum_aggregate_744inventoryinventory_locn = e857->LOCATION_LOCN;
          long location_zip = e857->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e857->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e857->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e857->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e857->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e857->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e857->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e857->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e857->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e857->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e857->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e857->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e857->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e857->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v857 = e857->__av;
          { //slice
            const HASH_RES_t h418 = CENSUS_mapkey0_idxfn::hash(se5214.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i858 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n858 = &(i858->buckets_[h418 % i858->size_]);
            CENSUS_entry* e858;
            do if ((e858 = n858->obj) && h418 == n858->hash && CENSUS_mapkey0_idxfn::equals(se5214, *e858)) {
              long census_population = e858->CENSUS_POPULATION;
              long census_white = e858->CENSUS_WHITE;
              long census_asian = e858->CENSUS_ASIAN;
              long census_pacific = e858->CENSUS_PACIFIC;
              long census_blackafrican = e858->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e858->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e858->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e858->CENSUS_HOUSEUNITS;
              long census_families = e858->CENSUS_FAMILIES;
              long census_households = e858->CENSUS_HOUSEHOLDS;
              long census_husbwife = e858->CENSUS_HUSBWIFE;
              long census_males = e858->CENSUS_MALES;
              long census_females = e858->CENSUS_FEMALES;
              long census_householdschildren = e858->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e858->CENSUS_HISPANIC;
              long v858 = e858->__av;
              __SQL_SUM_AGGREGATE_744INVENTORY1.addOrDelOnZero(se5213.modify(__sql_sum_aggregate_744inventoryinventory_locn), (v857 * (v858 * (census_medianage * census_females))));
            } while ((n858 = n858->nxt));
          }
          e857 = e857->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_745 = 0.0;
      __SQL_SUM_AGGREGATE_745INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e859 = LOCATION.head;
        while (e859) {
          long __sql_sum_aggregate_745inventoryinventory_locn = e859->LOCATION_LOCN;
          long location_zip = e859->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e859->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e859->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e859->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e859->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e859->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e859->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e859->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e859->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e859->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e859->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e859->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e859->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e859->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v859 = e859->__av;
          { //slice
            const HASH_RES_t h419 = CENSUS_mapkey0_idxfn::hash(se5217.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i860 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n860 = &(i860->buckets_[h419 % i860->size_]);
            CENSUS_entry* e860;
            do if ((e860 = n860->obj) && h419 == n860->hash && CENSUS_mapkey0_idxfn::equals(se5217, *e860)) {
              long census_population = e860->CENSUS_POPULATION;
              long census_white = e860->CENSUS_WHITE;
              long census_asian = e860->CENSUS_ASIAN;
              long census_pacific = e860->CENSUS_PACIFIC;
              long census_blackafrican = e860->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e860->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e860->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e860->CENSUS_HOUSEUNITS;
              long census_families = e860->CENSUS_FAMILIES;
              long census_households = e860->CENSUS_HOUSEHOLDS;
              long census_husbwife = e860->CENSUS_HUSBWIFE;
              long census_males = e860->CENSUS_MALES;
              long census_females = e860->CENSUS_FEMALES;
              long census_householdschildren = e860->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e860->CENSUS_HISPANIC;
              long v860 = e860->__av;
              __SQL_SUM_AGGREGATE_745INVENTORY1.addOrDelOnZero(se5216.modify(__sql_sum_aggregate_745inventoryinventory_locn), (v859 * (v860 * (census_medianage * census_householdschildren))));
            } while ((n860 = n860->nxt));
          }
          e859 = e859->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_746 = 0.0;
      __SQL_SUM_AGGREGATE_746INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e861 = LOCATION.head;
        while (e861) {
          long __sql_sum_aggregate_746inventoryinventory_locn = e861->LOCATION_LOCN;
          long location_zip = e861->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e861->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e861->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e861->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e861->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e861->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e861->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e861->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e861->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e861->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e861->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e861->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e861->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e861->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v861 = e861->__av;
          { //slice
            const HASH_RES_t h420 = CENSUS_mapkey0_idxfn::hash(se5220.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i862 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n862 = &(i862->buckets_[h420 % i862->size_]);
            CENSUS_entry* e862;
            do if ((e862 = n862->obj) && h420 == n862->hash && CENSUS_mapkey0_idxfn::equals(se5220, *e862)) {
              long census_population = e862->CENSUS_POPULATION;
              long census_white = e862->CENSUS_WHITE;
              long census_asian = e862->CENSUS_ASIAN;
              long census_pacific = e862->CENSUS_PACIFIC;
              long census_blackafrican = e862->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e862->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e862->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e862->CENSUS_HOUSEUNITS;
              long census_families = e862->CENSUS_FAMILIES;
              long census_households = e862->CENSUS_HOUSEHOLDS;
              long census_husbwife = e862->CENSUS_HUSBWIFE;
              long census_males = e862->CENSUS_MALES;
              long census_females = e862->CENSUS_FEMALES;
              long census_householdschildren = e862->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e862->CENSUS_HISPANIC;
              long v862 = e862->__av;
              __SQL_SUM_AGGREGATE_746INVENTORY1.addOrDelOnZero(se5219.modify(__sql_sum_aggregate_746inventoryinventory_locn), (v861 * (v862 * (census_medianage * census_hispanic))));
            } while ((n862 = n862->nxt));
          }
          e861 = e861->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_747 = 0.0;
      __SQL_SUM_AGGREGATE_748 = 0.0;
      __SQL_SUM_AGGREGATE_749 = 0.0;
      __SQL_SUM_AGGREGATE_750 = 0.0;
      __SQL_SUM_AGGREGATE_751 = 0.0;
      __SQL_SUM_AGGREGATE_752 = 0.0;
      __SQL_SUM_AGGREGATE_753 = 0.0;
      __SQL_SUM_AGGREGATE_754 = 0.0;
      __SQL_SUM_AGGREGATE_755 = 0.0;
      __SQL_SUM_AGGREGATE_756 = 0.0;
      __SQL_SUM_AGGREGATE_757INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e863 = LOCATION.head;
        while (e863) {
          long __sql_sum_aggregate_757inventoryinventory_locn = e863->LOCATION_LOCN;
          long location_zip = e863->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e863->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e863->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e863->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e863->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e863->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e863->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e863->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e863->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e863->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e863->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e863->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e863->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e863->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v863 = e863->__av;
          { //slice
            const HASH_RES_t h421 = CENSUS_mapkey0_idxfn::hash(se5232.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i864 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n864 = &(i864->buckets_[h421 % i864->size_]);
            CENSUS_entry* e864;
            do if ((e864 = n864->obj) && h421 == n864->hash && CENSUS_mapkey0_idxfn::equals(se5232, *e864)) {
              long census_population = e864->CENSUS_POPULATION;
              long census_white = e864->CENSUS_WHITE;
              long census_asian = e864->CENSUS_ASIAN;
              long census_pacific = e864->CENSUS_PACIFIC;
              long census_blackafrican = e864->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e864->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e864->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e864->CENSUS_HOUSEUNITS;
              long census_families = e864->CENSUS_FAMILIES;
              long census_households = e864->CENSUS_HOUSEHOLDS;
              long census_husbwife = e864->CENSUS_HUSBWIFE;
              long census_males = e864->CENSUS_MALES;
              long census_females = e864->CENSUS_FEMALES;
              long census_householdschildren = e864->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e864->CENSUS_HISPANIC;
              long v864 = e864->__av;
              __SQL_SUM_AGGREGATE_757INVENTORY1.addOrDelOnZero(se5231.modify(__sql_sum_aggregate_757inventoryinventory_locn), (v863 * (v864 * (census_occupiedhouseunits * census_occupiedhouseunits))));
            } while ((n864 = n864->nxt));
          }
          e863 = e863->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_758INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e865 = LOCATION.head;
        while (e865) {
          long __sql_sum_aggregate_758inventoryinventory_locn = e865->LOCATION_LOCN;
          long location_zip = e865->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e865->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e865->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e865->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e865->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e865->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e865->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e865->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e865->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e865->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e865->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e865->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e865->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e865->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v865 = e865->__av;
          { //slice
            const HASH_RES_t h422 = CENSUS_mapkey0_idxfn::hash(se5234.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i866 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n866 = &(i866->buckets_[h422 % i866->size_]);
            CENSUS_entry* e866;
            do if ((e866 = n866->obj) && h422 == n866->hash && CENSUS_mapkey0_idxfn::equals(se5234, *e866)) {
              long census_population = e866->CENSUS_POPULATION;
              long census_white = e866->CENSUS_WHITE;
              long census_asian = e866->CENSUS_ASIAN;
              long census_pacific = e866->CENSUS_PACIFIC;
              long census_blackafrican = e866->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e866->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e866->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e866->CENSUS_HOUSEUNITS;
              long census_families = e866->CENSUS_FAMILIES;
              long census_households = e866->CENSUS_HOUSEHOLDS;
              long census_husbwife = e866->CENSUS_HUSBWIFE;
              long census_males = e866->CENSUS_MALES;
              long census_females = e866->CENSUS_FEMALES;
              long census_householdschildren = e866->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e866->CENSUS_HISPANIC;
              long v866 = e866->__av;
              __SQL_SUM_AGGREGATE_758INVENTORY1.addOrDelOnZero(se5233.modify(__sql_sum_aggregate_758inventoryinventory_locn), (v865 * (v866 * (census_occupiedhouseunits * census_houseunits))));
            } while ((n866 = n866->nxt));
          }
          e865 = e865->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_759INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e867 = LOCATION.head;
        while (e867) {
          long __sql_sum_aggregate_759inventoryinventory_locn = e867->LOCATION_LOCN;
          long location_zip = e867->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e867->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e867->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e867->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e867->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e867->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e867->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e867->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e867->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e867->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e867->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e867->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e867->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e867->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v867 = e867->__av;
          { //slice
            const HASH_RES_t h423 = CENSUS_mapkey0_idxfn::hash(se5236.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i868 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n868 = &(i868->buckets_[h423 % i868->size_]);
            CENSUS_entry* e868;
            do if ((e868 = n868->obj) && h423 == n868->hash && CENSUS_mapkey0_idxfn::equals(se5236, *e868)) {
              long census_population = e868->CENSUS_POPULATION;
              long census_white = e868->CENSUS_WHITE;
              long census_asian = e868->CENSUS_ASIAN;
              long census_pacific = e868->CENSUS_PACIFIC;
              long census_blackafrican = e868->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e868->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e868->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e868->CENSUS_HOUSEUNITS;
              long census_families = e868->CENSUS_FAMILIES;
              long census_households = e868->CENSUS_HOUSEHOLDS;
              long census_husbwife = e868->CENSUS_HUSBWIFE;
              long census_males = e868->CENSUS_MALES;
              long census_females = e868->CENSUS_FEMALES;
              long census_householdschildren = e868->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e868->CENSUS_HISPANIC;
              long v868 = e868->__av;
              __SQL_SUM_AGGREGATE_759INVENTORY1.addOrDelOnZero(se5235.modify(__sql_sum_aggregate_759inventoryinventory_locn), (v867 * (v868 * (census_occupiedhouseunits * census_families))));
            } while ((n868 = n868->nxt));
          }
          e867 = e867->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_760INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e869 = LOCATION.head;
        while (e869) {
          long __sql_sum_aggregate_760inventoryinventory_locn = e869->LOCATION_LOCN;
          long location_zip = e869->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e869->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e869->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e869->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e869->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e869->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e869->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e869->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e869->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e869->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e869->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e869->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e869->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e869->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v869 = e869->__av;
          { //slice
            const HASH_RES_t h424 = CENSUS_mapkey0_idxfn::hash(se5238.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i870 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n870 = &(i870->buckets_[h424 % i870->size_]);
            CENSUS_entry* e870;
            do if ((e870 = n870->obj) && h424 == n870->hash && CENSUS_mapkey0_idxfn::equals(se5238, *e870)) {
              long census_population = e870->CENSUS_POPULATION;
              long census_white = e870->CENSUS_WHITE;
              long census_asian = e870->CENSUS_ASIAN;
              long census_pacific = e870->CENSUS_PACIFIC;
              long census_blackafrican = e870->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e870->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e870->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e870->CENSUS_HOUSEUNITS;
              long census_families = e870->CENSUS_FAMILIES;
              long census_households = e870->CENSUS_HOUSEHOLDS;
              long census_husbwife = e870->CENSUS_HUSBWIFE;
              long census_males = e870->CENSUS_MALES;
              long census_females = e870->CENSUS_FEMALES;
              long census_householdschildren = e870->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e870->CENSUS_HISPANIC;
              long v870 = e870->__av;
              __SQL_SUM_AGGREGATE_760INVENTORY1.addOrDelOnZero(se5237.modify(__sql_sum_aggregate_760inventoryinventory_locn), (v869 * (v870 * (census_occupiedhouseunits * census_households))));
            } while ((n870 = n870->nxt));
          }
          e869 = e869->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_761INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e871 = LOCATION.head;
        while (e871) {
          long __sql_sum_aggregate_761inventoryinventory_locn = e871->LOCATION_LOCN;
          long location_zip = e871->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e871->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e871->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e871->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e871->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e871->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e871->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e871->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e871->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e871->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e871->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e871->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e871->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e871->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v871 = e871->__av;
          { //slice
            const HASH_RES_t h425 = CENSUS_mapkey0_idxfn::hash(se5240.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i872 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n872 = &(i872->buckets_[h425 % i872->size_]);
            CENSUS_entry* e872;
            do if ((e872 = n872->obj) && h425 == n872->hash && CENSUS_mapkey0_idxfn::equals(se5240, *e872)) {
              long census_population = e872->CENSUS_POPULATION;
              long census_white = e872->CENSUS_WHITE;
              long census_asian = e872->CENSUS_ASIAN;
              long census_pacific = e872->CENSUS_PACIFIC;
              long census_blackafrican = e872->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e872->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e872->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e872->CENSUS_HOUSEUNITS;
              long census_families = e872->CENSUS_FAMILIES;
              long census_households = e872->CENSUS_HOUSEHOLDS;
              long census_husbwife = e872->CENSUS_HUSBWIFE;
              long census_males = e872->CENSUS_MALES;
              long census_females = e872->CENSUS_FEMALES;
              long census_householdschildren = e872->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e872->CENSUS_HISPANIC;
              long v872 = e872->__av;
              __SQL_SUM_AGGREGATE_761INVENTORY1.addOrDelOnZero(se5239.modify(__sql_sum_aggregate_761inventoryinventory_locn), (v871 * (v872 * (census_occupiedhouseunits * census_husbwife))));
            } while ((n872 = n872->nxt));
          }
          e871 = e871->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_762INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e873 = LOCATION.head;
        while (e873) {
          long __sql_sum_aggregate_762inventoryinventory_locn = e873->LOCATION_LOCN;
          long location_zip = e873->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e873->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e873->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e873->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e873->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e873->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e873->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e873->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e873->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e873->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e873->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e873->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e873->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e873->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v873 = e873->__av;
          { //slice
            const HASH_RES_t h426 = CENSUS_mapkey0_idxfn::hash(se5242.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i874 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n874 = &(i874->buckets_[h426 % i874->size_]);
            CENSUS_entry* e874;
            do if ((e874 = n874->obj) && h426 == n874->hash && CENSUS_mapkey0_idxfn::equals(se5242, *e874)) {
              long census_population = e874->CENSUS_POPULATION;
              long census_white = e874->CENSUS_WHITE;
              long census_asian = e874->CENSUS_ASIAN;
              long census_pacific = e874->CENSUS_PACIFIC;
              long census_blackafrican = e874->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e874->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e874->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e874->CENSUS_HOUSEUNITS;
              long census_families = e874->CENSUS_FAMILIES;
              long census_households = e874->CENSUS_HOUSEHOLDS;
              long census_husbwife = e874->CENSUS_HUSBWIFE;
              long census_males = e874->CENSUS_MALES;
              long census_females = e874->CENSUS_FEMALES;
              long census_householdschildren = e874->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e874->CENSUS_HISPANIC;
              long v874 = e874->__av;
              __SQL_SUM_AGGREGATE_762INVENTORY1.addOrDelOnZero(se5241.modify(__sql_sum_aggregate_762inventoryinventory_locn), (v873 * (v874 * (census_occupiedhouseunits * census_males))));
            } while ((n874 = n874->nxt));
          }
          e873 = e873->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_763INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e875 = LOCATION.head;
        while (e875) {
          long __sql_sum_aggregate_763inventoryinventory_locn = e875->LOCATION_LOCN;
          long location_zip = e875->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e875->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e875->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e875->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e875->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e875->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e875->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e875->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e875->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e875->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e875->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e875->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e875->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e875->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v875 = e875->__av;
          { //slice
            const HASH_RES_t h427 = CENSUS_mapkey0_idxfn::hash(se5244.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i876 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n876 = &(i876->buckets_[h427 % i876->size_]);
            CENSUS_entry* e876;
            do if ((e876 = n876->obj) && h427 == n876->hash && CENSUS_mapkey0_idxfn::equals(se5244, *e876)) {
              long census_population = e876->CENSUS_POPULATION;
              long census_white = e876->CENSUS_WHITE;
              long census_asian = e876->CENSUS_ASIAN;
              long census_pacific = e876->CENSUS_PACIFIC;
              long census_blackafrican = e876->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e876->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e876->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e876->CENSUS_HOUSEUNITS;
              long census_families = e876->CENSUS_FAMILIES;
              long census_households = e876->CENSUS_HOUSEHOLDS;
              long census_husbwife = e876->CENSUS_HUSBWIFE;
              long census_males = e876->CENSUS_MALES;
              long census_females = e876->CENSUS_FEMALES;
              long census_householdschildren = e876->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e876->CENSUS_HISPANIC;
              long v876 = e876->__av;
              __SQL_SUM_AGGREGATE_763INVENTORY1.addOrDelOnZero(se5243.modify(__sql_sum_aggregate_763inventoryinventory_locn), (v875 * (v876 * (census_occupiedhouseunits * census_females))));
            } while ((n876 = n876->nxt));
          }
          e875 = e875->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_764INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e877 = LOCATION.head;
        while (e877) {
          long __sql_sum_aggregate_764inventoryinventory_locn = e877->LOCATION_LOCN;
          long location_zip = e877->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e877->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e877->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e877->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e877->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e877->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e877->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e877->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e877->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e877->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e877->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e877->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e877->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e877->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v877 = e877->__av;
          { //slice
            const HASH_RES_t h428 = CENSUS_mapkey0_idxfn::hash(se5246.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i878 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n878 = &(i878->buckets_[h428 % i878->size_]);
            CENSUS_entry* e878;
            do if ((e878 = n878->obj) && h428 == n878->hash && CENSUS_mapkey0_idxfn::equals(se5246, *e878)) {
              long census_population = e878->CENSUS_POPULATION;
              long census_white = e878->CENSUS_WHITE;
              long census_asian = e878->CENSUS_ASIAN;
              long census_pacific = e878->CENSUS_PACIFIC;
              long census_blackafrican = e878->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e878->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e878->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e878->CENSUS_HOUSEUNITS;
              long census_families = e878->CENSUS_FAMILIES;
              long census_households = e878->CENSUS_HOUSEHOLDS;
              long census_husbwife = e878->CENSUS_HUSBWIFE;
              long census_males = e878->CENSUS_MALES;
              long census_females = e878->CENSUS_FEMALES;
              long census_householdschildren = e878->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e878->CENSUS_HISPANIC;
              long v878 = e878->__av;
              __SQL_SUM_AGGREGATE_764INVENTORY1.addOrDelOnZero(se5245.modify(__sql_sum_aggregate_764inventoryinventory_locn), (v877 * (v878 * (census_occupiedhouseunits * census_householdschildren))));
            } while ((n878 = n878->nxt));
          }
          e877 = e877->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_765INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e879 = LOCATION.head;
        while (e879) {
          long __sql_sum_aggregate_765inventoryinventory_locn = e879->LOCATION_LOCN;
          long location_zip = e879->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e879->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e879->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e879->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e879->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e879->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e879->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e879->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e879->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e879->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e879->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e879->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e879->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e879->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v879 = e879->__av;
          { //slice
            const HASH_RES_t h429 = CENSUS_mapkey0_idxfn::hash(se5248.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i880 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n880 = &(i880->buckets_[h429 % i880->size_]);
            CENSUS_entry* e880;
            do if ((e880 = n880->obj) && h429 == n880->hash && CENSUS_mapkey0_idxfn::equals(se5248, *e880)) {
              long census_population = e880->CENSUS_POPULATION;
              long census_white = e880->CENSUS_WHITE;
              long census_asian = e880->CENSUS_ASIAN;
              long census_pacific = e880->CENSUS_PACIFIC;
              long census_blackafrican = e880->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e880->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e880->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e880->CENSUS_HOUSEUNITS;
              long census_families = e880->CENSUS_FAMILIES;
              long census_households = e880->CENSUS_HOUSEHOLDS;
              long census_husbwife = e880->CENSUS_HUSBWIFE;
              long census_males = e880->CENSUS_MALES;
              long census_females = e880->CENSUS_FEMALES;
              long census_householdschildren = e880->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e880->CENSUS_HISPANIC;
              long v880 = e880->__av;
              __SQL_SUM_AGGREGATE_765INVENTORY1.addOrDelOnZero(se5247.modify(__sql_sum_aggregate_765inventoryinventory_locn), (v879 * (v880 * (census_occupiedhouseunits * census_hispanic))));
            } while ((n880 = n880->nxt));
          }
          e879 = e879->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_769 = 0.0;
      __SQL_SUM_AGGREGATE_774 = 0.0;
      __SQL_SUM_AGGREGATE_776INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e881 = LOCATION.head;
        while (e881) {
          long __sql_sum_aggregate_776inventoryinventory_locn = e881->LOCATION_LOCN;
          long location_zip = e881->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e881->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e881->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e881->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e881->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e881->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e881->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e881->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e881->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e881->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e881->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e881->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e881->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e881->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v881 = e881->__av;
          { //slice
            const HASH_RES_t h430 = CENSUS_mapkey0_idxfn::hash(se5252.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i882 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n882 = &(i882->buckets_[h430 % i882->size_]);
            CENSUS_entry* e882;
            do if ((e882 = n882->obj) && h430 == n882->hash && CENSUS_mapkey0_idxfn::equals(se5252, *e882)) {
              long census_population = e882->CENSUS_POPULATION;
              long census_white = e882->CENSUS_WHITE;
              long census_asian = e882->CENSUS_ASIAN;
              long census_pacific = e882->CENSUS_PACIFIC;
              long census_blackafrican = e882->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e882->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e882->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e882->CENSUS_HOUSEUNITS;
              long census_families = e882->CENSUS_FAMILIES;
              long census_households = e882->CENSUS_HOUSEHOLDS;
              long census_husbwife = e882->CENSUS_HUSBWIFE;
              long census_males = e882->CENSUS_MALES;
              long census_females = e882->CENSUS_FEMALES;
              long census_householdschildren = e882->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e882->CENSUS_HISPANIC;
              long v882 = e882->__av;
              __SQL_SUM_AGGREGATE_776INVENTORY1.addOrDelOnZero(se5251.modify(__sql_sum_aggregate_776inventoryinventory_locn), (v881 * (v882 * (census_houseunits * census_houseunits))));
            } while ((n882 = n882->nxt));
          }
          e881 = e881->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_777INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e883 = LOCATION.head;
        while (e883) {
          long __sql_sum_aggregate_777inventoryinventory_locn = e883->LOCATION_LOCN;
          long location_zip = e883->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e883->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e883->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e883->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e883->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e883->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e883->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e883->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e883->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e883->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e883->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e883->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e883->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e883->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v883 = e883->__av;
          { //slice
            const HASH_RES_t h431 = CENSUS_mapkey0_idxfn::hash(se5254.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i884 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n884 = &(i884->buckets_[h431 % i884->size_]);
            CENSUS_entry* e884;
            do if ((e884 = n884->obj) && h431 == n884->hash && CENSUS_mapkey0_idxfn::equals(se5254, *e884)) {
              long census_population = e884->CENSUS_POPULATION;
              long census_white = e884->CENSUS_WHITE;
              long census_asian = e884->CENSUS_ASIAN;
              long census_pacific = e884->CENSUS_PACIFIC;
              long census_blackafrican = e884->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e884->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e884->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e884->CENSUS_HOUSEUNITS;
              long census_families = e884->CENSUS_FAMILIES;
              long census_households = e884->CENSUS_HOUSEHOLDS;
              long census_husbwife = e884->CENSUS_HUSBWIFE;
              long census_males = e884->CENSUS_MALES;
              long census_females = e884->CENSUS_FEMALES;
              long census_householdschildren = e884->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e884->CENSUS_HISPANIC;
              long v884 = e884->__av;
              __SQL_SUM_AGGREGATE_777INVENTORY1.addOrDelOnZero(se5253.modify(__sql_sum_aggregate_777inventoryinventory_locn), (v883 * (v884 * (census_houseunits * census_families))));
            } while ((n884 = n884->nxt));
          }
          e883 = e883->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_778INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e885 = LOCATION.head;
        while (e885) {
          long __sql_sum_aggregate_778inventoryinventory_locn = e885->LOCATION_LOCN;
          long location_zip = e885->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e885->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e885->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e885->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e885->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e885->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e885->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e885->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e885->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e885->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e885->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e885->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e885->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e885->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v885 = e885->__av;
          { //slice
            const HASH_RES_t h432 = CENSUS_mapkey0_idxfn::hash(se5256.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i886 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n886 = &(i886->buckets_[h432 % i886->size_]);
            CENSUS_entry* e886;
            do if ((e886 = n886->obj) && h432 == n886->hash && CENSUS_mapkey0_idxfn::equals(se5256, *e886)) {
              long census_population = e886->CENSUS_POPULATION;
              long census_white = e886->CENSUS_WHITE;
              long census_asian = e886->CENSUS_ASIAN;
              long census_pacific = e886->CENSUS_PACIFIC;
              long census_blackafrican = e886->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e886->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e886->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e886->CENSUS_HOUSEUNITS;
              long census_families = e886->CENSUS_FAMILIES;
              long census_households = e886->CENSUS_HOUSEHOLDS;
              long census_husbwife = e886->CENSUS_HUSBWIFE;
              long census_males = e886->CENSUS_MALES;
              long census_females = e886->CENSUS_FEMALES;
              long census_householdschildren = e886->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e886->CENSUS_HISPANIC;
              long v886 = e886->__av;
              __SQL_SUM_AGGREGATE_778INVENTORY1.addOrDelOnZero(se5255.modify(__sql_sum_aggregate_778inventoryinventory_locn), (v885 * (v886 * (census_houseunits * census_households))));
            } while ((n886 = n886->nxt));
          }
          e885 = e885->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_779INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e887 = LOCATION.head;
        while (e887) {
          long __sql_sum_aggregate_779inventoryinventory_locn = e887->LOCATION_LOCN;
          long location_zip = e887->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e887->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e887->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e887->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e887->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e887->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e887->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e887->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e887->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e887->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e887->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e887->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e887->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e887->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v887 = e887->__av;
          { //slice
            const HASH_RES_t h433 = CENSUS_mapkey0_idxfn::hash(se5258.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i888 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n888 = &(i888->buckets_[h433 % i888->size_]);
            CENSUS_entry* e888;
            do if ((e888 = n888->obj) && h433 == n888->hash && CENSUS_mapkey0_idxfn::equals(se5258, *e888)) {
              long census_population = e888->CENSUS_POPULATION;
              long census_white = e888->CENSUS_WHITE;
              long census_asian = e888->CENSUS_ASIAN;
              long census_pacific = e888->CENSUS_PACIFIC;
              long census_blackafrican = e888->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e888->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e888->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e888->CENSUS_HOUSEUNITS;
              long census_families = e888->CENSUS_FAMILIES;
              long census_households = e888->CENSUS_HOUSEHOLDS;
              long census_husbwife = e888->CENSUS_HUSBWIFE;
              long census_males = e888->CENSUS_MALES;
              long census_females = e888->CENSUS_FEMALES;
              long census_householdschildren = e888->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e888->CENSUS_HISPANIC;
              long v888 = e888->__av;
              __SQL_SUM_AGGREGATE_779INVENTORY1.addOrDelOnZero(se5257.modify(__sql_sum_aggregate_779inventoryinventory_locn), (v887 * (v888 * (census_houseunits * census_husbwife))));
            } while ((n888 = n888->nxt));
          }
          e887 = e887->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_780INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e889 = LOCATION.head;
        while (e889) {
          long __sql_sum_aggregate_780inventoryinventory_locn = e889->LOCATION_LOCN;
          long location_zip = e889->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e889->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e889->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e889->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e889->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e889->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e889->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e889->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e889->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e889->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e889->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e889->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e889->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e889->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v889 = e889->__av;
          { //slice
            const HASH_RES_t h434 = CENSUS_mapkey0_idxfn::hash(se5260.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i890 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n890 = &(i890->buckets_[h434 % i890->size_]);
            CENSUS_entry* e890;
            do if ((e890 = n890->obj) && h434 == n890->hash && CENSUS_mapkey0_idxfn::equals(se5260, *e890)) {
              long census_population = e890->CENSUS_POPULATION;
              long census_white = e890->CENSUS_WHITE;
              long census_asian = e890->CENSUS_ASIAN;
              long census_pacific = e890->CENSUS_PACIFIC;
              long census_blackafrican = e890->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e890->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e890->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e890->CENSUS_HOUSEUNITS;
              long census_families = e890->CENSUS_FAMILIES;
              long census_households = e890->CENSUS_HOUSEHOLDS;
              long census_husbwife = e890->CENSUS_HUSBWIFE;
              long census_males = e890->CENSUS_MALES;
              long census_females = e890->CENSUS_FEMALES;
              long census_householdschildren = e890->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e890->CENSUS_HISPANIC;
              long v890 = e890->__av;
              __SQL_SUM_AGGREGATE_780INVENTORY1.addOrDelOnZero(se5259.modify(__sql_sum_aggregate_780inventoryinventory_locn), (v889 * (v890 * (census_houseunits * census_males))));
            } while ((n890 = n890->nxt));
          }
          e889 = e889->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_781INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e891 = LOCATION.head;
        while (e891) {
          long __sql_sum_aggregate_781inventoryinventory_locn = e891->LOCATION_LOCN;
          long location_zip = e891->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e891->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e891->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e891->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e891->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e891->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e891->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e891->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e891->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e891->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e891->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e891->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e891->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e891->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v891 = e891->__av;
          { //slice
            const HASH_RES_t h435 = CENSUS_mapkey0_idxfn::hash(se5262.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i892 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n892 = &(i892->buckets_[h435 % i892->size_]);
            CENSUS_entry* e892;
            do if ((e892 = n892->obj) && h435 == n892->hash && CENSUS_mapkey0_idxfn::equals(se5262, *e892)) {
              long census_population = e892->CENSUS_POPULATION;
              long census_white = e892->CENSUS_WHITE;
              long census_asian = e892->CENSUS_ASIAN;
              long census_pacific = e892->CENSUS_PACIFIC;
              long census_blackafrican = e892->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e892->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e892->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e892->CENSUS_HOUSEUNITS;
              long census_families = e892->CENSUS_FAMILIES;
              long census_households = e892->CENSUS_HOUSEHOLDS;
              long census_husbwife = e892->CENSUS_HUSBWIFE;
              long census_males = e892->CENSUS_MALES;
              long census_females = e892->CENSUS_FEMALES;
              long census_householdschildren = e892->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e892->CENSUS_HISPANIC;
              long v892 = e892->__av;
              __SQL_SUM_AGGREGATE_781INVENTORY1.addOrDelOnZero(se5261.modify(__sql_sum_aggregate_781inventoryinventory_locn), (v891 * (v892 * (census_houseunits * census_females))));
            } while ((n892 = n892->nxt));
          }
          e891 = e891->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_782INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e893 = LOCATION.head;
        while (e893) {
          long __sql_sum_aggregate_782inventoryinventory_locn = e893->LOCATION_LOCN;
          long location_zip = e893->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e893->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e893->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e893->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e893->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e893->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e893->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e893->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e893->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e893->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e893->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e893->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e893->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e893->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v893 = e893->__av;
          { //slice
            const HASH_RES_t h436 = CENSUS_mapkey0_idxfn::hash(se5264.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i894 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n894 = &(i894->buckets_[h436 % i894->size_]);
            CENSUS_entry* e894;
            do if ((e894 = n894->obj) && h436 == n894->hash && CENSUS_mapkey0_idxfn::equals(se5264, *e894)) {
              long census_population = e894->CENSUS_POPULATION;
              long census_white = e894->CENSUS_WHITE;
              long census_asian = e894->CENSUS_ASIAN;
              long census_pacific = e894->CENSUS_PACIFIC;
              long census_blackafrican = e894->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e894->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e894->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e894->CENSUS_HOUSEUNITS;
              long census_families = e894->CENSUS_FAMILIES;
              long census_households = e894->CENSUS_HOUSEHOLDS;
              long census_husbwife = e894->CENSUS_HUSBWIFE;
              long census_males = e894->CENSUS_MALES;
              long census_females = e894->CENSUS_FEMALES;
              long census_householdschildren = e894->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e894->CENSUS_HISPANIC;
              long v894 = e894->__av;
              __SQL_SUM_AGGREGATE_782INVENTORY1.addOrDelOnZero(se5263.modify(__sql_sum_aggregate_782inventoryinventory_locn), (v893 * (v894 * (census_houseunits * census_householdschildren))));
            } while ((n894 = n894->nxt));
          }
          e893 = e893->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_783INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e895 = LOCATION.head;
        while (e895) {
          long __sql_sum_aggregate_783inventoryinventory_locn = e895->LOCATION_LOCN;
          long location_zip = e895->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e895->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e895->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e895->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e895->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e895->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e895->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e895->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e895->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e895->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e895->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e895->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e895->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e895->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v895 = e895->__av;
          { //slice
            const HASH_RES_t h437 = CENSUS_mapkey0_idxfn::hash(se5266.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i896 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n896 = &(i896->buckets_[h437 % i896->size_]);
            CENSUS_entry* e896;
            do if ((e896 = n896->obj) && h437 == n896->hash && CENSUS_mapkey0_idxfn::equals(se5266, *e896)) {
              long census_population = e896->CENSUS_POPULATION;
              long census_white = e896->CENSUS_WHITE;
              long census_asian = e896->CENSUS_ASIAN;
              long census_pacific = e896->CENSUS_PACIFIC;
              long census_blackafrican = e896->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e896->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e896->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e896->CENSUS_HOUSEUNITS;
              long census_families = e896->CENSUS_FAMILIES;
              long census_households = e896->CENSUS_HOUSEHOLDS;
              long census_husbwife = e896->CENSUS_HUSBWIFE;
              long census_males = e896->CENSUS_MALES;
              long census_females = e896->CENSUS_FEMALES;
              long census_householdschildren = e896->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e896->CENSUS_HISPANIC;
              long v896 = e896->__av;
              __SQL_SUM_AGGREGATE_783INVENTORY1.addOrDelOnZero(se5265.modify(__sql_sum_aggregate_783inventoryinventory_locn), (v895 * (v896 * (census_houseunits * census_hispanic))));
            } while ((n896 = n896->nxt));
          }
          e895 = e895->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_787 = 0.0;
      __SQL_SUM_AGGREGATE_792 = 0.0;
      __SQL_SUM_AGGREGATE_794INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e897 = LOCATION.head;
        while (e897) {
          long __sql_sum_aggregate_794inventoryinventory_locn = e897->LOCATION_LOCN;
          long location_zip = e897->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e897->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e897->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e897->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e897->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e897->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e897->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e897->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e897->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e897->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e897->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e897->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e897->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e897->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v897 = e897->__av;
          { //slice
            const HASH_RES_t h438 = CENSUS_mapkey0_idxfn::hash(se5270.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i898 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n898 = &(i898->buckets_[h438 % i898->size_]);
            CENSUS_entry* e898;
            do if ((e898 = n898->obj) && h438 == n898->hash && CENSUS_mapkey0_idxfn::equals(se5270, *e898)) {
              long census_population = e898->CENSUS_POPULATION;
              long census_white = e898->CENSUS_WHITE;
              long census_asian = e898->CENSUS_ASIAN;
              long census_pacific = e898->CENSUS_PACIFIC;
              long census_blackafrican = e898->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e898->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e898->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e898->CENSUS_HOUSEUNITS;
              long census_families = e898->CENSUS_FAMILIES;
              long census_households = e898->CENSUS_HOUSEHOLDS;
              long census_husbwife = e898->CENSUS_HUSBWIFE;
              long census_males = e898->CENSUS_MALES;
              long census_females = e898->CENSUS_FEMALES;
              long census_householdschildren = e898->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e898->CENSUS_HISPANIC;
              long v898 = e898->__av;
              __SQL_SUM_AGGREGATE_794INVENTORY1.addOrDelOnZero(se5269.modify(__sql_sum_aggregate_794inventoryinventory_locn), (v897 * (v898 * (census_families * census_families))));
            } while ((n898 = n898->nxt));
          }
          e897 = e897->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_795INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e899 = LOCATION.head;
        while (e899) {
          long __sql_sum_aggregate_795inventoryinventory_locn = e899->LOCATION_LOCN;
          long location_zip = e899->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e899->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e899->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e899->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e899->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e899->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e899->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e899->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e899->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e899->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e899->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e899->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e899->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e899->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v899 = e899->__av;
          { //slice
            const HASH_RES_t h439 = CENSUS_mapkey0_idxfn::hash(se5272.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i900 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n900 = &(i900->buckets_[h439 % i900->size_]);
            CENSUS_entry* e900;
            do if ((e900 = n900->obj) && h439 == n900->hash && CENSUS_mapkey0_idxfn::equals(se5272, *e900)) {
              long census_population = e900->CENSUS_POPULATION;
              long census_white = e900->CENSUS_WHITE;
              long census_asian = e900->CENSUS_ASIAN;
              long census_pacific = e900->CENSUS_PACIFIC;
              long census_blackafrican = e900->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e900->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e900->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e900->CENSUS_HOUSEUNITS;
              long census_families = e900->CENSUS_FAMILIES;
              long census_households = e900->CENSUS_HOUSEHOLDS;
              long census_husbwife = e900->CENSUS_HUSBWIFE;
              long census_males = e900->CENSUS_MALES;
              long census_females = e900->CENSUS_FEMALES;
              long census_householdschildren = e900->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e900->CENSUS_HISPANIC;
              long v900 = e900->__av;
              __SQL_SUM_AGGREGATE_795INVENTORY1.addOrDelOnZero(se5271.modify(__sql_sum_aggregate_795inventoryinventory_locn), (v899 * (v900 * (census_families * census_households))));
            } while ((n900 = n900->nxt));
          }
          e899 = e899->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_796INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e901 = LOCATION.head;
        while (e901) {
          long __sql_sum_aggregate_796inventoryinventory_locn = e901->LOCATION_LOCN;
          long location_zip = e901->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e901->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e901->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e901->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e901->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e901->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e901->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e901->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e901->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e901->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e901->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e901->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e901->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e901->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v901 = e901->__av;
          { //slice
            const HASH_RES_t h440 = CENSUS_mapkey0_idxfn::hash(se5274.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i902 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n902 = &(i902->buckets_[h440 % i902->size_]);
            CENSUS_entry* e902;
            do if ((e902 = n902->obj) && h440 == n902->hash && CENSUS_mapkey0_idxfn::equals(se5274, *e902)) {
              long census_population = e902->CENSUS_POPULATION;
              long census_white = e902->CENSUS_WHITE;
              long census_asian = e902->CENSUS_ASIAN;
              long census_pacific = e902->CENSUS_PACIFIC;
              long census_blackafrican = e902->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e902->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e902->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e902->CENSUS_HOUSEUNITS;
              long census_families = e902->CENSUS_FAMILIES;
              long census_households = e902->CENSUS_HOUSEHOLDS;
              long census_husbwife = e902->CENSUS_HUSBWIFE;
              long census_males = e902->CENSUS_MALES;
              long census_females = e902->CENSUS_FEMALES;
              long census_householdschildren = e902->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e902->CENSUS_HISPANIC;
              long v902 = e902->__av;
              __SQL_SUM_AGGREGATE_796INVENTORY1.addOrDelOnZero(se5273.modify(__sql_sum_aggregate_796inventoryinventory_locn), (v901 * (v902 * (census_families * census_husbwife))));
            } while ((n902 = n902->nxt));
          }
          e901 = e901->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_797INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e903 = LOCATION.head;
        while (e903) {
          long __sql_sum_aggregate_797inventoryinventory_locn = e903->LOCATION_LOCN;
          long location_zip = e903->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e903->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e903->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e903->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e903->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e903->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e903->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e903->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e903->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e903->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e903->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e903->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e903->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e903->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v903 = e903->__av;
          { //slice
            const HASH_RES_t h441 = CENSUS_mapkey0_idxfn::hash(se5276.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i904 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n904 = &(i904->buckets_[h441 % i904->size_]);
            CENSUS_entry* e904;
            do if ((e904 = n904->obj) && h441 == n904->hash && CENSUS_mapkey0_idxfn::equals(se5276, *e904)) {
              long census_population = e904->CENSUS_POPULATION;
              long census_white = e904->CENSUS_WHITE;
              long census_asian = e904->CENSUS_ASIAN;
              long census_pacific = e904->CENSUS_PACIFIC;
              long census_blackafrican = e904->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e904->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e904->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e904->CENSUS_HOUSEUNITS;
              long census_families = e904->CENSUS_FAMILIES;
              long census_households = e904->CENSUS_HOUSEHOLDS;
              long census_husbwife = e904->CENSUS_HUSBWIFE;
              long census_males = e904->CENSUS_MALES;
              long census_females = e904->CENSUS_FEMALES;
              long census_householdschildren = e904->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e904->CENSUS_HISPANIC;
              long v904 = e904->__av;
              __SQL_SUM_AGGREGATE_797INVENTORY1.addOrDelOnZero(se5275.modify(__sql_sum_aggregate_797inventoryinventory_locn), (v903 * (v904 * (census_families * census_males))));
            } while ((n904 = n904->nxt));
          }
          e903 = e903->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_798INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e905 = LOCATION.head;
        while (e905) {
          long __sql_sum_aggregate_798inventoryinventory_locn = e905->LOCATION_LOCN;
          long location_zip = e905->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e905->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e905->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e905->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e905->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e905->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e905->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e905->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e905->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e905->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e905->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e905->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e905->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e905->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v905 = e905->__av;
          { //slice
            const HASH_RES_t h442 = CENSUS_mapkey0_idxfn::hash(se5278.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i906 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n906 = &(i906->buckets_[h442 % i906->size_]);
            CENSUS_entry* e906;
            do if ((e906 = n906->obj) && h442 == n906->hash && CENSUS_mapkey0_idxfn::equals(se5278, *e906)) {
              long census_population = e906->CENSUS_POPULATION;
              long census_white = e906->CENSUS_WHITE;
              long census_asian = e906->CENSUS_ASIAN;
              long census_pacific = e906->CENSUS_PACIFIC;
              long census_blackafrican = e906->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e906->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e906->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e906->CENSUS_HOUSEUNITS;
              long census_families = e906->CENSUS_FAMILIES;
              long census_households = e906->CENSUS_HOUSEHOLDS;
              long census_husbwife = e906->CENSUS_HUSBWIFE;
              long census_males = e906->CENSUS_MALES;
              long census_females = e906->CENSUS_FEMALES;
              long census_householdschildren = e906->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e906->CENSUS_HISPANIC;
              long v906 = e906->__av;
              __SQL_SUM_AGGREGATE_798INVENTORY1.addOrDelOnZero(se5277.modify(__sql_sum_aggregate_798inventoryinventory_locn), (v905 * (v906 * (census_families * census_females))));
            } while ((n906 = n906->nxt));
          }
          e905 = e905->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_799INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e907 = LOCATION.head;
        while (e907) {
          long __sql_sum_aggregate_799inventoryinventory_locn = e907->LOCATION_LOCN;
          long location_zip = e907->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e907->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e907->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e907->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e907->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e907->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e907->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e907->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e907->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e907->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e907->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e907->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e907->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e907->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v907 = e907->__av;
          { //slice
            const HASH_RES_t h443 = CENSUS_mapkey0_idxfn::hash(se5280.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i908 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n908 = &(i908->buckets_[h443 % i908->size_]);
            CENSUS_entry* e908;
            do if ((e908 = n908->obj) && h443 == n908->hash && CENSUS_mapkey0_idxfn::equals(se5280, *e908)) {
              long census_population = e908->CENSUS_POPULATION;
              long census_white = e908->CENSUS_WHITE;
              long census_asian = e908->CENSUS_ASIAN;
              long census_pacific = e908->CENSUS_PACIFIC;
              long census_blackafrican = e908->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e908->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e908->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e908->CENSUS_HOUSEUNITS;
              long census_families = e908->CENSUS_FAMILIES;
              long census_households = e908->CENSUS_HOUSEHOLDS;
              long census_husbwife = e908->CENSUS_HUSBWIFE;
              long census_males = e908->CENSUS_MALES;
              long census_females = e908->CENSUS_FEMALES;
              long census_householdschildren = e908->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e908->CENSUS_HISPANIC;
              long v908 = e908->__av;
              __SQL_SUM_AGGREGATE_799INVENTORY1.addOrDelOnZero(se5279.modify(__sql_sum_aggregate_799inventoryinventory_locn), (v907 * (v908 * (census_families * census_householdschildren))));
            } while ((n908 = n908->nxt));
          }
          e907 = e907->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_800INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e909 = LOCATION.head;
        while (e909) {
          long __sql_sum_aggregate_800inventoryinventory_locn = e909->LOCATION_LOCN;
          long location_zip = e909->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e909->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e909->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e909->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e909->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e909->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e909->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e909->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e909->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e909->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e909->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e909->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e909->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e909->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v909 = e909->__av;
          { //slice
            const HASH_RES_t h444 = CENSUS_mapkey0_idxfn::hash(se5282.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i910 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n910 = &(i910->buckets_[h444 % i910->size_]);
            CENSUS_entry* e910;
            do if ((e910 = n910->obj) && h444 == n910->hash && CENSUS_mapkey0_idxfn::equals(se5282, *e910)) {
              long census_population = e910->CENSUS_POPULATION;
              long census_white = e910->CENSUS_WHITE;
              long census_asian = e910->CENSUS_ASIAN;
              long census_pacific = e910->CENSUS_PACIFIC;
              long census_blackafrican = e910->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e910->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e910->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e910->CENSUS_HOUSEUNITS;
              long census_families = e910->CENSUS_FAMILIES;
              long census_households = e910->CENSUS_HOUSEHOLDS;
              long census_husbwife = e910->CENSUS_HUSBWIFE;
              long census_males = e910->CENSUS_MALES;
              long census_females = e910->CENSUS_FEMALES;
              long census_householdschildren = e910->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e910->CENSUS_HISPANIC;
              long v910 = e910->__av;
              __SQL_SUM_AGGREGATE_800INVENTORY1.addOrDelOnZero(se5281.modify(__sql_sum_aggregate_800inventoryinventory_locn), (v909 * (v910 * (census_families * census_hispanic))));
            } while ((n910 = n910->nxt));
          }
          e909 = e909->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_804 = 0.0;
      __SQL_SUM_AGGREGATE_809 = 0.0;
      __SQL_SUM_AGGREGATE_811INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e911 = LOCATION.head;
        while (e911) {
          long __sql_sum_aggregate_811inventoryinventory_locn = e911->LOCATION_LOCN;
          long location_zip = e911->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e911->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e911->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e911->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e911->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e911->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e911->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e911->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e911->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e911->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e911->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e911->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e911->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e911->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v911 = e911->__av;
          { //slice
            const HASH_RES_t h445 = CENSUS_mapkey0_idxfn::hash(se5286.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i912 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n912 = &(i912->buckets_[h445 % i912->size_]);
            CENSUS_entry* e912;
            do if ((e912 = n912->obj) && h445 == n912->hash && CENSUS_mapkey0_idxfn::equals(se5286, *e912)) {
              long census_population = e912->CENSUS_POPULATION;
              long census_white = e912->CENSUS_WHITE;
              long census_asian = e912->CENSUS_ASIAN;
              long census_pacific = e912->CENSUS_PACIFIC;
              long census_blackafrican = e912->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e912->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e912->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e912->CENSUS_HOUSEUNITS;
              long census_families = e912->CENSUS_FAMILIES;
              long census_households = e912->CENSUS_HOUSEHOLDS;
              long census_husbwife = e912->CENSUS_HUSBWIFE;
              long census_males = e912->CENSUS_MALES;
              long census_females = e912->CENSUS_FEMALES;
              long census_householdschildren = e912->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e912->CENSUS_HISPANIC;
              long v912 = e912->__av;
              __SQL_SUM_AGGREGATE_811INVENTORY1.addOrDelOnZero(se5285.modify(__sql_sum_aggregate_811inventoryinventory_locn), (v911 * (v912 * (census_households * census_households))));
            } while ((n912 = n912->nxt));
          }
          e911 = e911->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_812INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e913 = LOCATION.head;
        while (e913) {
          long __sql_sum_aggregate_812inventoryinventory_locn = e913->LOCATION_LOCN;
          long location_zip = e913->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e913->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e913->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e913->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e913->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e913->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e913->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e913->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e913->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e913->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e913->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e913->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e913->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e913->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v913 = e913->__av;
          { //slice
            const HASH_RES_t h446 = CENSUS_mapkey0_idxfn::hash(se5288.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i914 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n914 = &(i914->buckets_[h446 % i914->size_]);
            CENSUS_entry* e914;
            do if ((e914 = n914->obj) && h446 == n914->hash && CENSUS_mapkey0_idxfn::equals(se5288, *e914)) {
              long census_population = e914->CENSUS_POPULATION;
              long census_white = e914->CENSUS_WHITE;
              long census_asian = e914->CENSUS_ASIAN;
              long census_pacific = e914->CENSUS_PACIFIC;
              long census_blackafrican = e914->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e914->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e914->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e914->CENSUS_HOUSEUNITS;
              long census_families = e914->CENSUS_FAMILIES;
              long census_households = e914->CENSUS_HOUSEHOLDS;
              long census_husbwife = e914->CENSUS_HUSBWIFE;
              long census_males = e914->CENSUS_MALES;
              long census_females = e914->CENSUS_FEMALES;
              long census_householdschildren = e914->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e914->CENSUS_HISPANIC;
              long v914 = e914->__av;
              __SQL_SUM_AGGREGATE_812INVENTORY1.addOrDelOnZero(se5287.modify(__sql_sum_aggregate_812inventoryinventory_locn), (v913 * (v914 * (census_households * census_husbwife))));
            } while ((n914 = n914->nxt));
          }
          e913 = e913->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_813INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e915 = LOCATION.head;
        while (e915) {
          long __sql_sum_aggregate_813inventoryinventory_locn = e915->LOCATION_LOCN;
          long location_zip = e915->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e915->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e915->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e915->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e915->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e915->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e915->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e915->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e915->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e915->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e915->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e915->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e915->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e915->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v915 = e915->__av;
          { //slice
            const HASH_RES_t h447 = CENSUS_mapkey0_idxfn::hash(se5290.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i916 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n916 = &(i916->buckets_[h447 % i916->size_]);
            CENSUS_entry* e916;
            do if ((e916 = n916->obj) && h447 == n916->hash && CENSUS_mapkey0_idxfn::equals(se5290, *e916)) {
              long census_population = e916->CENSUS_POPULATION;
              long census_white = e916->CENSUS_WHITE;
              long census_asian = e916->CENSUS_ASIAN;
              long census_pacific = e916->CENSUS_PACIFIC;
              long census_blackafrican = e916->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e916->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e916->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e916->CENSUS_HOUSEUNITS;
              long census_families = e916->CENSUS_FAMILIES;
              long census_households = e916->CENSUS_HOUSEHOLDS;
              long census_husbwife = e916->CENSUS_HUSBWIFE;
              long census_males = e916->CENSUS_MALES;
              long census_females = e916->CENSUS_FEMALES;
              long census_householdschildren = e916->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e916->CENSUS_HISPANIC;
              long v916 = e916->__av;
              __SQL_SUM_AGGREGATE_813INVENTORY1.addOrDelOnZero(se5289.modify(__sql_sum_aggregate_813inventoryinventory_locn), (v915 * (v916 * (census_households * census_males))));
            } while ((n916 = n916->nxt));
          }
          e915 = e915->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_814INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e917 = LOCATION.head;
        while (e917) {
          long __sql_sum_aggregate_814inventoryinventory_locn = e917->LOCATION_LOCN;
          long location_zip = e917->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e917->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e917->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e917->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e917->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e917->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e917->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e917->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e917->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e917->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e917->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e917->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e917->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e917->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v917 = e917->__av;
          { //slice
            const HASH_RES_t h448 = CENSUS_mapkey0_idxfn::hash(se5292.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i918 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n918 = &(i918->buckets_[h448 % i918->size_]);
            CENSUS_entry* e918;
            do if ((e918 = n918->obj) && h448 == n918->hash && CENSUS_mapkey0_idxfn::equals(se5292, *e918)) {
              long census_population = e918->CENSUS_POPULATION;
              long census_white = e918->CENSUS_WHITE;
              long census_asian = e918->CENSUS_ASIAN;
              long census_pacific = e918->CENSUS_PACIFIC;
              long census_blackafrican = e918->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e918->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e918->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e918->CENSUS_HOUSEUNITS;
              long census_families = e918->CENSUS_FAMILIES;
              long census_households = e918->CENSUS_HOUSEHOLDS;
              long census_husbwife = e918->CENSUS_HUSBWIFE;
              long census_males = e918->CENSUS_MALES;
              long census_females = e918->CENSUS_FEMALES;
              long census_householdschildren = e918->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e918->CENSUS_HISPANIC;
              long v918 = e918->__av;
              __SQL_SUM_AGGREGATE_814INVENTORY1.addOrDelOnZero(se5291.modify(__sql_sum_aggregate_814inventoryinventory_locn), (v917 * (v918 * (census_households * census_females))));
            } while ((n918 = n918->nxt));
          }
          e917 = e917->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_815INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e919 = LOCATION.head;
        while (e919) {
          long __sql_sum_aggregate_815inventoryinventory_locn = e919->LOCATION_LOCN;
          long location_zip = e919->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e919->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e919->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e919->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e919->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e919->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e919->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e919->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e919->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e919->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e919->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e919->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e919->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e919->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v919 = e919->__av;
          { //slice
            const HASH_RES_t h449 = CENSUS_mapkey0_idxfn::hash(se5294.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i920 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n920 = &(i920->buckets_[h449 % i920->size_]);
            CENSUS_entry* e920;
            do if ((e920 = n920->obj) && h449 == n920->hash && CENSUS_mapkey0_idxfn::equals(se5294, *e920)) {
              long census_population = e920->CENSUS_POPULATION;
              long census_white = e920->CENSUS_WHITE;
              long census_asian = e920->CENSUS_ASIAN;
              long census_pacific = e920->CENSUS_PACIFIC;
              long census_blackafrican = e920->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e920->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e920->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e920->CENSUS_HOUSEUNITS;
              long census_families = e920->CENSUS_FAMILIES;
              long census_households = e920->CENSUS_HOUSEHOLDS;
              long census_husbwife = e920->CENSUS_HUSBWIFE;
              long census_males = e920->CENSUS_MALES;
              long census_females = e920->CENSUS_FEMALES;
              long census_householdschildren = e920->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e920->CENSUS_HISPANIC;
              long v920 = e920->__av;
              __SQL_SUM_AGGREGATE_815INVENTORY1.addOrDelOnZero(se5293.modify(__sql_sum_aggregate_815inventoryinventory_locn), (v919 * (v920 * (census_households * census_householdschildren))));
            } while ((n920 = n920->nxt));
          }
          e919 = e919->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_816INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e921 = LOCATION.head;
        while (e921) {
          long __sql_sum_aggregate_816inventoryinventory_locn = e921->LOCATION_LOCN;
          long location_zip = e921->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e921->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e921->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e921->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e921->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e921->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e921->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e921->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e921->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e921->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e921->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e921->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e921->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e921->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v921 = e921->__av;
          { //slice
            const HASH_RES_t h450 = CENSUS_mapkey0_idxfn::hash(se5296.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i922 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n922 = &(i922->buckets_[h450 % i922->size_]);
            CENSUS_entry* e922;
            do if ((e922 = n922->obj) && h450 == n922->hash && CENSUS_mapkey0_idxfn::equals(se5296, *e922)) {
              long census_population = e922->CENSUS_POPULATION;
              long census_white = e922->CENSUS_WHITE;
              long census_asian = e922->CENSUS_ASIAN;
              long census_pacific = e922->CENSUS_PACIFIC;
              long census_blackafrican = e922->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e922->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e922->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e922->CENSUS_HOUSEUNITS;
              long census_families = e922->CENSUS_FAMILIES;
              long census_households = e922->CENSUS_HOUSEHOLDS;
              long census_husbwife = e922->CENSUS_HUSBWIFE;
              long census_males = e922->CENSUS_MALES;
              long census_females = e922->CENSUS_FEMALES;
              long census_householdschildren = e922->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e922->CENSUS_HISPANIC;
              long v922 = e922->__av;
              __SQL_SUM_AGGREGATE_816INVENTORY1.addOrDelOnZero(se5295.modify(__sql_sum_aggregate_816inventoryinventory_locn), (v921 * (v922 * (census_households * census_hispanic))));
            } while ((n922 = n922->nxt));
          }
          e921 = e921->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_820 = 0.0;
      __SQL_SUM_AGGREGATE_825 = 0.0;
      __SQL_SUM_AGGREGATE_827INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e923 = LOCATION.head;
        while (e923) {
          long __sql_sum_aggregate_827inventoryinventory_locn = e923->LOCATION_LOCN;
          long location_zip = e923->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e923->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e923->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e923->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e923->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e923->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e923->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e923->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e923->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e923->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e923->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e923->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e923->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e923->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v923 = e923->__av;
          { //slice
            const HASH_RES_t h451 = CENSUS_mapkey0_idxfn::hash(se5300.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i924 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n924 = &(i924->buckets_[h451 % i924->size_]);
            CENSUS_entry* e924;
            do if ((e924 = n924->obj) && h451 == n924->hash && CENSUS_mapkey0_idxfn::equals(se5300, *e924)) {
              long census_population = e924->CENSUS_POPULATION;
              long census_white = e924->CENSUS_WHITE;
              long census_asian = e924->CENSUS_ASIAN;
              long census_pacific = e924->CENSUS_PACIFIC;
              long census_blackafrican = e924->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e924->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e924->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e924->CENSUS_HOUSEUNITS;
              long census_families = e924->CENSUS_FAMILIES;
              long census_households = e924->CENSUS_HOUSEHOLDS;
              long census_husbwife = e924->CENSUS_HUSBWIFE;
              long census_males = e924->CENSUS_MALES;
              long census_females = e924->CENSUS_FEMALES;
              long census_householdschildren = e924->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e924->CENSUS_HISPANIC;
              long v924 = e924->__av;
              __SQL_SUM_AGGREGATE_827INVENTORY1.addOrDelOnZero(se5299.modify(__sql_sum_aggregate_827inventoryinventory_locn), (v923 * (v924 * (census_husbwife * census_husbwife))));
            } while ((n924 = n924->nxt));
          }
          e923 = e923->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_828INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e925 = LOCATION.head;
        while (e925) {
          long __sql_sum_aggregate_828inventoryinventory_locn = e925->LOCATION_LOCN;
          long location_zip = e925->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e925->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e925->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e925->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e925->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e925->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e925->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e925->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e925->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e925->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e925->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e925->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e925->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e925->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v925 = e925->__av;
          { //slice
            const HASH_RES_t h452 = CENSUS_mapkey0_idxfn::hash(se5302.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i926 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n926 = &(i926->buckets_[h452 % i926->size_]);
            CENSUS_entry* e926;
            do if ((e926 = n926->obj) && h452 == n926->hash && CENSUS_mapkey0_idxfn::equals(se5302, *e926)) {
              long census_population = e926->CENSUS_POPULATION;
              long census_white = e926->CENSUS_WHITE;
              long census_asian = e926->CENSUS_ASIAN;
              long census_pacific = e926->CENSUS_PACIFIC;
              long census_blackafrican = e926->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e926->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e926->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e926->CENSUS_HOUSEUNITS;
              long census_families = e926->CENSUS_FAMILIES;
              long census_households = e926->CENSUS_HOUSEHOLDS;
              long census_husbwife = e926->CENSUS_HUSBWIFE;
              long census_males = e926->CENSUS_MALES;
              long census_females = e926->CENSUS_FEMALES;
              long census_householdschildren = e926->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e926->CENSUS_HISPANIC;
              long v926 = e926->__av;
              __SQL_SUM_AGGREGATE_828INVENTORY1.addOrDelOnZero(se5301.modify(__sql_sum_aggregate_828inventoryinventory_locn), (v925 * (v926 * (census_husbwife * census_males))));
            } while ((n926 = n926->nxt));
          }
          e925 = e925->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_829INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e927 = LOCATION.head;
        while (e927) {
          long __sql_sum_aggregate_829inventoryinventory_locn = e927->LOCATION_LOCN;
          long location_zip = e927->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e927->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e927->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e927->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e927->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e927->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e927->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e927->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e927->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e927->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e927->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e927->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e927->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e927->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v927 = e927->__av;
          { //slice
            const HASH_RES_t h453 = CENSUS_mapkey0_idxfn::hash(se5304.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i928 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n928 = &(i928->buckets_[h453 % i928->size_]);
            CENSUS_entry* e928;
            do if ((e928 = n928->obj) && h453 == n928->hash && CENSUS_mapkey0_idxfn::equals(se5304, *e928)) {
              long census_population = e928->CENSUS_POPULATION;
              long census_white = e928->CENSUS_WHITE;
              long census_asian = e928->CENSUS_ASIAN;
              long census_pacific = e928->CENSUS_PACIFIC;
              long census_blackafrican = e928->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e928->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e928->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e928->CENSUS_HOUSEUNITS;
              long census_families = e928->CENSUS_FAMILIES;
              long census_households = e928->CENSUS_HOUSEHOLDS;
              long census_husbwife = e928->CENSUS_HUSBWIFE;
              long census_males = e928->CENSUS_MALES;
              long census_females = e928->CENSUS_FEMALES;
              long census_householdschildren = e928->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e928->CENSUS_HISPANIC;
              long v928 = e928->__av;
              __SQL_SUM_AGGREGATE_829INVENTORY1.addOrDelOnZero(se5303.modify(__sql_sum_aggregate_829inventoryinventory_locn), (v927 * (v928 * (census_husbwife * census_females))));
            } while ((n928 = n928->nxt));
          }
          e927 = e927->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_830INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e929 = LOCATION.head;
        while (e929) {
          long __sql_sum_aggregate_830inventoryinventory_locn = e929->LOCATION_LOCN;
          long location_zip = e929->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e929->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e929->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e929->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e929->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e929->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e929->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e929->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e929->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e929->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e929->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e929->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e929->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e929->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v929 = e929->__av;
          { //slice
            const HASH_RES_t h454 = CENSUS_mapkey0_idxfn::hash(se5306.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i930 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n930 = &(i930->buckets_[h454 % i930->size_]);
            CENSUS_entry* e930;
            do if ((e930 = n930->obj) && h454 == n930->hash && CENSUS_mapkey0_idxfn::equals(se5306, *e930)) {
              long census_population = e930->CENSUS_POPULATION;
              long census_white = e930->CENSUS_WHITE;
              long census_asian = e930->CENSUS_ASIAN;
              long census_pacific = e930->CENSUS_PACIFIC;
              long census_blackafrican = e930->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e930->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e930->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e930->CENSUS_HOUSEUNITS;
              long census_families = e930->CENSUS_FAMILIES;
              long census_households = e930->CENSUS_HOUSEHOLDS;
              long census_husbwife = e930->CENSUS_HUSBWIFE;
              long census_males = e930->CENSUS_MALES;
              long census_females = e930->CENSUS_FEMALES;
              long census_householdschildren = e930->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e930->CENSUS_HISPANIC;
              long v930 = e930->__av;
              __SQL_SUM_AGGREGATE_830INVENTORY1.addOrDelOnZero(se5305.modify(__sql_sum_aggregate_830inventoryinventory_locn), (v929 * (v930 * (census_husbwife * census_householdschildren))));
            } while ((n930 = n930->nxt));
          }
          e929 = e929->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_831INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e931 = LOCATION.head;
        while (e931) {
          long __sql_sum_aggregate_831inventoryinventory_locn = e931->LOCATION_LOCN;
          long location_zip = e931->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e931->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e931->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e931->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e931->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e931->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e931->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e931->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e931->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e931->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e931->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e931->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e931->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e931->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v931 = e931->__av;
          { //slice
            const HASH_RES_t h455 = CENSUS_mapkey0_idxfn::hash(se5308.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i932 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n932 = &(i932->buckets_[h455 % i932->size_]);
            CENSUS_entry* e932;
            do if ((e932 = n932->obj) && h455 == n932->hash && CENSUS_mapkey0_idxfn::equals(se5308, *e932)) {
              long census_population = e932->CENSUS_POPULATION;
              long census_white = e932->CENSUS_WHITE;
              long census_asian = e932->CENSUS_ASIAN;
              long census_pacific = e932->CENSUS_PACIFIC;
              long census_blackafrican = e932->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e932->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e932->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e932->CENSUS_HOUSEUNITS;
              long census_families = e932->CENSUS_FAMILIES;
              long census_households = e932->CENSUS_HOUSEHOLDS;
              long census_husbwife = e932->CENSUS_HUSBWIFE;
              long census_males = e932->CENSUS_MALES;
              long census_females = e932->CENSUS_FEMALES;
              long census_householdschildren = e932->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e932->CENSUS_HISPANIC;
              long v932 = e932->__av;
              __SQL_SUM_AGGREGATE_831INVENTORY1.addOrDelOnZero(se5307.modify(__sql_sum_aggregate_831inventoryinventory_locn), (v931 * (v932 * (census_husbwife * census_hispanic))));
            } while ((n932 = n932->nxt));
          }
          e931 = e931->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_835 = 0.0;
      __SQL_SUM_AGGREGATE_840 = 0.0;
      __SQL_SUM_AGGREGATE_842INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e933 = LOCATION.head;
        while (e933) {
          long __sql_sum_aggregate_842inventoryinventory_locn = e933->LOCATION_LOCN;
          long location_zip = e933->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e933->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e933->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e933->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e933->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e933->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e933->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e933->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e933->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e933->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e933->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e933->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e933->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e933->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v933 = e933->__av;
          { //slice
            const HASH_RES_t h456 = CENSUS_mapkey0_idxfn::hash(se5312.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i934 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n934 = &(i934->buckets_[h456 % i934->size_]);
            CENSUS_entry* e934;
            do if ((e934 = n934->obj) && h456 == n934->hash && CENSUS_mapkey0_idxfn::equals(se5312, *e934)) {
              long census_population = e934->CENSUS_POPULATION;
              long census_white = e934->CENSUS_WHITE;
              long census_asian = e934->CENSUS_ASIAN;
              long census_pacific = e934->CENSUS_PACIFIC;
              long census_blackafrican = e934->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e934->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e934->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e934->CENSUS_HOUSEUNITS;
              long census_families = e934->CENSUS_FAMILIES;
              long census_households = e934->CENSUS_HOUSEHOLDS;
              long census_husbwife = e934->CENSUS_HUSBWIFE;
              long census_males = e934->CENSUS_MALES;
              long census_females = e934->CENSUS_FEMALES;
              long census_householdschildren = e934->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e934->CENSUS_HISPANIC;
              long v934 = e934->__av;
              __SQL_SUM_AGGREGATE_842INVENTORY1.addOrDelOnZero(se5311.modify(__sql_sum_aggregate_842inventoryinventory_locn), (v933 * (v934 * (census_males * census_males))));
            } while ((n934 = n934->nxt));
          }
          e933 = e933->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_843INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e935 = LOCATION.head;
        while (e935) {
          long __sql_sum_aggregate_843inventoryinventory_locn = e935->LOCATION_LOCN;
          long location_zip = e935->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e935->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e935->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e935->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e935->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e935->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e935->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e935->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e935->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e935->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e935->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e935->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e935->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e935->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v935 = e935->__av;
          { //slice
            const HASH_RES_t h457 = CENSUS_mapkey0_idxfn::hash(se5314.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i936 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n936 = &(i936->buckets_[h457 % i936->size_]);
            CENSUS_entry* e936;
            do if ((e936 = n936->obj) && h457 == n936->hash && CENSUS_mapkey0_idxfn::equals(se5314, *e936)) {
              long census_population = e936->CENSUS_POPULATION;
              long census_white = e936->CENSUS_WHITE;
              long census_asian = e936->CENSUS_ASIAN;
              long census_pacific = e936->CENSUS_PACIFIC;
              long census_blackafrican = e936->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e936->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e936->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e936->CENSUS_HOUSEUNITS;
              long census_families = e936->CENSUS_FAMILIES;
              long census_households = e936->CENSUS_HOUSEHOLDS;
              long census_husbwife = e936->CENSUS_HUSBWIFE;
              long census_males = e936->CENSUS_MALES;
              long census_females = e936->CENSUS_FEMALES;
              long census_householdschildren = e936->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e936->CENSUS_HISPANIC;
              long v936 = e936->__av;
              __SQL_SUM_AGGREGATE_843INVENTORY1.addOrDelOnZero(se5313.modify(__sql_sum_aggregate_843inventoryinventory_locn), (v935 * (v936 * (census_males * census_females))));
            } while ((n936 = n936->nxt));
          }
          e935 = e935->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_844INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e937 = LOCATION.head;
        while (e937) {
          long __sql_sum_aggregate_844inventoryinventory_locn = e937->LOCATION_LOCN;
          long location_zip = e937->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e937->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e937->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e937->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e937->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e937->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e937->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e937->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e937->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e937->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e937->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e937->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e937->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e937->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v937 = e937->__av;
          { //slice
            const HASH_RES_t h458 = CENSUS_mapkey0_idxfn::hash(se5316.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i938 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n938 = &(i938->buckets_[h458 % i938->size_]);
            CENSUS_entry* e938;
            do if ((e938 = n938->obj) && h458 == n938->hash && CENSUS_mapkey0_idxfn::equals(se5316, *e938)) {
              long census_population = e938->CENSUS_POPULATION;
              long census_white = e938->CENSUS_WHITE;
              long census_asian = e938->CENSUS_ASIAN;
              long census_pacific = e938->CENSUS_PACIFIC;
              long census_blackafrican = e938->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e938->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e938->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e938->CENSUS_HOUSEUNITS;
              long census_families = e938->CENSUS_FAMILIES;
              long census_households = e938->CENSUS_HOUSEHOLDS;
              long census_husbwife = e938->CENSUS_HUSBWIFE;
              long census_males = e938->CENSUS_MALES;
              long census_females = e938->CENSUS_FEMALES;
              long census_householdschildren = e938->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e938->CENSUS_HISPANIC;
              long v938 = e938->__av;
              __SQL_SUM_AGGREGATE_844INVENTORY1.addOrDelOnZero(se5315.modify(__sql_sum_aggregate_844inventoryinventory_locn), (v937 * (v938 * (census_males * census_householdschildren))));
            } while ((n938 = n938->nxt));
          }
          e937 = e937->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_845INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e939 = LOCATION.head;
        while (e939) {
          long __sql_sum_aggregate_845inventoryinventory_locn = e939->LOCATION_LOCN;
          long location_zip = e939->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e939->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e939->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e939->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e939->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e939->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e939->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e939->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e939->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e939->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e939->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e939->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e939->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e939->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v939 = e939->__av;
          { //slice
            const HASH_RES_t h459 = CENSUS_mapkey0_idxfn::hash(se5318.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i940 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n940 = &(i940->buckets_[h459 % i940->size_]);
            CENSUS_entry* e940;
            do if ((e940 = n940->obj) && h459 == n940->hash && CENSUS_mapkey0_idxfn::equals(se5318, *e940)) {
              long census_population = e940->CENSUS_POPULATION;
              long census_white = e940->CENSUS_WHITE;
              long census_asian = e940->CENSUS_ASIAN;
              long census_pacific = e940->CENSUS_PACIFIC;
              long census_blackafrican = e940->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e940->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e940->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e940->CENSUS_HOUSEUNITS;
              long census_families = e940->CENSUS_FAMILIES;
              long census_households = e940->CENSUS_HOUSEHOLDS;
              long census_husbwife = e940->CENSUS_HUSBWIFE;
              long census_males = e940->CENSUS_MALES;
              long census_females = e940->CENSUS_FEMALES;
              long census_householdschildren = e940->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e940->CENSUS_HISPANIC;
              long v940 = e940->__av;
              __SQL_SUM_AGGREGATE_845INVENTORY1.addOrDelOnZero(se5317.modify(__sql_sum_aggregate_845inventoryinventory_locn), (v939 * (v940 * (census_males * census_hispanic))));
            } while ((n940 = n940->nxt));
          }
          e939 = e939->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_849 = 0.0;
      __SQL_SUM_AGGREGATE_854 = 0.0;
      __SQL_SUM_AGGREGATE_856INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e941 = LOCATION.head;
        while (e941) {
          long __sql_sum_aggregate_856inventoryinventory_locn = e941->LOCATION_LOCN;
          long location_zip = e941->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e941->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e941->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e941->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e941->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e941->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e941->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e941->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e941->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e941->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e941->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e941->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e941->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e941->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v941 = e941->__av;
          { //slice
            const HASH_RES_t h460 = CENSUS_mapkey0_idxfn::hash(se5322.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i942 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n942 = &(i942->buckets_[h460 % i942->size_]);
            CENSUS_entry* e942;
            do if ((e942 = n942->obj) && h460 == n942->hash && CENSUS_mapkey0_idxfn::equals(se5322, *e942)) {
              long census_population = e942->CENSUS_POPULATION;
              long census_white = e942->CENSUS_WHITE;
              long census_asian = e942->CENSUS_ASIAN;
              long census_pacific = e942->CENSUS_PACIFIC;
              long census_blackafrican = e942->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e942->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e942->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e942->CENSUS_HOUSEUNITS;
              long census_families = e942->CENSUS_FAMILIES;
              long census_households = e942->CENSUS_HOUSEHOLDS;
              long census_husbwife = e942->CENSUS_HUSBWIFE;
              long census_males = e942->CENSUS_MALES;
              long census_females = e942->CENSUS_FEMALES;
              long census_householdschildren = e942->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e942->CENSUS_HISPANIC;
              long v942 = e942->__av;
              __SQL_SUM_AGGREGATE_856INVENTORY1.addOrDelOnZero(se5321.modify(__sql_sum_aggregate_856inventoryinventory_locn), (v941 * (v942 * (census_females * census_females))));
            } while ((n942 = n942->nxt));
          }
          e941 = e941->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_857INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e943 = LOCATION.head;
        while (e943) {
          long __sql_sum_aggregate_857inventoryinventory_locn = e943->LOCATION_LOCN;
          long location_zip = e943->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e943->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e943->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e943->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e943->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e943->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e943->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e943->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e943->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e943->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e943->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e943->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e943->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e943->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v943 = e943->__av;
          { //slice
            const HASH_RES_t h461 = CENSUS_mapkey0_idxfn::hash(se5324.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i944 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n944 = &(i944->buckets_[h461 % i944->size_]);
            CENSUS_entry* e944;
            do if ((e944 = n944->obj) && h461 == n944->hash && CENSUS_mapkey0_idxfn::equals(se5324, *e944)) {
              long census_population = e944->CENSUS_POPULATION;
              long census_white = e944->CENSUS_WHITE;
              long census_asian = e944->CENSUS_ASIAN;
              long census_pacific = e944->CENSUS_PACIFIC;
              long census_blackafrican = e944->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e944->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e944->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e944->CENSUS_HOUSEUNITS;
              long census_families = e944->CENSUS_FAMILIES;
              long census_households = e944->CENSUS_HOUSEHOLDS;
              long census_husbwife = e944->CENSUS_HUSBWIFE;
              long census_males = e944->CENSUS_MALES;
              long census_females = e944->CENSUS_FEMALES;
              long census_householdschildren = e944->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e944->CENSUS_HISPANIC;
              long v944 = e944->__av;
              __SQL_SUM_AGGREGATE_857INVENTORY1.addOrDelOnZero(se5323.modify(__sql_sum_aggregate_857inventoryinventory_locn), (v943 * (v944 * (census_females * census_householdschildren))));
            } while ((n944 = n944->nxt));
          }
          e943 = e943->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_858INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e945 = LOCATION.head;
        while (e945) {
          long __sql_sum_aggregate_858inventoryinventory_locn = e945->LOCATION_LOCN;
          long location_zip = e945->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e945->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e945->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e945->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e945->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e945->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e945->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e945->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e945->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e945->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e945->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e945->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e945->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e945->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v945 = e945->__av;
          { //slice
            const HASH_RES_t h462 = CENSUS_mapkey0_idxfn::hash(se5326.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i946 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n946 = &(i946->buckets_[h462 % i946->size_]);
            CENSUS_entry* e946;
            do if ((e946 = n946->obj) && h462 == n946->hash && CENSUS_mapkey0_idxfn::equals(se5326, *e946)) {
              long census_population = e946->CENSUS_POPULATION;
              long census_white = e946->CENSUS_WHITE;
              long census_asian = e946->CENSUS_ASIAN;
              long census_pacific = e946->CENSUS_PACIFIC;
              long census_blackafrican = e946->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e946->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e946->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e946->CENSUS_HOUSEUNITS;
              long census_families = e946->CENSUS_FAMILIES;
              long census_households = e946->CENSUS_HOUSEHOLDS;
              long census_husbwife = e946->CENSUS_HUSBWIFE;
              long census_males = e946->CENSUS_MALES;
              long census_females = e946->CENSUS_FEMALES;
              long census_householdschildren = e946->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e946->CENSUS_HISPANIC;
              long v946 = e946->__av;
              __SQL_SUM_AGGREGATE_858INVENTORY1.addOrDelOnZero(se5325.modify(__sql_sum_aggregate_858inventoryinventory_locn), (v945 * (v946 * (census_females * census_hispanic))));
            } while ((n946 = n946->nxt));
          }
          e945 = e945->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_862 = 0.0;
      __SQL_SUM_AGGREGATE_867 = 0.0;
      __SQL_SUM_AGGREGATE_869INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e947 = LOCATION.head;
        while (e947) {
          long __sql_sum_aggregate_869inventoryinventory_locn = e947->LOCATION_LOCN;
          long location_zip = e947->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e947->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e947->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e947->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e947->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e947->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e947->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e947->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e947->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e947->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e947->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e947->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e947->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e947->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v947 = e947->__av;
          { //slice
            const HASH_RES_t h463 = CENSUS_mapkey0_idxfn::hash(se5330.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i948 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n948 = &(i948->buckets_[h463 % i948->size_]);
            CENSUS_entry* e948;
            do if ((e948 = n948->obj) && h463 == n948->hash && CENSUS_mapkey0_idxfn::equals(se5330, *e948)) {
              long census_population = e948->CENSUS_POPULATION;
              long census_white = e948->CENSUS_WHITE;
              long census_asian = e948->CENSUS_ASIAN;
              long census_pacific = e948->CENSUS_PACIFIC;
              long census_blackafrican = e948->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e948->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e948->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e948->CENSUS_HOUSEUNITS;
              long census_families = e948->CENSUS_FAMILIES;
              long census_households = e948->CENSUS_HOUSEHOLDS;
              long census_husbwife = e948->CENSUS_HUSBWIFE;
              long census_males = e948->CENSUS_MALES;
              long census_females = e948->CENSUS_FEMALES;
              long census_householdschildren = e948->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e948->CENSUS_HISPANIC;
              long v948 = e948->__av;
              __SQL_SUM_AGGREGATE_869INVENTORY1.addOrDelOnZero(se5329.modify(__sql_sum_aggregate_869inventoryinventory_locn), (v947 * (v948 * (census_householdschildren * census_householdschildren))));
            } while ((n948 = n948->nxt));
          }
          e947 = e947->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_870INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e949 = LOCATION.head;
        while (e949) {
          long __sql_sum_aggregate_870inventoryinventory_locn = e949->LOCATION_LOCN;
          long location_zip = e949->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e949->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e949->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e949->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e949->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e949->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e949->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e949->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e949->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e949->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e949->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e949->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e949->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e949->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v949 = e949->__av;
          { //slice
            const HASH_RES_t h464 = CENSUS_mapkey0_idxfn::hash(se5332.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i950 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n950 = &(i950->buckets_[h464 % i950->size_]);
            CENSUS_entry* e950;
            do if ((e950 = n950->obj) && h464 == n950->hash && CENSUS_mapkey0_idxfn::equals(se5332, *e950)) {
              long census_population = e950->CENSUS_POPULATION;
              long census_white = e950->CENSUS_WHITE;
              long census_asian = e950->CENSUS_ASIAN;
              long census_pacific = e950->CENSUS_PACIFIC;
              long census_blackafrican = e950->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e950->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e950->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e950->CENSUS_HOUSEUNITS;
              long census_families = e950->CENSUS_FAMILIES;
              long census_households = e950->CENSUS_HOUSEHOLDS;
              long census_husbwife = e950->CENSUS_HUSBWIFE;
              long census_males = e950->CENSUS_MALES;
              long census_females = e950->CENSUS_FEMALES;
              long census_householdschildren = e950->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e950->CENSUS_HISPANIC;
              long v950 = e950->__av;
              __SQL_SUM_AGGREGATE_870INVENTORY1.addOrDelOnZero(se5331.modify(__sql_sum_aggregate_870inventoryinventory_locn), (v949 * (v950 * (census_householdschildren * census_hispanic))));
            } while ((n950 = n950->nxt));
          }
          e949 = e949->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_874 = 0.0;
      __SQL_SUM_AGGREGATE_879 = 0.0;
      __SQL_SUM_AGGREGATE_881INVENTORY1.clear();
      { //foreach
        LOCATION_entry* e951 = LOCATION.head;
        while (e951) {
          long __sql_sum_aggregate_881inventoryinventory_locn = e951->LOCATION_LOCN;
          long location_zip = e951->LOCATION_ZIP;
          DOUBLE_TYPE location_rgn_cd = e951->LOCATION_RGN_CD;
          DOUBLE_TYPE location_clim_zn_nbr = e951->LOCATION_CLIM_ZN_NBR;
          DOUBLE_TYPE location_tot_area_sq_ft = e951->LOCATION_TOT_AREA_SQ_FT;
          DOUBLE_TYPE location_sell_area_sq_ft = e951->LOCATION_SELL_AREA_SQ_FT;
          DOUBLE_TYPE location_avghhi = e951->LOCATION_AVGHHI;
          DOUBLE_TYPE location_supertargetdistance = e951->LOCATION_SUPERTARGETDISTANCE;
          DOUBLE_TYPE location_supertargetdrivetime = e951->LOCATION_SUPERTARGETDRIVETIME;
          DOUBLE_TYPE location_targetdistance = e951->LOCATION_TARGETDISTANCE;
          DOUBLE_TYPE location_targetdrivetime = e951->LOCATION_TARGETDRIVETIME;
          DOUBLE_TYPE location_walmartdistance = e951->LOCATION_WALMARTDISTANCE;
          DOUBLE_TYPE location_walmartdrivetime = e951->LOCATION_WALMARTDRIVETIME;
          DOUBLE_TYPE location_walmartsupercenterdistance = e951->LOCATION_WALMARTSUPERCENTERDISTANCE;
          DOUBLE_TYPE location_walmartsupercenterdrivetime = e951->LOCATION_WALMARTSUPERCENTERDRIVETIME;
          long v951 = e951->__av;
          { //slice
            const HASH_RES_t h465 = CENSUS_mapkey0_idxfn::hash(se5336.modify0(location_zip));
            const HashIndex_CENSUS_map_0* i952 = static_cast<HashIndex_CENSUS_map_0*>(CENSUS.index[1]);
            HashIndex_CENSUS_map_0::IdxNode* n952 = &(i952->buckets_[h465 % i952->size_]);
            CENSUS_entry* e952;
            do if ((e952 = n952->obj) && h465 == n952->hash && CENSUS_mapkey0_idxfn::equals(se5336, *e952)) {
              long census_population = e952->CENSUS_POPULATION;
              long census_white = e952->CENSUS_WHITE;
              long census_asian = e952->CENSUS_ASIAN;
              long census_pacific = e952->CENSUS_PACIFIC;
              long census_blackafrican = e952->CENSUS_BLACKAFRICAN;
              DOUBLE_TYPE census_medianage = e952->CENSUS_MEDIANAGE;
              long census_occupiedhouseunits = e952->CENSUS_OCCUPIEDHOUSEUNITS;
              long census_houseunits = e952->CENSUS_HOUSEUNITS;
              long census_families = e952->CENSUS_FAMILIES;
              long census_households = e952->CENSUS_HOUSEHOLDS;
              long census_husbwife = e952->CENSUS_HUSBWIFE;
              long census_males = e952->CENSUS_MALES;
              long census_females = e952->CENSUS_FEMALES;
              long census_householdschildren = e952->CENSUS_HOUSEHOLDSCHILDREN;
              long census_hispanic = e952->CENSUS_HISPANIC;
              long v952 = e952->__av;
              __SQL_SUM_AGGREGATE_881INVENTORY1.addOrDelOnZero(se5335.modify(__sql_sum_aggregate_881inventoryinventory_locn), (v951 * (v952 * (census_hispanic * census_hispanic))));
            } while ((n952 = n952->nxt));
          }
          e951 = e951->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_885 = 0.0;
      __SQL_SUM_AGGREGATE_890 = 0.0;
      __SQL_SUM_AGGREGATE_892INVENTORY2.clear();
      { //foreach
        ITEM_entry* e953 = ITEM.head;
        while (e953) {
          DOUBLE_TYPE __sql_sum_aggregate_892inventoryinventory_ksn = e953->ITEM_KSN;
          long item_subcategory = e953->ITEM_SUBCATEGORY;
          long item_category = e953->ITEM_CATEGORY;
          long item_categorycluster = e953->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e953->ITEM_PRIZE;
          long v953 = e953->__av;
          __SQL_SUM_AGGREGATE_892INVENTORY2.addOrDelOnZero(se5339.modify(__sql_sum_aggregate_892inventoryinventory_ksn), (v953 * (item_subcategory * item_subcategory)));
          e953 = e953->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_893INVENTORY2.clear();
      { //foreach
        ITEM_entry* e954 = ITEM.head;
        while (e954) {
          DOUBLE_TYPE __sql_sum_aggregate_893inventoryinventory_ksn = e954->ITEM_KSN;
          long item_subcategory = e954->ITEM_SUBCATEGORY;
          long item_category = e954->ITEM_CATEGORY;
          long item_categorycluster = e954->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e954->ITEM_PRIZE;
          long v954 = e954->__av;
          __SQL_SUM_AGGREGATE_893INVENTORY2.addOrDelOnZero(se5340.modify(__sql_sum_aggregate_893inventoryinventory_ksn), (v954 * (item_subcategory * item_category)));
          e954 = e954->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_894INVENTORY2.clear();
      { //foreach
        ITEM_entry* e955 = ITEM.head;
        while (e955) {
          DOUBLE_TYPE __sql_sum_aggregate_894inventoryinventory_ksn = e955->ITEM_KSN;
          long item_subcategory = e955->ITEM_SUBCATEGORY;
          long item_category = e955->ITEM_CATEGORY;
          long item_categorycluster = e955->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e955->ITEM_PRIZE;
          long v955 = e955->__av;
          __SQL_SUM_AGGREGATE_894INVENTORY2.addOrDelOnZero(se5341.modify(__sql_sum_aggregate_894inventoryinventory_ksn), (v955 * (item_subcategory * item_categorycluster)));
          e955 = e955->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_895 = 0.0;
      __SQL_SUM_AGGREGATE_895INVENTORY2.clear();
      { //foreach
        ITEM_entry* e956 = ITEM.head;
        while (e956) {
          DOUBLE_TYPE __sql_sum_aggregate_895inventoryinventory_ksn = e956->ITEM_KSN;
          long item_subcategory = e956->ITEM_SUBCATEGORY;
          long item_category = e956->ITEM_CATEGORY;
          long item_categorycluster = e956->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e956->ITEM_PRIZE;
          long v956 = e956->__av;
          __SQL_SUM_AGGREGATE_895INVENTORY2.addOrDelOnZero(se5343.modify(__sql_sum_aggregate_895inventoryinventory_ksn), (v956 * (item_subcategory * item_prize)));
          e956 = e956->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_900 = 0.0;
      __SQL_SUM_AGGREGATE_902INVENTORY2.clear();
      { //foreach
        ITEM_entry* e957 = ITEM.head;
        while (e957) {
          DOUBLE_TYPE __sql_sum_aggregate_902inventoryinventory_ksn = e957->ITEM_KSN;
          long item_subcategory = e957->ITEM_SUBCATEGORY;
          long item_category = e957->ITEM_CATEGORY;
          long item_categorycluster = e957->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e957->ITEM_PRIZE;
          long v957 = e957->__av;
          __SQL_SUM_AGGREGATE_902INVENTORY2.addOrDelOnZero(se5345.modify(__sql_sum_aggregate_902inventoryinventory_ksn), (v957 * (item_category * item_category)));
          e957 = e957->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_903INVENTORY2.clear();
      { //foreach
        ITEM_entry* e958 = ITEM.head;
        while (e958) {
          DOUBLE_TYPE __sql_sum_aggregate_903inventoryinventory_ksn = e958->ITEM_KSN;
          long item_subcategory = e958->ITEM_SUBCATEGORY;
          long item_category = e958->ITEM_CATEGORY;
          long item_categorycluster = e958->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e958->ITEM_PRIZE;
          long v958 = e958->__av;
          __SQL_SUM_AGGREGATE_903INVENTORY2.addOrDelOnZero(se5346.modify(__sql_sum_aggregate_903inventoryinventory_ksn), (v958 * (item_category * item_categorycluster)));
          e958 = e958->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_904 = 0.0;
      __SQL_SUM_AGGREGATE_904INVENTORY2.clear();
      { //foreach
        ITEM_entry* e959 = ITEM.head;
        while (e959) {
          DOUBLE_TYPE __sql_sum_aggregate_904inventoryinventory_ksn = e959->ITEM_KSN;
          long item_subcategory = e959->ITEM_SUBCATEGORY;
          long item_category = e959->ITEM_CATEGORY;
          long item_categorycluster = e959->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e959->ITEM_PRIZE;
          long v959 = e959->__av;
          __SQL_SUM_AGGREGATE_904INVENTORY2.addOrDelOnZero(se5348.modify(__sql_sum_aggregate_904inventoryinventory_ksn), (v959 * (item_category * item_prize)));
          e959 = e959->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_909 = 0.0;
      __SQL_SUM_AGGREGATE_911INVENTORY2.clear();
      { //foreach
        ITEM_entry* e960 = ITEM.head;
        while (e960) {
          DOUBLE_TYPE __sql_sum_aggregate_911inventoryinventory_ksn = e960->ITEM_KSN;
          long item_subcategory = e960->ITEM_SUBCATEGORY;
          long item_category = e960->ITEM_CATEGORY;
          long item_categorycluster = e960->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e960->ITEM_PRIZE;
          long v960 = e960->__av;
          __SQL_SUM_AGGREGATE_911INVENTORY2.addOrDelOnZero(se5350.modify(__sql_sum_aggregate_911inventoryinventory_ksn), (v960 * (item_categorycluster * item_categorycluster)));
          e960 = e960->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_912 = 0.0;
      __SQL_SUM_AGGREGATE_912INVENTORY2.clear();
      { //foreach
        ITEM_entry* e961 = ITEM.head;
        while (e961) {
          DOUBLE_TYPE __sql_sum_aggregate_912inventoryinventory_ksn = e961->ITEM_KSN;
          long item_subcategory = e961->ITEM_SUBCATEGORY;
          long item_category = e961->ITEM_CATEGORY;
          long item_categorycluster = e961->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e961->ITEM_PRIZE;
          long v961 = e961->__av;
          __SQL_SUM_AGGREGATE_912INVENTORY2.addOrDelOnZero(se5352.modify(__sql_sum_aggregate_912inventoryinventory_ksn), (v961 * (item_categorycluster * item_prize)));
          e961 = e961->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_917 = 0.0;
      __SQL_SUM_AGGREGATE_919 = 0.0;
      __SQL_SUM_AGGREGATE_919INVENTORY2.clear();
      { //foreach
        ITEM_entry* e962 = ITEM.head;
        while (e962) {
          DOUBLE_TYPE __sql_sum_aggregate_919inventoryinventory_ksn = e962->ITEM_KSN;
          long item_subcategory = e962->ITEM_SUBCATEGORY;
          long item_category = e962->ITEM_CATEGORY;
          long item_categorycluster = e962->ITEM_CATEGORYCLUSTER;
          DOUBLE_TYPE item_prize = e962->ITEM_PRIZE;
          long v962 = e962->__av;
          __SQL_SUM_AGGREGATE_919INVENTORY2.addOrDelOnZero(se5355.modify(__sql_sum_aggregate_919inventoryinventory_ksn), (v962 * (item_prize * item_prize)));
          e962 = e962->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_920 = 0.0;
      __SQL_SUM_AGGREGATE_921 = 0.0;
      __SQL_SUM_AGGREGATE_922 = 0.0;
      __SQL_SUM_AGGREGATE_923 = 0.0;
      __SQL_SUM_AGGREGATE_924 = 0.0;
      __SQL_SUM_AGGREGATE_925 = 0.0;
      __SQL_SUM_AGGREGATE_926INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e963 = WEATHER.head;
        while (e963) {
          long __sql_sum_aggregate_926inventoryinventory_locn = e963->WEATHER_LOCN;
          long __sql_sum_aggregate_926inventoryinventory_dateid = e963->WEATHER_DATEID;
          long weather_rain = e963->WEATHER_RAIN;
          long weather_snow = e963->WEATHER_SNOW;
          long weather_maxtemp = e963->WEATHER_MAXTEMP;
          long weather_mintemp = e963->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e963->WEATHER_MEANWIND;
          long weather_thunder = e963->WEATHER_THUNDER;
          long v963 = e963->__av;
          __SQL_SUM_AGGREGATE_926INVENTORY3.addOrDelOnZero(se5362.modify(__sql_sum_aggregate_926inventoryinventory_locn, __sql_sum_aggregate_926inventoryinventory_dateid), (v963 * (weather_rain * weather_rain)));
          e963 = e963->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_927INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e964 = WEATHER.head;
        while (e964) {
          long __sql_sum_aggregate_927inventoryinventory_locn = e964->WEATHER_LOCN;
          long __sql_sum_aggregate_927inventoryinventory_dateid = e964->WEATHER_DATEID;
          long weather_rain = e964->WEATHER_RAIN;
          long weather_snow = e964->WEATHER_SNOW;
          long weather_maxtemp = e964->WEATHER_MAXTEMP;
          long weather_mintemp = e964->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e964->WEATHER_MEANWIND;
          long weather_thunder = e964->WEATHER_THUNDER;
          long v964 = e964->__av;
          __SQL_SUM_AGGREGATE_927INVENTORY3.addOrDelOnZero(se5363.modify(__sql_sum_aggregate_927inventoryinventory_locn, __sql_sum_aggregate_927inventoryinventory_dateid), (v964 * (weather_rain * weather_snow)));
          e964 = e964->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_928INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e965 = WEATHER.head;
        while (e965) {
          long __sql_sum_aggregate_928inventoryinventory_locn = e965->WEATHER_LOCN;
          long __sql_sum_aggregate_928inventoryinventory_dateid = e965->WEATHER_DATEID;
          long weather_rain = e965->WEATHER_RAIN;
          long weather_snow = e965->WEATHER_SNOW;
          long weather_maxtemp = e965->WEATHER_MAXTEMP;
          long weather_mintemp = e965->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e965->WEATHER_MEANWIND;
          long weather_thunder = e965->WEATHER_THUNDER;
          long v965 = e965->__av;
          __SQL_SUM_AGGREGATE_928INVENTORY3.addOrDelOnZero(se5364.modify(__sql_sum_aggregate_928inventoryinventory_locn, __sql_sum_aggregate_928inventoryinventory_dateid), (v965 * (weather_rain * weather_maxtemp)));
          e965 = e965->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_929INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e966 = WEATHER.head;
        while (e966) {
          long __sql_sum_aggregate_929inventoryinventory_locn = e966->WEATHER_LOCN;
          long __sql_sum_aggregate_929inventoryinventory_dateid = e966->WEATHER_DATEID;
          long weather_rain = e966->WEATHER_RAIN;
          long weather_snow = e966->WEATHER_SNOW;
          long weather_maxtemp = e966->WEATHER_MAXTEMP;
          long weather_mintemp = e966->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e966->WEATHER_MEANWIND;
          long weather_thunder = e966->WEATHER_THUNDER;
          long v966 = e966->__av;
          __SQL_SUM_AGGREGATE_929INVENTORY3.addOrDelOnZero(se5365.modify(__sql_sum_aggregate_929inventoryinventory_locn, __sql_sum_aggregate_929inventoryinventory_dateid), (v966 * (weather_rain * weather_mintemp)));
          e966 = e966->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_930 = 0.0;
      __SQL_SUM_AGGREGATE_930INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e967 = WEATHER.head;
        while (e967) {
          long __sql_sum_aggregate_930inventoryinventory_locn = e967->WEATHER_LOCN;
          long __sql_sum_aggregate_930inventoryinventory_dateid = e967->WEATHER_DATEID;
          long weather_rain = e967->WEATHER_RAIN;
          long weather_snow = e967->WEATHER_SNOW;
          long weather_maxtemp = e967->WEATHER_MAXTEMP;
          long weather_mintemp = e967->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e967->WEATHER_MEANWIND;
          long weather_thunder = e967->WEATHER_THUNDER;
          long v967 = e967->__av;
          __SQL_SUM_AGGREGATE_930INVENTORY3.addOrDelOnZero(se5367.modify(__sql_sum_aggregate_930inventoryinventory_locn, __sql_sum_aggregate_930inventoryinventory_dateid), (v967 * (weather_rain * weather_meanwind)));
          e967 = e967->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_931INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e968 = WEATHER.head;
        while (e968) {
          long __sql_sum_aggregate_931inventoryinventory_locn = e968->WEATHER_LOCN;
          long __sql_sum_aggregate_931inventoryinventory_dateid = e968->WEATHER_DATEID;
          long weather_rain = e968->WEATHER_RAIN;
          long weather_snow = e968->WEATHER_SNOW;
          long weather_maxtemp = e968->WEATHER_MAXTEMP;
          long weather_mintemp = e968->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e968->WEATHER_MEANWIND;
          long weather_thunder = e968->WEATHER_THUNDER;
          long v968 = e968->__av;
          __SQL_SUM_AGGREGATE_931INVENTORY3.addOrDelOnZero(se5368.modify(__sql_sum_aggregate_931inventoryinventory_locn, __sql_sum_aggregate_931inventoryinventory_dateid), (v968 * (weather_rain * weather_thunder)));
          e968 = e968->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_932INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e969 = WEATHER.head;
        while (e969) {
          long __sql_sum_aggregate_932inventoryinventory_locn = e969->WEATHER_LOCN;
          long __sql_sum_aggregate_932inventoryinventory_dateid = e969->WEATHER_DATEID;
          long weather_rain = e969->WEATHER_RAIN;
          long weather_snow = e969->WEATHER_SNOW;
          long weather_maxtemp = e969->WEATHER_MAXTEMP;
          long weather_mintemp = e969->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e969->WEATHER_MEANWIND;
          long weather_thunder = e969->WEATHER_THUNDER;
          long v969 = e969->__av;
          __SQL_SUM_AGGREGATE_932INVENTORY3.addOrDelOnZero(se5369.modify(__sql_sum_aggregate_932inventoryinventory_locn, __sql_sum_aggregate_932inventoryinventory_dateid), (v969 * (weather_snow * weather_snow)));
          e969 = e969->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_933INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e970 = WEATHER.head;
        while (e970) {
          long __sql_sum_aggregate_933inventoryinventory_locn = e970->WEATHER_LOCN;
          long __sql_sum_aggregate_933inventoryinventory_dateid = e970->WEATHER_DATEID;
          long weather_rain = e970->WEATHER_RAIN;
          long weather_snow = e970->WEATHER_SNOW;
          long weather_maxtemp = e970->WEATHER_MAXTEMP;
          long weather_mintemp = e970->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e970->WEATHER_MEANWIND;
          long weather_thunder = e970->WEATHER_THUNDER;
          long v970 = e970->__av;
          __SQL_SUM_AGGREGATE_933INVENTORY3.addOrDelOnZero(se5370.modify(__sql_sum_aggregate_933inventoryinventory_locn, __sql_sum_aggregate_933inventoryinventory_dateid), (v970 * (weather_snow * weather_maxtemp)));
          e970 = e970->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_934INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e971 = WEATHER.head;
        while (e971) {
          long __sql_sum_aggregate_934inventoryinventory_locn = e971->WEATHER_LOCN;
          long __sql_sum_aggregate_934inventoryinventory_dateid = e971->WEATHER_DATEID;
          long weather_rain = e971->WEATHER_RAIN;
          long weather_snow = e971->WEATHER_SNOW;
          long weather_maxtemp = e971->WEATHER_MAXTEMP;
          long weather_mintemp = e971->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e971->WEATHER_MEANWIND;
          long weather_thunder = e971->WEATHER_THUNDER;
          long v971 = e971->__av;
          __SQL_SUM_AGGREGATE_934INVENTORY3.addOrDelOnZero(se5371.modify(__sql_sum_aggregate_934inventoryinventory_locn, __sql_sum_aggregate_934inventoryinventory_dateid), (v971 * (weather_snow * weather_mintemp)));
          e971 = e971->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_935 = 0.0;
      __SQL_SUM_AGGREGATE_935INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e972 = WEATHER.head;
        while (e972) {
          long __sql_sum_aggregate_935inventoryinventory_locn = e972->WEATHER_LOCN;
          long __sql_sum_aggregate_935inventoryinventory_dateid = e972->WEATHER_DATEID;
          long weather_rain = e972->WEATHER_RAIN;
          long weather_snow = e972->WEATHER_SNOW;
          long weather_maxtemp = e972->WEATHER_MAXTEMP;
          long weather_mintemp = e972->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e972->WEATHER_MEANWIND;
          long weather_thunder = e972->WEATHER_THUNDER;
          long v972 = e972->__av;
          __SQL_SUM_AGGREGATE_935INVENTORY3.addOrDelOnZero(se5373.modify(__sql_sum_aggregate_935inventoryinventory_locn, __sql_sum_aggregate_935inventoryinventory_dateid), (v972 * (weather_snow * weather_meanwind)));
          e972 = e972->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_936INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e973 = WEATHER.head;
        while (e973) {
          long __sql_sum_aggregate_936inventoryinventory_locn = e973->WEATHER_LOCN;
          long __sql_sum_aggregate_936inventoryinventory_dateid = e973->WEATHER_DATEID;
          long weather_rain = e973->WEATHER_RAIN;
          long weather_snow = e973->WEATHER_SNOW;
          long weather_maxtemp = e973->WEATHER_MAXTEMP;
          long weather_mintemp = e973->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e973->WEATHER_MEANWIND;
          long weather_thunder = e973->WEATHER_THUNDER;
          long v973 = e973->__av;
          __SQL_SUM_AGGREGATE_936INVENTORY3.addOrDelOnZero(se5374.modify(__sql_sum_aggregate_936inventoryinventory_locn, __sql_sum_aggregate_936inventoryinventory_dateid), (v973 * (weather_snow * weather_thunder)));
          e973 = e973->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_937INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e974 = WEATHER.head;
        while (e974) {
          long __sql_sum_aggregate_937inventoryinventory_locn = e974->WEATHER_LOCN;
          long __sql_sum_aggregate_937inventoryinventory_dateid = e974->WEATHER_DATEID;
          long weather_rain = e974->WEATHER_RAIN;
          long weather_snow = e974->WEATHER_SNOW;
          long weather_maxtemp = e974->WEATHER_MAXTEMP;
          long weather_mintemp = e974->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e974->WEATHER_MEANWIND;
          long weather_thunder = e974->WEATHER_THUNDER;
          long v974 = e974->__av;
          __SQL_SUM_AGGREGATE_937INVENTORY3.addOrDelOnZero(se5375.modify(__sql_sum_aggregate_937inventoryinventory_locn, __sql_sum_aggregate_937inventoryinventory_dateid), (v974 * (weather_maxtemp * weather_maxtemp)));
          e974 = e974->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_938INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e975 = WEATHER.head;
        while (e975) {
          long __sql_sum_aggregate_938inventoryinventory_locn = e975->WEATHER_LOCN;
          long __sql_sum_aggregate_938inventoryinventory_dateid = e975->WEATHER_DATEID;
          long weather_rain = e975->WEATHER_RAIN;
          long weather_snow = e975->WEATHER_SNOW;
          long weather_maxtemp = e975->WEATHER_MAXTEMP;
          long weather_mintemp = e975->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e975->WEATHER_MEANWIND;
          long weather_thunder = e975->WEATHER_THUNDER;
          long v975 = e975->__av;
          __SQL_SUM_AGGREGATE_938INVENTORY3.addOrDelOnZero(se5376.modify(__sql_sum_aggregate_938inventoryinventory_locn, __sql_sum_aggregate_938inventoryinventory_dateid), (v975 * (weather_maxtemp * weather_mintemp)));
          e975 = e975->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_939 = 0.0;
      __SQL_SUM_AGGREGATE_939INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e976 = WEATHER.head;
        while (e976) {
          long __sql_sum_aggregate_939inventoryinventory_locn = e976->WEATHER_LOCN;
          long __sql_sum_aggregate_939inventoryinventory_dateid = e976->WEATHER_DATEID;
          long weather_rain = e976->WEATHER_RAIN;
          long weather_snow = e976->WEATHER_SNOW;
          long weather_maxtemp = e976->WEATHER_MAXTEMP;
          long weather_mintemp = e976->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e976->WEATHER_MEANWIND;
          long weather_thunder = e976->WEATHER_THUNDER;
          long v976 = e976->__av;
          __SQL_SUM_AGGREGATE_939INVENTORY3.addOrDelOnZero(se5378.modify(__sql_sum_aggregate_939inventoryinventory_locn, __sql_sum_aggregate_939inventoryinventory_dateid), (v976 * (weather_maxtemp * weather_meanwind)));
          e976 = e976->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_940INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e977 = WEATHER.head;
        while (e977) {
          long __sql_sum_aggregate_940inventoryinventory_locn = e977->WEATHER_LOCN;
          long __sql_sum_aggregate_940inventoryinventory_dateid = e977->WEATHER_DATEID;
          long weather_rain = e977->WEATHER_RAIN;
          long weather_snow = e977->WEATHER_SNOW;
          long weather_maxtemp = e977->WEATHER_MAXTEMP;
          long weather_mintemp = e977->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e977->WEATHER_MEANWIND;
          long weather_thunder = e977->WEATHER_THUNDER;
          long v977 = e977->__av;
          __SQL_SUM_AGGREGATE_940INVENTORY3.addOrDelOnZero(se5379.modify(__sql_sum_aggregate_940inventoryinventory_locn, __sql_sum_aggregate_940inventoryinventory_dateid), (v977 * (weather_maxtemp * weather_thunder)));
          e977 = e977->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_941INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e978 = WEATHER.head;
        while (e978) {
          long __sql_sum_aggregate_941inventoryinventory_locn = e978->WEATHER_LOCN;
          long __sql_sum_aggregate_941inventoryinventory_dateid = e978->WEATHER_DATEID;
          long weather_rain = e978->WEATHER_RAIN;
          long weather_snow = e978->WEATHER_SNOW;
          long weather_maxtemp = e978->WEATHER_MAXTEMP;
          long weather_mintemp = e978->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e978->WEATHER_MEANWIND;
          long weather_thunder = e978->WEATHER_THUNDER;
          long v978 = e978->__av;
          __SQL_SUM_AGGREGATE_941INVENTORY3.addOrDelOnZero(se5380.modify(__sql_sum_aggregate_941inventoryinventory_locn, __sql_sum_aggregate_941inventoryinventory_dateid), (v978 * (weather_mintemp * weather_mintemp)));
          e978 = e978->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_942 = 0.0;
      __SQL_SUM_AGGREGATE_942INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e979 = WEATHER.head;
        while (e979) {
          long __sql_sum_aggregate_942inventoryinventory_locn = e979->WEATHER_LOCN;
          long __sql_sum_aggregate_942inventoryinventory_dateid = e979->WEATHER_DATEID;
          long weather_rain = e979->WEATHER_RAIN;
          long weather_snow = e979->WEATHER_SNOW;
          long weather_maxtemp = e979->WEATHER_MAXTEMP;
          long weather_mintemp = e979->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e979->WEATHER_MEANWIND;
          long weather_thunder = e979->WEATHER_THUNDER;
          long v979 = e979->__av;
          __SQL_SUM_AGGREGATE_942INVENTORY3.addOrDelOnZero(se5382.modify(__sql_sum_aggregate_942inventoryinventory_locn, __sql_sum_aggregate_942inventoryinventory_dateid), (v979 * (weather_mintemp * weather_meanwind)));
          e979 = e979->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_943INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e980 = WEATHER.head;
        while (e980) {
          long __sql_sum_aggregate_943inventoryinventory_locn = e980->WEATHER_LOCN;
          long __sql_sum_aggregate_943inventoryinventory_dateid = e980->WEATHER_DATEID;
          long weather_rain = e980->WEATHER_RAIN;
          long weather_snow = e980->WEATHER_SNOW;
          long weather_maxtemp = e980->WEATHER_MAXTEMP;
          long weather_mintemp = e980->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e980->WEATHER_MEANWIND;
          long weather_thunder = e980->WEATHER_THUNDER;
          long v980 = e980->__av;
          __SQL_SUM_AGGREGATE_943INVENTORY3.addOrDelOnZero(se5383.modify(__sql_sum_aggregate_943inventoryinventory_locn, __sql_sum_aggregate_943inventoryinventory_dateid), (v980 * (weather_mintemp * weather_thunder)));
          e980 = e980->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_944 = 0.0;
      __SQL_SUM_AGGREGATE_944INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e981 = WEATHER.head;
        while (e981) {
          long __sql_sum_aggregate_944inventoryinventory_locn = e981->WEATHER_LOCN;
          long __sql_sum_aggregate_944inventoryinventory_dateid = e981->WEATHER_DATEID;
          long weather_rain = e981->WEATHER_RAIN;
          long weather_snow = e981->WEATHER_SNOW;
          long weather_maxtemp = e981->WEATHER_MAXTEMP;
          long weather_mintemp = e981->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e981->WEATHER_MEANWIND;
          long weather_thunder = e981->WEATHER_THUNDER;
          long v981 = e981->__av;
          __SQL_SUM_AGGREGATE_944INVENTORY3.addOrDelOnZero(se5385.modify(__sql_sum_aggregate_944inventoryinventory_locn, __sql_sum_aggregate_944inventoryinventory_dateid), (v981 * (weather_meanwind * weather_meanwind)));
          e981 = e981->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_945 = 0.0;
      __SQL_SUM_AGGREGATE_945INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e982 = WEATHER.head;
        while (e982) {
          long __sql_sum_aggregate_945inventoryinventory_locn = e982->WEATHER_LOCN;
          long __sql_sum_aggregate_945inventoryinventory_dateid = e982->WEATHER_DATEID;
          long weather_rain = e982->WEATHER_RAIN;
          long weather_snow = e982->WEATHER_SNOW;
          long weather_maxtemp = e982->WEATHER_MAXTEMP;
          long weather_mintemp = e982->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e982->WEATHER_MEANWIND;
          long weather_thunder = e982->WEATHER_THUNDER;
          long v982 = e982->__av;
          __SQL_SUM_AGGREGATE_945INVENTORY3.addOrDelOnZero(se5387.modify(__sql_sum_aggregate_945inventoryinventory_locn, __sql_sum_aggregate_945inventoryinventory_dateid), (v982 * (weather_meanwind * weather_thunder)));
          e982 = e982->nxt;
        }
      }
      __SQL_SUM_AGGREGATE_946INVENTORY3.clear();
      { //foreach
        WEATHER_entry* e983 = WEATHER.head;
        while (e983) {
          long __sql_sum_aggregate_946inventoryinventory_locn = e983->WEATHER_LOCN;
          long __sql_sum_aggregate_946inventoryinventory_dateid = e983->WEATHER_DATEID;
          long weather_rain = e983->WEATHER_RAIN;
          long weather_snow = e983->WEATHER_SNOW;
          long weather_maxtemp = e983->WEATHER_MAXTEMP;
          long weather_mintemp = e983->WEATHER_MINTEMP;
          DOUBLE_TYPE weather_meanwind = e983->WEATHER_MEANWIND;
          long weather_thunder = e983->WEATHER_THUNDER;
          long v983 = e983->__av;
          __SQL_SUM_AGGREGATE_946INVENTORY3.addOrDelOnZero(se5388.modify(__sql_sum_aggregate_946inventoryinventory_locn, __sql_sum_aggregate_946inventoryinventory_dateid), (v983 * (weather_thunder * weather_thunder)));
          e983 = e983->nxt;
        }
      }
    }
  
  private:
  
    /* Sample entries for avoiding recreation of temporary objects */
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se2;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se4;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se6;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se7;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se8;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se10;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se11;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se12;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se14;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se15;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se16;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se18;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se19;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se20;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se22;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se23;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se24;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se26;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se27;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se28;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se30;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se31;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se32;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se34;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se35;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se36;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se38;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se39;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se40;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se42;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se43;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se44;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se46;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se47;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se48;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se50;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se51;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se52;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se54;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se55;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se56;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se58;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se59;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se60;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se62;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se63;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se64;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se66;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se67;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se68;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se70;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se71;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se72;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se74;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se75;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se76;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se78;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se79;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se80;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se82;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se83;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se84;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se86;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se87;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se88;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se90;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se91;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se92;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se94;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se95;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se96;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se98;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se99;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se100;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se102;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se103;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se104;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se106;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se107;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se108;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se110;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se111;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se112;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se114;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se115;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se116;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se118;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se119;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se120;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se122;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se123;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se124;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se126;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se127;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se128;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se130;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se131;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se132;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se134;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se135;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se136;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se138;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se139;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se140;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se142;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se143;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se144;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se146;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se147;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se148;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se150;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se151;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se152;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se154;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se155;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se156;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se158;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se159;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se160;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se162;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se163;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se164;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se166;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se167;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se168;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se170;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se171;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se172;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se174;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se175;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se176;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se178;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se179;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se180;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se182;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se183;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se184;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se186;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se187;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se188;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se190;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se191;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se192;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se194;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se195;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se196;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se198;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se199;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se200;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se202;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se203;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se204;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se206;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se207;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se208;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se210;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se211;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se212;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se214;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se215;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se216;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se218;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se219;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se220;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se222;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se223;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se224;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se226;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se227;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se228;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se230;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se231;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se232;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se234;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se235;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se236;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se238;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se239;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se240;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se242;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se243;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se244;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se246;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se247;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se248;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se250;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se251;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se252;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se254;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se255;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se256;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se258;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se259;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se260;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se262;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se263;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se264;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se266;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se267;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se268;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se270;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se271;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se272;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se274;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se275;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se276;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se278;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se279;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se280;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se282;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se283;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se284;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se286;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se287;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se288;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se290;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se291;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se292;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se294;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se295;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se296;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se298;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se299;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se300;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se302;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se303;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se304;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se306;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se307;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se308;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se310;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se311;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se312;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se314;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se315;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se316;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se318;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se319;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se320;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se322;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se323;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se324;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se326;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se327;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se328;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se330;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se331;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se332;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se334;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se335;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se336;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se338;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se339;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se340;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se342;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se343;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se344;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se346;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se347;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se348;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se350;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se351;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se352;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se354;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se355;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se356;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se358;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se359;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se360;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se362;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se363;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se364;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se366;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se367;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se368;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se370;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se371;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se372;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se374;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se375;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se376;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se378;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se379;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se380;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se382;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se383;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se384;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se386;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se387;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se388;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se390;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se391;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se392;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se394;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se395;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se396;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se398;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se399;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se400;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se402;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se403;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se404;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se406;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se407;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se408;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se410;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se411;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se412;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se414;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se415;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se416;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se418;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se419;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se420;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se422;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se423;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se424;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se426;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se427;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se428;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se430;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se431;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se432;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se434;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se435;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se436;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se438;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se439;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se440;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se442;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se443;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se444;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se446;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se447;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se448;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se450;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se451;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se452;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se454;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se455;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se456;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se458;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se459;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se460;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se462;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se463;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se464;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se466;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se467;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se468;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se470;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se471;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se472;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se474;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se475;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se476;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se478;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se479;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se480;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se482;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se483;
    __SQL_SUM_AGGREGATE_121INVENTORY3_entry se484;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se486;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se487;
    __SQL_SUM_AGGREGATE_122INVENTORY3_entry se488;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se490;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se491;
    __SQL_SUM_AGGREGATE_123INVENTORY3_entry se492;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se494;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se495;
    __SQL_SUM_AGGREGATE_124INVENTORY3_entry se496;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se498;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se499;
    __SQL_SUM_AGGREGATE_125INVENTORY3_entry se500;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se502;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se503;
    __SQL_SUM_AGGREGATE_126INVENTORY3_entry se504;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se506;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se507;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se508;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se510;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se511;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se512;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se514;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se515;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se516;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se518;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se519;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se520;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se522;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se523;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se524;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se526;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se527;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se528;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se530;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se531;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se532;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se534;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se535;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se536;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se538;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se539;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se540;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se542;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se543;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se544;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se546;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se547;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se548;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se550;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se551;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se552;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se554;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se555;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se556;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se558;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se559;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se560;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se562;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se563;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se564;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se566;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se567;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se568;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se570;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se571;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se572;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se574;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se575;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se576;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se578;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se579;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se580;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se582;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se583;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se584;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se586;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se587;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se588;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se590;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se591;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se592;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se594;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se595;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se596;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se598;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se599;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se600;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se602;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se603;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se604;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se606;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se607;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se608;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se610;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se611;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se612;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se614;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se615;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se616;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se618;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se619;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se620;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se622;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se623;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se624;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se626;
    __SQL_SUM_AGGREGATE_157INVENTORY2_entry se627;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se628;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se630;
    __SQL_SUM_AGGREGATE_158INVENTORY2_entry se631;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se632;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se634;
    __SQL_SUM_AGGREGATE_159INVENTORY2_entry se635;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se636;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se638;
    __SQL_SUM_AGGREGATE_160INVENTORY2_entry se639;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se640;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se642;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se643;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se644;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se646;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se647;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se648;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se650;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se651;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se652;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se654;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se655;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se656;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se658;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se659;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se660;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se662;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se663;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se664;
    __SQL_SUM_AGGREGATE_167INVENTORY1_entry se666;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se667;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se668;
    __SQL_SUM_AGGREGATE_168INVENTORY1_entry se670;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se671;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se672;
    __SQL_SUM_AGGREGATE_169INVENTORY1_entry se674;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se675;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se676;
    __SQL_SUM_AGGREGATE_170INVENTORY1_entry se678;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se679;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se680;
    __SQL_SUM_AGGREGATE_171INVENTORY1_entry se682;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se683;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se684;
    __SQL_SUM_AGGREGATE_172INVENTORY1_entry se686;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se687;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se688;
    __SQL_SUM_AGGREGATE_173INVENTORY1_entry se690;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se691;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se692;
    __SQL_SUM_AGGREGATE_174INVENTORY1_entry se694;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se695;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se696;
    __SQL_SUM_AGGREGATE_175INVENTORY1_entry se698;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se699;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se700;
    __SQL_SUM_AGGREGATE_176INVENTORY1_entry se702;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se703;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se704;
    __SQL_SUM_AGGREGATE_177INVENTORY1_entry se706;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se707;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se708;
    __SQL_SUM_AGGREGATE_178INVENTORY1_entry se710;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se711;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se712;
    __SQL_SUM_AGGREGATE_179INVENTORY1_entry se714;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se715;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se716;
    __SQL_SUM_AGGREGATE_180INVENTORY1_entry se718;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se719;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se720;
    __SQL_SUM_AGGREGATE_181INVENTORY1_entry se722;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se723;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se724;
    __SQL_SUM_AGGREGATE_182INVENTORY1_entry se726;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se727;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se728;
    __SQL_SUM_AGGREGATE_183INVENTORY1_entry se730;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se731;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se732;
    __SQL_SUM_AGGREGATE_184INVENTORY1_entry se734;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se735;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se736;
    __SQL_SUM_AGGREGATE_185INVENTORY1_entry se738;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se739;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se740;
    __SQL_SUM_AGGREGATE_186INVENTORY1_entry se742;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se743;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se744;
    __SQL_SUM_AGGREGATE_187INVENTORY1_entry se746;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se747;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se748;
    __SQL_SUM_AGGREGATE_188INVENTORY1_entry se750;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se751;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se752;
    __SQL_SUM_AGGREGATE_189INVENTORY1_entry se754;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se755;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se756;
    __SQL_SUM_AGGREGATE_190INVENTORY1_entry se758;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se759;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se760;
    __SQL_SUM_AGGREGATE_191INVENTORY1_entry se762;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se763;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se764;
    __SQL_SUM_AGGREGATE_192INVENTORY1_entry se766;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se767;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se768;
    __SQL_SUM_AGGREGATE_193INVENTORY1_entry se770;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se771;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se772;
    __SQL_SUM_AGGREGATE_194INVENTORY1_entry se774;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se775;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se776;
    __SQL_SUM_AGGREGATE_195INVENTORY1_entry se778;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se779;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se780;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se782;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se783;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se784;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se786;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se787;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se788;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se790;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se791;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se792;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se794;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se795;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se796;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se798;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se799;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se800;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se802;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se803;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se804;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se806;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se807;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se808;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se810;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se811;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se812;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se814;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se815;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se816;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se818;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se819;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se820;
    __SQL_SUM_AGGREGATE_206INVENTORY1_entry se822;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se823;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se824;
    __SQL_SUM_AGGREGATE_207INVENTORY1_entry se826;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se827;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se828;
    __SQL_SUM_AGGREGATE_208INVENTORY1_entry se830;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se831;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se832;
    __SQL_SUM_AGGREGATE_209INVENTORY1_entry se834;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se835;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se836;
    __SQL_SUM_AGGREGATE_210INVENTORY1_entry se838;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se839;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se840;
    __SQL_SUM_AGGREGATE_211INVENTORY1_entry se842;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se843;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se844;
    __SQL_SUM_AGGREGATE_212INVENTORY1_entry se846;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se847;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se848;
    __SQL_SUM_AGGREGATE_213INVENTORY1_entry se850;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se851;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se852;
    __SQL_SUM_AGGREGATE_214INVENTORY1_entry se854;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se855;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se856;
    __SQL_SUM_AGGREGATE_215INVENTORY1_entry se858;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se859;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se860;
    __SQL_SUM_AGGREGATE_216INVENTORY1_entry se862;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se863;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se864;
    __SQL_SUM_AGGREGATE_217INVENTORY1_entry se866;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se867;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se868;
    __SQL_SUM_AGGREGATE_218INVENTORY1_entry se870;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se871;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se872;
    __SQL_SUM_AGGREGATE_219INVENTORY1_entry se874;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se875;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se876;
    __SQL_SUM_AGGREGATE_220INVENTORY1_entry se878;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se879;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se880;
    __SQL_SUM_AGGREGATE_221INVENTORY1_entry se882;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se883;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se884;
    __SQL_SUM_AGGREGATE_222INVENTORY1_entry se886;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se887;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se888;
    __SQL_SUM_AGGREGATE_223INVENTORY1_entry se890;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se891;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se892;
    __SQL_SUM_AGGREGATE_224INVENTORY1_entry se894;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se895;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se896;
    __SQL_SUM_AGGREGATE_225INVENTORY1_entry se898;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se899;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se900;
    __SQL_SUM_AGGREGATE_226INVENTORY1_entry se902;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se903;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se904;
    __SQL_SUM_AGGREGATE_227INVENTORY1_entry se906;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se907;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se908;
    __SQL_SUM_AGGREGATE_228INVENTORY1_entry se910;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se911;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se912;
    __SQL_SUM_AGGREGATE_229INVENTORY1_entry se914;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se915;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se916;
    __SQL_SUM_AGGREGATE_230INVENTORY1_entry se918;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se919;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se920;
    __SQL_SUM_AGGREGATE_231INVENTORY1_entry se922;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se923;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se924;
    __SQL_SUM_AGGREGATE_232INVENTORY1_entry se926;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se927;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se928;
    __SQL_SUM_AGGREGATE_233INVENTORY1_entry se930;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se931;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se932;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se934;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se935;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se936;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se938;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se939;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se940;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se942;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se943;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se944;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se946;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se947;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se948;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se950;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se951;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se952;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se954;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se955;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se956;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se958;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se959;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se960;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se962;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se963;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se964;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se966;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se967;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se968;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se970;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se971;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se972;
    __SQL_SUM_AGGREGATE_244INVENTORY1_entry se974;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se975;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se976;
    __SQL_SUM_AGGREGATE_245INVENTORY1_entry se978;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se979;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se980;
    __SQL_SUM_AGGREGATE_246INVENTORY1_entry se982;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se983;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se984;
    __SQL_SUM_AGGREGATE_247INVENTORY1_entry se986;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se987;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se988;
    __SQL_SUM_AGGREGATE_248INVENTORY1_entry se990;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se991;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se992;
    __SQL_SUM_AGGREGATE_249INVENTORY1_entry se994;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se995;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se996;
    __SQL_SUM_AGGREGATE_250INVENTORY1_entry se998;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se999;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1000;
    __SQL_SUM_AGGREGATE_251INVENTORY1_entry se1002;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1003;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1004;
    __SQL_SUM_AGGREGATE_252INVENTORY1_entry se1006;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1007;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1008;
    __SQL_SUM_AGGREGATE_253INVENTORY1_entry se1010;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1011;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1012;
    __SQL_SUM_AGGREGATE_254INVENTORY1_entry se1014;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1015;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1016;
    __SQL_SUM_AGGREGATE_255INVENTORY1_entry se1018;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1019;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1020;
    __SQL_SUM_AGGREGATE_256INVENTORY1_entry se1022;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1023;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1024;
    __SQL_SUM_AGGREGATE_257INVENTORY1_entry se1026;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1027;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1028;
    __SQL_SUM_AGGREGATE_258INVENTORY1_entry se1030;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1031;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1032;
    __SQL_SUM_AGGREGATE_259INVENTORY1_entry se1034;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1035;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1036;
    __SQL_SUM_AGGREGATE_260INVENTORY1_entry se1038;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1039;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1040;
    __SQL_SUM_AGGREGATE_261INVENTORY1_entry se1042;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1043;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1044;
    __SQL_SUM_AGGREGATE_262INVENTORY1_entry se1046;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1047;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1048;
    __SQL_SUM_AGGREGATE_263INVENTORY1_entry se1050;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1051;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1052;
    __SQL_SUM_AGGREGATE_264INVENTORY1_entry se1054;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1055;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1056;
    __SQL_SUM_AGGREGATE_265INVENTORY1_entry se1058;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1059;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1060;
    __SQL_SUM_AGGREGATE_266INVENTORY1_entry se1062;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1063;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1064;
    __SQL_SUM_AGGREGATE_267INVENTORY1_entry se1066;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1067;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1068;
    __SQL_SUM_AGGREGATE_268INVENTORY1_entry se1070;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1071;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1072;
    __SQL_SUM_AGGREGATE_269INVENTORY1_entry se1074;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1075;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1076;
    __SQL_SUM_AGGREGATE_270INVENTORY1_entry se1078;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1079;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1080;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1082;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1083;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1084;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1086;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1087;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1088;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1090;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1091;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1092;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1094;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1095;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1096;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1098;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1099;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1100;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1102;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1103;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1104;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1106;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1107;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1108;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1110;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1111;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1112;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1114;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1115;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1116;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se1118;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1119;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1120;
    __SQL_SUM_AGGREGATE_281INVENTORY1_entry se1122;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1123;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1124;
    __SQL_SUM_AGGREGATE_282INVENTORY1_entry se1126;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1127;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1128;
    __SQL_SUM_AGGREGATE_283INVENTORY1_entry se1130;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1131;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1132;
    __SQL_SUM_AGGREGATE_284INVENTORY1_entry se1134;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1135;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1136;
    __SQL_SUM_AGGREGATE_285INVENTORY1_entry se1138;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1139;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1140;
    __SQL_SUM_AGGREGATE_286INVENTORY1_entry se1142;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1143;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1144;
    __SQL_SUM_AGGREGATE_287INVENTORY1_entry se1146;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1147;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1148;
    __SQL_SUM_AGGREGATE_288INVENTORY1_entry se1150;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1151;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1152;
    __SQL_SUM_AGGREGATE_289INVENTORY1_entry se1154;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1155;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1156;
    __SQL_SUM_AGGREGATE_290INVENTORY1_entry se1158;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1159;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1160;
    __SQL_SUM_AGGREGATE_291INVENTORY1_entry se1162;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1163;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1164;
    __SQL_SUM_AGGREGATE_292INVENTORY1_entry se1166;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1167;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1168;
    __SQL_SUM_AGGREGATE_293INVENTORY1_entry se1170;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1171;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1172;
    __SQL_SUM_AGGREGATE_294INVENTORY1_entry se1174;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1175;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1176;
    __SQL_SUM_AGGREGATE_295INVENTORY1_entry se1178;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1179;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1180;
    __SQL_SUM_AGGREGATE_296INVENTORY1_entry se1182;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1183;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1184;
    __SQL_SUM_AGGREGATE_297INVENTORY1_entry se1186;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1187;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1188;
    __SQL_SUM_AGGREGATE_298INVENTORY1_entry se1190;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1191;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1192;
    __SQL_SUM_AGGREGATE_299INVENTORY1_entry se1194;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1195;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1196;
    __SQL_SUM_AGGREGATE_300INVENTORY1_entry se1198;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1199;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1200;
    __SQL_SUM_AGGREGATE_301INVENTORY1_entry se1202;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1203;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1204;
    __SQL_SUM_AGGREGATE_302INVENTORY1_entry se1206;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1207;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1208;
    __SQL_SUM_AGGREGATE_303INVENTORY1_entry se1210;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1211;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1212;
    __SQL_SUM_AGGREGATE_304INVENTORY1_entry se1214;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1215;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1216;
    __SQL_SUM_AGGREGATE_305INVENTORY1_entry se1218;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1219;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1220;
    __SQL_SUM_AGGREGATE_306INVENTORY1_entry se1222;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1223;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1224;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1226;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1227;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1228;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1230;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1231;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1232;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1234;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1235;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1236;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1238;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1239;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1240;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1242;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1243;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1244;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1246;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1247;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1248;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1250;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1251;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1252;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1254;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1255;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1256;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1258;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1259;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1260;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se1262;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1263;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1264;
    __SQL_SUM_AGGREGATE_317INVENTORY1_entry se1266;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1267;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1268;
    __SQL_SUM_AGGREGATE_318INVENTORY1_entry se1270;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1271;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1272;
    __SQL_SUM_AGGREGATE_319INVENTORY1_entry se1274;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1275;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1276;
    __SQL_SUM_AGGREGATE_320INVENTORY1_entry se1278;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1279;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1280;
    __SQL_SUM_AGGREGATE_321INVENTORY1_entry se1282;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1283;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1284;
    __SQL_SUM_AGGREGATE_322INVENTORY1_entry se1286;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1287;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1288;
    __SQL_SUM_AGGREGATE_323INVENTORY1_entry se1290;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1291;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1292;
    __SQL_SUM_AGGREGATE_324INVENTORY1_entry se1294;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1295;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1296;
    __SQL_SUM_AGGREGATE_325INVENTORY1_entry se1298;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1299;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1300;
    __SQL_SUM_AGGREGATE_326INVENTORY1_entry se1302;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1303;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1304;
    __SQL_SUM_AGGREGATE_327INVENTORY1_entry se1306;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1307;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1308;
    __SQL_SUM_AGGREGATE_328INVENTORY1_entry se1310;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1311;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1312;
    __SQL_SUM_AGGREGATE_329INVENTORY1_entry se1314;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1315;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1316;
    __SQL_SUM_AGGREGATE_330INVENTORY1_entry se1318;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1319;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1320;
    __SQL_SUM_AGGREGATE_331INVENTORY1_entry se1322;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1323;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1324;
    __SQL_SUM_AGGREGATE_332INVENTORY1_entry se1326;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1327;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1328;
    __SQL_SUM_AGGREGATE_333INVENTORY1_entry se1330;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1331;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1332;
    __SQL_SUM_AGGREGATE_334INVENTORY1_entry se1334;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1335;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1336;
    __SQL_SUM_AGGREGATE_335INVENTORY1_entry se1338;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1339;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1340;
    __SQL_SUM_AGGREGATE_336INVENTORY1_entry se1342;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1343;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1344;
    __SQL_SUM_AGGREGATE_337INVENTORY1_entry se1346;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1347;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1348;
    __SQL_SUM_AGGREGATE_338INVENTORY1_entry se1350;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1351;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1352;
    __SQL_SUM_AGGREGATE_339INVENTORY1_entry se1354;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1355;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1356;
    __SQL_SUM_AGGREGATE_340INVENTORY1_entry se1358;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1359;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1360;
    __SQL_SUM_AGGREGATE_341INVENTORY1_entry se1362;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1363;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1364;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1366;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1367;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1368;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1370;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1371;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1372;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1374;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1375;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1376;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1378;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1379;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1380;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1382;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1383;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1384;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1386;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1387;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1388;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1390;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1391;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1392;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1394;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1395;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1396;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1398;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1399;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1400;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se1402;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1403;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1404;
    __SQL_SUM_AGGREGATE_352INVENTORY1_entry se1406;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1407;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1408;
    __SQL_SUM_AGGREGATE_353INVENTORY1_entry se1410;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1411;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1412;
    __SQL_SUM_AGGREGATE_354INVENTORY1_entry se1414;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1415;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1416;
    __SQL_SUM_AGGREGATE_355INVENTORY1_entry se1418;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1419;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1420;
    __SQL_SUM_AGGREGATE_356INVENTORY1_entry se1422;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1423;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1424;
    __SQL_SUM_AGGREGATE_357INVENTORY1_entry se1426;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1427;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1428;
    __SQL_SUM_AGGREGATE_358INVENTORY1_entry se1430;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1431;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1432;
    __SQL_SUM_AGGREGATE_359INVENTORY1_entry se1434;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1435;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1436;
    __SQL_SUM_AGGREGATE_360INVENTORY1_entry se1438;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1439;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1440;
    __SQL_SUM_AGGREGATE_361INVENTORY1_entry se1442;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1443;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1444;
    __SQL_SUM_AGGREGATE_362INVENTORY1_entry se1446;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1447;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1448;
    __SQL_SUM_AGGREGATE_363INVENTORY1_entry se1450;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1451;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1452;
    __SQL_SUM_AGGREGATE_364INVENTORY1_entry se1454;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1455;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1456;
    __SQL_SUM_AGGREGATE_365INVENTORY1_entry se1458;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1459;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1460;
    __SQL_SUM_AGGREGATE_366INVENTORY1_entry se1462;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1463;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1464;
    __SQL_SUM_AGGREGATE_367INVENTORY1_entry se1466;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1467;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1468;
    __SQL_SUM_AGGREGATE_368INVENTORY1_entry se1470;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1471;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1472;
    __SQL_SUM_AGGREGATE_369INVENTORY1_entry se1474;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1475;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1476;
    __SQL_SUM_AGGREGATE_370INVENTORY1_entry se1478;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1479;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1480;
    __SQL_SUM_AGGREGATE_371INVENTORY1_entry se1482;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1483;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1484;
    __SQL_SUM_AGGREGATE_372INVENTORY1_entry se1486;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1487;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1488;
    __SQL_SUM_AGGREGATE_373INVENTORY1_entry se1490;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1491;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1492;
    __SQL_SUM_AGGREGATE_374INVENTORY1_entry se1494;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1495;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1496;
    __SQL_SUM_AGGREGATE_375INVENTORY1_entry se1498;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1499;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1500;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1502;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1503;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1504;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1506;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1507;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1508;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1510;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1511;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1512;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1514;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1515;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1516;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1518;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1519;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1520;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1522;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1523;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1524;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1526;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1527;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1528;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1530;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1531;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1532;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1534;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1535;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1536;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se1538;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1539;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1540;
    __SQL_SUM_AGGREGATE_386INVENTORY1_entry se1542;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1543;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1544;
    __SQL_SUM_AGGREGATE_387INVENTORY1_entry se1546;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1547;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1548;
    __SQL_SUM_AGGREGATE_388INVENTORY1_entry se1550;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1551;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1552;
    __SQL_SUM_AGGREGATE_389INVENTORY1_entry se1554;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1555;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1556;
    __SQL_SUM_AGGREGATE_390INVENTORY1_entry se1558;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1559;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1560;
    __SQL_SUM_AGGREGATE_391INVENTORY1_entry se1562;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1563;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1564;
    __SQL_SUM_AGGREGATE_392INVENTORY1_entry se1566;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1567;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1568;
    __SQL_SUM_AGGREGATE_393INVENTORY1_entry se1570;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1571;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1572;
    __SQL_SUM_AGGREGATE_394INVENTORY1_entry se1574;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1575;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1576;
    __SQL_SUM_AGGREGATE_395INVENTORY1_entry se1578;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1579;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1580;
    __SQL_SUM_AGGREGATE_396INVENTORY1_entry se1582;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1583;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1584;
    __SQL_SUM_AGGREGATE_397INVENTORY1_entry se1586;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1587;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1588;
    __SQL_SUM_AGGREGATE_398INVENTORY1_entry se1590;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1591;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1592;
    __SQL_SUM_AGGREGATE_399INVENTORY1_entry se1594;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1595;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1596;
    __SQL_SUM_AGGREGATE_400INVENTORY1_entry se1598;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1599;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1600;
    __SQL_SUM_AGGREGATE_401INVENTORY1_entry se1602;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1603;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1604;
    __SQL_SUM_AGGREGATE_402INVENTORY1_entry se1606;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1607;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1608;
    __SQL_SUM_AGGREGATE_403INVENTORY1_entry se1610;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1611;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1612;
    __SQL_SUM_AGGREGATE_404INVENTORY1_entry se1614;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1615;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1616;
    __SQL_SUM_AGGREGATE_405INVENTORY1_entry se1618;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1619;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1620;
    __SQL_SUM_AGGREGATE_406INVENTORY1_entry se1622;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1623;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1624;
    __SQL_SUM_AGGREGATE_407INVENTORY1_entry se1626;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1627;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1628;
    __SQL_SUM_AGGREGATE_408INVENTORY1_entry se1630;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1631;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1632;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1634;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1635;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1636;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1638;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1639;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1640;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1642;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1643;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1644;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1646;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1647;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1648;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1650;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1651;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1652;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1654;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1655;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1656;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1658;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1659;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1660;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1662;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1663;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1664;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1666;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1667;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1668;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se1670;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1671;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1672;
    __SQL_SUM_AGGREGATE_419INVENTORY1_entry se1674;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1675;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1676;
    __SQL_SUM_AGGREGATE_420INVENTORY1_entry se1678;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1679;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1680;
    __SQL_SUM_AGGREGATE_421INVENTORY1_entry se1682;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1683;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1684;
    __SQL_SUM_AGGREGATE_422INVENTORY1_entry se1686;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1687;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1688;
    __SQL_SUM_AGGREGATE_423INVENTORY1_entry se1690;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1691;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1692;
    __SQL_SUM_AGGREGATE_424INVENTORY1_entry se1694;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1695;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1696;
    __SQL_SUM_AGGREGATE_425INVENTORY1_entry se1698;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1699;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1700;
    __SQL_SUM_AGGREGATE_426INVENTORY1_entry se1702;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1703;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1704;
    __SQL_SUM_AGGREGATE_427INVENTORY1_entry se1706;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1707;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1708;
    __SQL_SUM_AGGREGATE_428INVENTORY1_entry se1710;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1711;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1712;
    __SQL_SUM_AGGREGATE_429INVENTORY1_entry se1714;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1715;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1716;
    __SQL_SUM_AGGREGATE_430INVENTORY1_entry se1718;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1719;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1720;
    __SQL_SUM_AGGREGATE_431INVENTORY1_entry se1722;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1723;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1724;
    __SQL_SUM_AGGREGATE_432INVENTORY1_entry se1726;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1727;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1728;
    __SQL_SUM_AGGREGATE_433INVENTORY1_entry se1730;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1731;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1732;
    __SQL_SUM_AGGREGATE_434INVENTORY1_entry se1734;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1735;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1736;
    __SQL_SUM_AGGREGATE_435INVENTORY1_entry se1738;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1739;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1740;
    __SQL_SUM_AGGREGATE_436INVENTORY1_entry se1742;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1743;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1744;
    __SQL_SUM_AGGREGATE_437INVENTORY1_entry se1746;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1747;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1748;
    __SQL_SUM_AGGREGATE_438INVENTORY1_entry se1750;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1751;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1752;
    __SQL_SUM_AGGREGATE_439INVENTORY1_entry se1754;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1755;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1756;
    __SQL_SUM_AGGREGATE_440INVENTORY1_entry se1758;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1759;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1760;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1762;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1763;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1764;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1766;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1767;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1768;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1770;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1771;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1772;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1774;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1775;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1776;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1778;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1779;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1780;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1782;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1783;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1784;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1786;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1787;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1788;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1790;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1791;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1792;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1794;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1795;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1796;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se1798;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1799;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1800;
    __SQL_SUM_AGGREGATE_451INVENTORY1_entry se1802;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1803;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1804;
    __SQL_SUM_AGGREGATE_452INVENTORY1_entry se1806;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1807;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1808;
    __SQL_SUM_AGGREGATE_453INVENTORY1_entry se1810;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1811;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1812;
    __SQL_SUM_AGGREGATE_454INVENTORY1_entry se1814;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1815;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1816;
    __SQL_SUM_AGGREGATE_455INVENTORY1_entry se1818;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1819;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1820;
    __SQL_SUM_AGGREGATE_456INVENTORY1_entry se1822;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1823;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1824;
    __SQL_SUM_AGGREGATE_457INVENTORY1_entry se1826;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1827;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1828;
    __SQL_SUM_AGGREGATE_458INVENTORY1_entry se1830;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1831;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1832;
    __SQL_SUM_AGGREGATE_459INVENTORY1_entry se1834;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1835;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1836;
    __SQL_SUM_AGGREGATE_460INVENTORY1_entry se1838;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1839;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1840;
    __SQL_SUM_AGGREGATE_461INVENTORY1_entry se1842;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1843;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1844;
    __SQL_SUM_AGGREGATE_462INVENTORY1_entry se1846;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1847;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1848;
    __SQL_SUM_AGGREGATE_463INVENTORY1_entry se1850;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1851;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1852;
    __SQL_SUM_AGGREGATE_464INVENTORY1_entry se1854;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1855;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1856;
    __SQL_SUM_AGGREGATE_465INVENTORY1_entry se1858;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1859;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1860;
    __SQL_SUM_AGGREGATE_466INVENTORY1_entry se1862;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1863;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1864;
    __SQL_SUM_AGGREGATE_467INVENTORY1_entry se1866;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1867;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1868;
    __SQL_SUM_AGGREGATE_468INVENTORY1_entry se1870;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1871;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1872;
    __SQL_SUM_AGGREGATE_469INVENTORY1_entry se1874;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1875;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1876;
    __SQL_SUM_AGGREGATE_470INVENTORY1_entry se1878;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1879;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1880;
    __SQL_SUM_AGGREGATE_471INVENTORY1_entry se1882;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1883;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1884;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1886;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se1887;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1888;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1890;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se1891;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1892;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1894;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se1895;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1896;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1898;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se1899;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1900;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1902;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1903;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se1904;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1906;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1907;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se1908;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1910;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1911;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se1912;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1914;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1915;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se1916;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1918;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1919;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se1920;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se1922;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1923;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se1924;
    __SQL_SUM_AGGREGATE_482INVENTORY1_entry se1926;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1927;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1928;
    __SQL_SUM_AGGREGATE_483INVENTORY1_entry se1930;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1931;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1932;
    __SQL_SUM_AGGREGATE_484INVENTORY1_entry se1934;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1935;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1936;
    __SQL_SUM_AGGREGATE_485INVENTORY1_entry se1938;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1939;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1940;
    __SQL_SUM_AGGREGATE_486INVENTORY1_entry se1942;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1943;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1944;
    __SQL_SUM_AGGREGATE_487INVENTORY1_entry se1946;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1947;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1948;
    __SQL_SUM_AGGREGATE_488INVENTORY1_entry se1950;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1951;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1952;
    __SQL_SUM_AGGREGATE_489INVENTORY1_entry se1954;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1955;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1956;
    __SQL_SUM_AGGREGATE_490INVENTORY1_entry se1958;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1959;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1960;
    __SQL_SUM_AGGREGATE_491INVENTORY1_entry se1962;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1963;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1964;
    __SQL_SUM_AGGREGATE_492INVENTORY1_entry se1966;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1967;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1968;
    __SQL_SUM_AGGREGATE_493INVENTORY1_entry se1970;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1971;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1972;
    __SQL_SUM_AGGREGATE_494INVENTORY1_entry se1974;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1975;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1976;
    __SQL_SUM_AGGREGATE_495INVENTORY1_entry se1978;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1979;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1980;
    __SQL_SUM_AGGREGATE_496INVENTORY1_entry se1982;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1983;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1984;
    __SQL_SUM_AGGREGATE_497INVENTORY1_entry se1986;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1987;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1988;
    __SQL_SUM_AGGREGATE_498INVENTORY1_entry se1990;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1991;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1992;
    __SQL_SUM_AGGREGATE_499INVENTORY1_entry se1994;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1995;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se1996;
    __SQL_SUM_AGGREGATE_500INVENTORY1_entry se1998;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se1999;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2000;
    __SQL_SUM_AGGREGATE_501INVENTORY1_entry se2002;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2003;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2004;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2006;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2007;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2008;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2010;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2011;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2012;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2014;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2015;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2016;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2018;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2019;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2020;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2022;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2023;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2024;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2026;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2027;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2028;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2030;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2031;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2032;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2034;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2035;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2036;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2038;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2039;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2040;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se2042;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2043;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2044;
    __SQL_SUM_AGGREGATE_512INVENTORY1_entry se2046;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2047;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2048;
    __SQL_SUM_AGGREGATE_513INVENTORY1_entry se2050;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2051;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2052;
    __SQL_SUM_AGGREGATE_514INVENTORY1_entry se2054;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2055;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2056;
    __SQL_SUM_AGGREGATE_515INVENTORY1_entry se2058;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2059;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2060;
    __SQL_SUM_AGGREGATE_516INVENTORY1_entry se2062;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2063;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2064;
    __SQL_SUM_AGGREGATE_517INVENTORY1_entry se2066;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2067;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2068;
    __SQL_SUM_AGGREGATE_518INVENTORY1_entry se2070;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2071;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2072;
    __SQL_SUM_AGGREGATE_519INVENTORY1_entry se2074;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2075;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2076;
    __SQL_SUM_AGGREGATE_520INVENTORY1_entry se2078;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2079;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2080;
    __SQL_SUM_AGGREGATE_521INVENTORY1_entry se2082;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2083;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2084;
    __SQL_SUM_AGGREGATE_522INVENTORY1_entry se2086;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2087;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2088;
    __SQL_SUM_AGGREGATE_523INVENTORY1_entry se2090;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2091;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2092;
    __SQL_SUM_AGGREGATE_524INVENTORY1_entry se2094;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2095;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2096;
    __SQL_SUM_AGGREGATE_525INVENTORY1_entry se2098;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2099;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2100;
    __SQL_SUM_AGGREGATE_526INVENTORY1_entry se2102;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2103;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2104;
    __SQL_SUM_AGGREGATE_527INVENTORY1_entry se2106;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2107;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2108;
    __SQL_SUM_AGGREGATE_528INVENTORY1_entry se2110;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2111;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2112;
    __SQL_SUM_AGGREGATE_529INVENTORY1_entry se2114;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2115;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2116;
    __SQL_SUM_AGGREGATE_530INVENTORY1_entry se2118;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2119;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2120;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2122;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2123;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2124;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2126;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2127;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2128;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2130;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2131;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2132;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2134;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2135;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2136;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2138;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2139;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2140;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2142;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2143;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2144;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2146;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2147;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2148;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2150;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2151;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2152;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2154;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2155;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2156;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se2158;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2159;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2160;
    __SQL_SUM_AGGREGATE_541INVENTORY1_entry se2162;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2163;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2164;
    __SQL_SUM_AGGREGATE_542INVENTORY1_entry se2166;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2167;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2168;
    __SQL_SUM_AGGREGATE_543INVENTORY1_entry se2170;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2171;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2172;
    __SQL_SUM_AGGREGATE_544INVENTORY1_entry se2174;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2175;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2176;
    __SQL_SUM_AGGREGATE_545INVENTORY1_entry se2178;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2179;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2180;
    __SQL_SUM_AGGREGATE_546INVENTORY1_entry se2182;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2183;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2184;
    __SQL_SUM_AGGREGATE_547INVENTORY1_entry se2186;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2187;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2188;
    __SQL_SUM_AGGREGATE_548INVENTORY1_entry se2190;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2191;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2192;
    __SQL_SUM_AGGREGATE_549INVENTORY1_entry se2194;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2195;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2196;
    __SQL_SUM_AGGREGATE_550INVENTORY1_entry se2198;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2199;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2200;
    __SQL_SUM_AGGREGATE_551INVENTORY1_entry se2202;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2203;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2204;
    __SQL_SUM_AGGREGATE_552INVENTORY1_entry se2206;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2207;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2208;
    __SQL_SUM_AGGREGATE_553INVENTORY1_entry se2210;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2211;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2212;
    __SQL_SUM_AGGREGATE_554INVENTORY1_entry se2214;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2215;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2216;
    __SQL_SUM_AGGREGATE_555INVENTORY1_entry se2218;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2219;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2220;
    __SQL_SUM_AGGREGATE_556INVENTORY1_entry se2222;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2223;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2224;
    __SQL_SUM_AGGREGATE_557INVENTORY1_entry se2226;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2227;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2228;
    __SQL_SUM_AGGREGATE_558INVENTORY1_entry se2230;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2231;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2232;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2234;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2235;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2236;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2238;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2239;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2240;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2242;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2243;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2244;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2246;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2247;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2248;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2250;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2251;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2252;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2254;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2255;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2256;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2258;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2259;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2260;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2262;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2263;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2264;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2266;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2267;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2268;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se2270;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2271;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2272;
    __SQL_SUM_AGGREGATE_569INVENTORY1_entry se2274;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2275;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2276;
    __SQL_SUM_AGGREGATE_570INVENTORY1_entry se2278;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2279;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2280;
    __SQL_SUM_AGGREGATE_571INVENTORY1_entry se2282;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2283;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2284;
    __SQL_SUM_AGGREGATE_572INVENTORY1_entry se2286;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2287;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2288;
    __SQL_SUM_AGGREGATE_573INVENTORY1_entry se2290;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2291;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2292;
    __SQL_SUM_AGGREGATE_574INVENTORY1_entry se2294;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2295;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2296;
    __SQL_SUM_AGGREGATE_575INVENTORY1_entry se2298;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2299;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2300;
    __SQL_SUM_AGGREGATE_576INVENTORY1_entry se2302;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2303;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2304;
    __SQL_SUM_AGGREGATE_577INVENTORY1_entry se2306;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2307;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2308;
    __SQL_SUM_AGGREGATE_578INVENTORY1_entry se2310;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2311;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2312;
    __SQL_SUM_AGGREGATE_579INVENTORY1_entry se2314;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2315;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2316;
    __SQL_SUM_AGGREGATE_580INVENTORY1_entry se2318;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2319;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2320;
    __SQL_SUM_AGGREGATE_581INVENTORY1_entry se2322;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2323;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2324;
    __SQL_SUM_AGGREGATE_582INVENTORY1_entry se2326;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2327;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2328;
    __SQL_SUM_AGGREGATE_583INVENTORY1_entry se2330;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2331;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2332;
    __SQL_SUM_AGGREGATE_584INVENTORY1_entry se2334;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2335;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2336;
    __SQL_SUM_AGGREGATE_585INVENTORY1_entry se2338;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2339;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2340;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2342;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2343;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2344;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2346;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2347;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2348;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2350;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2351;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2352;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2354;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2355;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2356;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2358;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2359;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2360;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2362;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2363;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2364;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2366;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2367;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2368;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2370;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2371;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2372;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2374;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2375;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2376;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se2378;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2379;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2380;
    __SQL_SUM_AGGREGATE_596INVENTORY1_entry se2382;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2383;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2384;
    __SQL_SUM_AGGREGATE_597INVENTORY1_entry se2386;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2387;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2388;
    __SQL_SUM_AGGREGATE_598INVENTORY1_entry se2390;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2391;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2392;
    __SQL_SUM_AGGREGATE_599INVENTORY1_entry se2394;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2395;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2396;
    __SQL_SUM_AGGREGATE_600INVENTORY1_entry se2398;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2399;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2400;
    __SQL_SUM_AGGREGATE_601INVENTORY1_entry se2402;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2403;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2404;
    __SQL_SUM_AGGREGATE_602INVENTORY1_entry se2406;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2407;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2408;
    __SQL_SUM_AGGREGATE_603INVENTORY1_entry se2410;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2411;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2412;
    __SQL_SUM_AGGREGATE_604INVENTORY1_entry se2414;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2415;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2416;
    __SQL_SUM_AGGREGATE_605INVENTORY1_entry se2418;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2419;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2420;
    __SQL_SUM_AGGREGATE_606INVENTORY1_entry se2422;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2423;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2424;
    __SQL_SUM_AGGREGATE_607INVENTORY1_entry se2426;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2427;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2428;
    __SQL_SUM_AGGREGATE_608INVENTORY1_entry se2430;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2431;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2432;
    __SQL_SUM_AGGREGATE_609INVENTORY1_entry se2434;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2435;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2436;
    __SQL_SUM_AGGREGATE_610INVENTORY1_entry se2438;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2439;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2440;
    __SQL_SUM_AGGREGATE_611INVENTORY1_entry se2442;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2443;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2444;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2446;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2447;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2448;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2450;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2451;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2452;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2454;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2455;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2456;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2458;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2459;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2460;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2462;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2463;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2464;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2466;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2467;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2468;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2470;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2471;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2472;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2474;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2475;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2476;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2478;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2479;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2480;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se2482;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2483;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2484;
    __SQL_SUM_AGGREGATE_622INVENTORY1_entry se2486;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2487;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2488;
    __SQL_SUM_AGGREGATE_623INVENTORY1_entry se2490;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2491;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2492;
    __SQL_SUM_AGGREGATE_624INVENTORY1_entry se2494;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2495;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2496;
    __SQL_SUM_AGGREGATE_625INVENTORY1_entry se2498;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2499;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2500;
    __SQL_SUM_AGGREGATE_626INVENTORY1_entry se2502;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2503;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2504;
    __SQL_SUM_AGGREGATE_627INVENTORY1_entry se2506;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2507;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2508;
    __SQL_SUM_AGGREGATE_628INVENTORY1_entry se2510;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2511;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2512;
    __SQL_SUM_AGGREGATE_629INVENTORY1_entry se2514;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2515;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2516;
    __SQL_SUM_AGGREGATE_630INVENTORY1_entry se2518;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2519;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2520;
    __SQL_SUM_AGGREGATE_631INVENTORY1_entry se2522;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2523;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2524;
    __SQL_SUM_AGGREGATE_632INVENTORY1_entry se2526;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2527;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2528;
    __SQL_SUM_AGGREGATE_633INVENTORY1_entry se2530;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2531;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2532;
    __SQL_SUM_AGGREGATE_634INVENTORY1_entry se2534;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2535;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2536;
    __SQL_SUM_AGGREGATE_635INVENTORY1_entry se2538;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2539;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2540;
    __SQL_SUM_AGGREGATE_636INVENTORY1_entry se2542;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2543;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2544;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2546;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2547;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2548;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2550;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2551;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2552;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2554;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2555;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2556;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2558;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2559;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2560;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2562;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2563;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2564;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2566;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2567;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2568;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2570;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2571;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2572;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2574;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2575;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2576;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2578;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2579;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2580;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se2582;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2583;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2584;
    __SQL_SUM_AGGREGATE_647INVENTORY1_entry se2586;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2587;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2588;
    __SQL_SUM_AGGREGATE_648INVENTORY1_entry se2590;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2591;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2592;
    __SQL_SUM_AGGREGATE_649INVENTORY1_entry se2594;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2595;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2596;
    __SQL_SUM_AGGREGATE_650INVENTORY1_entry se2598;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2599;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2600;
    __SQL_SUM_AGGREGATE_651INVENTORY1_entry se2602;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2603;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2604;
    __SQL_SUM_AGGREGATE_652INVENTORY1_entry se2606;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2607;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2608;
    __SQL_SUM_AGGREGATE_653INVENTORY1_entry se2610;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2611;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2612;
    __SQL_SUM_AGGREGATE_654INVENTORY1_entry se2614;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2615;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2616;
    __SQL_SUM_AGGREGATE_655INVENTORY1_entry se2618;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2619;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2620;
    __SQL_SUM_AGGREGATE_656INVENTORY1_entry se2622;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2623;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2624;
    __SQL_SUM_AGGREGATE_657INVENTORY1_entry se2626;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2627;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2628;
    __SQL_SUM_AGGREGATE_658INVENTORY1_entry se2630;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2631;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2632;
    __SQL_SUM_AGGREGATE_659INVENTORY1_entry se2634;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2635;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2636;
    __SQL_SUM_AGGREGATE_660INVENTORY1_entry se2638;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2639;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2640;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2642;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2643;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2644;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2646;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2647;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2648;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2650;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2651;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2652;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2654;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2655;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2656;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2658;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2659;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2660;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2662;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2663;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2664;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2666;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2667;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2668;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2670;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2671;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2672;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2674;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2675;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2676;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se2678;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2679;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2680;
    __SQL_SUM_AGGREGATE_671INVENTORY1_entry se2682;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2683;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2684;
    __SQL_SUM_AGGREGATE_672INVENTORY1_entry se2686;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2687;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2688;
    __SQL_SUM_AGGREGATE_673INVENTORY1_entry se2690;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2691;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2692;
    __SQL_SUM_AGGREGATE_674INVENTORY1_entry se2694;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2695;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2696;
    __SQL_SUM_AGGREGATE_675INVENTORY1_entry se2698;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2699;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2700;
    __SQL_SUM_AGGREGATE_676INVENTORY1_entry se2702;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2703;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2704;
    __SQL_SUM_AGGREGATE_677INVENTORY1_entry se2706;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2707;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2708;
    __SQL_SUM_AGGREGATE_678INVENTORY1_entry se2710;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2711;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2712;
    __SQL_SUM_AGGREGATE_679INVENTORY1_entry se2714;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2715;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2716;
    __SQL_SUM_AGGREGATE_680INVENTORY1_entry se2718;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2719;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2720;
    __SQL_SUM_AGGREGATE_681INVENTORY1_entry se2722;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2723;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2724;
    __SQL_SUM_AGGREGATE_682INVENTORY1_entry se2726;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2727;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2728;
    __SQL_SUM_AGGREGATE_683INVENTORY1_entry se2730;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2731;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2732;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2734;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2735;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2736;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2738;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2739;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2740;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2742;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2743;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2744;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2746;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2747;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2748;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2750;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2751;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2752;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2754;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2755;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2756;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2758;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2759;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2760;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2762;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2763;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2764;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2766;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2767;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2768;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se2770;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2771;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2772;
    __SQL_SUM_AGGREGATE_694INVENTORY1_entry se2774;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2775;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2776;
    __SQL_SUM_AGGREGATE_695INVENTORY1_entry se2778;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2779;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2780;
    __SQL_SUM_AGGREGATE_696INVENTORY1_entry se2782;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2783;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2784;
    __SQL_SUM_AGGREGATE_697INVENTORY1_entry se2786;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2787;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2788;
    __SQL_SUM_AGGREGATE_698INVENTORY1_entry se2790;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2791;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2792;
    __SQL_SUM_AGGREGATE_699INVENTORY1_entry se2794;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2795;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2796;
    __SQL_SUM_AGGREGATE_700INVENTORY1_entry se2798;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2799;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2800;
    __SQL_SUM_AGGREGATE_701INVENTORY1_entry se2802;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2803;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2804;
    __SQL_SUM_AGGREGATE_702INVENTORY1_entry se2806;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2807;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2808;
    __SQL_SUM_AGGREGATE_703INVENTORY1_entry se2810;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2811;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2812;
    __SQL_SUM_AGGREGATE_704INVENTORY1_entry se2814;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2815;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2816;
    __SQL_SUM_AGGREGATE_705INVENTORY1_entry se2818;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2819;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2820;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2822;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2823;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2824;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2826;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2827;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2828;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2830;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2831;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2832;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2834;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2835;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2836;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2838;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2839;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2840;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2842;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2843;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2844;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2846;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2847;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2848;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2850;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2851;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2852;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2854;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2855;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2856;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se2858;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2859;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2860;
    __SQL_SUM_AGGREGATE_716INVENTORY1_entry se2862;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2863;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2864;
    __SQL_SUM_AGGREGATE_717INVENTORY1_entry se2866;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2867;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2868;
    __SQL_SUM_AGGREGATE_718INVENTORY1_entry se2870;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2871;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2872;
    __SQL_SUM_AGGREGATE_719INVENTORY1_entry se2874;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2875;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2876;
    __SQL_SUM_AGGREGATE_720INVENTORY1_entry se2878;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2879;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2880;
    __SQL_SUM_AGGREGATE_721INVENTORY1_entry se2882;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2883;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2884;
    __SQL_SUM_AGGREGATE_722INVENTORY1_entry se2886;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2887;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2888;
    __SQL_SUM_AGGREGATE_723INVENTORY1_entry se2890;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2891;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2892;
    __SQL_SUM_AGGREGATE_724INVENTORY1_entry se2894;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2895;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2896;
    __SQL_SUM_AGGREGATE_725INVENTORY1_entry se2898;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2899;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2900;
    __SQL_SUM_AGGREGATE_726INVENTORY1_entry se2902;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2903;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2904;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2906;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2907;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2908;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2910;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2911;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2912;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2914;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2915;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2916;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2918;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2919;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2920;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2922;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2923;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se2924;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2926;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2927;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se2928;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2930;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2931;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se2932;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2934;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2935;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se2936;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2938;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2939;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se2940;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se2942;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2943;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se2944;
    __SQL_SUM_AGGREGATE_737INVENTORY1_entry se2946;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2947;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2948;
    __SQL_SUM_AGGREGATE_738INVENTORY1_entry se2950;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2951;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2952;
    __SQL_SUM_AGGREGATE_739INVENTORY1_entry se2954;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2955;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2956;
    __SQL_SUM_AGGREGATE_740INVENTORY1_entry se2958;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2959;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2960;
    __SQL_SUM_AGGREGATE_741INVENTORY1_entry se2962;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2963;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2964;
    __SQL_SUM_AGGREGATE_742INVENTORY1_entry se2966;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2967;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2968;
    __SQL_SUM_AGGREGATE_743INVENTORY1_entry se2970;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2971;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2972;
    __SQL_SUM_AGGREGATE_744INVENTORY1_entry se2974;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2975;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2976;
    __SQL_SUM_AGGREGATE_745INVENTORY1_entry se2978;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2979;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2980;
    __SQL_SUM_AGGREGATE_746INVENTORY1_entry se2982;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se2983;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2984;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se2986;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se2987;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2988;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se2990;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se2991;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2992;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se2994;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se2995;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se2996;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se2998;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se2999;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3000;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3002;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3003;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3004;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3006;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3007;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3008;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3010;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3011;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3012;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3014;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3015;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3016;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3018;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3019;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3020;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3022;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3023;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3024;
    __SQL_SUM_AGGREGATE_757INVENTORY1_entry se3026;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3027;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3028;
    __SQL_SUM_AGGREGATE_758INVENTORY1_entry se3030;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3031;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3032;
    __SQL_SUM_AGGREGATE_759INVENTORY1_entry se3034;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3035;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3036;
    __SQL_SUM_AGGREGATE_760INVENTORY1_entry se3038;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3039;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3040;
    __SQL_SUM_AGGREGATE_761INVENTORY1_entry se3042;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3043;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3044;
    __SQL_SUM_AGGREGATE_762INVENTORY1_entry se3046;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3047;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3048;
    __SQL_SUM_AGGREGATE_763INVENTORY1_entry se3050;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3051;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3052;
    __SQL_SUM_AGGREGATE_764INVENTORY1_entry se3054;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3055;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3056;
    __SQL_SUM_AGGREGATE_765INVENTORY1_entry se3058;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3059;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3060;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3062;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3063;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3064;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3066;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3067;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3068;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3070;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3071;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3072;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3074;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3075;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3076;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3078;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3079;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3080;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3082;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3083;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3084;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3086;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3087;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3088;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3090;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3091;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3092;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3094;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3095;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3096;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3098;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3099;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3100;
    __SQL_SUM_AGGREGATE_776INVENTORY1_entry se3102;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3103;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3104;
    __SQL_SUM_AGGREGATE_777INVENTORY1_entry se3106;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3107;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3108;
    __SQL_SUM_AGGREGATE_778INVENTORY1_entry se3110;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3111;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3112;
    __SQL_SUM_AGGREGATE_779INVENTORY1_entry se3114;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3115;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3116;
    __SQL_SUM_AGGREGATE_780INVENTORY1_entry se3118;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3119;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3120;
    __SQL_SUM_AGGREGATE_781INVENTORY1_entry se3122;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3123;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3124;
    __SQL_SUM_AGGREGATE_782INVENTORY1_entry se3126;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3127;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3128;
    __SQL_SUM_AGGREGATE_783INVENTORY1_entry se3130;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3131;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3132;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3134;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3135;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3136;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3138;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3139;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3140;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3142;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3143;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3144;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3146;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3147;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3148;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3150;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3151;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3152;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3154;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3155;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3156;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3158;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3159;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3160;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3162;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3163;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3164;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3166;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3167;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3168;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3170;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3171;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3172;
    __SQL_SUM_AGGREGATE_794INVENTORY1_entry se3174;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3175;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3176;
    __SQL_SUM_AGGREGATE_795INVENTORY1_entry se3178;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3179;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3180;
    __SQL_SUM_AGGREGATE_796INVENTORY1_entry se3182;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3183;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3184;
    __SQL_SUM_AGGREGATE_797INVENTORY1_entry se3186;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3187;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3188;
    __SQL_SUM_AGGREGATE_798INVENTORY1_entry se3190;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3191;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3192;
    __SQL_SUM_AGGREGATE_799INVENTORY1_entry se3194;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3195;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3196;
    __SQL_SUM_AGGREGATE_800INVENTORY1_entry se3198;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3199;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3200;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3202;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3203;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3204;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3206;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3207;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3208;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3210;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3211;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3212;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3214;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3215;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3216;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3218;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3219;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3220;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3222;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3223;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3224;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3226;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3227;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3228;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3230;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3231;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3232;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3234;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3235;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3236;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3238;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3239;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3240;
    __SQL_SUM_AGGREGATE_811INVENTORY1_entry se3242;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3243;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3244;
    __SQL_SUM_AGGREGATE_812INVENTORY1_entry se3246;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3247;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3248;
    __SQL_SUM_AGGREGATE_813INVENTORY1_entry se3250;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3251;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3252;
    __SQL_SUM_AGGREGATE_814INVENTORY1_entry se3254;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3255;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3256;
    __SQL_SUM_AGGREGATE_815INVENTORY1_entry se3258;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3259;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3260;
    __SQL_SUM_AGGREGATE_816INVENTORY1_entry se3262;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3263;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3264;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3266;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3267;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3268;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3270;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3271;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3272;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3274;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3275;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3276;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3278;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3279;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3280;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3282;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3283;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3284;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3286;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3287;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3288;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3290;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3291;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3292;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3294;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3295;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3296;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3298;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3299;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3300;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3302;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3303;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3304;
    __SQL_SUM_AGGREGATE_827INVENTORY1_entry se3306;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3307;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3308;
    __SQL_SUM_AGGREGATE_828INVENTORY1_entry se3310;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3311;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3312;
    __SQL_SUM_AGGREGATE_829INVENTORY1_entry se3314;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3315;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3316;
    __SQL_SUM_AGGREGATE_830INVENTORY1_entry se3318;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3319;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3320;
    __SQL_SUM_AGGREGATE_831INVENTORY1_entry se3322;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3323;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3324;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3326;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3327;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3328;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3330;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3331;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3332;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3334;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3335;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3336;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3338;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3339;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3340;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3342;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3343;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3344;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3346;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3347;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3348;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3350;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3351;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3352;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3354;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3355;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3356;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3358;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3359;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3360;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3362;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3363;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3364;
    __SQL_SUM_AGGREGATE_842INVENTORY1_entry se3366;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3367;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3368;
    __SQL_SUM_AGGREGATE_843INVENTORY1_entry se3370;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3371;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3372;
    __SQL_SUM_AGGREGATE_844INVENTORY1_entry se3374;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3375;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3376;
    __SQL_SUM_AGGREGATE_845INVENTORY1_entry se3378;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3379;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3380;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3382;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3383;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3384;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3386;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3387;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3388;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3390;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3391;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3392;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3394;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3395;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3396;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3398;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3399;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3400;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3402;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3403;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3404;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3406;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3407;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3408;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3410;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3411;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3412;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3414;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3415;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3416;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3418;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3419;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3420;
    __SQL_SUM_AGGREGATE_856INVENTORY1_entry se3422;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3423;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3424;
    __SQL_SUM_AGGREGATE_857INVENTORY1_entry se3426;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3427;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3428;
    __SQL_SUM_AGGREGATE_858INVENTORY1_entry se3430;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3431;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3432;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3434;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3435;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3436;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3438;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3439;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3440;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3442;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3443;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3444;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3446;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3447;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3448;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3450;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3451;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3452;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3454;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3455;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3456;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3458;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3459;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3460;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3462;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3463;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3464;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3466;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3467;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3468;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3470;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3471;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3472;
    __SQL_SUM_AGGREGATE_869INVENTORY1_entry se3474;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3475;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3476;
    __SQL_SUM_AGGREGATE_870INVENTORY1_entry se3478;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3479;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3480;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3482;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3483;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3484;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3486;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3487;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3488;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3490;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3491;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3492;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3494;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3495;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3496;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3498;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3499;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3500;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3502;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3503;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3504;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3506;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3507;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3508;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3510;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3511;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3512;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3514;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3515;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3516;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3518;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3519;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3520;
    __SQL_SUM_AGGREGATE_881INVENTORY1_entry se3522;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3523;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3524;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3526;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3527;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3528;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3530;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3531;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3532;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3534;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3535;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3536;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3538;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3539;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3540;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3542;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3543;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3544;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3546;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3547;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3548;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3550;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3551;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3552;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3554;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3555;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3556;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3558;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3559;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3560;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3562;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3563;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3564;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3566;
    __SQL_SUM_AGGREGATE_892INVENTORY2_entry se3567;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3568;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3570;
    __SQL_SUM_AGGREGATE_893INVENTORY2_entry se3571;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3572;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3574;
    __SQL_SUM_AGGREGATE_894INVENTORY2_entry se3575;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3576;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3578;
    __SQL_SUM_AGGREGATE_895INVENTORY2_entry se3579;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3580;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3582;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3583;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3584;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3586;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3587;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3588;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3590;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3591;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3592;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3594;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3595;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3596;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3598;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3599;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3600;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3602;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3603;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3604;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3606;
    __SQL_SUM_AGGREGATE_902INVENTORY2_entry se3607;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3608;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3610;
    __SQL_SUM_AGGREGATE_903INVENTORY2_entry se3611;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3612;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3614;
    __SQL_SUM_AGGREGATE_904INVENTORY2_entry se3615;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3616;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3618;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3619;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3620;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3622;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3623;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3624;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3626;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3627;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3628;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3630;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3631;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3632;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3634;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3635;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3636;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3638;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3639;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3640;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3642;
    __SQL_SUM_AGGREGATE_911INVENTORY2_entry se3643;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3644;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3646;
    __SQL_SUM_AGGREGATE_912INVENTORY2_entry se3647;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3648;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3650;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3651;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3652;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3654;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3655;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3656;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3658;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3659;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3660;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3662;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3663;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3664;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3666;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3667;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3668;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3670;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3671;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3672;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3674;
    __SQL_SUM_AGGREGATE_919INVENTORY2_entry se3675;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3676;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3678;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3679;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3680;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3682;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3683;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3684;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3686;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3687;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3688;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3690;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3691;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3692;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3694;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3695;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3696;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3698;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3699;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3700;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3702;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3703;
    __SQL_SUM_AGGREGATE_926INVENTORY3_entry se3704;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3706;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3707;
    __SQL_SUM_AGGREGATE_927INVENTORY3_entry se3708;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3710;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3711;
    __SQL_SUM_AGGREGATE_928INVENTORY3_entry se3712;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3714;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3715;
    __SQL_SUM_AGGREGATE_929INVENTORY3_entry se3716;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3718;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3719;
    __SQL_SUM_AGGREGATE_930INVENTORY3_entry se3720;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3722;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3723;
    __SQL_SUM_AGGREGATE_931INVENTORY3_entry se3724;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3726;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3727;
    __SQL_SUM_AGGREGATE_932INVENTORY3_entry se3728;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3730;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3731;
    __SQL_SUM_AGGREGATE_933INVENTORY3_entry se3732;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3734;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3735;
    __SQL_SUM_AGGREGATE_934INVENTORY3_entry se3736;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3738;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3739;
    __SQL_SUM_AGGREGATE_935INVENTORY3_entry se3740;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3742;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3743;
    __SQL_SUM_AGGREGATE_936INVENTORY3_entry se3744;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3746;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3747;
    __SQL_SUM_AGGREGATE_937INVENTORY3_entry se3748;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3750;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3751;
    __SQL_SUM_AGGREGATE_938INVENTORY3_entry se3752;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3754;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3755;
    __SQL_SUM_AGGREGATE_939INVENTORY3_entry se3756;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3758;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3759;
    __SQL_SUM_AGGREGATE_940INVENTORY3_entry se3760;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3762;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3763;
    __SQL_SUM_AGGREGATE_941INVENTORY3_entry se3764;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3766;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3767;
    __SQL_SUM_AGGREGATE_942INVENTORY3_entry se3768;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3770;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3771;
    __SQL_SUM_AGGREGATE_943INVENTORY3_entry se3772;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3774;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3775;
    __SQL_SUM_AGGREGATE_944INVENTORY3_entry se3776;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3778;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3779;
    __SQL_SUM_AGGREGATE_945INVENTORY3_entry se3780;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3782;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3783;
    __SQL_SUM_AGGREGATE_946INVENTORY3_entry se3784;
    __SQL_SUM_AGGREGATE_1INVENTORY1_entry se3786;
    CENSUS_entry se3787;
    __SQL_SUM_AGGREGATE_1INVENTORY2_entry se3788;
    __SQL_SUM_AGGREGATE_1INVENTORY3_entry se3789;
    __SQL_SUM_AGGREGATE_5INVENTORY1_entry se3794;
    CENSUS_entry se3795;
    __SQL_SUM_AGGREGATE_6INVENTORY1_entry se3797;
    CENSUS_entry se3798;
    __SQL_SUM_AGGREGATE_7INVENTORY1_entry se3800;
    CENSUS_entry se3801;
    __SQL_SUM_AGGREGATE_8INVENTORY1_entry se3803;
    CENSUS_entry se3804;
    __SQL_SUM_AGGREGATE_9INVENTORY1_entry se3806;
    CENSUS_entry se3807;
    __SQL_SUM_AGGREGATE_10INVENTORY1_entry se3809;
    CENSUS_entry se3810;
    __SQL_SUM_AGGREGATE_11INVENTORY1_entry se3812;
    CENSUS_entry se3813;
    __SQL_SUM_AGGREGATE_12INVENTORY1_entry se3815;
    CENSUS_entry se3816;
    __SQL_SUM_AGGREGATE_13INVENTORY1_entry se3818;
    CENSUS_entry se3819;
    __SQL_SUM_AGGREGATE_14INVENTORY1_entry se3821;
    CENSUS_entry se3822;
    __SQL_SUM_AGGREGATE_15INVENTORY1_entry se3824;
    CENSUS_entry se3825;
    __SQL_SUM_AGGREGATE_16INVENTORY1_entry se3827;
    CENSUS_entry se3828;
    __SQL_SUM_AGGREGATE_17INVENTORY1_entry se3830;
    CENSUS_entry se3831;
    __SQL_SUM_AGGREGATE_18INVENTORY1_entry se3833;
    CENSUS_entry se3834;
    __SQL_SUM_AGGREGATE_19INVENTORY1_entry se3836;
    CENSUS_entry se3837;
    __SQL_SUM_AGGREGATE_20INVENTORY1_entry se3839;
    CENSUS_entry se3840;
    __SQL_SUM_AGGREGATE_21INVENTORY1_entry se3842;
    CENSUS_entry se3843;
    __SQL_SUM_AGGREGATE_22INVENTORY1_entry se3845;
    CENSUS_entry se3846;
    __SQL_SUM_AGGREGATE_23INVENTORY1_entry se3848;
    CENSUS_entry se3849;
    __SQL_SUM_AGGREGATE_24INVENTORY1_entry se3851;
    CENSUS_entry se3852;
    __SQL_SUM_AGGREGATE_25INVENTORY1_entry se3854;
    CENSUS_entry se3855;
    __SQL_SUM_AGGREGATE_26INVENTORY1_entry se3857;
    CENSUS_entry se3858;
    __SQL_SUM_AGGREGATE_27INVENTORY1_entry se3860;
    CENSUS_entry se3861;
    __SQL_SUM_AGGREGATE_28INVENTORY1_entry se3863;
    CENSUS_entry se3864;
    __SQL_SUM_AGGREGATE_29INVENTORY1_entry se3866;
    CENSUS_entry se3867;
    __SQL_SUM_AGGREGATE_30INVENTORY1_entry se3869;
    CENSUS_entry se3870;
    __SQL_SUM_AGGREGATE_31INVENTORY1_entry se3872;
    CENSUS_entry se3873;
    __SQL_SUM_AGGREGATE_32INVENTORY1_entry se3875;
    CENSUS_entry se3876;
    __SQL_SUM_AGGREGATE_33INVENTORY1_entry se3878;
    CENSUS_entry se3879;
    __SQL_SUM_AGGREGATE_34INVENTORY2_entry se3881;
    __SQL_SUM_AGGREGATE_35INVENTORY2_entry se3883;
    __SQL_SUM_AGGREGATE_36INVENTORY2_entry se3885;
    __SQL_SUM_AGGREGATE_37INVENTORY2_entry se3887;
    __SQL_SUM_AGGREGATE_38INVENTORY3_entry se3889;
    __SQL_SUM_AGGREGATE_39INVENTORY3_entry se3891;
    __SQL_SUM_AGGREGATE_40INVENTORY3_entry se3893;
    __SQL_SUM_AGGREGATE_41INVENTORY3_entry se3895;
    __SQL_SUM_AGGREGATE_42INVENTORY3_entry se3897;
    __SQL_SUM_AGGREGATE_43INVENTORY3_entry se3899;
    __SQL_SUM_AGGREGATE_121INVENTORY3_entry se3933;
    __SQL_SUM_AGGREGATE_122INVENTORY3_entry se3934;
    __SQL_SUM_AGGREGATE_123INVENTORY3_entry se3935;
    __SQL_SUM_AGGREGATE_124INVENTORY3_entry se3936;
    __SQL_SUM_AGGREGATE_125INVENTORY3_entry se3938;
    __SQL_SUM_AGGREGATE_126INVENTORY3_entry se3939;
    __SQL_SUM_AGGREGATE_157INVENTORY2_entry se3971;
    __SQL_SUM_AGGREGATE_158INVENTORY2_entry se3973;
    __SQL_SUM_AGGREGATE_159INVENTORY2_entry se3975;
    __SQL_SUM_AGGREGATE_160INVENTORY2_entry se3977;
    __SQL_SUM_AGGREGATE_167INVENTORY1_entry se3984;
    CENSUS_entry se3985;
    __SQL_SUM_AGGREGATE_168INVENTORY1_entry se3987;
    CENSUS_entry se3988;
    __SQL_SUM_AGGREGATE_169INVENTORY1_entry se3990;
    CENSUS_entry se3991;
    __SQL_SUM_AGGREGATE_170INVENTORY1_entry se3993;
    CENSUS_entry se3994;
    __SQL_SUM_AGGREGATE_171INVENTORY1_entry se3996;
    CENSUS_entry se3997;
    __SQL_SUM_AGGREGATE_172INVENTORY1_entry se3999;
    CENSUS_entry se4000;
    __SQL_SUM_AGGREGATE_173INVENTORY1_entry se4002;
    CENSUS_entry se4003;
    __SQL_SUM_AGGREGATE_174INVENTORY1_entry se4005;
    CENSUS_entry se4006;
    __SQL_SUM_AGGREGATE_175INVENTORY1_entry se4008;
    CENSUS_entry se4009;
    __SQL_SUM_AGGREGATE_176INVENTORY1_entry se4011;
    CENSUS_entry se4012;
    __SQL_SUM_AGGREGATE_177INVENTORY1_entry se4014;
    CENSUS_entry se4015;
    __SQL_SUM_AGGREGATE_178INVENTORY1_entry se4017;
    CENSUS_entry se4018;
    __SQL_SUM_AGGREGATE_179INVENTORY1_entry se4020;
    CENSUS_entry se4021;
    __SQL_SUM_AGGREGATE_180INVENTORY1_entry se4023;
    CENSUS_entry se4024;
    __SQL_SUM_AGGREGATE_181INVENTORY1_entry se4025;
    CENSUS_entry se4026;
    __SQL_SUM_AGGREGATE_182INVENTORY1_entry se4027;
    CENSUS_entry se4028;
    __SQL_SUM_AGGREGATE_183INVENTORY1_entry se4029;
    CENSUS_entry se4030;
    __SQL_SUM_AGGREGATE_184INVENTORY1_entry se4031;
    CENSUS_entry se4032;
    __SQL_SUM_AGGREGATE_185INVENTORY1_entry se4033;
    CENSUS_entry se4034;
    __SQL_SUM_AGGREGATE_186INVENTORY1_entry se4036;
    CENSUS_entry se4037;
    __SQL_SUM_AGGREGATE_187INVENTORY1_entry se4038;
    CENSUS_entry se4039;
    __SQL_SUM_AGGREGATE_188INVENTORY1_entry se4040;
    CENSUS_entry se4041;
    __SQL_SUM_AGGREGATE_189INVENTORY1_entry se4042;
    CENSUS_entry se4043;
    __SQL_SUM_AGGREGATE_190INVENTORY1_entry se4044;
    CENSUS_entry se4045;
    __SQL_SUM_AGGREGATE_191INVENTORY1_entry se4046;
    CENSUS_entry se4047;
    __SQL_SUM_AGGREGATE_192INVENTORY1_entry se4048;
    CENSUS_entry se4049;
    __SQL_SUM_AGGREGATE_193INVENTORY1_entry se4050;
    CENSUS_entry se4051;
    __SQL_SUM_AGGREGATE_194INVENTORY1_entry se4052;
    CENSUS_entry se4053;
    __SQL_SUM_AGGREGATE_195INVENTORY1_entry se4054;
    CENSUS_entry se4055;
    __SQL_SUM_AGGREGATE_206INVENTORY1_entry se4059;
    CENSUS_entry se4060;
    __SQL_SUM_AGGREGATE_207INVENTORY1_entry se4062;
    CENSUS_entry se4063;
    __SQL_SUM_AGGREGATE_208INVENTORY1_entry se4065;
    CENSUS_entry se4066;
    __SQL_SUM_AGGREGATE_209INVENTORY1_entry se4068;
    CENSUS_entry se4069;
    __SQL_SUM_AGGREGATE_210INVENTORY1_entry se4071;
    CENSUS_entry se4072;
    __SQL_SUM_AGGREGATE_211INVENTORY1_entry se4074;
    CENSUS_entry se4075;
    __SQL_SUM_AGGREGATE_212INVENTORY1_entry se4077;
    CENSUS_entry se4078;
    __SQL_SUM_AGGREGATE_213INVENTORY1_entry se4080;
    CENSUS_entry se4081;
    __SQL_SUM_AGGREGATE_214INVENTORY1_entry se4083;
    CENSUS_entry se4084;
    __SQL_SUM_AGGREGATE_215INVENTORY1_entry se4086;
    CENSUS_entry se4087;
    __SQL_SUM_AGGREGATE_216INVENTORY1_entry se4089;
    CENSUS_entry se4090;
    __SQL_SUM_AGGREGATE_217INVENTORY1_entry se4092;
    CENSUS_entry se4093;
    __SQL_SUM_AGGREGATE_218INVENTORY1_entry se4095;
    CENSUS_entry se4096;
    __SQL_SUM_AGGREGATE_219INVENTORY1_entry se4098;
    CENSUS_entry se4099;
    __SQL_SUM_AGGREGATE_220INVENTORY1_entry se4101;
    CENSUS_entry se4102;
    __SQL_SUM_AGGREGATE_221INVENTORY1_entry se4104;
    CENSUS_entry se4105;
    __SQL_SUM_AGGREGATE_222INVENTORY1_entry se4107;
    CENSUS_entry se4108;
    __SQL_SUM_AGGREGATE_223INVENTORY1_entry se4110;
    CENSUS_entry se4111;
    __SQL_SUM_AGGREGATE_224INVENTORY1_entry se4113;
    CENSUS_entry se4114;
    __SQL_SUM_AGGREGATE_225INVENTORY1_entry se4116;
    CENSUS_entry se4117;
    __SQL_SUM_AGGREGATE_226INVENTORY1_entry se4119;
    CENSUS_entry se4120;
    __SQL_SUM_AGGREGATE_227INVENTORY1_entry se4122;
    CENSUS_entry se4123;
    __SQL_SUM_AGGREGATE_228INVENTORY1_entry se4125;
    CENSUS_entry se4126;
    __SQL_SUM_AGGREGATE_229INVENTORY1_entry se4128;
    CENSUS_entry se4129;
    __SQL_SUM_AGGREGATE_230INVENTORY1_entry se4131;
    CENSUS_entry se4132;
    __SQL_SUM_AGGREGATE_231INVENTORY1_entry se4134;
    CENSUS_entry se4135;
    __SQL_SUM_AGGREGATE_232INVENTORY1_entry se4137;
    CENSUS_entry se4138;
    __SQL_SUM_AGGREGATE_233INVENTORY1_entry se4140;
    CENSUS_entry se4141;
    __SQL_SUM_AGGREGATE_244INVENTORY1_entry se4153;
    CENSUS_entry se4154;
    __SQL_SUM_AGGREGATE_245INVENTORY1_entry se4156;
    CENSUS_entry se4157;
    __SQL_SUM_AGGREGATE_246INVENTORY1_entry se4159;
    CENSUS_entry se4160;
    __SQL_SUM_AGGREGATE_247INVENTORY1_entry se4162;
    CENSUS_entry se4163;
    __SQL_SUM_AGGREGATE_248INVENTORY1_entry se4165;
    CENSUS_entry se4166;
    __SQL_SUM_AGGREGATE_249INVENTORY1_entry se4168;
    CENSUS_entry se4169;
    __SQL_SUM_AGGREGATE_250INVENTORY1_entry se4171;
    CENSUS_entry se4172;
    __SQL_SUM_AGGREGATE_251INVENTORY1_entry se4174;
    CENSUS_entry se4175;
    __SQL_SUM_AGGREGATE_252INVENTORY1_entry se4177;
    CENSUS_entry se4178;
    __SQL_SUM_AGGREGATE_253INVENTORY1_entry se4180;
    CENSUS_entry se4181;
    __SQL_SUM_AGGREGATE_254INVENTORY1_entry se4183;
    CENSUS_entry se4184;
    __SQL_SUM_AGGREGATE_255INVENTORY1_entry se4186;
    CENSUS_entry se4187;
    __SQL_SUM_AGGREGATE_256INVENTORY1_entry se4189;
    CENSUS_entry se4190;
    __SQL_SUM_AGGREGATE_257INVENTORY1_entry se4192;
    CENSUS_entry se4193;
    __SQL_SUM_AGGREGATE_258INVENTORY1_entry se4195;
    CENSUS_entry se4196;
    __SQL_SUM_AGGREGATE_259INVENTORY1_entry se4198;
    CENSUS_entry se4199;
    __SQL_SUM_AGGREGATE_260INVENTORY1_entry se4201;
    CENSUS_entry se4202;
    __SQL_SUM_AGGREGATE_261INVENTORY1_entry se4204;
    CENSUS_entry se4205;
    __SQL_SUM_AGGREGATE_262INVENTORY1_entry se4207;
    CENSUS_entry se4208;
    __SQL_SUM_AGGREGATE_263INVENTORY1_entry se4210;
    CENSUS_entry se4211;
    __SQL_SUM_AGGREGATE_264INVENTORY1_entry se4213;
    CENSUS_entry se4214;
    __SQL_SUM_AGGREGATE_265INVENTORY1_entry se4216;
    CENSUS_entry se4217;
    __SQL_SUM_AGGREGATE_266INVENTORY1_entry se4219;
    CENSUS_entry se4220;
    __SQL_SUM_AGGREGATE_267INVENTORY1_entry se4222;
    CENSUS_entry se4223;
    __SQL_SUM_AGGREGATE_268INVENTORY1_entry se4225;
    CENSUS_entry se4226;
    __SQL_SUM_AGGREGATE_269INVENTORY1_entry se4228;
    CENSUS_entry se4229;
    __SQL_SUM_AGGREGATE_270INVENTORY1_entry se4231;
    CENSUS_entry se4232;
    __SQL_SUM_AGGREGATE_281INVENTORY1_entry se4244;
    CENSUS_entry se4245;
    __SQL_SUM_AGGREGATE_282INVENTORY1_entry se4247;
    CENSUS_entry se4248;
    __SQL_SUM_AGGREGATE_283INVENTORY1_entry se4250;
    CENSUS_entry se4251;
    __SQL_SUM_AGGREGATE_284INVENTORY1_entry se4253;
    CENSUS_entry se4254;
    __SQL_SUM_AGGREGATE_285INVENTORY1_entry se4256;
    CENSUS_entry se4257;
    __SQL_SUM_AGGREGATE_286INVENTORY1_entry se4259;
    CENSUS_entry se4260;
    __SQL_SUM_AGGREGATE_287INVENTORY1_entry se4262;
    CENSUS_entry se4263;
    __SQL_SUM_AGGREGATE_288INVENTORY1_entry se4265;
    CENSUS_entry se4266;
    __SQL_SUM_AGGREGATE_289INVENTORY1_entry se4268;
    CENSUS_entry se4269;
    __SQL_SUM_AGGREGATE_290INVENTORY1_entry se4271;
    CENSUS_entry se4272;
    __SQL_SUM_AGGREGATE_291INVENTORY1_entry se4274;
    CENSUS_entry se4275;
    __SQL_SUM_AGGREGATE_292INVENTORY1_entry se4277;
    CENSUS_entry se4278;
    __SQL_SUM_AGGREGATE_293INVENTORY1_entry se4280;
    CENSUS_entry se4281;
    __SQL_SUM_AGGREGATE_294INVENTORY1_entry se4283;
    CENSUS_entry se4284;
    __SQL_SUM_AGGREGATE_295INVENTORY1_entry se4286;
    CENSUS_entry se4287;
    __SQL_SUM_AGGREGATE_296INVENTORY1_entry se4289;
    CENSUS_entry se4290;
    __SQL_SUM_AGGREGATE_297INVENTORY1_entry se4292;
    CENSUS_entry se4293;
    __SQL_SUM_AGGREGATE_298INVENTORY1_entry se4295;
    CENSUS_entry se4296;
    __SQL_SUM_AGGREGATE_299INVENTORY1_entry se4298;
    CENSUS_entry se4299;
    __SQL_SUM_AGGREGATE_300INVENTORY1_entry se4301;
    CENSUS_entry se4302;
    __SQL_SUM_AGGREGATE_301INVENTORY1_entry se4304;
    CENSUS_entry se4305;
    __SQL_SUM_AGGREGATE_302INVENTORY1_entry se4307;
    CENSUS_entry se4308;
    __SQL_SUM_AGGREGATE_303INVENTORY1_entry se4310;
    CENSUS_entry se4311;
    __SQL_SUM_AGGREGATE_304INVENTORY1_entry se4313;
    CENSUS_entry se4314;
    __SQL_SUM_AGGREGATE_305INVENTORY1_entry se4316;
    CENSUS_entry se4317;
    __SQL_SUM_AGGREGATE_306INVENTORY1_entry se4319;
    CENSUS_entry se4320;
    __SQL_SUM_AGGREGATE_317INVENTORY1_entry se4332;
    CENSUS_entry se4333;
    __SQL_SUM_AGGREGATE_318INVENTORY1_entry se4335;
    CENSUS_entry se4336;
    __SQL_SUM_AGGREGATE_319INVENTORY1_entry se4338;
    CENSUS_entry se4339;
    __SQL_SUM_AGGREGATE_320INVENTORY1_entry se4341;
    CENSUS_entry se4342;
    __SQL_SUM_AGGREGATE_321INVENTORY1_entry se4344;
    CENSUS_entry se4345;
    __SQL_SUM_AGGREGATE_322INVENTORY1_entry se4347;
    CENSUS_entry se4348;
    __SQL_SUM_AGGREGATE_323INVENTORY1_entry se4350;
    CENSUS_entry se4351;
    __SQL_SUM_AGGREGATE_324INVENTORY1_entry se4353;
    CENSUS_entry se4354;
    __SQL_SUM_AGGREGATE_325INVENTORY1_entry se4356;
    CENSUS_entry se4357;
    __SQL_SUM_AGGREGATE_326INVENTORY1_entry se4359;
    CENSUS_entry se4360;
    __SQL_SUM_AGGREGATE_327INVENTORY1_entry se4362;
    CENSUS_entry se4363;
    __SQL_SUM_AGGREGATE_328INVENTORY1_entry se4365;
    CENSUS_entry se4366;
    __SQL_SUM_AGGREGATE_329INVENTORY1_entry se4368;
    CENSUS_entry se4369;
    __SQL_SUM_AGGREGATE_330INVENTORY1_entry se4371;
    CENSUS_entry se4372;
    __SQL_SUM_AGGREGATE_331INVENTORY1_entry se4374;
    CENSUS_entry se4375;
    __SQL_SUM_AGGREGATE_332INVENTORY1_entry se4377;
    CENSUS_entry se4378;
    __SQL_SUM_AGGREGATE_333INVENTORY1_entry se4380;
    CENSUS_entry se4381;
    __SQL_SUM_AGGREGATE_334INVENTORY1_entry se4383;
    CENSUS_entry se4384;
    __SQL_SUM_AGGREGATE_335INVENTORY1_entry se4386;
    CENSUS_entry se4387;
    __SQL_SUM_AGGREGATE_336INVENTORY1_entry se4389;
    CENSUS_entry se4390;
    __SQL_SUM_AGGREGATE_337INVENTORY1_entry se4392;
    CENSUS_entry se4393;
    __SQL_SUM_AGGREGATE_338INVENTORY1_entry se4395;
    CENSUS_entry se4396;
    __SQL_SUM_AGGREGATE_339INVENTORY1_entry se4398;
    CENSUS_entry se4399;
    __SQL_SUM_AGGREGATE_340INVENTORY1_entry se4401;
    CENSUS_entry se4402;
    __SQL_SUM_AGGREGATE_341INVENTORY1_entry se4404;
    CENSUS_entry se4405;
    __SQL_SUM_AGGREGATE_352INVENTORY1_entry se4417;
    CENSUS_entry se4418;
    __SQL_SUM_AGGREGATE_353INVENTORY1_entry se4420;
    CENSUS_entry se4421;
    __SQL_SUM_AGGREGATE_354INVENTORY1_entry se4423;
    CENSUS_entry se4424;
    __SQL_SUM_AGGREGATE_355INVENTORY1_entry se4426;
    CENSUS_entry se4427;
    __SQL_SUM_AGGREGATE_356INVENTORY1_entry se4429;
    CENSUS_entry se4430;
    __SQL_SUM_AGGREGATE_357INVENTORY1_entry se4432;
    CENSUS_entry se4433;
    __SQL_SUM_AGGREGATE_358INVENTORY1_entry se4435;
    CENSUS_entry se4436;
    __SQL_SUM_AGGREGATE_359INVENTORY1_entry se4438;
    CENSUS_entry se4439;
    __SQL_SUM_AGGREGATE_360INVENTORY1_entry se4441;
    CENSUS_entry se4442;
    __SQL_SUM_AGGREGATE_361INVENTORY1_entry se4444;
    CENSUS_entry se4445;
    __SQL_SUM_AGGREGATE_362INVENTORY1_entry se4447;
    CENSUS_entry se4448;
    __SQL_SUM_AGGREGATE_363INVENTORY1_entry se4450;
    CENSUS_entry se4451;
    __SQL_SUM_AGGREGATE_364INVENTORY1_entry se4453;
    CENSUS_entry se4454;
    __SQL_SUM_AGGREGATE_365INVENTORY1_entry se4456;
    CENSUS_entry se4457;
    __SQL_SUM_AGGREGATE_366INVENTORY1_entry se4459;
    CENSUS_entry se4460;
    __SQL_SUM_AGGREGATE_367INVENTORY1_entry se4462;
    CENSUS_entry se4463;
    __SQL_SUM_AGGREGATE_368INVENTORY1_entry se4465;
    CENSUS_entry se4466;
    __SQL_SUM_AGGREGATE_369INVENTORY1_entry se4468;
    CENSUS_entry se4469;
    __SQL_SUM_AGGREGATE_370INVENTORY1_entry se4471;
    CENSUS_entry se4472;
    __SQL_SUM_AGGREGATE_371INVENTORY1_entry se4474;
    CENSUS_entry se4475;
    __SQL_SUM_AGGREGATE_372INVENTORY1_entry se4477;
    CENSUS_entry se4478;
    __SQL_SUM_AGGREGATE_373INVENTORY1_entry se4480;
    CENSUS_entry se4481;
    __SQL_SUM_AGGREGATE_374INVENTORY1_entry se4483;
    CENSUS_entry se4484;
    __SQL_SUM_AGGREGATE_375INVENTORY1_entry se4486;
    CENSUS_entry se4487;
    __SQL_SUM_AGGREGATE_386INVENTORY1_entry se4499;
    CENSUS_entry se4500;
    __SQL_SUM_AGGREGATE_387INVENTORY1_entry se4502;
    CENSUS_entry se4503;
    __SQL_SUM_AGGREGATE_388INVENTORY1_entry se4505;
    CENSUS_entry se4506;
    __SQL_SUM_AGGREGATE_389INVENTORY1_entry se4508;
    CENSUS_entry se4509;
    __SQL_SUM_AGGREGATE_390INVENTORY1_entry se4511;
    CENSUS_entry se4512;
    __SQL_SUM_AGGREGATE_391INVENTORY1_entry se4514;
    CENSUS_entry se4515;
    __SQL_SUM_AGGREGATE_392INVENTORY1_entry se4517;
    CENSUS_entry se4518;
    __SQL_SUM_AGGREGATE_393INVENTORY1_entry se4520;
    CENSUS_entry se4521;
    __SQL_SUM_AGGREGATE_394INVENTORY1_entry se4523;
    CENSUS_entry se4524;
    __SQL_SUM_AGGREGATE_395INVENTORY1_entry se4526;
    CENSUS_entry se4527;
    __SQL_SUM_AGGREGATE_396INVENTORY1_entry se4529;
    CENSUS_entry se4530;
    __SQL_SUM_AGGREGATE_397INVENTORY1_entry se4532;
    CENSUS_entry se4533;
    __SQL_SUM_AGGREGATE_398INVENTORY1_entry se4535;
    CENSUS_entry se4536;
    __SQL_SUM_AGGREGATE_399INVENTORY1_entry se4538;
    CENSUS_entry se4539;
    __SQL_SUM_AGGREGATE_400INVENTORY1_entry se4541;
    CENSUS_entry se4542;
    __SQL_SUM_AGGREGATE_401INVENTORY1_entry se4544;
    CENSUS_entry se4545;
    __SQL_SUM_AGGREGATE_402INVENTORY1_entry se4547;
    CENSUS_entry se4548;
    __SQL_SUM_AGGREGATE_403INVENTORY1_entry se4550;
    CENSUS_entry se4551;
    __SQL_SUM_AGGREGATE_404INVENTORY1_entry se4553;
    CENSUS_entry se4554;
    __SQL_SUM_AGGREGATE_405INVENTORY1_entry se4556;
    CENSUS_entry se4557;
    __SQL_SUM_AGGREGATE_406INVENTORY1_entry se4559;
    CENSUS_entry se4560;
    __SQL_SUM_AGGREGATE_407INVENTORY1_entry se4562;
    CENSUS_entry se4563;
    __SQL_SUM_AGGREGATE_408INVENTORY1_entry se4565;
    CENSUS_entry se4566;
    __SQL_SUM_AGGREGATE_419INVENTORY1_entry se4578;
    CENSUS_entry se4579;
    __SQL_SUM_AGGREGATE_420INVENTORY1_entry se4581;
    CENSUS_entry se4582;
    __SQL_SUM_AGGREGATE_421INVENTORY1_entry se4584;
    CENSUS_entry se4585;
    __SQL_SUM_AGGREGATE_422INVENTORY1_entry se4587;
    CENSUS_entry se4588;
    __SQL_SUM_AGGREGATE_423INVENTORY1_entry se4590;
    CENSUS_entry se4591;
    __SQL_SUM_AGGREGATE_424INVENTORY1_entry se4593;
    CENSUS_entry se4594;
    __SQL_SUM_AGGREGATE_425INVENTORY1_entry se4596;
    CENSUS_entry se4597;
    __SQL_SUM_AGGREGATE_426INVENTORY1_entry se4599;
    CENSUS_entry se4600;
    __SQL_SUM_AGGREGATE_427INVENTORY1_entry se4602;
    CENSUS_entry se4603;
    __SQL_SUM_AGGREGATE_428INVENTORY1_entry se4605;
    CENSUS_entry se4606;
    __SQL_SUM_AGGREGATE_429INVENTORY1_entry se4608;
    CENSUS_entry se4609;
    __SQL_SUM_AGGREGATE_430INVENTORY1_entry se4611;
    CENSUS_entry se4612;
    __SQL_SUM_AGGREGATE_431INVENTORY1_entry se4614;
    CENSUS_entry se4615;
    __SQL_SUM_AGGREGATE_432INVENTORY1_entry se4617;
    CENSUS_entry se4618;
    __SQL_SUM_AGGREGATE_433INVENTORY1_entry se4620;
    CENSUS_entry se4621;
    __SQL_SUM_AGGREGATE_434INVENTORY1_entry se4623;
    CENSUS_entry se4624;
    __SQL_SUM_AGGREGATE_435INVENTORY1_entry se4626;
    CENSUS_entry se4627;
    __SQL_SUM_AGGREGATE_436INVENTORY1_entry se4629;
    CENSUS_entry se4630;
    __SQL_SUM_AGGREGATE_437INVENTORY1_entry se4632;
    CENSUS_entry se4633;
    __SQL_SUM_AGGREGATE_438INVENTORY1_entry se4635;
    CENSUS_entry se4636;
    __SQL_SUM_AGGREGATE_439INVENTORY1_entry se4638;
    CENSUS_entry se4639;
    __SQL_SUM_AGGREGATE_440INVENTORY1_entry se4641;
    CENSUS_entry se4642;
    __SQL_SUM_AGGREGATE_451INVENTORY1_entry se4654;
    CENSUS_entry se4655;
    __SQL_SUM_AGGREGATE_452INVENTORY1_entry se4657;
    CENSUS_entry se4658;
    __SQL_SUM_AGGREGATE_453INVENTORY1_entry se4660;
    CENSUS_entry se4661;
    __SQL_SUM_AGGREGATE_454INVENTORY1_entry se4663;
    CENSUS_entry se4664;
    __SQL_SUM_AGGREGATE_455INVENTORY1_entry se4666;
    CENSUS_entry se4667;
    __SQL_SUM_AGGREGATE_456INVENTORY1_entry se4669;
    CENSUS_entry se4670;
    __SQL_SUM_AGGREGATE_457INVENTORY1_entry se4672;
    CENSUS_entry se4673;
    __SQL_SUM_AGGREGATE_458INVENTORY1_entry se4675;
    CENSUS_entry se4676;
    __SQL_SUM_AGGREGATE_459INVENTORY1_entry se4678;
    CENSUS_entry se4679;
    __SQL_SUM_AGGREGATE_460INVENTORY1_entry se4681;
    CENSUS_entry se4682;
    __SQL_SUM_AGGREGATE_461INVENTORY1_entry se4684;
    CENSUS_entry se4685;
    __SQL_SUM_AGGREGATE_462INVENTORY1_entry se4687;
    CENSUS_entry se4688;
    __SQL_SUM_AGGREGATE_463INVENTORY1_entry se4690;
    CENSUS_entry se4691;
    __SQL_SUM_AGGREGATE_464INVENTORY1_entry se4693;
    CENSUS_entry se4694;
    __SQL_SUM_AGGREGATE_465INVENTORY1_entry se4696;
    CENSUS_entry se4697;
    __SQL_SUM_AGGREGATE_466INVENTORY1_entry se4699;
    CENSUS_entry se4700;
    __SQL_SUM_AGGREGATE_467INVENTORY1_entry se4702;
    CENSUS_entry se4703;
    __SQL_SUM_AGGREGATE_468INVENTORY1_entry se4705;
    CENSUS_entry se4706;
    __SQL_SUM_AGGREGATE_469INVENTORY1_entry se4708;
    CENSUS_entry se4709;
    __SQL_SUM_AGGREGATE_470INVENTORY1_entry se4711;
    CENSUS_entry se4712;
    __SQL_SUM_AGGREGATE_471INVENTORY1_entry se4714;
    CENSUS_entry se4715;
    __SQL_SUM_AGGREGATE_482INVENTORY1_entry se4727;
    CENSUS_entry se4728;
    __SQL_SUM_AGGREGATE_483INVENTORY1_entry se4730;
    CENSUS_entry se4731;
    __SQL_SUM_AGGREGATE_484INVENTORY1_entry se4733;
    CENSUS_entry se4734;
    __SQL_SUM_AGGREGATE_485INVENTORY1_entry se4736;
    CENSUS_entry se4737;
    __SQL_SUM_AGGREGATE_486INVENTORY1_entry se4739;
    CENSUS_entry se4740;
    __SQL_SUM_AGGREGATE_487INVENTORY1_entry se4742;
    CENSUS_entry se4743;
    __SQL_SUM_AGGREGATE_488INVENTORY1_entry se4745;
    CENSUS_entry se4746;
    __SQL_SUM_AGGREGATE_489INVENTORY1_entry se4748;
    CENSUS_entry se4749;
    __SQL_SUM_AGGREGATE_490INVENTORY1_entry se4751;
    CENSUS_entry se4752;
    __SQL_SUM_AGGREGATE_491INVENTORY1_entry se4754;
    CENSUS_entry se4755;
    __SQL_SUM_AGGREGATE_492INVENTORY1_entry se4757;
    CENSUS_entry se4758;
    __SQL_SUM_AGGREGATE_493INVENTORY1_entry se4760;
    CENSUS_entry se4761;
    __SQL_SUM_AGGREGATE_494INVENTORY1_entry se4763;
    CENSUS_entry se4764;
    __SQL_SUM_AGGREGATE_495INVENTORY1_entry se4766;
    CENSUS_entry se4767;
    __SQL_SUM_AGGREGATE_496INVENTORY1_entry se4769;
    CENSUS_entry se4770;
    __SQL_SUM_AGGREGATE_497INVENTORY1_entry se4772;
    CENSUS_entry se4773;
    __SQL_SUM_AGGREGATE_498INVENTORY1_entry se4775;
    CENSUS_entry se4776;
    __SQL_SUM_AGGREGATE_499INVENTORY1_entry se4778;
    CENSUS_entry se4779;
    __SQL_SUM_AGGREGATE_500INVENTORY1_entry se4781;
    CENSUS_entry se4782;
    __SQL_SUM_AGGREGATE_501INVENTORY1_entry se4784;
    CENSUS_entry se4785;
    __SQL_SUM_AGGREGATE_512INVENTORY1_entry se4797;
    CENSUS_entry se4798;
    __SQL_SUM_AGGREGATE_513INVENTORY1_entry se4800;
    CENSUS_entry se4801;
    __SQL_SUM_AGGREGATE_514INVENTORY1_entry se4803;
    CENSUS_entry se4804;
    __SQL_SUM_AGGREGATE_515INVENTORY1_entry se4806;
    CENSUS_entry se4807;
    __SQL_SUM_AGGREGATE_516INVENTORY1_entry se4809;
    CENSUS_entry se4810;
    __SQL_SUM_AGGREGATE_517INVENTORY1_entry se4812;
    CENSUS_entry se4813;
    __SQL_SUM_AGGREGATE_518INVENTORY1_entry se4815;
    CENSUS_entry se4816;
    __SQL_SUM_AGGREGATE_519INVENTORY1_entry se4818;
    CENSUS_entry se4819;
    __SQL_SUM_AGGREGATE_520INVENTORY1_entry se4821;
    CENSUS_entry se4822;
    __SQL_SUM_AGGREGATE_521INVENTORY1_entry se4824;
    CENSUS_entry se4825;
    __SQL_SUM_AGGREGATE_522INVENTORY1_entry se4827;
    CENSUS_entry se4828;
    __SQL_SUM_AGGREGATE_523INVENTORY1_entry se4830;
    CENSUS_entry se4831;
    __SQL_SUM_AGGREGATE_524INVENTORY1_entry se4833;
    CENSUS_entry se4834;
    __SQL_SUM_AGGREGATE_525INVENTORY1_entry se4836;
    CENSUS_entry se4837;
    __SQL_SUM_AGGREGATE_526INVENTORY1_entry se4839;
    CENSUS_entry se4840;
    __SQL_SUM_AGGREGATE_527INVENTORY1_entry se4842;
    CENSUS_entry se4843;
    __SQL_SUM_AGGREGATE_528INVENTORY1_entry se4845;
    CENSUS_entry se4846;
    __SQL_SUM_AGGREGATE_529INVENTORY1_entry se4848;
    CENSUS_entry se4849;
    __SQL_SUM_AGGREGATE_530INVENTORY1_entry se4851;
    CENSUS_entry se4852;
    __SQL_SUM_AGGREGATE_541INVENTORY1_entry se4864;
    CENSUS_entry se4865;
    __SQL_SUM_AGGREGATE_542INVENTORY1_entry se4867;
    CENSUS_entry se4868;
    __SQL_SUM_AGGREGATE_543INVENTORY1_entry se4870;
    CENSUS_entry se4871;
    __SQL_SUM_AGGREGATE_544INVENTORY1_entry se4873;
    CENSUS_entry se4874;
    __SQL_SUM_AGGREGATE_545INVENTORY1_entry se4876;
    CENSUS_entry se4877;
    __SQL_SUM_AGGREGATE_546INVENTORY1_entry se4879;
    CENSUS_entry se4880;
    __SQL_SUM_AGGREGATE_547INVENTORY1_entry se4882;
    CENSUS_entry se4883;
    __SQL_SUM_AGGREGATE_548INVENTORY1_entry se4885;
    CENSUS_entry se4886;
    __SQL_SUM_AGGREGATE_549INVENTORY1_entry se4888;
    CENSUS_entry se4889;
    __SQL_SUM_AGGREGATE_550INVENTORY1_entry se4891;
    CENSUS_entry se4892;
    __SQL_SUM_AGGREGATE_551INVENTORY1_entry se4894;
    CENSUS_entry se4895;
    __SQL_SUM_AGGREGATE_552INVENTORY1_entry se4897;
    CENSUS_entry se4898;
    __SQL_SUM_AGGREGATE_553INVENTORY1_entry se4900;
    CENSUS_entry se4901;
    __SQL_SUM_AGGREGATE_554INVENTORY1_entry se4903;
    CENSUS_entry se4904;
    __SQL_SUM_AGGREGATE_555INVENTORY1_entry se4906;
    CENSUS_entry se4907;
    __SQL_SUM_AGGREGATE_556INVENTORY1_entry se4909;
    CENSUS_entry se4910;
    __SQL_SUM_AGGREGATE_557INVENTORY1_entry se4912;
    CENSUS_entry se4913;
    __SQL_SUM_AGGREGATE_558INVENTORY1_entry se4915;
    CENSUS_entry se4916;
    __SQL_SUM_AGGREGATE_569INVENTORY1_entry se4928;
    CENSUS_entry se4929;
    __SQL_SUM_AGGREGATE_570INVENTORY1_entry se4931;
    CENSUS_entry se4932;
    __SQL_SUM_AGGREGATE_571INVENTORY1_entry se4934;
    CENSUS_entry se4935;
    __SQL_SUM_AGGREGATE_572INVENTORY1_entry se4937;
    CENSUS_entry se4938;
    __SQL_SUM_AGGREGATE_573INVENTORY1_entry se4940;
    CENSUS_entry se4941;
    __SQL_SUM_AGGREGATE_574INVENTORY1_entry se4943;
    CENSUS_entry se4944;
    __SQL_SUM_AGGREGATE_575INVENTORY1_entry se4946;
    CENSUS_entry se4947;
    __SQL_SUM_AGGREGATE_576INVENTORY1_entry se4949;
    CENSUS_entry se4950;
    __SQL_SUM_AGGREGATE_577INVENTORY1_entry se4952;
    CENSUS_entry se4953;
    __SQL_SUM_AGGREGATE_578INVENTORY1_entry se4955;
    CENSUS_entry se4956;
    __SQL_SUM_AGGREGATE_579INVENTORY1_entry se4958;
    CENSUS_entry se4959;
    __SQL_SUM_AGGREGATE_580INVENTORY1_entry se4961;
    CENSUS_entry se4962;
    __SQL_SUM_AGGREGATE_581INVENTORY1_entry se4964;
    CENSUS_entry se4965;
    __SQL_SUM_AGGREGATE_582INVENTORY1_entry se4967;
    CENSUS_entry se4968;
    __SQL_SUM_AGGREGATE_583INVENTORY1_entry se4970;
    CENSUS_entry se4971;
    __SQL_SUM_AGGREGATE_584INVENTORY1_entry se4973;
    CENSUS_entry se4974;
    __SQL_SUM_AGGREGATE_585INVENTORY1_entry se4976;
    CENSUS_entry se4977;
    __SQL_SUM_AGGREGATE_596INVENTORY1_entry se4989;
    CENSUS_entry se4990;
    __SQL_SUM_AGGREGATE_597INVENTORY1_entry se4992;
    CENSUS_entry se4993;
    __SQL_SUM_AGGREGATE_598INVENTORY1_entry se4995;
    CENSUS_entry se4996;
    __SQL_SUM_AGGREGATE_599INVENTORY1_entry se4998;
    CENSUS_entry se4999;
    __SQL_SUM_AGGREGATE_600INVENTORY1_entry se5001;
    CENSUS_entry se5002;
    __SQL_SUM_AGGREGATE_601INVENTORY1_entry se5004;
    CENSUS_entry se5005;
    __SQL_SUM_AGGREGATE_602INVENTORY1_entry se5007;
    CENSUS_entry se5008;
    __SQL_SUM_AGGREGATE_603INVENTORY1_entry se5010;
    CENSUS_entry se5011;
    __SQL_SUM_AGGREGATE_604INVENTORY1_entry se5013;
    CENSUS_entry se5014;
    __SQL_SUM_AGGREGATE_605INVENTORY1_entry se5016;
    CENSUS_entry se5017;
    __SQL_SUM_AGGREGATE_606INVENTORY1_entry se5019;
    CENSUS_entry se5020;
    __SQL_SUM_AGGREGATE_607INVENTORY1_entry se5022;
    CENSUS_entry se5023;
    __SQL_SUM_AGGREGATE_608INVENTORY1_entry se5025;
    CENSUS_entry se5026;
    __SQL_SUM_AGGREGATE_609INVENTORY1_entry se5028;
    CENSUS_entry se5029;
    __SQL_SUM_AGGREGATE_610INVENTORY1_entry se5031;
    CENSUS_entry se5032;
    __SQL_SUM_AGGREGATE_611INVENTORY1_entry se5034;
    CENSUS_entry se5035;
    __SQL_SUM_AGGREGATE_622INVENTORY1_entry se5046;
    CENSUS_entry se5047;
    __SQL_SUM_AGGREGATE_623INVENTORY1_entry se5048;
    CENSUS_entry se5049;
    __SQL_SUM_AGGREGATE_624INVENTORY1_entry se5050;
    CENSUS_entry se5051;
    __SQL_SUM_AGGREGATE_625INVENTORY1_entry se5052;
    CENSUS_entry se5053;
    __SQL_SUM_AGGREGATE_626INVENTORY1_entry se5054;
    CENSUS_entry se5055;
    __SQL_SUM_AGGREGATE_627INVENTORY1_entry se5057;
    CENSUS_entry se5058;
    __SQL_SUM_AGGREGATE_628INVENTORY1_entry se5059;
    CENSUS_entry se5060;
    __SQL_SUM_AGGREGATE_629INVENTORY1_entry se5061;
    CENSUS_entry se5062;
    __SQL_SUM_AGGREGATE_630INVENTORY1_entry se5063;
    CENSUS_entry se5064;
    __SQL_SUM_AGGREGATE_631INVENTORY1_entry se5065;
    CENSUS_entry se5066;
    __SQL_SUM_AGGREGATE_632INVENTORY1_entry se5067;
    CENSUS_entry se5068;
    __SQL_SUM_AGGREGATE_633INVENTORY1_entry se5069;
    CENSUS_entry se5070;
    __SQL_SUM_AGGREGATE_634INVENTORY1_entry se5071;
    CENSUS_entry se5072;
    __SQL_SUM_AGGREGATE_635INVENTORY1_entry se5073;
    CENSUS_entry se5074;
    __SQL_SUM_AGGREGATE_636INVENTORY1_entry se5075;
    CENSUS_entry se5076;
    __SQL_SUM_AGGREGATE_647INVENTORY1_entry se5079;
    CENSUS_entry se5080;
    __SQL_SUM_AGGREGATE_648INVENTORY1_entry se5081;
    CENSUS_entry se5082;
    __SQL_SUM_AGGREGATE_649INVENTORY1_entry se5083;
    CENSUS_entry se5084;
    __SQL_SUM_AGGREGATE_650INVENTORY1_entry se5085;
    CENSUS_entry se5086;
    __SQL_SUM_AGGREGATE_651INVENTORY1_entry se5088;
    CENSUS_entry se5089;
    __SQL_SUM_AGGREGATE_652INVENTORY1_entry se5090;
    CENSUS_entry se5091;
    __SQL_SUM_AGGREGATE_653INVENTORY1_entry se5092;
    CENSUS_entry se5093;
    __SQL_SUM_AGGREGATE_654INVENTORY1_entry se5094;
    CENSUS_entry se5095;
    __SQL_SUM_AGGREGATE_655INVENTORY1_entry se5096;
    CENSUS_entry se5097;
    __SQL_SUM_AGGREGATE_656INVENTORY1_entry se5098;
    CENSUS_entry se5099;
    __SQL_SUM_AGGREGATE_657INVENTORY1_entry se5100;
    CENSUS_entry se5101;
    __SQL_SUM_AGGREGATE_658INVENTORY1_entry se5102;
    CENSUS_entry se5103;
    __SQL_SUM_AGGREGATE_659INVENTORY1_entry se5104;
    CENSUS_entry se5105;
    __SQL_SUM_AGGREGATE_660INVENTORY1_entry se5106;
    CENSUS_entry se5107;
    __SQL_SUM_AGGREGATE_671INVENTORY1_entry se5110;
    CENSUS_entry se5111;
    __SQL_SUM_AGGREGATE_672INVENTORY1_entry se5112;
    CENSUS_entry se5113;
    __SQL_SUM_AGGREGATE_673INVENTORY1_entry se5114;
    CENSUS_entry se5115;
    __SQL_SUM_AGGREGATE_674INVENTORY1_entry se5117;
    CENSUS_entry se5118;
    __SQL_SUM_AGGREGATE_675INVENTORY1_entry se5119;
    CENSUS_entry se5120;
    __SQL_SUM_AGGREGATE_676INVENTORY1_entry se5121;
    CENSUS_entry se5122;
    __SQL_SUM_AGGREGATE_677INVENTORY1_entry se5123;
    CENSUS_entry se5124;
    __SQL_SUM_AGGREGATE_678INVENTORY1_entry se5125;
    CENSUS_entry se5126;
    __SQL_SUM_AGGREGATE_679INVENTORY1_entry se5127;
    CENSUS_entry se5128;
    __SQL_SUM_AGGREGATE_680INVENTORY1_entry se5129;
    CENSUS_entry se5130;
    __SQL_SUM_AGGREGATE_681INVENTORY1_entry se5131;
    CENSUS_entry se5132;
    __SQL_SUM_AGGREGATE_682INVENTORY1_entry se5133;
    CENSUS_entry se5134;
    __SQL_SUM_AGGREGATE_683INVENTORY1_entry se5135;
    CENSUS_entry se5136;
    __SQL_SUM_AGGREGATE_694INVENTORY1_entry se5139;
    CENSUS_entry se5140;
    __SQL_SUM_AGGREGATE_695INVENTORY1_entry se5141;
    CENSUS_entry se5142;
    __SQL_SUM_AGGREGATE_696INVENTORY1_entry se5144;
    CENSUS_entry se5145;
    __SQL_SUM_AGGREGATE_697INVENTORY1_entry se5146;
    CENSUS_entry se5147;
    __SQL_SUM_AGGREGATE_698INVENTORY1_entry se5148;
    CENSUS_entry se5149;
    __SQL_SUM_AGGREGATE_699INVENTORY1_entry se5150;
    CENSUS_entry se5151;
    __SQL_SUM_AGGREGATE_700INVENTORY1_entry se5152;
    CENSUS_entry se5153;
    __SQL_SUM_AGGREGATE_701INVENTORY1_entry se5154;
    CENSUS_entry se5155;
    __SQL_SUM_AGGREGATE_702INVENTORY1_entry se5156;
    CENSUS_entry se5157;
    __SQL_SUM_AGGREGATE_703INVENTORY1_entry se5158;
    CENSUS_entry se5159;
    __SQL_SUM_AGGREGATE_704INVENTORY1_entry se5160;
    CENSUS_entry se5161;
    __SQL_SUM_AGGREGATE_705INVENTORY1_entry se5162;
    CENSUS_entry se5163;
    __SQL_SUM_AGGREGATE_716INVENTORY1_entry se5166;
    CENSUS_entry se5167;
    __SQL_SUM_AGGREGATE_717INVENTORY1_entry se5169;
    CENSUS_entry se5170;
    __SQL_SUM_AGGREGATE_718INVENTORY1_entry se5171;
    CENSUS_entry se5172;
    __SQL_SUM_AGGREGATE_719INVENTORY1_entry se5173;
    CENSUS_entry se5174;
    __SQL_SUM_AGGREGATE_720INVENTORY1_entry se5175;
    CENSUS_entry se5176;
    __SQL_SUM_AGGREGATE_721INVENTORY1_entry se5177;
    CENSUS_entry se5178;
    __SQL_SUM_AGGREGATE_722INVENTORY1_entry se5179;
    CENSUS_entry se5180;
    __SQL_SUM_AGGREGATE_723INVENTORY1_entry se5181;
    CENSUS_entry se5182;
    __SQL_SUM_AGGREGATE_724INVENTORY1_entry se5183;
    CENSUS_entry se5184;
    __SQL_SUM_AGGREGATE_725INVENTORY1_entry se5185;
    CENSUS_entry se5186;
    __SQL_SUM_AGGREGATE_726INVENTORY1_entry se5187;
    CENSUS_entry se5188;
    __SQL_SUM_AGGREGATE_737INVENTORY1_entry se5192;
    CENSUS_entry se5193;
    __SQL_SUM_AGGREGATE_738INVENTORY1_entry se5195;
    CENSUS_entry se5196;
    __SQL_SUM_AGGREGATE_739INVENTORY1_entry se5198;
    CENSUS_entry se5199;
    __SQL_SUM_AGGREGATE_740INVENTORY1_entry se5201;
    CENSUS_entry se5202;
    __SQL_SUM_AGGREGATE_741INVENTORY1_entry se5204;
    CENSUS_entry se5205;
    __SQL_SUM_AGGREGATE_742INVENTORY1_entry se5207;
    CENSUS_entry se5208;
    __SQL_SUM_AGGREGATE_743INVENTORY1_entry se5210;
    CENSUS_entry se5211;
    __SQL_SUM_AGGREGATE_744INVENTORY1_entry se5213;
    CENSUS_entry se5214;
    __SQL_SUM_AGGREGATE_745INVENTORY1_entry se5216;
    CENSUS_entry se5217;
    __SQL_SUM_AGGREGATE_746INVENTORY1_entry se5219;
    CENSUS_entry se5220;
    __SQL_SUM_AGGREGATE_757INVENTORY1_entry se5231;
    CENSUS_entry se5232;
    __SQL_SUM_AGGREGATE_758INVENTORY1_entry se5233;
    CENSUS_entry se5234;
    __SQL_SUM_AGGREGATE_759INVENTORY1_entry se5235;
    CENSUS_entry se5236;
    __SQL_SUM_AGGREGATE_760INVENTORY1_entry se5237;
    CENSUS_entry se5238;
    __SQL_SUM_AGGREGATE_761INVENTORY1_entry se5239;
    CENSUS_entry se5240;
    __SQL_SUM_AGGREGATE_762INVENTORY1_entry se5241;
    CENSUS_entry se5242;
    __SQL_SUM_AGGREGATE_763INVENTORY1_entry se5243;
    CENSUS_entry se5244;
    __SQL_SUM_AGGREGATE_764INVENTORY1_entry se5245;
    CENSUS_entry se5246;
    __SQL_SUM_AGGREGATE_765INVENTORY1_entry se5247;
    CENSUS_entry se5248;
    __SQL_SUM_AGGREGATE_776INVENTORY1_entry se5251;
    CENSUS_entry se5252;
    __SQL_SUM_AGGREGATE_777INVENTORY1_entry se5253;
    CENSUS_entry se5254;
    __SQL_SUM_AGGREGATE_778INVENTORY1_entry se5255;
    CENSUS_entry se5256;
    __SQL_SUM_AGGREGATE_779INVENTORY1_entry se5257;
    CENSUS_entry se5258;
    __SQL_SUM_AGGREGATE_780INVENTORY1_entry se5259;
    CENSUS_entry se5260;
    __SQL_SUM_AGGREGATE_781INVENTORY1_entry se5261;
    CENSUS_entry se5262;
    __SQL_SUM_AGGREGATE_782INVENTORY1_entry se5263;
    CENSUS_entry se5264;
    __SQL_SUM_AGGREGATE_783INVENTORY1_entry se5265;
    CENSUS_entry se5266;
    __SQL_SUM_AGGREGATE_794INVENTORY1_entry se5269;
    CENSUS_entry se5270;
    __SQL_SUM_AGGREGATE_795INVENTORY1_entry se5271;
    CENSUS_entry se5272;
    __SQL_SUM_AGGREGATE_796INVENTORY1_entry se5273;
    CENSUS_entry se5274;
    __SQL_SUM_AGGREGATE_797INVENTORY1_entry se5275;
    CENSUS_entry se5276;
    __SQL_SUM_AGGREGATE_798INVENTORY1_entry se5277;
    CENSUS_entry se5278;
    __SQL_SUM_AGGREGATE_799INVENTORY1_entry se5279;
    CENSUS_entry se5280;
    __SQL_SUM_AGGREGATE_800INVENTORY1_entry se5281;
    CENSUS_entry se5282;
    __SQL_SUM_AGGREGATE_811INVENTORY1_entry se5285;
    CENSUS_entry se5286;
    __SQL_SUM_AGGREGATE_812INVENTORY1_entry se5287;
    CENSUS_entry se5288;
    __SQL_SUM_AGGREGATE_813INVENTORY1_entry se5289;
    CENSUS_entry se5290;
    __SQL_SUM_AGGREGATE_814INVENTORY1_entry se5291;
    CENSUS_entry se5292;
    __SQL_SUM_AGGREGATE_815INVENTORY1_entry se5293;
    CENSUS_entry se5294;
    __SQL_SUM_AGGREGATE_816INVENTORY1_entry se5295;
    CENSUS_entry se5296;
    __SQL_SUM_AGGREGATE_827INVENTORY1_entry se5299;
    CENSUS_entry se5300;
    __SQL_SUM_AGGREGATE_828INVENTORY1_entry se5301;
    CENSUS_entry se5302;
    __SQL_SUM_AGGREGATE_829INVENTORY1_entry se5303;
    CENSUS_entry se5304;
    __SQL_SUM_AGGREGATE_830INVENTORY1_entry se5305;
    CENSUS_entry se5306;
    __SQL_SUM_AGGREGATE_831INVENTORY1_entry se5307;
    CENSUS_entry se5308;
    __SQL_SUM_AGGREGATE_842INVENTORY1_entry se5311;
    CENSUS_entry se5312;
    __SQL_SUM_AGGREGATE_843INVENTORY1_entry se5313;
    CENSUS_entry se5314;
    __SQL_SUM_AGGREGATE_844INVENTORY1_entry se5315;
    CENSUS_entry se5316;
    __SQL_SUM_AGGREGATE_845INVENTORY1_entry se5317;
    CENSUS_entry se5318;
    __SQL_SUM_AGGREGATE_856INVENTORY1_entry se5321;
    CENSUS_entry se5322;
    __SQL_SUM_AGGREGATE_857INVENTORY1_entry se5323;
    CENSUS_entry se5324;
    __SQL_SUM_AGGREGATE_858INVENTORY1_entry se5325;
    CENSUS_entry se5326;
    __SQL_SUM_AGGREGATE_869INVENTORY1_entry se5329;
    CENSUS_entry se5330;
    __SQL_SUM_AGGREGATE_870INVENTORY1_entry se5331;
    CENSUS_entry se5332;
    __SQL_SUM_AGGREGATE_881INVENTORY1_entry se5335;
    CENSUS_entry se5336;
    __SQL_SUM_AGGREGATE_892INVENTORY2_entry se5339;
    __SQL_SUM_AGGREGATE_893INVENTORY2_entry se5340;
    __SQL_SUM_AGGREGATE_894INVENTORY2_entry se5341;
    __SQL_SUM_AGGREGATE_895INVENTORY2_entry se5343;
    __SQL_SUM_AGGREGATE_902INVENTORY2_entry se5345;
    __SQL_SUM_AGGREGATE_903INVENTORY2_entry se5346;
    __SQL_SUM_AGGREGATE_904INVENTORY2_entry se5348;
    __SQL_SUM_AGGREGATE_911INVENTORY2_entry se5350;
    __SQL_SUM_AGGREGATE_912INVENTORY2_entry se5352;
    __SQL_SUM_AGGREGATE_919INVENTORY2_entry se5355;
    __SQL_SUM_AGGREGATE_926INVENTORY3_entry se5362;
    __SQL_SUM_AGGREGATE_927INVENTORY3_entry se5363;
    __SQL_SUM_AGGREGATE_928INVENTORY3_entry se5364;
    __SQL_SUM_AGGREGATE_929INVENTORY3_entry se5365;
    __SQL_SUM_AGGREGATE_930INVENTORY3_entry se5367;
    __SQL_SUM_AGGREGATE_931INVENTORY3_entry se5368;
    __SQL_SUM_AGGREGATE_932INVENTORY3_entry se5369;
    __SQL_SUM_AGGREGATE_933INVENTORY3_entry se5370;
    __SQL_SUM_AGGREGATE_934INVENTORY3_entry se5371;
    __SQL_SUM_AGGREGATE_935INVENTORY3_entry se5373;
    __SQL_SUM_AGGREGATE_936INVENTORY3_entry se5374;
    __SQL_SUM_AGGREGATE_937INVENTORY3_entry se5375;
    __SQL_SUM_AGGREGATE_938INVENTORY3_entry se5376;
    __SQL_SUM_AGGREGATE_939INVENTORY3_entry se5378;
    __SQL_SUM_AGGREGATE_940INVENTORY3_entry se5379;
    __SQL_SUM_AGGREGATE_941INVENTORY3_entry se5380;
    __SQL_SUM_AGGREGATE_942INVENTORY3_entry se5382;
    __SQL_SUM_AGGREGATE_943INVENTORY3_entry se5383;
    __SQL_SUM_AGGREGATE_944INVENTORY3_entry se5385;
    __SQL_SUM_AGGREGATE_945INVENTORY3_entry se5387;
    __SQL_SUM_AGGREGATE_946INVENTORY3_entry se5388;
  
    /* Data structures used for storing materialized views */
    LOCATION_map LOCATION;
    CENSUS_map CENSUS;
    ITEM_map ITEM;
    WEATHER_map WEATHER;
    __SQL_SUM_AGGREGATE_1INVENTORY1_map __SQL_SUM_AGGREGATE_1INVENTORY1;
    __SQL_SUM_AGGREGATE_1INVENTORY2_map __SQL_SUM_AGGREGATE_1INVENTORY2;
    __SQL_SUM_AGGREGATE_1INVENTORY3_map __SQL_SUM_AGGREGATE_1INVENTORY3;
    __SQL_SUM_AGGREGATE_5INVENTORY1_map __SQL_SUM_AGGREGATE_5INVENTORY1;
    __SQL_SUM_AGGREGATE_6INVENTORY1_map __SQL_SUM_AGGREGATE_6INVENTORY1;
    __SQL_SUM_AGGREGATE_7INVENTORY1_map __SQL_SUM_AGGREGATE_7INVENTORY1;
    __SQL_SUM_AGGREGATE_8INVENTORY1_map __SQL_SUM_AGGREGATE_8INVENTORY1;
    __SQL_SUM_AGGREGATE_9INVENTORY1_map __SQL_SUM_AGGREGATE_9INVENTORY1;
    __SQL_SUM_AGGREGATE_10INVENTORY1_map __SQL_SUM_AGGREGATE_10INVENTORY1;
    __SQL_SUM_AGGREGATE_11INVENTORY1_map __SQL_SUM_AGGREGATE_11INVENTORY1;
    __SQL_SUM_AGGREGATE_12INVENTORY1_map __SQL_SUM_AGGREGATE_12INVENTORY1;
    __SQL_SUM_AGGREGATE_13INVENTORY1_map __SQL_SUM_AGGREGATE_13INVENTORY1;
    __SQL_SUM_AGGREGATE_14INVENTORY1_map __SQL_SUM_AGGREGATE_14INVENTORY1;
    __SQL_SUM_AGGREGATE_15INVENTORY1_map __SQL_SUM_AGGREGATE_15INVENTORY1;
    __SQL_SUM_AGGREGATE_16INVENTORY1_map __SQL_SUM_AGGREGATE_16INVENTORY1;
    __SQL_SUM_AGGREGATE_17INVENTORY1_map __SQL_SUM_AGGREGATE_17INVENTORY1;
    __SQL_SUM_AGGREGATE_18INVENTORY1_map __SQL_SUM_AGGREGATE_18INVENTORY1;
    __SQL_SUM_AGGREGATE_19INVENTORY1_map __SQL_SUM_AGGREGATE_19INVENTORY1;
    __SQL_SUM_AGGREGATE_20INVENTORY1_map __SQL_SUM_AGGREGATE_20INVENTORY1;
    __SQL_SUM_AGGREGATE_21INVENTORY1_map __SQL_SUM_AGGREGATE_21INVENTORY1;
    __SQL_SUM_AGGREGATE_22INVENTORY1_map __SQL_SUM_AGGREGATE_22INVENTORY1;
    __SQL_SUM_AGGREGATE_23INVENTORY1_map __SQL_SUM_AGGREGATE_23INVENTORY1;
    __SQL_SUM_AGGREGATE_24INVENTORY1_map __SQL_SUM_AGGREGATE_24INVENTORY1;
    __SQL_SUM_AGGREGATE_25INVENTORY1_map __SQL_SUM_AGGREGATE_25INVENTORY1;
    __SQL_SUM_AGGREGATE_26INVENTORY1_map __SQL_SUM_AGGREGATE_26INVENTORY1;
    __SQL_SUM_AGGREGATE_27INVENTORY1_map __SQL_SUM_AGGREGATE_27INVENTORY1;
    __SQL_SUM_AGGREGATE_28INVENTORY1_map __SQL_SUM_AGGREGATE_28INVENTORY1;
    __SQL_SUM_AGGREGATE_29INVENTORY1_map __SQL_SUM_AGGREGATE_29INVENTORY1;
    __SQL_SUM_AGGREGATE_30INVENTORY1_map __SQL_SUM_AGGREGATE_30INVENTORY1;
    __SQL_SUM_AGGREGATE_31INVENTORY1_map __SQL_SUM_AGGREGATE_31INVENTORY1;
    __SQL_SUM_AGGREGATE_32INVENTORY1_map __SQL_SUM_AGGREGATE_32INVENTORY1;
    __SQL_SUM_AGGREGATE_33INVENTORY1_map __SQL_SUM_AGGREGATE_33INVENTORY1;
    __SQL_SUM_AGGREGATE_34INVENTORY2_map __SQL_SUM_AGGREGATE_34INVENTORY2;
    __SQL_SUM_AGGREGATE_35INVENTORY2_map __SQL_SUM_AGGREGATE_35INVENTORY2;
    __SQL_SUM_AGGREGATE_36INVENTORY2_map __SQL_SUM_AGGREGATE_36INVENTORY2;
    __SQL_SUM_AGGREGATE_37INVENTORY2_map __SQL_SUM_AGGREGATE_37INVENTORY2;
    __SQL_SUM_AGGREGATE_38INVENTORY3_map __SQL_SUM_AGGREGATE_38INVENTORY3;
    __SQL_SUM_AGGREGATE_39INVENTORY3_map __SQL_SUM_AGGREGATE_39INVENTORY3;
    __SQL_SUM_AGGREGATE_40INVENTORY3_map __SQL_SUM_AGGREGATE_40INVENTORY3;
    __SQL_SUM_AGGREGATE_41INVENTORY3_map __SQL_SUM_AGGREGATE_41INVENTORY3;
    __SQL_SUM_AGGREGATE_42INVENTORY3_map __SQL_SUM_AGGREGATE_42INVENTORY3;
    __SQL_SUM_AGGREGATE_43INVENTORY3_map __SQL_SUM_AGGREGATE_43INVENTORY3;
    __SQL_SUM_AGGREGATE_121INVENTORY3_map __SQL_SUM_AGGREGATE_121INVENTORY3;
    __SQL_SUM_AGGREGATE_122INVENTORY3_map __SQL_SUM_AGGREGATE_122INVENTORY3;
    __SQL_SUM_AGGREGATE_123INVENTORY3_map __SQL_SUM_AGGREGATE_123INVENTORY3;
    __SQL_SUM_AGGREGATE_124INVENTORY3_map __SQL_SUM_AGGREGATE_124INVENTORY3;
    __SQL_SUM_AGGREGATE_125INVENTORY3_map __SQL_SUM_AGGREGATE_125INVENTORY3;
    __SQL_SUM_AGGREGATE_126INVENTORY3_map __SQL_SUM_AGGREGATE_126INVENTORY3;
    __SQL_SUM_AGGREGATE_157INVENTORY2_map __SQL_SUM_AGGREGATE_157INVENTORY2;
    __SQL_SUM_AGGREGATE_158INVENTORY2_map __SQL_SUM_AGGREGATE_158INVENTORY2;
    __SQL_SUM_AGGREGATE_159INVENTORY2_map __SQL_SUM_AGGREGATE_159INVENTORY2;
    __SQL_SUM_AGGREGATE_160INVENTORY2_map __SQL_SUM_AGGREGATE_160INVENTORY2;
    __SQL_SUM_AGGREGATE_167INVENTORY1_map __SQL_SUM_AGGREGATE_167INVENTORY1;
    __SQL_SUM_AGGREGATE_168INVENTORY1_map __SQL_SUM_AGGREGATE_168INVENTORY1;
    __SQL_SUM_AGGREGATE_169INVENTORY1_map __SQL_SUM_AGGREGATE_169INVENTORY1;
    __SQL_SUM_AGGREGATE_170INVENTORY1_map __SQL_SUM_AGGREGATE_170INVENTORY1;
    __SQL_SUM_AGGREGATE_171INVENTORY1_map __SQL_SUM_AGGREGATE_171INVENTORY1;
    __SQL_SUM_AGGREGATE_172INVENTORY1_map __SQL_SUM_AGGREGATE_172INVENTORY1;
    __SQL_SUM_AGGREGATE_173INVENTORY1_map __SQL_SUM_AGGREGATE_173INVENTORY1;
    __SQL_SUM_AGGREGATE_174INVENTORY1_map __SQL_SUM_AGGREGATE_174INVENTORY1;
    __SQL_SUM_AGGREGATE_175INVENTORY1_map __SQL_SUM_AGGREGATE_175INVENTORY1;
    __SQL_SUM_AGGREGATE_176INVENTORY1_map __SQL_SUM_AGGREGATE_176INVENTORY1;
    __SQL_SUM_AGGREGATE_177INVENTORY1_map __SQL_SUM_AGGREGATE_177INVENTORY1;
    __SQL_SUM_AGGREGATE_178INVENTORY1_map __SQL_SUM_AGGREGATE_178INVENTORY1;
    __SQL_SUM_AGGREGATE_179INVENTORY1_map __SQL_SUM_AGGREGATE_179INVENTORY1;
    __SQL_SUM_AGGREGATE_180INVENTORY1_map __SQL_SUM_AGGREGATE_180INVENTORY1;
    __SQL_SUM_AGGREGATE_181INVENTORY1_map __SQL_SUM_AGGREGATE_181INVENTORY1;
    __SQL_SUM_AGGREGATE_182INVENTORY1_map __SQL_SUM_AGGREGATE_182INVENTORY1;
    __SQL_SUM_AGGREGATE_183INVENTORY1_map __SQL_SUM_AGGREGATE_183INVENTORY1;
    __SQL_SUM_AGGREGATE_184INVENTORY1_map __SQL_SUM_AGGREGATE_184INVENTORY1;
    __SQL_SUM_AGGREGATE_185INVENTORY1_map __SQL_SUM_AGGREGATE_185INVENTORY1;
    __SQL_SUM_AGGREGATE_186INVENTORY1_map __SQL_SUM_AGGREGATE_186INVENTORY1;
    __SQL_SUM_AGGREGATE_187INVENTORY1_map __SQL_SUM_AGGREGATE_187INVENTORY1;
    __SQL_SUM_AGGREGATE_188INVENTORY1_map __SQL_SUM_AGGREGATE_188INVENTORY1;
    __SQL_SUM_AGGREGATE_189INVENTORY1_map __SQL_SUM_AGGREGATE_189INVENTORY1;
    __SQL_SUM_AGGREGATE_190INVENTORY1_map __SQL_SUM_AGGREGATE_190INVENTORY1;
    __SQL_SUM_AGGREGATE_191INVENTORY1_map __SQL_SUM_AGGREGATE_191INVENTORY1;
    __SQL_SUM_AGGREGATE_192INVENTORY1_map __SQL_SUM_AGGREGATE_192INVENTORY1;
    __SQL_SUM_AGGREGATE_193INVENTORY1_map __SQL_SUM_AGGREGATE_193INVENTORY1;
    __SQL_SUM_AGGREGATE_194INVENTORY1_map __SQL_SUM_AGGREGATE_194INVENTORY1;
    __SQL_SUM_AGGREGATE_195INVENTORY1_map __SQL_SUM_AGGREGATE_195INVENTORY1;
    __SQL_SUM_AGGREGATE_206INVENTORY1_map __SQL_SUM_AGGREGATE_206INVENTORY1;
    __SQL_SUM_AGGREGATE_207INVENTORY1_map __SQL_SUM_AGGREGATE_207INVENTORY1;
    __SQL_SUM_AGGREGATE_208INVENTORY1_map __SQL_SUM_AGGREGATE_208INVENTORY1;
    __SQL_SUM_AGGREGATE_209INVENTORY1_map __SQL_SUM_AGGREGATE_209INVENTORY1;
    __SQL_SUM_AGGREGATE_210INVENTORY1_map __SQL_SUM_AGGREGATE_210INVENTORY1;
    __SQL_SUM_AGGREGATE_211INVENTORY1_map __SQL_SUM_AGGREGATE_211INVENTORY1;
    __SQL_SUM_AGGREGATE_212INVENTORY1_map __SQL_SUM_AGGREGATE_212INVENTORY1;
    __SQL_SUM_AGGREGATE_213INVENTORY1_map __SQL_SUM_AGGREGATE_213INVENTORY1;
    __SQL_SUM_AGGREGATE_214INVENTORY1_map __SQL_SUM_AGGREGATE_214INVENTORY1;
    __SQL_SUM_AGGREGATE_215INVENTORY1_map __SQL_SUM_AGGREGATE_215INVENTORY1;
    __SQL_SUM_AGGREGATE_216INVENTORY1_map __SQL_SUM_AGGREGATE_216INVENTORY1;
    __SQL_SUM_AGGREGATE_217INVENTORY1_map __SQL_SUM_AGGREGATE_217INVENTORY1;
    __SQL_SUM_AGGREGATE_218INVENTORY1_map __SQL_SUM_AGGREGATE_218INVENTORY1;
    __SQL_SUM_AGGREGATE_219INVENTORY1_map __SQL_SUM_AGGREGATE_219INVENTORY1;
    __SQL_SUM_AGGREGATE_220INVENTORY1_map __SQL_SUM_AGGREGATE_220INVENTORY1;
    __SQL_SUM_AGGREGATE_221INVENTORY1_map __SQL_SUM_AGGREGATE_221INVENTORY1;
    __SQL_SUM_AGGREGATE_222INVENTORY1_map __SQL_SUM_AGGREGATE_222INVENTORY1;
    __SQL_SUM_AGGREGATE_223INVENTORY1_map __SQL_SUM_AGGREGATE_223INVENTORY1;
    __SQL_SUM_AGGREGATE_224INVENTORY1_map __SQL_SUM_AGGREGATE_224INVENTORY1;
    __SQL_SUM_AGGREGATE_225INVENTORY1_map __SQL_SUM_AGGREGATE_225INVENTORY1;
    __SQL_SUM_AGGREGATE_226INVENTORY1_map __SQL_SUM_AGGREGATE_226INVENTORY1;
    __SQL_SUM_AGGREGATE_227INVENTORY1_map __SQL_SUM_AGGREGATE_227INVENTORY1;
    __SQL_SUM_AGGREGATE_228INVENTORY1_map __SQL_SUM_AGGREGATE_228INVENTORY1;
    __SQL_SUM_AGGREGATE_229INVENTORY1_map __SQL_SUM_AGGREGATE_229INVENTORY1;
    __SQL_SUM_AGGREGATE_230INVENTORY1_map __SQL_SUM_AGGREGATE_230INVENTORY1;
    __SQL_SUM_AGGREGATE_231INVENTORY1_map __SQL_SUM_AGGREGATE_231INVENTORY1;
    __SQL_SUM_AGGREGATE_232INVENTORY1_map __SQL_SUM_AGGREGATE_232INVENTORY1;
    __SQL_SUM_AGGREGATE_233INVENTORY1_map __SQL_SUM_AGGREGATE_233INVENTORY1;
    __SQL_SUM_AGGREGATE_244INVENTORY1_map __SQL_SUM_AGGREGATE_244INVENTORY1;
    __SQL_SUM_AGGREGATE_245INVENTORY1_map __SQL_SUM_AGGREGATE_245INVENTORY1;
    __SQL_SUM_AGGREGATE_246INVENTORY1_map __SQL_SUM_AGGREGATE_246INVENTORY1;
    __SQL_SUM_AGGREGATE_247INVENTORY1_map __SQL_SUM_AGGREGATE_247INVENTORY1;
    __SQL_SUM_AGGREGATE_248INVENTORY1_map __SQL_SUM_AGGREGATE_248INVENTORY1;
    __SQL_SUM_AGGREGATE_249INVENTORY1_map __SQL_SUM_AGGREGATE_249INVENTORY1;
    __SQL_SUM_AGGREGATE_250INVENTORY1_map __SQL_SUM_AGGREGATE_250INVENTORY1;
    __SQL_SUM_AGGREGATE_251INVENTORY1_map __SQL_SUM_AGGREGATE_251INVENTORY1;
    __SQL_SUM_AGGREGATE_252INVENTORY1_map __SQL_SUM_AGGREGATE_252INVENTORY1;
    __SQL_SUM_AGGREGATE_253INVENTORY1_map __SQL_SUM_AGGREGATE_253INVENTORY1;
    __SQL_SUM_AGGREGATE_254INVENTORY1_map __SQL_SUM_AGGREGATE_254INVENTORY1;
    __SQL_SUM_AGGREGATE_255INVENTORY1_map __SQL_SUM_AGGREGATE_255INVENTORY1;
    __SQL_SUM_AGGREGATE_256INVENTORY1_map __SQL_SUM_AGGREGATE_256INVENTORY1;
    __SQL_SUM_AGGREGATE_257INVENTORY1_map __SQL_SUM_AGGREGATE_257INVENTORY1;
    __SQL_SUM_AGGREGATE_258INVENTORY1_map __SQL_SUM_AGGREGATE_258INVENTORY1;
    __SQL_SUM_AGGREGATE_259INVENTORY1_map __SQL_SUM_AGGREGATE_259INVENTORY1;
    __SQL_SUM_AGGREGATE_260INVENTORY1_map __SQL_SUM_AGGREGATE_260INVENTORY1;
    __SQL_SUM_AGGREGATE_261INVENTORY1_map __SQL_SUM_AGGREGATE_261INVENTORY1;
    __SQL_SUM_AGGREGATE_262INVENTORY1_map __SQL_SUM_AGGREGATE_262INVENTORY1;
    __SQL_SUM_AGGREGATE_263INVENTORY1_map __SQL_SUM_AGGREGATE_263INVENTORY1;
    __SQL_SUM_AGGREGATE_264INVENTORY1_map __SQL_SUM_AGGREGATE_264INVENTORY1;
    __SQL_SUM_AGGREGATE_265INVENTORY1_map __SQL_SUM_AGGREGATE_265INVENTORY1;
    __SQL_SUM_AGGREGATE_266INVENTORY1_map __SQL_SUM_AGGREGATE_266INVENTORY1;
    __SQL_SUM_AGGREGATE_267INVENTORY1_map __SQL_SUM_AGGREGATE_267INVENTORY1;
    __SQL_SUM_AGGREGATE_268INVENTORY1_map __SQL_SUM_AGGREGATE_268INVENTORY1;
    __SQL_SUM_AGGREGATE_269INVENTORY1_map __SQL_SUM_AGGREGATE_269INVENTORY1;
    __SQL_SUM_AGGREGATE_270INVENTORY1_map __SQL_SUM_AGGREGATE_270INVENTORY1;
    __SQL_SUM_AGGREGATE_281INVENTORY1_map __SQL_SUM_AGGREGATE_281INVENTORY1;
    __SQL_SUM_AGGREGATE_282INVENTORY1_map __SQL_SUM_AGGREGATE_282INVENTORY1;
    __SQL_SUM_AGGREGATE_283INVENTORY1_map __SQL_SUM_AGGREGATE_283INVENTORY1;
    __SQL_SUM_AGGREGATE_284INVENTORY1_map __SQL_SUM_AGGREGATE_284INVENTORY1;
    __SQL_SUM_AGGREGATE_285INVENTORY1_map __SQL_SUM_AGGREGATE_285INVENTORY1;
    __SQL_SUM_AGGREGATE_286INVENTORY1_map __SQL_SUM_AGGREGATE_286INVENTORY1;
    __SQL_SUM_AGGREGATE_287INVENTORY1_map __SQL_SUM_AGGREGATE_287INVENTORY1;
    __SQL_SUM_AGGREGATE_288INVENTORY1_map __SQL_SUM_AGGREGATE_288INVENTORY1;
    __SQL_SUM_AGGREGATE_289INVENTORY1_map __SQL_SUM_AGGREGATE_289INVENTORY1;
    __SQL_SUM_AGGREGATE_290INVENTORY1_map __SQL_SUM_AGGREGATE_290INVENTORY1;
    __SQL_SUM_AGGREGATE_291INVENTORY1_map __SQL_SUM_AGGREGATE_291INVENTORY1;
    __SQL_SUM_AGGREGATE_292INVENTORY1_map __SQL_SUM_AGGREGATE_292INVENTORY1;
    __SQL_SUM_AGGREGATE_293INVENTORY1_map __SQL_SUM_AGGREGATE_293INVENTORY1;
    __SQL_SUM_AGGREGATE_294INVENTORY1_map __SQL_SUM_AGGREGATE_294INVENTORY1;
    __SQL_SUM_AGGREGATE_295INVENTORY1_map __SQL_SUM_AGGREGATE_295INVENTORY1;
    __SQL_SUM_AGGREGATE_296INVENTORY1_map __SQL_SUM_AGGREGATE_296INVENTORY1;
    __SQL_SUM_AGGREGATE_297INVENTORY1_map __SQL_SUM_AGGREGATE_297INVENTORY1;
    __SQL_SUM_AGGREGATE_298INVENTORY1_map __SQL_SUM_AGGREGATE_298INVENTORY1;
    __SQL_SUM_AGGREGATE_299INVENTORY1_map __SQL_SUM_AGGREGATE_299INVENTORY1;
    __SQL_SUM_AGGREGATE_300INVENTORY1_map __SQL_SUM_AGGREGATE_300INVENTORY1;
    __SQL_SUM_AGGREGATE_301INVENTORY1_map __SQL_SUM_AGGREGATE_301INVENTORY1;
    __SQL_SUM_AGGREGATE_302INVENTORY1_map __SQL_SUM_AGGREGATE_302INVENTORY1;
    __SQL_SUM_AGGREGATE_303INVENTORY1_map __SQL_SUM_AGGREGATE_303INVENTORY1;
    __SQL_SUM_AGGREGATE_304INVENTORY1_map __SQL_SUM_AGGREGATE_304INVENTORY1;
    __SQL_SUM_AGGREGATE_305INVENTORY1_map __SQL_SUM_AGGREGATE_305INVENTORY1;
    __SQL_SUM_AGGREGATE_306INVENTORY1_map __SQL_SUM_AGGREGATE_306INVENTORY1;
    __SQL_SUM_AGGREGATE_317INVENTORY1_map __SQL_SUM_AGGREGATE_317INVENTORY1;
    __SQL_SUM_AGGREGATE_318INVENTORY1_map __SQL_SUM_AGGREGATE_318INVENTORY1;
    __SQL_SUM_AGGREGATE_319INVENTORY1_map __SQL_SUM_AGGREGATE_319INVENTORY1;
    __SQL_SUM_AGGREGATE_320INVENTORY1_map __SQL_SUM_AGGREGATE_320INVENTORY1;
    __SQL_SUM_AGGREGATE_321INVENTORY1_map __SQL_SUM_AGGREGATE_321INVENTORY1;
    __SQL_SUM_AGGREGATE_322INVENTORY1_map __SQL_SUM_AGGREGATE_322INVENTORY1;
    __SQL_SUM_AGGREGATE_323INVENTORY1_map __SQL_SUM_AGGREGATE_323INVENTORY1;
    __SQL_SUM_AGGREGATE_324INVENTORY1_map __SQL_SUM_AGGREGATE_324INVENTORY1;
    __SQL_SUM_AGGREGATE_325INVENTORY1_map __SQL_SUM_AGGREGATE_325INVENTORY1;
    __SQL_SUM_AGGREGATE_326INVENTORY1_map __SQL_SUM_AGGREGATE_326INVENTORY1;
    __SQL_SUM_AGGREGATE_327INVENTORY1_map __SQL_SUM_AGGREGATE_327INVENTORY1;
    __SQL_SUM_AGGREGATE_328INVENTORY1_map __SQL_SUM_AGGREGATE_328INVENTORY1;
    __SQL_SUM_AGGREGATE_329INVENTORY1_map __SQL_SUM_AGGREGATE_329INVENTORY1;
    __SQL_SUM_AGGREGATE_330INVENTORY1_map __SQL_SUM_AGGREGATE_330INVENTORY1;
    __SQL_SUM_AGGREGATE_331INVENTORY1_map __SQL_SUM_AGGREGATE_331INVENTORY1;
    __SQL_SUM_AGGREGATE_332INVENTORY1_map __SQL_SUM_AGGREGATE_332INVENTORY1;
    __SQL_SUM_AGGREGATE_333INVENTORY1_map __SQL_SUM_AGGREGATE_333INVENTORY1;
    __SQL_SUM_AGGREGATE_334INVENTORY1_map __SQL_SUM_AGGREGATE_334INVENTORY1;
    __SQL_SUM_AGGREGATE_335INVENTORY1_map __SQL_SUM_AGGREGATE_335INVENTORY1;
    __SQL_SUM_AGGREGATE_336INVENTORY1_map __SQL_SUM_AGGREGATE_336INVENTORY1;
    __SQL_SUM_AGGREGATE_337INVENTORY1_map __SQL_SUM_AGGREGATE_337INVENTORY1;
    __SQL_SUM_AGGREGATE_338INVENTORY1_map __SQL_SUM_AGGREGATE_338INVENTORY1;
    __SQL_SUM_AGGREGATE_339INVENTORY1_map __SQL_SUM_AGGREGATE_339INVENTORY1;
    __SQL_SUM_AGGREGATE_340INVENTORY1_map __SQL_SUM_AGGREGATE_340INVENTORY1;
    __SQL_SUM_AGGREGATE_341INVENTORY1_map __SQL_SUM_AGGREGATE_341INVENTORY1;
    __SQL_SUM_AGGREGATE_352INVENTORY1_map __SQL_SUM_AGGREGATE_352INVENTORY1;
    __SQL_SUM_AGGREGATE_353INVENTORY1_map __SQL_SUM_AGGREGATE_353INVENTORY1;
    __SQL_SUM_AGGREGATE_354INVENTORY1_map __SQL_SUM_AGGREGATE_354INVENTORY1;
    __SQL_SUM_AGGREGATE_355INVENTORY1_map __SQL_SUM_AGGREGATE_355INVENTORY1;
    __SQL_SUM_AGGREGATE_356INVENTORY1_map __SQL_SUM_AGGREGATE_356INVENTORY1;
    __SQL_SUM_AGGREGATE_357INVENTORY1_map __SQL_SUM_AGGREGATE_357INVENTORY1;
    __SQL_SUM_AGGREGATE_358INVENTORY1_map __SQL_SUM_AGGREGATE_358INVENTORY1;
    __SQL_SUM_AGGREGATE_359INVENTORY1_map __SQL_SUM_AGGREGATE_359INVENTORY1;
    __SQL_SUM_AGGREGATE_360INVENTORY1_map __SQL_SUM_AGGREGATE_360INVENTORY1;
    __SQL_SUM_AGGREGATE_361INVENTORY1_map __SQL_SUM_AGGREGATE_361INVENTORY1;
    __SQL_SUM_AGGREGATE_362INVENTORY1_map __SQL_SUM_AGGREGATE_362INVENTORY1;
    __SQL_SUM_AGGREGATE_363INVENTORY1_map __SQL_SUM_AGGREGATE_363INVENTORY1;
    __SQL_SUM_AGGREGATE_364INVENTORY1_map __SQL_SUM_AGGREGATE_364INVENTORY1;
    __SQL_SUM_AGGREGATE_365INVENTORY1_map __SQL_SUM_AGGREGATE_365INVENTORY1;
    __SQL_SUM_AGGREGATE_366INVENTORY1_map __SQL_SUM_AGGREGATE_366INVENTORY1;
    __SQL_SUM_AGGREGATE_367INVENTORY1_map __SQL_SUM_AGGREGATE_367INVENTORY1;
    __SQL_SUM_AGGREGATE_368INVENTORY1_map __SQL_SUM_AGGREGATE_368INVENTORY1;
    __SQL_SUM_AGGREGATE_369INVENTORY1_map __SQL_SUM_AGGREGATE_369INVENTORY1;
    __SQL_SUM_AGGREGATE_370INVENTORY1_map __SQL_SUM_AGGREGATE_370INVENTORY1;
    __SQL_SUM_AGGREGATE_371INVENTORY1_map __SQL_SUM_AGGREGATE_371INVENTORY1;
    __SQL_SUM_AGGREGATE_372INVENTORY1_map __SQL_SUM_AGGREGATE_372INVENTORY1;
    __SQL_SUM_AGGREGATE_373INVENTORY1_map __SQL_SUM_AGGREGATE_373INVENTORY1;
    __SQL_SUM_AGGREGATE_374INVENTORY1_map __SQL_SUM_AGGREGATE_374INVENTORY1;
    __SQL_SUM_AGGREGATE_375INVENTORY1_map __SQL_SUM_AGGREGATE_375INVENTORY1;
    __SQL_SUM_AGGREGATE_386INVENTORY1_map __SQL_SUM_AGGREGATE_386INVENTORY1;
    __SQL_SUM_AGGREGATE_387INVENTORY1_map __SQL_SUM_AGGREGATE_387INVENTORY1;
    __SQL_SUM_AGGREGATE_388INVENTORY1_map __SQL_SUM_AGGREGATE_388INVENTORY1;
    __SQL_SUM_AGGREGATE_389INVENTORY1_map __SQL_SUM_AGGREGATE_389INVENTORY1;
    __SQL_SUM_AGGREGATE_390INVENTORY1_map __SQL_SUM_AGGREGATE_390INVENTORY1;
    __SQL_SUM_AGGREGATE_391INVENTORY1_map __SQL_SUM_AGGREGATE_391INVENTORY1;
    __SQL_SUM_AGGREGATE_392INVENTORY1_map __SQL_SUM_AGGREGATE_392INVENTORY1;
    __SQL_SUM_AGGREGATE_393INVENTORY1_map __SQL_SUM_AGGREGATE_393INVENTORY1;
    __SQL_SUM_AGGREGATE_394INVENTORY1_map __SQL_SUM_AGGREGATE_394INVENTORY1;
    __SQL_SUM_AGGREGATE_395INVENTORY1_map __SQL_SUM_AGGREGATE_395INVENTORY1;
    __SQL_SUM_AGGREGATE_396INVENTORY1_map __SQL_SUM_AGGREGATE_396INVENTORY1;
    __SQL_SUM_AGGREGATE_397INVENTORY1_map __SQL_SUM_AGGREGATE_397INVENTORY1;
    __SQL_SUM_AGGREGATE_398INVENTORY1_map __SQL_SUM_AGGREGATE_398INVENTORY1;
    __SQL_SUM_AGGREGATE_399INVENTORY1_map __SQL_SUM_AGGREGATE_399INVENTORY1;
    __SQL_SUM_AGGREGATE_400INVENTORY1_map __SQL_SUM_AGGREGATE_400INVENTORY1;
    __SQL_SUM_AGGREGATE_401INVENTORY1_map __SQL_SUM_AGGREGATE_401INVENTORY1;
    __SQL_SUM_AGGREGATE_402INVENTORY1_map __SQL_SUM_AGGREGATE_402INVENTORY1;
    __SQL_SUM_AGGREGATE_403INVENTORY1_map __SQL_SUM_AGGREGATE_403INVENTORY1;
    __SQL_SUM_AGGREGATE_404INVENTORY1_map __SQL_SUM_AGGREGATE_404INVENTORY1;
    __SQL_SUM_AGGREGATE_405INVENTORY1_map __SQL_SUM_AGGREGATE_405INVENTORY1;
    __SQL_SUM_AGGREGATE_406INVENTORY1_map __SQL_SUM_AGGREGATE_406INVENTORY1;
    __SQL_SUM_AGGREGATE_407INVENTORY1_map __SQL_SUM_AGGREGATE_407INVENTORY1;
    __SQL_SUM_AGGREGATE_408INVENTORY1_map __SQL_SUM_AGGREGATE_408INVENTORY1;
    __SQL_SUM_AGGREGATE_419INVENTORY1_map __SQL_SUM_AGGREGATE_419INVENTORY1;
    __SQL_SUM_AGGREGATE_420INVENTORY1_map __SQL_SUM_AGGREGATE_420INVENTORY1;
    __SQL_SUM_AGGREGATE_421INVENTORY1_map __SQL_SUM_AGGREGATE_421INVENTORY1;
    __SQL_SUM_AGGREGATE_422INVENTORY1_map __SQL_SUM_AGGREGATE_422INVENTORY1;
    __SQL_SUM_AGGREGATE_423INVENTORY1_map __SQL_SUM_AGGREGATE_423INVENTORY1;
    __SQL_SUM_AGGREGATE_424INVENTORY1_map __SQL_SUM_AGGREGATE_424INVENTORY1;
    __SQL_SUM_AGGREGATE_425INVENTORY1_map __SQL_SUM_AGGREGATE_425INVENTORY1;
    __SQL_SUM_AGGREGATE_426INVENTORY1_map __SQL_SUM_AGGREGATE_426INVENTORY1;
    __SQL_SUM_AGGREGATE_427INVENTORY1_map __SQL_SUM_AGGREGATE_427INVENTORY1;
    __SQL_SUM_AGGREGATE_428INVENTORY1_map __SQL_SUM_AGGREGATE_428INVENTORY1;
    __SQL_SUM_AGGREGATE_429INVENTORY1_map __SQL_SUM_AGGREGATE_429INVENTORY1;
    __SQL_SUM_AGGREGATE_430INVENTORY1_map __SQL_SUM_AGGREGATE_430INVENTORY1;
    __SQL_SUM_AGGREGATE_431INVENTORY1_map __SQL_SUM_AGGREGATE_431INVENTORY1;
    __SQL_SUM_AGGREGATE_432INVENTORY1_map __SQL_SUM_AGGREGATE_432INVENTORY1;
    __SQL_SUM_AGGREGATE_433INVENTORY1_map __SQL_SUM_AGGREGATE_433INVENTORY1;
    __SQL_SUM_AGGREGATE_434INVENTORY1_map __SQL_SUM_AGGREGATE_434INVENTORY1;
    __SQL_SUM_AGGREGATE_435INVENTORY1_map __SQL_SUM_AGGREGATE_435INVENTORY1;
    __SQL_SUM_AGGREGATE_436INVENTORY1_map __SQL_SUM_AGGREGATE_436INVENTORY1;
    __SQL_SUM_AGGREGATE_437INVENTORY1_map __SQL_SUM_AGGREGATE_437INVENTORY1;
    __SQL_SUM_AGGREGATE_438INVENTORY1_map __SQL_SUM_AGGREGATE_438INVENTORY1;
    __SQL_SUM_AGGREGATE_439INVENTORY1_map __SQL_SUM_AGGREGATE_439INVENTORY1;
    __SQL_SUM_AGGREGATE_440INVENTORY1_map __SQL_SUM_AGGREGATE_440INVENTORY1;
    __SQL_SUM_AGGREGATE_451INVENTORY1_map __SQL_SUM_AGGREGATE_451INVENTORY1;
    __SQL_SUM_AGGREGATE_452INVENTORY1_map __SQL_SUM_AGGREGATE_452INVENTORY1;
    __SQL_SUM_AGGREGATE_453INVENTORY1_map __SQL_SUM_AGGREGATE_453INVENTORY1;
    __SQL_SUM_AGGREGATE_454INVENTORY1_map __SQL_SUM_AGGREGATE_454INVENTORY1;
    __SQL_SUM_AGGREGATE_455INVENTORY1_map __SQL_SUM_AGGREGATE_455INVENTORY1;
    __SQL_SUM_AGGREGATE_456INVENTORY1_map __SQL_SUM_AGGREGATE_456INVENTORY1;
    __SQL_SUM_AGGREGATE_457INVENTORY1_map __SQL_SUM_AGGREGATE_457INVENTORY1;
    __SQL_SUM_AGGREGATE_458INVENTORY1_map __SQL_SUM_AGGREGATE_458INVENTORY1;
    __SQL_SUM_AGGREGATE_459INVENTORY1_map __SQL_SUM_AGGREGATE_459INVENTORY1;
    __SQL_SUM_AGGREGATE_460INVENTORY1_map __SQL_SUM_AGGREGATE_460INVENTORY1;
    __SQL_SUM_AGGREGATE_461INVENTORY1_map __SQL_SUM_AGGREGATE_461INVENTORY1;
    __SQL_SUM_AGGREGATE_462INVENTORY1_map __SQL_SUM_AGGREGATE_462INVENTORY1;
    __SQL_SUM_AGGREGATE_463INVENTORY1_map __SQL_SUM_AGGREGATE_463INVENTORY1;
    __SQL_SUM_AGGREGATE_464INVENTORY1_map __SQL_SUM_AGGREGATE_464INVENTORY1;
    __SQL_SUM_AGGREGATE_465INVENTORY1_map __SQL_SUM_AGGREGATE_465INVENTORY1;
    __SQL_SUM_AGGREGATE_466INVENTORY1_map __SQL_SUM_AGGREGATE_466INVENTORY1;
    __SQL_SUM_AGGREGATE_467INVENTORY1_map __SQL_SUM_AGGREGATE_467INVENTORY1;
    __SQL_SUM_AGGREGATE_468INVENTORY1_map __SQL_SUM_AGGREGATE_468INVENTORY1;
    __SQL_SUM_AGGREGATE_469INVENTORY1_map __SQL_SUM_AGGREGATE_469INVENTORY1;
    __SQL_SUM_AGGREGATE_470INVENTORY1_map __SQL_SUM_AGGREGATE_470INVENTORY1;
    __SQL_SUM_AGGREGATE_471INVENTORY1_map __SQL_SUM_AGGREGATE_471INVENTORY1;
    __SQL_SUM_AGGREGATE_482INVENTORY1_map __SQL_SUM_AGGREGATE_482INVENTORY1;
    __SQL_SUM_AGGREGATE_483INVENTORY1_map __SQL_SUM_AGGREGATE_483INVENTORY1;
    __SQL_SUM_AGGREGATE_484INVENTORY1_map __SQL_SUM_AGGREGATE_484INVENTORY1;
    __SQL_SUM_AGGREGATE_485INVENTORY1_map __SQL_SUM_AGGREGATE_485INVENTORY1;
    __SQL_SUM_AGGREGATE_486INVENTORY1_map __SQL_SUM_AGGREGATE_486INVENTORY1;
    __SQL_SUM_AGGREGATE_487INVENTORY1_map __SQL_SUM_AGGREGATE_487INVENTORY1;
    __SQL_SUM_AGGREGATE_488INVENTORY1_map __SQL_SUM_AGGREGATE_488INVENTORY1;
    __SQL_SUM_AGGREGATE_489INVENTORY1_map __SQL_SUM_AGGREGATE_489INVENTORY1;
    __SQL_SUM_AGGREGATE_490INVENTORY1_map __SQL_SUM_AGGREGATE_490INVENTORY1;
    __SQL_SUM_AGGREGATE_491INVENTORY1_map __SQL_SUM_AGGREGATE_491INVENTORY1;
    __SQL_SUM_AGGREGATE_492INVENTORY1_map __SQL_SUM_AGGREGATE_492INVENTORY1;
    __SQL_SUM_AGGREGATE_493INVENTORY1_map __SQL_SUM_AGGREGATE_493INVENTORY1;
    __SQL_SUM_AGGREGATE_494INVENTORY1_map __SQL_SUM_AGGREGATE_494INVENTORY1;
    __SQL_SUM_AGGREGATE_495INVENTORY1_map __SQL_SUM_AGGREGATE_495INVENTORY1;
    __SQL_SUM_AGGREGATE_496INVENTORY1_map __SQL_SUM_AGGREGATE_496INVENTORY1;
    __SQL_SUM_AGGREGATE_497INVENTORY1_map __SQL_SUM_AGGREGATE_497INVENTORY1;
    __SQL_SUM_AGGREGATE_498INVENTORY1_map __SQL_SUM_AGGREGATE_498INVENTORY1;
    __SQL_SUM_AGGREGATE_499INVENTORY1_map __SQL_SUM_AGGREGATE_499INVENTORY1;
    __SQL_SUM_AGGREGATE_500INVENTORY1_map __SQL_SUM_AGGREGATE_500INVENTORY1;
    __SQL_SUM_AGGREGATE_501INVENTORY1_map __SQL_SUM_AGGREGATE_501INVENTORY1;
    __SQL_SUM_AGGREGATE_512INVENTORY1_map __SQL_SUM_AGGREGATE_512INVENTORY1;
    __SQL_SUM_AGGREGATE_513INVENTORY1_map __SQL_SUM_AGGREGATE_513INVENTORY1;
    __SQL_SUM_AGGREGATE_514INVENTORY1_map __SQL_SUM_AGGREGATE_514INVENTORY1;
    __SQL_SUM_AGGREGATE_515INVENTORY1_map __SQL_SUM_AGGREGATE_515INVENTORY1;
    __SQL_SUM_AGGREGATE_516INVENTORY1_map __SQL_SUM_AGGREGATE_516INVENTORY1;
    __SQL_SUM_AGGREGATE_517INVENTORY1_map __SQL_SUM_AGGREGATE_517INVENTORY1;
    __SQL_SUM_AGGREGATE_518INVENTORY1_map __SQL_SUM_AGGREGATE_518INVENTORY1;
    __SQL_SUM_AGGREGATE_519INVENTORY1_map __SQL_SUM_AGGREGATE_519INVENTORY1;
    __SQL_SUM_AGGREGATE_520INVENTORY1_map __SQL_SUM_AGGREGATE_520INVENTORY1;
    __SQL_SUM_AGGREGATE_521INVENTORY1_map __SQL_SUM_AGGREGATE_521INVENTORY1;
    __SQL_SUM_AGGREGATE_522INVENTORY1_map __SQL_SUM_AGGREGATE_522INVENTORY1;
    __SQL_SUM_AGGREGATE_523INVENTORY1_map __SQL_SUM_AGGREGATE_523INVENTORY1;
    __SQL_SUM_AGGREGATE_524INVENTORY1_map __SQL_SUM_AGGREGATE_524INVENTORY1;
    __SQL_SUM_AGGREGATE_525INVENTORY1_map __SQL_SUM_AGGREGATE_525INVENTORY1;
    __SQL_SUM_AGGREGATE_526INVENTORY1_map __SQL_SUM_AGGREGATE_526INVENTORY1;
    __SQL_SUM_AGGREGATE_527INVENTORY1_map __SQL_SUM_AGGREGATE_527INVENTORY1;
    __SQL_SUM_AGGREGATE_528INVENTORY1_map __SQL_SUM_AGGREGATE_528INVENTORY1;
    __SQL_SUM_AGGREGATE_529INVENTORY1_map __SQL_SUM_AGGREGATE_529INVENTORY1;
    __SQL_SUM_AGGREGATE_530INVENTORY1_map __SQL_SUM_AGGREGATE_530INVENTORY1;
    __SQL_SUM_AGGREGATE_541INVENTORY1_map __SQL_SUM_AGGREGATE_541INVENTORY1;
    __SQL_SUM_AGGREGATE_542INVENTORY1_map __SQL_SUM_AGGREGATE_542INVENTORY1;
    __SQL_SUM_AGGREGATE_543INVENTORY1_map __SQL_SUM_AGGREGATE_543INVENTORY1;
    __SQL_SUM_AGGREGATE_544INVENTORY1_map __SQL_SUM_AGGREGATE_544INVENTORY1;
    __SQL_SUM_AGGREGATE_545INVENTORY1_map __SQL_SUM_AGGREGATE_545INVENTORY1;
    __SQL_SUM_AGGREGATE_546INVENTORY1_map __SQL_SUM_AGGREGATE_546INVENTORY1;
    __SQL_SUM_AGGREGATE_547INVENTORY1_map __SQL_SUM_AGGREGATE_547INVENTORY1;
    __SQL_SUM_AGGREGATE_548INVENTORY1_map __SQL_SUM_AGGREGATE_548INVENTORY1;
    __SQL_SUM_AGGREGATE_549INVENTORY1_map __SQL_SUM_AGGREGATE_549INVENTORY1;
    __SQL_SUM_AGGREGATE_550INVENTORY1_map __SQL_SUM_AGGREGATE_550INVENTORY1;
    __SQL_SUM_AGGREGATE_551INVENTORY1_map __SQL_SUM_AGGREGATE_551INVENTORY1;
    __SQL_SUM_AGGREGATE_552INVENTORY1_map __SQL_SUM_AGGREGATE_552INVENTORY1;
    __SQL_SUM_AGGREGATE_553INVENTORY1_map __SQL_SUM_AGGREGATE_553INVENTORY1;
    __SQL_SUM_AGGREGATE_554INVENTORY1_map __SQL_SUM_AGGREGATE_554INVENTORY1;
    __SQL_SUM_AGGREGATE_555INVENTORY1_map __SQL_SUM_AGGREGATE_555INVENTORY1;
    __SQL_SUM_AGGREGATE_556INVENTORY1_map __SQL_SUM_AGGREGATE_556INVENTORY1;
    __SQL_SUM_AGGREGATE_557INVENTORY1_map __SQL_SUM_AGGREGATE_557INVENTORY1;
    __SQL_SUM_AGGREGATE_558INVENTORY1_map __SQL_SUM_AGGREGATE_558INVENTORY1;
    __SQL_SUM_AGGREGATE_569INVENTORY1_map __SQL_SUM_AGGREGATE_569INVENTORY1;
    __SQL_SUM_AGGREGATE_570INVENTORY1_map __SQL_SUM_AGGREGATE_570INVENTORY1;
    __SQL_SUM_AGGREGATE_571INVENTORY1_map __SQL_SUM_AGGREGATE_571INVENTORY1;
    __SQL_SUM_AGGREGATE_572INVENTORY1_map __SQL_SUM_AGGREGATE_572INVENTORY1;
    __SQL_SUM_AGGREGATE_573INVENTORY1_map __SQL_SUM_AGGREGATE_573INVENTORY1;
    __SQL_SUM_AGGREGATE_574INVENTORY1_map __SQL_SUM_AGGREGATE_574INVENTORY1;
    __SQL_SUM_AGGREGATE_575INVENTORY1_map __SQL_SUM_AGGREGATE_575INVENTORY1;
    __SQL_SUM_AGGREGATE_576INVENTORY1_map __SQL_SUM_AGGREGATE_576INVENTORY1;
    __SQL_SUM_AGGREGATE_577INVENTORY1_map __SQL_SUM_AGGREGATE_577INVENTORY1;
    __SQL_SUM_AGGREGATE_578INVENTORY1_map __SQL_SUM_AGGREGATE_578INVENTORY1;
    __SQL_SUM_AGGREGATE_579INVENTORY1_map __SQL_SUM_AGGREGATE_579INVENTORY1;
    __SQL_SUM_AGGREGATE_580INVENTORY1_map __SQL_SUM_AGGREGATE_580INVENTORY1;
    __SQL_SUM_AGGREGATE_581INVENTORY1_map __SQL_SUM_AGGREGATE_581INVENTORY1;
    __SQL_SUM_AGGREGATE_582INVENTORY1_map __SQL_SUM_AGGREGATE_582INVENTORY1;
    __SQL_SUM_AGGREGATE_583INVENTORY1_map __SQL_SUM_AGGREGATE_583INVENTORY1;
    __SQL_SUM_AGGREGATE_584INVENTORY1_map __SQL_SUM_AGGREGATE_584INVENTORY1;
    __SQL_SUM_AGGREGATE_585INVENTORY1_map __SQL_SUM_AGGREGATE_585INVENTORY1;
    __SQL_SUM_AGGREGATE_596INVENTORY1_map __SQL_SUM_AGGREGATE_596INVENTORY1;
    __SQL_SUM_AGGREGATE_597INVENTORY1_map __SQL_SUM_AGGREGATE_597INVENTORY1;
    __SQL_SUM_AGGREGATE_598INVENTORY1_map __SQL_SUM_AGGREGATE_598INVENTORY1;
    __SQL_SUM_AGGREGATE_599INVENTORY1_map __SQL_SUM_AGGREGATE_599INVENTORY1;
    __SQL_SUM_AGGREGATE_600INVENTORY1_map __SQL_SUM_AGGREGATE_600INVENTORY1;
    __SQL_SUM_AGGREGATE_601INVENTORY1_map __SQL_SUM_AGGREGATE_601INVENTORY1;
    __SQL_SUM_AGGREGATE_602INVENTORY1_map __SQL_SUM_AGGREGATE_602INVENTORY1;
    __SQL_SUM_AGGREGATE_603INVENTORY1_map __SQL_SUM_AGGREGATE_603INVENTORY1;
    __SQL_SUM_AGGREGATE_604INVENTORY1_map __SQL_SUM_AGGREGATE_604INVENTORY1;
    __SQL_SUM_AGGREGATE_605INVENTORY1_map __SQL_SUM_AGGREGATE_605INVENTORY1;
    __SQL_SUM_AGGREGATE_606INVENTORY1_map __SQL_SUM_AGGREGATE_606INVENTORY1;
    __SQL_SUM_AGGREGATE_607INVENTORY1_map __SQL_SUM_AGGREGATE_607INVENTORY1;
    __SQL_SUM_AGGREGATE_608INVENTORY1_map __SQL_SUM_AGGREGATE_608INVENTORY1;
    __SQL_SUM_AGGREGATE_609INVENTORY1_map __SQL_SUM_AGGREGATE_609INVENTORY1;
    __SQL_SUM_AGGREGATE_610INVENTORY1_map __SQL_SUM_AGGREGATE_610INVENTORY1;
    __SQL_SUM_AGGREGATE_611INVENTORY1_map __SQL_SUM_AGGREGATE_611INVENTORY1;
    __SQL_SUM_AGGREGATE_622INVENTORY1_map __SQL_SUM_AGGREGATE_622INVENTORY1;
    __SQL_SUM_AGGREGATE_623INVENTORY1_map __SQL_SUM_AGGREGATE_623INVENTORY1;
    __SQL_SUM_AGGREGATE_624INVENTORY1_map __SQL_SUM_AGGREGATE_624INVENTORY1;
    __SQL_SUM_AGGREGATE_625INVENTORY1_map __SQL_SUM_AGGREGATE_625INVENTORY1;
    __SQL_SUM_AGGREGATE_626INVENTORY1_map __SQL_SUM_AGGREGATE_626INVENTORY1;
    __SQL_SUM_AGGREGATE_627INVENTORY1_map __SQL_SUM_AGGREGATE_627INVENTORY1;
    __SQL_SUM_AGGREGATE_628INVENTORY1_map __SQL_SUM_AGGREGATE_628INVENTORY1;
    __SQL_SUM_AGGREGATE_629INVENTORY1_map __SQL_SUM_AGGREGATE_629INVENTORY1;
    __SQL_SUM_AGGREGATE_630INVENTORY1_map __SQL_SUM_AGGREGATE_630INVENTORY1;
    __SQL_SUM_AGGREGATE_631INVENTORY1_map __SQL_SUM_AGGREGATE_631INVENTORY1;
    __SQL_SUM_AGGREGATE_632INVENTORY1_map __SQL_SUM_AGGREGATE_632INVENTORY1;
    __SQL_SUM_AGGREGATE_633INVENTORY1_map __SQL_SUM_AGGREGATE_633INVENTORY1;
    __SQL_SUM_AGGREGATE_634INVENTORY1_map __SQL_SUM_AGGREGATE_634INVENTORY1;
    __SQL_SUM_AGGREGATE_635INVENTORY1_map __SQL_SUM_AGGREGATE_635INVENTORY1;
    __SQL_SUM_AGGREGATE_636INVENTORY1_map __SQL_SUM_AGGREGATE_636INVENTORY1;
    __SQL_SUM_AGGREGATE_647INVENTORY1_map __SQL_SUM_AGGREGATE_647INVENTORY1;
    __SQL_SUM_AGGREGATE_648INVENTORY1_map __SQL_SUM_AGGREGATE_648INVENTORY1;
    __SQL_SUM_AGGREGATE_649INVENTORY1_map __SQL_SUM_AGGREGATE_649INVENTORY1;
    __SQL_SUM_AGGREGATE_650INVENTORY1_map __SQL_SUM_AGGREGATE_650INVENTORY1;
    __SQL_SUM_AGGREGATE_651INVENTORY1_map __SQL_SUM_AGGREGATE_651INVENTORY1;
    __SQL_SUM_AGGREGATE_652INVENTORY1_map __SQL_SUM_AGGREGATE_652INVENTORY1;
    __SQL_SUM_AGGREGATE_653INVENTORY1_map __SQL_SUM_AGGREGATE_653INVENTORY1;
    __SQL_SUM_AGGREGATE_654INVENTORY1_map __SQL_SUM_AGGREGATE_654INVENTORY1;
    __SQL_SUM_AGGREGATE_655INVENTORY1_map __SQL_SUM_AGGREGATE_655INVENTORY1;
    __SQL_SUM_AGGREGATE_656INVENTORY1_map __SQL_SUM_AGGREGATE_656INVENTORY1;
    __SQL_SUM_AGGREGATE_657INVENTORY1_map __SQL_SUM_AGGREGATE_657INVENTORY1;
    __SQL_SUM_AGGREGATE_658INVENTORY1_map __SQL_SUM_AGGREGATE_658INVENTORY1;
    __SQL_SUM_AGGREGATE_659INVENTORY1_map __SQL_SUM_AGGREGATE_659INVENTORY1;
    __SQL_SUM_AGGREGATE_660INVENTORY1_map __SQL_SUM_AGGREGATE_660INVENTORY1;
    __SQL_SUM_AGGREGATE_671INVENTORY1_map __SQL_SUM_AGGREGATE_671INVENTORY1;
    __SQL_SUM_AGGREGATE_672INVENTORY1_map __SQL_SUM_AGGREGATE_672INVENTORY1;
    __SQL_SUM_AGGREGATE_673INVENTORY1_map __SQL_SUM_AGGREGATE_673INVENTORY1;
    __SQL_SUM_AGGREGATE_674INVENTORY1_map __SQL_SUM_AGGREGATE_674INVENTORY1;
    __SQL_SUM_AGGREGATE_675INVENTORY1_map __SQL_SUM_AGGREGATE_675INVENTORY1;
    __SQL_SUM_AGGREGATE_676INVENTORY1_map __SQL_SUM_AGGREGATE_676INVENTORY1;
    __SQL_SUM_AGGREGATE_677INVENTORY1_map __SQL_SUM_AGGREGATE_677INVENTORY1;
    __SQL_SUM_AGGREGATE_678INVENTORY1_map __SQL_SUM_AGGREGATE_678INVENTORY1;
    __SQL_SUM_AGGREGATE_679INVENTORY1_map __SQL_SUM_AGGREGATE_679INVENTORY1;
    __SQL_SUM_AGGREGATE_680INVENTORY1_map __SQL_SUM_AGGREGATE_680INVENTORY1;
    __SQL_SUM_AGGREGATE_681INVENTORY1_map __SQL_SUM_AGGREGATE_681INVENTORY1;
    __SQL_SUM_AGGREGATE_682INVENTORY1_map __SQL_SUM_AGGREGATE_682INVENTORY1;
    __SQL_SUM_AGGREGATE_683INVENTORY1_map __SQL_SUM_AGGREGATE_683INVENTORY1;
    __SQL_SUM_AGGREGATE_694INVENTORY1_map __SQL_SUM_AGGREGATE_694INVENTORY1;
    __SQL_SUM_AGGREGATE_695INVENTORY1_map __SQL_SUM_AGGREGATE_695INVENTORY1;
    __SQL_SUM_AGGREGATE_696INVENTORY1_map __SQL_SUM_AGGREGATE_696INVENTORY1;
    __SQL_SUM_AGGREGATE_697INVENTORY1_map __SQL_SUM_AGGREGATE_697INVENTORY1;
    __SQL_SUM_AGGREGATE_698INVENTORY1_map __SQL_SUM_AGGREGATE_698INVENTORY1;
    __SQL_SUM_AGGREGATE_699INVENTORY1_map __SQL_SUM_AGGREGATE_699INVENTORY1;
    __SQL_SUM_AGGREGATE_700INVENTORY1_map __SQL_SUM_AGGREGATE_700INVENTORY1;
    __SQL_SUM_AGGREGATE_701INVENTORY1_map __SQL_SUM_AGGREGATE_701INVENTORY1;
    __SQL_SUM_AGGREGATE_702INVENTORY1_map __SQL_SUM_AGGREGATE_702INVENTORY1;
    __SQL_SUM_AGGREGATE_703INVENTORY1_map __SQL_SUM_AGGREGATE_703INVENTORY1;
    __SQL_SUM_AGGREGATE_704INVENTORY1_map __SQL_SUM_AGGREGATE_704INVENTORY1;
    __SQL_SUM_AGGREGATE_705INVENTORY1_map __SQL_SUM_AGGREGATE_705INVENTORY1;
    __SQL_SUM_AGGREGATE_716INVENTORY1_map __SQL_SUM_AGGREGATE_716INVENTORY1;
    __SQL_SUM_AGGREGATE_717INVENTORY1_map __SQL_SUM_AGGREGATE_717INVENTORY1;
    __SQL_SUM_AGGREGATE_718INVENTORY1_map __SQL_SUM_AGGREGATE_718INVENTORY1;
    __SQL_SUM_AGGREGATE_719INVENTORY1_map __SQL_SUM_AGGREGATE_719INVENTORY1;
    __SQL_SUM_AGGREGATE_720INVENTORY1_map __SQL_SUM_AGGREGATE_720INVENTORY1;
    __SQL_SUM_AGGREGATE_721INVENTORY1_map __SQL_SUM_AGGREGATE_721INVENTORY1;
    __SQL_SUM_AGGREGATE_722INVENTORY1_map __SQL_SUM_AGGREGATE_722INVENTORY1;
    __SQL_SUM_AGGREGATE_723INVENTORY1_map __SQL_SUM_AGGREGATE_723INVENTORY1;
    __SQL_SUM_AGGREGATE_724INVENTORY1_map __SQL_SUM_AGGREGATE_724INVENTORY1;
    __SQL_SUM_AGGREGATE_725INVENTORY1_map __SQL_SUM_AGGREGATE_725INVENTORY1;
    __SQL_SUM_AGGREGATE_726INVENTORY1_map __SQL_SUM_AGGREGATE_726INVENTORY1;
    __SQL_SUM_AGGREGATE_737INVENTORY1_map __SQL_SUM_AGGREGATE_737INVENTORY1;
    __SQL_SUM_AGGREGATE_738INVENTORY1_map __SQL_SUM_AGGREGATE_738INVENTORY1;
    __SQL_SUM_AGGREGATE_739INVENTORY1_map __SQL_SUM_AGGREGATE_739INVENTORY1;
    __SQL_SUM_AGGREGATE_740INVENTORY1_map __SQL_SUM_AGGREGATE_740INVENTORY1;
    __SQL_SUM_AGGREGATE_741INVENTORY1_map __SQL_SUM_AGGREGATE_741INVENTORY1;
    __SQL_SUM_AGGREGATE_742INVENTORY1_map __SQL_SUM_AGGREGATE_742INVENTORY1;
    __SQL_SUM_AGGREGATE_743INVENTORY1_map __SQL_SUM_AGGREGATE_743INVENTORY1;
    __SQL_SUM_AGGREGATE_744INVENTORY1_map __SQL_SUM_AGGREGATE_744INVENTORY1;
    __SQL_SUM_AGGREGATE_745INVENTORY1_map __SQL_SUM_AGGREGATE_745INVENTORY1;
    __SQL_SUM_AGGREGATE_746INVENTORY1_map __SQL_SUM_AGGREGATE_746INVENTORY1;
    __SQL_SUM_AGGREGATE_757INVENTORY1_map __SQL_SUM_AGGREGATE_757INVENTORY1;
    __SQL_SUM_AGGREGATE_758INVENTORY1_map __SQL_SUM_AGGREGATE_758INVENTORY1;
    __SQL_SUM_AGGREGATE_759INVENTORY1_map __SQL_SUM_AGGREGATE_759INVENTORY1;
    __SQL_SUM_AGGREGATE_760INVENTORY1_map __SQL_SUM_AGGREGATE_760INVENTORY1;
    __SQL_SUM_AGGREGATE_761INVENTORY1_map __SQL_SUM_AGGREGATE_761INVENTORY1;
    __SQL_SUM_AGGREGATE_762INVENTORY1_map __SQL_SUM_AGGREGATE_762INVENTORY1;
    __SQL_SUM_AGGREGATE_763INVENTORY1_map __SQL_SUM_AGGREGATE_763INVENTORY1;
    __SQL_SUM_AGGREGATE_764INVENTORY1_map __SQL_SUM_AGGREGATE_764INVENTORY1;
    __SQL_SUM_AGGREGATE_765INVENTORY1_map __SQL_SUM_AGGREGATE_765INVENTORY1;
    __SQL_SUM_AGGREGATE_776INVENTORY1_map __SQL_SUM_AGGREGATE_776INVENTORY1;
    __SQL_SUM_AGGREGATE_777INVENTORY1_map __SQL_SUM_AGGREGATE_777INVENTORY1;
    __SQL_SUM_AGGREGATE_778INVENTORY1_map __SQL_SUM_AGGREGATE_778INVENTORY1;
    __SQL_SUM_AGGREGATE_779INVENTORY1_map __SQL_SUM_AGGREGATE_779INVENTORY1;
    __SQL_SUM_AGGREGATE_780INVENTORY1_map __SQL_SUM_AGGREGATE_780INVENTORY1;
    __SQL_SUM_AGGREGATE_781INVENTORY1_map __SQL_SUM_AGGREGATE_781INVENTORY1;
    __SQL_SUM_AGGREGATE_782INVENTORY1_map __SQL_SUM_AGGREGATE_782INVENTORY1;
    __SQL_SUM_AGGREGATE_783INVENTORY1_map __SQL_SUM_AGGREGATE_783INVENTORY1;
    __SQL_SUM_AGGREGATE_794INVENTORY1_map __SQL_SUM_AGGREGATE_794INVENTORY1;
    __SQL_SUM_AGGREGATE_795INVENTORY1_map __SQL_SUM_AGGREGATE_795INVENTORY1;
    __SQL_SUM_AGGREGATE_796INVENTORY1_map __SQL_SUM_AGGREGATE_796INVENTORY1;
    __SQL_SUM_AGGREGATE_797INVENTORY1_map __SQL_SUM_AGGREGATE_797INVENTORY1;
    __SQL_SUM_AGGREGATE_798INVENTORY1_map __SQL_SUM_AGGREGATE_798INVENTORY1;
    __SQL_SUM_AGGREGATE_799INVENTORY1_map __SQL_SUM_AGGREGATE_799INVENTORY1;
    __SQL_SUM_AGGREGATE_800INVENTORY1_map __SQL_SUM_AGGREGATE_800INVENTORY1;
    __SQL_SUM_AGGREGATE_811INVENTORY1_map __SQL_SUM_AGGREGATE_811INVENTORY1;
    __SQL_SUM_AGGREGATE_812INVENTORY1_map __SQL_SUM_AGGREGATE_812INVENTORY1;
    __SQL_SUM_AGGREGATE_813INVENTORY1_map __SQL_SUM_AGGREGATE_813INVENTORY1;
    __SQL_SUM_AGGREGATE_814INVENTORY1_map __SQL_SUM_AGGREGATE_814INVENTORY1;
    __SQL_SUM_AGGREGATE_815INVENTORY1_map __SQL_SUM_AGGREGATE_815INVENTORY1;
    __SQL_SUM_AGGREGATE_816INVENTORY1_map __SQL_SUM_AGGREGATE_816INVENTORY1;
    __SQL_SUM_AGGREGATE_827INVENTORY1_map __SQL_SUM_AGGREGATE_827INVENTORY1;
    __SQL_SUM_AGGREGATE_828INVENTORY1_map __SQL_SUM_AGGREGATE_828INVENTORY1;
    __SQL_SUM_AGGREGATE_829INVENTORY1_map __SQL_SUM_AGGREGATE_829INVENTORY1;
    __SQL_SUM_AGGREGATE_830INVENTORY1_map __SQL_SUM_AGGREGATE_830INVENTORY1;
    __SQL_SUM_AGGREGATE_831INVENTORY1_map __SQL_SUM_AGGREGATE_831INVENTORY1;
    __SQL_SUM_AGGREGATE_842INVENTORY1_map __SQL_SUM_AGGREGATE_842INVENTORY1;
    __SQL_SUM_AGGREGATE_843INVENTORY1_map __SQL_SUM_AGGREGATE_843INVENTORY1;
    __SQL_SUM_AGGREGATE_844INVENTORY1_map __SQL_SUM_AGGREGATE_844INVENTORY1;
    __SQL_SUM_AGGREGATE_845INVENTORY1_map __SQL_SUM_AGGREGATE_845INVENTORY1;
    __SQL_SUM_AGGREGATE_856INVENTORY1_map __SQL_SUM_AGGREGATE_856INVENTORY1;
    __SQL_SUM_AGGREGATE_857INVENTORY1_map __SQL_SUM_AGGREGATE_857INVENTORY1;
    __SQL_SUM_AGGREGATE_858INVENTORY1_map __SQL_SUM_AGGREGATE_858INVENTORY1;
    __SQL_SUM_AGGREGATE_869INVENTORY1_map __SQL_SUM_AGGREGATE_869INVENTORY1;
    __SQL_SUM_AGGREGATE_870INVENTORY1_map __SQL_SUM_AGGREGATE_870INVENTORY1;
    __SQL_SUM_AGGREGATE_881INVENTORY1_map __SQL_SUM_AGGREGATE_881INVENTORY1;
    __SQL_SUM_AGGREGATE_892INVENTORY2_map __SQL_SUM_AGGREGATE_892INVENTORY2;
    __SQL_SUM_AGGREGATE_893INVENTORY2_map __SQL_SUM_AGGREGATE_893INVENTORY2;
    __SQL_SUM_AGGREGATE_894INVENTORY2_map __SQL_SUM_AGGREGATE_894INVENTORY2;
    __SQL_SUM_AGGREGATE_895INVENTORY2_map __SQL_SUM_AGGREGATE_895INVENTORY2;
    __SQL_SUM_AGGREGATE_902INVENTORY2_map __SQL_SUM_AGGREGATE_902INVENTORY2;
    __SQL_SUM_AGGREGATE_903INVENTORY2_map __SQL_SUM_AGGREGATE_903INVENTORY2;
    __SQL_SUM_AGGREGATE_904INVENTORY2_map __SQL_SUM_AGGREGATE_904INVENTORY2;
    __SQL_SUM_AGGREGATE_911INVENTORY2_map __SQL_SUM_AGGREGATE_911INVENTORY2;
    __SQL_SUM_AGGREGATE_912INVENTORY2_map __SQL_SUM_AGGREGATE_912INVENTORY2;
    __SQL_SUM_AGGREGATE_919INVENTORY2_map __SQL_SUM_AGGREGATE_919INVENTORY2;
    __SQL_SUM_AGGREGATE_926INVENTORY3_map __SQL_SUM_AGGREGATE_926INVENTORY3;
    __SQL_SUM_AGGREGATE_927INVENTORY3_map __SQL_SUM_AGGREGATE_927INVENTORY3;
    __SQL_SUM_AGGREGATE_928INVENTORY3_map __SQL_SUM_AGGREGATE_928INVENTORY3;
    __SQL_SUM_AGGREGATE_929INVENTORY3_map __SQL_SUM_AGGREGATE_929INVENTORY3;
    __SQL_SUM_AGGREGATE_930INVENTORY3_map __SQL_SUM_AGGREGATE_930INVENTORY3;
    __SQL_SUM_AGGREGATE_931INVENTORY3_map __SQL_SUM_AGGREGATE_931INVENTORY3;
    __SQL_SUM_AGGREGATE_932INVENTORY3_map __SQL_SUM_AGGREGATE_932INVENTORY3;
    __SQL_SUM_AGGREGATE_933INVENTORY3_map __SQL_SUM_AGGREGATE_933INVENTORY3;
    __SQL_SUM_AGGREGATE_934INVENTORY3_map __SQL_SUM_AGGREGATE_934INVENTORY3;
    __SQL_SUM_AGGREGATE_935INVENTORY3_map __SQL_SUM_AGGREGATE_935INVENTORY3;
    __SQL_SUM_AGGREGATE_936INVENTORY3_map __SQL_SUM_AGGREGATE_936INVENTORY3;
    __SQL_SUM_AGGREGATE_937INVENTORY3_map __SQL_SUM_AGGREGATE_937INVENTORY3;
    __SQL_SUM_AGGREGATE_938INVENTORY3_map __SQL_SUM_AGGREGATE_938INVENTORY3;
    __SQL_SUM_AGGREGATE_939INVENTORY3_map __SQL_SUM_AGGREGATE_939INVENTORY3;
    __SQL_SUM_AGGREGATE_940INVENTORY3_map __SQL_SUM_AGGREGATE_940INVENTORY3;
    __SQL_SUM_AGGREGATE_941INVENTORY3_map __SQL_SUM_AGGREGATE_941INVENTORY3;
    __SQL_SUM_AGGREGATE_942INVENTORY3_map __SQL_SUM_AGGREGATE_942INVENTORY3;
    __SQL_SUM_AGGREGATE_943INVENTORY3_map __SQL_SUM_AGGREGATE_943INVENTORY3;
    __SQL_SUM_AGGREGATE_944INVENTORY3_map __SQL_SUM_AGGREGATE_944INVENTORY3;
    __SQL_SUM_AGGREGATE_945INVENTORY3_map __SQL_SUM_AGGREGATE_945INVENTORY3;
    __SQL_SUM_AGGREGATE_946INVENTORY3_map __SQL_SUM_AGGREGATE_946INVENTORY3;
    
    
  
  };
}
        