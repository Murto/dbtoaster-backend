#include <sys/time.h>
#include "macro.hpp"
#include "types.hpp"
#include "functions.hpp"
#include "hash.hpp"
#include "hashmap.hpp"
#include "serialization.hpp"

#define ELEM_SEPARATOR "\n\t\t\t"

namespace dbtoaster {
  
  /* Definitions of auxiliary maps for storing materialized views. */
  struct DATE_DIM_entry {
    long DATE_DIM_D_DATE_SK; STRING_TYPE DATE_DIM_D_DATE_ID; date DATE_DIM_D_DATE; long DATE_DIM_D_MONTH_SEQ; long DATE_DIM_D_WEEK_SEQ; long DATE_DIM_D_QUARTER_SEQ; long DATE_DIM_D_YEAR; long DATE_DIM_D_DOW; long DATE_DIM_D_MOY; long DATE_DIM_D_DOM; long DATE_DIM_D_QOY; long DATE_DIM_D_FY_YEAR; long DATE_DIM_D_FY_QUARTER_SEQ; long DATE_DIM_D_FY_WEEK_SEQ; STRING_TYPE DATE_DIM_D_DAY_NAME; STRING_TYPE DATE_DIM_D_QUARTER_NAME; STRING_TYPE DATE_DIM_D_HOLIDAY; STRING_TYPE DATE_DIM_D_WEEKEND; STRING_TYPE DATE_DIM_D_FOLLOWING_HOLIDAY; long DATE_DIM_D_FIRST_DOM; long DATE_DIM_D_LAST_DOM; long DATE_DIM_D_SAME_DAY_LY; long DATE_DIM_D_SAME_DAY_LQ; STRING_TYPE DATE_DIM_D_CURRENT_DAY; STRING_TYPE DATE_DIM_D_CURRENT_WEEK; STRING_TYPE DATE_DIM_D_CURRENT_MONTH; STRING_TYPE DATE_DIM_D_CURRENT_QUARTER; STRING_TYPE DATE_DIM_D_CURRENT_YEAR; long __av; 
    explicit DATE_DIM_entry() { /*DATE_DIM_D_DATE_SK = 0L; DATE_DIM_D_DATE_ID = ""; DATE_DIM_D_DATE = 00000000; DATE_DIM_D_MONTH_SEQ = 0L; DATE_DIM_D_WEEK_SEQ = 0L; DATE_DIM_D_QUARTER_SEQ = 0L; DATE_DIM_D_YEAR = 0L; DATE_DIM_D_DOW = 0L; DATE_DIM_D_MOY = 0L; DATE_DIM_D_DOM = 0L; DATE_DIM_D_QOY = 0L; DATE_DIM_D_FY_YEAR = 0L; DATE_DIM_D_FY_QUARTER_SEQ = 0L; DATE_DIM_D_FY_WEEK_SEQ = 0L; DATE_DIM_D_DAY_NAME = ""; DATE_DIM_D_QUARTER_NAME = ""; DATE_DIM_D_HOLIDAY = ""; DATE_DIM_D_WEEKEND = ""; DATE_DIM_D_FOLLOWING_HOLIDAY = ""; DATE_DIM_D_FIRST_DOM = 0L; DATE_DIM_D_LAST_DOM = 0L; DATE_DIM_D_SAME_DAY_LY = 0L; DATE_DIM_D_SAME_DAY_LQ = 0L; DATE_DIM_D_CURRENT_DAY = ""; DATE_DIM_D_CURRENT_WEEK = ""; DATE_DIM_D_CURRENT_MONTH = ""; DATE_DIM_D_CURRENT_QUARTER = ""; DATE_DIM_D_CURRENT_YEAR = ""; __av = 0L; */ }
    explicit DATE_DIM_entry(const long c0, const STRING_TYPE& c1, const date c2, const long c3, const long c4, const long c5, const long c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const STRING_TYPE& c14, const STRING_TYPE& c15, const STRING_TYPE& c16, const STRING_TYPE& c17, const STRING_TYPE& c18, const long c19, const long c20, const long c21, const long c22, const STRING_TYPE& c23, const STRING_TYPE& c24, const STRING_TYPE& c25, const STRING_TYPE& c26, const STRING_TYPE& c27, const long c28) { DATE_DIM_D_DATE_SK = c0; DATE_DIM_D_DATE_ID = c1; DATE_DIM_D_DATE = c2; DATE_DIM_D_MONTH_SEQ = c3; DATE_DIM_D_WEEK_SEQ = c4; DATE_DIM_D_QUARTER_SEQ = c5; DATE_DIM_D_YEAR = c6; DATE_DIM_D_DOW = c7; DATE_DIM_D_MOY = c8; DATE_DIM_D_DOM = c9; DATE_DIM_D_QOY = c10; DATE_DIM_D_FY_YEAR = c11; DATE_DIM_D_FY_QUARTER_SEQ = c12; DATE_DIM_D_FY_WEEK_SEQ = c13; DATE_DIM_D_DAY_NAME = c14; DATE_DIM_D_QUARTER_NAME = c15; DATE_DIM_D_HOLIDAY = c16; DATE_DIM_D_WEEKEND = c17; DATE_DIM_D_FOLLOWING_HOLIDAY = c18; DATE_DIM_D_FIRST_DOM = c19; DATE_DIM_D_LAST_DOM = c20; DATE_DIM_D_SAME_DAY_LY = c21; DATE_DIM_D_SAME_DAY_LQ = c22; DATE_DIM_D_CURRENT_DAY = c23; DATE_DIM_D_CURRENT_WEEK = c24; DATE_DIM_D_CURRENT_MONTH = c25; DATE_DIM_D_CURRENT_QUARTER = c26; DATE_DIM_D_CURRENT_YEAR = c27; __av = c28; }
    DATE_DIM_entry(const DATE_DIM_entry& other) : DATE_DIM_D_DATE_SK( other.DATE_DIM_D_DATE_SK ), DATE_DIM_D_DATE_ID( other.DATE_DIM_D_DATE_ID ), DATE_DIM_D_DATE( other.DATE_DIM_D_DATE ), DATE_DIM_D_MONTH_SEQ( other.DATE_DIM_D_MONTH_SEQ ), DATE_DIM_D_WEEK_SEQ( other.DATE_DIM_D_WEEK_SEQ ), DATE_DIM_D_QUARTER_SEQ( other.DATE_DIM_D_QUARTER_SEQ ), DATE_DIM_D_YEAR( other.DATE_DIM_D_YEAR ), DATE_DIM_D_DOW( other.DATE_DIM_D_DOW ), DATE_DIM_D_MOY( other.DATE_DIM_D_MOY ), DATE_DIM_D_DOM( other.DATE_DIM_D_DOM ), DATE_DIM_D_QOY( other.DATE_DIM_D_QOY ), DATE_DIM_D_FY_YEAR( other.DATE_DIM_D_FY_YEAR ), DATE_DIM_D_FY_QUARTER_SEQ( other.DATE_DIM_D_FY_QUARTER_SEQ ), DATE_DIM_D_FY_WEEK_SEQ( other.DATE_DIM_D_FY_WEEK_SEQ ), DATE_DIM_D_DAY_NAME( other.DATE_DIM_D_DAY_NAME ), DATE_DIM_D_QUARTER_NAME( other.DATE_DIM_D_QUARTER_NAME ), DATE_DIM_D_HOLIDAY( other.DATE_DIM_D_HOLIDAY ), DATE_DIM_D_WEEKEND( other.DATE_DIM_D_WEEKEND ), DATE_DIM_D_FOLLOWING_HOLIDAY( other.DATE_DIM_D_FOLLOWING_HOLIDAY ), DATE_DIM_D_FIRST_DOM( other.DATE_DIM_D_FIRST_DOM ), DATE_DIM_D_LAST_DOM( other.DATE_DIM_D_LAST_DOM ), DATE_DIM_D_SAME_DAY_LY( other.DATE_DIM_D_SAME_DAY_LY ), DATE_DIM_D_SAME_DAY_LQ( other.DATE_DIM_D_SAME_DAY_LQ ), DATE_DIM_D_CURRENT_DAY( other.DATE_DIM_D_CURRENT_DAY ), DATE_DIM_D_CURRENT_WEEK( other.DATE_DIM_D_CURRENT_WEEK ), DATE_DIM_D_CURRENT_MONTH( other.DATE_DIM_D_CURRENT_MONTH ), DATE_DIM_D_CURRENT_QUARTER( other.DATE_DIM_D_CURRENT_QUARTER ), DATE_DIM_D_CURRENT_YEAR( other.DATE_DIM_D_CURRENT_YEAR ), __av( other.__av ) {}
    FORCE_INLINE DATE_DIM_entry& modify(const long c0, const STRING_TYPE& c1, const date c2, const long c3, const long c4, const long c5, const long c6, const long c7, const long c8, const long c9, const long c10, const long c11, const long c12, const long c13, const STRING_TYPE& c14, const STRING_TYPE& c15, const STRING_TYPE& c16, const STRING_TYPE& c17, const STRING_TYPE& c18, const long c19, const long c20, const long c21, const long c22, const STRING_TYPE& c23, const STRING_TYPE& c24, const STRING_TYPE& c25, const STRING_TYPE& c26, const STRING_TYPE& c27) { DATE_DIM_D_DATE_SK = c0; DATE_DIM_D_DATE_ID = c1; DATE_DIM_D_DATE = c2; DATE_DIM_D_MONTH_SEQ = c3; DATE_DIM_D_WEEK_SEQ = c4; DATE_DIM_D_QUARTER_SEQ = c5; DATE_DIM_D_YEAR = c6; DATE_DIM_D_DOW = c7; DATE_DIM_D_MOY = c8; DATE_DIM_D_DOM = c9; DATE_DIM_D_QOY = c10; DATE_DIM_D_FY_YEAR = c11; DATE_DIM_D_FY_QUARTER_SEQ = c12; DATE_DIM_D_FY_WEEK_SEQ = c13; DATE_DIM_D_DAY_NAME = c14; DATE_DIM_D_QUARTER_NAME = c15; DATE_DIM_D_HOLIDAY = c16; DATE_DIM_D_WEEKEND = c17; DATE_DIM_D_FOLLOWING_HOLIDAY = c18; DATE_DIM_D_FIRST_DOM = c19; DATE_DIM_D_LAST_DOM = c20; DATE_DIM_D_SAME_DAY_LY = c21; DATE_DIM_D_SAME_DAY_LQ = c22; DATE_DIM_D_CURRENT_DAY = c23; DATE_DIM_D_CURRENT_WEEK = c24; DATE_DIM_D_CURRENT_MONTH = c25; DATE_DIM_D_CURRENT_QUARTER = c26; DATE_DIM_D_CURRENT_YEAR = c27;  return *this; }
    FORCE_INLINE DATE_DIM_entry& modify6(const long c6) { DATE_DIM_D_YEAR = c6;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DATE_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DATE_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DATE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_MONTH_SEQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_WEEK_SEQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_QUARTER_SEQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DOW);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_MOY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DOM);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_QOY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_FY_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_FY_QUARTER_SEQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_FY_WEEK_SEQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_DAY_NAME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_QUARTER_NAME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_HOLIDAY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_WEEKEND);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_FOLLOWING_HOLIDAY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_FIRST_DOM);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_LAST_DOM);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_SAME_DAY_LY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_SAME_DAY_LQ);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_CURRENT_DAY);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_CURRENT_WEEK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_CURRENT_MONTH);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_CURRENT_QUARTER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, DATE_DIM_D_CURRENT_YEAR);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct DATE_DIM_mapkey0123456789101112131415161718192021222324252627_idxfn {
    FORCE_INLINE static size_t hash(const DATE_DIM_entry& e) {
      size_t h = 0;
      hash_combine(h, e.DATE_DIM_D_DATE_SK);
      hash_combine(h, e.DATE_DIM_D_DATE_ID);
      hash_combine(h, e.DATE_DIM_D_DATE);
      hash_combine(h, e.DATE_DIM_D_MONTH_SEQ);
      hash_combine(h, e.DATE_DIM_D_WEEK_SEQ);
      hash_combine(h, e.DATE_DIM_D_QUARTER_SEQ);
      hash_combine(h, e.DATE_DIM_D_YEAR);
      hash_combine(h, e.DATE_DIM_D_DOW);
      hash_combine(h, e.DATE_DIM_D_MOY);
      hash_combine(h, e.DATE_DIM_D_DOM);
      hash_combine(h, e.DATE_DIM_D_QOY);
      hash_combine(h, e.DATE_DIM_D_FY_YEAR);
      hash_combine(h, e.DATE_DIM_D_FY_QUARTER_SEQ);
      hash_combine(h, e.DATE_DIM_D_FY_WEEK_SEQ);
      hash_combine(h, e.DATE_DIM_D_DAY_NAME);
      hash_combine(h, e.DATE_DIM_D_QUARTER_NAME);
      hash_combine(h, e.DATE_DIM_D_HOLIDAY);
      hash_combine(h, e.DATE_DIM_D_WEEKEND);
      hash_combine(h, e.DATE_DIM_D_FOLLOWING_HOLIDAY);
      hash_combine(h, e.DATE_DIM_D_FIRST_DOM);
      hash_combine(h, e.DATE_DIM_D_LAST_DOM);
      hash_combine(h, e.DATE_DIM_D_SAME_DAY_LY);
      hash_combine(h, e.DATE_DIM_D_SAME_DAY_LQ);
      hash_combine(h, e.DATE_DIM_D_CURRENT_DAY);
      hash_combine(h, e.DATE_DIM_D_CURRENT_WEEK);
      hash_combine(h, e.DATE_DIM_D_CURRENT_MONTH);
      hash_combine(h, e.DATE_DIM_D_CURRENT_QUARTER);
      hash_combine(h, e.DATE_DIM_D_CURRENT_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const DATE_DIM_entry& x, const DATE_DIM_entry& y) {
      return x.DATE_DIM_D_DATE_SK == y.DATE_DIM_D_DATE_SK && x.DATE_DIM_D_DATE_ID == y.DATE_DIM_D_DATE_ID && x.DATE_DIM_D_DATE == y.DATE_DIM_D_DATE && x.DATE_DIM_D_MONTH_SEQ == y.DATE_DIM_D_MONTH_SEQ && x.DATE_DIM_D_WEEK_SEQ == y.DATE_DIM_D_WEEK_SEQ && x.DATE_DIM_D_QUARTER_SEQ == y.DATE_DIM_D_QUARTER_SEQ && x.DATE_DIM_D_YEAR == y.DATE_DIM_D_YEAR && x.DATE_DIM_D_DOW == y.DATE_DIM_D_DOW && x.DATE_DIM_D_MOY == y.DATE_DIM_D_MOY && x.DATE_DIM_D_DOM == y.DATE_DIM_D_DOM && x.DATE_DIM_D_QOY == y.DATE_DIM_D_QOY && x.DATE_DIM_D_FY_YEAR == y.DATE_DIM_D_FY_YEAR && x.DATE_DIM_D_FY_QUARTER_SEQ == y.DATE_DIM_D_FY_QUARTER_SEQ && x.DATE_DIM_D_FY_WEEK_SEQ == y.DATE_DIM_D_FY_WEEK_SEQ && x.DATE_DIM_D_DAY_NAME == y.DATE_DIM_D_DAY_NAME && x.DATE_DIM_D_QUARTER_NAME == y.DATE_DIM_D_QUARTER_NAME && x.DATE_DIM_D_HOLIDAY == y.DATE_DIM_D_HOLIDAY && x.DATE_DIM_D_WEEKEND == y.DATE_DIM_D_WEEKEND && x.DATE_DIM_D_FOLLOWING_HOLIDAY == y.DATE_DIM_D_FOLLOWING_HOLIDAY && x.DATE_DIM_D_FIRST_DOM == y.DATE_DIM_D_FIRST_DOM && x.DATE_DIM_D_LAST_DOM == y.DATE_DIM_D_LAST_DOM && x.DATE_DIM_D_SAME_DAY_LY == y.DATE_DIM_D_SAME_DAY_LY && x.DATE_DIM_D_SAME_DAY_LQ == y.DATE_DIM_D_SAME_DAY_LQ && x.DATE_DIM_D_CURRENT_DAY == y.DATE_DIM_D_CURRENT_DAY && x.DATE_DIM_D_CURRENT_WEEK == y.DATE_DIM_D_CURRENT_WEEK && x.DATE_DIM_D_CURRENT_MONTH == y.DATE_DIM_D_CURRENT_MONTH && x.DATE_DIM_D_CURRENT_QUARTER == y.DATE_DIM_D_CURRENT_QUARTER && x.DATE_DIM_D_CURRENT_YEAR == y.DATE_DIM_D_CURRENT_YEAR;
    }
  };
  
  struct DATE_DIM_mapkey6_idxfn {
    FORCE_INLINE static size_t hash(const DATE_DIM_entry& e) {
      size_t h = 0;
      hash_combine(h, e.DATE_DIM_D_YEAR);
      return h;
    }
    FORCE_INLINE static bool equals(const DATE_DIM_entry& x, const DATE_DIM_entry& y) {
      return x.DATE_DIM_D_YEAR == y.DATE_DIM_D_YEAR;
    }
  };
  
  typedef MultiHashMap<DATE_DIM_entry,long,
    HashIndex<DATE_DIM_entry,long,DATE_DIM_mapkey0123456789101112131415161718192021222324252627_idxfn,true>,
    HashIndex<DATE_DIM_entry,long,DATE_DIM_mapkey6_idxfn,false>
  > DATE_DIM_map;
  typedef HashIndex<DATE_DIM_entry,long,DATE_DIM_mapkey0123456789101112131415161718192021222324252627_idxfn,true> HashIndex_DATE_DIM_map_0123456789101112131415161718192021222324252627;
  typedef HashIndex<DATE_DIM_entry,long,DATE_DIM_mapkey6_idxfn,false> HashIndex_DATE_DIM_map_6;
  
  struct CUSTOMER_DEMOGRAPHICS_entry {
    long CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK; STRING_TYPE CUSTOMER_DEMOGRAPHICS_CD_GENDER; STRING_TYPE CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS; STRING_TYPE CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS; long CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE; STRING_TYPE CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING; long CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT; long CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT; long CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT; long __av; 
    explicit CUSTOMER_DEMOGRAPHICS_entry() { /*CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK = 0L; CUSTOMER_DEMOGRAPHICS_CD_GENDER = ""; CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS = ""; CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS = ""; CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE = 0L; CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING = ""; CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT = 0L; CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT = 0L; CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT = 0L; __av = 0L; */ }
    explicit CUSTOMER_DEMOGRAPHICS_entry(const long c0, const STRING_TYPE& c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4, const STRING_TYPE& c5, const long c6, const long c7, const long c8, const long c9) { CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK = c0; CUSTOMER_DEMOGRAPHICS_CD_GENDER = c1; CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS = c2; CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS = c3; CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE = c4; CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING = c5; CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT = c6; CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT = c7; CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT = c8; __av = c9; }
    CUSTOMER_DEMOGRAPHICS_entry(const CUSTOMER_DEMOGRAPHICS_entry& other) : CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK( other.CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK ), CUSTOMER_DEMOGRAPHICS_CD_GENDER( other.CUSTOMER_DEMOGRAPHICS_CD_GENDER ), CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS( other.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS ), CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS( other.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS ), CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE( other.CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE ), CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING( other.CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING ), CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT( other.CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT ), CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT( other.CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT ), CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT( other.CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT ), __av( other.__av ) {}
    FORCE_INLINE CUSTOMER_DEMOGRAPHICS_entry& modify(const long c0, const STRING_TYPE& c1, const STRING_TYPE& c2, const STRING_TYPE& c3, const long c4, const STRING_TYPE& c5, const long c6, const long c7, const long c8) { CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK = c0; CUSTOMER_DEMOGRAPHICS_CD_GENDER = c1; CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS = c2; CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS = c3; CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE = c4; CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING = c5; CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT = c6; CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT = c7; CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT = c8;  return *this; }
    FORCE_INLINE CUSTOMER_DEMOGRAPHICS_entry& modify123(const STRING_TYPE& c1, const STRING_TYPE& c2, const STRING_TYPE& c3) { CUSTOMER_DEMOGRAPHICS_CD_GENDER = c1; CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS = c2; CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS = c3;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_GENDER);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct CUSTOMER_DEMOGRAPHICS_mapkey012345678_idxfn {
    FORCE_INLINE static size_t hash(const CUSTOMER_DEMOGRAPHICS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_GENDER);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT);
      return h;
    }
    FORCE_INLINE static bool equals(const CUSTOMER_DEMOGRAPHICS_entry& x, const CUSTOMER_DEMOGRAPHICS_entry& y) {
      return x.CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK == y.CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK && x.CUSTOMER_DEMOGRAPHICS_CD_GENDER == y.CUSTOMER_DEMOGRAPHICS_CD_GENDER && x.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS == y.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS && x.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS == y.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS && x.CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE == y.CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE && x.CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING == y.CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING && x.CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT == y.CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT && x.CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT == y.CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT && x.CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT == y.CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT;
    }
  };
  
  struct CUSTOMER_DEMOGRAPHICS_mapkey123_idxfn {
    FORCE_INLINE static size_t hash(const CUSTOMER_DEMOGRAPHICS_entry& e) {
      size_t h = 0;
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_GENDER);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS);
      hash_combine(h, e.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS);
      return h;
    }
    FORCE_INLINE static bool equals(const CUSTOMER_DEMOGRAPHICS_entry& x, const CUSTOMER_DEMOGRAPHICS_entry& y) {
      return x.CUSTOMER_DEMOGRAPHICS_CD_GENDER == y.CUSTOMER_DEMOGRAPHICS_CD_GENDER && x.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS == y.CUSTOMER_DEMOGRAPHICS_CD_MARITAL_STATUS && x.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS == y.CUSTOMER_DEMOGRAPHICS_CD_EDUCATION_STATUS;
    }
  };
  
  typedef MultiHashMap<CUSTOMER_DEMOGRAPHICS_entry,long,
    HashIndex<CUSTOMER_DEMOGRAPHICS_entry,long,CUSTOMER_DEMOGRAPHICS_mapkey012345678_idxfn,true>,
    HashIndex<CUSTOMER_DEMOGRAPHICS_entry,long,CUSTOMER_DEMOGRAPHICS_mapkey123_idxfn,false>
  > CUSTOMER_DEMOGRAPHICS_map;
  typedef HashIndex<CUSTOMER_DEMOGRAPHICS_entry,long,CUSTOMER_DEMOGRAPHICS_mapkey012345678_idxfn,true> HashIndex_CUSTOMER_DEMOGRAPHICS_map_012345678;
  typedef HashIndex<CUSTOMER_DEMOGRAPHICS_entry,long,CUSTOMER_DEMOGRAPHICS_mapkey123_idxfn,false> HashIndex_CUSTOMER_DEMOGRAPHICS_map_123;
  
  struct PROMOTION_entry {
    long PROMOTION_P_PROMO_SK; STRING_TYPE PROMOTION_P_PROMO_ID; long PROMOTION_P_START_DATE_SK; long PROMOTION_P_END_DATE_SK; long PROMOTION_P_ITEM_SK; DOUBLE_TYPE PROMOTION_P_COST; long PROMOTION_P_RESPONSE_TARGET; STRING_TYPE PROMOTION_P_PROMO_NAME; STRING_TYPE PROMOTION_P_CHANNEL_DMAIL; STRING_TYPE PROMOTION_P_CHANNEL_EMAIL; STRING_TYPE PROMOTION_P_CHANNEL_CATALOG; STRING_TYPE PROMOTION_P_CHANNEL_TV; STRING_TYPE PROMOTION_P_CHANNEL_RADIO; STRING_TYPE PROMOTION_P_CHANNEL_PRESS; STRING_TYPE PROMOTION_P_CHANNEL_EVENT; STRING_TYPE PROMOTION_P_CHANNEL_DEMO; STRING_TYPE PROMOTION_P_CHANNEL_DETAILS; STRING_TYPE PROMOTION_P_PURPOSE; STRING_TYPE PROMOTION_P_DISCOUNT_ACTIVE; long __av; 
    explicit PROMOTION_entry() { /*PROMOTION_P_PROMO_SK = 0L; PROMOTION_P_PROMO_ID = ""; PROMOTION_P_START_DATE_SK = 0L; PROMOTION_P_END_DATE_SK = 0L; PROMOTION_P_ITEM_SK = 0L; PROMOTION_P_COST = 0.0; PROMOTION_P_RESPONSE_TARGET = 0L; PROMOTION_P_PROMO_NAME = ""; PROMOTION_P_CHANNEL_DMAIL = ""; PROMOTION_P_CHANNEL_EMAIL = ""; PROMOTION_P_CHANNEL_CATALOG = ""; PROMOTION_P_CHANNEL_TV = ""; PROMOTION_P_CHANNEL_RADIO = ""; PROMOTION_P_CHANNEL_PRESS = ""; PROMOTION_P_CHANNEL_EVENT = ""; PROMOTION_P_CHANNEL_DEMO = ""; PROMOTION_P_CHANNEL_DETAILS = ""; PROMOTION_P_PURPOSE = ""; PROMOTION_P_DISCOUNT_ACTIVE = ""; __av = 0L; */ }
    explicit PROMOTION_entry(const long c0, const STRING_TYPE& c1, const long c2, const long c3, const long c4, const DOUBLE_TYPE c5, const long c6, const STRING_TYPE& c7, const STRING_TYPE& c8, const STRING_TYPE& c9, const STRING_TYPE& c10, const STRING_TYPE& c11, const STRING_TYPE& c12, const STRING_TYPE& c13, const STRING_TYPE& c14, const STRING_TYPE& c15, const STRING_TYPE& c16, const STRING_TYPE& c17, const STRING_TYPE& c18, const long c19) { PROMOTION_P_PROMO_SK = c0; PROMOTION_P_PROMO_ID = c1; PROMOTION_P_START_DATE_SK = c2; PROMOTION_P_END_DATE_SK = c3; PROMOTION_P_ITEM_SK = c4; PROMOTION_P_COST = c5; PROMOTION_P_RESPONSE_TARGET = c6; PROMOTION_P_PROMO_NAME = c7; PROMOTION_P_CHANNEL_DMAIL = c8; PROMOTION_P_CHANNEL_EMAIL = c9; PROMOTION_P_CHANNEL_CATALOG = c10; PROMOTION_P_CHANNEL_TV = c11; PROMOTION_P_CHANNEL_RADIO = c12; PROMOTION_P_CHANNEL_PRESS = c13; PROMOTION_P_CHANNEL_EVENT = c14; PROMOTION_P_CHANNEL_DEMO = c15; PROMOTION_P_CHANNEL_DETAILS = c16; PROMOTION_P_PURPOSE = c17; PROMOTION_P_DISCOUNT_ACTIVE = c18; __av = c19; }
    PROMOTION_entry(const PROMOTION_entry& other) : PROMOTION_P_PROMO_SK( other.PROMOTION_P_PROMO_SK ), PROMOTION_P_PROMO_ID( other.PROMOTION_P_PROMO_ID ), PROMOTION_P_START_DATE_SK( other.PROMOTION_P_START_DATE_SK ), PROMOTION_P_END_DATE_SK( other.PROMOTION_P_END_DATE_SK ), PROMOTION_P_ITEM_SK( other.PROMOTION_P_ITEM_SK ), PROMOTION_P_COST( other.PROMOTION_P_COST ), PROMOTION_P_RESPONSE_TARGET( other.PROMOTION_P_RESPONSE_TARGET ), PROMOTION_P_PROMO_NAME( other.PROMOTION_P_PROMO_NAME ), PROMOTION_P_CHANNEL_DMAIL( other.PROMOTION_P_CHANNEL_DMAIL ), PROMOTION_P_CHANNEL_EMAIL( other.PROMOTION_P_CHANNEL_EMAIL ), PROMOTION_P_CHANNEL_CATALOG( other.PROMOTION_P_CHANNEL_CATALOG ), PROMOTION_P_CHANNEL_TV( other.PROMOTION_P_CHANNEL_TV ), PROMOTION_P_CHANNEL_RADIO( other.PROMOTION_P_CHANNEL_RADIO ), PROMOTION_P_CHANNEL_PRESS( other.PROMOTION_P_CHANNEL_PRESS ), PROMOTION_P_CHANNEL_EVENT( other.PROMOTION_P_CHANNEL_EVENT ), PROMOTION_P_CHANNEL_DEMO( other.PROMOTION_P_CHANNEL_DEMO ), PROMOTION_P_CHANNEL_DETAILS( other.PROMOTION_P_CHANNEL_DETAILS ), PROMOTION_P_PURPOSE( other.PROMOTION_P_PURPOSE ), PROMOTION_P_DISCOUNT_ACTIVE( other.PROMOTION_P_DISCOUNT_ACTIVE ), __av( other.__av ) {}
    FORCE_INLINE PROMOTION_entry& modify(const long c0, const STRING_TYPE& c1, const long c2, const long c3, const long c4, const DOUBLE_TYPE c5, const long c6, const STRING_TYPE& c7, const STRING_TYPE& c8, const STRING_TYPE& c9, const STRING_TYPE& c10, const STRING_TYPE& c11, const STRING_TYPE& c12, const STRING_TYPE& c13, const STRING_TYPE& c14, const STRING_TYPE& c15, const STRING_TYPE& c16, const STRING_TYPE& c17, const STRING_TYPE& c18) { PROMOTION_P_PROMO_SK = c0; PROMOTION_P_PROMO_ID = c1; PROMOTION_P_START_DATE_SK = c2; PROMOTION_P_END_DATE_SK = c3; PROMOTION_P_ITEM_SK = c4; PROMOTION_P_COST = c5; PROMOTION_P_RESPONSE_TARGET = c6; PROMOTION_P_PROMO_NAME = c7; PROMOTION_P_CHANNEL_DMAIL = c8; PROMOTION_P_CHANNEL_EMAIL = c9; PROMOTION_P_CHANNEL_CATALOG = c10; PROMOTION_P_CHANNEL_TV = c11; PROMOTION_P_CHANNEL_RADIO = c12; PROMOTION_P_CHANNEL_PRESS = c13; PROMOTION_P_CHANNEL_EVENT = c14; PROMOTION_P_CHANNEL_DEMO = c15; PROMOTION_P_CHANNEL_DETAILS = c16; PROMOTION_P_PURPOSE = c17; PROMOTION_P_DISCOUNT_ACTIVE = c18;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_PROMO_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_PROMO_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_START_DATE_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_END_DATE_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_COST);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_RESPONSE_TARGET);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_PROMO_NAME);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_DMAIL);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_EMAIL);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_CATALOG);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_TV);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_RADIO);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_PRESS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_EVENT);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_DEMO);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_CHANNEL_DETAILS);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_PURPOSE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, PROMOTION_P_DISCOUNT_ACTIVE);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct PROMOTION_mapkey0123456789101112131415161718_idxfn {
    FORCE_INLINE static size_t hash(const PROMOTION_entry& e) {
      size_t h = 0;
      hash_combine(h, e.PROMOTION_P_PROMO_SK);
      hash_combine(h, e.PROMOTION_P_PROMO_ID);
      hash_combine(h, e.PROMOTION_P_START_DATE_SK);
      hash_combine(h, e.PROMOTION_P_END_DATE_SK);
      hash_combine(h, e.PROMOTION_P_ITEM_SK);
      hash_combine(h, e.PROMOTION_P_COST);
      hash_combine(h, e.PROMOTION_P_RESPONSE_TARGET);
      hash_combine(h, e.PROMOTION_P_PROMO_NAME);
      hash_combine(h, e.PROMOTION_P_CHANNEL_DMAIL);
      hash_combine(h, e.PROMOTION_P_CHANNEL_EMAIL);
      hash_combine(h, e.PROMOTION_P_CHANNEL_CATALOG);
      hash_combine(h, e.PROMOTION_P_CHANNEL_TV);
      hash_combine(h, e.PROMOTION_P_CHANNEL_RADIO);
      hash_combine(h, e.PROMOTION_P_CHANNEL_PRESS);
      hash_combine(h, e.PROMOTION_P_CHANNEL_EVENT);
      hash_combine(h, e.PROMOTION_P_CHANNEL_DEMO);
      hash_combine(h, e.PROMOTION_P_CHANNEL_DETAILS);
      hash_combine(h, e.PROMOTION_P_PURPOSE);
      hash_combine(h, e.PROMOTION_P_DISCOUNT_ACTIVE);
      return h;
    }
    FORCE_INLINE static bool equals(const PROMOTION_entry& x, const PROMOTION_entry& y) {
      return x.PROMOTION_P_PROMO_SK == y.PROMOTION_P_PROMO_SK && x.PROMOTION_P_PROMO_ID == y.PROMOTION_P_PROMO_ID && x.PROMOTION_P_START_DATE_SK == y.PROMOTION_P_START_DATE_SK && x.PROMOTION_P_END_DATE_SK == y.PROMOTION_P_END_DATE_SK && x.PROMOTION_P_ITEM_SK == y.PROMOTION_P_ITEM_SK && x.PROMOTION_P_COST == y.PROMOTION_P_COST && x.PROMOTION_P_RESPONSE_TARGET == y.PROMOTION_P_RESPONSE_TARGET && x.PROMOTION_P_PROMO_NAME == y.PROMOTION_P_PROMO_NAME && x.PROMOTION_P_CHANNEL_DMAIL == y.PROMOTION_P_CHANNEL_DMAIL && x.PROMOTION_P_CHANNEL_EMAIL == y.PROMOTION_P_CHANNEL_EMAIL && x.PROMOTION_P_CHANNEL_CATALOG == y.PROMOTION_P_CHANNEL_CATALOG && x.PROMOTION_P_CHANNEL_TV == y.PROMOTION_P_CHANNEL_TV && x.PROMOTION_P_CHANNEL_RADIO == y.PROMOTION_P_CHANNEL_RADIO && x.PROMOTION_P_CHANNEL_PRESS == y.PROMOTION_P_CHANNEL_PRESS && x.PROMOTION_P_CHANNEL_EVENT == y.PROMOTION_P_CHANNEL_EVENT && x.PROMOTION_P_CHANNEL_DEMO == y.PROMOTION_P_CHANNEL_DEMO && x.PROMOTION_P_CHANNEL_DETAILS == y.PROMOTION_P_CHANNEL_DETAILS && x.PROMOTION_P_PURPOSE == y.PROMOTION_P_PURPOSE && x.PROMOTION_P_DISCOUNT_ACTIVE == y.PROMOTION_P_DISCOUNT_ACTIVE;
    }
  };
  
  typedef MultiHashMap<PROMOTION_entry,long,
    HashIndex<PROMOTION_entry,long,PROMOTION_mapkey0123456789101112131415161718_idxfn,true>
  > PROMOTION_map;
  typedef HashIndex<PROMOTION_entry,long,PROMOTION_mapkey0123456789101112131415161718_idxfn,true> HashIndex_PROMOTION_map_0123456789101112131415161718;
  
  struct AGG1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG1_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG1_entry(const AGG1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1_entry& x, const AGG1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG1_entry,DOUBLE_TYPE,
    HashIndex<AGG1_entry,DOUBLE_TYPE,AGG1_mapkey0_idxfn,true>
  > AGG1_map;
  typedef HashIndex<AGG1_entry,DOUBLE_TYPE,AGG1_mapkey0_idxfn,true> HashIndex_AGG1_map_0;
  
  struct AGG1ITEM1_L1_2_entry {
    long AGG1ITEMITEM_I_ITEM_SK; long __av; 
    explicit AGG1ITEM1_L1_2_entry() { /*AGG1ITEMITEM_I_ITEM_SK = 0L; __av = 0L; */ }
    explicit AGG1ITEM1_L1_2_entry(const long c0, const long c1) { AGG1ITEMITEM_I_ITEM_SK = c0; __av = c1; }
    AGG1ITEM1_L1_2_entry(const AGG1ITEM1_L1_2_entry& other) : AGG1ITEMITEM_I_ITEM_SK( other.AGG1ITEMITEM_I_ITEM_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG1ITEM1_L1_2_entry& modify(const long c0) { AGG1ITEMITEM_I_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1ITEMITEM_I_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1ITEM1_L1_2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1ITEM1_L1_2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1ITEMITEM_I_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1ITEM1_L1_2_entry& x, const AGG1ITEM1_L1_2_entry& y) {
      return x.AGG1ITEMITEM_I_ITEM_SK == y.AGG1ITEMITEM_I_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG1ITEM1_L1_2_entry,long,
    HashIndex<AGG1ITEM1_L1_2_entry,long,AGG1ITEM1_L1_2_mapkey0_idxfn,true>
  > AGG1ITEM1_L1_2_map;
  typedef HashIndex<AGG1ITEM1_L1_2_entry,long,AGG1ITEM1_L1_2_mapkey0_idxfn,true> HashIndex_AGG1ITEM1_L1_2_map_0;
  
  struct AGG1ITEM1_L1_2STORE_SALES1_entry {
    long AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK; long __av; 
    explicit AGG1ITEM1_L1_2STORE_SALES1_entry() { /*AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK = 0L; __av = 0L; */ }
    explicit AGG1ITEM1_L1_2STORE_SALES1_entry(const long c0, const long c1) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK = c0; __av = c1; }
    AGG1ITEM1_L1_2STORE_SALES1_entry(const AGG1ITEM1_L1_2STORE_SALES1_entry& other) : AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK( other.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG1ITEM1_L1_2STORE_SALES1_entry& modify(const long c0) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1ITEM1_L1_2STORE_SALES1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1ITEM1_L1_2STORE_SALES1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1ITEM1_L1_2STORE_SALES1_entry& x, const AGG1ITEM1_L1_2STORE_SALES1_entry& y) {
      return x.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK == y.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_CDEMO_SK;
    }
  };
  
  typedef MultiHashMap<AGG1ITEM1_L1_2STORE_SALES1_entry,long,
    HashIndex<AGG1ITEM1_L1_2STORE_SALES1_entry,long,AGG1ITEM1_L1_2STORE_SALES1_mapkey0_idxfn,true>
  > AGG1ITEM1_L1_2STORE_SALES1_map;
  typedef HashIndex<AGG1ITEM1_L1_2STORE_SALES1_entry,long,AGG1ITEM1_L1_2STORE_SALES1_mapkey0_idxfn,true> HashIndex_AGG1ITEM1_L1_2STORE_SALES1_map_0;
  
  struct AGG1ITEM1_L1_2STORE_SALES2_entry {
    long AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK; long __av; 
    explicit AGG1ITEM1_L1_2STORE_SALES2_entry() { /*AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK = 0L; __av = 0L; */ }
    explicit AGG1ITEM1_L1_2STORE_SALES2_entry(const long c0, const long c1) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK = c0; __av = c1; }
    AGG1ITEM1_L1_2STORE_SALES2_entry(const AGG1ITEM1_L1_2STORE_SALES2_entry& other) : AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK( other.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG1ITEM1_L1_2STORE_SALES2_entry& modify(const long c0) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1ITEM1_L1_2STORE_SALES2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1ITEM1_L1_2STORE_SALES2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1ITEM1_L1_2STORE_SALES2_entry& x, const AGG1ITEM1_L1_2STORE_SALES2_entry& y) {
      return x.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK == y.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_SOLD_DATE_SK;
    }
  };
  
  typedef MultiHashMap<AGG1ITEM1_L1_2STORE_SALES2_entry,long,
    HashIndex<AGG1ITEM1_L1_2STORE_SALES2_entry,long,AGG1ITEM1_L1_2STORE_SALES2_mapkey0_idxfn,true>
  > AGG1ITEM1_L1_2STORE_SALES2_map;
  typedef HashIndex<AGG1ITEM1_L1_2STORE_SALES2_entry,long,AGG1ITEM1_L1_2STORE_SALES2_mapkey0_idxfn,true> HashIndex_AGG1ITEM1_L1_2STORE_SALES2_map_0;
  
  struct AGG1ITEM1_L1_2STORE_SALES3_entry {
    long AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK; long __av; 
    explicit AGG1ITEM1_L1_2STORE_SALES3_entry() { /*AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK = 0L; __av = 0L; */ }
    explicit AGG1ITEM1_L1_2STORE_SALES3_entry(const long c0, const long c1) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK = c0; __av = c1; }
    AGG1ITEM1_L1_2STORE_SALES3_entry(const AGG1ITEM1_L1_2STORE_SALES3_entry& other) : AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK( other.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG1ITEM1_L1_2STORE_SALES3_entry& modify(const long c0) { AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1ITEM1_L1_2STORE_SALES3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1ITEM1_L1_2STORE_SALES3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1ITEM1_L1_2STORE_SALES3_entry& x, const AGG1ITEM1_L1_2STORE_SALES3_entry& y) {
      return x.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK == y.AGG1ITEM1_L1_2STORE_SALESSTORE_SALES_SS_PROMO_SK;
    }
  };
  
  typedef MultiHashMap<AGG1ITEM1_L1_2STORE_SALES3_entry,long,
    HashIndex<AGG1ITEM1_L1_2STORE_SALES3_entry,long,AGG1ITEM1_L1_2STORE_SALES3_mapkey0_idxfn,true>
  > AGG1ITEM1_L1_2STORE_SALES3_map;
  typedef HashIndex<AGG1ITEM1_L1_2STORE_SALES3_entry,long,AGG1ITEM1_L1_2STORE_SALES3_mapkey0_idxfn,true> HashIndex_AGG1ITEM1_L1_2STORE_SALES3_map_0;
  
  struct AGG1ITEM7_entry {
    long AGG1ITEMITEM_I_ITEM_SK; long __av; 
    explicit AGG1ITEM7_entry() { /*AGG1ITEMITEM_I_ITEM_SK = 0L; __av = 0L; */ }
    explicit AGG1ITEM7_entry(const long c0, const long c1) { AGG1ITEMITEM_I_ITEM_SK = c0; __av = c1; }
    AGG1ITEM7_entry(const AGG1ITEM7_entry& other) : AGG1ITEMITEM_I_ITEM_SK( other.AGG1ITEMITEM_I_ITEM_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG1ITEM7_entry& modify(const long c0) { AGG1ITEMITEM_I_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1ITEMITEM_I_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1ITEM7_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1ITEM7_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1ITEMITEM_I_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1ITEM7_entry& x, const AGG1ITEM7_entry& y) {
      return x.AGG1ITEMITEM_I_ITEM_SK == y.AGG1ITEMITEM_I_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG1ITEM7_entry,long,
    HashIndex<AGG1ITEM7_entry,long,AGG1ITEM7_mapkey0_idxfn,true>
  > AGG1ITEM7_map;
  typedef HashIndex<AGG1ITEM7_entry,long,AGG1ITEM7_mapkey0_idxfn,true> HashIndex_AGG1ITEM7_map_0;
  
  struct AGG1STORE_SALES1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; long __av; 
    explicit AGG1STORE_SALES1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0L; */ }
    explicit AGG1STORE_SALES1_entry(const STRING_TYPE& c0, const long c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG1STORE_SALES1_entry(const AGG1STORE_SALES1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG1STORE_SALES1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1STORE_SALES1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1STORE_SALES1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1STORE_SALES1_entry& x, const AGG1STORE_SALES1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG1STORE_SALES1_entry,long,
    HashIndex<AGG1STORE_SALES1_entry,long,AGG1STORE_SALES1_mapkey0_idxfn,true>
  > AGG1STORE_SALES1_map;
  typedef HashIndex<AGG1STORE_SALES1_entry,long,AGG1STORE_SALES1_mapkey0_idxfn,true> HashIndex_AGG1STORE_SALES1_map_0;
  
  struct AGG1STORE_SALES1STORE_SALES3_entry {
    long AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK; STRING_TYPE ITEM_I_ITEM_ID; long __av; 
    explicit AGG1STORE_SALES1STORE_SALES3_entry() { /*AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK = 0L; ITEM_I_ITEM_ID = ""; __av = 0L; */ }
    explicit AGG1STORE_SALES1STORE_SALES3_entry(const long c0, const STRING_TYPE& c1, const long c2) { AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK = c0; ITEM_I_ITEM_ID = c1; __av = c2; }
    AGG1STORE_SALES1STORE_SALES3_entry(const AGG1STORE_SALES1STORE_SALES3_entry& other) : AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK( other.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK ), ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG1STORE_SALES1STORE_SALES3_entry& modify(const long c0, const STRING_TYPE& c1) { AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK = c0; ITEM_I_ITEM_ID = c1;  return *this; }
    FORCE_INLINE AGG1STORE_SALES1STORE_SALES3_entry& modify0(const long c0) { AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1STORE_SALES1STORE_SALES3_mapkey01_idxfn {
    FORCE_INLINE static size_t hash(const AGG1STORE_SALES1STORE_SALES3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK);
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1STORE_SALES1STORE_SALES3_entry& x, const AGG1STORE_SALES1STORE_SALES3_entry& y) {
      return x.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK == y.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK && x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  struct AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1STORE_SALES1STORE_SALES3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1STORE_SALES1STORE_SALES3_entry& x, const AGG1STORE_SALES1STORE_SALES3_entry& y) {
      return x.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK == y.AGG1STORE_SALES1STORE_SALESSTORE_SALES_SS_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG1STORE_SALES1STORE_SALES3_entry,long,
    HashIndex<AGG1STORE_SALES1STORE_SALES3_entry,long,AGG1STORE_SALES1STORE_SALES3_mapkey01_idxfn,true>,
    HashIndex<AGG1STORE_SALES1STORE_SALES3_entry,long,AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn,false>
  > AGG1STORE_SALES1STORE_SALES3_map;
  typedef HashIndex<AGG1STORE_SALES1STORE_SALES3_entry,long,AGG1STORE_SALES1STORE_SALES3_mapkey01_idxfn,true> HashIndex_AGG1STORE_SALES1STORE_SALES3_map_01;
  typedef HashIndex<AGG1STORE_SALES1STORE_SALES3_entry,long,AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn,false> HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0;
  
  struct AGG1STORE_SALES1_L1_1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; long __av; 
    explicit AGG1STORE_SALES1_L1_1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0L; */ }
    explicit AGG1STORE_SALES1_L1_1_entry(const STRING_TYPE& c0, const long c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG1STORE_SALES1_L1_1_entry(const AGG1STORE_SALES1_L1_1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG1STORE_SALES1_L1_1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG1STORE_SALES1_L1_1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG1STORE_SALES1_L1_1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG1STORE_SALES1_L1_1_entry& x, const AGG1STORE_SALES1_L1_1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG1STORE_SALES1_L1_1_entry,long,
    HashIndex<AGG1STORE_SALES1_L1_1_entry,long,AGG1STORE_SALES1_L1_1_mapkey0_idxfn,true>
  > AGG1STORE_SALES1_L1_1_map;
  typedef HashIndex<AGG1STORE_SALES1_L1_1_entry,long,AGG1STORE_SALES1_L1_1_mapkey0_idxfn,true> HashIndex_AGG1STORE_SALES1_L1_1_map_0;
  
  struct AGG2_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG2_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG2_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG2_entry(const AGG2_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG2_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG2_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG2_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG2_entry& x, const AGG2_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG2_entry,DOUBLE_TYPE,
    HashIndex<AGG2_entry,DOUBLE_TYPE,AGG2_mapkey0_idxfn,true>
  > AGG2_map;
  typedef HashIndex<AGG2_entry,DOUBLE_TYPE,AGG2_mapkey0_idxfn,true> HashIndex_AGG2_map_0;
  
  struct AGG2ITEM7_entry {
    long AGG2ITEMITEM_I_ITEM_SK; DOUBLE_TYPE __av; 
    explicit AGG2ITEM7_entry() { /*AGG2ITEMITEM_I_ITEM_SK = 0L; __av = 0.0; */ }
    explicit AGG2ITEM7_entry(const long c0, const DOUBLE_TYPE c1) { AGG2ITEMITEM_I_ITEM_SK = c0; __av = c1; }
    AGG2ITEM7_entry(const AGG2ITEM7_entry& other) : AGG2ITEMITEM_I_ITEM_SK( other.AGG2ITEMITEM_I_ITEM_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG2ITEM7_entry& modify(const long c0) { AGG2ITEMITEM_I_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG2ITEMITEM_I_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG2ITEM7_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG2ITEM7_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG2ITEMITEM_I_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG2ITEM7_entry& x, const AGG2ITEM7_entry& y) {
      return x.AGG2ITEMITEM_I_ITEM_SK == y.AGG2ITEMITEM_I_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG2ITEM7_entry,DOUBLE_TYPE,
    HashIndex<AGG2ITEM7_entry,DOUBLE_TYPE,AGG2ITEM7_mapkey0_idxfn,true>
  > AGG2ITEM7_map;
  typedef HashIndex<AGG2ITEM7_entry,DOUBLE_TYPE,AGG2ITEM7_mapkey0_idxfn,true> HashIndex_AGG2ITEM7_map_0;
  
  struct AGG2STORE_SALES1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG2STORE_SALES1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG2STORE_SALES1_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG2STORE_SALES1_entry(const AGG2STORE_SALES1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG2STORE_SALES1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG2STORE_SALES1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG2STORE_SALES1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG2STORE_SALES1_entry& x, const AGG2STORE_SALES1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG2STORE_SALES1_entry,DOUBLE_TYPE,
    HashIndex<AGG2STORE_SALES1_entry,DOUBLE_TYPE,AGG2STORE_SALES1_mapkey0_idxfn,true>
  > AGG2STORE_SALES1_map;
  typedef HashIndex<AGG2STORE_SALES1_entry,DOUBLE_TYPE,AGG2STORE_SALES1_mapkey0_idxfn,true> HashIndex_AGG2STORE_SALES1_map_0;
  
  struct AGG3_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG3_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG3_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG3_entry(const AGG3_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG3_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG3_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG3_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG3_entry& x, const AGG3_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG3_entry,DOUBLE_TYPE,
    HashIndex<AGG3_entry,DOUBLE_TYPE,AGG3_mapkey0_idxfn,true>
  > AGG3_map;
  typedef HashIndex<AGG3_entry,DOUBLE_TYPE,AGG3_mapkey0_idxfn,true> HashIndex_AGG3_map_0;
  
  struct AGG3ITEM7_entry {
    long AGG3ITEMITEM_I_ITEM_SK; DOUBLE_TYPE __av; 
    explicit AGG3ITEM7_entry() { /*AGG3ITEMITEM_I_ITEM_SK = 0L; __av = 0.0; */ }
    explicit AGG3ITEM7_entry(const long c0, const DOUBLE_TYPE c1) { AGG3ITEMITEM_I_ITEM_SK = c0; __av = c1; }
    AGG3ITEM7_entry(const AGG3ITEM7_entry& other) : AGG3ITEMITEM_I_ITEM_SK( other.AGG3ITEMITEM_I_ITEM_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG3ITEM7_entry& modify(const long c0) { AGG3ITEMITEM_I_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG3ITEMITEM_I_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG3ITEM7_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG3ITEM7_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG3ITEMITEM_I_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG3ITEM7_entry& x, const AGG3ITEM7_entry& y) {
      return x.AGG3ITEMITEM_I_ITEM_SK == y.AGG3ITEMITEM_I_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG3ITEM7_entry,DOUBLE_TYPE,
    HashIndex<AGG3ITEM7_entry,DOUBLE_TYPE,AGG3ITEM7_mapkey0_idxfn,true>
  > AGG3ITEM7_map;
  typedef HashIndex<AGG3ITEM7_entry,DOUBLE_TYPE,AGG3ITEM7_mapkey0_idxfn,true> HashIndex_AGG3ITEM7_map_0;
  
  struct AGG3STORE_SALES1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG3STORE_SALES1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG3STORE_SALES1_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG3STORE_SALES1_entry(const AGG3STORE_SALES1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG3STORE_SALES1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG3STORE_SALES1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG3STORE_SALES1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG3STORE_SALES1_entry& x, const AGG3STORE_SALES1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG3STORE_SALES1_entry,DOUBLE_TYPE,
    HashIndex<AGG3STORE_SALES1_entry,DOUBLE_TYPE,AGG3STORE_SALES1_mapkey0_idxfn,true>
  > AGG3STORE_SALES1_map;
  typedef HashIndex<AGG3STORE_SALES1_entry,DOUBLE_TYPE,AGG3STORE_SALES1_mapkey0_idxfn,true> HashIndex_AGG3STORE_SALES1_map_0;
  
  struct AGG4_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG4_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG4_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG4_entry(const AGG4_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG4_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG4_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG4_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG4_entry& x, const AGG4_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG4_entry,DOUBLE_TYPE,
    HashIndex<AGG4_entry,DOUBLE_TYPE,AGG4_mapkey0_idxfn,true>
  > AGG4_map;
  typedef HashIndex<AGG4_entry,DOUBLE_TYPE,AGG4_mapkey0_idxfn,true> HashIndex_AGG4_map_0;
  
  struct AGG4ITEM7_entry {
    long AGG4ITEMITEM_I_ITEM_SK; DOUBLE_TYPE __av; 
    explicit AGG4ITEM7_entry() { /*AGG4ITEMITEM_I_ITEM_SK = 0L; __av = 0.0; */ }
    explicit AGG4ITEM7_entry(const long c0, const DOUBLE_TYPE c1) { AGG4ITEMITEM_I_ITEM_SK = c0; __av = c1; }
    AGG4ITEM7_entry(const AGG4ITEM7_entry& other) : AGG4ITEMITEM_I_ITEM_SK( other.AGG4ITEMITEM_I_ITEM_SK ), __av( other.__av ) {}
    FORCE_INLINE AGG4ITEM7_entry& modify(const long c0) { AGG4ITEMITEM_I_ITEM_SK = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, AGG4ITEMITEM_I_ITEM_SK);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG4ITEM7_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG4ITEM7_entry& e) {
      size_t h = 0;
      hash_combine(h, e.AGG4ITEMITEM_I_ITEM_SK);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG4ITEM7_entry& x, const AGG4ITEM7_entry& y) {
      return x.AGG4ITEMITEM_I_ITEM_SK == y.AGG4ITEMITEM_I_ITEM_SK;
    }
  };
  
  typedef MultiHashMap<AGG4ITEM7_entry,DOUBLE_TYPE,
    HashIndex<AGG4ITEM7_entry,DOUBLE_TYPE,AGG4ITEM7_mapkey0_idxfn,true>
  > AGG4ITEM7_map;
  typedef HashIndex<AGG4ITEM7_entry,DOUBLE_TYPE,AGG4ITEM7_mapkey0_idxfn,true> HashIndex_AGG4ITEM7_map_0;
  
  struct AGG4STORE_SALES1_entry {
    STRING_TYPE ITEM_I_ITEM_ID; DOUBLE_TYPE __av; 
    explicit AGG4STORE_SALES1_entry() { /*ITEM_I_ITEM_ID = ""; __av = 0.0; */ }
    explicit AGG4STORE_SALES1_entry(const STRING_TYPE& c0, const DOUBLE_TYPE c1) { ITEM_I_ITEM_ID = c0; __av = c1; }
    AGG4STORE_SALES1_entry(const AGG4STORE_SALES1_entry& other) : ITEM_I_ITEM_ID( other.ITEM_I_ITEM_ID ), __av( other.__av ) {}
    FORCE_INLINE AGG4STORE_SALES1_entry& modify(const STRING_TYPE& c0) { ITEM_I_ITEM_ID = c0;  return *this; }
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const 
    {
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, ITEM_I_ITEM_ID);
      ar << ELEM_SEPARATOR;
      DBT_SERIALIZATION_NVP(ar, __av);
    }
  };
  struct AGG4STORE_SALES1_mapkey0_idxfn {
    FORCE_INLINE static size_t hash(const AGG4STORE_SALES1_entry& e) {
      size_t h = 0;
      hash_combine(h, e.ITEM_I_ITEM_ID);
      return h;
    }
    FORCE_INLINE static bool equals(const AGG4STORE_SALES1_entry& x, const AGG4STORE_SALES1_entry& y) {
      return x.ITEM_I_ITEM_ID == y.ITEM_I_ITEM_ID;
    }
  };
  
  typedef MultiHashMap<AGG4STORE_SALES1_entry,DOUBLE_TYPE,
    HashIndex<AGG4STORE_SALES1_entry,DOUBLE_TYPE,AGG4STORE_SALES1_mapkey0_idxfn,true>
  > AGG4STORE_SALES1_map;
  typedef HashIndex<AGG4STORE_SALES1_entry,DOUBLE_TYPE,AGG4STORE_SALES1_mapkey0_idxfn,true> HashIndex_AGG4STORE_SALES1_map_0;
  
  
  
  /* Type definition providing a way to access the results of the sql program */
  struct tlq_t{
    struct timeval t0,t; long tT,tN,tS;
    tlq_t(): tN(0), tS(0) { gettimeofday(&t0,NULL); }
  
  /* Serialization Code */
    template<class Archive>
    void serialize(Archive& ar, const unsigned int version) const {
  
      ar << "\n";
      const AGG1_map& _AGG1 = get_AGG1();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(AGG1), _AGG1, "\t");
      ar << "\n";
      const AGG2_map& _AGG2 = get_AGG2();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(AGG2), _AGG2, "\t");
      ar << "\n";
      const AGG3_map& _AGG3 = get_AGG3();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(AGG3), _AGG3, "\t");
      ar << "\n";
      const AGG4_map& _AGG4 = get_AGG4();
      dbtoaster::serialize_nvp_tabbed(ar, STRING_TYPE(AGG4), _AGG4, "\t");
  
    }
  
    /* Functions returning / computing the results of top level queries */
    const AGG1_map& get_AGG1() const {
      return AGG1;
    
    }
    const AGG2_map& get_AGG2() const {
      return AGG2;
    
    }
    const AGG3_map& get_AGG3() const {
      return AGG3;
    
    }
    const AGG4_map& get_AGG4() const {
      return AGG4;
    
    }
  
  protected:
  
    /* Data structures used for storing / computing top level queries */
    AGG1_map AGG1;
    AGG2_map AGG2;
    AGG3_map AGG3;
    AGG4_map AGG4;
  
  };
  
  /* Type definition providing a way to incrementally maintain the results of the sql program */
  struct data_t : tlq_t{
    data_t(): tlq_t() {
      c1 = STRING_TYPE("F");
      c4 = STRING_TYPE("N");
      c2 = STRING_TYPE("W");
      c3 = STRING_TYPE("Primary");
    }
  
  
    /* Trigger functions for table relations */
    void on_insert_DATE_DIM(const long date_dim_d_date_sk, const STRING_TYPE date_dim_d_date_id, const date date_dim_d_date, const long date_dim_d_month_seq, const long date_dim_d_week_seq, const long date_dim_d_quarter_seq, const long date_dim_d_year, const long date_dim_d_dow, const long date_dim_d_moy, const long date_dim_d_dom, const long date_dim_d_qoy, const long date_dim_d_fy_year, const long date_dim_d_fy_quarter_seq, const long date_dim_d_fy_week_seq, const STRING_TYPE date_dim_d_day_name, const STRING_TYPE date_dim_d_quarter_name, const STRING_TYPE date_dim_d_holiday, const STRING_TYPE date_dim_d_weekend, const STRING_TYPE date_dim_d_following_holiday, const long date_dim_d_first_dom, const long date_dim_d_last_dom, const long date_dim_d_same_day_ly, const long date_dim_d_same_day_lq, const STRING_TYPE date_dim_d_current_day, const STRING_TYPE date_dim_d_current_week, const STRING_TYPE date_dim_d_current_month, const STRING_TYPE date_dim_d_current_quarter, const STRING_TYPE date_dim_d_current_year) {
      DATE_DIM_entry e(date_dim_d_date_sk, date_dim_d_date_id, date_dim_d_date, date_dim_d_month_seq, date_dim_d_week_seq, date_dim_d_quarter_seq, date_dim_d_year, date_dim_d_dow, date_dim_d_moy, date_dim_d_dom, date_dim_d_qoy, date_dim_d_fy_year, date_dim_d_fy_quarter_seq, date_dim_d_fy_week_seq, date_dim_d_day_name, date_dim_d_quarter_name, date_dim_d_holiday, date_dim_d_weekend, date_dim_d_following_holiday, date_dim_d_first_dom, date_dim_d_last_dom, date_dim_d_same_day_ly, date_dim_d_same_day_lq, date_dim_d_current_day, date_dim_d_current_week, date_dim_d_current_month, date_dim_d_current_quarter, date_dim_d_current_year, 1L);
      DATE_DIM.addOrDelOnZero(e,1L);
    }
    
    void on_insert_CUSTOMER_DEMOGRAPHICS(const long customer_demographics_cd_demo_sk, const STRING_TYPE customer_demographics_cd_gender, const STRING_TYPE customer_demographics_cd_marital_status, const STRING_TYPE customer_demographics_cd_education_status, const long customer_demographics_cd_purchase_estimate, const STRING_TYPE customer_demographics_cd_credit_rating, const long customer_demographics_cd_dep_count, const long customer_demographics_cd_dep_employed_count, const long customer_demographics_cd_dep_college_count) {
      CUSTOMER_DEMOGRAPHICS_entry e(customer_demographics_cd_demo_sk, customer_demographics_cd_gender, customer_demographics_cd_marital_status, customer_demographics_cd_education_status, customer_demographics_cd_purchase_estimate, customer_demographics_cd_credit_rating, customer_demographics_cd_dep_count, customer_demographics_cd_dep_employed_count, customer_demographics_cd_dep_college_count, 1L);
      CUSTOMER_DEMOGRAPHICS.addOrDelOnZero(e,1L);
    }
    
    void on_insert_PROMOTION(const long promotion_p_promo_sk, const STRING_TYPE promotion_p_promo_id, const long promotion_p_start_date_sk, const long promotion_p_end_date_sk, const long promotion_p_item_sk, const DOUBLE_TYPE promotion_p_cost, const long promotion_p_response_target, const STRING_TYPE promotion_p_promo_name, const STRING_TYPE promotion_p_channel_dmail, const STRING_TYPE promotion_p_channel_email, const STRING_TYPE promotion_p_channel_catalog, const STRING_TYPE promotion_p_channel_tv, const STRING_TYPE promotion_p_channel_radio, const STRING_TYPE promotion_p_channel_press, const STRING_TYPE promotion_p_channel_event, const STRING_TYPE promotion_p_channel_demo, const STRING_TYPE promotion_p_channel_details, const STRING_TYPE promotion_p_purpose, const STRING_TYPE promotion_p_discount_active) {
      PROMOTION_entry e(promotion_p_promo_sk, promotion_p_promo_id, promotion_p_start_date_sk, promotion_p_end_date_sk, promotion_p_item_sk, promotion_p_cost, promotion_p_response_target, promotion_p_promo_name, promotion_p_channel_dmail, promotion_p_channel_email, promotion_p_channel_catalog, promotion_p_channel_tv, promotion_p_channel_radio, promotion_p_channel_press, promotion_p_channel_event, promotion_p_channel_demo, promotion_p_channel_details, promotion_p_purpose, promotion_p_discount_active, 1L);
      PROMOTION.addOrDelOnZero(e,1L);
    }
    
    
    
    /* Trigger functions for stream relations */
    void on_insert_STORE_SALES(const long store_sales_ss_sold_date_sk, const long store_sales_ss_sold_time_sk, const long store_sales_ss_item_sk, const long store_sales_ss_customer_sk, const long store_sales_ss_cdemo_sk, const long store_sales_ss_hdemo_sk, const long store_sales_ss_addr_sk, const long store_sales_ss_store_sk, const long store_sales_ss_promo_sk, const long store_sales_ss_ticket_number, const long store_sales_ss_quantity, const DOUBLE_TYPE store_sales_ss_wholesale_cost, const DOUBLE_TYPE store_sales_ss_list_price, const DOUBLE_TYPE store_sales_ss_sales_price, const DOUBLE_TYPE store_sales_ss_ext_discount_amt, const DOUBLE_TYPE store_sales_ss_ext_sales_price, const DOUBLE_TYPE store_sales_ss_ext_wholesale_cost, const DOUBLE_TYPE store_sales_ss_ext_list_price, const DOUBLE_TYPE store_sales_ss_ext_tax, const DOUBLE_TYPE store_sales_ss_coupon_amt, const DOUBLE_TYPE store_sales_ss_net_paid, const DOUBLE_TYPE store_sales_ss_net_paid_inc_tax, const DOUBLE_TYPE store_sales_ss_net_profit) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        AGG1ITEM1_L1_2.addOrDelOnZero(se1.modify(store_sales_ss_item_sk),(AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se2.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se3.modify(store_sales_ss_sold_date_sk)) * AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se4.modify(store_sales_ss_promo_sk)))));
        AGG1ITEM7.addOrDelOnZero(se5.modify(store_sales_ss_item_sk),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se6.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se7.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se8.modify(store_sales_ss_promo_sk)) * store_sales_ss_quantity))));
        { //slice 
          const HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0* i1 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0*>(AGG1STORE_SALES1STORE_SALES3.index[1]);
          const HASH_RES_t h1 = AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::hash(se13.modify0(store_sales_ss_item_sk));
          HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode* n1 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode*>(i1->slice(se13, h1));
          AGG1STORE_SALES1STORE_SALES3_entry* e1;
         
          if (n1 && (e1 = n1->obj)) {
            do {                
              STRING_TYPE item_i_item_id = e1->ITEM_I_ITEM_ID;
              long v1 = e1->__av;
              AGG1STORE_SALES1.addOrDelOnZero(se9.modify(item_i_item_id),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se10.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se11.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se12.modify(store_sales_ss_promo_sk)) * (v1 * store_sales_ss_quantity)))));
              n1 = n1->nxt;
            } while (n1 && (e1 = n1->obj) && h1 == n1->hash &&  AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::equals(se13, *e1)); 
          }
        }{ //slice 
          const HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0* i2 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0*>(AGG1STORE_SALES1STORE_SALES3.index[1]);
          const HASH_RES_t h2 = AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::hash(se18.modify0(store_sales_ss_item_sk));
          HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode* n2 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode*>(i2->slice(se18, h2));
          AGG1STORE_SALES1STORE_SALES3_entry* e2;
         
          if (n2 && (e2 = n2->obj)) {
            do {                
              STRING_TYPE item_i_item_id = e2->ITEM_I_ITEM_ID;
              long v2 = e2->__av;
              AGG1STORE_SALES1_L1_1.addOrDelOnZero(se14.modify(item_i_item_id),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se15.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se16.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se17.modify(store_sales_ss_promo_sk)) * v2))));
              n2 = n2->nxt;
            } while (n2 && (e2 = n2->obj) && h2 == n2->hash &&  AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::equals(se18, *e2)); 
          }
        }AGG2ITEM7.addOrDelOnZero(se19.modify(store_sales_ss_item_sk),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se20.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se21.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se22.modify(store_sales_ss_promo_sk)) * store_sales_ss_list_price))));
        { //slice 
          const HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0* i3 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0*>(AGG1STORE_SALES1STORE_SALES3.index[1]);
          const HASH_RES_t h3 = AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::hash(se27.modify0(store_sales_ss_item_sk));
          HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode* n3 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode*>(i3->slice(se27, h3));
          AGG1STORE_SALES1STORE_SALES3_entry* e3;
         
          if (n3 && (e3 = n3->obj)) {
            do {                
              STRING_TYPE item_i_item_id = e3->ITEM_I_ITEM_ID;
              long v3 = e3->__av;
              AGG2STORE_SALES1.addOrDelOnZero(se23.modify(item_i_item_id),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se24.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se25.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se26.modify(store_sales_ss_promo_sk)) * (v3 * store_sales_ss_list_price)))));
              n3 = n3->nxt;
            } while (n3 && (e3 = n3->obj) && h3 == n3->hash &&  AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::equals(se27, *e3)); 
          }
        }AGG3ITEM7.addOrDelOnZero(se28.modify(store_sales_ss_item_sk),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se29.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se30.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se31.modify(store_sales_ss_promo_sk)) * store_sales_ss_coupon_amt))));
        { //slice 
          const HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0* i4 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0*>(AGG1STORE_SALES1STORE_SALES3.index[1]);
          const HASH_RES_t h4 = AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::hash(se36.modify0(store_sales_ss_item_sk));
          HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode* n4 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode*>(i4->slice(se36, h4));
          AGG1STORE_SALES1STORE_SALES3_entry* e4;
         
          if (n4 && (e4 = n4->obj)) {
            do {                
              STRING_TYPE item_i_item_id = e4->ITEM_I_ITEM_ID;
              long v4 = e4->__av;
              AGG3STORE_SALES1.addOrDelOnZero(se32.modify(item_i_item_id),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se33.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se34.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se35.modify(store_sales_ss_promo_sk)) * (v4 * store_sales_ss_coupon_amt)))));
              n4 = n4->nxt;
            } while (n4 && (e4 = n4->obj) && h4 == n4->hash &&  AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::equals(se36, *e4)); 
          }
        }AGG4ITEM7.addOrDelOnZero(se37.modify(store_sales_ss_item_sk),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se38.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se39.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se40.modify(store_sales_ss_promo_sk)) * store_sales_ss_sales_price))));
        { //slice 
          const HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0* i5 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0*>(AGG1STORE_SALES1STORE_SALES3.index[1]);
          const HASH_RES_t h5 = AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::hash(se45.modify0(store_sales_ss_item_sk));
          HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode* n5 = static_cast<HashIndex_AGG1STORE_SALES1STORE_SALES3_map_0::IdxNode*>(i5->slice(se45, h5));
          AGG1STORE_SALES1STORE_SALES3_entry* e5;
         
          if (n5 && (e5 = n5->obj)) {
            do {                
              STRING_TYPE item_i_item_id = e5->ITEM_I_ITEM_ID;
              long v5 = e5->__av;
              AGG4STORE_SALES1.addOrDelOnZero(se41.modify(item_i_item_id),(AGG1ITEM1_L1_2STORE_SALES2.getValueOrDefault(se42.modify(store_sales_ss_sold_date_sk)) * (AGG1ITEM1_L1_2STORE_SALES1.getValueOrDefault(se43.modify(store_sales_ss_cdemo_sk)) * (AGG1ITEM1_L1_2STORE_SALES3.getValueOrDefault(se44.modify(store_sales_ss_promo_sk)) * (v5 * store_sales_ss_sales_price)))));
              n5 = n5->nxt;
            } while (n5 && (e5 = n5->obj) && h5 == n5->hash &&  AGG1STORE_SALES1STORE_SALES3_mapkey0_idxfn::equals(se45, *e5)); 
          }
        }AGG1.clear();
        {  // foreach
          const HashIndex_AGG1STORE_SALES1_map_0* i6 = static_cast<HashIndex_AGG1STORE_SALES1_map_0*>(AGG1STORE_SALES1.index[0]);
          HashIndex_AGG1STORE_SALES1_map_0::IdxNode* n6; 
          AGG1STORE_SALES1_entry* e6;
        
          for (size_t i = 0; i < i6->size_; i++)
          {
            n6 = i6->buckets_ + i;
            while (n6 && (e6 = n6->obj))
            {
                STRING_TYPE item_i_item_id = e6->ITEM_I_ITEM_ID;
                long v6 = e6->__av;
                DOUBLE_TYPE agg1 = 0.0;
                long l1 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se47.modify(item_i_item_id));
                (/*if */(0L != l1) ? agg1 += Udiv(Ulistmax(1L, l1)) : 0.0);
                AGG1.addOrDelOnZero(se46.modify(item_i_item_id),(v6 * agg1));
              n6 = n6->nxt;
            }
          }
        }AGG2.clear();
        {  // foreach
          const HashIndex_AGG2STORE_SALES1_map_0* i7 = static_cast<HashIndex_AGG2STORE_SALES1_map_0*>(AGG2STORE_SALES1.index[0]);
          HashIndex_AGG2STORE_SALES1_map_0::IdxNode* n7; 
          AGG2STORE_SALES1_entry* e7;
        
          for (size_t i = 0; i < i7->size_; i++)
          {
            n7 = i7->buckets_ + i;
            while (n7 && (e7 = n7->obj))
            {
                STRING_TYPE item_i_item_id = e7->ITEM_I_ITEM_ID;
                DOUBLE_TYPE v7 = e7->__av;
                DOUBLE_TYPE agg2 = 0.0;
                long l2 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se49.modify(item_i_item_id));
                (/*if */(0L != l2) ? agg2 += Udiv(Ulistmax(1L, l2)) : 0.0);
                AGG2.addOrDelOnZero(se48.modify(item_i_item_id),(v7 * agg2));
              n7 = n7->nxt;
            }
          }
        }AGG3.clear();
        {  // foreach
          const HashIndex_AGG3STORE_SALES1_map_0* i8 = static_cast<HashIndex_AGG3STORE_SALES1_map_0*>(AGG3STORE_SALES1.index[0]);
          HashIndex_AGG3STORE_SALES1_map_0::IdxNode* n8; 
          AGG3STORE_SALES1_entry* e8;
        
          for (size_t i = 0; i < i8->size_; i++)
          {
            n8 = i8->buckets_ + i;
            while (n8 && (e8 = n8->obj))
            {
                STRING_TYPE item_i_item_id = e8->ITEM_I_ITEM_ID;
                DOUBLE_TYPE v8 = e8->__av;
                DOUBLE_TYPE agg3 = 0.0;
                long l3 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se51.modify(item_i_item_id));
                (/*if */(0L != l3) ? agg3 += Udiv(Ulistmax(1L, l3)) : 0.0);
                AGG3.addOrDelOnZero(se50.modify(item_i_item_id),(v8 * agg3));
              n8 = n8->nxt;
            }
          }
        }AGG4.clear();
        {  // foreach
          const HashIndex_AGG4STORE_SALES1_map_0* i9 = static_cast<HashIndex_AGG4STORE_SALES1_map_0*>(AGG4STORE_SALES1.index[0]);
          HashIndex_AGG4STORE_SALES1_map_0::IdxNode* n9; 
          AGG4STORE_SALES1_entry* e9;
        
          for (size_t i = 0; i < i9->size_; i++)
          {
            n9 = i9->buckets_ + i;
            while (n9 && (e9 = n9->obj))
            {
                STRING_TYPE item_i_item_id = e9->ITEM_I_ITEM_ID;
                DOUBLE_TYPE v9 = e9->__av;
                DOUBLE_TYPE agg4 = 0.0;
                long l4 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se53.modify(item_i_item_id));
                (/*if */(0L != l4) ? agg4 += Udiv(Ulistmax(1L, l4)) : 0.0);
                AGG4.addOrDelOnZero(se52.modify(item_i_item_id),(v9 * agg4));
              n9 = n9->nxt;
            }
          }
        }
      }
    }
    void on_insert_ITEM(const long item_i_item_sk, const STRING_TYPE& item_i_item_id, const date item_i_rec_start_date, const date item_i_rec_end_date, const STRING_TYPE& item_i_item_desc, const DOUBLE_TYPE item_i_current_price, const DOUBLE_TYPE item_i_wholesale_cost, const long item_i_brand_id, const STRING_TYPE& item_i_brand, const long item_i_class_id, const STRING_TYPE& item_i_class, const long item_i_category_id, const STRING_TYPE& item_i_category, const long item_i_manufact_id, const STRING_TYPE& item_i_manufact, const STRING_TYPE& item_i_size, const STRING_TYPE& item_i_formulation, const STRING_TYPE& item_i_color, const STRING_TYPE& item_i_units, const STRING_TYPE& item_i_container, const long item_i_manager_id, const STRING_TYPE& item_i_product_name) {
      {  if (tS>0) { ++tS; return; } if ((tN&127)==0) { gettimeofday(&(t),NULL); tT=((t).tv_sec-(t0).tv_sec)*1000000L+((t).tv_usec-(t0).tv_usec); if (tT>3600000000L) { tS=1; return; } } ++tN;
        DOUBLE_TYPE agg5 = 0.0;
        long l5 = (AGG1STORE_SALES1_L1_1.getValueOrDefault(se57.modify(item_i_item_id)) + AGG1ITEM1_L1_2.getValueOrDefault(se58.modify(item_i_item_sk)));
        (/*if */(0L != l5) ? agg5 += Udiv(Ulistmax(1L, l5)) : 0.0);
        DOUBLE_TYPE agg6 = 0.0;
        long l6 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se60.modify(item_i_item_id));
        (/*if */(0L != l6) ? agg6 += Udiv(Ulistmax(1L, l6)) : 0.0);
        AGG1.addOrDelOnZero(se54.modify(item_i_item_id),(((AGG1STORE_SALES1.getValueOrDefault(se55.modify(item_i_item_id)) + AGG1ITEM7.getValueOrDefault(se56.modify(item_i_item_sk))) * agg5) + (AGG1STORE_SALES1.getValueOrDefault(se59.modify(item_i_item_id)) * (agg6 * -1L))));
        AGG1STORE_SALES1.addOrDelOnZero(se61.modify(item_i_item_id),AGG1ITEM7.getValueOrDefault(se62.modify(item_i_item_sk)));
        AGG1STORE_SALES1STORE_SALES3.addOrDelOnZero(se63.modify(item_i_item_sk,item_i_item_id),1L);
        DOUBLE_TYPE agg7 = 0.0;
        long l7 = (AGG1STORE_SALES1_L1_1.getValueOrDefault(se67.modify(item_i_item_id)) + AGG1ITEM1_L1_2.getValueOrDefault(se68.modify(item_i_item_sk)));
        (/*if */(0L != l7) ? agg7 += Udiv(Ulistmax(1L, l7)) : 0.0);
        DOUBLE_TYPE agg8 = 0.0;
        long l8 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se70.modify(item_i_item_id));
        (/*if */(0L != l8) ? agg8 += Udiv(Ulistmax(1L, l8)) : 0.0);
        AGG2.addOrDelOnZero(se64.modify(item_i_item_id),(((AGG2STORE_SALES1.getValueOrDefault(se65.modify(item_i_item_id)) + AGG2ITEM7.getValueOrDefault(se66.modify(item_i_item_sk))) * agg7) + (AGG2STORE_SALES1.getValueOrDefault(se69.modify(item_i_item_id)) * (agg8 * -1L))));
        AGG2STORE_SALES1.addOrDelOnZero(se71.modify(item_i_item_id),AGG2ITEM7.getValueOrDefault(se72.modify(item_i_item_sk)));
        DOUBLE_TYPE agg9 = 0.0;
        long l9 = (AGG1STORE_SALES1_L1_1.getValueOrDefault(se76.modify(item_i_item_id)) + AGG1ITEM1_L1_2.getValueOrDefault(se77.modify(item_i_item_sk)));
        (/*if */(0L != l9) ? agg9 += Udiv(Ulistmax(1L, l9)) : 0.0);
        DOUBLE_TYPE agg10 = 0.0;
        long l10 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se79.modify(item_i_item_id));
        (/*if */(0L != l10) ? agg10 += Udiv(Ulistmax(1L, l10)) : 0.0);
        AGG3.addOrDelOnZero(se73.modify(item_i_item_id),(((AGG3STORE_SALES1.getValueOrDefault(se74.modify(item_i_item_id)) + AGG3ITEM7.getValueOrDefault(se75.modify(item_i_item_sk))) * agg9) + (AGG3STORE_SALES1.getValueOrDefault(se78.modify(item_i_item_id)) * (agg10 * -1L))));
        AGG3STORE_SALES1.addOrDelOnZero(se80.modify(item_i_item_id),AGG3ITEM7.getValueOrDefault(se81.modify(item_i_item_sk)));
        DOUBLE_TYPE agg11 = 0.0;
        long l11 = (AGG1STORE_SALES1_L1_1.getValueOrDefault(se85.modify(item_i_item_id)) + AGG1ITEM1_L1_2.getValueOrDefault(se86.modify(item_i_item_sk)));
        (/*if */(0L != l11) ? agg11 += Udiv(Ulistmax(1L, l11)) : 0.0);
        DOUBLE_TYPE agg12 = 0.0;
        long l12 = AGG1STORE_SALES1_L1_1.getValueOrDefault(se88.modify(item_i_item_id));
        (/*if */(0L != l12) ? agg12 += Udiv(Ulistmax(1L, l12)) : 0.0);
        AGG4.addOrDelOnZero(se82.modify(item_i_item_id),(((AGG4STORE_SALES1.getValueOrDefault(se83.modify(item_i_item_id)) + AGG4ITEM7.getValueOrDefault(se84.modify(item_i_item_sk))) * agg11) + (AGG4STORE_SALES1.getValueOrDefault(se87.modify(item_i_item_id)) * (agg12 * -1L))));
        AGG1STORE_SALES1_L1_1.addOrDelOnZero(se89.modify(item_i_item_id),AGG1ITEM1_L1_2.getValueOrDefault(se90.modify(item_i_item_sk)));
        AGG4STORE_SALES1.addOrDelOnZero(se91.modify(item_i_item_id),AGG4ITEM7.getValueOrDefault(se92.modify(item_i_item_sk)));
      }
    }
    void on_system_ready_event() {
      {  
        AGG1ITEM1_L1_2STORE_SALES1.clear();
        STRING_TYPE l13 = c1;
        STRING_TYPE l14 = c2;
        STRING_TYPE l15 = c3;
        { //slice 
          const HashIndex_CUSTOMER_DEMOGRAPHICS_map_123* i10 = static_cast<HashIndex_CUSTOMER_DEMOGRAPHICS_map_123*>(CUSTOMER_DEMOGRAPHICS.index[1]);
          const HASH_RES_t h6 = CUSTOMER_DEMOGRAPHICS_mapkey123_idxfn::hash(se94.modify123(l13, l14, l15));
          HashIndex_CUSTOMER_DEMOGRAPHICS_map_123::IdxNode* n10 = static_cast<HashIndex_CUSTOMER_DEMOGRAPHICS_map_123::IdxNode*>(i10->slice(se94, h6));
          CUSTOMER_DEMOGRAPHICS_entry* e10;
         
          if (n10 && (e10 = n10->obj)) {
            do {                
              long agg1item1_l1_2store_salesstore_sales_ss_cdemo_sk = e10->CUSTOMER_DEMOGRAPHICS_CD_DEMO_SK;
              long customer_demographics_cd_purchase_estimate = e10->CUSTOMER_DEMOGRAPHICS_CD_PURCHASE_ESTIMATE;
              STRING_TYPE customer_demographics_cd_credit_rating = e10->CUSTOMER_DEMOGRAPHICS_CD_CREDIT_RATING;
              long customer_demographics_cd_dep_count = e10->CUSTOMER_DEMOGRAPHICS_CD_DEP_COUNT;
              long customer_demographics_cd_dep_employed_count = e10->CUSTOMER_DEMOGRAPHICS_CD_DEP_EMPLOYED_COUNT;
              long customer_demographics_cd_dep_college_count = e10->CUSTOMER_DEMOGRAPHICS_CD_DEP_COLLEGE_COUNT;
              long v10 = e10->__av;
              AGG1ITEM1_L1_2STORE_SALES1.addOrDelOnZero(se93.modify(agg1item1_l1_2store_salesstore_sales_ss_cdemo_sk),v10);
              n10 = n10->nxt;
            } while (n10 && (e10 = n10->obj) && h6 == n10->hash &&  CUSTOMER_DEMOGRAPHICS_mapkey123_idxfn::equals(se94, *e10)); 
          }
        }AGG1ITEM1_L1_2STORE_SALES2.clear();
        long l16 = 1998L;
        { //slice 
          const HashIndex_DATE_DIM_map_6* i11 = static_cast<HashIndex_DATE_DIM_map_6*>(DATE_DIM.index[1]);
          const HASH_RES_t h7 = DATE_DIM_mapkey6_idxfn::hash(se96.modify6(l16));
          HashIndex_DATE_DIM_map_6::IdxNode* n11 = static_cast<HashIndex_DATE_DIM_map_6::IdxNode*>(i11->slice(se96, h7));
          DATE_DIM_entry* e11;
         
          if (n11 && (e11 = n11->obj)) {
            do {                
              long agg1item1_l1_2store_salesstore_sales_ss_sold_date_sk = e11->DATE_DIM_D_DATE_SK;
              STRING_TYPE date_dim_d_date_id = e11->DATE_DIM_D_DATE_ID;
              date date_dim_d_date = e11->DATE_DIM_D_DATE;
              long date_dim_d_month_seq = e11->DATE_DIM_D_MONTH_SEQ;
              long date_dim_d_week_seq = e11->DATE_DIM_D_WEEK_SEQ;
              long date_dim_d_quarter_seq = e11->DATE_DIM_D_QUARTER_SEQ;
              long date_dim_d_dow = e11->DATE_DIM_D_DOW;
              long date_dim_d_moy = e11->DATE_DIM_D_MOY;
              long date_dim_d_dom = e11->DATE_DIM_D_DOM;
              long date_dim_d_qoy = e11->DATE_DIM_D_QOY;
              long date_dim_d_fy_year = e11->DATE_DIM_D_FY_YEAR;
              long date_dim_d_fy_quarter_seq = e11->DATE_DIM_D_FY_QUARTER_SEQ;
              long date_dim_d_fy_week_seq = e11->DATE_DIM_D_FY_WEEK_SEQ;
              STRING_TYPE date_dim_d_day_name = e11->DATE_DIM_D_DAY_NAME;
              STRING_TYPE date_dim_d_quarter_name = e11->DATE_DIM_D_QUARTER_NAME;
              STRING_TYPE date_dim_d_holiday = e11->DATE_DIM_D_HOLIDAY;
              STRING_TYPE date_dim_d_weekend = e11->DATE_DIM_D_WEEKEND;
              STRING_TYPE date_dim_d_following_holiday = e11->DATE_DIM_D_FOLLOWING_HOLIDAY;
              long date_dim_d_first_dom = e11->DATE_DIM_D_FIRST_DOM;
              long date_dim_d_last_dom = e11->DATE_DIM_D_LAST_DOM;
              long date_dim_d_same_day_ly = e11->DATE_DIM_D_SAME_DAY_LY;
              long date_dim_d_same_day_lq = e11->DATE_DIM_D_SAME_DAY_LQ;
              STRING_TYPE date_dim_d_current_day = e11->DATE_DIM_D_CURRENT_DAY;
              STRING_TYPE date_dim_d_current_week = e11->DATE_DIM_D_CURRENT_WEEK;
              STRING_TYPE date_dim_d_current_month = e11->DATE_DIM_D_CURRENT_MONTH;
              STRING_TYPE date_dim_d_current_quarter = e11->DATE_DIM_D_CURRENT_QUARTER;
              STRING_TYPE date_dim_d_current_year = e11->DATE_DIM_D_CURRENT_YEAR;
              long v11 = e11->__av;
              AGG1ITEM1_L1_2STORE_SALES2.addOrDelOnZero(se95.modify(agg1item1_l1_2store_salesstore_sales_ss_sold_date_sk),v11);
              n11 = n11->nxt;
            } while (n11 && (e11 = n11->obj) && h7 == n11->hash &&  DATE_DIM_mapkey6_idxfn::equals(se96, *e11)); 
          }
        }AGG1ITEM1_L1_2STORE_SALES3.clear();
        {  // foreach
          const HashIndex_PROMOTION_map_0123456789101112131415161718* i12 = static_cast<HashIndex_PROMOTION_map_0123456789101112131415161718*>(PROMOTION.index[0]);
          HashIndex_PROMOTION_map_0123456789101112131415161718::IdxNode* n12; 
          PROMOTION_entry* e12;
        
          for (size_t i = 0; i < i12->size_; i++)
          {
            n12 = i12->buckets_ + i;
            while (n12 && (e12 = n12->obj))
            {
                long agg1item1_l1_2store_salesstore_sales_ss_promo_sk = e12->PROMOTION_P_PROMO_SK;
                STRING_TYPE promotion_p_promo_id = e12->PROMOTION_P_PROMO_ID;
                long promotion_p_start_date_sk = e12->PROMOTION_P_START_DATE_SK;
                long promotion_p_end_date_sk = e12->PROMOTION_P_END_DATE_SK;
                long promotion_p_item_sk = e12->PROMOTION_P_ITEM_SK;
                DOUBLE_TYPE promotion_p_cost = e12->PROMOTION_P_COST;
                long promotion_p_response_target = e12->PROMOTION_P_RESPONSE_TARGET;
                STRING_TYPE promotion_p_promo_name = e12->PROMOTION_P_PROMO_NAME;
                STRING_TYPE promotion_p_channel_dmail = e12->PROMOTION_P_CHANNEL_DMAIL;
                STRING_TYPE promotion_p_channel_email = e12->PROMOTION_P_CHANNEL_EMAIL;
                STRING_TYPE promotion_p_channel_catalog = e12->PROMOTION_P_CHANNEL_CATALOG;
                STRING_TYPE promotion_p_channel_tv = e12->PROMOTION_P_CHANNEL_TV;
                STRING_TYPE promotion_p_channel_radio = e12->PROMOTION_P_CHANNEL_RADIO;
                STRING_TYPE promotion_p_channel_press = e12->PROMOTION_P_CHANNEL_PRESS;
                STRING_TYPE promotion_p_channel_event = e12->PROMOTION_P_CHANNEL_EVENT;
                STRING_TYPE promotion_p_channel_demo = e12->PROMOTION_P_CHANNEL_DEMO;
                STRING_TYPE promotion_p_channel_details = e12->PROMOTION_P_CHANNEL_DETAILS;
                STRING_TYPE promotion_p_purpose = e12->PROMOTION_P_PURPOSE;
                STRING_TYPE promotion_p_discount_active = e12->PROMOTION_P_DISCOUNT_ACTIVE;
                long v12 = e12->__av;
                long l17 = ((/*if */(promotion_p_channel_email == c4) ? 1L : 0L) + (/*if */(promotion_p_channel_event == c4) ? 1L : 0L));
                (/*if */(l17 > 0L) ? AGG1ITEM1_L1_2STORE_SALES3.addOrDelOnZero(se97.modify(agg1item1_l1_2store_salesstore_sales_ss_promo_sk),v12) : (void)0);
              n12 = n12->nxt;
            }
          }
        }
      }
    }
  
  private:
  
    /* Sample entries for avoiding recreation of temporary objects */
    AGG1ITEM1_L1_2_entry se1;
    AGG1ITEM1_L1_2STORE_SALES1_entry se2;
    AGG1ITEM1_L1_2STORE_SALES2_entry se3;
    AGG1ITEM1_L1_2STORE_SALES3_entry se4;
    AGG1ITEM7_entry se5;
    AGG1ITEM1_L1_2STORE_SALES2_entry se6;
    AGG1ITEM1_L1_2STORE_SALES1_entry se7;
    AGG1ITEM1_L1_2STORE_SALES3_entry se8;
    AGG1STORE_SALES1_entry se9;
    AGG1ITEM1_L1_2STORE_SALES2_entry se10;
    AGG1ITEM1_L1_2STORE_SALES1_entry se11;
    AGG1ITEM1_L1_2STORE_SALES3_entry se12;
    AGG1STORE_SALES1STORE_SALES3_entry se13;
    AGG1STORE_SALES1_L1_1_entry se14;
    AGG1ITEM1_L1_2STORE_SALES2_entry se15;
    AGG1ITEM1_L1_2STORE_SALES1_entry se16;
    AGG1ITEM1_L1_2STORE_SALES3_entry se17;
    AGG1STORE_SALES1STORE_SALES3_entry se18;
    AGG2ITEM7_entry se19;
    AGG1ITEM1_L1_2STORE_SALES2_entry se20;
    AGG1ITEM1_L1_2STORE_SALES1_entry se21;
    AGG1ITEM1_L1_2STORE_SALES3_entry se22;
    AGG2STORE_SALES1_entry se23;
    AGG1ITEM1_L1_2STORE_SALES2_entry se24;
    AGG1ITEM1_L1_2STORE_SALES1_entry se25;
    AGG1ITEM1_L1_2STORE_SALES3_entry se26;
    AGG1STORE_SALES1STORE_SALES3_entry se27;
    AGG3ITEM7_entry se28;
    AGG1ITEM1_L1_2STORE_SALES2_entry se29;
    AGG1ITEM1_L1_2STORE_SALES1_entry se30;
    AGG1ITEM1_L1_2STORE_SALES3_entry se31;
    AGG3STORE_SALES1_entry se32;
    AGG1ITEM1_L1_2STORE_SALES2_entry se33;
    AGG1ITEM1_L1_2STORE_SALES1_entry se34;
    AGG1ITEM1_L1_2STORE_SALES3_entry se35;
    AGG1STORE_SALES1STORE_SALES3_entry se36;
    AGG4ITEM7_entry se37;
    AGG1ITEM1_L1_2STORE_SALES2_entry se38;
    AGG1ITEM1_L1_2STORE_SALES1_entry se39;
    AGG1ITEM1_L1_2STORE_SALES3_entry se40;
    AGG4STORE_SALES1_entry se41;
    AGG1ITEM1_L1_2STORE_SALES2_entry se42;
    AGG1ITEM1_L1_2STORE_SALES1_entry se43;
    AGG1ITEM1_L1_2STORE_SALES3_entry se44;
    AGG1STORE_SALES1STORE_SALES3_entry se45;
    AGG1_entry se46;
    AGG1STORE_SALES1_L1_1_entry se47;
    AGG2_entry se48;
    AGG1STORE_SALES1_L1_1_entry se49;
    AGG3_entry se50;
    AGG1STORE_SALES1_L1_1_entry se51;
    AGG4_entry se52;
    AGG1STORE_SALES1_L1_1_entry se53;
    AGG1_entry se54;
    AGG1STORE_SALES1_entry se55;
    AGG1ITEM7_entry se56;
    AGG1STORE_SALES1_L1_1_entry se57;
    AGG1ITEM1_L1_2_entry se58;
    AGG1STORE_SALES1_entry se59;
    AGG1STORE_SALES1_L1_1_entry se60;
    AGG1STORE_SALES1_entry se61;
    AGG1ITEM7_entry se62;
    AGG1STORE_SALES1STORE_SALES3_entry se63;
    AGG2_entry se64;
    AGG2STORE_SALES1_entry se65;
    AGG2ITEM7_entry se66;
    AGG1STORE_SALES1_L1_1_entry se67;
    AGG1ITEM1_L1_2_entry se68;
    AGG2STORE_SALES1_entry se69;
    AGG1STORE_SALES1_L1_1_entry se70;
    AGG2STORE_SALES1_entry se71;
    AGG2ITEM7_entry se72;
    AGG3_entry se73;
    AGG3STORE_SALES1_entry se74;
    AGG3ITEM7_entry se75;
    AGG1STORE_SALES1_L1_1_entry se76;
    AGG1ITEM1_L1_2_entry se77;
    AGG3STORE_SALES1_entry se78;
    AGG1STORE_SALES1_L1_1_entry se79;
    AGG3STORE_SALES1_entry se80;
    AGG3ITEM7_entry se81;
    AGG4_entry se82;
    AGG4STORE_SALES1_entry se83;
    AGG4ITEM7_entry se84;
    AGG1STORE_SALES1_L1_1_entry se85;
    AGG1ITEM1_L1_2_entry se86;
    AGG4STORE_SALES1_entry se87;
    AGG1STORE_SALES1_L1_1_entry se88;
    AGG1STORE_SALES1_L1_1_entry se89;
    AGG1ITEM1_L1_2_entry se90;
    AGG4STORE_SALES1_entry se91;
    AGG4ITEM7_entry se92;
    AGG1ITEM1_L1_2STORE_SALES1_entry se93;
    CUSTOMER_DEMOGRAPHICS_entry se94;
    AGG1ITEM1_L1_2STORE_SALES2_entry se95;
    DATE_DIM_entry se96;
    AGG1ITEM1_L1_2STORE_SALES3_entry se97;
  
    /* Data structures used for storing materialized views */
    DATE_DIM_map DATE_DIM;
    CUSTOMER_DEMOGRAPHICS_map CUSTOMER_DEMOGRAPHICS;
    PROMOTION_map PROMOTION;
    AGG1ITEM1_L1_2_map AGG1ITEM1_L1_2;
    AGG1ITEM1_L1_2STORE_SALES1_map AGG1ITEM1_L1_2STORE_SALES1;
    AGG1ITEM1_L1_2STORE_SALES2_map AGG1ITEM1_L1_2STORE_SALES2;
    AGG1ITEM1_L1_2STORE_SALES3_map AGG1ITEM1_L1_2STORE_SALES3;
    AGG1ITEM7_map AGG1ITEM7;
    AGG1STORE_SALES1_map AGG1STORE_SALES1;
    AGG1STORE_SALES1STORE_SALES3_map AGG1STORE_SALES1STORE_SALES3;
    AGG1STORE_SALES1_L1_1_map AGG1STORE_SALES1_L1_1;
    AGG2ITEM7_map AGG2ITEM7;
    AGG2STORE_SALES1_map AGG2STORE_SALES1;
    AGG3ITEM7_map AGG3ITEM7;
    AGG3STORE_SALES1_map AGG3STORE_SALES1;
    AGG4ITEM7_map AGG4ITEM7;
    AGG4STORE_SALES1_map AGG4STORE_SALES1;
    
    /*const static*/ STRING_TYPE c1;
    /*const static*/ STRING_TYPE c4;
    /*const static*/ STRING_TYPE c2;
    /*const static*/ STRING_TYPE c3;
  
  };

}
